
/Users/manuel/IoT_maps/gmaps-iot-v1/target/1.5.1/photon/gmaps-iot-v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00005d70  080a0020  080a0020  00010020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a5d90  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         000000f0  20000000  080a5d94  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000728  200000f0  200000f0  000400f0  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080a5e84  080a5e84  00035e84  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a5eac  080a5eac  00035eac  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000ac5ea  00000000  00000000  00035eb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000ecce  00000000  00000000  000e249a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00012df3  00000000  00000000  000f1168  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001c40  00000000  00000000  00103f5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00002ff0  00000000  00000000  00105b9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000233e4  00000000  00000000  00108b8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00021ce1  00000000  00000000  0012bf6f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000acc72  00000000  00000000  0014dc50  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000bac4  00000000  00000000  001fa8c4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a0020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0020:	4809      	ldr	r0, [pc, #36]	; (80a0048 <module_user_pre_init+0x28>)
 80a0022:	490a      	ldr	r1, [pc, #40]	; (80a004c <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0024:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0026:	4288      	cmp	r0, r1
 80a0028:	d005      	beq.n	80a0036 <module_user_pre_init+0x16>
 80a002a:	4a09      	ldr	r2, [pc, #36]	; (80a0050 <module_user_pre_init+0x30>)
 80a002c:	4282      	cmp	r2, r0
 80a002e:	d002      	beq.n	80a0036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a0030:	1a12      	subs	r2, r2, r0
 80a0032:	f003 f83b 	bl	80a30ac <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0036:	4807      	ldr	r0, [pc, #28]	; (80a0054 <module_user_pre_init+0x34>)
 80a0038:	4a07      	ldr	r2, [pc, #28]	; (80a0058 <module_user_pre_init+0x38>)
 80a003a:	2100      	movs	r1, #0
 80a003c:	1a12      	subs	r2, r2, r0
 80a003e:	f003 f840 	bl	80a30c2 <memset>
    return &link_heap_start;
}
 80a0042:	4806      	ldr	r0, [pc, #24]	; (80a005c <module_user_pre_init+0x3c>)
 80a0044:	bd08      	pop	{r3, pc}
 80a0046:	bf00      	nop
 80a0048:	20000000 	.word	0x20000000
 80a004c:	080a5d94 	.word	0x080a5d94
 80a0050:	200000f0 	.word	0x200000f0
 80a0054:	200000f0 	.word	0x200000f0
 80a0058:	20000818 	.word	0x20000818
 80a005c:	20000818 	.word	0x20000818

080a0060 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a0060:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a0062:	f001 fe4f 	bl	80a1d04 <module_user_init_hook>
 80a0066:	4b07      	ldr	r3, [pc, #28]	; (80a0084 <module_user_init+0x24>)
 80a0068:	4c07      	ldr	r4, [pc, #28]	; (80a0088 <module_user_init+0x28>)
 80a006a:	461e      	mov	r6, r3
 80a006c:	1ae4      	subs	r4, r4, r3
 80a006e:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0070:	2500      	movs	r5, #0
 80a0072:	42a5      	cmp	r5, r4
 80a0074:	d004      	beq.n	80a0080 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0076:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a007a:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a007c:	3501      	adds	r5, #1
 80a007e:	e7f8      	b.n	80a0072 <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a0080:	bd70      	pop	{r4, r5, r6, pc}
 80a0082:	bf00      	nop
 80a0084:	080a5d4c 	.word	0x080a5d4c
 80a0088:	080a5d84 	.word	0x080a5d84

080a008c <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a008c:	f000 b864 	b.w	80a0158 <setup>

080a0090 <module_user_loop>:
}

void module_user_loop() {
 80a0090:	b508      	push	{r3, lr}
    loop();
 80a0092:	f000 f8cd 	bl	80a0230 <loop>
    _post_loop();
}
 80a0096:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a009a:	f001 bdf5 	b.w	80a1c88 <_post_loop>

080a009e <_Znwj>:
 80a009e:	f000 bda9 	b.w	80a0bf4 <malloc>

080a00a2 <_ZdlPv>:
 80a00a2:	f000 bdaf 	b.w	80a0c04 <free>

080a00a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a6:	7800      	ldrb	r0, [r0, #0]
 80a00a8:	fab0 f080 	clz	r0, r0
 80a00ac:	0940      	lsrs	r0, r0, #5
 80a00ae:	4770      	bx	lr

080a00b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00b0:	2301      	movs	r3, #1
 80a00b2:	7003      	strb	r3, [r0, #0]
 80a00b4:	4770      	bx	lr
	...

080a00b8 <_Z16locationCallbackfff>:
void loop() {
	locator.loop();
    updateDisplay();
}

void locationCallback(float lat, float lon, float accuracy) {
 80a00b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a00bc:	b08a      	sub	sp, #40	; 0x28
 80a00be:	4614      	mov	r4, r2
 80a00c0:	460d      	mov	r5, r1
 80a00c2:	4606      	mov	r6, r0
  Serial.println("LocationCallback()");
 80a00c4:	f001 fcec 	bl	80a1aa0 <_Z16_fetch_usbserialv>
 80a00c8:	491e      	ldr	r1, [pc, #120]	; (80a0144 <_Z16locationCallbackfff+0x8c>)
 80a00ca:	f001 fa42 	bl	80a1552 <_ZN5Print7printlnEPKc>
	  Serial.printlnf("lat=%f lon=%f accuracy=%f", lat, lon, accuracy);
 80a00ce:	f001 fce7 	bl	80a1aa0 <_Z16_fetch_usbserialv>
 80a00d2:	4682      	mov	sl, r0
    }

    template <typename... Args>
    inline size_t printlnf(const char* format, Args... args)
    {
        return this->printf_impl(true, format, args...);
 80a00d4:	4630      	mov	r0, r6
 80a00d6:	f002 f969 	bl	80a23ac <__aeabi_f2d>
 80a00da:	4680      	mov	r8, r0
 80a00dc:	4628      	mov	r0, r5
 80a00de:	4689      	mov	r9, r1
 80a00e0:	f002 f964 	bl	80a23ac <__aeabi_f2d>
 80a00e4:	4606      	mov	r6, r0
 80a00e6:	4620      	mov	r0, r4
 80a00e8:	460f      	mov	r7, r1
 80a00ea:	f002 f95f 	bl	80a23ac <__aeabi_f2d>
 80a00ee:	4604      	mov	r4, r0
 80a00f0:	460d      	mov	r5, r1
 80a00f2:	4a15      	ldr	r2, [pc, #84]	; (80a0148 <_Z16locationCallbackfff+0x90>)
 80a00f4:	2101      	movs	r1, #1
 80a00f6:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80a00fa:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80a00fe:	e9cd 8900 	strd	r8, r9, [sp]
 80a0102:	4650      	mov	r0, sl
	SeeedOled.clearDisplay();   // clears the screen and buffer

	// 10 characters fit at text size 2

	char buf[16];
	snprintf(buf, sizeof(buf), "%.6f", lat);
 80a0104:	f8df a04c 	ldr.w	sl, [pc, #76]	; 80a0154 <_Z16locationCallbackfff+0x9c>
 80a0108:	f001 fa4c 	bl	80a15a4 <_ZN5Print11printf_implEbPKcz>
}

void locationCallback(float lat, float lon, float accuracy) {
  Serial.println("LocationCallback()");
	  Serial.printlnf("lat=%f lon=%f accuracy=%f", lat, lon, accuracy);
	SeeedOled.clearDisplay();   // clears the screen and buffer
 80a010c:	480f      	ldr	r0, [pc, #60]	; (80a014c <_Z16locationCallbackfff+0x94>)
 80a010e:	f000 f935 	bl	80a037c <_ZN9SeeedOLED12clearDisplayEv>

	// 10 characters fit at text size 2

	char buf[16];
	snprintf(buf, sizeof(buf), "%.6f", lat);
 80a0112:	4652      	mov	r2, sl
 80a0114:	e9cd 8900 	strd	r8, r9, [sp]
 80a0118:	2110      	movs	r1, #16
 80a011a:	a806      	add	r0, sp, #24
 80a011c:	f000 fd8a 	bl	80a0c34 <snprintf>
  //SeeedOled.putString(buf, sizeof(buf), "%.6f", lat);
	snprintf(buf, sizeof(buf), "%.6f", lon);
 80a0120:	4652      	mov	r2, sl
 80a0122:	e9cd 6700 	strd	r6, r7, [sp]
 80a0126:	2110      	movs	r1, #16
 80a0128:	a806      	add	r0, sp, #24
 80a012a:	f000 fd83 	bl	80a0c34 <snprintf>
  //SeeedOled.putString(buf, sizeof(buf), "%.6f", lon);
	snprintf(buf, sizeof(buf), "%.1f", accuracy);
 80a012e:	e9cd 4500 	strd	r4, r5, [sp]
 80a0132:	4a07      	ldr	r2, [pc, #28]	; (80a0150 <_Z16locationCallbackfff+0x98>)
 80a0134:	2110      	movs	r1, #16
 80a0136:	a806      	add	r0, sp, #24
 80a0138:	f000 fd7c 	bl	80a0c34 <snprintf>
  //SeeedOled.putString(buf);
 80a013c:	b00a      	add	sp, #40	; 0x28
 80a013e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a0142:	bf00      	nop
 80a0144:	080a53dc 	.word	0x080a53dc
 80a0148:	080a53ef 	.word	0x080a53ef
 80a014c:	20000140 	.word	0x20000140
 80a0150:	080a540e 	.word	0x080a540e
 80a0154:	080a5409 	.word	0x080a5409

080a0158 <setup>:

// SYSTEM_THREAD(ENABLED);

void locationCallback(float lat, float lon, float accuracy);

void setup() {
 80a0158:	b510      	push	{r4, lr}
 	  Serial.begin(9600);
 80a015a:	f001 fca1 	bl	80a1aa0 <_Z16_fetch_usbserialv>
	  Wire.begin();
    SeeedOled.init();  	
 80a015e:	4c17      	ldr	r4, [pc, #92]	; (80a01bc <setup+0x64>)
// SYSTEM_THREAD(ENABLED);

void locationCallback(float lat, float lon, float accuracy);

void setup() {
 	  Serial.begin(9600);
 80a0160:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a0164:	f001 fc82 	bl	80a1a6c <_ZN9USBSerial5beginEl>
	  Wire.begin();
 80a0168:	f001 fe12 	bl	80a1d90 <_Z19__fetch_global_Wirev>
 80a016c:	f001 f8d6 	bl	80a131c <_ZN7TwoWire5beginEv>
    SeeedOled.init();  	
 80a0170:	4620      	mov	r0, r4
 80a0172:	f000 f897 	bl	80a02a4 <_ZN9SeeedOLED4initEv>
 	  SeeedOled.clearDisplay();
 80a0176:	4620      	mov	r0, r4
 80a0178:	f000 f900 	bl	80a037c <_ZN9SeeedOLED12clearDisplayEv>
    SeeedOled.setNormalDisplay();
 80a017c:	4620      	mov	r0, r4
 80a017e:	f000 f964 	bl	80a044a <_ZN9SeeedOLED16setNormalDisplayEv>
    SeeedOled.setPageMode(); 
 80a0182:	4620      	mov	r0, r4
 80a0184:	f000 f8a3 	bl	80a02ce <_ZN9SeeedOLED11setPageModeEv>
    SeeedOled.setTextXY(2, 0);
 80a0188:	2200      	movs	r2, #0
 80a018a:	4620      	mov	r0, r4
 80a018c:	2102      	movs	r1, #2
 80a018e:	f000 f8ab 	bl	80a02e8 <_ZN9SeeedOLED9setTextXYEhh>
    SeeedOled.putString("GPS v4.1");
 80a0192:	4620      	mov	r0, r4
    locator.withEventName("deviceLocator");
 80a0194:	4c0a      	ldr	r4, [pc, #40]	; (80a01c0 <setup+0x68>)
    SeeedOled.init();  	
 	  SeeedOled.clearDisplay();
    SeeedOled.setNormalDisplay();
    SeeedOled.setPageMode(); 
    SeeedOled.setTextXY(2, 0);
    SeeedOled.putString("GPS v4.1");
 80a0196:	490b      	ldr	r1, [pc, #44]	; (80a01c4 <setup+0x6c>)
 80a0198:	f000 f912 	bl	80a03c0 <_ZN9SeeedOLED9putStringEPKc>
    locator.withEventName("deviceLocator");
 80a019c:	490a      	ldr	r1, [pc, #40]	; (80a01c8 <setup+0x70>)
 80a019e:	4620      	mov	r0, r4
 80a01a0:	f000 fa56 	bl	80a0650 <_ZN23GoogleMapsDeviceLocator13withEventNameEPKc>
    locator.withSubscribe(locationCallback).withLocatePeriodic(120);
 80a01a4:	4909      	ldr	r1, [pc, #36]	; (80a01cc <setup+0x74>)
 80a01a6:	4620      	mov	r0, r4
 80a01a8:	f000 fb10 	bl	80a07cc <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE>
 80a01ac:	2178      	movs	r1, #120	; 0x78
 80a01ae:	f000 fa45 	bl	80a063c <_ZN23GoogleMapsDeviceLocator18withLocatePeriodicEm>
    Time.zone(+7);
}
 80a01b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    SeeedOled.setPageMode(); 
    SeeedOled.setTextXY(2, 0);
    SeeedOled.putString("GPS v4.1");
    locator.withEventName("deviceLocator");
    locator.withSubscribe(locationCallback).withLocatePeriodic(120);
    Time.zone(+7);
 80a01b6:	4806      	ldr	r0, [pc, #24]	; (80a01d0 <setup+0x78>)
 80a01b8:	f001 bb24 	b.w	80a1804 <_ZN9TimeClass4zoneEf>
 80a01bc:	20000140 	.word	0x20000140
 80a01c0:	200000f4 	.word	0x200000f4
 80a01c4:	080a5413 	.word	0x080a5413
 80a01c8:	080a541c 	.word	0x080a541c
 80a01cc:	080a00b9 	.word	0x080a00b9
 80a01d0:	40e00000 	.word	0x40e00000

080a01d4 <_Z13updateDisplayv>:
}

void updateDisplay()
{
 80a01d4:	b570      	push	{r4, r5, r6, lr}
Time.now();    
 80a01d6:	f001 fb52 	bl	80a187e <_ZN9TimeClass3nowEv>
hour = Time.hourFormat12();
 80a01da:	f001 fb57 	bl	80a188c <_ZN9TimeClass12hourFormat12Ev>
 80a01de:	4e10      	ldr	r6, [pc, #64]	; (80a0220 <_Z13updateDisplayv+0x4c>)
minutes = Time.minute();
SeeedOled.setNormalDisplay();
 80a01e0:	4c10      	ldr	r4, [pc, #64]	; (80a0224 <_Z13updateDisplayv+0x50>)
}

void updateDisplay()
{
Time.now();    
hour = Time.hourFormat12();
 80a01e2:	6030      	str	r0, [r6, #0]
minutes = Time.minute();
 80a01e4:	f001 fb5a 	bl	80a189c <_ZN9TimeClass6minuteEv>
 80a01e8:	4d0f      	ldr	r5, [pc, #60]	; (80a0228 <_Z13updateDisplayv+0x54>)
 80a01ea:	6028      	str	r0, [r5, #0]
SeeedOled.setNormalDisplay();
 80a01ec:	4620      	mov	r0, r4
 80a01ee:	f000 f92c 	bl	80a044a <_ZN9SeeedOLED16setNormalDisplayEv>
SeeedOled.setPageMode();
 80a01f2:	4620      	mov	r0, r4
 80a01f4:	f000 f86b 	bl	80a02ce <_ZN9SeeedOLED11setPageModeEv>
SeeedOled.setTextXY(4,5);
 80a01f8:	2205      	movs	r2, #5
 80a01fa:	4620      	mov	r0, r4
 80a01fc:	2104      	movs	r1, #4
 80a01fe:	f000 f873 	bl	80a02e8 <_ZN9SeeedOLED9setTextXYEhh>
SeeedOled.putNumber(hour);
 80a0202:	6831      	ldr	r1, [r6, #0]
 80a0204:	4620      	mov	r0, r4
 80a0206:	f000 f8e8 	bl	80a03da <_ZN9SeeedOLED9putNumberEl>
SeeedOled.putString(":");
 80a020a:	4620      	mov	r0, r4
 80a020c:	4907      	ldr	r1, [pc, #28]	; (80a022c <_Z13updateDisplayv+0x58>)
 80a020e:	f000 f8d7 	bl	80a03c0 <_ZN9SeeedOLED9putStringEPKc>
SeeedOled.putNumber(minutes);
 80a0212:	6829      	ldr	r1, [r5, #0]
 80a0214:	4620      	mov	r0, r4
}
 80a0216:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
SeeedOled.setNormalDisplay();
SeeedOled.setPageMode();
SeeedOled.setTextXY(4,5);
SeeedOled.putNumber(hour);
SeeedOled.putString(":");
SeeedOled.putNumber(minutes);
 80a021a:	f000 b8de 	b.w	80a03da <_ZN9SeeedOLED9putNumberEl>
 80a021e:	bf00      	nop
 80a0220:	2000013c 	.word	0x2000013c
 80a0224:	20000140 	.word	0x20000140
 80a0228:	20000138 	.word	0x20000138
 80a022c:	080a5782 	.word	0x080a5782

080a0230 <loop>:
}

void loop() {
 80a0230:	b508      	push	{r3, lr}
	locator.loop();
 80a0232:	4803      	ldr	r0, [pc, #12]	; (80a0240 <loop+0x10>)
 80a0234:	f000 fa7c 	bl	80a0730 <_ZN23GoogleMapsDeviceLocator4loopEv>
    updateDisplay();
}
 80a0238:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
SeeedOled.putNumber(minutes);
}

void loop() {
	locator.loop();
    updateDisplay();
 80a023c:	f7ff bfca 	b.w	80a01d4 <_Z13updateDisplayv>
 80a0240:	200000f4 	.word	0x200000f4

080a0244 <_GLOBAL__sub_I_locator>:
  //SeeedOled.putString(buf, sizeof(buf), "%.6f", lat);
	snprintf(buf, sizeof(buf), "%.6f", lon);
  //SeeedOled.putString(buf, sizeof(buf), "%.6f", lon);
	snprintf(buf, sizeof(buf), "%.1f", accuracy);
  //SeeedOled.putString(buf);
 80a0244:	b510      	push	{r4, lr}

 

// Uncomment to show debugging logs
//SerialLogHandler logHandler(LOG_LEVEL_TRACE);
GoogleMapsDeviceLocator locator;
 80a0246:	4c06      	ldr	r4, [pc, #24]	; (80a0260 <_GLOBAL__sub_I_locator+0x1c>)
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a0248:	f000 fb36 	bl	80a08b8 <HAL_Pin_Map>
 80a024c:	4620      	mov	r0, r4
 80a024e:	f000 f9cf 	bl	80a05f0 <_ZN23GoogleMapsDeviceLocatorC1Ev>
 80a0252:	4620      	mov	r0, r4
  //SeeedOled.putString(buf, sizeof(buf), "%.6f", lat);
	snprintf(buf, sizeof(buf), "%.6f", lon);
  //SeeedOled.putString(buf, sizeof(buf), "%.6f", lon);
	snprintf(buf, sizeof(buf), "%.1f", accuracy);
  //SeeedOled.putString(buf);
 80a0254:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

 

// Uncomment to show debugging logs
//SerialLogHandler logHandler(LOG_LEVEL_TRACE);
GoogleMapsDeviceLocator locator;
 80a0258:	4a02      	ldr	r2, [pc, #8]	; (80a0264 <_GLOBAL__sub_I_locator+0x20>)
 80a025a:	4903      	ldr	r1, [pc, #12]	; (80a0268 <_GLOBAL__sub_I_locator+0x24>)
 80a025c:	f001 bdd6 	b.w	80a1e0c <__aeabi_atexit>
 80a0260:	200000f4 	.word	0x200000f4
 80a0264:	200000f0 	.word	0x200000f0
 80a0268:	080a0479 	.word	0x080a0479

080a026c <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
 80a026c:	6803      	ldr	r3, [r0, #0]
 80a026e:	b2c9      	uxtb	r1, r1
 80a0270:	689b      	ldr	r3, [r3, #8]
 80a0272:	4718      	bx	r3

080a0274 <_ZN9SeeedOLED11sendCommandEh>:
  delay(5);
  sendCommand(SeeedOLED_Normal_Display_Cmd); //Set Normal Display (default)
}

void SeeedOLED::sendCommand(unsigned char command)
{
 80a0274:	b510      	push	{r4, lr}
 80a0276:	460c      	mov	r4, r1
  Wire.beginTransmission(SeeedOLED_Address); // begin I2C communication
 80a0278:	f001 fd8a 	bl	80a1d90 <_Z19__fetch_global_Wirev>
 80a027c:	213c      	movs	r1, #60	; 0x3c
 80a027e:	f001 f857 	bl	80a1330 <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(SeeedOLED_Command_Mode);        // Set OLED Command mode
 80a0282:	f001 fd85 	bl	80a1d90 <_Z19__fetch_global_Wirev>
 80a0286:	2180      	movs	r1, #128	; 0x80
 80a0288:	f7ff fff0 	bl	80a026c <_ZN7TwoWire5writeEi>
  Wire.write(command);
 80a028c:	f001 fd80 	bl	80a1d90 <_Z19__fetch_global_Wirev>
 80a0290:	6803      	ldr	r3, [r0, #0]
 80a0292:	4621      	mov	r1, r4
 80a0294:	689b      	ldr	r3, [r3, #8]
 80a0296:	4798      	blx	r3
  Wire.endTransmission(); // End I2C communication
 80a0298:	f001 fd7a 	bl	80a1d90 <_Z19__fetch_global_Wirev>
}
 80a029c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void SeeedOLED::sendCommand(unsigned char command)
{
  Wire.beginTransmission(SeeedOLED_Address); // begin I2C communication
  Wire.write(SeeedOLED_Command_Mode);        // Set OLED Command mode
  Wire.write(command);
  Wire.endTransmission(); // End I2C communication
 80a02a0:	f001 b84d 	b.w	80a133e <_ZN7TwoWire15endTransmissionEv>

080a02a4 <_ZN9SeeedOLED4initEv>:
        {0x00, 0x41, 0x36, 0x08, 0x00, 0x00, 0x00, 0x00},
        {0x00, 0x02, 0x01, 0x01, 0x02, 0x01, 0x00, 0x00},
        {0x00, 0x02, 0x05, 0x05, 0x02, 0x00, 0x00, 0x00}};

void SeeedOLED::init(void)
{
 80a02a4:	b510      	push	{r4, lr}
 80a02a6:	4604      	mov	r4, r0
  sendCommand(SeeedOLED_Display_Off_Cmd); //display off
 80a02a8:	21ae      	movs	r1, #174	; 0xae
 80a02aa:	f7ff ffe3 	bl	80a0274 <_ZN9SeeedOLED11sendCommandEh>
  delay(5);
 80a02ae:	2005      	movs	r0, #5
 80a02b0:	f000 fce0 	bl	80a0c74 <delay>
  sendCommand(SeeedOLED_Display_On_Cmd); //display on
 80a02b4:	21af      	movs	r1, #175	; 0xaf
 80a02b6:	4620      	mov	r0, r4
 80a02b8:	f7ff ffdc 	bl	80a0274 <_ZN9SeeedOLED11sendCommandEh>
  delay(5);
 80a02bc:	2005      	movs	r0, #5
 80a02be:	f000 fcd9 	bl	80a0c74 <delay>
  sendCommand(SeeedOLED_Normal_Display_Cmd); //Set Normal Display (default)
 80a02c2:	4620      	mov	r0, r4
}
 80a02c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
{
  sendCommand(SeeedOLED_Display_Off_Cmd); //display off
  delay(5);
  sendCommand(SeeedOLED_Display_On_Cmd); //display on
  delay(5);
  sendCommand(SeeedOLED_Normal_Display_Cmd); //Set Normal Display (default)
 80a02c8:	21a6      	movs	r1, #166	; 0xa6
 80a02ca:	f7ff bfd3 	b.w	80a0274 <_ZN9SeeedOLED11sendCommandEh>

080a02ce <_ZN9SeeedOLED11setPageModeEv>:
  sendCommand(0x20); //set addressing mode
  sendCommand(0x00); //set horizontal addressing mode
}

void SeeedOLED::setPageMode()
{
 80a02ce:	b510      	push	{r4, lr}
 80a02d0:	4604      	mov	r4, r0
  addressingMode = PAGE_MODE;
 80a02d2:	2301      	movs	r3, #1
 80a02d4:	7003      	strb	r3, [r0, #0]
  sendCommand(0x20); //set addressing mode
 80a02d6:	2120      	movs	r1, #32
 80a02d8:	f7ff ffcc 	bl	80a0274 <_ZN9SeeedOLED11sendCommandEh>
  sendCommand(0x02); //set page addressing mode
 80a02dc:	4620      	mov	r0, r4
}
 80a02de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

void SeeedOLED::setPageMode()
{
  addressingMode = PAGE_MODE;
  sendCommand(0x20); //set addressing mode
  sendCommand(0x02); //set page addressing mode
 80a02e2:	2102      	movs	r1, #2
 80a02e4:	f7ff bfc6 	b.w	80a0274 <_ZN9SeeedOLED11sendCommandEh>

080a02e8 <_ZN9SeeedOLED9setTextXYEhh>:
}

void SeeedOLED::setTextXY(unsigned char Row, unsigned char Column)
{
 80a02e8:	b538      	push	{r3, r4, r5, lr}
 80a02ea:	4614      	mov	r4, r2
 80a02ec:	4605      	mov	r5, r0
  sendCommand(0xB0 + Row);                        //set page address
 80a02ee:	3950      	subs	r1, #80	; 0x50
  sendCommand(0x00 + (8 * Column & 0x0F));        //set column lower address
 80a02f0:	00e4      	lsls	r4, r4, #3
  sendCommand(0x02); //set page addressing mode
}

void SeeedOLED::setTextXY(unsigned char Row, unsigned char Column)
{
  sendCommand(0xB0 + Row);                        //set page address
 80a02f2:	b2c9      	uxtb	r1, r1
 80a02f4:	f7ff ffbe 	bl	80a0274 <_ZN9SeeedOLED11sendCommandEh>
  sendCommand(0x00 + (8 * Column & 0x0F));        //set column lower address
 80a02f8:	f004 0108 	and.w	r1, r4, #8
 80a02fc:	4628      	mov	r0, r5
 80a02fe:	f7ff ffb9 	bl	80a0274 <_ZN9SeeedOLED11sendCommandEh>
  sendCommand(0x10 + ((8 * Column >> 4) & 0x0F)); //set column higher address
 80a0302:	f3c4 1103 	ubfx	r1, r4, #4, #4
 80a0306:	4628      	mov	r0, r5
}
 80a0308:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

void SeeedOLED::setTextXY(unsigned char Row, unsigned char Column)
{
  sendCommand(0xB0 + Row);                        //set page address
  sendCommand(0x00 + (8 * Column & 0x0F));        //set column lower address
  sendCommand(0x10 + ((8 * Column >> 4) & 0x0F)); //set column higher address
 80a030c:	3110      	adds	r1, #16
 80a030e:	f7ff bfb1 	b.w	80a0274 <_ZN9SeeedOLED11sendCommandEh>

080a0312 <_ZN9SeeedOLED8sendDataEh>:
  sendCommand(SeeedOLED_Display_On_Cmd); //display on
  setTextXY(0, 0);
}

void SeeedOLED::sendData(unsigned char Data)
{
 80a0312:	b510      	push	{r4, lr}
 80a0314:	460c      	mov	r4, r1
  Wire.beginTransmission(SeeedOLED_Address); // begin I2C transmission
 80a0316:	f001 fd3b 	bl	80a1d90 <_Z19__fetch_global_Wirev>
 80a031a:	213c      	movs	r1, #60	; 0x3c
 80a031c:	f001 f808 	bl	80a1330 <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(SeeedOLED_Data_Mode);           // data mode
 80a0320:	f001 fd36 	bl	80a1d90 <_Z19__fetch_global_Wirev>
 80a0324:	2140      	movs	r1, #64	; 0x40
 80a0326:	f7ff ffa1 	bl	80a026c <_ZN7TwoWire5writeEi>
  Wire.write(Data);
 80a032a:	f001 fd31 	bl	80a1d90 <_Z19__fetch_global_Wirev>
 80a032e:	6803      	ldr	r3, [r0, #0]
 80a0330:	4621      	mov	r1, r4
 80a0332:	689b      	ldr	r3, [r3, #8]
 80a0334:	4798      	blx	r3
  Wire.endTransmission(); // stop I2C transmission
 80a0336:	f001 fd2b 	bl	80a1d90 <_Z19__fetch_global_Wirev>
}
 80a033a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void SeeedOLED::sendData(unsigned char Data)
{
  Wire.beginTransmission(SeeedOLED_Address); // begin I2C transmission
  Wire.write(SeeedOLED_Data_Mode);           // data mode
  Wire.write(Data);
  Wire.endTransmission(); // stop I2C transmission
 80a033e:	f000 bffe 	b.w	80a133e <_ZN7TwoWire15endTransmissionEv>
	...

080a0344 <_ZN9SeeedOLED7putCharEh>:
}

void SeeedOLED::putChar(unsigned char C)
{
 80a0344:	b570      	push	{r4, r5, r6, lr}
 80a0346:	4606      	mov	r6, r0
  if (C < 32 || C > 127) //Ignore non-printable ASCII characters. This can be modified for multilingual font.
 80a0348:	f1a1 0320 	sub.w	r3, r1, #32
  {
    C = ' '; //Space
 80a034c:	2b5f      	cmp	r3, #95	; 0x5f
 80a034e:	4b0a      	ldr	r3, [pc, #40]	; (80a0378 <_ZN9SeeedOLED7putCharEh+0x34>)
 80a0350:	bf88      	it	hi
 80a0352:	2120      	movhi	r1, #32
 80a0354:	eb03 05c1 	add.w	r5, r3, r1, lsl #3
 80a0358:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80a035c:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80a0360:	4415      	add	r5, r2
 80a0362:	f1a3 04f9 	sub.w	r4, r3, #249	; 0xf9
  }
  unsigned char i = 0;
  for (i = 0; i < 8; i++)
  {
    //read bytes from code memory
    sendData(pgm_read_byte(&BasicFont[C - 32][i])); //font array starts at 0, ASCII starts at 32. Hence the translation
 80a0366:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 80a036a:	4630      	mov	r0, r6
 80a036c:	f7ff ffd1 	bl	80a0312 <_ZN9SeeedOLED8sendDataEh>
  if (C < 32 || C > 127) //Ignore non-printable ASCII characters. This can be modified for multilingual font.
  {
    C = ' '; //Space
  }
  unsigned char i = 0;
  for (i = 0; i < 8; i++)
 80a0370:	42a5      	cmp	r5, r4
 80a0372:	d1f8      	bne.n	80a0366 <_ZN9SeeedOLED7putCharEh+0x22>
  {
    //read bytes from code memory
    sendData(pgm_read_byte(&BasicFont[C - 32][i])); //font array starts at 0, ASCII starts at 32. Hence the translation
  }
}
 80a0374:	bd70      	pop	{r4, r5, r6, pc}
 80a0376:	bf00      	nop
 80a0378:	080a542a 	.word	0x080a542a

080a037c <_ZN9SeeedOLED12clearDisplayEv>:
  sendCommand(0x00 + (8 * Column & 0x0F));        //set column lower address
  sendCommand(0x10 + ((8 * Column >> 4) & 0x0F)); //set column higher address
}

void SeeedOLED::clearDisplay()
{
 80a037c:	b570      	push	{r4, r5, r6, lr}
  unsigned char i, j;
  sendCommand(SeeedOLED_Display_Off_Cmd); //display off
 80a037e:	21ae      	movs	r1, #174	; 0xae
  sendCommand(0x00 + (8 * Column & 0x0F));        //set column lower address
  sendCommand(0x10 + ((8 * Column >> 4) & 0x0F)); //set column higher address
}

void SeeedOLED::clearDisplay()
{
 80a0380:	4605      	mov	r5, r0
  unsigned char i, j;
  sendCommand(SeeedOLED_Display_Off_Cmd); //display off
 80a0382:	f7ff ff77 	bl	80a0274 <_ZN9SeeedOLED11sendCommandEh>
 80a0386:	2600      	movs	r6, #0
  for (j = 0; j < 8; j++)
  {
    setTextXY(j, 0);
 80a0388:	2200      	movs	r2, #0
 80a038a:	b2f1      	uxtb	r1, r6
 80a038c:	4628      	mov	r0, r5
 80a038e:	f7ff ffab 	bl	80a02e8 <_ZN9SeeedOLED9setTextXYEhh>
 80a0392:	2410      	movs	r4, #16
    {
      for (i = 0; i < 16; i++) //clear all columns
      {
        putChar(' ');
 80a0394:	2120      	movs	r1, #32
 80a0396:	4628      	mov	r0, r5
 80a0398:	3c01      	subs	r4, #1
 80a039a:	f7ff ffd3 	bl	80a0344 <_ZN9SeeedOLED7putCharEh>
  sendCommand(SeeedOLED_Display_Off_Cmd); //display off
  for (j = 0; j < 8; j++)
  {
    setTextXY(j, 0);
    {
      for (i = 0; i < 16; i++) //clear all columns
 80a039e:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 80a03a2:	d1f7      	bne.n	80a0394 <_ZN9SeeedOLED12clearDisplayEv+0x18>
 80a03a4:	3601      	adds	r6, #1

void SeeedOLED::clearDisplay()
{
  unsigned char i, j;
  sendCommand(SeeedOLED_Display_Off_Cmd); //display off
  for (j = 0; j < 8; j++)
 80a03a6:	2e08      	cmp	r6, #8
 80a03a8:	d1ee      	bne.n	80a0388 <_ZN9SeeedOLED12clearDisplayEv+0xc>
      {
        putChar(' ');
      }
    }
  }
  sendCommand(SeeedOLED_Display_On_Cmd); //display on
 80a03aa:	4628      	mov	r0, r5
 80a03ac:	21af      	movs	r1, #175	; 0xaf
 80a03ae:	f7ff ff61 	bl	80a0274 <_ZN9SeeedOLED11sendCommandEh>
  setTextXY(0, 0);
 80a03b2:	4622      	mov	r2, r4
 80a03b4:	4621      	mov	r1, r4
 80a03b6:	4628      	mov	r0, r5
}
 80a03b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        putChar(' ');
      }
    }
  }
  sendCommand(SeeedOLED_Display_On_Cmd); //display on
  setTextXY(0, 0);
 80a03bc:	f7ff bf94 	b.w	80a02e8 <_ZN9SeeedOLED9setTextXYEhh>

080a03c0 <_ZN9SeeedOLED9putStringEPKc>:
    sendData(pgm_read_byte(&BasicFont[C - 32][i])); //font array starts at 0, ASCII starts at 32. Hence the translation
  }
}

void SeeedOLED::putString(const char *String)
{
 80a03c0:	b570      	push	{r4, r5, r6, lr}
 80a03c2:	4605      	mov	r5, r0
 80a03c4:	460e      	mov	r6, r1
 80a03c6:	2400      	movs	r4, #0
  unsigned char i = 0;
  while (String[i])
 80a03c8:	b2e3      	uxtb	r3, r4
 80a03ca:	5cf1      	ldrb	r1, [r6, r3]
 80a03cc:	3401      	adds	r4, #1
 80a03ce:	b119      	cbz	r1, 80a03d8 <_ZN9SeeedOLED9putStringEPKc+0x18>
  {
    putChar(String[i]);
 80a03d0:	4628      	mov	r0, r5
 80a03d2:	f7ff ffb7 	bl	80a0344 <_ZN9SeeedOLED7putCharEh>
}

void SeeedOLED::putString(const char *String)
{
  unsigned char i = 0;
  while (String[i])
 80a03d6:	e7f7      	b.n	80a03c8 <_ZN9SeeedOLED9putStringEPKc+0x8>
 80a03d8:	bd70      	pop	{r4, r5, r6, pc}

080a03da <_ZN9SeeedOLED9putNumberEl>:
    i++;
  }
}

unsigned char SeeedOLED::putNumber(long long_num)
{
 80a03da:	b5f0      	push	{r4, r5, r6, r7, lr}
  unsigned char char_buffer[10] = "";
 80a03dc:	2300      	movs	r3, #0
    i++;
  }
}

unsigned char SeeedOLED::putNumber(long long_num)
{
 80a03de:	b085      	sub	sp, #20
  unsigned char char_buffer[10] = "";
  unsigned char i = 0;
  unsigned char f = 0;

  if (long_num < 0)
 80a03e0:	1e0e      	subs	r6, r1, #0
    i++;
  }
}

unsigned char SeeedOLED::putNumber(long long_num)
{
 80a03e2:	4607      	mov	r7, r0
  unsigned char char_buffer[10] = "";
 80a03e4:	9301      	str	r3, [sp, #4]
 80a03e6:	9302      	str	r3, [sp, #8]
 80a03e8:	f8ad 300c 	strh.w	r3, [sp, #12]
  unsigned char i = 0;
  unsigned char f = 0;

  if (long_num < 0)
 80a03ec:	da07      	bge.n	80a03fe <_ZN9SeeedOLED9putNumberEl+0x24>
  {
    f = 1;
    putChar('-');
 80a03ee:	212d      	movs	r1, #45	; 0x2d
 80a03f0:	f7ff ffa8 	bl	80a0344 <_ZN9SeeedOLED7putCharEh>
    long_num = -long_num;
 80a03f4:	4276      	negs	r6, r6
  unsigned char i = 0;
  unsigned char f = 0;

  if (long_num < 0)
  {
    f = 1;
 80a03f6:	2301      	movs	r3, #1

unsigned char SeeedOLED::putNumber(long long_num)
{
  unsigned char char_buffer[10] = "";
  unsigned char i = 0;
  unsigned char f = 0;
 80a03f8:	2400      	movs	r4, #0
    return f;
  }

  while (long_num > 0)
  {
    char_buffer[i++] = long_num % 10;
 80a03fa:	210a      	movs	r1, #10
 80a03fc:	e005      	b.n	80a040a <_ZN9SeeedOLED9putNumberEl+0x30>
  {
    f = 1;
    putChar('-');
    long_num = -long_num;
  }
  else if (long_num == 0)
 80a03fe:	d1fb      	bne.n	80a03f8 <_ZN9SeeedOLED9putNumberEl+0x1e>
  {
    f = 1;
    putChar('0');
 80a0400:	2130      	movs	r1, #48	; 0x30
 80a0402:	f7ff ff9f 	bl	80a0344 <_ZN9SeeedOLED7putCharEh>
    return f;
 80a0406:	2001      	movs	r0, #1
 80a0408:	e01d      	b.n	80a0446 <_ZN9SeeedOLED9putNumberEl+0x6c>
  }

  while (long_num > 0)
  {
    char_buffer[i++] = long_num % 10;
 80a040a:	aa04      	add	r2, sp, #16
 80a040c:	1c65      	adds	r5, r4, #1
 80a040e:	4414      	add	r4, r2
 80a0410:	fb96 f2f1 	sdiv	r2, r6, r1
 80a0414:	fb01 6612 	mls	r6, r1, r2, r6
 80a0418:	b2ed      	uxtb	r5, r5
 80a041a:	f804 6c0c 	strb.w	r6, [r4, #-12]
 80a041e:	462c      	mov	r4, r5
    f = 1;
    putChar('0');
    return f;
  }

  while (long_num > 0)
 80a0420:	4616      	mov	r6, r2
 80a0422:	2a00      	cmp	r2, #0
 80a0424:	d1f1      	bne.n	80a040a <_ZN9SeeedOLED9putNumberEl+0x30>
  {
    char_buffer[i++] = long_num % 10;
    long_num /= 10;
  }

  f = f + i;
 80a0426:	442b      	add	r3, r5
 80a0428:	b2dc      	uxtb	r4, r3
  for (; i > 0; i--)
 80a042a:	b15d      	cbz	r5, 80a0444 <_ZN9SeeedOLED9putNumberEl+0x6a>
  {
    putChar('0' + char_buffer[i - 1]);
 80a042c:	ab04      	add	r3, sp, #16
 80a042e:	442b      	add	r3, r5
 80a0430:	f813 1c0d 	ldrb.w	r1, [r3, #-13]
 80a0434:	4638      	mov	r0, r7
 80a0436:	3130      	adds	r1, #48	; 0x30
 80a0438:	b2c9      	uxtb	r1, r1
    char_buffer[i++] = long_num % 10;
    long_num /= 10;
  }

  f = f + i;
  for (; i > 0; i--)
 80a043a:	3d01      	subs	r5, #1
  {
    putChar('0' + char_buffer[i - 1]);
 80a043c:	f7ff ff82 	bl	80a0344 <_ZN9SeeedOLED7putCharEh>
    char_buffer[i++] = long_num % 10;
    long_num /= 10;
  }

  f = f + i;
  for (; i > 0; i--)
 80a0440:	b2ed      	uxtb	r5, r5
 80a0442:	e7f2      	b.n	80a042a <_ZN9SeeedOLED9putNumberEl+0x50>
  {
    putChar('0' + char_buffer[i - 1]);
  }
  return f;
 80a0444:	4620      	mov	r0, r4
}
 80a0446:	b005      	add	sp, #20
 80a0448:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a044a <_ZN9SeeedOLED16setNormalDisplayEv>:
  sendCommand(SeeedOLED_Dectivate_Scroll_Cmd);
}

void SeeedOLED::setNormalDisplay()
{
  sendCommand(SeeedOLED_Normal_Display_Cmd);
 80a044a:	21a6      	movs	r1, #166	; 0xa6
 80a044c:	f7ff bf12 	b.w	80a0274 <_ZN9SeeedOLED11sendCommandEh>

080a0450 <_GLOBAL__sub_I__ZN9SeeedOLED4initEv>:
 80a0450:	f000 ba32 	b.w	80a08b8 <HAL_Pin_Map>

080a0454 <_ZNSt17_Function_handlerIFvPKcS1_ESt5_BindIFSt7_Mem_fnIM23GoogleMapsDeviceLocatorFvS1_S1_EEPS5_St12_PlaceholderILi1EESA_ILi2EEEEE9_M_invokeERKSt9_Any_dataOS1_SJ_>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a0454:	b430      	push	{r4, r5}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a0456:	6803      	ldr	r3, [r0, #0]
      template<typename... _Args, typename _Req
               = _Require<typename _Traits::__lvalue,
                          _CheckArgs<_Pack<_Args...>>>>
	result_type
	operator()(_Class* __object, _Args&&... __args) const
	{ return (__object->*_M_pmf)(std::forward<_Args>(__args)...); }
 80a0458:	6812      	ldr	r2, [r2, #0]
 80a045a:	6858      	ldr	r0, [r3, #4]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 80a045c:	689c      	ldr	r4, [r3, #8]
      template<typename... _Args, typename _Req
               = _Require<typename _Traits::__lvalue,
                          _CheckArgs<_Pack<_Args...>>>>
	result_type
	operator()(_Class* __object, _Args&&... __args) const
	{ return (__object->*_M_pmf)(std::forward<_Args>(__args)...); }
 80a045e:	f010 0f01 	tst.w	r0, #1
 80a0462:	ea4f 0060 	mov.w	r0, r0, asr #1
 80a0466:	bf18      	it	ne
 80a0468:	5825      	ldrne	r5, [r4, r0]
 80a046a:	681b      	ldr	r3, [r3, #0]
 80a046c:	4420      	add	r0, r4
 80a046e:	bf18      	it	ne
 80a0470:	58eb      	ldrne	r3, [r5, r3]
 80a0472:	6809      	ldr	r1, [r1, #0]
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	(*_Base::_M_get_pointer(__functor))(
	    std::forward<_ArgTypes>(__args)...);
      }
 80a0474:	bc30      	pop	{r4, r5}
      template<typename... _Args, typename _Req
               = _Require<typename _Traits::__lvalue,
                          _CheckArgs<_Pack<_Args...>>>>
	result_type
	operator()(_Class* __object, _Args&&... __args) const
	{ return (__object->*_M_pmf)(std::forward<_Args>(__args)...); }
 80a0476:	4718      	bx	r3

080a0478 <_ZN23GoogleMapsDeviceLocatorD1Ev>:
GoogleMapsDeviceLocator::GoogleMapsDeviceLocator() : locatorMode(LOCATOR_MODE_MANUAL), periodMs(10000), eventName("deviceLocator"),
	stateTime(0), state(CONNECT_WAIT_STATE), callback(NULL), waitAfterConnect(8000) {

}

GoogleMapsDeviceLocator::~GoogleMapsDeviceLocator() {
 80a0478:	b510      	push	{r4, lr}
 80a047a:	4604      	mov	r4, r0
 80a047c:	4b05      	ldr	r3, [pc, #20]	; (80a0494 <_ZN23GoogleMapsDeviceLocatorD1Ev+0x1c>)
 80a047e:	f840 3b2c 	str.w	r3, [r0], #44
 80a0482:	f001 f8dd 	bl	80a1640 <_ZN6StringD1Ev>
 80a0486:	f104 000c 	add.w	r0, r4, #12
 80a048a:	f001 f8d9 	bl	80a1640 <_ZN6StringD1Ev>

}
 80a048e:	4620      	mov	r0, r4
 80a0490:	bd10      	pop	{r4, pc}
 80a0492:	bf00      	nop
 80a0494:	080a5734 	.word	0x080a5734

080a0498 <_ZN23GoogleMapsDeviceLocatorD0Ev>:
GoogleMapsDeviceLocator::GoogleMapsDeviceLocator() : locatorMode(LOCATOR_MODE_MANUAL), periodMs(10000), eventName("deviceLocator"),
	stateTime(0), state(CONNECT_WAIT_STATE), callback(NULL), waitAfterConnect(8000) {

}

GoogleMapsDeviceLocator::~GoogleMapsDeviceLocator() {
 80a0498:	b510      	push	{r4, lr}
 80a049a:	4604      	mov	r4, r0

}
 80a049c:	f7ff ffec 	bl	80a0478 <_ZN23GoogleMapsDeviceLocatorD1Ev>
 80a04a0:	4620      	mov	r0, r4
 80a04a2:	2144      	movs	r1, #68	; 0x44
 80a04a4:	f001 fcb7 	bl	80a1e16 <_ZdlPvj>
 80a04a8:	4620      	mov	r0, r4
 80a04aa:	bd10      	pop	{r4, pc}

080a04ac <_ZL16wifiScanCallbackP15WiFiAccessPointPv>:



#if Wiring_WiFi

static void wifiScanCallback(WiFiAccessPoint* wap, void* data) {
 80a04ac:	4602      	mov	r2, r0
 80a04ae:	b530      	push	{r4, r5, lr}
	// The - 3 factor here to leave room for the closing JSON array ] object }} and the trailing null
	size_t spaceLeft = &requestBuf[sizeof(requestBuf) - 3] - requestCur;
 80a04b0:	4d18      	ldr	r5, [pc, #96]	; (80a0514 <_ZL16wifiScanCallbackP15WiFiAccessPointPv+0x68>)

	size_t sizeNeeded = snprintf(requestCur, spaceLeft,
 80a04b2:	f892 302e 	ldrb.w	r3, [r2, #46]	; 0x2e

#if Wiring_WiFi

static void wifiScanCallback(WiFiAccessPoint* wap, void* data) {
	// The - 3 factor here to leave room for the closing JSON array ] object }} and the trailing null
	size_t spaceLeft = &requestBuf[sizeof(requestBuf) - 3] - requestCur;
 80a04b6:	6828      	ldr	r0, [r5, #0]



#if Wiring_WiFi

static void wifiScanCallback(WiFiAccessPoint* wap, void* data) {
 80a04b8:	b089      	sub	sp, #36	; 0x24
	// The - 3 factor here to leave room for the closing JSON array ] object }} and the trailing null
	size_t spaceLeft = &requestBuf[sizeof(requestBuf) - 3] - requestCur;

	size_t sizeNeeded = snprintf(requestCur, spaceLeft,
 80a04ba:	f810 1c01 	ldrb.w	r1, [r0, #-1]
 80a04be:	9307      	str	r3, [sp, #28]
 80a04c0:	6b53      	ldr	r3, [r2, #52]	; 0x34

#if Wiring_WiFi

static void wifiScanCallback(WiFiAccessPoint* wap, void* data) {
	// The - 3 factor here to leave room for the closing JSON array ] object }} and the trailing null
	size_t spaceLeft = &requestBuf[sizeof(requestBuf) - 3] - requestCur;
 80a04c2:	4c15      	ldr	r4, [pc, #84]	; (80a0518 <_ZL16wifiScanCallbackP15WiFiAccessPointPv+0x6c>)

	size_t sizeNeeded = snprintf(requestCur, spaceLeft,
 80a04c4:	9306      	str	r3, [sp, #24]
 80a04c6:	f892 302b 	ldrb.w	r3, [r2, #43]	; 0x2b

#if Wiring_WiFi

static void wifiScanCallback(WiFiAccessPoint* wap, void* data) {
	// The - 3 factor here to leave room for the closing JSON array ] object }} and the trailing null
	size_t spaceLeft = &requestBuf[sizeof(requestBuf) - 3] - requestCur;
 80a04ca:	1a24      	subs	r4, r4, r0

	size_t sizeNeeded = snprintf(requestCur, spaceLeft,
 80a04cc:	9305      	str	r3, [sp, #20]
 80a04ce:	f892 302a 	ldrb.w	r3, [r2, #42]	; 0x2a
 80a04d2:	9304      	str	r3, [sp, #16]
 80a04d4:	f892 3029 	ldrb.w	r3, [r2, #41]	; 0x29
 80a04d8:	9303      	str	r3, [sp, #12]
 80a04da:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 80a04de:	9302      	str	r3, [sp, #8]
 80a04e0:	f892 3027 	ldrb.w	r3, [r2, #39]	; 0x27
 80a04e4:	9301      	str	r3, [sp, #4]
 80a04e6:	f892 3026 	ldrb.w	r3, [r2, #38]	; 0x26
 80a04ea:	4a0c      	ldr	r2, [pc, #48]	; (80a051c <_ZL16wifiScanCallbackP15WiFiAccessPointPv+0x70>)
 80a04ec:	9300      	str	r3, [sp, #0]
 80a04ee:	4b0c      	ldr	r3, [pc, #48]	; (80a0520 <_ZL16wifiScanCallbackP15WiFiAccessPointPv+0x74>)
 80a04f0:	295b      	cmp	r1, #91	; 0x5b
 80a04f2:	bf18      	it	ne
 80a04f4:	4613      	movne	r3, r2
 80a04f6:	4a0b      	ldr	r2, [pc, #44]	; (80a0524 <_ZL16wifiScanCallbackP15WiFiAccessPointPv+0x78>)
 80a04f8:	4621      	mov	r1, r4
 80a04fa:	f000 fb9b 	bl	80a0c34 <snprintf>
			"%s{\"m\":\"%02x:%02x:%02x:%02x:%02x:%02x\",\"s\":%d,\"c\":%d}",
			(requestCur[-1] == '[' ? "" : ","),
			wap->bssid[0], wap->bssid[1], wap->bssid[2], wap->bssid[3], wap->bssid[4], wap->bssid[5],
			wap->rssi, wap->channel);
	if (sizeNeeded <= spaceLeft) {
 80a04fe:	4284      	cmp	r4, r0
 80a0500:	d306      	bcc.n	80a0510 <_ZL16wifiScanCallbackP15WiFiAccessPointPv+0x64>
		// There is enough space to store the whole entry, so save it
		requestCur += sizeNeeded;
 80a0502:	682b      	ldr	r3, [r5, #0]
		numAdded++;
 80a0504:	4a08      	ldr	r2, [pc, #32]	; (80a0528 <_ZL16wifiScanCallbackP15WiFiAccessPointPv+0x7c>)
			(requestCur[-1] == '[' ? "" : ","),
			wap->bssid[0], wap->bssid[1], wap->bssid[2], wap->bssid[3], wap->bssid[4], wap->bssid[5],
			wap->rssi, wap->channel);
	if (sizeNeeded <= spaceLeft) {
		// There is enough space to store the whole entry, so save it
		requestCur += sizeNeeded;
 80a0506:	4418      	add	r0, r3
		numAdded++;
 80a0508:	6813      	ldr	r3, [r2, #0]
			(requestCur[-1] == '[' ? "" : ","),
			wap->bssid[0], wap->bssid[1], wap->bssid[2], wap->bssid[3], wap->bssid[4], wap->bssid[5],
			wap->rssi, wap->channel);
	if (sizeNeeded <= spaceLeft) {
		// There is enough space to store the whole entry, so save it
		requestCur += sizeNeeded;
 80a050a:	6028      	str	r0, [r5, #0]
		numAdded++;
 80a050c:	3301      	adds	r3, #1
 80a050e:	6013      	str	r3, [r2, #0]
	}
}
 80a0510:	b009      	add	sp, #36	; 0x24
 80a0512:	bd30      	pop	{r4, r5, pc}
 80a0514:	2000024c 	.word	0x2000024c
 80a0518:	20000246 	.word	0x20000246
 80a051c:	080a573c 	.word	0x080a573c
 80a0520:	080a58b6 	.word	0x080a58b6
 80a0524:	080a573e 	.word	0x080a573e
 80a0528:	20000144 	.word	0x20000144

080a052c <_ZN23GoogleMapsDeviceLocator19subscriptionHandlerEPKcS1_>:
			Particle.publish(eventName, scanData, PRIVATE);
		}
	}
}

void GoogleMapsDeviceLocator::subscriptionHandler(const char *event, const char *data) {
 80a052c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	// event: hook-response/deviceLocator/<deviceid>/0

	if (callback) {
 80a0530:	6a43      	ldr	r3, [r0, #36]	; 0x24
			Particle.publish(eventName, scanData, PRIVATE);
		}
	}
}

void GoogleMapsDeviceLocator::subscriptionHandler(const char *event, const char *data) {
 80a0532:	4604      	mov	r4, r0
	// event: hook-response/deviceLocator/<deviceid>/0

	if (callback) {
 80a0534:	b38b      	cbz	r3, 80a059a <_ZN23GoogleMapsDeviceLocator19subscriptionHandlerEPKcS1_+0x6e>
		// float lat, float lon, float accuracy
		char *mutableCopy = strdup(data);
 80a0536:	4610      	mov	r0, r2
 80a0538:	f002 fe06 	bl	80a3148 <strdup>
		char *part, *end;
		float lat, lon, accuracy;

		part = strtok_r(mutableCopy, ",", &end);
 80a053c:	aa01      	add	r2, sp, #4
 80a053e:	4918      	ldr	r1, [pc, #96]	; (80a05a0 <_ZN23GoogleMapsDeviceLocator19subscriptionHandlerEPKcS1_+0x74>)
void GoogleMapsDeviceLocator::subscriptionHandler(const char *event, const char *data) {
	// event: hook-response/deviceLocator/<deviceid>/0

	if (callback) {
		// float lat, float lon, float accuracy
		char *mutableCopy = strdup(data);
 80a0540:	4605      	mov	r5, r0
		char *part, *end;
		float lat, lon, accuracy;

		part = strtok_r(mutableCopy, ",", &end);
 80a0542:	f003 fc90 	bl	80a3e66 <strtok_r>
		if (part) {
 80a0546:	b328      	cbz	r0, 80a0594 <_ZN23GoogleMapsDeviceLocator19subscriptionHandlerEPKcS1_+0x68>
			lat = atof(part);
 80a0548:	f002 fca2 	bl	80a2e90 <atof>
			part = strtok_r(NULL, ",", &end);
 80a054c:	aa01      	add	r2, sp, #4
		char *part, *end;
		float lat, lon, accuracy;

		part = strtok_r(mutableCopy, ",", &end);
		if (part) {
			lat = atof(part);
 80a054e:	4606      	mov	r6, r0
 80a0550:	460f      	mov	r7, r1
			part = strtok_r(NULL, ",", &end);
 80a0552:	2000      	movs	r0, #0
 80a0554:	4912      	ldr	r1, [pc, #72]	; (80a05a0 <_ZN23GoogleMapsDeviceLocator19subscriptionHandlerEPKcS1_+0x74>)
 80a0556:	f003 fc86 	bl	80a3e66 <strtok_r>
			if (part) {
 80a055a:	b1d8      	cbz	r0, 80a0594 <_ZN23GoogleMapsDeviceLocator19subscriptionHandlerEPKcS1_+0x68>
				lon = atof(part);
 80a055c:	f002 fc98 	bl	80a2e90 <atof>
				part = strtok_r(NULL, ",", &end);
 80a0560:	aa01      	add	r2, sp, #4
		part = strtok_r(mutableCopy, ",", &end);
		if (part) {
			lat = atof(part);
			part = strtok_r(NULL, ",", &end);
			if (part) {
				lon = atof(part);
 80a0562:	4680      	mov	r8, r0
 80a0564:	4689      	mov	r9, r1
				part = strtok_r(NULL, ",", &end);
 80a0566:	2000      	movs	r0, #0
 80a0568:	490d      	ldr	r1, [pc, #52]	; (80a05a0 <_ZN23GoogleMapsDeviceLocator19subscriptionHandlerEPKcS1_+0x74>)
 80a056a:	f003 fc7c 	bl	80a3e66 <strtok_r>
				if (part) {
 80a056e:	b188      	cbz	r0, 80a0594 <_ZN23GoogleMapsDeviceLocator19subscriptionHandlerEPKcS1_+0x68>
					accuracy = atof(part);
 80a0570:	f002 fc8e 	bl	80a2e90 <atof>

					(*callback)(lat, lon, accuracy);
 80a0574:	f002 fa50 	bl	80a2a18 <__aeabi_d2f>
 80a0578:	4649      	mov	r1, r9
 80a057a:	4682      	mov	sl, r0
 80a057c:	4640      	mov	r0, r8
 80a057e:	f002 fa4b 	bl	80a2a18 <__aeabi_d2f>
 80a0582:	4680      	mov	r8, r0
 80a0584:	4639      	mov	r1, r7
 80a0586:	4630      	mov	r0, r6
 80a0588:	f002 fa46 	bl	80a2a18 <__aeabi_d2f>
 80a058c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80a058e:	4652      	mov	r2, sl
 80a0590:	4641      	mov	r1, r8
 80a0592:	4798      	blx	r3
				}
			}
		}

		free(mutableCopy);
 80a0594:	4628      	mov	r0, r5
 80a0596:	f000 fb35 	bl	80a0c04 <free>
	}
}
 80a059a:	b002      	add	sp, #8
 80a059c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a05a0:	080a573c 	.word	0x080a573c

080a05a4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM23GoogleMapsDeviceLocatorFvPKcS5_EEPS3_St12_PlaceholderILi1EESA_ILi2EEEEE10_M_managerERSt9_Any_dataRKSG_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80a05a4:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a05a6:	b538      	push	{r3, r4, r5, lr}
 80a05a8:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 80a05aa:	d005      	beq.n	80a05b8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM23GoogleMapsDeviceLocatorFvPKcS5_EEPS3_St12_PlaceholderILi1EESA_ILi2EEEEE10_M_managerERSt9_Any_dataRKSG_St18_Manager_operation+0x14>
 80a05ac:	2a03      	cmp	r2, #3
 80a05ae:	d00f      	beq.n	80a05d0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM23GoogleMapsDeviceLocatorFvPKcS5_EEPS3_St12_PlaceholderILi1EESA_ILi2EEEEE10_M_managerERSt9_Any_dataRKSG_St18_Manager_operation+0x2c>
 80a05b0:	2a01      	cmp	r2, #1
 80a05b2:	d111      	bne.n	80a05d8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM23GoogleMapsDeviceLocatorFvPKcS5_EEPS3_St12_PlaceholderILi1EESA_ILi2EEEEE10_M_managerERSt9_Any_dataRKSG_St18_Manager_operation+0x34>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a05b4:	680b      	ldr	r3, [r1, #0]
 80a05b6:	e009      	b.n	80a05cc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM23GoogleMapsDeviceLocatorFvPKcS5_EEPS3_St12_PlaceholderILi1EESA_ILi2EEEEE10_M_managerERSt9_Any_dataRKSG_St18_Manager_operation+0x28>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a05b8:	200c      	movs	r0, #12
 80a05ba:	680d      	ldr	r5, [r1, #0]
 80a05bc:	f7ff fd6f 	bl	80a009e <_Znwj>
 80a05c0:	4603      	mov	r3, r0
 80a05c2:	b118      	cbz	r0, 80a05cc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM23GoogleMapsDeviceLocatorFvPKcS5_EEPS3_St12_PlaceholderILi1EESA_ILi2EEEEE10_M_managerERSt9_Any_dataRKSG_St18_Manager_operation+0x28>
 80a05c4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80a05c8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80a05cc:	6023      	str	r3, [r4, #0]
 80a05ce:	e003      	b.n	80a05d8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM23GoogleMapsDeviceLocatorFvPKcS5_EEPS3_St12_PlaceholderILi1EESA_ILi2EEEEE10_M_managerERSt9_Any_dataRKSG_St18_Manager_operation+0x34>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a05d0:	210c      	movs	r1, #12
 80a05d2:	6800      	ldr	r0, [r0, #0]
 80a05d4:	f001 fc1f 	bl	80a1e16 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80a05d8:	2000      	movs	r0, #0
 80a05da:	bd38      	pop	{r3, r4, r5, pc}

080a05dc <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a05dc:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a05de:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a05e0:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a05e2:	b113      	cbz	r3, 80a05ea <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a05e4:	2203      	movs	r2, #3
 80a05e6:	4601      	mov	r1, r0
 80a05e8:	4798      	blx	r3
    }
 80a05ea:	4620      	mov	r0, r4
 80a05ec:	bd10      	pop	{r4, pc}
	...

080a05f0 <_ZN23GoogleMapsDeviceLocatorC1Ev>:

static char requestBuf[256];
static char *requestCur;
static int numAdded = 0;

GoogleMapsDeviceLocator::GoogleMapsDeviceLocator() : locatorMode(LOCATOR_MODE_MANUAL), periodMs(10000), eventName("deviceLocator"),
 80a05f0:	b538      	push	{r3, r4, r5, lr}
	stateTime(0), state(CONNECT_WAIT_STATE), callback(NULL), waitAfterConnect(8000) {
 80a05f2:	4b0f      	ldr	r3, [pc, #60]	; (80a0630 <_ZN23GoogleMapsDeviceLocatorC1Ev+0x40>)

static char requestBuf[256];
static char *requestCur;
static int numAdded = 0;

GoogleMapsDeviceLocator::GoogleMapsDeviceLocator() : locatorMode(LOCATOR_MODE_MANUAL), periodMs(10000), eventName("deviceLocator"),
 80a05f4:	4604      	mov	r4, r0
	stateTime(0), state(CONNECT_WAIT_STATE), callback(NULL), waitAfterConnect(8000) {
 80a05f6:	6003      	str	r3, [r0, #0]
 80a05f8:	f242 7310 	movw	r3, #10000	; 0x2710
 80a05fc:	2500      	movs	r5, #0
 80a05fe:	6045      	str	r5, [r0, #4]
 80a0600:	6083      	str	r3, [r0, #8]
 80a0602:	490c      	ldr	r1, [pc, #48]	; (80a0634 <_ZN23GoogleMapsDeviceLocatorC1Ev+0x44>)
 80a0604:	300c      	adds	r0, #12
 80a0606:	f001 f862 	bl	80a16ce <_ZN6StringC1EPK19__FlashStringHelper>
 80a060a:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 80a060e:	62a3      	str	r3, [r4, #40]	; 0x28
 80a0610:	61e5      	str	r5, [r4, #28]
 80a0612:	6225      	str	r5, [r4, #32]
 80a0614:	6265      	str	r5, [r4, #36]	; 0x24
 80a0616:	4908      	ldr	r1, [pc, #32]	; (80a0638 <_ZN23GoogleMapsDeviceLocatorC1Ev+0x48>)
 80a0618:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 80a061c:	f001 f857 	bl	80a16ce <_ZN6StringC1EPK19__FlashStringHelper>
 80a0620:	f44f 739b 	mov.w	r3, #310	; 0x136
 80a0624:	63e3      	str	r3, [r4, #60]	; 0x3c
 80a0626:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 80a062a:	6423      	str	r3, [r4, #64]	; 0x40

}
 80a062c:	4620      	mov	r0, r4
 80a062e:	bd38      	pop	{r3, r4, r5, pc}
 80a0630:	080a5734 	.word	0x080a5734
 80a0634:	080a541c 	.word	0x080a541c
 80a0638:	080a5774 	.word	0x080a5774

080a063c <_ZN23GoogleMapsDeviceLocator18withLocatePeriodicEm>:
}

GoogleMapsDeviceLocator &GoogleMapsDeviceLocator::withLocatePeriodic(unsigned long secondsPeriodic) {
	locatorMode = LOCATOR_MODE_PERIODIC;
	if (secondsPeriodic < 5) {
		secondsPeriodic = 5;
 80a063c:	2904      	cmp	r1, #4
 80a063e:	bf98      	it	ls
 80a0640:	2105      	movls	r1, #5
	locatorMode = LOCATOR_MODE_ONCE;
	return *this;
}

GoogleMapsDeviceLocator &GoogleMapsDeviceLocator::withLocatePeriodic(unsigned long secondsPeriodic) {
	locatorMode = LOCATOR_MODE_PERIODIC;
 80a0642:	2302      	movs	r3, #2
 80a0644:	6043      	str	r3, [r0, #4]
	if (secondsPeriodic < 5) {
		secondsPeriodic = 5;
	}
	periodMs = secondsPeriodic * 1000;
 80a0646:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a064a:	4359      	muls	r1, r3
 80a064c:	6081      	str	r1, [r0, #8]
	return *this;
}
 80a064e:	4770      	bx	lr

080a0650 <_ZN23GoogleMapsDeviceLocator13withEventNameEPKc>:

GoogleMapsDeviceLocator &GoogleMapsDeviceLocator::withEventName(const char *name) {
 80a0650:	b510      	push	{r4, lr}
 80a0652:	4604      	mov	r4, r0
	this->eventName = name;
 80a0654:	300c      	adds	r0, #12
 80a0656:	f001 f84d 	bl	80a16f4 <_ZN6StringaSEPKc>
	return *this;
}
 80a065a:	4620      	mov	r0, r4
 80a065c:	bd10      	pop	{r4, pc}
	...

080a0660 <_ZN23GoogleMapsDeviceLocator8wifiScanEv>:
		numAdded++;
	}
}


const char *GoogleMapsDeviceLocator::wifiScan() {
 80a0660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	requestCur = requestBuf;
	numAdded = 0;

	requestCur += sprintf(requestCur, "{\"w\":{\"a\":");
 80a0662:	4c10      	ldr	r4, [pc, #64]	; (80a06a4 <_ZN23GoogleMapsDeviceLocator8wifiScanEv+0x44>)


const char *GoogleMapsDeviceLocator::wifiScan() {

	requestCur = requestBuf;
	numAdded = 0;
 80a0664:	4f10      	ldr	r7, [pc, #64]	; (80a06a8 <_ZN23GoogleMapsDeviceLocator8wifiScanEv+0x48>)
 80a0666:	2500      	movs	r5, #0

	requestCur += sprintf(requestCur, "{\"w\":{\"a\":");
	*requestCur++ = '[';
 80a0668:	4e10      	ldr	r6, [pc, #64]	; (80a06ac <_ZN23GoogleMapsDeviceLocator8wifiScanEv+0x4c>)
const char *GoogleMapsDeviceLocator::wifiScan() {

	requestCur = requestBuf;
	numAdded = 0;

	requestCur += sprintf(requestCur, "{\"w\":{\"a\":");
 80a066a:	4911      	ldr	r1, [pc, #68]	; (80a06b0 <_ZN23GoogleMapsDeviceLocator8wifiScanEv+0x50>)
 80a066c:	4620      	mov	r0, r4


const char *GoogleMapsDeviceLocator::wifiScan() {

	requestCur = requestBuf;
	numAdded = 0;
 80a066e:	603d      	str	r5, [r7, #0]

	requestCur += sprintf(requestCur, "{\"w\":{\"a\":");
 80a0670:	f002 fd62 	bl	80a3138 <strcpy>
	*requestCur++ = '[';
 80a0674:	f104 030b 	add.w	r3, r4, #11
 80a0678:	6033      	str	r3, [r6, #0]
 80a067a:	235b      	movs	r3, #91	; 0x5b
 80a067c:	72a3      	strb	r3, [r4, #10]
    {
        setIPAddressSource(DYNAMIC_IP);
    }

    int scan(wlan_scan_result_t callback, void* cookie=NULL) {
        return wlan_scan(callback, cookie);
 80a067e:	4629      	mov	r1, r5
 80a0680:	480c      	ldr	r0, [pc, #48]	; (80a06b4 <_ZN23GoogleMapsDeviceLocator8wifiScanEv+0x54>)
 80a0682:	f000 f9e3 	bl	80a0a4c <wlan_scan>

	WiFi.scan(wifiScanCallback);

	*requestCur++ = ']';
 80a0686:	6833      	ldr	r3, [r6, #0]
 80a0688:	225d      	movs	r2, #93	; 0x5d
 80a068a:	701a      	strb	r2, [r3, #0]
	*requestCur++ = '}';
 80a068c:	227d      	movs	r2, #125	; 0x7d
 80a068e:	705a      	strb	r2, [r3, #1]
	*requestCur++ = '}';
 80a0690:	709a      	strb	r2, [r3, #2]
	*requestCur++ = 0;
 80a0692:	70dd      	strb	r5, [r3, #3]
 80a0694:	1d1a      	adds	r2, r3, #4

	if (numAdded == 0) {
 80a0696:	683b      	ldr	r3, [r7, #0]
	WiFi.scan(wifiScanCallback);

	*requestCur++ = ']';
	*requestCur++ = '}';
	*requestCur++ = '}';
	*requestCur++ = 0;
 80a0698:	6032      	str	r2, [r6, #0]

	if (numAdded == 0) {
 80a069a:	b903      	cbnz	r3, 80a069e <_ZN23GoogleMapsDeviceLocator8wifiScanEv+0x3e>
		requestBuf[0] = 0;
 80a069c:	7023      	strb	r3, [r4, #0]
	}

	return requestBuf;
}
 80a069e:	4801      	ldr	r0, [pc, #4]	; (80a06a4 <_ZN23GoogleMapsDeviceLocator8wifiScanEv+0x44>)
 80a06a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a06a2:	bf00      	nop
 80a06a4:	20000149 	.word	0x20000149
 80a06a8:	20000144 	.word	0x20000144
 80a06ac:	2000024c 	.word	0x2000024c
 80a06b0:	080a5779 	.word	0x080a5779
 80a06b4:	080a04ad 	.word	0x080a04ad

080a06b8 <_ZN23GoogleMapsDeviceLocator15publishLocationEv>:
	return cellularScan();
#endif
}


void GoogleMapsDeviceLocator::publishLocation() {
 80a06b8:	b530      	push	{r4, r5, lr}
 80a06ba:	4605      	mov	r5, r0
 80a06bc:	b085      	sub	sp, #20

	Serial.println("publishLocation");
 80a06be:	f001 f9ef 	bl	80a1aa0 <_Z16_fetch_usbserialv>
 80a06c2:	4918      	ldr	r1, [pc, #96]	; (80a0724 <_ZN23GoogleMapsDeviceLocator15publishLocationEv+0x6c>)
 80a06c4:	f000 ff45 	bl	80a1552 <_ZN5Print7printlnEPKc>

}

const char *GoogleMapsDeviceLocator::scan() {
#if Wiring_WiFi
	return wifiScan();
 80a06c8:	4628      	mov	r0, r5
 80a06ca:	f7ff ffc9 	bl	80a0660 <_ZN23GoogleMapsDeviceLocator8wifiScanEv>
 80a06ce:	4604      	mov	r4, r0

	Serial.println("publishLocation");

	const char *scanData = scan();

	Serial.printlnf("scanData=%s", scanData);
 80a06d0:	f001 f9e6 	bl	80a1aa0 <_Z16_fetch_usbserialv>
 80a06d4:	4623      	mov	r3, r4
 80a06d6:	4a14      	ldr	r2, [pc, #80]	; (80a0728 <_ZN23GoogleMapsDeviceLocator15publishLocationEv+0x70>)
 80a06d8:	2101      	movs	r1, #1
 80a06da:	f000 ff63 	bl	80a15a4 <_ZN5Print11printf_implEbPKcz>

	if (scanData[0]) {
 80a06de:	7823      	ldrb	r3, [r4, #0]
 80a06e0:	b1f3      	cbz	r3, 80a0720 <_ZN23GoogleMapsDeviceLocator15publishLocationEv+0x68>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a06e2:	f000 fa07 	bl	80a0af4 <spark_cloud_flag_connected>

		if (Particle.connected()) {
 80a06e6:	b1d8      	cbz	r0, 80a0720 <_ZN23GoogleMapsDeviceLocator15publishLocationEv+0x68>
 80a06e8:	4b10      	ldr	r3, [pc, #64]	; (80a072c <_ZN23GoogleMapsDeviceLocator15publishLocationEv+0x74>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80a06ea:	4622      	mov	r2, r4
 80a06ec:	781b      	ldrb	r3, [r3, #0]
 80a06ee:	68e9      	ldr	r1, [r5, #12]
 80a06f0:	f88d 3000 	strb.w	r3, [sp]
 80a06f4:	a802      	add	r0, sp, #8
 80a06f6:	233c      	movs	r3, #60	; 0x3c
 80a06f8:	f000 fc50 	bl	80a0f9c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 80a06fc:	9c03      	ldr	r4, [sp, #12]
 80a06fe:	b17c      	cbz	r4, 80a0720 <_ZN23GoogleMapsDeviceLocator15publishLocationEv+0x68>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a0700:	6863      	ldr	r3, [r4, #4]
 80a0702:	3b01      	subs	r3, #1
 80a0704:	6063      	str	r3, [r4, #4]
 80a0706:	b95b      	cbnz	r3, 80a0720 <_ZN23GoogleMapsDeviceLocator15publishLocationEv+0x68>
        {
          _M_dispose();
 80a0708:	6823      	ldr	r3, [r4, #0]
 80a070a:	4620      	mov	r0, r4
 80a070c:	689b      	ldr	r3, [r3, #8]
 80a070e:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a0710:	68a3      	ldr	r3, [r4, #8]
 80a0712:	3b01      	subs	r3, #1
 80a0714:	60a3      	str	r3, [r4, #8]
 80a0716:	b91b      	cbnz	r3, 80a0720 <_ZN23GoogleMapsDeviceLocator15publishLocationEv+0x68>
            _M_destroy();
 80a0718:	6823      	ldr	r3, [r4, #0]
 80a071a:	4620      	mov	r0, r4
 80a071c:	68db      	ldr	r3, [r3, #12]
 80a071e:	4798      	blx	r3
			Particle.publish(eventName, scanData, PRIVATE);
		}
	}
}
 80a0720:	b005      	add	sp, #20
 80a0722:	bd30      	pop	{r4, r5, pc}
 80a0724:	080a5784 	.word	0x080a5784
 80a0728:	080a5794 	.word	0x080a5794
 80a072c:	20000148 	.word	0x20000148

080a0730 <_ZN23GoogleMapsDeviceLocator4loopEv>:
	return *this;
}



void GoogleMapsDeviceLocator::loop() {
 80a0730:	b510      	push	{r4, lr}
	switch(state) {
 80a0732:	6a03      	ldr	r3, [r0, #32]
	return *this;
}



void GoogleMapsDeviceLocator::loop() {
 80a0734:	4604      	mov	r4, r0
	switch(state) {
 80a0736:	2b02      	cmp	r3, #2
 80a0738:	d00b      	beq.n	80a0752 <_ZN23GoogleMapsDeviceLocator4loopEv+0x22>
 80a073a:	2b03      	cmp	r3, #3
 80a073c:	d023      	beq.n	80a0786 <_ZN23GoogleMapsDeviceLocator4loopEv+0x56>
 80a073e:	2b00      	cmp	r3, #0
 80a0740:	d134      	bne.n	80a07ac <_ZN23GoogleMapsDeviceLocator4loopEv+0x7c>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a0742:	f000 f9d7 	bl	80a0af4 <spark_cloud_flag_connected>
	case CONNECT_WAIT_STATE:
		if (Particle.connected()) {
 80a0746:	b388      	cbz	r0, 80a07ac <_ZN23GoogleMapsDeviceLocator4loopEv+0x7c>
			state = CONNECTED_WAIT_STATE;
 80a0748:	2302      	movs	r3, #2
 80a074a:	6223      	str	r3, [r4, #32]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a074c:	f000 f89c 	bl	80a0888 <HAL_Timer_Get_Milli_Seconds>
 80a0750:	e017      	b.n	80a0782 <_ZN23GoogleMapsDeviceLocator4loopEv+0x52>
 80a0752:	f000 f899 	bl	80a0888 <HAL_Timer_Get_Milli_Seconds>
			stateTime = millis();
		}
		break;

	case CONNECTED_WAIT_STATE:
		if (millis() - stateTime >= waitAfterConnect) {
 80a0756:	69e3      	ldr	r3, [r4, #28]
 80a0758:	1ac0      	subs	r0, r0, r3
 80a075a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80a075c:	4298      	cmp	r0, r3
 80a075e:	d325      	bcc.n	80a07ac <_ZN23GoogleMapsDeviceLocator4loopEv+0x7c>
			// Wait several seconds after connecting before doing the location
			if (locatorMode == LOCATOR_MODE_ONCE) {
 80a0760:	6863      	ldr	r3, [r4, #4]
 80a0762:	2b01      	cmp	r3, #1
 80a0764:	d103      	bne.n	80a076e <_ZN23GoogleMapsDeviceLocator4loopEv+0x3e>
				publishLocation();
 80a0766:	4620      	mov	r0, r4
 80a0768:	f7ff ffa6 	bl	80a06b8 <_ZN23GoogleMapsDeviceLocator15publishLocationEv>
 80a076c:	e000      	b.n	80a0770 <_ZN23GoogleMapsDeviceLocator4loopEv+0x40>

				state = IDLE_STATE;
			}
			else
			if (locatorMode == LOCATOR_MODE_MANUAL) {
 80a076e:	b913      	cbnz	r3, 80a0776 <_ZN23GoogleMapsDeviceLocator4loopEv+0x46>
				state = IDLE_STATE;
 80a0770:	2304      	movs	r3, #4
 80a0772:	6223      	str	r3, [r4, #32]
 80a0774:	bd10      	pop	{r4, pc}
			}
			else {
				state = CONNECTED_STATE;
 80a0776:	2303      	movs	r3, #3
 80a0778:	6223      	str	r3, [r4, #32]
 80a077a:	f000 f885 	bl	80a0888 <HAL_Timer_Get_Milli_Seconds>
				stateTime = millis() - periodMs;
 80a077e:	68a3      	ldr	r3, [r4, #8]
 80a0780:	1ac0      	subs	r0, r0, r3
 80a0782:	61e0      	str	r0, [r4, #28]
 80a0784:	bd10      	pop	{r4, pc}
 80a0786:	f000 f9b5 	bl	80a0af4 <spark_cloud_flag_connected>
			}
		}
		break;

	case CONNECTED_STATE:
		if (Particle.connected()) {
 80a078a:	b170      	cbz	r0, 80a07aa <_ZN23GoogleMapsDeviceLocator4loopEv+0x7a>
 80a078c:	f000 f87c 	bl	80a0888 <HAL_Timer_Get_Milli_Seconds>
			if (millis() - stateTime >= periodMs) {
 80a0790:	69e3      	ldr	r3, [r4, #28]
 80a0792:	1ac0      	subs	r0, r0, r3
 80a0794:	68a3      	ldr	r3, [r4, #8]
 80a0796:	4298      	cmp	r0, r3
 80a0798:	d308      	bcc.n	80a07ac <_ZN23GoogleMapsDeviceLocator4loopEv+0x7c>
 80a079a:	f000 f875 	bl	80a0888 <HAL_Timer_Get_Milli_Seconds>
				stateTime = millis();
 80a079e:	61e0      	str	r0, [r4, #28]
				publishLocation();
 80a07a0:	4620      	mov	r0, r4
	case IDLE_STATE:
		// Just hang out here forever (entered only on LOCATOR_MODE_ONCE)
		break;
	}

}
 80a07a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

	case CONNECTED_STATE:
		if (Particle.connected()) {
			if (millis() - stateTime >= periodMs) {
				stateTime = millis();
				publishLocation();
 80a07a6:	f7ff bf87 	b.w	80a06b8 <_ZN23GoogleMapsDeviceLocator15publishLocationEv>
			}
		}
		else {
			// We have disconnected, rec
			state = CONNECT_WAIT_STATE;
 80a07aa:	6220      	str	r0, [r4, #32]
 80a07ac:	bd10      	pop	{r4, pc}

080a07ae <_ZNSt8functionIFvPKcS1_EEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a07ae:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a07b0:	2300      	movs	r3, #0
 80a07b2:	6083      	str	r3, [r0, #8]
 80a07b4:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a07b6:	4604      	mov	r4, r0
 80a07b8:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80a07ba:	b12b      	cbz	r3, 80a07c8 <_ZNSt8functionIFvPKcS1_EEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a07bc:	2202      	movs	r2, #2
 80a07be:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a07c0:	68eb      	ldr	r3, [r5, #12]
 80a07c2:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a07c4:	68ab      	ldr	r3, [r5, #8]
 80a07c6:	60a3      	str	r3, [r4, #8]
	}
    }
 80a07c8:	4620      	mov	r0, r4
 80a07ca:	bd38      	pop	{r3, r4, r5, pc}

080a07cc <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE>:
GoogleMapsDeviceLocator &GoogleMapsDeviceLocator::withEventName(const char *name) {
	this->eventName = name;
	return *this;
}

GoogleMapsDeviceLocator &GoogleMapsDeviceLocator::withSubscribe(GoogleMapsDeviceLocatorSubscriptionCallback callback) {
 80a07cc:	b530      	push	{r4, r5, lr}
 80a07ce:	b08b      	sub	sp, #44	; 0x2c
 80a07d0:	68c5      	ldr	r5, [r0, #12]
	this->callback = callback;
 80a07d2:	6241      	str	r1, [r0, #36]	; 0x24
GoogleMapsDeviceLocator &GoogleMapsDeviceLocator::withEventName(const char *name) {
	this->eventName = name;
	return *this;
}

GoogleMapsDeviceLocator &GoogleMapsDeviceLocator::withSubscribe(GoogleMapsDeviceLocatorSubscriptionCallback callback) {
 80a07d4:	4604      	mov	r4, r0
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, long seconds = 0, SleepOptionFlags flag = SLEEP_NETWORK_OFF) { return sleepPinImpl(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, std::chrono::seconds s, SleepOptionFlags flag = SLEEP_NETWORK_OFF) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, s.count(), flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, long seconds = 0) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, std::chrono::seconds s) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, flag, s.count()); }

    static String deviceID(void) { return spark_deviceID(); }
 80a07d6:	a806      	add	r0, sp, #24
 80a07d8:	f000 f994 	bl	80a0b04 <spark_deviceID>
	this->callback = callback;

	snprintf(requestBuf, sizeof(requestBuf), "hook-response/%s/%s", eventName.c_str(), System.deviceID().c_str());
 80a07dc:	9b06      	ldr	r3, [sp, #24]
 80a07de:	4a1c      	ldr	r2, [pc, #112]	; (80a0850 <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE+0x84>)
 80a07e0:	9300      	str	r3, [sp, #0]
 80a07e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80a07e6:	462b      	mov	r3, r5
 80a07e8:	481a      	ldr	r0, [pc, #104]	; (80a0854 <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE+0x88>)
 80a07ea:	f000 fa23 	bl	80a0c34 <snprintf>
 80a07ee:	a806      	add	r0, sp, #24
 80a07f0:	f000 ff26 	bl	80a1640 <_ZN6StringD1Ev>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a07f4:	2500      	movs	r5, #0
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a07f6:	200c      	movs	r0, #12
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a07f8:	9504      	str	r5, [sp, #16]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a07fa:	f7ff fc50 	bl	80a009e <_Znwj>
 80a07fe:	b118      	cbz	r0, 80a0808 <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE+0x3c>
	{ }

      _Bind(const _Bind&) = default;

      _Bind(_Bind&& __b)
      : _M_f(std::move(__b._M_f)), _M_bound_args(std::move(__b._M_bound_args))
 80a0800:	4b15      	ldr	r3, [pc, #84]	; (80a0858 <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE+0x8c>)
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a0802:	6084      	str	r4, [r0, #8]
 80a0804:	e880 0028 	stmia.w	r0, {r3, r5}
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a0808:	4b14      	ldr	r3, [pc, #80]	; (80a085c <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE+0x90>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a080a:	9002      	str	r0, [sp, #8]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a080c:	9305      	str	r3, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
 80a080e:	4b14      	ldr	r3, [pc, #80]	; (80a0860 <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE+0x94>)
        return spark_subscribe(eventName, handler, NULL, MY_DEVICES, deviceID, NULL);
    }

    bool subscribe(const char *eventName, wiring_event_handler_t handler, Spark_Subscription_Scope_TypeDef scope)
    {
        return subscribe_wiring(eventName, handler, scope);
 80a0810:	a902      	add	r1, sp, #8
 80a0812:	a806      	add	r0, sp, #24
 80a0814:	9304      	str	r3, [sp, #16]
 80a0816:	f7ff ffca 	bl	80a07ae <_ZNSt8functionIFvPKcS1_EEC1ERKS3_>
    }

    bool subscribe_wiring(const char *eventName, wiring_event_handler_t handler, Spark_Subscription_Scope_TypeDef scope, const char *deviceID = NULL)
    {
        bool success = false;
        if (handler) // if the call-wrapper has wrapped a callable object
 80a081a:	9b08      	ldr	r3, [sp, #32]
 80a081c:	b17b      	cbz	r3, 80a083e <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE+0x72>
        {
            auto wrapper = new wiring_event_handler_t(handler);
 80a081e:	2010      	movs	r0, #16
 80a0820:	f7ff fc3d 	bl	80a009e <_Znwj>
 80a0824:	4605      	mov	r5, r0
 80a0826:	b150      	cbz	r0, 80a083e <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE+0x72>
 80a0828:	a906      	add	r1, sp, #24
 80a082a:	f7ff ffc0 	bl	80a07ae <_ZNSt8functionIFvPKcS1_EEC1ERKS3_>
            if (wrapper) {
                success = spark_subscribe(eventName, (EventHandler)call_wiring_event_handler, wrapper, scope, deviceID, NULL);
 80a082e:	2300      	movs	r3, #0
 80a0830:	9301      	str	r3, [sp, #4]
 80a0832:	9300      	str	r3, [sp, #0]
 80a0834:	462a      	mov	r2, r5
 80a0836:	490b      	ldr	r1, [pc, #44]	; (80a0864 <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE+0x98>)
 80a0838:	4806      	ldr	r0, [pc, #24]	; (80a0854 <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE+0x88>)
 80a083a:	f000 f973 	bl	80a0b24 <spark_subscribe>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a083e:	a806      	add	r0, sp, #24
 80a0840:	f7ff fecc 	bl	80a05dc <_ZNSt14_Function_baseD1Ev>
 80a0844:	a802      	add	r0, sp, #8
 80a0846:	f7ff fec9 	bl	80a05dc <_ZNSt14_Function_baseD1Ev>

	Particle.subscribe(requestBuf, &GoogleMapsDeviceLocator::subscriptionHandler, this, MY_DEVICES);

	return *this;
}
 80a084a:	4620      	mov	r0, r4
 80a084c:	b00b      	add	sp, #44	; 0x2c
 80a084e:	bd30      	pop	{r4, r5, pc}
 80a0850:	080a57a0 	.word	0x080a57a0
 80a0854:	20000149 	.word	0x20000149
 80a0858:	080a052d 	.word	0x080a052d
 80a085c:	080a0455 	.word	0x080a0455
 80a0860:	080a05a5 	.word	0x080a05a5
 80a0864:	080a0d33 	.word	0x080a0d33

080a0868 <_GLOBAL__sub_I__ZN23GoogleMapsDeviceLocatorC2Ev>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a0868:	4b02      	ldr	r3, [pc, #8]	; (80a0874 <_GLOBAL__sub_I__ZN23GoogleMapsDeviceLocatorC2Ev+0xc>)
 80a086a:	2201      	movs	r2, #1
 80a086c:	701a      	strb	r2, [r3, #0]
 80a086e:	f000 b823 	b.w	80a08b8 <HAL_Pin_Map>
 80a0872:	bf00      	nop
 80a0874:	20000148 	.word	0x20000148

080a0878 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a0878:	b508      	push	{r3, lr}
 80a087a:	4b02      	ldr	r3, [pc, #8]	; (80a0884 <HAL_RNG_GetRandomNumber+0xc>)
 80a087c:	681b      	ldr	r3, [r3, #0]
 80a087e:	685b      	ldr	r3, [r3, #4]
 80a0880:	9301      	str	r3, [sp, #4]
 80a0882:	bd08      	pop	{r3, pc}
 80a0884:	0806019c 	.word	0x0806019c

080a0888 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a0888:	b508      	push	{r3, lr}
 80a088a:	4b02      	ldr	r3, [pc, #8]	; (80a0894 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a088c:	681b      	ldr	r3, [r3, #0]
 80a088e:	695b      	ldr	r3, [r3, #20]
 80a0890:	9301      	str	r3, [sp, #4]
 80a0892:	bd08      	pop	{r3, pc}
 80a0894:	0806019c 	.word	0x0806019c

080a0898 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
 80a0898:	b508      	push	{r3, lr}
 80a089a:	4b02      	ldr	r3, [pc, #8]	; (80a08a4 <HAL_RTC_Get_UnixTime+0xc>)
 80a089c:	681b      	ldr	r3, [r3, #0]
 80a089e:	69db      	ldr	r3, [r3, #28]
 80a08a0:	9301      	str	r3, [sp, #4]
 80a08a2:	bd08      	pop	{r3, pc}
 80a08a4:	0806019c 	.word	0x0806019c

080a08a8 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
 80a08a8:	b508      	push	{r3, lr}
 80a08aa:	4b02      	ldr	r3, [pc, #8]	; (80a08b4 <HAL_RTC_Time_Is_Valid+0xc>)
 80a08ac:	681b      	ldr	r3, [r3, #0]
 80a08ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a08b0:	9301      	str	r3, [sp, #4]
 80a08b2:	bd08      	pop	{r3, pc}
 80a08b4:	0806019c 	.word	0x0806019c

080a08b8 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80a08b8:	b508      	push	{r3, lr}
 80a08ba:	4b02      	ldr	r3, [pc, #8]	; (80a08c4 <HAL_Pin_Map+0xc>)
 80a08bc:	681b      	ldr	r3, [r3, #0]
 80a08be:	681b      	ldr	r3, [r3, #0]
 80a08c0:	9301      	str	r3, [sp, #4]
 80a08c2:	bd08      	pop	{r3, pc}
 80a08c4:	080601b0 	.word	0x080601b0

080a08c8 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
 80a08c8:	b508      	push	{r3, lr}
 80a08ca:	4b02      	ldr	r3, [pc, #8]	; (80a08d4 <HAL_I2C_Begin+0xc>)
 80a08cc:	681b      	ldr	r3, [r3, #0]
 80a08ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a08d0:	9301      	str	r3, [sp, #4]
 80a08d2:	bd08      	pop	{r3, pc}
 80a08d4:	080601ac 	.word	0x080601ac

080a08d8 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
 80a08d8:	b508      	push	{r3, lr}
 80a08da:	4b02      	ldr	r3, [pc, #8]	; (80a08e4 <HAL_I2C_Begin_Transmission+0xc>)
 80a08dc:	681b      	ldr	r3, [r3, #0]
 80a08de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a08e0:	9301      	str	r3, [sp, #4]
 80a08e2:	bd08      	pop	{r3, pc}
 80a08e4:	080601ac 	.word	0x080601ac

080a08e8 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
 80a08e8:	b508      	push	{r3, lr}
 80a08ea:	4b02      	ldr	r3, [pc, #8]	; (80a08f4 <HAL_I2C_End_Transmission+0xc>)
 80a08ec:	681b      	ldr	r3, [r3, #0]
 80a08ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80a08f0:	9301      	str	r3, [sp, #4]
 80a08f2:	bd08      	pop	{r3, pc}
 80a08f4:	080601ac 	.word	0x080601ac

080a08f8 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a08f8:	b508      	push	{r3, lr}
 80a08fa:	4b02      	ldr	r3, [pc, #8]	; (80a0904 <HAL_I2C_Write_Data+0xc>)
 80a08fc:	681b      	ldr	r3, [r3, #0]
 80a08fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a0900:	9301      	str	r3, [sp, #4]
 80a0902:	bd08      	pop	{r3, pc}
 80a0904:	080601ac 	.word	0x080601ac

080a0908 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a0908:	b508      	push	{r3, lr}
 80a090a:	4b02      	ldr	r3, [pc, #8]	; (80a0914 <HAL_I2C_Available_Data+0xc>)
 80a090c:	681b      	ldr	r3, [r3, #0]
 80a090e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a0910:	9301      	str	r3, [sp, #4]
 80a0912:	bd08      	pop	{r3, pc}
 80a0914:	080601ac 	.word	0x080601ac

080a0918 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a0918:	b508      	push	{r3, lr}
 80a091a:	4b02      	ldr	r3, [pc, #8]	; (80a0924 <HAL_I2C_Read_Data+0xc>)
 80a091c:	681b      	ldr	r3, [r3, #0]
 80a091e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a0920:	9301      	str	r3, [sp, #4]
 80a0922:	bd08      	pop	{r3, pc}
 80a0924:	080601ac 	.word	0x080601ac

080a0928 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a0928:	b508      	push	{r3, lr}
 80a092a:	4b02      	ldr	r3, [pc, #8]	; (80a0934 <HAL_I2C_Peek_Data+0xc>)
 80a092c:	681b      	ldr	r3, [r3, #0]
 80a092e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a0930:	9301      	str	r3, [sp, #4]
 80a0932:	bd08      	pop	{r3, pc}
 80a0934:	080601ac 	.word	0x080601ac

080a0938 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a0938:	b508      	push	{r3, lr}
 80a093a:	4b02      	ldr	r3, [pc, #8]	; (80a0944 <HAL_I2C_Flush_Data+0xc>)
 80a093c:	681b      	ldr	r3, [r3, #0]
 80a093e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a0940:	9301      	str	r3, [sp, #4]
 80a0942:	bd08      	pop	{r3, pc}
 80a0944:	080601ac 	.word	0x080601ac

080a0948 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
 80a0948:	b508      	push	{r3, lr}
 80a094a:	4b03      	ldr	r3, [pc, #12]	; (80a0958 <HAL_I2C_Init+0x10>)
 80a094c:	681b      	ldr	r3, [r3, #0]
 80a094e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a0952:	9301      	str	r3, [sp, #4]
 80a0954:	bd08      	pop	{r3, pc}
 80a0956:	0000      	.short	0x0000
 80a0958:	080601ac 	.word	0x080601ac

080a095c <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a095c:	b508      	push	{r3, lr}
 80a095e:	4b02      	ldr	r3, [pc, #8]	; (80a0968 <HAL_USART_Init+0xc>)
 80a0960:	681b      	ldr	r3, [r3, #0]
 80a0962:	699b      	ldr	r3, [r3, #24]
 80a0964:	9301      	str	r3, [sp, #4]
 80a0966:	bd08      	pop	{r3, pc}
 80a0968:	080601c4 	.word	0x080601c4

080a096c <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a096c:	b508      	push	{r3, lr}
 80a096e:	4b02      	ldr	r3, [pc, #8]	; (80a0978 <HAL_USART_Write_Data+0xc>)
 80a0970:	681b      	ldr	r3, [r3, #0]
 80a0972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a0974:	9301      	str	r3, [sp, #4]
 80a0976:	bd08      	pop	{r3, pc}
 80a0978:	080601c4 	.word	0x080601c4

080a097c <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a097c:	b508      	push	{r3, lr}
 80a097e:	4b02      	ldr	r3, [pc, #8]	; (80a0988 <HAL_USART_Available_Data+0xc>)
 80a0980:	681b      	ldr	r3, [r3, #0]
 80a0982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a0984:	9301      	str	r3, [sp, #4]
 80a0986:	bd08      	pop	{r3, pc}
 80a0988:	080601c4 	.word	0x080601c4

080a098c <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a098c:	b508      	push	{r3, lr}
 80a098e:	4b02      	ldr	r3, [pc, #8]	; (80a0998 <HAL_USART_Read_Data+0xc>)
 80a0990:	681b      	ldr	r3, [r3, #0]
 80a0992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a0994:	9301      	str	r3, [sp, #4]
 80a0996:	bd08      	pop	{r3, pc}
 80a0998:	080601c4 	.word	0x080601c4

080a099c <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a099c:	b508      	push	{r3, lr}
 80a099e:	4b02      	ldr	r3, [pc, #8]	; (80a09a8 <HAL_USART_Peek_Data+0xc>)
 80a09a0:	681b      	ldr	r3, [r3, #0]
 80a09a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a09a4:	9301      	str	r3, [sp, #4]
 80a09a6:	bd08      	pop	{r3, pc}
 80a09a8:	080601c4 	.word	0x080601c4

080a09ac <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a09ac:	b508      	push	{r3, lr}
 80a09ae:	4b02      	ldr	r3, [pc, #8]	; (80a09b8 <HAL_USART_Flush_Data+0xc>)
 80a09b0:	681b      	ldr	r3, [r3, #0]
 80a09b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a09b4:	9301      	str	r3, [sp, #4]
 80a09b6:	bd08      	pop	{r3, pc}
 80a09b8:	080601c4 	.word	0x080601c4

080a09bc <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a09bc:	b508      	push	{r3, lr}
 80a09be:	4b02      	ldr	r3, [pc, #8]	; (80a09c8 <HAL_USART_Available_Data_For_Write+0xc>)
 80a09c0:	681b      	ldr	r3, [r3, #0]
 80a09c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a09c4:	9301      	str	r3, [sp, #4]
 80a09c6:	bd08      	pop	{r3, pc}
 80a09c8:	080601c4 	.word	0x080601c4

080a09cc <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a09cc:	b508      	push	{r3, lr}
 80a09ce:	4b02      	ldr	r3, [pc, #8]	; (80a09d8 <HAL_USB_USART_Init+0xc>)
 80a09d0:	681b      	ldr	r3, [r3, #0]
 80a09d2:	681b      	ldr	r3, [r3, #0]
 80a09d4:	9301      	str	r3, [sp, #4]
 80a09d6:	bd08      	pop	{r3, pc}
 80a09d8:	080601d8 	.word	0x080601d8

080a09dc <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a09dc:	b508      	push	{r3, lr}
 80a09de:	4b02      	ldr	r3, [pc, #8]	; (80a09e8 <HAL_USB_USART_Begin+0xc>)
 80a09e0:	681b      	ldr	r3, [r3, #0]
 80a09e2:	685b      	ldr	r3, [r3, #4]
 80a09e4:	9301      	str	r3, [sp, #4]
 80a09e6:	bd08      	pop	{r3, pc}
 80a09e8:	080601d8 	.word	0x080601d8

080a09ec <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a09ec:	b508      	push	{r3, lr}
 80a09ee:	4b02      	ldr	r3, [pc, #8]	; (80a09f8 <HAL_USB_USART_Available_Data+0xc>)
 80a09f0:	681b      	ldr	r3, [r3, #0]
 80a09f2:	691b      	ldr	r3, [r3, #16]
 80a09f4:	9301      	str	r3, [sp, #4]
 80a09f6:	bd08      	pop	{r3, pc}
 80a09f8:	080601d8 	.word	0x080601d8

080a09fc <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a09fc:	b508      	push	{r3, lr}
 80a09fe:	4b02      	ldr	r3, [pc, #8]	; (80a0a08 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a0a00:	681b      	ldr	r3, [r3, #0]
 80a0a02:	695b      	ldr	r3, [r3, #20]
 80a0a04:	9301      	str	r3, [sp, #4]
 80a0a06:	bd08      	pop	{r3, pc}
 80a0a08:	080601d8 	.word	0x080601d8

080a0a0c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0a0c:	b508      	push	{r3, lr}
 80a0a0e:	4b02      	ldr	r3, [pc, #8]	; (80a0a18 <HAL_USB_USART_Receive_Data+0xc>)
 80a0a10:	681b      	ldr	r3, [r3, #0]
 80a0a12:	699b      	ldr	r3, [r3, #24]
 80a0a14:	9301      	str	r3, [sp, #4]
 80a0a16:	bd08      	pop	{r3, pc}
 80a0a18:	080601d8 	.word	0x080601d8

080a0a1c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0a1c:	b508      	push	{r3, lr}
 80a0a1e:	4b02      	ldr	r3, [pc, #8]	; (80a0a28 <HAL_USB_USART_Send_Data+0xc>)
 80a0a20:	681b      	ldr	r3, [r3, #0]
 80a0a22:	69db      	ldr	r3, [r3, #28]
 80a0a24:	9301      	str	r3, [sp, #4]
 80a0a26:	bd08      	pop	{r3, pc}
 80a0a28:	080601d8 	.word	0x080601d8

080a0a2c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a0a2c:	b508      	push	{r3, lr}
 80a0a2e:	4b02      	ldr	r3, [pc, #8]	; (80a0a38 <HAL_USB_USART_Flush_Data+0xc>)
 80a0a30:	681b      	ldr	r3, [r3, #0]
 80a0a32:	6a1b      	ldr	r3, [r3, #32]
 80a0a34:	9301      	str	r3, [sp, #4]
 80a0a36:	bd08      	pop	{r3, pc}
 80a0a38:	080601d8 	.word	0x080601d8

080a0a3c <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a0a3c:	b508      	push	{r3, lr}
 80a0a3e:	4b02      	ldr	r3, [pc, #8]	; (80a0a48 <inet_gethostbyname+0xc>)
 80a0a40:	681b      	ldr	r3, [r3, #0]
 80a0a42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a0a44:	9301      	str	r3, [sp, #4]
 80a0a46:	bd08      	pop	{r3, pc}
 80a0a48:	080601c0 	.word	0x080601c0

080a0a4c <wlan_scan>:
DYNALIB_FN(19, hal_wlan, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(20, hal_wlan, wlan_select_antenna, int(WLanSelectAntenna_TypeDef))
DYNALIB_FN(21, hal_wlan, wlan_set_ipaddress, void(const HAL_IPAddress*, const HAL_IPAddress*, const HAL_IPAddress*, const HAL_IPAddress*, const HAL_IPAddress*, void*))
DYNALIB_FN(22, hal_wlan, wlan_set_ipaddress_source, void(IPAddressSource, bool, void*))
DYNALIB_FN(23, hal_wlan, wlan_scan, int(wlan_scan_result_t, void*))
 80a0a4c:	b508      	push	{r3, lr}
 80a0a4e:	4b02      	ldr	r3, [pc, #8]	; (80a0a58 <wlan_scan+0xc>)
 80a0a50:	681b      	ldr	r3, [r3, #0]
 80a0a52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80a0a54:	9301      	str	r3, [sp, #4]
 80a0a56:	bd08      	pop	{r3, pc}
 80a0a58:	080601c0 	.word	0x080601c0

080a0a5c <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
 80a0a5c:	b508      	push	{r3, lr}
 80a0a5e:	4b02      	ldr	r3, [pc, #8]	; (80a0a68 <system_mode+0xc>)
 80a0a60:	681b      	ldr	r3, [r3, #0]
 80a0a62:	681b      	ldr	r3, [r3, #0]
 80a0a64:	9301      	str	r3, [sp, #4]
 80a0a66:	bd08      	pop	{r3, pc}
 80a0a68:	080601a4 	.word	0x080601a4

080a0a6c <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a0a6c:	b508      	push	{r3, lr}
 80a0a6e:	4b02      	ldr	r3, [pc, #8]	; (80a0a78 <set_system_mode+0xc>)
 80a0a70:	681b      	ldr	r3, [r3, #0]
 80a0a72:	685b      	ldr	r3, [r3, #4]
 80a0a74:	9301      	str	r3, [sp, #4]
 80a0a76:	bd08      	pop	{r3, pc}
 80a0a78:	080601a4 	.word	0x080601a4

080a0a7c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a0a7c:	b508      	push	{r3, lr}
 80a0a7e:	4b02      	ldr	r3, [pc, #8]	; (80a0a88 <system_delay_ms+0xc>)
 80a0a80:	681b      	ldr	r3, [r3, #0]
 80a0a82:	695b      	ldr	r3, [r3, #20]
 80a0a84:	9301      	str	r3, [sp, #4]
 80a0a86:	bd08      	pop	{r3, pc}
 80a0a88:	080601a4 	.word	0x080601a4

080a0a8c <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 80a0a8c:	b508      	push	{r3, lr}
 80a0a8e:	4b02      	ldr	r3, [pc, #8]	; (80a0a98 <application_thread_current+0xc>)
 80a0a90:	681b      	ldr	r3, [r3, #0]
 80a0a92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a0a94:	9301      	str	r3, [sp, #4]
 80a0a96:	bd08      	pop	{r3, pc}
 80a0a98:	080601a4 	.word	0x080601a4

080a0a9c <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 80a0a9c:	b508      	push	{r3, lr}
 80a0a9e:	4b02      	ldr	r3, [pc, #8]	; (80a0aa8 <application_thread_invoke+0xc>)
 80a0aa0:	681b      	ldr	r3, [r3, #0]
 80a0aa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a0aa4:	9301      	str	r3, [sp, #4]
 80a0aa6:	bd08      	pop	{r3, pc}
 80a0aa8:	080601a4 	.word	0x080601a4

080a0aac <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
 80a0aac:	b508      	push	{r3, lr}
 80a0aae:	4b02      	ldr	r3, [pc, #8]	; (80a0ab8 <system_thread_get_state+0xc>)
 80a0ab0:	681b      	ldr	r3, [r3, #0]
 80a0ab2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a0ab4:	9301      	str	r3, [sp, #4]
 80a0ab6:	bd08      	pop	{r3, pc}
 80a0ab8:	080601a4 	.word	0x080601a4

080a0abc <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a0abc:	b508      	push	{r3, lr}
 80a0abe:	4b03      	ldr	r3, [pc, #12]	; (80a0acc <system_ctrl_set_app_request_handler+0x10>)
 80a0ac0:	681b      	ldr	r3, [r3, #0]
 80a0ac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a0ac6:	9301      	str	r3, [sp, #4]
 80a0ac8:	bd08      	pop	{r3, pc}
 80a0aca:	0000      	.short	0x0000
 80a0acc:	080601a4 	.word	0x080601a4

080a0ad0 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a0ad0:	b508      	push	{r3, lr}
 80a0ad2:	4b03      	ldr	r3, [pc, #12]	; (80a0ae0 <system_ctrl_set_result+0x10>)
 80a0ad4:	681b      	ldr	r3, [r3, #0]
 80a0ad6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a0ada:	9301      	str	r3, [sp, #4]
 80a0adc:	bd08      	pop	{r3, pc}
 80a0ade:	0000      	.short	0x0000
 80a0ae0:	080601a4 	.word	0x080601a4

080a0ae4 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 80a0ae4:	b508      	push	{r3, lr}
 80a0ae6:	4b02      	ldr	r3, [pc, #8]	; (80a0af0 <spark_process+0xc>)
 80a0ae8:	681b      	ldr	r3, [r3, #0]
 80a0aea:	689b      	ldr	r3, [r3, #8]
 80a0aec:	9301      	str	r3, [sp, #4]
 80a0aee:	bd08      	pop	{r3, pc}
 80a0af0:	080601cc 	.word	0x080601cc

080a0af4 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 80a0af4:	b508      	push	{r3, lr}
 80a0af6:	4b02      	ldr	r3, [pc, #8]	; (80a0b00 <spark_cloud_flag_connected+0xc>)
 80a0af8:	681b      	ldr	r3, [r3, #0]
 80a0afa:	695b      	ldr	r3, [r3, #20]
 80a0afc:	9301      	str	r3, [sp, #4]
 80a0afe:	bd08      	pop	{r3, pc}
 80a0b00:	080601cc 	.word	0x080601cc

080a0b04 <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
 80a0b04:	b508      	push	{r3, lr}
 80a0b06:	4b02      	ldr	r3, [pc, #8]	; (80a0b10 <spark_deviceID+0xc>)
 80a0b08:	681b      	ldr	r3, [r3, #0]
 80a0b0a:	69db      	ldr	r3, [r3, #28]
 80a0b0c:	9301      	str	r3, [sp, #4]
 80a0b0e:	bd08      	pop	{r3, pc}
 80a0b10:	080601cc 	.word	0x080601cc

080a0b14 <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 80a0b14:	b508      	push	{r3, lr}
 80a0b16:	4b02      	ldr	r3, [pc, #8]	; (80a0b20 <spark_send_event+0xc>)
 80a0b18:	681b      	ldr	r3, [r3, #0]
 80a0b1a:	6a1b      	ldr	r3, [r3, #32]
 80a0b1c:	9301      	str	r3, [sp, #4]
 80a0b1e:	bd08      	pop	{r3, pc}
 80a0b20:	080601cc 	.word	0x080601cc

080a0b24 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
 80a0b24:	b508      	push	{r3, lr}
 80a0b26:	4b02      	ldr	r3, [pc, #8]	; (80a0b30 <spark_subscribe+0xc>)
 80a0b28:	681b      	ldr	r3, [r3, #0]
 80a0b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a0b2c:	9301      	str	r3, [sp, #4]
 80a0b2e:	bd08      	pop	{r3, pc}
 80a0b30:	080601cc 	.word	0x080601cc

080a0b34 <spark_sync_time_pending>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
 80a0b34:	b508      	push	{r3, lr}
 80a0b36:	4b02      	ldr	r3, [pc, #8]	; (80a0b40 <spark_sync_time_pending+0xc>)
 80a0b38:	681b      	ldr	r3, [r3, #0]
 80a0b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0b3c:	9301      	str	r3, [sp, #4]
 80a0b3e:	bd08      	pop	{r3, pc}
 80a0b40:	080601cc 	.word	0x080601cc

080a0b44 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a0b44:	b508      	push	{r3, lr}
 80a0b46:	4b02      	ldr	r3, [pc, #8]	; (80a0b50 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a0b48:	681b      	ldr	r3, [r3, #0]
 80a0b4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a0b4c:	9301      	str	r3, [sp, #4]
 80a0b4e:	bd08      	pop	{r3, pc}
 80a0b50:	080601cc 	.word	0x080601cc

080a0b54 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0b54:	b508      	push	{r3, lr}
 80a0b56:	4b02      	ldr	r3, [pc, #8]	; (80a0b60 <network_connect+0xc>)
 80a0b58:	681b      	ldr	r3, [r3, #0]
 80a0b5a:	685b      	ldr	r3, [r3, #4]
 80a0b5c:	9301      	str	r3, [sp, #4]
 80a0b5e:	bd08      	pop	{r3, pc}
 80a0b60:	080601c8 	.word	0x080601c8

080a0b64 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a0b64:	b508      	push	{r3, lr}
 80a0b66:	4b02      	ldr	r3, [pc, #8]	; (80a0b70 <network_connecting+0xc>)
 80a0b68:	681b      	ldr	r3, [r3, #0]
 80a0b6a:	689b      	ldr	r3, [r3, #8]
 80a0b6c:	9301      	str	r3, [sp, #4]
 80a0b6e:	bd08      	pop	{r3, pc}
 80a0b70:	080601c8 	.word	0x080601c8

080a0b74 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a0b74:	b508      	push	{r3, lr}
 80a0b76:	4b02      	ldr	r3, [pc, #8]	; (80a0b80 <network_disconnect+0xc>)
 80a0b78:	681b      	ldr	r3, [r3, #0]
 80a0b7a:	68db      	ldr	r3, [r3, #12]
 80a0b7c:	9301      	str	r3, [sp, #4]
 80a0b7e:	bd08      	pop	{r3, pc}
 80a0b80:	080601c8 	.word	0x080601c8

080a0b84 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a0b84:	b508      	push	{r3, lr}
 80a0b86:	4b02      	ldr	r3, [pc, #8]	; (80a0b90 <network_ready+0xc>)
 80a0b88:	681b      	ldr	r3, [r3, #0]
 80a0b8a:	691b      	ldr	r3, [r3, #16]
 80a0b8c:	9301      	str	r3, [sp, #4]
 80a0b8e:	bd08      	pop	{r3, pc}
 80a0b90:	080601c8 	.word	0x080601c8

080a0b94 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0b94:	b508      	push	{r3, lr}
 80a0b96:	4b02      	ldr	r3, [pc, #8]	; (80a0ba0 <network_on+0xc>)
 80a0b98:	681b      	ldr	r3, [r3, #0]
 80a0b9a:	695b      	ldr	r3, [r3, #20]
 80a0b9c:	9301      	str	r3, [sp, #4]
 80a0b9e:	bd08      	pop	{r3, pc}
 80a0ba0:	080601c8 	.word	0x080601c8

080a0ba4 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0ba4:	b508      	push	{r3, lr}
 80a0ba6:	4b02      	ldr	r3, [pc, #8]	; (80a0bb0 <network_off+0xc>)
 80a0ba8:	681b      	ldr	r3, [r3, #0]
 80a0baa:	699b      	ldr	r3, [r3, #24]
 80a0bac:	9301      	str	r3, [sp, #4]
 80a0bae:	bd08      	pop	{r3, pc}
 80a0bb0:	080601c8 	.word	0x080601c8

080a0bb4 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a0bb4:	b508      	push	{r3, lr}
 80a0bb6:	4b02      	ldr	r3, [pc, #8]	; (80a0bc0 <network_listen+0xc>)
 80a0bb8:	681b      	ldr	r3, [r3, #0]
 80a0bba:	69db      	ldr	r3, [r3, #28]
 80a0bbc:	9301      	str	r3, [sp, #4]
 80a0bbe:	bd08      	pop	{r3, pc}
 80a0bc0:	080601c8 	.word	0x080601c8

080a0bc4 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a0bc4:	b508      	push	{r3, lr}
 80a0bc6:	4b02      	ldr	r3, [pc, #8]	; (80a0bd0 <network_listening+0xc>)
 80a0bc8:	681b      	ldr	r3, [r3, #0]
 80a0bca:	6a1b      	ldr	r3, [r3, #32]
 80a0bcc:	9301      	str	r3, [sp, #4]
 80a0bce:	bd08      	pop	{r3, pc}
 80a0bd0:	080601c8 	.word	0x080601c8

080a0bd4 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a0bd4:	b508      	push	{r3, lr}
 80a0bd6:	4b02      	ldr	r3, [pc, #8]	; (80a0be0 <network_set_listen_timeout+0xc>)
 80a0bd8:	681b      	ldr	r3, [r3, #0]
 80a0bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0bdc:	9301      	str	r3, [sp, #4]
 80a0bde:	bd08      	pop	{r3, pc}
 80a0be0:	080601c8 	.word	0x080601c8

080a0be4 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a0be4:	b508      	push	{r3, lr}
 80a0be6:	4b02      	ldr	r3, [pc, #8]	; (80a0bf0 <network_get_listen_timeout+0xc>)
 80a0be8:	681b      	ldr	r3, [r3, #0]
 80a0bea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0bec:	9301      	str	r3, [sp, #4]
 80a0bee:	bd08      	pop	{r3, pc}
 80a0bf0:	080601c8 	.word	0x080601c8

080a0bf4 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a0bf4:	b508      	push	{r3, lr}
 80a0bf6:	4b02      	ldr	r3, [pc, #8]	; (80a0c00 <malloc+0xc>)
 80a0bf8:	681b      	ldr	r3, [r3, #0]
 80a0bfa:	681b      	ldr	r3, [r3, #0]
 80a0bfc:	9301      	str	r3, [sp, #4]
 80a0bfe:	bd08      	pop	{r3, pc}
 80a0c00:	080601a0 	.word	0x080601a0

080a0c04 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a0c04:	b508      	push	{r3, lr}
 80a0c06:	4b02      	ldr	r3, [pc, #8]	; (80a0c10 <free+0xc>)
 80a0c08:	681b      	ldr	r3, [r3, #0]
 80a0c0a:	685b      	ldr	r3, [r3, #4]
 80a0c0c:	9301      	str	r3, [sp, #4]
 80a0c0e:	bd08      	pop	{r3, pc}
 80a0c10:	080601a0 	.word	0x080601a0

080a0c14 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a0c14:	b508      	push	{r3, lr}
 80a0c16:	4b02      	ldr	r3, [pc, #8]	; (80a0c20 <realloc+0xc>)
 80a0c18:	681b      	ldr	r3, [r3, #0]
 80a0c1a:	689b      	ldr	r3, [r3, #8]
 80a0c1c:	9301      	str	r3, [sp, #4]
 80a0c1e:	bd08      	pop	{r3, pc}
 80a0c20:	080601a0 	.word	0x080601a0

080a0c24 <siscanf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
 80a0c24:	b508      	push	{r3, lr}
 80a0c26:	4b02      	ldr	r3, [pc, #8]	; (80a0c30 <siscanf+0xc>)
 80a0c28:	681b      	ldr	r3, [r3, #0]
 80a0c2a:	699b      	ldr	r3, [r3, #24]
 80a0c2c:	9301      	str	r3, [sp, #4]
 80a0c2e:	bd08      	pop	{r3, pc}
 80a0c30:	080601a0 	.word	0x080601a0

080a0c34 <snprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
 80a0c34:	b508      	push	{r3, lr}
 80a0c36:	4b02      	ldr	r3, [pc, #8]	; (80a0c40 <snprintf+0xc>)
 80a0c38:	681b      	ldr	r3, [r3, #0]
 80a0c3a:	69db      	ldr	r3, [r3, #28]
 80a0c3c:	9301      	str	r3, [sp, #4]
 80a0c3e:	bd08      	pop	{r3, pc}
 80a0c40:	080601a0 	.word	0x080601a0

080a0c44 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 80a0c44:	b508      	push	{r3, lr}
 80a0c46:	4b02      	ldr	r3, [pc, #8]	; (80a0c50 <vsnprintf+0xc>)
 80a0c48:	681b      	ldr	r3, [r3, #0]
 80a0c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a0c4c:	9301      	str	r3, [sp, #4]
 80a0c4e:	bd08      	pop	{r3, pc}
 80a0c50:	080601a0 	.word	0x080601a0

080a0c54 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 80a0c54:	b508      	push	{r3, lr}
 80a0c56:	4b02      	ldr	r3, [pc, #8]	; (80a0c60 <abort+0xc>)
 80a0c58:	681b      	ldr	r3, [r3, #0]
 80a0c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a0c5c:	9301      	str	r3, [sp, #4]
 80a0c5e:	bd08      	pop	{r3, pc}
 80a0c60:	080601a0 	.word	0x080601a0

080a0c64 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 80a0c64:	b508      	push	{r3, lr}
 80a0c66:	4b02      	ldr	r3, [pc, #8]	; (80a0c70 <_malloc_r+0xc>)
 80a0c68:	681b      	ldr	r3, [r3, #0]
 80a0c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0c6c:	9301      	str	r3, [sp, #4]
 80a0c6e:	bd08      	pop	{r3, pc}
 80a0c70:	080601a0 	.word	0x080601a0

080a0c74 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a0c74:	2100      	movs	r1, #0
 80a0c76:	f7ff bf01 	b.w	80a0a7c <system_delay_ms>

080a0c7a <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 80a0c7a:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a0c7c:	6883      	ldr	r3, [r0, #8]
 80a0c7e:	4604      	mov	r4, r0
 80a0c80:	b90b      	cbnz	r3, 80a0c86 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 80a0c82:	f001 f8e4 	bl	80a1e4e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a0c86:	68c3      	ldr	r3, [r0, #12]
 80a0c88:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
 80a0c8a:	68a3      	ldr	r3, [r4, #8]
 80a0c8c:	b11b      	cbz	r3, 80a0c96 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a0c8e:	2203      	movs	r2, #3
 80a0c90:	4621      	mov	r1, r4
 80a0c92:	4620      	mov	r0, r4
 80a0c94:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a0c96:	4620      	mov	r0, r4
}
 80a0c98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a0c9c:	2110      	movs	r1, #16
 80a0c9e:	f001 b8ba 	b.w	80a1e16 <_ZdlPvj>

080a0ca2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a0ca2:	4770      	bx	lr

080a0ca4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
 80a0ca4:	2000      	movs	r0, #0
 80a0ca6:	4770      	bx	lr

080a0ca8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a0ca8:	b510      	push	{r4, lr}
 80a0caa:	4604      	mov	r4, r0
 80a0cac:	2110      	movs	r1, #16
 80a0cae:	f001 f8b2 	bl	80a1e16 <_ZdlPvj>
 80a0cb2:	4620      	mov	r0, r4
 80a0cb4:	bd10      	pop	{r4, pc}

080a0cb6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
 80a0cb6:	b508      	push	{r3, lr}
      { delete this; }
 80a0cb8:	b108      	cbz	r0, 80a0cbe <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
 80a0cba:	f7ff fff5 	bl	80a0ca8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 80a0cbe:	bd08      	pop	{r3, pc}

080a0cc0 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80a0cc0:	2200      	movs	r2, #0
 80a0cc2:	6002      	str	r2, [r0, #0]
 80a0cc4:	f64f 729c 	movw	r2, #65436	; 0xff9c
 80a0cc8:	8082      	strh	r2, [r0, #4]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 80a0cca:	b510      	push	{r4, lr}
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a0ccc:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
 80a0cd0:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 80a0cd2:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a0cd4:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
 80a0cd6:	680c      	ldr	r4, [r1, #0]
 80a0cd8:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80a0cda:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 80a0cdc:	bd10      	pop	{r4, pc}

080a0cde <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 80a0cde:	b510      	push	{r4, lr}
 80a0ce0:	4604      	mov	r4, r0
    free((void*)msg_);
 80a0ce2:	6800      	ldr	r0, [r0, #0]
 80a0ce4:	f7ff ff8e 	bl	80a0c04 <free>
}
 80a0ce8:	4620      	mov	r0, r4
 80a0cea:	bd10      	pop	{r4, pc}

080a0cec <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
 80a0cec:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 80a0cee:	68c4      	ldr	r4, [r0, #12]
 80a0cf0:	b1f4      	cbz	r4, 80a0d30 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
 80a0cf2:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 80a0cf4:	2b02      	cmp	r3, #2
 80a0cf6:	d103      	bne.n	80a0d00 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
 80a0cf8:	f104 000c 	add.w	r0, r4, #12
 80a0cfc:	f7ff ffef 	bl	80a0cde <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
 80a0d00:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
 80a0d02:	b135      	cbz	r5, 80a0d12 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a0d04:	4628      	mov	r0, r5
 80a0d06:	f7ff fc69 	bl	80a05dc <_ZNSt14_Function_baseD1Ev>
 80a0d0a:	2110      	movs	r1, #16
 80a0d0c:	4628      	mov	r0, r5
 80a0d0e:	f001 f882 	bl	80a1e16 <_ZdlPvj>
 80a0d12:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 80a0d14:	b135      	cbz	r5, 80a0d24 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
 80a0d16:	4628      	mov	r0, r5
 80a0d18:	f7ff fc60 	bl	80a05dc <_ZNSt14_Function_baseD1Ev>
 80a0d1c:	2110      	movs	r1, #16
 80a0d1e:	4628      	mov	r0, r5
 80a0d20:	f001 f879 	bl	80a1e16 <_ZdlPvj>
 80a0d24:	4620      	mov	r0, r4
 80a0d26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a0d2a:	2114      	movs	r1, #20
 80a0d2c:	f001 b873 	b.w	80a1e16 <_ZdlPvj>
 80a0d30:	bd38      	pop	{r3, r4, r5, pc}

080a0d32 <_ZN10CloudClass25call_wiring_event_handlerEPKvPKcS3_>:
    user_std_function_int_str_t* fn = (user_std_function_int_str_t*)(data);
    return (*fn)(String(param));
}

void CloudClass::call_wiring_event_handler(const void* handler_data, const char *event_name, const char *data)
{
 80a0d32:	b507      	push	{r0, r1, r2, lr}
 80a0d34:	e88d 0006 	stmia.w	sp, {r1, r2}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a0d38:	6882      	ldr	r2, [r0, #8]
 80a0d3a:	b90a      	cbnz	r2, 80a0d40 <_ZN10CloudClass25call_wiring_event_handlerEPKvPKcS3_+0xe>
	__throw_bad_function_call();
 80a0d3c:	f001 f887 	bl	80a1e4e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a0d40:	68c3      	ldr	r3, [r0, #12]
 80a0d42:	aa01      	add	r2, sp, #4
 80a0d44:	4669      	mov	r1, sp
 80a0d46:	4798      	blx	r3
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}
 80a0d48:	b003      	add	sp, #12
 80a0d4a:	f85d fb04 	ldr.w	pc, [sp], #4

080a0d4e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80a0d4e:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 80a0d50:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80a0d52:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
 80a0d54:	b17c      	cbz	r4, 80a0d76 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a0d56:	6863      	ldr	r3, [r4, #4]
 80a0d58:	3b01      	subs	r3, #1
 80a0d5a:	6063      	str	r3, [r4, #4]
 80a0d5c:	b95b      	cbnz	r3, 80a0d76 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
 80a0d5e:	6823      	ldr	r3, [r4, #0]
 80a0d60:	4620      	mov	r0, r4
 80a0d62:	689b      	ldr	r3, [r3, #8]
 80a0d64:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a0d66:	68a3      	ldr	r3, [r4, #8]
 80a0d68:	3b01      	subs	r3, #1
 80a0d6a:	60a3      	str	r3, [r4, #8]
 80a0d6c:	b91b      	cbnz	r3, 80a0d76 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 80a0d6e:	6823      	ldr	r3, [r4, #0]
 80a0d70:	4620      	mov	r0, r4
 80a0d72:	68db      	ldr	r3, [r3, #12]
 80a0d74:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
 80a0d76:	4628      	mov	r0, r5
 80a0d78:	bd38      	pop	{r3, r4, r5, pc}

080a0d7a <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
 80a0d7a:	b513      	push	{r0, r1, r4, lr}
 80a0d7c:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a0d7e:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
 80a0d82:	2300      	movs	r3, #0
 80a0d84:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a0d86:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a0d88:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
 80a0d8a:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a0d8c:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
 80a0d8e:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a0d90:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a0d92:	f7ff ffdc 	bl	80a0d4e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0d96:	4620      	mov	r0, r4
 80a0d98:	b002      	add	sp, #8
 80a0d9a:	bd10      	pop	{r4, pc}

080a0d9c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
 80a0d9c:	680b      	ldr	r3, [r1, #0]
 80a0d9e:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
 80a0da0:	b113      	cbz	r3, 80a0da8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 80a0da2:	685a      	ldr	r2, [r3, #4]
 80a0da4:	3201      	adds	r2, #1
 80a0da6:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
 80a0da8:	4770      	bx	lr

080a0daa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 80a0daa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a0dac:	460c      	mov	r4, r1
 80a0dae:	4606      	mov	r6, r0
 80a0db0:	460f      	mov	r7, r1
 80a0db2:	f854 3b04 	ldr.w	r3, [r4], #4
 80a0db6:	ad02      	add	r5, sp, #8
 80a0db8:	f845 3d08 	str.w	r3, [r5, #-8]!
 80a0dbc:	4621      	mov	r1, r4
 80a0dbe:	a801      	add	r0, sp, #4
 80a0dc0:	f7ff ffec 	bl	80a0d9c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
 80a0dc4:	4629      	mov	r1, r5
 80a0dc6:	4630      	mov	r0, r6
 80a0dc8:	f7ff ffd7 	bl	80a0d7a <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a0dcc:	a801      	add	r0, sp, #4
 80a0dce:	f7ff ffbe 	bl	80a0d4e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0dd2:	4620      	mov	r0, r4
 80a0dd4:	f7ff ffbb 	bl	80a0d4e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
 80a0dd8:	4638      	mov	r0, r7
 80a0dda:	2108      	movs	r1, #8
 80a0ddc:	f001 f81b 	bl	80a1e16 <_ZdlPvj>
        return p;
    }
 80a0de0:	4630      	mov	r0, r6
 80a0de2:	b003      	add	sp, #12
 80a0de4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a0de6 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
 80a0de6:	b513      	push	{r0, r1, r4, lr}
 80a0de8:	460b      	mov	r3, r1
 80a0dea:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a0dec:	c803      	ldmia	r0, {r0, r1}
 80a0dee:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 80a0df2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80a0df6:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80a0dfa:	e89d 0003 	ldmia.w	sp, {r0, r1}
 80a0dfe:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80a0e02:	b002      	add	sp, #8
 80a0e04:	bd10      	pop	{r4, pc}
	...

080a0e08 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 80a0e08:	b538      	push	{r3, r4, r5, lr}
 80a0e0a:	2300      	movs	r3, #0
 80a0e0c:	4604      	mov	r4, r0
 80a0e0e:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a0e10:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 80a0e12:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a0e14:	f7ff f943 	bl	80a009e <_Znwj>
 80a0e18:	b128      	cbz	r0, 80a0e26 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
 80a0e1a:	2301      	movs	r3, #1
 80a0e1c:	6043      	str	r3, [r0, #4]
 80a0e1e:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
 80a0e20:	4b02      	ldr	r3, [pc, #8]	; (80a0e2c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 80a0e22:	60c5      	str	r5, [r0, #12]
 80a0e24:	6003      	str	r3, [r0, #0]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a0e26:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
 80a0e28:	4620      	mov	r0, r4
 80a0e2a:	bd38      	pop	{r3, r4, r5, pc}
 80a0e2c:	080a57bc 	.word	0x080a57bc

080a0e30 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a0e30:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 80a0e32:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a0e34:	b90a      	cbnz	r2, 80a0e3a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 80a0e36:	f001 f80a 	bl	80a1e4e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a0e3a:	68c3      	ldr	r3, [r0, #12]
    }
 80a0e3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a0e40:	4718      	bx	r3

080a0e42 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a0e42:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a0e44:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 80a0e46:	f100 0110 	add.w	r1, r0, #16
 80a0e4a:	f7ff fff1 	bl	80a0e30 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 80a0e4e:	bd08      	pop	{r3, pc}

080a0e50 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a0e50:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 80a0e52:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a0e54:	b90a      	cbnz	r2, 80a0e5a <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 80a0e56:	f000 fffa 	bl	80a1e4e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a0e5a:	68c3      	ldr	r3, [r0, #12]
    }
 80a0e5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a0e60:	4718      	bx	r3

080a0e62 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a0e62:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a0e64:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 80a0e66:	f100 0110 	add.w	r1, r0, #16
 80a0e6a:	f7ff fff1 	bl	80a0e50 <_ZNKSt8functionIFvRKbEEclES1_>
 80a0e6e:	bd08      	pop	{r3, pc}

080a0e70 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a0e70:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a0e72:	2300      	movs	r3, #0
 80a0e74:	6083      	str	r3, [r0, #8]
 80a0e76:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a0e78:	4604      	mov	r4, r0
 80a0e7a:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80a0e7c:	b12b      	cbz	r3, 80a0e8a <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a0e7e:	2202      	movs	r2, #2
 80a0e80:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a0e82:	68eb      	ldr	r3, [r5, #12]
 80a0e84:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a0e86:	68ab      	ldr	r3, [r5, #8]
 80a0e88:	60a3      	str	r3, [r4, #8]
	}
    }
 80a0e8a:	4620      	mov	r0, r4
 80a0e8c:	bd38      	pop	{r3, r4, r5, pc}
	...

080a0e90 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
 80a0e90:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a0e92:	b089      	sub	sp, #36	; 0x24
 80a0e94:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 80a0e96:	4668      	mov	r0, sp
 80a0e98:	f7ff ff12 	bl	80a0cc0 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 80a0e9c:	f04f 0202 	mov.w	r2, #2
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 80a0ea0:	2300      	movs	r3, #0
 80a0ea2:	f88d 3008 	strb.w	r3, [sp, #8]
 80a0ea6:	e8d4 3f4f 	ldrexb	r3, [r4]
 80a0eaa:	2b00      	cmp	r3, #0
 80a0eac:	d103      	bne.n	80a0eb6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
 80a0eae:	e8c4 2f41 	strexb	r1, r2, [r4]
 80a0eb2:	2900      	cmp	r1, #0
 80a0eb4:	d1f7      	bne.n	80a0ea6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
 80a0eb6:	d002      	beq.n	80a0ebe <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
 80a0eb8:	f88d 3008 	strb.w	r3, [sp, #8]
 80a0ebc:	e063      	b.n	80a0f86 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
 80a0ebe:	f114 050c 	adds.w	r5, r4, #12
 80a0ec2:	d003      	beq.n	80a0ecc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
 80a0ec4:	4669      	mov	r1, sp
 80a0ec6:	4628      	mov	r0, r5
 80a0ec8:	f7ff fefa 	bl	80a0cc0 <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 80a0ecc:	f3bf 8f5f 	dmb	sy
 80a0ed0:	2301      	movs	r3, #1
 80a0ed2:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 80a0ed4:	f3bf 8f5f 	dmb	sy
 80a0ed8:	f104 0308 	add.w	r3, r4, #8
 80a0edc:	2000      	movs	r0, #0
 80a0ede:	e853 6f00 	ldrex	r6, [r3]
 80a0ee2:	e843 0200 	strex	r2, r0, [r3]
 80a0ee6:	2a00      	cmp	r2, #0
 80a0ee8:	d1f9      	bne.n	80a0ede <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
 80a0eea:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 80a0eee:	2e00      	cmp	r6, #0
 80a0ef0:	d049      	beq.n	80a0f86 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 80a0ef2:	f7ff fdcb 	bl	80a0a8c <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 80a0ef6:	b120      	cbz	r0, 80a0f02 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a0ef8:	4629      	mov	r1, r5
 80a0efa:	4630      	mov	r0, r6
 80a0efc:	f7ff ff98 	bl	80a0e30 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 80a0f00:	e03a      	b.n	80a0f78 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a0f02:	4631      	mov	r1, r6
 80a0f04:	a802      	add	r0, sp, #8
 80a0f06:	f7ff ffb3 	bl	80a0e70 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 80a0f0a:	68e0      	ldr	r0, [r4, #12]
 80a0f0c:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 80a0f10:	b108      	cbz	r0, 80a0f16 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
 80a0f12:	f002 f919 	bl	80a3148 <strdup>
 80a0f16:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a0f18:	2010      	movs	r0, #16
 80a0f1a:	f8ad 501c 	strh.w	r5, [sp, #28]
 80a0f1e:	f7ff f8be 	bl	80a009e <_Znwj>
 80a0f22:	4605      	mov	r5, r0
 80a0f24:	b1e8      	cbz	r0, 80a0f62 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a0f26:	2700      	movs	r7, #0
 80a0f28:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a0f2a:	2018      	movs	r0, #24
 80a0f2c:	f7ff f8b7 	bl	80a009e <_Znwj>
 80a0f30:	4604      	mov	r4, r0
 80a0f32:	b188      	cbz	r0, 80a0f58 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a0f34:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a0f36:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a0f38:	a802      	add	r0, sp, #8
 80a0f3a:	f7ff ff54 	bl	80a0de6 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a0f3e:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a0f40:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a0f42:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a0f44:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 80a0f46:	9204      	str	r2, [sp, #16]
 80a0f48:	68e2      	ldr	r2, [r4, #12]
 80a0f4a:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 80a0f4c:	60e3      	str	r3, [r4, #12]
 80a0f4e:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a0f52:	9205      	str	r2, [sp, #20]
 80a0f54:	f7ff feb4 	bl	80a0cc0 <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a0f58:	4b0d      	ldr	r3, [pc, #52]	; (80a0f90 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a0f5a:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a0f5c:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a0f5e:	4b0d      	ldr	r3, [pc, #52]	; (80a0f94 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
 80a0f60:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
 80a0f62:	a806      	add	r0, sp, #24
 80a0f64:	f7ff febb 	bl	80a0cde <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a0f68:	a802      	add	r0, sp, #8
 80a0f6a:	f7ff fb37 	bl	80a05dc <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a0f6e:	2200      	movs	r2, #0
 80a0f70:	4629      	mov	r1, r5
 80a0f72:	4809      	ldr	r0, [pc, #36]	; (80a0f98 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
 80a0f74:	f7ff fd92 	bl	80a0a9c <application_thread_invoke>
 80a0f78:	4630      	mov	r0, r6
 80a0f7a:	f7ff fb2f 	bl	80a05dc <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 80a0f7e:	2110      	movs	r1, #16
 80a0f80:	4630      	mov	r0, r6
 80a0f82:	f000 ff48 	bl	80a1e16 <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
 80a0f86:	4668      	mov	r0, sp
 80a0f88:	f7ff fea9 	bl	80a0cde <_ZN8particle5ErrorD1Ev>
    }
 80a0f8c:	b009      	add	sp, #36	; 0x24
 80a0f8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a0f90:	080a0e43 	.word	0x080a0e43
 80a0f94:	080a10b9 	.word	0x080a10b9
 80a0f98:	080a0c7b 	.word	0x080a0c7b

080a0f9c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80a0f9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a0fa0:	b08b      	sub	sp, #44	; 0x2c
 80a0fa2:	4606      	mov	r6, r0
 80a0fa4:	460f      	mov	r7, r1
 80a0fa6:	4690      	mov	r8, r2
 80a0fa8:	4699      	mov	r9, r3
 80a0faa:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a0fae:	f7ff fda1 	bl	80a0af4 <spark_cloud_flag_connected>
 80a0fb2:	ad07      	add	r5, sp, #28
    if (!connected()) {
 80a0fb4:	4683      	mov	fp, r0
 80a0fb6:	bb30      	cbnz	r0, 80a1006 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80a0fb8:	f64f 732e 	movw	r3, #65326	; 0xff2e
 80a0fbc:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a0fbe:	a905      	add	r1, sp, #20
 80a0fc0:	4628      	mov	r0, r5
 80a0fc2:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a0fc6:	f7ff fe7b 	bl	80a0cc0 <_ZN8particle5ErrorC1EOS0_>
 80a0fca:	2014      	movs	r0, #20
 80a0fcc:	f7ff f867 	bl	80a009e <_Znwj>
 80a0fd0:	4604      	mov	r4, r0
 80a0fd2:	b158      	cbz	r0, 80a0fec <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 80a0fd4:	2302      	movs	r3, #2
 80a0fd6:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a0fd8:	2301      	movs	r3, #1
 80a0fda:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a0fdc:	f8c0 b004 	str.w	fp, [r0, #4]
 80a0fe0:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
 80a0fe4:	4629      	mov	r1, r5
 80a0fe6:	300c      	adds	r0, #12
 80a0fe8:	f7ff fe6a 	bl	80a0cc0 <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
 80a0fec:	4630      	mov	r0, r6
 80a0fee:	4621      	mov	r1, r4
 80a0ff0:	f840 4b04 	str.w	r4, [r0], #4
 80a0ff4:	f7ff ff08 	bl	80a0e08 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a0ff8:	4628      	mov	r0, r5
 80a0ffa:	f7ff fe70 	bl	80a0cde <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 80a0ffe:	a805      	add	r0, sp, #20
 80a1000:	f7ff fe6d 	bl	80a0cde <_ZN8particle5ErrorD1Ev>
 80a1004:	e052      	b.n	80a10ac <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 80a1006:	2400      	movs	r4, #0
 80a1008:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 80a100a:	2014      	movs	r0, #20
 80a100c:	606c      	str	r4, [r5, #4]
 80a100e:	60ac      	str	r4, [r5, #8]
 80a1010:	9307      	str	r3, [sp, #28]
 80a1012:	f7ff f844 	bl	80a009e <_Znwj>
 80a1016:	4601      	mov	r1, r0
 80a1018:	b118      	cbz	r0, 80a1022 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
 80a101a:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a101c:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a101e:	6044      	str	r4, [r0, #4]
 80a1020:	6084      	str	r4, [r0, #8]
 80a1022:	a804      	add	r0, sp, #16
 80a1024:	9103      	str	r1, [sp, #12]
 80a1026:	f7ff feef 	bl	80a0e08 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
 80a102a:	4b22      	ldr	r3, [pc, #136]	; (80a10b4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 80a102c:	2008      	movs	r0, #8
 80a102e:	9308      	str	r3, [sp, #32]
 80a1030:	f7ff f835 	bl	80a009e <_Znwj>
 80a1034:	4604      	mov	r4, r0
 80a1036:	b128      	cbz	r0, 80a1044 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a1038:	9b03      	ldr	r3, [sp, #12]
 80a103a:	a904      	add	r1, sp, #16
 80a103c:	f840 3b04 	str.w	r3, [r0], #4
 80a1040:	f7ff feac 	bl	80a0d9c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a1044:	9500      	str	r5, [sp, #0]
 80a1046:	fa5f f38a 	uxtb.w	r3, sl
 80a104a:	464a      	mov	r2, r9
 80a104c:	4641      	mov	r1, r8
 80a104e:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
 80a1050:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a1052:	f7ff fd5f 	bl	80a0b14 <spark_send_event>
 80a1056:	b920      	cbnz	r0, 80a1062 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
 80a1058:	9b03      	ldr	r3, [sp, #12]
 80a105a:	785b      	ldrb	r3, [r3, #1]
 80a105c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80a1060:	b183      	cbz	r3, 80a1084 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
 80a1062:	9b03      	ldr	r3, [sp, #12]
 80a1064:	a904      	add	r1, sp, #16
 80a1066:	a806      	add	r0, sp, #24
 80a1068:	9305      	str	r3, [sp, #20]
 80a106a:	f7ff fe97 	bl	80a0d9c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
 80a106e:	a905      	add	r1, sp, #20
 80a1070:	4630      	mov	r0, r6
 80a1072:	f7ff fe82 	bl	80a0d7a <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a1076:	a806      	add	r0, sp, #24
 80a1078:	f7ff fe69 	bl	80a0d4e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a107c:	a804      	add	r0, sp, #16
 80a107e:	f7ff fe66 	bl	80a0d4e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a1082:	e013      	b.n	80a10ac <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
 80a1084:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
 80a1088:	a905      	add	r1, sp, #20
 80a108a:	a803      	add	r0, sp, #12
 80a108c:	9205      	str	r2, [sp, #20]
 80a108e:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a1092:	f7ff fefd 	bl	80a0e90 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a1096:	a805      	add	r0, sp, #20
 80a1098:	f7ff fe21 	bl	80a0cde <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 80a109c:	a805      	add	r0, sp, #20
 80a109e:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a10a0:	f7ff fe83 	bl	80a0daa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
 80a10a4:	a806      	add	r0, sp, #24
 80a10a6:	f7ff fe52 	bl	80a0d4e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a10aa:	e7da      	b.n	80a1062 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
    }

    return p.future();
}
 80a10ac:	4630      	mov	r0, r6
 80a10ae:	b00b      	add	sp, #44	; 0x2c
 80a10b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a10b4:	080a1229 	.word	0x080a1229

080a10b8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80a10b8:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a10ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a10bc:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 80a10be:	d006      	beq.n	80a10ce <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
 80a10c0:	2a03      	cmp	r2, #3
 80a10c2:	d017      	beq.n	80a10f4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
 80a10c4:	2a01      	cmp	r2, #1
 80a10c6:	d122      	bne.n	80a110e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a10c8:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a10ca:	6003      	str	r3, [r0, #0]
	      break;
 80a10cc:	e01f      	b.n	80a110e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a10ce:	2018      	movs	r0, #24
 80a10d0:	680e      	ldr	r6, [r1, #0]
 80a10d2:	f7fe ffe4 	bl	80a009e <_Znwj>
 80a10d6:	4605      	mov	r5, r0
 80a10d8:	b150      	cbz	r0, 80a10f0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a10da:	4631      	mov	r1, r6
 80a10dc:	f7ff fec8 	bl	80a0e70 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 80a10e0:	6930      	ldr	r0, [r6, #16]
 80a10e2:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 80a10e6:	b108      	cbz	r0, 80a10ec <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
 80a10e8:	f002 f82e 	bl	80a3148 <strdup>
 80a10ec:	6128      	str	r0, [r5, #16]
 80a10ee:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a10f0:	6025      	str	r5, [r4, #0]
 80a10f2:	e00c      	b.n	80a110e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a10f4:	6804      	ldr	r4, [r0, #0]
 80a10f6:	b154      	cbz	r4, 80a110e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
 80a10f8:	f104 0010 	add.w	r0, r4, #16
 80a10fc:	f7ff fdef 	bl	80a0cde <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a1100:	4620      	mov	r0, r4
 80a1102:	f7ff fa6b 	bl	80a05dc <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a1106:	2118      	movs	r1, #24
 80a1108:	4620      	mov	r0, r4
 80a110a:	f000 fe84 	bl	80a1e16 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80a110e:	2000      	movs	r0, #0
 80a1110:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1112 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a1112:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a1114:	2300      	movs	r3, #0
 80a1116:	6083      	str	r3, [r0, #8]
 80a1118:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a111a:	4604      	mov	r4, r0
 80a111c:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80a111e:	b12b      	cbz	r3, 80a112c <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a1120:	2202      	movs	r2, #2
 80a1122:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a1124:	68eb      	ldr	r3, [r5, #12]
 80a1126:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a1128:	68ab      	ldr	r3, [r5, #8]
 80a112a:	60a3      	str	r3, [r4, #8]
	}
    }
 80a112c:	4620      	mov	r0, r4
 80a112e:	bd38      	pop	{r3, r4, r5, pc}

080a1130 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80a1130:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a1132:	b570      	push	{r4, r5, r6, lr}
 80a1134:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 80a1136:	d006      	beq.n	80a1146 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
 80a1138:	2a03      	cmp	r2, #3
 80a113a:	d011      	beq.n	80a1160 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
 80a113c:	2a01      	cmp	r2, #1
 80a113e:	d118      	bne.n	80a1172 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a1140:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a1142:	6003      	str	r3, [r0, #0]
	      break;
 80a1144:	e015      	b.n	80a1172 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a1146:	2014      	movs	r0, #20
 80a1148:	680e      	ldr	r6, [r1, #0]
 80a114a:	f7fe ffa8 	bl	80a009e <_Znwj>
 80a114e:	4605      	mov	r5, r0
 80a1150:	b120      	cbz	r0, 80a115c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a1152:	4631      	mov	r1, r6
 80a1154:	f7ff ffdd 	bl	80a1112 <_ZNSt8functionIFvRKbEEC1ERKS3_>
 80a1158:	7c33      	ldrb	r3, [r6, #16]
 80a115a:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a115c:	6025      	str	r5, [r4, #0]
 80a115e:	e008      	b.n	80a1172 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a1160:	6804      	ldr	r4, [r0, #0]
 80a1162:	b134      	cbz	r4, 80a1172 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a1164:	4620      	mov	r0, r4
 80a1166:	f7ff fa39 	bl	80a05dc <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a116a:	2114      	movs	r1, #20
 80a116c:	4620      	mov	r0, r4
 80a116e:	f000 fe52 	bl	80a1e16 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80a1172:	2000      	movs	r0, #0
 80a1174:	bd70      	pop	{r4, r5, r6, pc}
	...

080a1178 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
 80a1178:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a117a:	460c      	mov	r4, r1

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 80a117c:	f3bf 8f5f 	dmb	sy
 80a1180:	b087      	sub	sp, #28
 80a1182:	2300      	movs	r3, #0
 80a1184:	e850 6f00 	ldrex	r6, [r0]
 80a1188:	e840 3200 	strex	r2, r3, [r0]
 80a118c:	2a00      	cmp	r2, #0
 80a118e:	d1f9      	bne.n	80a1184 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
 80a1190:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 80a1194:	2e00      	cmp	r6, #0
 80a1196:	d03f      	beq.n	80a1218 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 80a1198:	4618      	mov	r0, r3
 80a119a:	f7ff fc77 	bl	80a0a8c <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 80a119e:	4607      	mov	r7, r0
 80a11a0:	b120      	cbz	r0, 80a11ac <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a11a2:	4621      	mov	r1, r4
 80a11a4:	4630      	mov	r0, r6
 80a11a6:	f7ff fe53 	bl	80a0e50 <_ZNKSt8functionIFvRKbEEclES1_>
 80a11aa:	e02e      	b.n	80a120a <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a11ac:	4631      	mov	r1, r6
 80a11ae:	a801      	add	r0, sp, #4
 80a11b0:	f7ff ffaf 	bl	80a1112 <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a11b4:	7823      	ldrb	r3, [r4, #0]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a11b6:	2010      	movs	r0, #16
 80a11b8:	f88d 3014 	strb.w	r3, [sp, #20]
 80a11bc:	f7fe ff6f 	bl	80a009e <_Znwj>
 80a11c0:	4605      	mov	r5, r0
 80a11c2:	b1d0      	cbz	r0, 80a11fa <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a11c4:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a11c6:	2014      	movs	r0, #20
 80a11c8:	f7fe ff69 	bl	80a009e <_Znwj>
 80a11cc:	4604      	mov	r4, r0
 80a11ce:	b178      	cbz	r0, 80a11f0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a11d0:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a11d2:	4601      	mov	r1, r0
 80a11d4:	a801      	add	r0, sp, #4
 80a11d6:	f7ff fe06 	bl	80a0de6 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a11da:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 80a11dc:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a11de:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a11e0:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a11e2:	9203      	str	r2, [sp, #12]
 80a11e4:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a11e6:	60e3      	str	r3, [r4, #12]
 80a11e8:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a11ec:	9204      	str	r2, [sp, #16]
 80a11ee:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a11f0:	4b0a      	ldr	r3, [pc, #40]	; (80a121c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a11f2:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a11f4:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a11f6:	4b0a      	ldr	r3, [pc, #40]	; (80a1220 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
 80a11f8:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a11fa:	a801      	add	r0, sp, #4
 80a11fc:	f7ff f9ee 	bl	80a05dc <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a1200:	2200      	movs	r2, #0
 80a1202:	4629      	mov	r1, r5
 80a1204:	4807      	ldr	r0, [pc, #28]	; (80a1224 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
 80a1206:	f7ff fc49 	bl	80a0a9c <application_thread_invoke>
 80a120a:	4630      	mov	r0, r6
 80a120c:	f7ff f9e6 	bl	80a05dc <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 80a1210:	2110      	movs	r1, #16
 80a1212:	4630      	mov	r0, r6
 80a1214:	f000 fdff 	bl	80a1e16 <_ZdlPvj>
        }
    }
 80a1218:	b007      	add	sp, #28
 80a121a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a121c:	080a0e63 	.word	0x080a0e63
 80a1220:	080a1131 	.word	0x080a1131
 80a1224:	080a0c7b 	.word	0x080a0c7b

080a1228 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:

namespace {

using namespace particle;

void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 80a1228:	b530      	push	{r4, r5, lr}
 80a122a:	4604      	mov	r4, r0
 80a122c:	b085      	sub	sp, #20
 80a122e:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 80a1230:	4668      	mov	r0, sp
 80a1232:	4611      	mov	r1, r2
 80a1234:	f7ff fdb9 	bl	80a0daa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 80a1238:	b17c      	cbz	r4, 80a125a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
 80a123a:	b224      	sxth	r4, r4
 80a123c:	4628      	mov	r0, r5
 80a123e:	b10d      	cbz	r5, 80a1244 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
 80a1240:	f001 ff82 	bl	80a3148 <strdup>
 80a1244:	9002      	str	r0, [sp, #8]
 80a1246:	a902      	add	r1, sp, #8
 80a1248:	4668      	mov	r0, sp
 80a124a:	f8ad 400c 	strh.w	r4, [sp, #12]
 80a124e:	f7ff fe1f 	bl	80a0e90 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a1252:	a802      	add	r0, sp, #8
 80a1254:	f7ff fd43 	bl	80a0cde <_ZN8particle5ErrorD1Ev>
 80a1258:	e01d      	b.n	80a1296 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 80a125a:	f04f 0201 	mov.w	r2, #1
 80a125e:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 80a1260:	f88d 4008 	strb.w	r4, [sp, #8]
 80a1264:	e8d0 3f4f 	ldrexb	r3, [r0]
 80a1268:	42a3      	cmp	r3, r4
 80a126a:	d103      	bne.n	80a1274 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
 80a126c:	e8c0 2f41 	strexb	r1, r2, [r0]
 80a1270:	2900      	cmp	r1, #0
 80a1272:	d1f7      	bne.n	80a1264 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
 80a1274:	d002      	beq.n	80a127c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
 80a1276:	f88d 3008 	strb.w	r3, [sp, #8]
 80a127a:	e00c      	b.n	80a1296 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
 80a127c:	f110 010c 	adds.w	r1, r0, #12
 80a1280:	f04f 0301 	mov.w	r3, #1
 80a1284:	bf18      	it	ne
 80a1286:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 80a1288:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
 80a128c:	3004      	adds	r0, #4
 80a128e:	f800 3c03 	strb.w	r3, [r0, #-3]
 80a1292:	f7ff ff71 	bl	80a1178 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
 80a1296:	a801      	add	r0, sp, #4
 80a1298:	f7ff fd59 	bl	80a0d4e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
 80a129c:	b005      	add	sp, #20
 80a129e:	bd30      	pop	{r4, r5, pc}

080a12a0 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
 80a12a0:	4770      	bx	lr

080a12a2 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a12a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a12a4:	4606      	mov	r6, r0
 80a12a6:	4615      	mov	r5, r2
 80a12a8:	460c      	mov	r4, r1
 80a12aa:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a12ac:	42bc      	cmp	r4, r7
 80a12ae:	d006      	beq.n	80a12be <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a12b0:	6833      	ldr	r3, [r6, #0]
 80a12b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a12b6:	689b      	ldr	r3, [r3, #8]
 80a12b8:	4630      	mov	r0, r6
 80a12ba:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a12bc:	e7f6      	b.n	80a12ac <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a12be:	4628      	mov	r0, r5
 80a12c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a12c2 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a12c2:	2200      	movs	r2, #0
 80a12c4:	7c00      	ldrb	r0, [r0, #16]
 80a12c6:	f7ff bb17 	b.w	80a08f8 <HAL_I2C_Write_Data>

080a12ca <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a12ca:	2100      	movs	r1, #0
 80a12cc:	7c00      	ldrb	r0, [r0, #16]
 80a12ce:	f7ff bb1b 	b.w	80a0908 <HAL_I2C_Available_Data>

080a12d2 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a12d2:	2100      	movs	r1, #0
 80a12d4:	7c00      	ldrb	r0, [r0, #16]
 80a12d6:	f7ff bb1f 	b.w	80a0918 <HAL_I2C_Read_Data>

080a12da <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a12da:	2100      	movs	r1, #0
 80a12dc:	7c00      	ldrb	r0, [r0, #16]
 80a12de:	f7ff bb23 	b.w	80a0928 <HAL_I2C_Peek_Data>

080a12e2 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a12e2:	2100      	movs	r1, #0
 80a12e4:	7c00      	ldrb	r0, [r0, #16]
 80a12e6:	f7ff bb27 	b.w	80a0938 <HAL_I2C_Flush_Data>

080a12ea <_ZN7TwoWireD0Ev>:
 80a12ea:	b510      	push	{r4, lr}
 80a12ec:	4604      	mov	r4, r0
 80a12ee:	2114      	movs	r1, #20
 80a12f0:	f000 fd91 	bl	80a1e16 <_ZdlPvj>
 80a12f4:	4620      	mov	r0, r4
 80a12f6:	bd10      	pop	{r4, pc}

080a12f8 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
 80a12f8:	b510      	push	{r4, lr}
 80a12fa:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a12fc:	2300      	movs	r3, #0
 80a12fe:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a1300:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a1304:	60a3      	str	r3, [r4, #8]
 80a1306:	4b04      	ldr	r3, [pc, #16]	; (80a1318 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
 80a1308:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
 80a130a:	4608      	mov	r0, r1
 80a130c:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
 80a130e:	4611      	mov	r1, r2
 80a1310:	f7ff fb1a 	bl	80a0948 <HAL_I2C_Init>
}
 80a1314:	4620      	mov	r0, r4
 80a1316:	bd10      	pop	{r4, pc}
 80a1318:	080a57d8 	.word	0x080a57d8

080a131c <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 80a131c:	2300      	movs	r3, #0
 80a131e:	461a      	mov	r2, r3
 80a1320:	4619      	mov	r1, r3
 80a1322:	7c00      	ldrb	r0, [r0, #16]
 80a1324:	f7ff bad0 	b.w	80a08c8 <HAL_I2C_Begin>

080a1328 <_ZN7TwoWire17beginTransmissionEh>:
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
 80a1328:	2200      	movs	r2, #0
 80a132a:	7c00      	ldrb	r0, [r0, #16]
 80a132c:	f7ff bad4 	b.w	80a08d8 <HAL_I2C_Begin_Transmission>

080a1330 <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
 80a1330:	b2c9      	uxtb	r1, r1
 80a1332:	f7ff bff9 	b.w	80a1328 <_ZN7TwoWire17beginTransmissionEh>

080a1336 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
 80a1336:	2200      	movs	r2, #0
 80a1338:	7c00      	ldrb	r0, [r0, #16]
 80a133a:	f7ff bad5 	b.w	80a08e8 <HAL_I2C_End_Transmission>

080a133e <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
 80a133e:	2101      	movs	r1, #1
 80a1340:	f7ff bff9 	b.w	80a1336 <_ZN7TwoWire15endTransmissionEh>

080a1344 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a1344:	4770      	bx	lr

080a1346 <_ZN9IPAddressD0Ev>:
 80a1346:	b510      	push	{r4, lr}
 80a1348:	4604      	mov	r4, r0
 80a134a:	2118      	movs	r1, #24
 80a134c:	f000 fd63 	bl	80a1e16 <_ZdlPvj>
 80a1350:	4620      	mov	r0, r4
 80a1352:	bd10      	pop	{r4, pc}

080a1354 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a1354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1356:	460f      	mov	r7, r1
 80a1358:	f100 0608 	add.w	r6, r0, #8
 80a135c:	1d05      	adds	r5, r0, #4
 80a135e:	2400      	movs	r4, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
 80a1360:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a1364:	220a      	movs	r2, #10
 80a1366:	4638      	mov	r0, r7
 80a1368:	f000 f8fd 	bl	80a1566 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a136c:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a136e:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a1370:	d007      	beq.n	80a1382 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a1372:	2c00      	cmp	r4, #0
 80a1374:	d0f4      	beq.n	80a1360 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a1376:	212e      	movs	r1, #46	; 0x2e
 80a1378:	4638      	mov	r0, r7
 80a137a:	f000 f8db 	bl	80a1534 <_ZN5Print5printEc>
 80a137e:	4404      	add	r4, r0
 80a1380:	e7ee      	b.n	80a1360 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a1382:	4620      	mov	r0, r4
 80a1384:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080a1388 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 80a1388:	b510      	push	{r4, lr}
 80a138a:	4604      	mov	r4, r0
 80a138c:	4b04      	ldr	r3, [pc, #16]	; (80a13a0 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a138e:	2211      	movs	r2, #17
 80a1390:	f840 3b04 	str.w	r3, [r0], #4
 80a1394:	2100      	movs	r1, #0
 80a1396:	f001 fe94 	bl	80a30c2 <memset>
{
    clear();
}
 80a139a:	4620      	mov	r0, r4
 80a139c:	bd10      	pop	{r4, pc}
 80a139e:	bf00      	nop
 80a13a0:	080a5800 	.word	0x080a5800

080a13a4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80a13a4:	4603      	mov	r3, r0
 80a13a6:	4a07      	ldr	r2, [pc, #28]	; (80a13c4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a13a8:	b510      	push	{r4, lr}
 80a13aa:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
 80a13ae:	f101 0210 	add.w	r2, r1, #16
 80a13b2:	f851 4b04 	ldr.w	r4, [r1], #4
 80a13b6:	4291      	cmp	r1, r2
 80a13b8:	f843 4b04 	str.w	r4, [r3], #4
 80a13bc:	d1f9      	bne.n	80a13b2 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a13be:	780a      	ldrb	r2, [r1, #0]
 80a13c0:	701a      	strb	r2, [r3, #0]
}
 80a13c2:	bd10      	pop	{r4, pc}
 80a13c4:	080a5800 	.word	0x080a5800

080a13c8 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a13c8:	4a02      	ldr	r2, [pc, #8]	; (80a13d4 <_ZN9IPAddressC1Em+0xc>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80a13ca:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a13cc:	6002      	str	r2, [r0, #0]
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a13ce:	2204      	movs	r2, #4
 80a13d0:	7502      	strb	r2, [r0, #20]
{
    *this = address;
}
 80a13d2:	4770      	bx	lr
 80a13d4:	080a5800 	.word	0x080a5800

080a13d8 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a13d8:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a13da:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a13de:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a13e2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a13e6:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80a13ea:	2304      	movs	r3, #4
 80a13ec:	6041      	str	r1, [r0, #4]
 80a13ee:	7503      	strb	r3, [r0, #20]
 80a13f0:	bd10      	pop	{r4, pc}
	...

080a13f4 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a13f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a13f6:	4d04      	ldr	r5, [pc, #16]	; (80a1408 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a13f8:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a13fa:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a13fe:	9500      	str	r5, [sp, #0]
 80a1400:	f7ff ffea 	bl	80a13d8 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a1404:	b003      	add	sp, #12
 80a1406:	bd30      	pop	{r4, r5, pc}
 80a1408:	080a5800 	.word	0x080a5800

080a140c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a140c:	4a01      	ldr	r2, [pc, #4]	; (80a1414 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a140e:	4b02      	ldr	r3, [pc, #8]	; (80a1418 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a1410:	601a      	str	r2, [r3, #0]
 80a1412:	4770      	bx	lr
 80a1414:	080a5882 	.word	0x080a5882
 80a1418:	20000250 	.word	0x20000250

080a141c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a141c:	2300      	movs	r3, #0
 80a141e:	461a      	mov	r2, r3
 80a1420:	6840      	ldr	r0, [r0, #4]
 80a1422:	f7ff bb97 	b.w	80a0b54 <network_connect>

080a1426 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a1426:	2200      	movs	r2, #0
 80a1428:	2102      	movs	r1, #2
 80a142a:	6840      	ldr	r0, [r0, #4]
 80a142c:	f7ff bba2 	b.w	80a0b74 <network_disconnect>

080a1430 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a1430:	2200      	movs	r2, #0
 80a1432:	4611      	mov	r1, r2
 80a1434:	6840      	ldr	r0, [r0, #4]
 80a1436:	f7ff bb95 	b.w	80a0b64 <network_connecting>

080a143a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a143a:	2200      	movs	r2, #0
 80a143c:	4611      	mov	r1, r2
 80a143e:	6840      	ldr	r0, [r0, #4]
 80a1440:	f7ff bba0 	b.w	80a0b84 <network_ready>

080a1444 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a1444:	2300      	movs	r3, #0
 80a1446:	461a      	mov	r2, r3
 80a1448:	4619      	mov	r1, r3
 80a144a:	6840      	ldr	r0, [r0, #4]
 80a144c:	f7ff bba2 	b.w	80a0b94 <network_on>

080a1450 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a1450:	2300      	movs	r3, #0
 80a1452:	461a      	mov	r2, r3
 80a1454:	4619      	mov	r1, r3
 80a1456:	6840      	ldr	r0, [r0, #4]
 80a1458:	f7ff bba4 	b.w	80a0ba4 <network_off>

080a145c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a145c:	2200      	movs	r2, #0
 80a145e:	f081 0101 	eor.w	r1, r1, #1
 80a1462:	6840      	ldr	r0, [r0, #4]
 80a1464:	f7ff bba6 	b.w	80a0bb4 <network_listen>

080a1468 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a1468:	2200      	movs	r2, #0
 80a146a:	6840      	ldr	r0, [r0, #4]
 80a146c:	f7ff bbb2 	b.w	80a0bd4 <network_set_listen_timeout>

080a1470 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a1470:	2200      	movs	r2, #0
 80a1472:	4611      	mov	r1, r2
 80a1474:	6840      	ldr	r0, [r0, #4]
 80a1476:	f7ff bbb5 	b.w	80a0be4 <network_get_listen_timeout>

080a147a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a147a:	2200      	movs	r2, #0
 80a147c:	4611      	mov	r1, r2
 80a147e:	6840      	ldr	r0, [r0, #4]
 80a1480:	f7ff bba0 	b.w	80a0bc4 <network_listening>

080a1484 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a1484:	b570      	push	{r4, r5, r6, lr}
 80a1486:	4616      	mov	r6, r2
 80a1488:	b08e      	sub	sp, #56	; 0x38
 80a148a:	4604      	mov	r4, r0
    IPAddress addr;
 80a148c:	a808      	add	r0, sp, #32
 80a148e:	f7ff ff7b 	bl	80a1388 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a1492:	2211      	movs	r2, #17
 80a1494:	2100      	movs	r1, #0
 80a1496:	a803      	add	r0, sp, #12
 80a1498:	f001 fe13 	bl	80a30c2 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a149c:	4630      	mov	r0, r6
 80a149e:	f001 fe6e 	bl	80a317e <strlen>
 80a14a2:	2500      	movs	r5, #0
 80a14a4:	4b0a      	ldr	r3, [pc, #40]	; (80a14d0 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a14a6:	9500      	str	r5, [sp, #0]
 80a14a8:	b281      	uxth	r1, r0
 80a14aa:	685b      	ldr	r3, [r3, #4]
 80a14ac:	aa03      	add	r2, sp, #12
 80a14ae:	4630      	mov	r0, r6
 80a14b0:	f7ff fac4 	bl	80a0a3c <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a14b4:	b120      	cbz	r0, 80a14c0 <_ZN5spark12NetworkClass7resolveEPKc+0x3c>
 80a14b6:	4629      	mov	r1, r5
 80a14b8:	4620      	mov	r0, r4
 80a14ba:	f7ff ff85 	bl	80a13c8 <_ZN9IPAddressC1Em>
 80a14be:	e003      	b.n	80a14c8 <_ZN5spark12NetworkClass7resolveEPKc+0x44>
 80a14c0:	a903      	add	r1, sp, #12
 80a14c2:	4620      	mov	r0, r4
 80a14c4:	f7ff ff6e 	bl	80a13a4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a14c8:	4620      	mov	r0, r4
 80a14ca:	b00e      	add	sp, #56	; 0x38
 80a14cc:	bd70      	pop	{r4, r5, r6, pc}
 80a14ce:	bf00      	nop
 80a14d0:	20000708 	.word	0x20000708

080a14d4 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a14d4:	4b02      	ldr	r3, [pc, #8]	; (80a14e0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a14d6:	4a03      	ldr	r2, [pc, #12]	; (80a14e4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a14d8:	601a      	str	r2, [r3, #0]
 80a14da:	2200      	movs	r2, #0
 80a14dc:	605a      	str	r2, [r3, #4]
 80a14de:	4770      	bx	lr
 80a14e0:	20000254 	.word	0x20000254
 80a14e4:	080a58f8 	.word	0x080a58f8

080a14e8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a14e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a14ea:	4606      	mov	r6, r0
 80a14ec:	460d      	mov	r5, r1
 80a14ee:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a14f0:	2400      	movs	r4, #0
  while (size--) {
 80a14f2:	42bd      	cmp	r5, r7
 80a14f4:	d00c      	beq.n	80a1510 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a14f6:	6833      	ldr	r3, [r6, #0]
 80a14f8:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a14fc:	689b      	ldr	r3, [r3, #8]
 80a14fe:	4630      	mov	r0, r6
 80a1500:	4798      	blx	r3
     if (chunk>=0)
 80a1502:	2800      	cmp	r0, #0
 80a1504:	db01      	blt.n	80a150a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a1506:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a1508:	e7f3      	b.n	80a14f2 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a150a:	2c00      	cmp	r4, #0
 80a150c:	bf08      	it	eq
 80a150e:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a1510:	4620      	mov	r0, r4
 80a1512:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1514 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a1514:	b570      	push	{r4, r5, r6, lr}
 80a1516:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a1518:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a151a:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a151c:	b149      	cbz	r1, 80a1532 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a151e:	f001 fe2e 	bl	80a317e <strlen>
 80a1522:	682b      	ldr	r3, [r5, #0]
 80a1524:	4602      	mov	r2, r0
 80a1526:	4621      	mov	r1, r4
 80a1528:	4628      	mov	r0, r5
    }
 80a152a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a152e:	68db      	ldr	r3, [r3, #12]
 80a1530:	4718      	bx	r3
    }
 80a1532:	bd70      	pop	{r4, r5, r6, pc}

080a1534 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a1534:	6803      	ldr	r3, [r0, #0]
 80a1536:	689b      	ldr	r3, [r3, #8]
 80a1538:	4718      	bx	r3

080a153a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a153a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a153c:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a153e:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a1540:	f7ff fff8 	bl	80a1534 <_ZN5Print5printEc>
  n += print('\n');
 80a1544:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 80a1546:	4604      	mov	r4, r0
  n += print('\n');
 80a1548:	4628      	mov	r0, r5
 80a154a:	f7ff fff3 	bl	80a1534 <_ZN5Print5printEc>
  return n;
}
 80a154e:	4420      	add	r0, r4
 80a1550:	bd38      	pop	{r3, r4, r5, pc}

080a1552 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a1552:	b538      	push	{r3, r4, r5, lr}
 80a1554:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a1556:	f7ff ffdd 	bl	80a1514 <_ZN5Print5writeEPKc>
 80a155a:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 80a155c:	4628      	mov	r0, r5
 80a155e:	f7ff ffec 	bl	80a153a <_ZN5Print7printlnEv>
  return n;
}
 80a1562:	4420      	add	r0, r4
 80a1564:	bd38      	pop	{r3, r4, r5, pc}

080a1566 <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a1566:	2a01      	cmp	r2, #1
 80a1568:	bf98      	it	ls
 80a156a:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a156c:	b530      	push	{r4, r5, lr}
 80a156e:	460b      	mov	r3, r1
 80a1570:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a1572:	2100      	movs	r1, #0
 80a1574:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a1578:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   decltype(n) m = n;
   n /= base;
 80a157c:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
 80a1580:	fb05 3312 	mls	r3, r5, r2, r3
 80a1584:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a1586:	2b09      	cmp	r3, #9
 80a1588:	bf94      	ite	ls
 80a158a:	3330      	addls	r3, #48	; 0x30
 80a158c:	3337      	addhi	r3, #55	; 0x37
 80a158e:	b2db      	uxtb	r3, r3
 80a1590:	4621      	mov	r1, r4
 80a1592:	f804 3901 	strb.w	r3, [r4], #-1
 80a1596:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a1598:	2d00      	cmp	r5, #0
 80a159a:	d1ef      	bne.n	80a157c <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a159c:	f7ff ffba 	bl	80a1514 <_ZN5Print5writeEPKc>
}
 80a15a0:	b00b      	add	sp, #44	; 0x2c
 80a15a2:	bd30      	pop	{r4, r5, pc}

080a15a4 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
 80a15a4:	b40c      	push	{r2, r3}
 80a15a6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a15aa:	b087      	sub	sp, #28
 80a15ac:	af00      	add	r7, sp, #0
 80a15ae:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80a15b2:	f854 9b04 	ldr.w	r9, [r4], #4
 80a15b6:	4605      	mov	r5, r0
 80a15b8:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
 80a15ba:	4623      	mov	r3, r4
 80a15bc:	464a      	mov	r2, r9
 80a15be:	2114      	movs	r1, #20
 80a15c0:	1d38      	adds	r0, r7, #4
size_t Print::printf_impl(bool newline, const char* format, ...)
{
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
 80a15c2:	603c      	str	r4, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, marker);
 80a15c4:	f7ff fb3e 	bl	80a0c44 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
 80a15c8:	2813      	cmp	r0, #19
 80a15ca:	d805      	bhi.n	80a15d8 <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a15cc:	1d39      	adds	r1, r7, #4
 80a15ce:	4628      	mov	r0, r5
 80a15d0:	f7ff ffa0 	bl	80a1514 <_ZN5Print5writeEPKc>
 80a15d4:	4604      	mov	r4, r0
 80a15d6:	e013      	b.n	80a1600 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
 80a15d8:	f100 0308 	add.w	r3, r0, #8
 80a15dc:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
 80a15e0:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
 80a15e2:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
 80a15e6:	1c41      	adds	r1, r0, #1
 80a15e8:	4623      	mov	r3, r4
 80a15ea:	464a      	mov	r2, r9
 80a15ec:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
 80a15ee:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
 80a15f0:	f7ff fb28 	bl	80a0c44 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a15f4:	4669      	mov	r1, sp
 80a15f6:	4628      	mov	r0, r5
 80a15f8:	f7ff ff8c 	bl	80a1514 <_ZN5Print5writeEPKc>
 80a15fc:	4604      	mov	r4, r0
 80a15fe:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
 80a1600:	b11e      	cbz	r6, 80a160a <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
 80a1602:	4628      	mov	r0, r5
 80a1604:	f7ff ff99 	bl	80a153a <_ZN5Print7printlnEv>
 80a1608:	4404      	add	r4, r0
    return n;
}
 80a160a:	4620      	mov	r0, r4
 80a160c:	371c      	adds	r7, #28
 80a160e:	46bd      	mov	sp, r7
 80a1610:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a1614:	b002      	add	sp, #8
 80a1616:	4770      	bx	lr

080a1618 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a1618:	b510      	push	{r4, lr}
 80a161a:	4604      	mov	r4, r0
 80a161c:	f7fe ffde 	bl	80a05dc <_ZNSt14_Function_baseD1Ev>
 80a1620:	4620      	mov	r0, r4
 80a1622:	bd10      	pop	{r4, pc}

080a1624 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a1624:	4803      	ldr	r0, [pc, #12]	; (80a1634 <_GLOBAL__sub_I_RGB+0x10>)
 80a1626:	2300      	movs	r3, #0
 80a1628:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a162a:	4a03      	ldr	r2, [pc, #12]	; (80a1638 <_GLOBAL__sub_I_RGB+0x14>)
 80a162c:	4903      	ldr	r1, [pc, #12]	; (80a163c <_GLOBAL__sub_I_RGB+0x18>)
 80a162e:	f000 bbed 	b.w	80a1e0c <__aeabi_atexit>
 80a1632:	bf00      	nop
 80a1634:	2000025c 	.word	0x2000025c
 80a1638:	200000f0 	.word	0x200000f0
 80a163c:	080a1619 	.word	0x080a1619

080a1640 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a1640:	b510      	push	{r4, lr}
 80a1642:	4604      	mov	r4, r0
{
	free(buffer);
 80a1644:	6800      	ldr	r0, [r0, #0]
 80a1646:	f7ff fadd 	bl	80a0c04 <free>
}
 80a164a:	4620      	mov	r0, r4
 80a164c:	bd10      	pop	{r4, pc}

080a164e <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a164e:	b510      	push	{r4, lr}
 80a1650:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a1652:	6800      	ldr	r0, [r0, #0]
 80a1654:	b108      	cbz	r0, 80a165a <_ZN6String10invalidateEv+0xc>
 80a1656:	f7ff fad5 	bl	80a0c04 <free>
	buffer = NULL;
 80a165a:	2300      	movs	r3, #0
 80a165c:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 80a165e:	60a3      	str	r3, [r4, #8]
 80a1660:	6063      	str	r3, [r4, #4]
 80a1662:	bd10      	pop	{r4, pc}

080a1664 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a1664:	b538      	push	{r3, r4, r5, lr}
 80a1666:	4604      	mov	r4, r0
 80a1668:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a166a:	6800      	ldr	r0, [r0, #0]
 80a166c:	3101      	adds	r1, #1
 80a166e:	f7ff fad1 	bl	80a0c14 <realloc>
	if (newbuffer) {
 80a1672:	b110      	cbz	r0, 80a167a <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a1674:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 80a1678:	2001      	movs	r0, #1
	}
	return 0;
}
 80a167a:	bd38      	pop	{r3, r4, r5, pc}

080a167c <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a167c:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a167e:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a1680:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a1682:	b113      	cbz	r3, 80a168a <_ZN6String7reserveEj+0xe>
 80a1684:	6843      	ldr	r3, [r0, #4]
 80a1686:	428b      	cmp	r3, r1
 80a1688:	d207      	bcs.n	80a169a <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 80a168a:	4620      	mov	r0, r4
 80a168c:	f7ff ffea 	bl	80a1664 <_ZN6String12changeBufferEj>
 80a1690:	b120      	cbz	r0, 80a169c <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 80a1692:	68a3      	ldr	r3, [r4, #8]
 80a1694:	b90b      	cbnz	r3, 80a169a <_ZN6String7reserveEj+0x1e>
 80a1696:	6822      	ldr	r2, [r4, #0]
 80a1698:	7013      	strb	r3, [r2, #0]
 80a169a:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 80a169c:	bd10      	pop	{r4, pc}

080a169e <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a169e:	b570      	push	{r4, r5, r6, lr}
 80a16a0:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a16a2:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a16a4:	4604      	mov	r4, r0
 80a16a6:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a16a8:	f7ff ffe8 	bl	80a167c <_ZN6String7reserveEj>
 80a16ac:	b918      	cbnz	r0, 80a16b6 <_ZN6String4copyEPKcj+0x18>
		invalidate();
 80a16ae:	4620      	mov	r0, r4
 80a16b0:	f7ff ffcd 	bl	80a164e <_ZN6String10invalidateEv>
		return *this;
 80a16b4:	e009      	b.n	80a16ca <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 80a16b6:	462a      	mov	r2, r5
 80a16b8:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 80a16ba:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a16bc:	6820      	ldr	r0, [r4, #0]
 80a16be:	f001 fcf5 	bl	80a30ac <memcpy>
	buffer[len] = 0;
 80a16c2:	6822      	ldr	r2, [r4, #0]
 80a16c4:	68a3      	ldr	r3, [r4, #8]
 80a16c6:	2100      	movs	r1, #0
 80a16c8:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 80a16ca:	4620      	mov	r0, r4
 80a16cc:	bd70      	pop	{r4, r5, r6, pc}

080a16ce <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a16ce:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a16d0:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a16d2:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a16d4:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a16d6:	6043      	str	r3, [r0, #4]
	len = 0;
 80a16d8:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a16da:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 80a16dc:	460d      	mov	r5, r1
 80a16de:	b139      	cbz	r1, 80a16f0 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 80a16e0:	4608      	mov	r0, r1
 80a16e2:	f001 fd4c 	bl	80a317e <strlen>
 80a16e6:	4629      	mov	r1, r5
 80a16e8:	4602      	mov	r2, r0
 80a16ea:	4620      	mov	r0, r4
 80a16ec:	f7ff ffd7 	bl	80a169e <_ZN6String4copyEPKcj>
}
 80a16f0:	4620      	mov	r0, r4
 80a16f2:	bd38      	pop	{r3, r4, r5, pc}

080a16f4 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 80a16f4:	b538      	push	{r3, r4, r5, lr}
 80a16f6:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a16f8:	460c      	mov	r4, r1
 80a16fa:	b141      	cbz	r1, 80a170e <_ZN6StringaSEPKc+0x1a>
 80a16fc:	4608      	mov	r0, r1
 80a16fe:	f001 fd3e 	bl	80a317e <strlen>
 80a1702:	4621      	mov	r1, r4
 80a1704:	4602      	mov	r2, r0
 80a1706:	4628      	mov	r0, r5
 80a1708:	f7ff ffc9 	bl	80a169e <_ZN6String4copyEPKcj>
 80a170c:	e001      	b.n	80a1712 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
 80a170e:	f7ff ff9e 	bl	80a164e <_ZN6String10invalidateEv>

	return *this;
}
 80a1712:	4628      	mov	r0, r5
 80a1714:	bd38      	pop	{r3, r4, r5, pc}

080a1716 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
 80a1716:	b510      	push	{r4, lr}
 80a1718:	4604      	mov	r4, r0
        if (wakeupSource_) {
 80a171a:	6800      	ldr	r0, [r0, #0]
 80a171c:	b118      	cbz	r0, 80a1726 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
 80a171e:	f7ff fa71 	bl	80a0c04 <free>
            wakeupSource_ = nullptr;
 80a1722:	2300      	movs	r3, #0
 80a1724:	6023      	str	r3, [r4, #0]
 80a1726:	bd10      	pop	{r4, pc}

080a1728 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 80a1728:	b510      	push	{r4, lr}
 80a172a:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
 80a172c:	f7ff fff3 	bl	80a1716 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 80a1730:	4620      	mov	r0, r4
 80a1732:	bd10      	pop	{r4, pc}

080a1734 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 80a1734:	f64f 73ff 	movw	r3, #65535	; 0xffff
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 80a1738:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 80a173a:	4c08      	ldr	r4, [pc, #32]	; (80a175c <_GLOBAL__sub_I_System+0x28>)
 80a173c:	2000      	movs	r0, #0
 80a173e:	6020      	str	r0, [r4, #0]
 80a1740:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 80a1742:	71a0      	strb	r0, [r4, #6]
 80a1744:	8120      	strh	r0, [r4, #8]
 80a1746:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a1748:	f7ff f990 	bl	80a0a6c <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
 80a174c:	4620      	mov	r0, r4
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 80a174e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
 80a1752:	4a03      	ldr	r2, [pc, #12]	; (80a1760 <_GLOBAL__sub_I_System+0x2c>)
 80a1754:	4903      	ldr	r1, [pc, #12]	; (80a1764 <_GLOBAL__sub_I_System+0x30>)
 80a1756:	f000 bb59 	b.w	80a1e0c <__aeabi_atexit>
 80a175a:	bf00      	nop
 80a175c:	2000026c 	.word	0x2000026c
 80a1760:	200000f0 	.word	0x200000f0
 80a1764:	080a1729 	.word	0x080a1729

080a1768 <_ZL22Refresh_UnixTime_Cachel>:
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
 80a1768:	b5f0      	push	{r4, r5, r6, r7, lr}
    unix_time += time_zone_cache;
 80a176a:	4b14      	ldr	r3, [pc, #80]	; (80a17bc <_ZL22Refresh_UnixTime_Cachel+0x54>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
 80a176c:	4f14      	ldr	r7, [pc, #80]	; (80a17c0 <_ZL22Refresh_UnixTime_Cachel+0x58>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
 80a176e:	681e      	ldr	r6, [r3, #0]
    unix_time += dst_current_cache;
 80a1770:	4b14      	ldr	r3, [pc, #80]	; (80a17c4 <_ZL22Refresh_UnixTime_Cachel+0x5c>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
 80a1772:	4406      	add	r6, r0
    unix_time += dst_current_cache;
 80a1774:	6818      	ldr	r0, [r3, #0]
    if(unix_time != unix_time_cache)
 80a1776:	683b      	ldr	r3, [r7, #0]

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
 80a1778:	4406      	add	r6, r0
    if(unix_time != unix_time_cache)
 80a177a:	429e      	cmp	r6, r3
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
 80a177c:	b08b      	sub	sp, #44	; 0x2c
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
 80a177e:	d01b      	beq.n	80a17b8 <_ZL22Refresh_UnixTime_Cachel+0x50>
 80a1780:	a80a      	add	r0, sp, #40	; 0x28
 80a1782:	f840 6d28 	str.w	r6, [r0, #-40]!

/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
 80a1786:	f001 fb95 	bl	80a2eb4 <localtime>
	calendar_time->tm_year += 1900;
	return *calendar_time;
 80a178a:	4604      	mov	r4, r0
/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
 80a178c:	6943      	ldr	r3, [r0, #20]
	return *calendar_time;
 80a178e:	ad01      	add	r5, sp, #4
/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
 80a1790:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 80a1794:	6143      	str	r3, [r0, #20]
	return *calendar_time;
 80a1796:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a1798:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a179a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a179c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a179e:	f8d4 e000 	ldr.w	lr, [r4]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 80a17a2:	4c09      	ldr	r4, [pc, #36]	; (80a17c8 <_ZL22Refresh_UnixTime_Cachel+0x60>)
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
	return *calendar_time;
 80a17a4:	f8c5 e000 	str.w	lr, [r5]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 80a17a8:	ad01      	add	r5, sp, #4
 80a17aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a17ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a17ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a17b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
 80a17b2:	603e      	str	r6, [r7, #0]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 80a17b4:	f8c4 e000 	str.w	lr, [r4]
            unix_time_cache = unix_time;
    }
}
 80a17b8:	b00b      	add	sp, #44	; 0x2c
 80a17ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a17bc:	200002a8 	.word	0x200002a8
 80a17c0:	200002a4 	.word	0x200002a4
 80a17c4:	200002a0 	.word	0x200002a0
 80a17c8:	20000278 	.word	0x20000278

080a17cc <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
 80a17cc:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
 80a17ce:	2000      	movs	r0, #0
 80a17d0:	f7ff f9b0 	bl	80a0b34 <spark_sync_time_pending>
 80a17d4:	b128      	cbz	r0, 80a17e2 <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a17d6:	f7ff f98d 	bl	80a0af4 <spark_cloud_flag_connected>
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
 80a17da:	f080 0001 	eor.w	r0, r0, #1
 80a17de:	b2c0      	uxtb	r0, r0
 80a17e0:	bd08      	pop	{r3, pc}
 80a17e2:	2001      	movs	r0, #1
    }
 80a17e4:	bd08      	pop	{r3, pc}
	...

080a17e8 <_ZN9TimeClass12hourFormat12El>:
	return hourFormat12(now());
}

/* the hour for the given time in 12 hour format */
int TimeClass::hourFormat12(time_t t)
{
 80a17e8:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
 80a17ea:	f7ff ffbd 	bl	80a1768 <_ZL22Refresh_UnixTime_Cachel>
	if(calendar_time_cache.tm_hour == 0)
 80a17ee:	4b04      	ldr	r3, [pc, #16]	; (80a1800 <_ZN9TimeClass12hourFormat12El+0x18>)
 80a17f0:	6898      	ldr	r0, [r3, #8]
 80a17f2:	b118      	cbz	r0, 80a17fc <_ZN9TimeClass12hourFormat12El+0x14>
		return 12;	//midnight
	else if( calendar_time_cache.tm_hour > 12)
 80a17f4:	280c      	cmp	r0, #12
 80a17f6:	dd02      	ble.n	80a17fe <_ZN9TimeClass12hourFormat12El+0x16>
		return calendar_time_cache.tm_hour - 12 ;
 80a17f8:	380c      	subs	r0, #12
 80a17fa:	bd08      	pop	{r3, pc}
/* the hour for the given time in 12 hour format */
int TimeClass::hourFormat12(time_t t)
{
	Refresh_UnixTime_Cache(t);
	if(calendar_time_cache.tm_hour == 0)
		return 12;	//midnight
 80a17fc:	200c      	movs	r0, #12
	else if( calendar_time_cache.tm_hour > 12)
		return calendar_time_cache.tm_hour - 12 ;
	else
		return calendar_time_cache.tm_hour ;
}
 80a17fe:	bd08      	pop	{r3, pc}
 80a1800:	20000278 	.word	0x20000278

080a1804 <_ZN9TimeClass4zoneEf>:
	return HAL_RTC_Get_UnixTime()+time_zone_cache+dst_current_cache;
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
 80a1804:	b510      	push	{r4, lr}
	if(GMT_Offset < -12 || GMT_Offset > 14)
 80a1806:	4909      	ldr	r1, [pc, #36]	; (80a182c <_ZN9TimeClass4zoneEf+0x28>)
	return HAL_RTC_Get_UnixTime()+time_zone_cache+dst_current_cache;
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
 80a1808:	4604      	mov	r4, r0
	if(GMT_Offset < -12 || GMT_Offset > 14)
 80a180a:	f001 faf3 	bl	80a2df4 <__aeabi_fcmplt>
 80a180e:	b960      	cbnz	r0, 80a182a <_ZN9TimeClass4zoneEf+0x26>
 80a1810:	4907      	ldr	r1, [pc, #28]	; (80a1830 <_ZN9TimeClass4zoneEf+0x2c>)
 80a1812:	4620      	mov	r0, r4
 80a1814:	f001 fb0c 	bl	80a2e30 <__aeabi_fcmpgt>
 80a1818:	b938      	cbnz	r0, 80a182a <_ZN9TimeClass4zoneEf+0x26>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
 80a181a:	4906      	ldr	r1, [pc, #24]	; (80a1834 <_ZN9TimeClass4zoneEf+0x30>)
 80a181c:	4620      	mov	r0, r4
 80a181e:	f001 f94b 	bl	80a2ab8 <__aeabi_fmul>
 80a1822:	f001 fb0f 	bl	80a2e44 <__aeabi_f2iz>
 80a1826:	4b04      	ldr	r3, [pc, #16]	; (80a1838 <_ZN9TimeClass4zoneEf+0x34>)
 80a1828:	6018      	str	r0, [r3, #0]
 80a182a:	bd10      	pop	{r4, pc}
 80a182c:	c1400000 	.word	0xc1400000
 80a1830:	41600000 	.word	0x41600000
 80a1834:	45610000 	.word	0x45610000
 80a1838:	200002a8 	.word	0x200002a8

080a183c <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
 80a183c:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
 80a183e:	2000      	movs	r0, #0
 80a1840:	f7ff f832 	bl	80a08a8 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
 80a1844:	4604      	mov	r4, r0
 80a1846:	b968      	cbnz	r0, 80a1864 <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
 80a1848:	f7ff f908 	bl	80a0a5c <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
 80a184c:	2801      	cmp	r0, #1
 80a184e:	d10b      	bne.n	80a1868 <_ZN9TimeClass7isValidEv+0x2c>
 80a1850:	4620      	mov	r0, r4
 80a1852:	f7ff f92b 	bl	80a0aac <system_thread_get_state>
 80a1856:	b938      	cbnz	r0, 80a1868 <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
 80a1858:	f7ff ffb8 	bl	80a17cc <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 80a185c:	b930      	cbnz	r0, 80a186c <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
 80a185e:	f7ff f941 	bl	80a0ae4 <spark_process>
 80a1862:	e7f9      	b.n	80a1858 <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
 80a1864:	2001      	movs	r0, #1
 80a1866:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
 80a1868:	2000      	movs	r0, #0
 80a186a:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
 80a186c:	f7ff ffae 	bl	80a17cc <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
 80a1870:	2000      	movs	r0, #0
 80a1872:	f7ff f819 	bl	80a08a8 <HAL_RTC_Time_Is_Valid>
 80a1876:	3000      	adds	r0, #0
 80a1878:	bf18      	it	ne
 80a187a:	2001      	movne	r0, #1
    }
    return rtcstate;
}
 80a187c:	bd10      	pop	{r4, pc}

080a187e <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
 80a187e:	b508      	push	{r3, lr}
    (void)isValid();
 80a1880:	f7ff ffdc 	bl	80a183c <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
 80a1884:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
 80a1888:	f7ff b806 	b.w	80a0898 <HAL_RTC_Get_UnixTime>

080a188c <_ZN9TimeClass12hourFormat12Ev>:
	return calendar_time_cache.tm_hour;
}

/* current hour in 12 hour format */
int TimeClass::hourFormat12()
{
 80a188c:	b508      	push	{r3, lr}
	return hourFormat12(now());
 80a188e:	f7ff fff6 	bl	80a187e <_ZN9TimeClass3nowEv>
}
 80a1892:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
}

/* current hour in 12 hour format */
int TimeClass::hourFormat12()
{
	return hourFormat12(now());
 80a1896:	f7ff bfa7 	b.w	80a17e8 <_ZN9TimeClass12hourFormat12El>
	...

080a189c <_ZN9TimeClass6minuteEv>:
	return (hour(t) >= 12);
}

/* current minute */
int TimeClass::minute()
{
 80a189c:	b508      	push	{r3, lr}
	return minute(now());
 80a189e:	f7ff ffee 	bl	80a187e <_ZN9TimeClass3nowEv>
}

/* the minute for the given time */
int TimeClass::minute(time_t t)
{
	Refresh_UnixTime_Cache(t);
 80a18a2:	f7ff ff61 	bl	80a1768 <_ZL22Refresh_UnixTime_Cachel>

/* current minute */
int TimeClass::minute()
{
	return minute(now());
}
 80a18a6:	4b01      	ldr	r3, [pc, #4]	; (80a18ac <_ZN9TimeClass6minuteEv+0x10>)
 80a18a8:	6858      	ldr	r0, [r3, #4]
 80a18aa:	bd08      	pop	{r3, pc}
 80a18ac:	20000278 	.word	0x20000278

080a18b0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a18b0:	4b02      	ldr	r3, [pc, #8]	; (80a18bc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a18b2:	681a      	ldr	r2, [r3, #0]
 80a18b4:	4b02      	ldr	r3, [pc, #8]	; (80a18c0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a18b6:	601a      	str	r2, [r3, #0]
 80a18b8:	4770      	bx	lr
 80a18ba:	bf00      	nop
 80a18bc:	20000000 	.word	0x20000000
 80a18c0:	2000029c 	.word	0x2000029c

080a18c4 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a18c4:	4770      	bx	lr

080a18c6 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a18c6:	7441      	strb	r1, [r0, #17]
 80a18c8:	4770      	bx	lr

080a18ca <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 80a18ca:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 80a18cc:	7c00      	ldrb	r0, [r0, #16]
 80a18ce:	f7ff f875 	bl	80a09bc <HAL_USART_Available_Data_For_Write>
}
 80a18d2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a18d6:	bd08      	pop	{r3, pc}

080a18d8 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a18d8:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 80a18da:	7c00      	ldrb	r0, [r0, #16]
 80a18dc:	f7ff f84e 	bl	80a097c <HAL_USART_Available_Data>
}
 80a18e0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a18e4:	bd08      	pop	{r3, pc}

080a18e6 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a18e6:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 80a18e8:	7c00      	ldrb	r0, [r0, #16]
 80a18ea:	f7ff f857 	bl	80a099c <HAL_USART_Peek_Data>
}
 80a18ee:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a18f2:	bf28      	it	cs
 80a18f4:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a18f8:	bd08      	pop	{r3, pc}

080a18fa <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a18fa:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 80a18fc:	7c00      	ldrb	r0, [r0, #16]
 80a18fe:	f7ff f845 	bl	80a098c <HAL_USART_Read_Data>
}
 80a1902:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a1906:	bf28      	it	cs
 80a1908:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a190c:	bd08      	pop	{r3, pc}

080a190e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a190e:	7c00      	ldrb	r0, [r0, #16]
 80a1910:	f7ff b84c 	b.w	80a09ac <HAL_USART_Flush_Data>

080a1914 <_ZN11USARTSerialD0Ev>:
 80a1914:	b510      	push	{r4, lr}
 80a1916:	4604      	mov	r4, r0
 80a1918:	2114      	movs	r1, #20
 80a191a:	f000 fa7c 	bl	80a1e16 <_ZdlPvj>
 80a191e:	4620      	mov	r0, r4
 80a1920:	bd10      	pop	{r4, pc}

080a1922 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a1922:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a1924:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a1926:	4604      	mov	r4, r0
 80a1928:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a192a:	b925      	cbnz	r5, 80a1936 <_ZN11USARTSerial5writeEh+0x14>
 80a192c:	7c00      	ldrb	r0, [r0, #16]
 80a192e:	f7ff f845 	bl	80a09bc <HAL_USART_Available_Data_For_Write>
 80a1932:	2800      	cmp	r0, #0
 80a1934:	dd05      	ble.n	80a1942 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a1936:	4631      	mov	r1, r6
 80a1938:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a193a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a193e:	f7ff b815 	b.w	80a096c <HAL_USART_Write_Data>
  }
  return 0;
}
 80a1942:	4628      	mov	r0, r5
 80a1944:	bd70      	pop	{r4, r5, r6, pc}
	...

080a1948 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a1948:	b510      	push	{r4, lr}
 80a194a:	4604      	mov	r4, r0
 80a194c:	4608      	mov	r0, r1
 80a194e:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a1950:	2200      	movs	r2, #0
 80a1952:	6062      	str	r2, [r4, #4]
 80a1954:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a1958:	60a2      	str	r2, [r4, #8]
 80a195a:	4a05      	ldr	r2, [pc, #20]	; (80a1970 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a195c:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a195e:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a1960:	2201      	movs	r2, #1
 80a1962:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a1964:	461a      	mov	r2, r3
 80a1966:	f7fe fff9 	bl	80a095c <HAL_USART_Init>
}
 80a196a:	4620      	mov	r0, r4
 80a196c:	bd10      	pop	{r4, pc}
 80a196e:	bf00      	nop
 80a1970:	080a5954 	.word	0x080a5954

080a1974 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a1974:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a1976:	4d0c      	ldr	r5, [pc, #48]	; (80a19a8 <_Z22__fetch_global_Serial1v+0x34>)
 80a1978:	6829      	ldr	r1, [r5, #0]
 80a197a:	f011 0401 	ands.w	r4, r1, #1
 80a197e:	d111      	bne.n	80a19a4 <_Z22__fetch_global_Serial1v+0x30>
 80a1980:	4628      	mov	r0, r5
 80a1982:	f7fe fb90 	bl	80a00a6 <__cxa_guard_acquire>
 80a1986:	b168      	cbz	r0, 80a19a4 <_Z22__fetch_global_Serial1v+0x30>
 80a1988:	4a08      	ldr	r2, [pc, #32]	; (80a19ac <_Z22__fetch_global_Serial1v+0x38>)
 80a198a:	4621      	mov	r1, r4
 80a198c:	4b08      	ldr	r3, [pc, #32]	; (80a19b0 <_Z22__fetch_global_Serial1v+0x3c>)
 80a198e:	4809      	ldr	r0, [pc, #36]	; (80a19b4 <_Z22__fetch_global_Serial1v+0x40>)
 80a1990:	f7ff ffda 	bl	80a1948 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a1994:	4628      	mov	r0, r5
 80a1996:	f7fe fb8b 	bl	80a00b0 <__cxa_guard_release>
 80a199a:	4a07      	ldr	r2, [pc, #28]	; (80a19b8 <_Z22__fetch_global_Serial1v+0x44>)
 80a199c:	4907      	ldr	r1, [pc, #28]	; (80a19bc <_Z22__fetch_global_Serial1v+0x48>)
 80a199e:	4805      	ldr	r0, [pc, #20]	; (80a19b4 <_Z22__fetch_global_Serial1v+0x40>)
 80a19a0:	f000 fa34 	bl	80a1e0c <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a19a4:	4803      	ldr	r0, [pc, #12]	; (80a19b4 <_Z22__fetch_global_Serial1v+0x40>)
 80a19a6:	bd38      	pop	{r3, r4, r5, pc}
 80a19a8:	20000344 	.word	0x20000344
 80a19ac:	20000348 	.word	0x20000348
 80a19b0:	200002c0 	.word	0x200002c0
 80a19b4:	200002ac 	.word	0x200002ac
 80a19b8:	200000f0 	.word	0x200000f0
 80a19bc:	080a18c5 	.word	0x080a18c5

080a19c0 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a19c0:	7441      	strb	r1, [r0, #17]
 80a19c2:	4770      	bx	lr

080a19c4 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a19c4:	4770      	bx	lr

080a19c6 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 80a19c6:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a19c8:	2100      	movs	r1, #0
 80a19ca:	7c00      	ldrb	r0, [r0, #16]
 80a19cc:	f7ff f81e 	bl	80a0a0c <HAL_USB_USART_Receive_Data>
}
 80a19d0:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a19d4:	bf28      	it	cs
 80a19d6:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a19da:	bd08      	pop	{r3, pc}

080a19dc <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 80a19dc:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a19de:	2101      	movs	r1, #1
 80a19e0:	7c00      	ldrb	r0, [r0, #16]
 80a19e2:	f7ff f813 	bl	80a0a0c <HAL_USB_USART_Receive_Data>
}
 80a19e6:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a19ea:	bf28      	it	cs
 80a19ec:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a19f0:	bd08      	pop	{r3, pc}

080a19f2 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 80a19f2:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a19f4:	7c00      	ldrb	r0, [r0, #16]
 80a19f6:	f7ff f801 	bl	80a09fc <HAL_USB_USART_Available_Data_For_Write>
}
 80a19fa:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a19fe:	bd08      	pop	{r3, pc}

080a1a00 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 80a1a00:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a1a02:	7c00      	ldrb	r0, [r0, #16]
 80a1a04:	f7fe fff2 	bl	80a09ec <HAL_USB_USART_Available_Data>
}
 80a1a08:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1a0c:	bd08      	pop	{r3, pc}

080a1a0e <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a1a0e:	7c00      	ldrb	r0, [r0, #16]
 80a1a10:	f7ff b80c 	b.w	80a0a2c <HAL_USB_USART_Flush_Data>

080a1a14 <_ZN9USBSerialD0Ev>:
 80a1a14:	b510      	push	{r4, lr}
 80a1a16:	4604      	mov	r4, r0
 80a1a18:	2114      	movs	r1, #20
 80a1a1a:	f000 f9fc 	bl	80a1e16 <_ZdlPvj>
 80a1a1e:	4620      	mov	r0, r4
 80a1a20:	bd10      	pop	{r4, pc}

080a1a22 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a1a22:	b538      	push	{r3, r4, r5, lr}
 80a1a24:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a1a26:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a1a28:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a1a2a:	f7fe ffe7 	bl	80a09fc <HAL_USB_USART_Available_Data_For_Write>
 80a1a2e:	2800      	cmp	r0, #0
 80a1a30:	dc01      	bgt.n	80a1a36 <_ZN9USBSerial5writeEh+0x14>
 80a1a32:	7c60      	ldrb	r0, [r4, #17]
 80a1a34:	b128      	cbz	r0, 80a1a42 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a1a36:	4629      	mov	r1, r5
 80a1a38:	7c20      	ldrb	r0, [r4, #16]
 80a1a3a:	f7fe ffef 	bl	80a0a1c <HAL_USB_USART_Send_Data>
 80a1a3e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 80a1a42:	bd38      	pop	{r3, r4, r5, pc}

080a1a44 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a1a44:	b510      	push	{r4, lr}
 80a1a46:	4604      	mov	r4, r0
 80a1a48:	2300      	movs	r3, #0
 80a1a4a:	6063      	str	r3, [r4, #4]
 80a1a4c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a1a50:	60a3      	str	r3, [r4, #8]
 80a1a52:	4b05      	ldr	r3, [pc, #20]	; (80a1a68 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a1a54:	4608      	mov	r0, r1
 80a1a56:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a1a58:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a1a5a:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a1a5c:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a1a5e:	4611      	mov	r1, r2
 80a1a60:	f7fe ffb4 	bl	80a09cc <HAL_USB_USART_Init>
}
 80a1a64:	4620      	mov	r0, r4
 80a1a66:	bd10      	pop	{r4, pc}
 80a1a68:	080a5984 	.word	0x080a5984

080a1a6c <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a1a6c:	2200      	movs	r2, #0
 80a1a6e:	7c00      	ldrb	r0, [r0, #16]
 80a1a70:	f7fe bfb4 	b.w	80a09dc <HAL_USB_USART_Begin>

080a1a74 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a1a74:	b510      	push	{r4, lr}
 80a1a76:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a1a78:	2214      	movs	r2, #20
 80a1a7a:	2100      	movs	r1, #0
 80a1a7c:	f001 fb21 	bl	80a30c2 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a1a80:	4b05      	ldr	r3, [pc, #20]	; (80a1a98 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a1a82:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a1a84:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a1a86:	4b05      	ldr	r3, [pc, #20]	; (80a1a9c <_Z19acquireSerialBufferv+0x28>)
 80a1a88:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a1a8a:	f240 1301 	movw	r3, #257	; 0x101
 80a1a8e:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a1a90:	2381      	movs	r3, #129	; 0x81
 80a1a92:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a1a94:	bd10      	pop	{r4, pc}
 80a1a96:	bf00      	nop
 80a1a98:	20000451 	.word	0x20000451
 80a1a9c:	200003d0 	.word	0x200003d0

080a1aa0 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a1aa0:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a1aa2:	4d0e      	ldr	r5, [pc, #56]	; (80a1adc <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a1aa4:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a1aa6:	a801      	add	r0, sp, #4
 80a1aa8:	f7ff ffe4 	bl	80a1a74 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a1aac:	6829      	ldr	r1, [r5, #0]
 80a1aae:	f011 0401 	ands.w	r4, r1, #1
 80a1ab2:	d110      	bne.n	80a1ad6 <_Z16_fetch_usbserialv+0x36>
 80a1ab4:	4628      	mov	r0, r5
 80a1ab6:	f7fe faf6 	bl	80a00a6 <__cxa_guard_acquire>
 80a1aba:	b160      	cbz	r0, 80a1ad6 <_Z16_fetch_usbserialv+0x36>
 80a1abc:	aa01      	add	r2, sp, #4
 80a1abe:	4621      	mov	r1, r4
 80a1ac0:	4807      	ldr	r0, [pc, #28]	; (80a1ae0 <_Z16_fetch_usbserialv+0x40>)
 80a1ac2:	f7ff ffbf 	bl	80a1a44 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a1ac6:	4628      	mov	r0, r5
 80a1ac8:	f7fe faf2 	bl	80a00b0 <__cxa_guard_release>
 80a1acc:	4a05      	ldr	r2, [pc, #20]	; (80a1ae4 <_Z16_fetch_usbserialv+0x44>)
 80a1ace:	4906      	ldr	r1, [pc, #24]	; (80a1ae8 <_Z16_fetch_usbserialv+0x48>)
 80a1ad0:	4803      	ldr	r0, [pc, #12]	; (80a1ae0 <_Z16_fetch_usbserialv+0x40>)
 80a1ad2:	f000 f99b 	bl	80a1e0c <__aeabi_atexit>
	return _usbserial;
}
 80a1ad6:	4802      	ldr	r0, [pc, #8]	; (80a1ae0 <_Z16_fetch_usbserialv+0x40>)
 80a1ad8:	b007      	add	sp, #28
 80a1ada:	bd30      	pop	{r4, r5, pc}
 80a1adc:	200003cc 	.word	0x200003cc
 80a1ae0:	20000554 	.word	0x20000554
 80a1ae4:	200000f0 	.word	0x200000f0
 80a1ae8:	080a19c5 	.word	0x080a19c5

080a1aec <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a1aec:	b510      	push	{r4, lr}
 80a1aee:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a1af0:	2214      	movs	r2, #20
 80a1af2:	2100      	movs	r1, #0
 80a1af4:	f001 fae5 	bl	80a30c2 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a1af8:	4b05      	ldr	r3, [pc, #20]	; (80a1b10 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a1afa:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a1afc:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a1afe:	4b05      	ldr	r3, [pc, #20]	; (80a1b14 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a1b00:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a1b02:	f240 1301 	movw	r3, #257	; 0x101
 80a1b06:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a1b08:	2381      	movs	r3, #129	; 0x81
 80a1b0a:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a1b0c:	bd10      	pop	{r4, pc}
 80a1b0e:	bf00      	nop
 80a1b10:	20000604 	.word	0x20000604
 80a1b14:	2000056c 	.word	0x2000056c

080a1b18 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a1b18:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a1b1a:	4c0e      	ldr	r4, [pc, #56]	; (80a1b54 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a1b1c:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a1b1e:	a801      	add	r0, sp, #4
 80a1b20:	f7ff ffe4 	bl	80a1aec <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a1b24:	6823      	ldr	r3, [r4, #0]
 80a1b26:	07db      	lsls	r3, r3, #31
 80a1b28:	d410      	bmi.n	80a1b4c <_Z17_fetch_usbserial1v+0x34>
 80a1b2a:	4620      	mov	r0, r4
 80a1b2c:	f7fe fabb 	bl	80a00a6 <__cxa_guard_acquire>
 80a1b30:	b160      	cbz	r0, 80a1b4c <_Z17_fetch_usbserial1v+0x34>
 80a1b32:	aa01      	add	r2, sp, #4
 80a1b34:	2101      	movs	r1, #1
 80a1b36:	4808      	ldr	r0, [pc, #32]	; (80a1b58 <_Z17_fetch_usbserial1v+0x40>)
 80a1b38:	f7ff ff84 	bl	80a1a44 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a1b3c:	4620      	mov	r0, r4
 80a1b3e:	f7fe fab7 	bl	80a00b0 <__cxa_guard_release>
 80a1b42:	4a06      	ldr	r2, [pc, #24]	; (80a1b5c <_Z17_fetch_usbserial1v+0x44>)
 80a1b44:	4906      	ldr	r1, [pc, #24]	; (80a1b60 <_Z17_fetch_usbserial1v+0x48>)
 80a1b46:	4804      	ldr	r0, [pc, #16]	; (80a1b58 <_Z17_fetch_usbserial1v+0x40>)
 80a1b48:	f000 f960 	bl	80a1e0c <__aeabi_atexit>
  return _usbserial1;
}
 80a1b4c:	4802      	ldr	r0, [pc, #8]	; (80a1b58 <_Z17_fetch_usbserial1v+0x40>)
 80a1b4e:	b006      	add	sp, #24
 80a1b50:	bd10      	pop	{r4, pc}
 80a1b52:	bf00      	nop
 80a1b54:	20000568 	.word	0x20000568
 80a1b58:	200005f0 	.word	0x200005f0
 80a1b5c:	200000f0 	.word	0x200000f0
 80a1b60:	080a19c5 	.word	0x080a19c5

080a1b64 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a1b64:	2200      	movs	r2, #0
 80a1b66:	4611      	mov	r1, r2
 80a1b68:	6840      	ldr	r0, [r0, #4]
 80a1b6a:	f7ff b80b 	b.w	80a0b84 <network_ready>

080a1b6e <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a1b6e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a1b70:	4616      	mov	r6, r2
 80a1b72:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a1b74:	2211      	movs	r2, #17
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a1b76:	460f      	mov	r7, r1
 80a1b78:	4604      	mov	r4, r0
    {
        HAL_IPAddress ip = {};
 80a1b7a:	2100      	movs	r1, #0
 80a1b7c:	a803      	add	r0, sp, #12
 80a1b7e:	f001 faa0 	bl	80a30c2 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a1b82:	4630      	mov	r0, r6
 80a1b84:	f001 fafb 	bl	80a317e <strlen>
 80a1b88:	2500      	movs	r5, #0
 80a1b8a:	9500      	str	r5, [sp, #0]
 80a1b8c:	b281      	uxth	r1, r0
 80a1b8e:	687b      	ldr	r3, [r7, #4]
 80a1b90:	aa03      	add	r2, sp, #12
 80a1b92:	4630      	mov	r0, r6
 80a1b94:	f7fe ff52 	bl	80a0a3c <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a1b98:	b120      	cbz	r0, 80a1ba4 <_ZN5spark9WiFiClass7resolveEPKc+0x36>
 80a1b9a:	4629      	mov	r1, r5
 80a1b9c:	4620      	mov	r0, r4
 80a1b9e:	f7ff fc13 	bl	80a13c8 <_ZN9IPAddressC1Em>
 80a1ba2:	e003      	b.n	80a1bac <_ZN5spark9WiFiClass7resolveEPKc+0x3e>
 80a1ba4:	a903      	add	r1, sp, #12
 80a1ba6:	4620      	mov	r0, r4
 80a1ba8:	f7ff fbfc 	bl	80a13a4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80a1bac:	4620      	mov	r0, r4
 80a1bae:	b009      	add	sp, #36	; 0x24
 80a1bb0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a1bb2 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 80a1bb2:	2200      	movs	r2, #0
 80a1bb4:	4611      	mov	r1, r2
 80a1bb6:	6840      	ldr	r0, [r0, #4]
 80a1bb8:	f7ff b804 	b.w	80a0bc4 <network_listening>

080a1bbc <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 80a1bbc:	2200      	movs	r2, #0
 80a1bbe:	4611      	mov	r1, r2
 80a1bc0:	6840      	ldr	r0, [r0, #4]
 80a1bc2:	f7ff b80f 	b.w	80a0be4 <network_get_listen_timeout>

080a1bc6 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 80a1bc6:	2200      	movs	r2, #0
 80a1bc8:	6840      	ldr	r0, [r0, #4]
 80a1bca:	f7ff b803 	b.w	80a0bd4 <network_set_listen_timeout>

080a1bce <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80a1bce:	2200      	movs	r2, #0
 80a1bd0:	f081 0101 	eor.w	r1, r1, #1
 80a1bd4:	6840      	ldr	r0, [r0, #4]
 80a1bd6:	f7fe bfed 	b.w	80a0bb4 <network_listen>

080a1bda <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
 80a1bda:	2300      	movs	r3, #0
 80a1bdc:	461a      	mov	r2, r3
 80a1bde:	4619      	mov	r1, r3
 80a1be0:	6840      	ldr	r0, [r0, #4]
 80a1be2:	f7fe bfdf 	b.w	80a0ba4 <network_off>

080a1be6 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a1be6:	2300      	movs	r3, #0
 80a1be8:	461a      	mov	r2, r3
 80a1bea:	4619      	mov	r1, r3
 80a1bec:	6840      	ldr	r0, [r0, #4]
 80a1bee:	f7fe bfd1 	b.w	80a0b94 <network_on>

080a1bf2 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 80a1bf2:	2200      	movs	r2, #0
 80a1bf4:	4611      	mov	r1, r2
 80a1bf6:	6840      	ldr	r0, [r0, #4]
 80a1bf8:	f7fe bfb4 	b.w	80a0b64 <network_connecting>

080a1bfc <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a1bfc:	2200      	movs	r2, #0
 80a1bfe:	2102      	movs	r1, #2
 80a1c00:	6840      	ldr	r0, [r0, #4]
 80a1c02:	f7fe bfb7 	b.w	80a0b74 <network_disconnect>

080a1c06 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a1c06:	2300      	movs	r3, #0
 80a1c08:	461a      	mov	r2, r3
 80a1c0a:	6840      	ldr	r0, [r0, #4]
 80a1c0c:	f7fe bfa2 	b.w	80a0b54 <network_connect>

080a1c10 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 80a1c10:	4b02      	ldr	r3, [pc, #8]	; (80a1c1c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a1c12:	2204      	movs	r2, #4
 80a1c14:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a1c16:	4a02      	ldr	r2, [pc, #8]	; (80a1c20 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a1c18:	601a      	str	r2, [r3, #0]
 80a1c1a:	4770      	bx	lr
 80a1c1c:	20000708 	.word	0x20000708
 80a1c20:	080a59b4 	.word	0x080a59b4

080a1c24 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a1c24:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a1c26:	4b14      	ldr	r3, [pc, #80]	; (80a1c78 <serialEventRun+0x54>)
 80a1c28:	b133      	cbz	r3, 80a1c38 <serialEventRun+0x14>
 80a1c2a:	f7ff ff39 	bl	80a1aa0 <_Z16_fetch_usbserialv>
 80a1c2e:	6803      	ldr	r3, [r0, #0]
 80a1c30:	691b      	ldr	r3, [r3, #16]
 80a1c32:	4798      	blx	r3
 80a1c34:	2800      	cmp	r0, #0
 80a1c36:	dc16      	bgt.n	80a1c66 <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a1c38:	4b10      	ldr	r3, [pc, #64]	; (80a1c7c <serialEventRun+0x58>)
 80a1c3a:	b133      	cbz	r3, 80a1c4a <serialEventRun+0x26>
 80a1c3c:	f7ff fe9a 	bl	80a1974 <_Z22__fetch_global_Serial1v>
 80a1c40:	6803      	ldr	r3, [r0, #0]
 80a1c42:	691b      	ldr	r3, [r3, #16]
 80a1c44:	4798      	blx	r3
 80a1c46:	2800      	cmp	r0, #0
 80a1c48:	dc10      	bgt.n	80a1c6c <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a1c4a:	4b0d      	ldr	r3, [pc, #52]	; (80a1c80 <serialEventRun+0x5c>)
 80a1c4c:	b10b      	cbz	r3, 80a1c52 <serialEventRun+0x2e>
 80a1c4e:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a1c52:	4b0c      	ldr	r3, [pc, #48]	; (80a1c84 <serialEventRun+0x60>)
 80a1c54:	b17b      	cbz	r3, 80a1c76 <serialEventRun+0x52>
 80a1c56:	f7ff ff5f 	bl	80a1b18 <_Z17_fetch_usbserial1v>
 80a1c5a:	6803      	ldr	r3, [r0, #0]
 80a1c5c:	691b      	ldr	r3, [r3, #16]
 80a1c5e:	4798      	blx	r3
 80a1c60:	2800      	cmp	r0, #0
 80a1c62:	dc06      	bgt.n	80a1c72 <serialEventRun+0x4e>
 80a1c64:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a1c66:	f3af 8000 	nop.w
 80a1c6a:	e7e5      	b.n	80a1c38 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a1c6c:	f3af 8000 	nop.w
 80a1c70:	e7eb      	b.n	80a1c4a <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a1c72:	f3af 8000 	nop.w
 80a1c76:	bd08      	pop	{r3, pc}
	...

080a1c88 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a1c88:	b508      	push	{r3, lr}
	serialEventRun();
 80a1c8a:	f7ff ffcb 	bl	80a1c24 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a1c8e:	f7fe fdfb 	bl	80a0888 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a1c92:	4b01      	ldr	r3, [pc, #4]	; (80a1c98 <_post_loop+0x10>)
 80a1c94:	6018      	str	r0, [r3, #0]
 80a1c96:	bd08      	pop	{r3, pc}
 80a1c98:	20000718 	.word	0x20000718

080a1c9c <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a1c9c:	4802      	ldr	r0, [pc, #8]	; (80a1ca8 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a1c9e:	4a03      	ldr	r2, [pc, #12]	; (80a1cac <_Z33system_initialize_user_backup_ramv+0x10>)
 80a1ca0:	4903      	ldr	r1, [pc, #12]	; (80a1cb0 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a1ca2:	1a12      	subs	r2, r2, r0
 80a1ca4:	f001 ba02 	b.w	80a30ac <memcpy>
 80a1ca8:	40024000 	.word	0x40024000
 80a1cac:	40024004 	.word	0x40024004
 80a1cb0:	080a5d90 	.word	0x080a5d90

080a1cb4 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a1cb4:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a1cb6:	2300      	movs	r3, #0
 80a1cb8:	9300      	str	r3, [sp, #0]
 80a1cba:	461a      	mov	r2, r3
 80a1cbc:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a1cc0:	f7fe ff06 	bl	80a0ad0 <system_ctrl_set_result>
}
 80a1cc4:	b003      	add	sp, #12
 80a1cc6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a1ccc <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a1ccc:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a1cce:	8843      	ldrh	r3, [r0, #2]
 80a1cd0:	2b0a      	cmp	r3, #10
 80a1cd2:	d008      	beq.n	80a1ce6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a1cd4:	2b50      	cmp	r3, #80	; 0x50
 80a1cd6:	d109      	bne.n	80a1cec <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a1cd8:	4b09      	ldr	r3, [pc, #36]	; (80a1d00 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a1cda:	681b      	ldr	r3, [r3, #0]
 80a1cdc:	b13b      	cbz	r3, 80a1cee <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a1cde:	b003      	add	sp, #12
 80a1ce0:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a1ce4:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a1ce6:	f7ff ffe5 	bl	80a1cb4 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a1cea:	e006      	b.n	80a1cfa <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a1cec:	2300      	movs	r3, #0
 80a1cee:	9300      	str	r3, [sp, #0]
 80a1cf0:	461a      	mov	r2, r3
 80a1cf2:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a1cf6:	f7fe feeb 	bl	80a0ad0 <system_ctrl_set_result>
        break;
    }
}
 80a1cfa:	b003      	add	sp, #12
 80a1cfc:	f85d fb04 	ldr.w	pc, [sp], #4
 80a1d00:	20000710 	.word	0x20000710

080a1d04 <module_user_init_hook>:

void module_user_init_hook()
{
 80a1d04:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a1d06:	4c10      	ldr	r4, [pc, #64]	; (80a1d48 <module_user_init_hook+0x44>)
 80a1d08:	4d10      	ldr	r5, [pc, #64]	; (80a1d4c <module_user_init_hook+0x48>)
 80a1d0a:	6823      	ldr	r3, [r4, #0]
 80a1d0c:	42ab      	cmp	r3, r5
 80a1d0e:	4b10      	ldr	r3, [pc, #64]	; (80a1d50 <module_user_init_hook+0x4c>)
 80a1d10:	bf0c      	ite	eq
 80a1d12:	2201      	moveq	r2, #1
 80a1d14:	2200      	movne	r2, #0
 80a1d16:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a1d18:	d002      	beq.n	80a1d20 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a1d1a:	f7ff ffbf 	bl	80a1c9c <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a1d1e:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a1d20:	f7fe fdaa 	bl	80a0878 <HAL_RNG_GetRandomNumber>
 80a1d24:	4604      	mov	r4, r0
    srand(seed);
 80a1d26:	f001 f9d5 	bl	80a30d4 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a1d2a:	4b0a      	ldr	r3, [pc, #40]	; (80a1d54 <module_user_init_hook+0x50>)
 80a1d2c:	b113      	cbz	r3, 80a1d34 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 80a1d2e:	4620      	mov	r0, r4
 80a1d30:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a1d34:	2100      	movs	r1, #0
 80a1d36:	4807      	ldr	r0, [pc, #28]	; (80a1d54 <module_user_init_hook+0x50>)
 80a1d38:	f7fe ff04 	bl	80a0b44 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a1d3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a1d40:	2100      	movs	r1, #0
 80a1d42:	4805      	ldr	r0, [pc, #20]	; (80a1d58 <module_user_init_hook+0x54>)
 80a1d44:	f7fe beba 	b.w	80a0abc <system_ctrl_set_app_request_handler>
 80a1d48:	40024000 	.word	0x40024000
 80a1d4c:	9a271c1e 	.word	0x9a271c1e
 80a1d50:	20000714 	.word	0x20000714
 80a1d54:	00000000 	.word	0x00000000
 80a1d58:	080a1ccd 	.word	0x080a1ccd

080a1d5c <_Z17acquireWireBufferv>:
}

} // anonymous

HAL_I2C_Config __attribute__((weak)) acquireWireBuffer()
{
 80a1d5c:	b570      	push	{r4, r5, r6, lr}
 80a1d5e:	4604      	mov	r4, r0
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a1d60:	2514      	movs	r5, #20
 80a1d62:	462a      	mov	r2, r5

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a1d64:	4e09      	ldr	r6, [pc, #36]	; (80a1d8c <_Z17acquireWireBufferv+0x30>)
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a1d66:	2100      	movs	r1, #0
 80a1d68:	f001 f9ab 	bl	80a30c2 <memset>
 80a1d6c:	8025      	strh	r5, [r4, #0]
 80a1d6e:	2520      	movs	r5, #32

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a1d70:	4631      	mov	r1, r6
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a1d72:	60a5      	str	r5, [r4, #8]
 80a1d74:	6125      	str	r5, [r4, #16]

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a1d76:	4628      	mov	r0, r5
 80a1d78:	f000 f867 	bl	80a1e4a <_ZnajRKSt9nothrow_t>
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a1d7c:	4631      	mov	r1, r6
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a1d7e:	6060      	str	r0, [r4, #4]
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a1d80:	4628      	mov	r0, r5
 80a1d82:	f000 f862 	bl	80a1e4a <_ZnajRKSt9nothrow_t>
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a1d86:	60e0      	str	r0, [r4, #12]
} // anonymous

HAL_I2C_Config __attribute__((weak)) acquireWireBuffer()
{
	return defaultWireConfig();
}
 80a1d88:	4620      	mov	r0, r4
 80a1d8a:	bd70      	pop	{r4, r5, r6, pc}
 80a1d8c:	080a59e0 	.word	0x080a59e0

080a1d90 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 80a1d90:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a1d92:	4d0e      	ldr	r5, [pc, #56]	; (80a1dcc <_Z19__fetch_global_Wirev+0x3c>)
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 80a1d94:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a1d96:	6829      	ldr	r1, [r5, #0]
 80a1d98:	f011 0401 	ands.w	r4, r1, #1
 80a1d9c:	d113      	bne.n	80a1dc6 <_Z19__fetch_global_Wirev+0x36>
 80a1d9e:	4628      	mov	r0, r5
 80a1da0:	f7fe f981 	bl	80a00a6 <__cxa_guard_acquire>
 80a1da4:	b178      	cbz	r0, 80a1dc6 <_Z19__fetch_global_Wirev+0x36>
 80a1da6:	a801      	add	r0, sp, #4
 80a1da8:	f7ff ffd8 	bl	80a1d5c <_Z17acquireWireBufferv>
 80a1dac:	aa01      	add	r2, sp, #4
 80a1dae:	4621      	mov	r1, r4
 80a1db0:	4807      	ldr	r0, [pc, #28]	; (80a1dd0 <_Z19__fetch_global_Wirev+0x40>)
 80a1db2:	f7ff faa1 	bl	80a12f8 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
 80a1db6:	4628      	mov	r0, r5
 80a1db8:	f7fe f97a 	bl	80a00b0 <__cxa_guard_release>
 80a1dbc:	4a05      	ldr	r2, [pc, #20]	; (80a1dd4 <_Z19__fetch_global_Wirev+0x44>)
 80a1dbe:	4906      	ldr	r1, [pc, #24]	; (80a1dd8 <_Z19__fetch_global_Wirev+0x48>)
 80a1dc0:	4803      	ldr	r0, [pc, #12]	; (80a1dd0 <_Z19__fetch_global_Wirev+0x40>)
 80a1dc2:	f000 f823 	bl	80a1e0c <__aeabi_atexit>
	return wire;
}
 80a1dc6:	4802      	ldr	r0, [pc, #8]	; (80a1dd0 <_Z19__fetch_global_Wirev+0x40>)
 80a1dc8:	b007      	add	sp, #28
 80a1dca:	bd30      	pop	{r4, r5, pc}
 80a1dcc:	2000071c 	.word	0x2000071c
 80a1dd0:	20000720 	.word	0x20000720
 80a1dd4:	200000f0 	.word	0x200000f0
 80a1dd8:	080a12a1 	.word	0x080a12a1

080a1ddc <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a1ddc:	b513      	push	{r0, r1, r4, lr}
 80a1dde:	4c08      	ldr	r4, [pc, #32]	; (80a1e00 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a1de0:	2300      	movs	r3, #0
 80a1de2:	461a      	mov	r2, r3
 80a1de4:	4619      	mov	r1, r3
 80a1de6:	9300      	str	r3, [sp, #0]
 80a1de8:	4620      	mov	r0, r4
 80a1dea:	f7ff fb03 	bl	80a13f4 <_ZN9IPAddressC1Ehhhh>
 80a1dee:	4620      	mov	r0, r4
 80a1df0:	4a04      	ldr	r2, [pc, #16]	; (80a1e04 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a1df2:	4905      	ldr	r1, [pc, #20]	; (80a1e08 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a1df4:	b002      	add	sp, #8
 80a1df6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a1dfa:	f000 b807 	b.w	80a1e0c <__aeabi_atexit>
 80a1dfe:	bf00      	nop
 80a1e00:	20000734 	.word	0x20000734
 80a1e04:	200000f0 	.word	0x200000f0
 80a1e08:	080a1345 	.word	0x080a1345

080a1e0c <__aeabi_atexit>:
 80a1e0c:	460b      	mov	r3, r1
 80a1e0e:	4601      	mov	r1, r0
 80a1e10:	4618      	mov	r0, r3
 80a1e12:	f001 b841 	b.w	80a2e98 <__cxa_atexit>

080a1e16 <_ZdlPvj>:
 80a1e16:	f7fe b944 	b.w	80a00a2 <_ZdlPv>
	...

080a1e1c <_ZSt15get_new_handlerv>:
 80a1e1c:	4b02      	ldr	r3, [pc, #8]	; (80a1e28 <_ZSt15get_new_handlerv+0xc>)
 80a1e1e:	6818      	ldr	r0, [r3, #0]
 80a1e20:	f3bf 8f5f 	dmb	sy
 80a1e24:	4770      	bx	lr
 80a1e26:	bf00      	nop
 80a1e28:	2000074c 	.word	0x2000074c

080a1e2c <_ZnwjRKSt9nothrow_t>:
 80a1e2c:	b510      	push	{r4, lr}
 80a1e2e:	2800      	cmp	r0, #0
 80a1e30:	bf14      	ite	ne
 80a1e32:	4604      	movne	r4, r0
 80a1e34:	2401      	moveq	r4, #1
 80a1e36:	4620      	mov	r0, r4
 80a1e38:	f7fe fedc 	bl	80a0bf4 <malloc>
 80a1e3c:	b920      	cbnz	r0, 80a1e48 <_ZnwjRKSt9nothrow_t+0x1c>
 80a1e3e:	f7ff ffed 	bl	80a1e1c <_ZSt15get_new_handlerv>
 80a1e42:	b108      	cbz	r0, 80a1e48 <_ZnwjRKSt9nothrow_t+0x1c>
 80a1e44:	4780      	blx	r0
 80a1e46:	e7f6      	b.n	80a1e36 <_ZnwjRKSt9nothrow_t+0xa>
 80a1e48:	bd10      	pop	{r4, pc}

080a1e4a <_ZnajRKSt9nothrow_t>:
 80a1e4a:	f7ff bfef 	b.w	80a1e2c <_ZnwjRKSt9nothrow_t>

080a1e4e <_ZSt25__throw_bad_function_callv>:
 80a1e4e:	b508      	push	{r3, lr}
 80a1e50:	f7fe ff00 	bl	80a0c54 <abort>

080a1e54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a1e54:	4b24      	ldr	r3, [pc, #144]	; (80a1ee8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a1e56:	681a      	ldr	r2, [r3, #0]
 80a1e58:	07d0      	lsls	r0, r2, #31
 80a1e5a:	bf5c      	itt	pl
 80a1e5c:	2201      	movpl	r2, #1
 80a1e5e:	601a      	strpl	r2, [r3, #0]
 80a1e60:	4b22      	ldr	r3, [pc, #136]	; (80a1eec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a1e62:	681a      	ldr	r2, [r3, #0]
 80a1e64:	07d1      	lsls	r1, r2, #31
 80a1e66:	bf5c      	itt	pl
 80a1e68:	2201      	movpl	r2, #1
 80a1e6a:	601a      	strpl	r2, [r3, #0]
 80a1e6c:	4b20      	ldr	r3, [pc, #128]	; (80a1ef0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a1e6e:	681a      	ldr	r2, [r3, #0]
 80a1e70:	07d2      	lsls	r2, r2, #31
 80a1e72:	bf5c      	itt	pl
 80a1e74:	2201      	movpl	r2, #1
 80a1e76:	601a      	strpl	r2, [r3, #0]
 80a1e78:	4b1e      	ldr	r3, [pc, #120]	; (80a1ef4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a1e7a:	681a      	ldr	r2, [r3, #0]
 80a1e7c:	07d0      	lsls	r0, r2, #31
 80a1e7e:	bf5c      	itt	pl
 80a1e80:	2201      	movpl	r2, #1
 80a1e82:	601a      	strpl	r2, [r3, #0]
 80a1e84:	4b1c      	ldr	r3, [pc, #112]	; (80a1ef8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a1e86:	681a      	ldr	r2, [r3, #0]
 80a1e88:	07d1      	lsls	r1, r2, #31
 80a1e8a:	bf5c      	itt	pl
 80a1e8c:	2201      	movpl	r2, #1
 80a1e8e:	601a      	strpl	r2, [r3, #0]
 80a1e90:	4b1a      	ldr	r3, [pc, #104]	; (80a1efc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a1e92:	681a      	ldr	r2, [r3, #0]
 80a1e94:	07d2      	lsls	r2, r2, #31
 80a1e96:	bf5c      	itt	pl
 80a1e98:	2201      	movpl	r2, #1
 80a1e9a:	601a      	strpl	r2, [r3, #0]
 80a1e9c:	4b18      	ldr	r3, [pc, #96]	; (80a1f00 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a1e9e:	681a      	ldr	r2, [r3, #0]
 80a1ea0:	07d0      	lsls	r0, r2, #31
 80a1ea2:	bf5c      	itt	pl
 80a1ea4:	2201      	movpl	r2, #1
 80a1ea6:	601a      	strpl	r2, [r3, #0]
 80a1ea8:	4b16      	ldr	r3, [pc, #88]	; (80a1f04 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a1eaa:	681a      	ldr	r2, [r3, #0]
 80a1eac:	07d1      	lsls	r1, r2, #31
 80a1eae:	bf5c      	itt	pl
 80a1eb0:	2201      	movpl	r2, #1
 80a1eb2:	601a      	strpl	r2, [r3, #0]
 80a1eb4:	4b14      	ldr	r3, [pc, #80]	; (80a1f08 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a1eb6:	681a      	ldr	r2, [r3, #0]
 80a1eb8:	07d2      	lsls	r2, r2, #31
 80a1eba:	bf5c      	itt	pl
 80a1ebc:	2201      	movpl	r2, #1
 80a1ebe:	601a      	strpl	r2, [r3, #0]
 80a1ec0:	4b12      	ldr	r3, [pc, #72]	; (80a1f0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a1ec2:	681a      	ldr	r2, [r3, #0]
 80a1ec4:	07d0      	lsls	r0, r2, #31
 80a1ec6:	bf5c      	itt	pl
 80a1ec8:	2201      	movpl	r2, #1
 80a1eca:	601a      	strpl	r2, [r3, #0]
 80a1ecc:	4b10      	ldr	r3, [pc, #64]	; (80a1f10 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a1ece:	681a      	ldr	r2, [r3, #0]
 80a1ed0:	07d1      	lsls	r1, r2, #31
 80a1ed2:	bf5c      	itt	pl
 80a1ed4:	2201      	movpl	r2, #1
 80a1ed6:	601a      	strpl	r2, [r3, #0]
 80a1ed8:	4b0e      	ldr	r3, [pc, #56]	; (80a1f14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a1eda:	681a      	ldr	r2, [r3, #0]
 80a1edc:	07d2      	lsls	r2, r2, #31
 80a1ede:	bf5c      	itt	pl
 80a1ee0:	2201      	movpl	r2, #1
 80a1ee2:	601a      	strpl	r2, [r3, #0]
 80a1ee4:	4770      	bx	lr
 80a1ee6:	bf00      	nop
 80a1ee8:	2000077c 	.word	0x2000077c
 80a1eec:	20000778 	.word	0x20000778
 80a1ef0:	20000774 	.word	0x20000774
 80a1ef4:	20000770 	.word	0x20000770
 80a1ef8:	2000076c 	.word	0x2000076c
 80a1efc:	20000768 	.word	0x20000768
 80a1f00:	20000764 	.word	0x20000764
 80a1f04:	20000760 	.word	0x20000760
 80a1f08:	2000075c 	.word	0x2000075c
 80a1f0c:	20000758 	.word	0x20000758
 80a1f10:	20000754 	.word	0x20000754
 80a1f14:	20000750 	.word	0x20000750

080a1f18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a1f18:	4b18      	ldr	r3, [pc, #96]	; (80a1f7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a1f1a:	681a      	ldr	r2, [r3, #0]
 80a1f1c:	07d1      	lsls	r1, r2, #31
 80a1f1e:	bf5c      	itt	pl
 80a1f20:	2201      	movpl	r2, #1
 80a1f22:	601a      	strpl	r2, [r3, #0]
 80a1f24:	4b16      	ldr	r3, [pc, #88]	; (80a1f80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a1f26:	681a      	ldr	r2, [r3, #0]
 80a1f28:	07d2      	lsls	r2, r2, #31
 80a1f2a:	bf5c      	itt	pl
 80a1f2c:	2201      	movpl	r2, #1
 80a1f2e:	601a      	strpl	r2, [r3, #0]
 80a1f30:	4b14      	ldr	r3, [pc, #80]	; (80a1f84 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a1f32:	681a      	ldr	r2, [r3, #0]
 80a1f34:	07d0      	lsls	r0, r2, #31
 80a1f36:	bf5c      	itt	pl
 80a1f38:	2201      	movpl	r2, #1
 80a1f3a:	601a      	strpl	r2, [r3, #0]
 80a1f3c:	4b12      	ldr	r3, [pc, #72]	; (80a1f88 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a1f3e:	681a      	ldr	r2, [r3, #0]
 80a1f40:	07d1      	lsls	r1, r2, #31
 80a1f42:	bf5c      	itt	pl
 80a1f44:	2201      	movpl	r2, #1
 80a1f46:	601a      	strpl	r2, [r3, #0]
 80a1f48:	4b10      	ldr	r3, [pc, #64]	; (80a1f8c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a1f4a:	681a      	ldr	r2, [r3, #0]
 80a1f4c:	07d2      	lsls	r2, r2, #31
 80a1f4e:	bf5c      	itt	pl
 80a1f50:	2201      	movpl	r2, #1
 80a1f52:	601a      	strpl	r2, [r3, #0]
 80a1f54:	4b0e      	ldr	r3, [pc, #56]	; (80a1f90 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a1f56:	681a      	ldr	r2, [r3, #0]
 80a1f58:	07d0      	lsls	r0, r2, #31
 80a1f5a:	bf5c      	itt	pl
 80a1f5c:	2201      	movpl	r2, #1
 80a1f5e:	601a      	strpl	r2, [r3, #0]
 80a1f60:	4b0c      	ldr	r3, [pc, #48]	; (80a1f94 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a1f62:	681a      	ldr	r2, [r3, #0]
 80a1f64:	07d1      	lsls	r1, r2, #31
 80a1f66:	bf5c      	itt	pl
 80a1f68:	2201      	movpl	r2, #1
 80a1f6a:	601a      	strpl	r2, [r3, #0]
 80a1f6c:	4b0a      	ldr	r3, [pc, #40]	; (80a1f98 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a1f6e:	681a      	ldr	r2, [r3, #0]
 80a1f70:	07d2      	lsls	r2, r2, #31
 80a1f72:	bf5c      	itt	pl
 80a1f74:	2201      	movpl	r2, #1
 80a1f76:	601a      	strpl	r2, [r3, #0]
 80a1f78:	4770      	bx	lr
 80a1f7a:	bf00      	nop
 80a1f7c:	2000079c 	.word	0x2000079c
 80a1f80:	20000798 	.word	0x20000798
 80a1f84:	20000794 	.word	0x20000794
 80a1f88:	20000790 	.word	0x20000790
 80a1f8c:	2000078c 	.word	0x2000078c
 80a1f90:	20000788 	.word	0x20000788
 80a1f94:	20000784 	.word	0x20000784
 80a1f98:	20000780 	.word	0x20000780

080a1f9c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a1f9c:	4b18      	ldr	r3, [pc, #96]	; (80a2000 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a1f9e:	681a      	ldr	r2, [r3, #0]
 80a1fa0:	07d1      	lsls	r1, r2, #31
 80a1fa2:	bf5c      	itt	pl
 80a1fa4:	2201      	movpl	r2, #1
 80a1fa6:	601a      	strpl	r2, [r3, #0]
 80a1fa8:	4b16      	ldr	r3, [pc, #88]	; (80a2004 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a1faa:	681a      	ldr	r2, [r3, #0]
 80a1fac:	07d2      	lsls	r2, r2, #31
 80a1fae:	bf5c      	itt	pl
 80a1fb0:	2201      	movpl	r2, #1
 80a1fb2:	601a      	strpl	r2, [r3, #0]
 80a1fb4:	4b14      	ldr	r3, [pc, #80]	; (80a2008 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a1fb6:	681a      	ldr	r2, [r3, #0]
 80a1fb8:	07d0      	lsls	r0, r2, #31
 80a1fba:	bf5c      	itt	pl
 80a1fbc:	2201      	movpl	r2, #1
 80a1fbe:	601a      	strpl	r2, [r3, #0]
 80a1fc0:	4b12      	ldr	r3, [pc, #72]	; (80a200c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a1fc2:	681a      	ldr	r2, [r3, #0]
 80a1fc4:	07d1      	lsls	r1, r2, #31
 80a1fc6:	bf5c      	itt	pl
 80a1fc8:	2201      	movpl	r2, #1
 80a1fca:	601a      	strpl	r2, [r3, #0]
 80a1fcc:	4b10      	ldr	r3, [pc, #64]	; (80a2010 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a1fce:	681a      	ldr	r2, [r3, #0]
 80a1fd0:	07d2      	lsls	r2, r2, #31
 80a1fd2:	bf5c      	itt	pl
 80a1fd4:	2201      	movpl	r2, #1
 80a1fd6:	601a      	strpl	r2, [r3, #0]
 80a1fd8:	4b0e      	ldr	r3, [pc, #56]	; (80a2014 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a1fda:	681a      	ldr	r2, [r3, #0]
 80a1fdc:	07d0      	lsls	r0, r2, #31
 80a1fde:	bf5c      	itt	pl
 80a1fe0:	2201      	movpl	r2, #1
 80a1fe2:	601a      	strpl	r2, [r3, #0]
 80a1fe4:	4b0c      	ldr	r3, [pc, #48]	; (80a2018 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a1fe6:	681a      	ldr	r2, [r3, #0]
 80a1fe8:	07d1      	lsls	r1, r2, #31
 80a1fea:	bf5c      	itt	pl
 80a1fec:	2201      	movpl	r2, #1
 80a1fee:	601a      	strpl	r2, [r3, #0]
 80a1ff0:	4b0a      	ldr	r3, [pc, #40]	; (80a201c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a1ff2:	681a      	ldr	r2, [r3, #0]
 80a1ff4:	07d2      	lsls	r2, r2, #31
 80a1ff6:	bf5c      	itt	pl
 80a1ff8:	2201      	movpl	r2, #1
 80a1ffa:	601a      	strpl	r2, [r3, #0]
 80a1ffc:	4770      	bx	lr
 80a1ffe:	bf00      	nop
 80a2000:	200007bc 	.word	0x200007bc
 80a2004:	200007b8 	.word	0x200007b8
 80a2008:	200007b4 	.word	0x200007b4
 80a200c:	200007b0 	.word	0x200007b0
 80a2010:	200007ac 	.word	0x200007ac
 80a2014:	200007a8 	.word	0x200007a8
 80a2018:	200007a4 	.word	0x200007a4
 80a201c:	200007a0 	.word	0x200007a0

080a2020 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a2020:	4b24      	ldr	r3, [pc, #144]	; (80a20b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a2022:	681a      	ldr	r2, [r3, #0]
 80a2024:	07d0      	lsls	r0, r2, #31
 80a2026:	bf5c      	itt	pl
 80a2028:	2201      	movpl	r2, #1
 80a202a:	601a      	strpl	r2, [r3, #0]
 80a202c:	4b22      	ldr	r3, [pc, #136]	; (80a20b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a202e:	681a      	ldr	r2, [r3, #0]
 80a2030:	07d1      	lsls	r1, r2, #31
 80a2032:	bf5c      	itt	pl
 80a2034:	2201      	movpl	r2, #1
 80a2036:	601a      	strpl	r2, [r3, #0]
 80a2038:	4b20      	ldr	r3, [pc, #128]	; (80a20bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a203a:	681a      	ldr	r2, [r3, #0]
 80a203c:	07d2      	lsls	r2, r2, #31
 80a203e:	bf5c      	itt	pl
 80a2040:	2201      	movpl	r2, #1
 80a2042:	601a      	strpl	r2, [r3, #0]
 80a2044:	4b1e      	ldr	r3, [pc, #120]	; (80a20c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a2046:	681a      	ldr	r2, [r3, #0]
 80a2048:	07d0      	lsls	r0, r2, #31
 80a204a:	bf5c      	itt	pl
 80a204c:	2201      	movpl	r2, #1
 80a204e:	601a      	strpl	r2, [r3, #0]
 80a2050:	4b1c      	ldr	r3, [pc, #112]	; (80a20c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a2052:	681a      	ldr	r2, [r3, #0]
 80a2054:	07d1      	lsls	r1, r2, #31
 80a2056:	bf5c      	itt	pl
 80a2058:	2201      	movpl	r2, #1
 80a205a:	601a      	strpl	r2, [r3, #0]
 80a205c:	4b1a      	ldr	r3, [pc, #104]	; (80a20c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a205e:	681a      	ldr	r2, [r3, #0]
 80a2060:	07d2      	lsls	r2, r2, #31
 80a2062:	bf5c      	itt	pl
 80a2064:	2201      	movpl	r2, #1
 80a2066:	601a      	strpl	r2, [r3, #0]
 80a2068:	4b18      	ldr	r3, [pc, #96]	; (80a20cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a206a:	681a      	ldr	r2, [r3, #0]
 80a206c:	07d0      	lsls	r0, r2, #31
 80a206e:	bf5c      	itt	pl
 80a2070:	2201      	movpl	r2, #1
 80a2072:	601a      	strpl	r2, [r3, #0]
 80a2074:	4b16      	ldr	r3, [pc, #88]	; (80a20d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a2076:	681a      	ldr	r2, [r3, #0]
 80a2078:	07d1      	lsls	r1, r2, #31
 80a207a:	bf5c      	itt	pl
 80a207c:	2201      	movpl	r2, #1
 80a207e:	601a      	strpl	r2, [r3, #0]
 80a2080:	4b14      	ldr	r3, [pc, #80]	; (80a20d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a2082:	681a      	ldr	r2, [r3, #0]
 80a2084:	07d2      	lsls	r2, r2, #31
 80a2086:	bf5c      	itt	pl
 80a2088:	2201      	movpl	r2, #1
 80a208a:	601a      	strpl	r2, [r3, #0]
 80a208c:	4b12      	ldr	r3, [pc, #72]	; (80a20d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a208e:	681a      	ldr	r2, [r3, #0]
 80a2090:	07d0      	lsls	r0, r2, #31
 80a2092:	bf5c      	itt	pl
 80a2094:	2201      	movpl	r2, #1
 80a2096:	601a      	strpl	r2, [r3, #0]
 80a2098:	4b10      	ldr	r3, [pc, #64]	; (80a20dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a209a:	681a      	ldr	r2, [r3, #0]
 80a209c:	07d1      	lsls	r1, r2, #31
 80a209e:	bf5c      	itt	pl
 80a20a0:	2201      	movpl	r2, #1
 80a20a2:	601a      	strpl	r2, [r3, #0]
 80a20a4:	4b0e      	ldr	r3, [pc, #56]	; (80a20e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a20a6:	681a      	ldr	r2, [r3, #0]
 80a20a8:	07d2      	lsls	r2, r2, #31
 80a20aa:	bf5c      	itt	pl
 80a20ac:	2201      	movpl	r2, #1
 80a20ae:	601a      	strpl	r2, [r3, #0]
 80a20b0:	4770      	bx	lr
 80a20b2:	bf00      	nop
 80a20b4:	200007ec 	.word	0x200007ec
 80a20b8:	200007e8 	.word	0x200007e8
 80a20bc:	200007e4 	.word	0x200007e4
 80a20c0:	200007e0 	.word	0x200007e0
 80a20c4:	200007dc 	.word	0x200007dc
 80a20c8:	200007d8 	.word	0x200007d8
 80a20cc:	200007d4 	.word	0x200007d4
 80a20d0:	200007d0 	.word	0x200007d0
 80a20d4:	200007cc 	.word	0x200007cc
 80a20d8:	200007c8 	.word	0x200007c8
 80a20dc:	200007c4 	.word	0x200007c4
 80a20e0:	200007c0 	.word	0x200007c0

080a20e4 <__aeabi_drsub>:
 80a20e4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a20e8:	e002      	b.n	80a20f0 <__adddf3>
 80a20ea:	bf00      	nop

080a20ec <__aeabi_dsub>:
 80a20ec:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a20f0 <__adddf3>:
 80a20f0:	b530      	push	{r4, r5, lr}
 80a20f2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a20f6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a20fa:	ea94 0f05 	teq	r4, r5
 80a20fe:	bf08      	it	eq
 80a2100:	ea90 0f02 	teqeq	r0, r2
 80a2104:	bf1f      	itttt	ne
 80a2106:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a210a:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a210e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a2112:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a2116:	f000 80e2 	beq.w	80a22de <__adddf3+0x1ee>
 80a211a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a211e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a2122:	bfb8      	it	lt
 80a2124:	426d      	neglt	r5, r5
 80a2126:	dd0c      	ble.n	80a2142 <__adddf3+0x52>
 80a2128:	442c      	add	r4, r5
 80a212a:	ea80 0202 	eor.w	r2, r0, r2
 80a212e:	ea81 0303 	eor.w	r3, r1, r3
 80a2132:	ea82 0000 	eor.w	r0, r2, r0
 80a2136:	ea83 0101 	eor.w	r1, r3, r1
 80a213a:	ea80 0202 	eor.w	r2, r0, r2
 80a213e:	ea81 0303 	eor.w	r3, r1, r3
 80a2142:	2d36      	cmp	r5, #54	; 0x36
 80a2144:	bf88      	it	hi
 80a2146:	bd30      	pophi	{r4, r5, pc}
 80a2148:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a214c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a2150:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a2154:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a2158:	d002      	beq.n	80a2160 <__adddf3+0x70>
 80a215a:	4240      	negs	r0, r0
 80a215c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a2160:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a2164:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a2168:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a216c:	d002      	beq.n	80a2174 <__adddf3+0x84>
 80a216e:	4252      	negs	r2, r2
 80a2170:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a2174:	ea94 0f05 	teq	r4, r5
 80a2178:	f000 80a7 	beq.w	80a22ca <__adddf3+0x1da>
 80a217c:	f1a4 0401 	sub.w	r4, r4, #1
 80a2180:	f1d5 0e20 	rsbs	lr, r5, #32
 80a2184:	db0d      	blt.n	80a21a2 <__adddf3+0xb2>
 80a2186:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a218a:	fa22 f205 	lsr.w	r2, r2, r5
 80a218e:	1880      	adds	r0, r0, r2
 80a2190:	f141 0100 	adc.w	r1, r1, #0
 80a2194:	fa03 f20e 	lsl.w	r2, r3, lr
 80a2198:	1880      	adds	r0, r0, r2
 80a219a:	fa43 f305 	asr.w	r3, r3, r5
 80a219e:	4159      	adcs	r1, r3
 80a21a0:	e00e      	b.n	80a21c0 <__adddf3+0xd0>
 80a21a2:	f1a5 0520 	sub.w	r5, r5, #32
 80a21a6:	f10e 0e20 	add.w	lr, lr, #32
 80a21aa:	2a01      	cmp	r2, #1
 80a21ac:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a21b0:	bf28      	it	cs
 80a21b2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a21b6:	fa43 f305 	asr.w	r3, r3, r5
 80a21ba:	18c0      	adds	r0, r0, r3
 80a21bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a21c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a21c4:	d507      	bpl.n	80a21d6 <__adddf3+0xe6>
 80a21c6:	f04f 0e00 	mov.w	lr, #0
 80a21ca:	f1dc 0c00 	rsbs	ip, ip, #0
 80a21ce:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a21d2:	eb6e 0101 	sbc.w	r1, lr, r1
 80a21d6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a21da:	d31b      	bcc.n	80a2214 <__adddf3+0x124>
 80a21dc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a21e0:	d30c      	bcc.n	80a21fc <__adddf3+0x10c>
 80a21e2:	0849      	lsrs	r1, r1, #1
 80a21e4:	ea5f 0030 	movs.w	r0, r0, rrx
 80a21e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a21ec:	f104 0401 	add.w	r4, r4, #1
 80a21f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a21f4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a21f8:	f080 809a 	bcs.w	80a2330 <__adddf3+0x240>
 80a21fc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a2200:	bf08      	it	eq
 80a2202:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a2206:	f150 0000 	adcs.w	r0, r0, #0
 80a220a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a220e:	ea41 0105 	orr.w	r1, r1, r5
 80a2212:	bd30      	pop	{r4, r5, pc}
 80a2214:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a2218:	4140      	adcs	r0, r0
 80a221a:	eb41 0101 	adc.w	r1, r1, r1
 80a221e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a2222:	f1a4 0401 	sub.w	r4, r4, #1
 80a2226:	d1e9      	bne.n	80a21fc <__adddf3+0x10c>
 80a2228:	f091 0f00 	teq	r1, #0
 80a222c:	bf04      	itt	eq
 80a222e:	4601      	moveq	r1, r0
 80a2230:	2000      	moveq	r0, #0
 80a2232:	fab1 f381 	clz	r3, r1
 80a2236:	bf08      	it	eq
 80a2238:	3320      	addeq	r3, #32
 80a223a:	f1a3 030b 	sub.w	r3, r3, #11
 80a223e:	f1b3 0220 	subs.w	r2, r3, #32
 80a2242:	da0c      	bge.n	80a225e <__adddf3+0x16e>
 80a2244:	320c      	adds	r2, #12
 80a2246:	dd08      	ble.n	80a225a <__adddf3+0x16a>
 80a2248:	f102 0c14 	add.w	ip, r2, #20
 80a224c:	f1c2 020c 	rsb	r2, r2, #12
 80a2250:	fa01 f00c 	lsl.w	r0, r1, ip
 80a2254:	fa21 f102 	lsr.w	r1, r1, r2
 80a2258:	e00c      	b.n	80a2274 <__adddf3+0x184>
 80a225a:	f102 0214 	add.w	r2, r2, #20
 80a225e:	bfd8      	it	le
 80a2260:	f1c2 0c20 	rsble	ip, r2, #32
 80a2264:	fa01 f102 	lsl.w	r1, r1, r2
 80a2268:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a226c:	bfdc      	itt	le
 80a226e:	ea41 010c 	orrle.w	r1, r1, ip
 80a2272:	4090      	lslle	r0, r2
 80a2274:	1ae4      	subs	r4, r4, r3
 80a2276:	bfa2      	ittt	ge
 80a2278:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a227c:	4329      	orrge	r1, r5
 80a227e:	bd30      	popge	{r4, r5, pc}
 80a2280:	ea6f 0404 	mvn.w	r4, r4
 80a2284:	3c1f      	subs	r4, #31
 80a2286:	da1c      	bge.n	80a22c2 <__adddf3+0x1d2>
 80a2288:	340c      	adds	r4, #12
 80a228a:	dc0e      	bgt.n	80a22aa <__adddf3+0x1ba>
 80a228c:	f104 0414 	add.w	r4, r4, #20
 80a2290:	f1c4 0220 	rsb	r2, r4, #32
 80a2294:	fa20 f004 	lsr.w	r0, r0, r4
 80a2298:	fa01 f302 	lsl.w	r3, r1, r2
 80a229c:	ea40 0003 	orr.w	r0, r0, r3
 80a22a0:	fa21 f304 	lsr.w	r3, r1, r4
 80a22a4:	ea45 0103 	orr.w	r1, r5, r3
 80a22a8:	bd30      	pop	{r4, r5, pc}
 80a22aa:	f1c4 040c 	rsb	r4, r4, #12
 80a22ae:	f1c4 0220 	rsb	r2, r4, #32
 80a22b2:	fa20 f002 	lsr.w	r0, r0, r2
 80a22b6:	fa01 f304 	lsl.w	r3, r1, r4
 80a22ba:	ea40 0003 	orr.w	r0, r0, r3
 80a22be:	4629      	mov	r1, r5
 80a22c0:	bd30      	pop	{r4, r5, pc}
 80a22c2:	fa21 f004 	lsr.w	r0, r1, r4
 80a22c6:	4629      	mov	r1, r5
 80a22c8:	bd30      	pop	{r4, r5, pc}
 80a22ca:	f094 0f00 	teq	r4, #0
 80a22ce:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a22d2:	bf06      	itte	eq
 80a22d4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a22d8:	3401      	addeq	r4, #1
 80a22da:	3d01      	subne	r5, #1
 80a22dc:	e74e      	b.n	80a217c <__adddf3+0x8c>
 80a22de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a22e2:	bf18      	it	ne
 80a22e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a22e8:	d029      	beq.n	80a233e <__adddf3+0x24e>
 80a22ea:	ea94 0f05 	teq	r4, r5
 80a22ee:	bf08      	it	eq
 80a22f0:	ea90 0f02 	teqeq	r0, r2
 80a22f4:	d005      	beq.n	80a2302 <__adddf3+0x212>
 80a22f6:	ea54 0c00 	orrs.w	ip, r4, r0
 80a22fa:	bf04      	itt	eq
 80a22fc:	4619      	moveq	r1, r3
 80a22fe:	4610      	moveq	r0, r2
 80a2300:	bd30      	pop	{r4, r5, pc}
 80a2302:	ea91 0f03 	teq	r1, r3
 80a2306:	bf1e      	ittt	ne
 80a2308:	2100      	movne	r1, #0
 80a230a:	2000      	movne	r0, #0
 80a230c:	bd30      	popne	{r4, r5, pc}
 80a230e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a2312:	d105      	bne.n	80a2320 <__adddf3+0x230>
 80a2314:	0040      	lsls	r0, r0, #1
 80a2316:	4149      	adcs	r1, r1
 80a2318:	bf28      	it	cs
 80a231a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a231e:	bd30      	pop	{r4, r5, pc}
 80a2320:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a2324:	bf3c      	itt	cc
 80a2326:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a232a:	bd30      	popcc	{r4, r5, pc}
 80a232c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a2330:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a2334:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a2338:	f04f 0000 	mov.w	r0, #0
 80a233c:	bd30      	pop	{r4, r5, pc}
 80a233e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a2342:	bf1a      	itte	ne
 80a2344:	4619      	movne	r1, r3
 80a2346:	4610      	movne	r0, r2
 80a2348:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a234c:	bf1c      	itt	ne
 80a234e:	460b      	movne	r3, r1
 80a2350:	4602      	movne	r2, r0
 80a2352:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a2356:	bf06      	itte	eq
 80a2358:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a235c:	ea91 0f03 	teqeq	r1, r3
 80a2360:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a2364:	bd30      	pop	{r4, r5, pc}
 80a2366:	bf00      	nop

080a2368 <__aeabi_ui2d>:
 80a2368:	f090 0f00 	teq	r0, #0
 80a236c:	bf04      	itt	eq
 80a236e:	2100      	moveq	r1, #0
 80a2370:	4770      	bxeq	lr
 80a2372:	b530      	push	{r4, r5, lr}
 80a2374:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a2378:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a237c:	f04f 0500 	mov.w	r5, #0
 80a2380:	f04f 0100 	mov.w	r1, #0
 80a2384:	e750      	b.n	80a2228 <__adddf3+0x138>
 80a2386:	bf00      	nop

080a2388 <__aeabi_i2d>:
 80a2388:	f090 0f00 	teq	r0, #0
 80a238c:	bf04      	itt	eq
 80a238e:	2100      	moveq	r1, #0
 80a2390:	4770      	bxeq	lr
 80a2392:	b530      	push	{r4, r5, lr}
 80a2394:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a2398:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a239c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a23a0:	bf48      	it	mi
 80a23a2:	4240      	negmi	r0, r0
 80a23a4:	f04f 0100 	mov.w	r1, #0
 80a23a8:	e73e      	b.n	80a2228 <__adddf3+0x138>
 80a23aa:	bf00      	nop

080a23ac <__aeabi_f2d>:
 80a23ac:	0042      	lsls	r2, r0, #1
 80a23ae:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a23b2:	ea4f 0131 	mov.w	r1, r1, rrx
 80a23b6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a23ba:	bf1f      	itttt	ne
 80a23bc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a23c0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a23c4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a23c8:	4770      	bxne	lr
 80a23ca:	f092 0f00 	teq	r2, #0
 80a23ce:	bf14      	ite	ne
 80a23d0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a23d4:	4770      	bxeq	lr
 80a23d6:	b530      	push	{r4, r5, lr}
 80a23d8:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a23dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a23e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a23e4:	e720      	b.n	80a2228 <__adddf3+0x138>
 80a23e6:	bf00      	nop

080a23e8 <__aeabi_ul2d>:
 80a23e8:	ea50 0201 	orrs.w	r2, r0, r1
 80a23ec:	bf08      	it	eq
 80a23ee:	4770      	bxeq	lr
 80a23f0:	b530      	push	{r4, r5, lr}
 80a23f2:	f04f 0500 	mov.w	r5, #0
 80a23f6:	e00a      	b.n	80a240e <__aeabi_l2d+0x16>

080a23f8 <__aeabi_l2d>:
 80a23f8:	ea50 0201 	orrs.w	r2, r0, r1
 80a23fc:	bf08      	it	eq
 80a23fe:	4770      	bxeq	lr
 80a2400:	b530      	push	{r4, r5, lr}
 80a2402:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a2406:	d502      	bpl.n	80a240e <__aeabi_l2d+0x16>
 80a2408:	4240      	negs	r0, r0
 80a240a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a240e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a2412:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a2416:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a241a:	f43f aedc 	beq.w	80a21d6 <__adddf3+0xe6>
 80a241e:	f04f 0203 	mov.w	r2, #3
 80a2422:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a2426:	bf18      	it	ne
 80a2428:	3203      	addne	r2, #3
 80a242a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a242e:	bf18      	it	ne
 80a2430:	3203      	addne	r2, #3
 80a2432:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a2436:	f1c2 0320 	rsb	r3, r2, #32
 80a243a:	fa00 fc03 	lsl.w	ip, r0, r3
 80a243e:	fa20 f002 	lsr.w	r0, r0, r2
 80a2442:	fa01 fe03 	lsl.w	lr, r1, r3
 80a2446:	ea40 000e 	orr.w	r0, r0, lr
 80a244a:	fa21 f102 	lsr.w	r1, r1, r2
 80a244e:	4414      	add	r4, r2
 80a2450:	e6c1      	b.n	80a21d6 <__adddf3+0xe6>
 80a2452:	bf00      	nop

080a2454 <__aeabi_dmul>:
 80a2454:	b570      	push	{r4, r5, r6, lr}
 80a2456:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a245a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a245e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a2462:	bf1d      	ittte	ne
 80a2464:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a2468:	ea94 0f0c 	teqne	r4, ip
 80a246c:	ea95 0f0c 	teqne	r5, ip
 80a2470:	f000 f8de 	bleq	80a2630 <__aeabi_dmul+0x1dc>
 80a2474:	442c      	add	r4, r5
 80a2476:	ea81 0603 	eor.w	r6, r1, r3
 80a247a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80a247e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80a2482:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80a2486:	bf18      	it	ne
 80a2488:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80a248c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a2490:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a2494:	d038      	beq.n	80a2508 <__aeabi_dmul+0xb4>
 80a2496:	fba0 ce02 	umull	ip, lr, r0, r2
 80a249a:	f04f 0500 	mov.w	r5, #0
 80a249e:	fbe1 e502 	umlal	lr, r5, r1, r2
 80a24a2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80a24a6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80a24aa:	f04f 0600 	mov.w	r6, #0
 80a24ae:	fbe1 5603 	umlal	r5, r6, r1, r3
 80a24b2:	f09c 0f00 	teq	ip, #0
 80a24b6:	bf18      	it	ne
 80a24b8:	f04e 0e01 	orrne.w	lr, lr, #1
 80a24bc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80a24c0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a24c4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80a24c8:	d204      	bcs.n	80a24d4 <__aeabi_dmul+0x80>
 80a24ca:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80a24ce:	416d      	adcs	r5, r5
 80a24d0:	eb46 0606 	adc.w	r6, r6, r6
 80a24d4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80a24d8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80a24dc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80a24e0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80a24e4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80a24e8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a24ec:	bf88      	it	hi
 80a24ee:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a24f2:	d81e      	bhi.n	80a2532 <__aeabi_dmul+0xde>
 80a24f4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80a24f8:	bf08      	it	eq
 80a24fa:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80a24fe:	f150 0000 	adcs.w	r0, r0, #0
 80a2502:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a2506:	bd70      	pop	{r4, r5, r6, pc}
 80a2508:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80a250c:	ea46 0101 	orr.w	r1, r6, r1
 80a2510:	ea40 0002 	orr.w	r0, r0, r2
 80a2514:	ea81 0103 	eor.w	r1, r1, r3
 80a2518:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80a251c:	bfc2      	ittt	gt
 80a251e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a2522:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a2526:	bd70      	popgt	{r4, r5, r6, pc}
 80a2528:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a252c:	f04f 0e00 	mov.w	lr, #0
 80a2530:	3c01      	subs	r4, #1
 80a2532:	f300 80ab 	bgt.w	80a268c <__aeabi_dmul+0x238>
 80a2536:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80a253a:	bfde      	ittt	le
 80a253c:	2000      	movle	r0, #0
 80a253e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80a2542:	bd70      	pople	{r4, r5, r6, pc}
 80a2544:	f1c4 0400 	rsb	r4, r4, #0
 80a2548:	3c20      	subs	r4, #32
 80a254a:	da35      	bge.n	80a25b8 <__aeabi_dmul+0x164>
 80a254c:	340c      	adds	r4, #12
 80a254e:	dc1b      	bgt.n	80a2588 <__aeabi_dmul+0x134>
 80a2550:	f104 0414 	add.w	r4, r4, #20
 80a2554:	f1c4 0520 	rsb	r5, r4, #32
 80a2558:	fa00 f305 	lsl.w	r3, r0, r5
 80a255c:	fa20 f004 	lsr.w	r0, r0, r4
 80a2560:	fa01 f205 	lsl.w	r2, r1, r5
 80a2564:	ea40 0002 	orr.w	r0, r0, r2
 80a2568:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80a256c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a2570:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a2574:	fa21 f604 	lsr.w	r6, r1, r4
 80a2578:	eb42 0106 	adc.w	r1, r2, r6
 80a257c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a2580:	bf08      	it	eq
 80a2582:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a2586:	bd70      	pop	{r4, r5, r6, pc}
 80a2588:	f1c4 040c 	rsb	r4, r4, #12
 80a258c:	f1c4 0520 	rsb	r5, r4, #32
 80a2590:	fa00 f304 	lsl.w	r3, r0, r4
 80a2594:	fa20 f005 	lsr.w	r0, r0, r5
 80a2598:	fa01 f204 	lsl.w	r2, r1, r4
 80a259c:	ea40 0002 	orr.w	r0, r0, r2
 80a25a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a25a4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a25a8:	f141 0100 	adc.w	r1, r1, #0
 80a25ac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a25b0:	bf08      	it	eq
 80a25b2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a25b6:	bd70      	pop	{r4, r5, r6, pc}
 80a25b8:	f1c4 0520 	rsb	r5, r4, #32
 80a25bc:	fa00 f205 	lsl.w	r2, r0, r5
 80a25c0:	ea4e 0e02 	orr.w	lr, lr, r2
 80a25c4:	fa20 f304 	lsr.w	r3, r0, r4
 80a25c8:	fa01 f205 	lsl.w	r2, r1, r5
 80a25cc:	ea43 0302 	orr.w	r3, r3, r2
 80a25d0:	fa21 f004 	lsr.w	r0, r1, r4
 80a25d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a25d8:	fa21 f204 	lsr.w	r2, r1, r4
 80a25dc:	ea20 0002 	bic.w	r0, r0, r2
 80a25e0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80a25e4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a25e8:	bf08      	it	eq
 80a25ea:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a25ee:	bd70      	pop	{r4, r5, r6, pc}
 80a25f0:	f094 0f00 	teq	r4, #0
 80a25f4:	d10f      	bne.n	80a2616 <__aeabi_dmul+0x1c2>
 80a25f6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80a25fa:	0040      	lsls	r0, r0, #1
 80a25fc:	eb41 0101 	adc.w	r1, r1, r1
 80a2600:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a2604:	bf08      	it	eq
 80a2606:	3c01      	subeq	r4, #1
 80a2608:	d0f7      	beq.n	80a25fa <__aeabi_dmul+0x1a6>
 80a260a:	ea41 0106 	orr.w	r1, r1, r6
 80a260e:	f095 0f00 	teq	r5, #0
 80a2612:	bf18      	it	ne
 80a2614:	4770      	bxne	lr
 80a2616:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80a261a:	0052      	lsls	r2, r2, #1
 80a261c:	eb43 0303 	adc.w	r3, r3, r3
 80a2620:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80a2624:	bf08      	it	eq
 80a2626:	3d01      	subeq	r5, #1
 80a2628:	d0f7      	beq.n	80a261a <__aeabi_dmul+0x1c6>
 80a262a:	ea43 0306 	orr.w	r3, r3, r6
 80a262e:	4770      	bx	lr
 80a2630:	ea94 0f0c 	teq	r4, ip
 80a2634:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a2638:	bf18      	it	ne
 80a263a:	ea95 0f0c 	teqne	r5, ip
 80a263e:	d00c      	beq.n	80a265a <__aeabi_dmul+0x206>
 80a2640:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a2644:	bf18      	it	ne
 80a2646:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a264a:	d1d1      	bne.n	80a25f0 <__aeabi_dmul+0x19c>
 80a264c:	ea81 0103 	eor.w	r1, r1, r3
 80a2650:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a2654:	f04f 0000 	mov.w	r0, #0
 80a2658:	bd70      	pop	{r4, r5, r6, pc}
 80a265a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a265e:	bf06      	itte	eq
 80a2660:	4610      	moveq	r0, r2
 80a2662:	4619      	moveq	r1, r3
 80a2664:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a2668:	d019      	beq.n	80a269e <__aeabi_dmul+0x24a>
 80a266a:	ea94 0f0c 	teq	r4, ip
 80a266e:	d102      	bne.n	80a2676 <__aeabi_dmul+0x222>
 80a2670:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80a2674:	d113      	bne.n	80a269e <__aeabi_dmul+0x24a>
 80a2676:	ea95 0f0c 	teq	r5, ip
 80a267a:	d105      	bne.n	80a2688 <__aeabi_dmul+0x234>
 80a267c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80a2680:	bf1c      	itt	ne
 80a2682:	4610      	movne	r0, r2
 80a2684:	4619      	movne	r1, r3
 80a2686:	d10a      	bne.n	80a269e <__aeabi_dmul+0x24a>
 80a2688:	ea81 0103 	eor.w	r1, r1, r3
 80a268c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a2690:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a2694:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a2698:	f04f 0000 	mov.w	r0, #0
 80a269c:	bd70      	pop	{r4, r5, r6, pc}
 80a269e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a26a2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80a26a6:	bd70      	pop	{r4, r5, r6, pc}

080a26a8 <__aeabi_ddiv>:
 80a26a8:	b570      	push	{r4, r5, r6, lr}
 80a26aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a26ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a26b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a26b6:	bf1d      	ittte	ne
 80a26b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a26bc:	ea94 0f0c 	teqne	r4, ip
 80a26c0:	ea95 0f0c 	teqne	r5, ip
 80a26c4:	f000 f8a7 	bleq	80a2816 <__aeabi_ddiv+0x16e>
 80a26c8:	eba4 0405 	sub.w	r4, r4, r5
 80a26cc:	ea81 0e03 	eor.w	lr, r1, r3
 80a26d0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a26d4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a26d8:	f000 8088 	beq.w	80a27ec <__aeabi_ddiv+0x144>
 80a26dc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a26e0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80a26e4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80a26e8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80a26ec:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80a26f0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80a26f4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80a26f8:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80a26fc:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80a2700:	429d      	cmp	r5, r3
 80a2702:	bf08      	it	eq
 80a2704:	4296      	cmpeq	r6, r2
 80a2706:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80a270a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80a270e:	d202      	bcs.n	80a2716 <__aeabi_ddiv+0x6e>
 80a2710:	085b      	lsrs	r3, r3, #1
 80a2712:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2716:	1ab6      	subs	r6, r6, r2
 80a2718:	eb65 0503 	sbc.w	r5, r5, r3
 80a271c:	085b      	lsrs	r3, r3, #1
 80a271e:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2722:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80a2726:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80a272a:	ebb6 0e02 	subs.w	lr, r6, r2
 80a272e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a2732:	bf22      	ittt	cs
 80a2734:	1ab6      	subcs	r6, r6, r2
 80a2736:	4675      	movcs	r5, lr
 80a2738:	ea40 000c 	orrcs.w	r0, r0, ip
 80a273c:	085b      	lsrs	r3, r3, #1
 80a273e:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2742:	ebb6 0e02 	subs.w	lr, r6, r2
 80a2746:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a274a:	bf22      	ittt	cs
 80a274c:	1ab6      	subcs	r6, r6, r2
 80a274e:	4675      	movcs	r5, lr
 80a2750:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a2754:	085b      	lsrs	r3, r3, #1
 80a2756:	ea4f 0232 	mov.w	r2, r2, rrx
 80a275a:	ebb6 0e02 	subs.w	lr, r6, r2
 80a275e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a2762:	bf22      	ittt	cs
 80a2764:	1ab6      	subcs	r6, r6, r2
 80a2766:	4675      	movcs	r5, lr
 80a2768:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a276c:	085b      	lsrs	r3, r3, #1
 80a276e:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2772:	ebb6 0e02 	subs.w	lr, r6, r2
 80a2776:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a277a:	bf22      	ittt	cs
 80a277c:	1ab6      	subcs	r6, r6, r2
 80a277e:	4675      	movcs	r5, lr
 80a2780:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a2784:	ea55 0e06 	orrs.w	lr, r5, r6
 80a2788:	d018      	beq.n	80a27bc <__aeabi_ddiv+0x114>
 80a278a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80a278e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80a2792:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80a2796:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80a279a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80a279e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80a27a2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80a27a6:	d1c0      	bne.n	80a272a <__aeabi_ddiv+0x82>
 80a27a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a27ac:	d10b      	bne.n	80a27c6 <__aeabi_ddiv+0x11e>
 80a27ae:	ea41 0100 	orr.w	r1, r1, r0
 80a27b2:	f04f 0000 	mov.w	r0, #0
 80a27b6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80a27ba:	e7b6      	b.n	80a272a <__aeabi_ddiv+0x82>
 80a27bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a27c0:	bf04      	itt	eq
 80a27c2:	4301      	orreq	r1, r0
 80a27c4:	2000      	moveq	r0, #0
 80a27c6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a27ca:	bf88      	it	hi
 80a27cc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a27d0:	f63f aeaf 	bhi.w	80a2532 <__aeabi_dmul+0xde>
 80a27d4:	ebb5 0c03 	subs.w	ip, r5, r3
 80a27d8:	bf04      	itt	eq
 80a27da:	ebb6 0c02 	subseq.w	ip, r6, r2
 80a27de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a27e2:	f150 0000 	adcs.w	r0, r0, #0
 80a27e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a27ea:	bd70      	pop	{r4, r5, r6, pc}
 80a27ec:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80a27f0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80a27f4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80a27f8:	bfc2      	ittt	gt
 80a27fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a27fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a2802:	bd70      	popgt	{r4, r5, r6, pc}
 80a2804:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a2808:	f04f 0e00 	mov.w	lr, #0
 80a280c:	3c01      	subs	r4, #1
 80a280e:	e690      	b.n	80a2532 <__aeabi_dmul+0xde>
 80a2810:	ea45 0e06 	orr.w	lr, r5, r6
 80a2814:	e68d      	b.n	80a2532 <__aeabi_dmul+0xde>
 80a2816:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a281a:	ea94 0f0c 	teq	r4, ip
 80a281e:	bf08      	it	eq
 80a2820:	ea95 0f0c 	teqeq	r5, ip
 80a2824:	f43f af3b 	beq.w	80a269e <__aeabi_dmul+0x24a>
 80a2828:	ea94 0f0c 	teq	r4, ip
 80a282c:	d10a      	bne.n	80a2844 <__aeabi_ddiv+0x19c>
 80a282e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a2832:	f47f af34 	bne.w	80a269e <__aeabi_dmul+0x24a>
 80a2836:	ea95 0f0c 	teq	r5, ip
 80a283a:	f47f af25 	bne.w	80a2688 <__aeabi_dmul+0x234>
 80a283e:	4610      	mov	r0, r2
 80a2840:	4619      	mov	r1, r3
 80a2842:	e72c      	b.n	80a269e <__aeabi_dmul+0x24a>
 80a2844:	ea95 0f0c 	teq	r5, ip
 80a2848:	d106      	bne.n	80a2858 <__aeabi_ddiv+0x1b0>
 80a284a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a284e:	f43f aefd 	beq.w	80a264c <__aeabi_dmul+0x1f8>
 80a2852:	4610      	mov	r0, r2
 80a2854:	4619      	mov	r1, r3
 80a2856:	e722      	b.n	80a269e <__aeabi_dmul+0x24a>
 80a2858:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a285c:	bf18      	it	ne
 80a285e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a2862:	f47f aec5 	bne.w	80a25f0 <__aeabi_dmul+0x19c>
 80a2866:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80a286a:	f47f af0d 	bne.w	80a2688 <__aeabi_dmul+0x234>
 80a286e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80a2872:	f47f aeeb 	bne.w	80a264c <__aeabi_dmul+0x1f8>
 80a2876:	e712      	b.n	80a269e <__aeabi_dmul+0x24a>

080a2878 <__gedf2>:
 80a2878:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80a287c:	e006      	b.n	80a288c <__cmpdf2+0x4>
 80a287e:	bf00      	nop

080a2880 <__ledf2>:
 80a2880:	f04f 0c01 	mov.w	ip, #1
 80a2884:	e002      	b.n	80a288c <__cmpdf2+0x4>
 80a2886:	bf00      	nop

080a2888 <__cmpdf2>:
 80a2888:	f04f 0c01 	mov.w	ip, #1
 80a288c:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a2890:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a2894:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a2898:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a289c:	bf18      	it	ne
 80a289e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80a28a2:	d01b      	beq.n	80a28dc <__cmpdf2+0x54>
 80a28a4:	b001      	add	sp, #4
 80a28a6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80a28aa:	bf0c      	ite	eq
 80a28ac:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80a28b0:	ea91 0f03 	teqne	r1, r3
 80a28b4:	bf02      	ittt	eq
 80a28b6:	ea90 0f02 	teqeq	r0, r2
 80a28ba:	2000      	moveq	r0, #0
 80a28bc:	4770      	bxeq	lr
 80a28be:	f110 0f00 	cmn.w	r0, #0
 80a28c2:	ea91 0f03 	teq	r1, r3
 80a28c6:	bf58      	it	pl
 80a28c8:	4299      	cmppl	r1, r3
 80a28ca:	bf08      	it	eq
 80a28cc:	4290      	cmpeq	r0, r2
 80a28ce:	bf2c      	ite	cs
 80a28d0:	17d8      	asrcs	r0, r3, #31
 80a28d2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80a28d6:	f040 0001 	orr.w	r0, r0, #1
 80a28da:	4770      	bx	lr
 80a28dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a28e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a28e4:	d102      	bne.n	80a28ec <__cmpdf2+0x64>
 80a28e6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a28ea:	d107      	bne.n	80a28fc <__cmpdf2+0x74>
 80a28ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a28f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a28f4:	d1d6      	bne.n	80a28a4 <__cmpdf2+0x1c>
 80a28f6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a28fa:	d0d3      	beq.n	80a28a4 <__cmpdf2+0x1c>
 80a28fc:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a2900:	4770      	bx	lr
 80a2902:	bf00      	nop

080a2904 <__aeabi_cdrcmple>:
 80a2904:	4684      	mov	ip, r0
 80a2906:	4610      	mov	r0, r2
 80a2908:	4662      	mov	r2, ip
 80a290a:	468c      	mov	ip, r1
 80a290c:	4619      	mov	r1, r3
 80a290e:	4663      	mov	r3, ip
 80a2910:	e000      	b.n	80a2914 <__aeabi_cdcmpeq>
 80a2912:	bf00      	nop

080a2914 <__aeabi_cdcmpeq>:
 80a2914:	b501      	push	{r0, lr}
 80a2916:	f7ff ffb7 	bl	80a2888 <__cmpdf2>
 80a291a:	2800      	cmp	r0, #0
 80a291c:	bf48      	it	mi
 80a291e:	f110 0f00 	cmnmi.w	r0, #0
 80a2922:	bd01      	pop	{r0, pc}

080a2924 <__aeabi_dcmpeq>:
 80a2924:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2928:	f7ff fff4 	bl	80a2914 <__aeabi_cdcmpeq>
 80a292c:	bf0c      	ite	eq
 80a292e:	2001      	moveq	r0, #1
 80a2930:	2000      	movne	r0, #0
 80a2932:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2936:	bf00      	nop

080a2938 <__aeabi_dcmplt>:
 80a2938:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a293c:	f7ff ffea 	bl	80a2914 <__aeabi_cdcmpeq>
 80a2940:	bf34      	ite	cc
 80a2942:	2001      	movcc	r0, #1
 80a2944:	2000      	movcs	r0, #0
 80a2946:	f85d fb08 	ldr.w	pc, [sp], #8
 80a294a:	bf00      	nop

080a294c <__aeabi_dcmple>:
 80a294c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2950:	f7ff ffe0 	bl	80a2914 <__aeabi_cdcmpeq>
 80a2954:	bf94      	ite	ls
 80a2956:	2001      	movls	r0, #1
 80a2958:	2000      	movhi	r0, #0
 80a295a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a295e:	bf00      	nop

080a2960 <__aeabi_dcmpge>:
 80a2960:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2964:	f7ff ffce 	bl	80a2904 <__aeabi_cdrcmple>
 80a2968:	bf94      	ite	ls
 80a296a:	2001      	movls	r0, #1
 80a296c:	2000      	movhi	r0, #0
 80a296e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2972:	bf00      	nop

080a2974 <__aeabi_dcmpgt>:
 80a2974:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2978:	f7ff ffc4 	bl	80a2904 <__aeabi_cdrcmple>
 80a297c:	bf34      	ite	cc
 80a297e:	2001      	movcc	r0, #1
 80a2980:	2000      	movcs	r0, #0
 80a2982:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2986:	bf00      	nop

080a2988 <__aeabi_d2iz>:
 80a2988:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a298c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a2990:	d215      	bcs.n	80a29be <__aeabi_d2iz+0x36>
 80a2992:	d511      	bpl.n	80a29b8 <__aeabi_d2iz+0x30>
 80a2994:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a2998:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a299c:	d912      	bls.n	80a29c4 <__aeabi_d2iz+0x3c>
 80a299e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a29a2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a29a6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a29aa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a29ae:	fa23 f002 	lsr.w	r0, r3, r2
 80a29b2:	bf18      	it	ne
 80a29b4:	4240      	negne	r0, r0
 80a29b6:	4770      	bx	lr
 80a29b8:	f04f 0000 	mov.w	r0, #0
 80a29bc:	4770      	bx	lr
 80a29be:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a29c2:	d105      	bne.n	80a29d0 <__aeabi_d2iz+0x48>
 80a29c4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80a29c8:	bf08      	it	eq
 80a29ca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a29ce:	4770      	bx	lr
 80a29d0:	f04f 0000 	mov.w	r0, #0
 80a29d4:	4770      	bx	lr
 80a29d6:	bf00      	nop

080a29d8 <__aeabi_d2uiz>:
 80a29d8:	004a      	lsls	r2, r1, #1
 80a29da:	d211      	bcs.n	80a2a00 <__aeabi_d2uiz+0x28>
 80a29dc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a29e0:	d211      	bcs.n	80a2a06 <__aeabi_d2uiz+0x2e>
 80a29e2:	d50d      	bpl.n	80a2a00 <__aeabi_d2uiz+0x28>
 80a29e4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a29e8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a29ec:	d40e      	bmi.n	80a2a0c <__aeabi_d2uiz+0x34>
 80a29ee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a29f2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a29f6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a29fa:	fa23 f002 	lsr.w	r0, r3, r2
 80a29fe:	4770      	bx	lr
 80a2a00:	f04f 0000 	mov.w	r0, #0
 80a2a04:	4770      	bx	lr
 80a2a06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a2a0a:	d102      	bne.n	80a2a12 <__aeabi_d2uiz+0x3a>
 80a2a0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a2a10:	4770      	bx	lr
 80a2a12:	f04f 0000 	mov.w	r0, #0
 80a2a16:	4770      	bx	lr

080a2a18 <__aeabi_d2f>:
 80a2a18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a2a1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80a2a20:	bf24      	itt	cs
 80a2a22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80a2a26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80a2a2a:	d90d      	bls.n	80a2a48 <__aeabi_d2f+0x30>
 80a2a2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a2a30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80a2a34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80a2a38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80a2a3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80a2a40:	bf08      	it	eq
 80a2a42:	f020 0001 	biceq.w	r0, r0, #1
 80a2a46:	4770      	bx	lr
 80a2a48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80a2a4c:	d121      	bne.n	80a2a92 <__aeabi_d2f+0x7a>
 80a2a4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80a2a52:	bfbc      	itt	lt
 80a2a54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80a2a58:	4770      	bxlt	lr
 80a2a5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a2a5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80a2a62:	f1c2 0218 	rsb	r2, r2, #24
 80a2a66:	f1c2 0c20 	rsb	ip, r2, #32
 80a2a6a:	fa10 f30c 	lsls.w	r3, r0, ip
 80a2a6e:	fa20 f002 	lsr.w	r0, r0, r2
 80a2a72:	bf18      	it	ne
 80a2a74:	f040 0001 	orrne.w	r0, r0, #1
 80a2a78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a2a7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80a2a80:	fa03 fc0c 	lsl.w	ip, r3, ip
 80a2a84:	ea40 000c 	orr.w	r0, r0, ip
 80a2a88:	fa23 f302 	lsr.w	r3, r3, r2
 80a2a8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80a2a90:	e7cc      	b.n	80a2a2c <__aeabi_d2f+0x14>
 80a2a92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80a2a96:	d107      	bne.n	80a2aa8 <__aeabi_d2f+0x90>
 80a2a98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80a2a9c:	bf1e      	ittt	ne
 80a2a9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80a2aa2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80a2aa6:	4770      	bxne	lr
 80a2aa8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80a2aac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a2ab0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a2ab4:	4770      	bx	lr
 80a2ab6:	bf00      	nop

080a2ab8 <__aeabi_fmul>:
 80a2ab8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a2abc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a2ac0:	bf1e      	ittt	ne
 80a2ac2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a2ac6:	ea92 0f0c 	teqne	r2, ip
 80a2aca:	ea93 0f0c 	teqne	r3, ip
 80a2ace:	d06f      	beq.n	80a2bb0 <__aeabi_fmul+0xf8>
 80a2ad0:	441a      	add	r2, r3
 80a2ad2:	ea80 0c01 	eor.w	ip, r0, r1
 80a2ad6:	0240      	lsls	r0, r0, #9
 80a2ad8:	bf18      	it	ne
 80a2ada:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80a2ade:	d01e      	beq.n	80a2b1e <__aeabi_fmul+0x66>
 80a2ae0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80a2ae4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80a2ae8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80a2aec:	fba0 3101 	umull	r3, r1, r0, r1
 80a2af0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a2af4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80a2af8:	bf3e      	ittt	cc
 80a2afa:	0049      	lslcc	r1, r1, #1
 80a2afc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80a2b00:	005b      	lslcc	r3, r3, #1
 80a2b02:	ea40 0001 	orr.w	r0, r0, r1
 80a2b06:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80a2b0a:	2afd      	cmp	r2, #253	; 0xfd
 80a2b0c:	d81d      	bhi.n	80a2b4a <__aeabi_fmul+0x92>
 80a2b0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a2b12:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a2b16:	bf08      	it	eq
 80a2b18:	f020 0001 	biceq.w	r0, r0, #1
 80a2b1c:	4770      	bx	lr
 80a2b1e:	f090 0f00 	teq	r0, #0
 80a2b22:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a2b26:	bf08      	it	eq
 80a2b28:	0249      	lsleq	r1, r1, #9
 80a2b2a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a2b2e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80a2b32:	3a7f      	subs	r2, #127	; 0x7f
 80a2b34:	bfc2      	ittt	gt
 80a2b36:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a2b3a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a2b3e:	4770      	bxgt	lr
 80a2b40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a2b44:	f04f 0300 	mov.w	r3, #0
 80a2b48:	3a01      	subs	r2, #1
 80a2b4a:	dc5d      	bgt.n	80a2c08 <__aeabi_fmul+0x150>
 80a2b4c:	f112 0f19 	cmn.w	r2, #25
 80a2b50:	bfdc      	itt	le
 80a2b52:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80a2b56:	4770      	bxle	lr
 80a2b58:	f1c2 0200 	rsb	r2, r2, #0
 80a2b5c:	0041      	lsls	r1, r0, #1
 80a2b5e:	fa21 f102 	lsr.w	r1, r1, r2
 80a2b62:	f1c2 0220 	rsb	r2, r2, #32
 80a2b66:	fa00 fc02 	lsl.w	ip, r0, r2
 80a2b6a:	ea5f 0031 	movs.w	r0, r1, rrx
 80a2b6e:	f140 0000 	adc.w	r0, r0, #0
 80a2b72:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80a2b76:	bf08      	it	eq
 80a2b78:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a2b7c:	4770      	bx	lr
 80a2b7e:	f092 0f00 	teq	r2, #0
 80a2b82:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a2b86:	bf02      	ittt	eq
 80a2b88:	0040      	lsleq	r0, r0, #1
 80a2b8a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a2b8e:	3a01      	subeq	r2, #1
 80a2b90:	d0f9      	beq.n	80a2b86 <__aeabi_fmul+0xce>
 80a2b92:	ea40 000c 	orr.w	r0, r0, ip
 80a2b96:	f093 0f00 	teq	r3, #0
 80a2b9a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a2b9e:	bf02      	ittt	eq
 80a2ba0:	0049      	lsleq	r1, r1, #1
 80a2ba2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a2ba6:	3b01      	subeq	r3, #1
 80a2ba8:	d0f9      	beq.n	80a2b9e <__aeabi_fmul+0xe6>
 80a2baa:	ea41 010c 	orr.w	r1, r1, ip
 80a2bae:	e78f      	b.n	80a2ad0 <__aeabi_fmul+0x18>
 80a2bb0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a2bb4:	ea92 0f0c 	teq	r2, ip
 80a2bb8:	bf18      	it	ne
 80a2bba:	ea93 0f0c 	teqne	r3, ip
 80a2bbe:	d00a      	beq.n	80a2bd6 <__aeabi_fmul+0x11e>
 80a2bc0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a2bc4:	bf18      	it	ne
 80a2bc6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a2bca:	d1d8      	bne.n	80a2b7e <__aeabi_fmul+0xc6>
 80a2bcc:	ea80 0001 	eor.w	r0, r0, r1
 80a2bd0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a2bd4:	4770      	bx	lr
 80a2bd6:	f090 0f00 	teq	r0, #0
 80a2bda:	bf17      	itett	ne
 80a2bdc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80a2be0:	4608      	moveq	r0, r1
 80a2be2:	f091 0f00 	teqne	r1, #0
 80a2be6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80a2bea:	d014      	beq.n	80a2c16 <__aeabi_fmul+0x15e>
 80a2bec:	ea92 0f0c 	teq	r2, ip
 80a2bf0:	d101      	bne.n	80a2bf6 <__aeabi_fmul+0x13e>
 80a2bf2:	0242      	lsls	r2, r0, #9
 80a2bf4:	d10f      	bne.n	80a2c16 <__aeabi_fmul+0x15e>
 80a2bf6:	ea93 0f0c 	teq	r3, ip
 80a2bfa:	d103      	bne.n	80a2c04 <__aeabi_fmul+0x14c>
 80a2bfc:	024b      	lsls	r3, r1, #9
 80a2bfe:	bf18      	it	ne
 80a2c00:	4608      	movne	r0, r1
 80a2c02:	d108      	bne.n	80a2c16 <__aeabi_fmul+0x15e>
 80a2c04:	ea80 0001 	eor.w	r0, r0, r1
 80a2c08:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a2c0c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a2c10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a2c14:	4770      	bx	lr
 80a2c16:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a2c1a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80a2c1e:	4770      	bx	lr

080a2c20 <__aeabi_fdiv>:
 80a2c20:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a2c24:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a2c28:	bf1e      	ittt	ne
 80a2c2a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a2c2e:	ea92 0f0c 	teqne	r2, ip
 80a2c32:	ea93 0f0c 	teqne	r3, ip
 80a2c36:	d069      	beq.n	80a2d0c <__aeabi_fdiv+0xec>
 80a2c38:	eba2 0203 	sub.w	r2, r2, r3
 80a2c3c:	ea80 0c01 	eor.w	ip, r0, r1
 80a2c40:	0249      	lsls	r1, r1, #9
 80a2c42:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80a2c46:	d037      	beq.n	80a2cb8 <__aeabi_fdiv+0x98>
 80a2c48:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80a2c4c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80a2c50:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80a2c54:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a2c58:	428b      	cmp	r3, r1
 80a2c5a:	bf38      	it	cc
 80a2c5c:	005b      	lslcc	r3, r3, #1
 80a2c5e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80a2c62:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80a2c66:	428b      	cmp	r3, r1
 80a2c68:	bf24      	itt	cs
 80a2c6a:	1a5b      	subcs	r3, r3, r1
 80a2c6c:	ea40 000c 	orrcs.w	r0, r0, ip
 80a2c70:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80a2c74:	bf24      	itt	cs
 80a2c76:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80a2c7a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a2c7e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80a2c82:	bf24      	itt	cs
 80a2c84:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80a2c88:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a2c8c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80a2c90:	bf24      	itt	cs
 80a2c92:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80a2c96:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a2c9a:	011b      	lsls	r3, r3, #4
 80a2c9c:	bf18      	it	ne
 80a2c9e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80a2ca2:	d1e0      	bne.n	80a2c66 <__aeabi_fdiv+0x46>
 80a2ca4:	2afd      	cmp	r2, #253	; 0xfd
 80a2ca6:	f63f af50 	bhi.w	80a2b4a <__aeabi_fmul+0x92>
 80a2caa:	428b      	cmp	r3, r1
 80a2cac:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a2cb0:	bf08      	it	eq
 80a2cb2:	f020 0001 	biceq.w	r0, r0, #1
 80a2cb6:	4770      	bx	lr
 80a2cb8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a2cbc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a2cc0:	327f      	adds	r2, #127	; 0x7f
 80a2cc2:	bfc2      	ittt	gt
 80a2cc4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a2cc8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a2ccc:	4770      	bxgt	lr
 80a2cce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a2cd2:	f04f 0300 	mov.w	r3, #0
 80a2cd6:	3a01      	subs	r2, #1
 80a2cd8:	e737      	b.n	80a2b4a <__aeabi_fmul+0x92>
 80a2cda:	f092 0f00 	teq	r2, #0
 80a2cde:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a2ce2:	bf02      	ittt	eq
 80a2ce4:	0040      	lsleq	r0, r0, #1
 80a2ce6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a2cea:	3a01      	subeq	r2, #1
 80a2cec:	d0f9      	beq.n	80a2ce2 <__aeabi_fdiv+0xc2>
 80a2cee:	ea40 000c 	orr.w	r0, r0, ip
 80a2cf2:	f093 0f00 	teq	r3, #0
 80a2cf6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a2cfa:	bf02      	ittt	eq
 80a2cfc:	0049      	lsleq	r1, r1, #1
 80a2cfe:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a2d02:	3b01      	subeq	r3, #1
 80a2d04:	d0f9      	beq.n	80a2cfa <__aeabi_fdiv+0xda>
 80a2d06:	ea41 010c 	orr.w	r1, r1, ip
 80a2d0a:	e795      	b.n	80a2c38 <__aeabi_fdiv+0x18>
 80a2d0c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a2d10:	ea92 0f0c 	teq	r2, ip
 80a2d14:	d108      	bne.n	80a2d28 <__aeabi_fdiv+0x108>
 80a2d16:	0242      	lsls	r2, r0, #9
 80a2d18:	f47f af7d 	bne.w	80a2c16 <__aeabi_fmul+0x15e>
 80a2d1c:	ea93 0f0c 	teq	r3, ip
 80a2d20:	f47f af70 	bne.w	80a2c04 <__aeabi_fmul+0x14c>
 80a2d24:	4608      	mov	r0, r1
 80a2d26:	e776      	b.n	80a2c16 <__aeabi_fmul+0x15e>
 80a2d28:	ea93 0f0c 	teq	r3, ip
 80a2d2c:	d104      	bne.n	80a2d38 <__aeabi_fdiv+0x118>
 80a2d2e:	024b      	lsls	r3, r1, #9
 80a2d30:	f43f af4c 	beq.w	80a2bcc <__aeabi_fmul+0x114>
 80a2d34:	4608      	mov	r0, r1
 80a2d36:	e76e      	b.n	80a2c16 <__aeabi_fmul+0x15e>
 80a2d38:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a2d3c:	bf18      	it	ne
 80a2d3e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a2d42:	d1ca      	bne.n	80a2cda <__aeabi_fdiv+0xba>
 80a2d44:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80a2d48:	f47f af5c 	bne.w	80a2c04 <__aeabi_fmul+0x14c>
 80a2d4c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80a2d50:	f47f af3c 	bne.w	80a2bcc <__aeabi_fmul+0x114>
 80a2d54:	e75f      	b.n	80a2c16 <__aeabi_fmul+0x15e>
 80a2d56:	bf00      	nop

080a2d58 <__gesf2>:
 80a2d58:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80a2d5c:	e006      	b.n	80a2d6c <__cmpsf2+0x4>
 80a2d5e:	bf00      	nop

080a2d60 <__lesf2>:
 80a2d60:	f04f 0c01 	mov.w	ip, #1
 80a2d64:	e002      	b.n	80a2d6c <__cmpsf2+0x4>
 80a2d66:	bf00      	nop

080a2d68 <__cmpsf2>:
 80a2d68:	f04f 0c01 	mov.w	ip, #1
 80a2d6c:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a2d70:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80a2d74:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a2d78:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a2d7c:	bf18      	it	ne
 80a2d7e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a2d82:	d011      	beq.n	80a2da8 <__cmpsf2+0x40>
 80a2d84:	b001      	add	sp, #4
 80a2d86:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80a2d8a:	bf18      	it	ne
 80a2d8c:	ea90 0f01 	teqne	r0, r1
 80a2d90:	bf58      	it	pl
 80a2d92:	ebb2 0003 	subspl.w	r0, r2, r3
 80a2d96:	bf88      	it	hi
 80a2d98:	17c8      	asrhi	r0, r1, #31
 80a2d9a:	bf38      	it	cc
 80a2d9c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80a2da0:	bf18      	it	ne
 80a2da2:	f040 0001 	orrne.w	r0, r0, #1
 80a2da6:	4770      	bx	lr
 80a2da8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a2dac:	d102      	bne.n	80a2db4 <__cmpsf2+0x4c>
 80a2dae:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80a2db2:	d105      	bne.n	80a2dc0 <__cmpsf2+0x58>
 80a2db4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80a2db8:	d1e4      	bne.n	80a2d84 <__cmpsf2+0x1c>
 80a2dba:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80a2dbe:	d0e1      	beq.n	80a2d84 <__cmpsf2+0x1c>
 80a2dc0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a2dc4:	4770      	bx	lr
 80a2dc6:	bf00      	nop

080a2dc8 <__aeabi_cfrcmple>:
 80a2dc8:	4684      	mov	ip, r0
 80a2dca:	4608      	mov	r0, r1
 80a2dcc:	4661      	mov	r1, ip
 80a2dce:	e7ff      	b.n	80a2dd0 <__aeabi_cfcmpeq>

080a2dd0 <__aeabi_cfcmpeq>:
 80a2dd0:	b50f      	push	{r0, r1, r2, r3, lr}
 80a2dd2:	f7ff ffc9 	bl	80a2d68 <__cmpsf2>
 80a2dd6:	2800      	cmp	r0, #0
 80a2dd8:	bf48      	it	mi
 80a2dda:	f110 0f00 	cmnmi.w	r0, #0
 80a2dde:	bd0f      	pop	{r0, r1, r2, r3, pc}

080a2de0 <__aeabi_fcmpeq>:
 80a2de0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2de4:	f7ff fff4 	bl	80a2dd0 <__aeabi_cfcmpeq>
 80a2de8:	bf0c      	ite	eq
 80a2dea:	2001      	moveq	r0, #1
 80a2dec:	2000      	movne	r0, #0
 80a2dee:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2df2:	bf00      	nop

080a2df4 <__aeabi_fcmplt>:
 80a2df4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2df8:	f7ff ffea 	bl	80a2dd0 <__aeabi_cfcmpeq>
 80a2dfc:	bf34      	ite	cc
 80a2dfe:	2001      	movcc	r0, #1
 80a2e00:	2000      	movcs	r0, #0
 80a2e02:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2e06:	bf00      	nop

080a2e08 <__aeabi_fcmple>:
 80a2e08:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2e0c:	f7ff ffe0 	bl	80a2dd0 <__aeabi_cfcmpeq>
 80a2e10:	bf94      	ite	ls
 80a2e12:	2001      	movls	r0, #1
 80a2e14:	2000      	movhi	r0, #0
 80a2e16:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2e1a:	bf00      	nop

080a2e1c <__aeabi_fcmpge>:
 80a2e1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2e20:	f7ff ffd2 	bl	80a2dc8 <__aeabi_cfrcmple>
 80a2e24:	bf94      	ite	ls
 80a2e26:	2001      	movls	r0, #1
 80a2e28:	2000      	movhi	r0, #0
 80a2e2a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2e2e:	bf00      	nop

080a2e30 <__aeabi_fcmpgt>:
 80a2e30:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2e34:	f7ff ffc8 	bl	80a2dc8 <__aeabi_cfrcmple>
 80a2e38:	bf34      	ite	cc
 80a2e3a:	2001      	movcc	r0, #1
 80a2e3c:	2000      	movcs	r0, #0
 80a2e3e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2e42:	bf00      	nop

080a2e44 <__aeabi_f2iz>:
 80a2e44:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80a2e48:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80a2e4c:	d30f      	bcc.n	80a2e6e <__aeabi_f2iz+0x2a>
 80a2e4e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80a2e52:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80a2e56:	d90d      	bls.n	80a2e74 <__aeabi_f2iz+0x30>
 80a2e58:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80a2e5c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a2e60:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a2e64:	fa23 f002 	lsr.w	r0, r3, r2
 80a2e68:	bf18      	it	ne
 80a2e6a:	4240      	negne	r0, r0
 80a2e6c:	4770      	bx	lr
 80a2e6e:	f04f 0000 	mov.w	r0, #0
 80a2e72:	4770      	bx	lr
 80a2e74:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80a2e78:	d101      	bne.n	80a2e7e <__aeabi_f2iz+0x3a>
 80a2e7a:	0242      	lsls	r2, r0, #9
 80a2e7c:	d105      	bne.n	80a2e8a <__aeabi_f2iz+0x46>
 80a2e7e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80a2e82:	bf08      	it	eq
 80a2e84:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a2e88:	4770      	bx	lr
 80a2e8a:	f04f 0000 	mov.w	r0, #0
 80a2e8e:	4770      	bx	lr

080a2e90 <atof>:
 80a2e90:	2100      	movs	r1, #0
 80a2e92:	f000 bfb5 	b.w	80a3e00 <strtod>
	...

080a2e98 <__cxa_atexit>:
 80a2e98:	b510      	push	{r4, lr}
 80a2e9a:	4c05      	ldr	r4, [pc, #20]	; (80a2eb0 <__cxa_atexit+0x18>)
 80a2e9c:	4613      	mov	r3, r2
 80a2e9e:	b12c      	cbz	r4, 80a2eac <__cxa_atexit+0x14>
 80a2ea0:	460a      	mov	r2, r1
 80a2ea2:	4601      	mov	r1, r0
 80a2ea4:	2002      	movs	r0, #2
 80a2ea6:	f3af 8000 	nop.w
 80a2eaa:	bd10      	pop	{r4, pc}
 80a2eac:	4620      	mov	r0, r4
 80a2eae:	bd10      	pop	{r4, pc}
 80a2eb0:	00000000 	.word	0x00000000

080a2eb4 <localtime>:
 80a2eb4:	b538      	push	{r3, r4, r5, lr}
 80a2eb6:	4b07      	ldr	r3, [pc, #28]	; (80a2ed4 <localtime+0x20>)
 80a2eb8:	4605      	mov	r5, r0
 80a2eba:	681c      	ldr	r4, [r3, #0]
 80a2ebc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80a2ebe:	b91b      	cbnz	r3, 80a2ec8 <localtime+0x14>
 80a2ec0:	2024      	movs	r0, #36	; 0x24
 80a2ec2:	f7fd fe97 	bl	80a0bf4 <malloc>
 80a2ec6:	63e0      	str	r0, [r4, #60]	; 0x3c
 80a2ec8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80a2eca:	4628      	mov	r0, r5
 80a2ecc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a2ed0:	f000 b802 	b.w	80a2ed8 <localtime_r>
 80a2ed4:	20000068 	.word	0x20000068

080a2ed8 <localtime_r>:
 80a2ed8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a2edc:	460c      	mov	r4, r1
 80a2ede:	4680      	mov	r8, r0
 80a2ee0:	f001 fdde 	bl	80a4aa0 <__gettzinfo>
 80a2ee4:	4621      	mov	r1, r4
 80a2ee6:	4607      	mov	r7, r0
 80a2ee8:	4640      	mov	r0, r8
 80a2eea:	f001 fddd 	bl	80a4aa8 <gmtime_r>
 80a2eee:	6946      	ldr	r6, [r0, #20]
 80a2ef0:	4604      	mov	r4, r0
 80a2ef2:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 80a2ef6:	07b3      	lsls	r3, r6, #30
 80a2ef8:	d105      	bne.n	80a2f06 <localtime_r+0x2e>
 80a2efa:	2264      	movs	r2, #100	; 0x64
 80a2efc:	fb96 f3f2 	sdiv	r3, r6, r2
 80a2f00:	fb02 6313 	mls	r3, r2, r3, r6
 80a2f04:	b94b      	cbnz	r3, 80a2f1a <localtime_r+0x42>
 80a2f06:	f44f 75c8 	mov.w	r5, #400	; 0x190
 80a2f0a:	fb96 f3f5 	sdiv	r3, r6, r5
 80a2f0e:	fb05 6513 	mls	r5, r5, r3, r6
 80a2f12:	fab5 f385 	clz	r3, r5
 80a2f16:	095b      	lsrs	r3, r3, #5
 80a2f18:	e000      	b.n	80a2f1c <localtime_r+0x44>
 80a2f1a:	2301      	movs	r3, #1
 80a2f1c:	4a5f      	ldr	r2, [pc, #380]	; (80a309c <localtime_r+0x1c4>)
 80a2f1e:	2530      	movs	r5, #48	; 0x30
 80a2f20:	fb05 2503 	mla	r5, r5, r3, r2
 80a2f24:	f001 f8d2 	bl	80a40cc <__tz_lock>
 80a2f28:	f001 f8d2 	bl	80a40d0 <_tzset_unlocked>
 80a2f2c:	4b5c      	ldr	r3, [pc, #368]	; (80a30a0 <localtime_r+0x1c8>)
 80a2f2e:	681b      	ldr	r3, [r3, #0]
 80a2f30:	b1f3      	cbz	r3, 80a2f70 <localtime_r+0x98>
 80a2f32:	687b      	ldr	r3, [r7, #4]
 80a2f34:	429e      	cmp	r6, r3
 80a2f36:	d105      	bne.n	80a2f44 <localtime_r+0x6c>
 80a2f38:	6839      	ldr	r1, [r7, #0]
 80a2f3a:	f8d8 3000 	ldr.w	r3, [r8]
 80a2f3e:	69fa      	ldr	r2, [r7, #28]
 80a2f40:	b941      	cbnz	r1, 80a2f54 <localtime_r+0x7c>
 80a2f42:	e00a      	b.n	80a2f5a <localtime_r+0x82>
 80a2f44:	4630      	mov	r0, r6
 80a2f46:	f001 f819 	bl	80a3f7c <__tzcalc_limits>
 80a2f4a:	2800      	cmp	r0, #0
 80a2f4c:	d1f4      	bne.n	80a2f38 <localtime_r+0x60>
 80a2f4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80a2f52:	e00d      	b.n	80a2f70 <localtime_r+0x98>
 80a2f54:	4293      	cmp	r3, r2
 80a2f56:	db08      	blt.n	80a2f6a <localtime_r+0x92>
 80a2f58:	e001      	b.n	80a2f5e <localtime_r+0x86>
 80a2f5a:	4293      	cmp	r3, r2
 80a2f5c:	da07      	bge.n	80a2f6e <localtime_r+0x96>
 80a2f5e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80a2f60:	4293      	cmp	r3, r2
 80a2f62:	bfac      	ite	ge
 80a2f64:	2300      	movge	r3, #0
 80a2f66:	2301      	movlt	r3, #1
 80a2f68:	e002      	b.n	80a2f70 <localtime_r+0x98>
 80a2f6a:	2300      	movs	r3, #0
 80a2f6c:	e000      	b.n	80a2f70 <localtime_r+0x98>
 80a2f6e:	2301      	movs	r3, #1
 80a2f70:	6223      	str	r3, [r4, #32]
 80a2f72:	6a23      	ldr	r3, [r4, #32]
 80a2f74:	203c      	movs	r0, #60	; 0x3c
 80a2f76:	2b01      	cmp	r3, #1
 80a2f78:	bf0c      	ite	eq
 80a2f7a:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
 80a2f7c:	6a39      	ldrne	r1, [r7, #32]
 80a2f7e:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80a2f82:	fb91 f6f3 	sdiv	r6, r1, r3
 80a2f86:	fb03 1316 	mls	r3, r3, r6, r1
 80a2f8a:	fb93 f2f0 	sdiv	r2, r3, r0
 80a2f8e:	fb00 3012 	mls	r0, r0, r2, r3
 80a2f92:	6861      	ldr	r1, [r4, #4]
 80a2f94:	6823      	ldr	r3, [r4, #0]
 80a2f96:	1a89      	subs	r1, r1, r2
 80a2f98:	68a2      	ldr	r2, [r4, #8]
 80a2f9a:	1a1b      	subs	r3, r3, r0
 80a2f9c:	1b92      	subs	r2, r2, r6
 80a2f9e:	2b3b      	cmp	r3, #59	; 0x3b
 80a2fa0:	6023      	str	r3, [r4, #0]
 80a2fa2:	6061      	str	r1, [r4, #4]
 80a2fa4:	60a2      	str	r2, [r4, #8]
 80a2fa6:	dd03      	ble.n	80a2fb0 <localtime_r+0xd8>
 80a2fa8:	3101      	adds	r1, #1
 80a2faa:	6061      	str	r1, [r4, #4]
 80a2fac:	3b3c      	subs	r3, #60	; 0x3c
 80a2fae:	e004      	b.n	80a2fba <localtime_r+0xe2>
 80a2fb0:	2b00      	cmp	r3, #0
 80a2fb2:	da03      	bge.n	80a2fbc <localtime_r+0xe4>
 80a2fb4:	3901      	subs	r1, #1
 80a2fb6:	6061      	str	r1, [r4, #4]
 80a2fb8:	333c      	adds	r3, #60	; 0x3c
 80a2fba:	6023      	str	r3, [r4, #0]
 80a2fbc:	6863      	ldr	r3, [r4, #4]
 80a2fbe:	2b3b      	cmp	r3, #59	; 0x3b
 80a2fc0:	dd03      	ble.n	80a2fca <localtime_r+0xf2>
 80a2fc2:	3201      	adds	r2, #1
 80a2fc4:	60a2      	str	r2, [r4, #8]
 80a2fc6:	3b3c      	subs	r3, #60	; 0x3c
 80a2fc8:	e004      	b.n	80a2fd4 <localtime_r+0xfc>
 80a2fca:	2b00      	cmp	r3, #0
 80a2fcc:	da03      	bge.n	80a2fd6 <localtime_r+0xfe>
 80a2fce:	3a01      	subs	r2, #1
 80a2fd0:	60a2      	str	r2, [r4, #8]
 80a2fd2:	333c      	adds	r3, #60	; 0x3c
 80a2fd4:	6063      	str	r3, [r4, #4]
 80a2fd6:	68a3      	ldr	r3, [r4, #8]
 80a2fd8:	2b17      	cmp	r3, #23
 80a2fda:	dd22      	ble.n	80a3022 <localtime_r+0x14a>
 80a2fdc:	69e2      	ldr	r2, [r4, #28]
 80a2fde:	3b18      	subs	r3, #24
 80a2fe0:	3201      	adds	r2, #1
 80a2fe2:	61e2      	str	r2, [r4, #28]
 80a2fe4:	69a2      	ldr	r2, [r4, #24]
 80a2fe6:	60a3      	str	r3, [r4, #8]
 80a2fe8:	3201      	adds	r2, #1
 80a2fea:	2a06      	cmp	r2, #6
 80a2fec:	bfc8      	it	gt
 80a2fee:	2200      	movgt	r2, #0
 80a2ff0:	61a2      	str	r2, [r4, #24]
 80a2ff2:	68e2      	ldr	r2, [r4, #12]
 80a2ff4:	6923      	ldr	r3, [r4, #16]
 80a2ff6:	3201      	adds	r2, #1
 80a2ff8:	60e2      	str	r2, [r4, #12]
 80a2ffa:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 80a2ffe:	428a      	cmp	r2, r1
 80a3000:	dd46      	ble.n	80a3090 <localtime_r+0x1b8>
 80a3002:	3301      	adds	r3, #1
 80a3004:	2b0c      	cmp	r3, #12
 80a3006:	bf08      	it	eq
 80a3008:	6963      	ldreq	r3, [r4, #20]
 80a300a:	eba2 0201 	sub.w	r2, r2, r1
 80a300e:	60e2      	str	r2, [r4, #12]
 80a3010:	bf05      	ittet	eq
 80a3012:	3301      	addeq	r3, #1
 80a3014:	2200      	moveq	r2, #0
 80a3016:	6123      	strne	r3, [r4, #16]
 80a3018:	6122      	streq	r2, [r4, #16]
 80a301a:	bf04      	itt	eq
 80a301c:	6163      	streq	r3, [r4, #20]
 80a301e:	61e2      	streq	r2, [r4, #28]
 80a3020:	e036      	b.n	80a3090 <localtime_r+0x1b8>
 80a3022:	2b00      	cmp	r3, #0
 80a3024:	da34      	bge.n	80a3090 <localtime_r+0x1b8>
 80a3026:	69e2      	ldr	r2, [r4, #28]
 80a3028:	3318      	adds	r3, #24
 80a302a:	3a01      	subs	r2, #1
 80a302c:	61e2      	str	r2, [r4, #28]
 80a302e:	69a2      	ldr	r2, [r4, #24]
 80a3030:	60a3      	str	r3, [r4, #8]
 80a3032:	3a01      	subs	r2, #1
 80a3034:	bf48      	it	mi
 80a3036:	2206      	movmi	r2, #6
 80a3038:	61a2      	str	r2, [r4, #24]
 80a303a:	68e2      	ldr	r2, [r4, #12]
 80a303c:	3a01      	subs	r2, #1
 80a303e:	60e2      	str	r2, [r4, #12]
 80a3040:	bb32      	cbnz	r2, 80a3090 <localtime_r+0x1b8>
 80a3042:	6923      	ldr	r3, [r4, #16]
 80a3044:	3b01      	subs	r3, #1
 80a3046:	d401      	bmi.n	80a304c <localtime_r+0x174>
 80a3048:	6123      	str	r3, [r4, #16]
 80a304a:	e01d      	b.n	80a3088 <localtime_r+0x1b0>
 80a304c:	230b      	movs	r3, #11
 80a304e:	6123      	str	r3, [r4, #16]
 80a3050:	6963      	ldr	r3, [r4, #20]
 80a3052:	1e5a      	subs	r2, r3, #1
 80a3054:	f012 0f03 	tst.w	r2, #3
 80a3058:	6162      	str	r2, [r4, #20]
 80a305a:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 80a305e:	d105      	bne.n	80a306c <localtime_r+0x194>
 80a3060:	2164      	movs	r1, #100	; 0x64
 80a3062:	fb93 f2f1 	sdiv	r2, r3, r1
 80a3066:	fb01 3212 	mls	r2, r1, r2, r3
 80a306a:	b94a      	cbnz	r2, 80a3080 <localtime_r+0x1a8>
 80a306c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80a3070:	fb93 f2f1 	sdiv	r2, r3, r1
 80a3074:	fb01 3312 	mls	r3, r1, r2, r3
 80a3078:	fab3 f383 	clz	r3, r3
 80a307c:	095b      	lsrs	r3, r3, #5
 80a307e:	e000      	b.n	80a3082 <localtime_r+0x1aa>
 80a3080:	2301      	movs	r3, #1
 80a3082:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 80a3086:	61e3      	str	r3, [r4, #28]
 80a3088:	6923      	ldr	r3, [r4, #16]
 80a308a:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80a308e:	60e3      	str	r3, [r4, #12]
 80a3090:	f001 f81d 	bl	80a40ce <__tz_unlock>
 80a3094:	4620      	mov	r0, r4
 80a3096:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a309a:	bf00      	nop
 80a309c:	080a5b50 	.word	0x080a5b50
 80a30a0:	2000080c 	.word	0x2000080c

080a30a4 <_localeconv_r>:
 80a30a4:	4800      	ldr	r0, [pc, #0]	; (80a30a8 <_localeconv_r+0x4>)
 80a30a6:	4770      	bx	lr
 80a30a8:	2000006c 	.word	0x2000006c

080a30ac <memcpy>:
 80a30ac:	b510      	push	{r4, lr}
 80a30ae:	1e43      	subs	r3, r0, #1
 80a30b0:	440a      	add	r2, r1
 80a30b2:	4291      	cmp	r1, r2
 80a30b4:	d004      	beq.n	80a30c0 <memcpy+0x14>
 80a30b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a30ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a30be:	e7f8      	b.n	80a30b2 <memcpy+0x6>
 80a30c0:	bd10      	pop	{r4, pc}

080a30c2 <memset>:
 80a30c2:	4603      	mov	r3, r0
 80a30c4:	4402      	add	r2, r0
 80a30c6:	4293      	cmp	r3, r2
 80a30c8:	d002      	beq.n	80a30d0 <memset+0xe>
 80a30ca:	f803 1b01 	strb.w	r1, [r3], #1
 80a30ce:	e7fa      	b.n	80a30c6 <memset+0x4>
 80a30d0:	4770      	bx	lr
	...

080a30d4 <srand>:
 80a30d4:	b538      	push	{r3, r4, r5, lr}
 80a30d6:	4b12      	ldr	r3, [pc, #72]	; (80a3120 <srand+0x4c>)
 80a30d8:	4605      	mov	r5, r0
 80a30da:	681c      	ldr	r4, [r3, #0]
 80a30dc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a30de:	b9d3      	cbnz	r3, 80a3116 <srand+0x42>
 80a30e0:	2018      	movs	r0, #24
 80a30e2:	f7fd fd87 	bl	80a0bf4 <malloc>
 80a30e6:	f243 330e 	movw	r3, #13070	; 0x330e
 80a30ea:	63a0      	str	r0, [r4, #56]	; 0x38
 80a30ec:	8003      	strh	r3, [r0, #0]
 80a30ee:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a30f2:	8043      	strh	r3, [r0, #2]
 80a30f4:	f241 2334 	movw	r3, #4660	; 0x1234
 80a30f8:	8083      	strh	r3, [r0, #4]
 80a30fa:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a30fe:	80c3      	strh	r3, [r0, #6]
 80a3100:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a3104:	8103      	strh	r3, [r0, #8]
 80a3106:	2305      	movs	r3, #5
 80a3108:	8143      	strh	r3, [r0, #10]
 80a310a:	230b      	movs	r3, #11
 80a310c:	8183      	strh	r3, [r0, #12]
 80a310e:	2201      	movs	r2, #1
 80a3110:	2300      	movs	r3, #0
 80a3112:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a3116:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a3118:	2200      	movs	r2, #0
 80a311a:	611d      	str	r5, [r3, #16]
 80a311c:	615a      	str	r2, [r3, #20]
 80a311e:	bd38      	pop	{r3, r4, r5, pc}
 80a3120:	20000068 	.word	0x20000068

080a3124 <strcmp>:
 80a3124:	f810 2b01 	ldrb.w	r2, [r0], #1
 80a3128:	f811 3b01 	ldrb.w	r3, [r1], #1
 80a312c:	2a01      	cmp	r2, #1
 80a312e:	bf28      	it	cs
 80a3130:	429a      	cmpcs	r2, r3
 80a3132:	d0f7      	beq.n	80a3124 <strcmp>
 80a3134:	1ad0      	subs	r0, r2, r3
 80a3136:	4770      	bx	lr

080a3138 <strcpy>:
 80a3138:	4603      	mov	r3, r0
 80a313a:	f811 2b01 	ldrb.w	r2, [r1], #1
 80a313e:	f803 2b01 	strb.w	r2, [r3], #1
 80a3142:	2a00      	cmp	r2, #0
 80a3144:	d1f9      	bne.n	80a313a <strcpy+0x2>
 80a3146:	4770      	bx	lr

080a3148 <strdup>:
 80a3148:	4b02      	ldr	r3, [pc, #8]	; (80a3154 <strdup+0xc>)
 80a314a:	4601      	mov	r1, r0
 80a314c:	6818      	ldr	r0, [r3, #0]
 80a314e:	f000 b803 	b.w	80a3158 <_strdup_r>
 80a3152:	bf00      	nop
 80a3154:	20000068 	.word	0x20000068

080a3158 <_strdup_r>:
 80a3158:	b570      	push	{r4, r5, r6, lr}
 80a315a:	4606      	mov	r6, r0
 80a315c:	4608      	mov	r0, r1
 80a315e:	460c      	mov	r4, r1
 80a3160:	f000 f80d 	bl	80a317e <strlen>
 80a3164:	1c45      	adds	r5, r0, #1
 80a3166:	4629      	mov	r1, r5
 80a3168:	4630      	mov	r0, r6
 80a316a:	f7fd fd7b 	bl	80a0c64 <_malloc_r>
 80a316e:	4606      	mov	r6, r0
 80a3170:	b118      	cbz	r0, 80a317a <_strdup_r+0x22>
 80a3172:	462a      	mov	r2, r5
 80a3174:	4621      	mov	r1, r4
 80a3176:	f7ff ff99 	bl	80a30ac <memcpy>
 80a317a:	4630      	mov	r0, r6
 80a317c:	bd70      	pop	{r4, r5, r6, pc}

080a317e <strlen>:
 80a317e:	4603      	mov	r3, r0
 80a3180:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a3184:	2a00      	cmp	r2, #0
 80a3186:	d1fb      	bne.n	80a3180 <strlen+0x2>
 80a3188:	1a18      	subs	r0, r3, r0
 80a318a:	3801      	subs	r0, #1
 80a318c:	4770      	bx	lr

080a318e <strncmp>:
 80a318e:	b530      	push	{r4, r5, lr}
 80a3190:	b182      	cbz	r2, 80a31b4 <strncmp+0x26>
 80a3192:	1e45      	subs	r5, r0, #1
 80a3194:	3901      	subs	r1, #1
 80a3196:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 80a319a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80a319e:	42a3      	cmp	r3, r4
 80a31a0:	d106      	bne.n	80a31b0 <strncmp+0x22>
 80a31a2:	43ec      	mvns	r4, r5
 80a31a4:	4414      	add	r4, r2
 80a31a6:	42e0      	cmn	r0, r4
 80a31a8:	d001      	beq.n	80a31ae <strncmp+0x20>
 80a31aa:	2b00      	cmp	r3, #0
 80a31ac:	d1f3      	bne.n	80a3196 <strncmp+0x8>
 80a31ae:	461c      	mov	r4, r3
 80a31b0:	1b18      	subs	r0, r3, r4
 80a31b2:	bd30      	pop	{r4, r5, pc}
 80a31b4:	4610      	mov	r0, r2
 80a31b6:	bd30      	pop	{r4, r5, pc}

080a31b8 <sulp>:
 80a31b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a31bc:	460f      	mov	r7, r1
 80a31be:	4690      	mov	r8, r2
 80a31c0:	f001 ffce 	bl	80a5160 <__ulp>
 80a31c4:	4604      	mov	r4, r0
 80a31c6:	460d      	mov	r5, r1
 80a31c8:	f1b8 0f00 	cmp.w	r8, #0
 80a31cc:	d011      	beq.n	80a31f2 <sulp+0x3a>
 80a31ce:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80a31d2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80a31d6:	2b00      	cmp	r3, #0
 80a31d8:	dd0b      	ble.n	80a31f2 <sulp+0x3a>
 80a31da:	051b      	lsls	r3, r3, #20
 80a31dc:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80a31e0:	2400      	movs	r4, #0
 80a31e2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80a31e6:	4622      	mov	r2, r4
 80a31e8:	462b      	mov	r3, r5
 80a31ea:	f7ff f933 	bl	80a2454 <__aeabi_dmul>
 80a31ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a31f2:	4620      	mov	r0, r4
 80a31f4:	4629      	mov	r1, r5
 80a31f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a31fa:	0000      	movs	r0, r0
 80a31fc:	0000      	movs	r0, r0
	...

080a3200 <_strtod_r>:
 80a3200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a3204:	4682      	mov	sl, r0
 80a3206:	460c      	mov	r4, r1
 80a3208:	b09d      	sub	sp, #116	; 0x74
 80a320a:	2300      	movs	r3, #0
 80a320c:	9213      	str	r2, [sp, #76]	; 0x4c
 80a320e:	9318      	str	r3, [sp, #96]	; 0x60
 80a3210:	f04f 0800 	mov.w	r8, #0
 80a3214:	f04f 0900 	mov.w	r9, #0
 80a3218:	9117      	str	r1, [sp, #92]	; 0x5c
 80a321a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a321c:	781a      	ldrb	r2, [r3, #0]
 80a321e:	2a0d      	cmp	r2, #13
 80a3220:	d805      	bhi.n	80a322e <_strtod_r+0x2e>
 80a3222:	2a09      	cmp	r2, #9
 80a3224:	d213      	bcs.n	80a324e <_strtod_r+0x4e>
 80a3226:	2a00      	cmp	r2, #0
 80a3228:	f000 81ad 	beq.w	80a3586 <_strtod_r+0x386>
 80a322c:	e012      	b.n	80a3254 <_strtod_r+0x54>
 80a322e:	2a2b      	cmp	r2, #43	; 0x2b
 80a3230:	d004      	beq.n	80a323c <_strtod_r+0x3c>
 80a3232:	2a2d      	cmp	r2, #45	; 0x2d
 80a3234:	d004      	beq.n	80a3240 <_strtod_r+0x40>
 80a3236:	2a20      	cmp	r2, #32
 80a3238:	d10c      	bne.n	80a3254 <_strtod_r+0x54>
 80a323a:	e008      	b.n	80a324e <_strtod_r+0x4e>
 80a323c:	2200      	movs	r2, #0
 80a323e:	e000      	b.n	80a3242 <_strtod_r+0x42>
 80a3240:	2201      	movs	r2, #1
 80a3242:	920c      	str	r2, [sp, #48]	; 0x30
 80a3244:	1c5a      	adds	r2, r3, #1
 80a3246:	9217      	str	r2, [sp, #92]	; 0x5c
 80a3248:	785b      	ldrb	r3, [r3, #1]
 80a324a:	b92b      	cbnz	r3, 80a3258 <_strtod_r+0x58>
 80a324c:	e19b      	b.n	80a3586 <_strtod_r+0x386>
 80a324e:	3301      	adds	r3, #1
 80a3250:	9317      	str	r3, [sp, #92]	; 0x5c
 80a3252:	e7e2      	b.n	80a321a <_strtod_r+0x1a>
 80a3254:	2300      	movs	r3, #0
 80a3256:	930c      	str	r3, [sp, #48]	; 0x30
 80a3258:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 80a325a:	782b      	ldrb	r3, [r5, #0]
 80a325c:	2b30      	cmp	r3, #48	; 0x30
 80a325e:	d15c      	bne.n	80a331a <_strtod_r+0x11a>
 80a3260:	786b      	ldrb	r3, [r5, #1]
 80a3262:	2b58      	cmp	r3, #88	; 0x58
 80a3264:	d001      	beq.n	80a326a <_strtod_r+0x6a>
 80a3266:	2b78      	cmp	r3, #120	; 0x78
 80a3268:	d14c      	bne.n	80a3304 <_strtod_r+0x104>
 80a326a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80a326c:	4aa8      	ldr	r2, [pc, #672]	; (80a3510 <_strtod_r+0x310>)
 80a326e:	9301      	str	r3, [sp, #4]
 80a3270:	ab18      	add	r3, sp, #96	; 0x60
 80a3272:	9300      	str	r3, [sp, #0]
 80a3274:	a917      	add	r1, sp, #92	; 0x5c
 80a3276:	ab19      	add	r3, sp, #100	; 0x64
 80a3278:	4650      	mov	r0, sl
 80a327a:	f001 f8fa 	bl	80a4472 <__gethex>
 80a327e:	f010 0607 	ands.w	r6, r0, #7
 80a3282:	4604      	mov	r4, r0
 80a3284:	f000 8585 	beq.w	80a3d92 <_strtod_r+0xb92>
 80a3288:	2e06      	cmp	r6, #6
 80a328a:	d105      	bne.n	80a3298 <_strtod_r+0x98>
 80a328c:	3501      	adds	r5, #1
 80a328e:	2300      	movs	r3, #0
 80a3290:	9517      	str	r5, [sp, #92]	; 0x5c
 80a3292:	930c      	str	r3, [sp, #48]	; 0x30
 80a3294:	f000 bd7d 	b.w	80a3d92 <_strtod_r+0xb92>
 80a3298:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80a329a:	b13a      	cbz	r2, 80a32ac <_strtod_r+0xac>
 80a329c:	2135      	movs	r1, #53	; 0x35
 80a329e:	a81a      	add	r0, sp, #104	; 0x68
 80a32a0:	f002 f845 	bl	80a532e <__copybits>
 80a32a4:	9918      	ldr	r1, [sp, #96]	; 0x60
 80a32a6:	4650      	mov	r0, sl
 80a32a8:	f001 fcc9 	bl	80a4c3e <_Bfree>
 80a32ac:	2e06      	cmp	r6, #6
 80a32ae:	d822      	bhi.n	80a32f6 <_strtod_r+0xf6>
 80a32b0:	e8df f006 	tbb	[pc, r6]
 80a32b4:	18080d04 	.word	0x18080d04
 80a32b8:	0d1d      	.short	0x0d1d
 80a32ba:	04          	.byte	0x04
 80a32bb:	00          	.byte	0x00
 80a32bc:	f04f 0900 	mov.w	r9, #0
 80a32c0:	46c8      	mov	r8, r9
 80a32c2:	e018      	b.n	80a32f6 <_strtod_r+0xf6>
 80a32c4:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80a32c8:	f8dd 906c 	ldr.w	r9, [sp, #108]	; 0x6c
 80a32cc:	e013      	b.n	80a32f6 <_strtod_r+0xf6>
 80a32ce:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80a32d0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80a32d2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80a32d6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80a32da:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80a32de:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80a32e2:	e008      	b.n	80a32f6 <_strtod_r+0xf6>
 80a32e4:	f8df 922c 	ldr.w	r9, [pc, #556]	; 80a3514 <_strtod_r+0x314>
 80a32e8:	f04f 0800 	mov.w	r8, #0
 80a32ec:	e003      	b.n	80a32f6 <_strtod_r+0xf6>
 80a32ee:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80a32f2:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80a32f6:	0721      	lsls	r1, r4, #28
 80a32f8:	f140 854b 	bpl.w	80a3d92 <_strtod_r+0xb92>
 80a32fc:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 80a3300:	f000 bd47 	b.w	80a3d92 <_strtod_r+0xb92>
 80a3304:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a3306:	1c5a      	adds	r2, r3, #1
 80a3308:	9217      	str	r2, [sp, #92]	; 0x5c
 80a330a:	785b      	ldrb	r3, [r3, #1]
 80a330c:	2b30      	cmp	r3, #48	; 0x30
 80a330e:	d0f9      	beq.n	80a3304 <_strtod_r+0x104>
 80a3310:	2b00      	cmp	r3, #0
 80a3312:	f000 853e 	beq.w	80a3d92 <_strtod_r+0xb92>
 80a3316:	2301      	movs	r3, #1
 80a3318:	e000      	b.n	80a331c <_strtod_r+0x11c>
 80a331a:	2300      	movs	r3, #0
 80a331c:	9305      	str	r3, [sp, #20]
 80a331e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a3320:	220a      	movs	r2, #10
 80a3322:	9306      	str	r3, [sp, #24]
 80a3324:	2300      	movs	r3, #0
 80a3326:	469b      	mov	fp, r3
 80a3328:	9302      	str	r3, [sp, #8]
 80a332a:	9304      	str	r3, [sp, #16]
 80a332c:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 80a332e:	782e      	ldrb	r6, [r5, #0]
 80a3330:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80a3334:	b2d9      	uxtb	r1, r3
 80a3336:	2909      	cmp	r1, #9
 80a3338:	d811      	bhi.n	80a335e <_strtod_r+0x15e>
 80a333a:	f1bb 0f08 	cmp.w	fp, #8
 80a333e:	bfd5      	itete	le
 80a3340:	9904      	ldrle	r1, [sp, #16]
 80a3342:	9902      	ldrgt	r1, [sp, #8]
 80a3344:	fb02 3301 	mlale	r3, r2, r1, r3
 80a3348:	fb02 3301 	mlagt	r3, r2, r1, r3
 80a334c:	f105 0501 	add.w	r5, r5, #1
 80a3350:	bfd4      	ite	le
 80a3352:	9304      	strle	r3, [sp, #16]
 80a3354:	9302      	strgt	r3, [sp, #8]
 80a3356:	f10b 0b01 	add.w	fp, fp, #1
 80a335a:	9517      	str	r5, [sp, #92]	; 0x5c
 80a335c:	e7e6      	b.n	80a332c <_strtod_r+0x12c>
 80a335e:	4650      	mov	r0, sl
 80a3360:	f7ff fea0 	bl	80a30a4 <_localeconv_r>
 80a3364:	6807      	ldr	r7, [r0, #0]
 80a3366:	4650      	mov	r0, sl
 80a3368:	f7ff fe9c 	bl	80a30a4 <_localeconv_r>
 80a336c:	6800      	ldr	r0, [r0, #0]
 80a336e:	f7ff ff06 	bl	80a317e <strlen>
 80a3372:	4639      	mov	r1, r7
 80a3374:	4602      	mov	r2, r0
 80a3376:	4628      	mov	r0, r5
 80a3378:	f7ff ff09 	bl	80a318e <strncmp>
 80a337c:	4607      	mov	r7, r0
 80a337e:	b128      	cbz	r0, 80a338c <_strtod_r+0x18c>
 80a3380:	2000      	movs	r0, #0
 80a3382:	4633      	mov	r3, r6
 80a3384:	465d      	mov	r5, fp
 80a3386:	4602      	mov	r2, r0
 80a3388:	4601      	mov	r1, r0
 80a338a:	e05a      	b.n	80a3442 <_strtod_r+0x242>
 80a338c:	4650      	mov	r0, sl
 80a338e:	f7ff fe89 	bl	80a30a4 <_localeconv_r>
 80a3392:	6800      	ldr	r0, [r0, #0]
 80a3394:	f7ff fef3 	bl	80a317e <strlen>
 80a3398:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a339a:	181a      	adds	r2, r3, r0
 80a339c:	9217      	str	r2, [sp, #92]	; 0x5c
 80a339e:	5c1b      	ldrb	r3, [r3, r0]
 80a33a0:	f1bb 0f00 	cmp.w	fp, #0
 80a33a4:	d145      	bne.n	80a3432 <_strtod_r+0x232>
 80a33a6:	4658      	mov	r0, fp
 80a33a8:	2b30      	cmp	r3, #48	; 0x30
 80a33aa:	d105      	bne.n	80a33b8 <_strtod_r+0x1b8>
 80a33ac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a33ae:	3001      	adds	r0, #1
 80a33b0:	1c5a      	adds	r2, r3, #1
 80a33b2:	9217      	str	r2, [sp, #92]	; 0x5c
 80a33b4:	785b      	ldrb	r3, [r3, #1]
 80a33b6:	e7f7      	b.n	80a33a8 <_strtod_r+0x1a8>
 80a33b8:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80a33bc:	2a08      	cmp	r2, #8
 80a33be:	d846      	bhi.n	80a344e <_strtod_r+0x24e>
 80a33c0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80a33c2:	9206      	str	r2, [sp, #24]
 80a33c4:	4602      	mov	r2, r0
 80a33c6:	2000      	movs	r0, #0
 80a33c8:	4605      	mov	r5, r0
 80a33ca:	3b30      	subs	r3, #48	; 0x30
 80a33cc:	f100 0101 	add.w	r1, r0, #1
 80a33d0:	d029      	beq.n	80a3426 <_strtod_r+0x226>
 80a33d2:	440a      	add	r2, r1
 80a33d4:	4629      	mov	r1, r5
 80a33d6:	eb05 0c00 	add.w	ip, r5, r0
 80a33da:	260a      	movs	r6, #10
 80a33dc:	4561      	cmp	r1, ip
 80a33de:	d00f      	beq.n	80a3400 <_strtod_r+0x200>
 80a33e0:	3101      	adds	r1, #1
 80a33e2:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
 80a33e6:	f1be 0f08 	cmp.w	lr, #8
 80a33ea:	dc03      	bgt.n	80a33f4 <_strtod_r+0x1f4>
 80a33ec:	9f04      	ldr	r7, [sp, #16]
 80a33ee:	4377      	muls	r7, r6
 80a33f0:	9704      	str	r7, [sp, #16]
 80a33f2:	e7f3      	b.n	80a33dc <_strtod_r+0x1dc>
 80a33f4:	2910      	cmp	r1, #16
 80a33f6:	bfde      	ittt	le
 80a33f8:	9f02      	ldrle	r7, [sp, #8]
 80a33fa:	4377      	mulle	r7, r6
 80a33fc:	9702      	strle	r7, [sp, #8]
 80a33fe:	e7ed      	b.n	80a33dc <_strtod_r+0x1dc>
 80a3400:	4428      	add	r0, r5
 80a3402:	2808      	cmp	r0, #8
 80a3404:	f100 0501 	add.w	r5, r0, #1
 80a3408:	dc05      	bgt.n	80a3416 <_strtod_r+0x216>
 80a340a:	9804      	ldr	r0, [sp, #16]
 80a340c:	210a      	movs	r1, #10
 80a340e:	fb01 3300 	mla	r3, r1, r0, r3
 80a3412:	9304      	str	r3, [sp, #16]
 80a3414:	e006      	b.n	80a3424 <_strtod_r+0x224>
 80a3416:	2d10      	cmp	r5, #16
 80a3418:	bfdf      	itttt	le
 80a341a:	9802      	ldrle	r0, [sp, #8]
 80a341c:	210a      	movle	r1, #10
 80a341e:	fb01 3300 	mlale	r3, r1, r0, r3
 80a3422:	9302      	strle	r3, [sp, #8]
 80a3424:	2100      	movs	r1, #0
 80a3426:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a3428:	1c58      	adds	r0, r3, #1
 80a342a:	9017      	str	r0, [sp, #92]	; 0x5c
 80a342c:	785b      	ldrb	r3, [r3, #1]
 80a342e:	4608      	mov	r0, r1
 80a3430:	e002      	b.n	80a3438 <_strtod_r+0x238>
 80a3432:	465d      	mov	r5, fp
 80a3434:	4638      	mov	r0, r7
 80a3436:	463a      	mov	r2, r7
 80a3438:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80a343c:	2909      	cmp	r1, #9
 80a343e:	d9c4      	bls.n	80a33ca <_strtod_r+0x1ca>
 80a3440:	2101      	movs	r1, #1
 80a3442:	2b65      	cmp	r3, #101	; 0x65
 80a3444:	d001      	beq.n	80a344a <_strtod_r+0x24a>
 80a3446:	2b45      	cmp	r3, #69	; 0x45
 80a3448:	d14f      	bne.n	80a34ea <_strtod_r+0x2ea>
 80a344a:	b96d      	cbnz	r5, 80a3468 <_strtod_r+0x268>
 80a344c:	e004      	b.n	80a3458 <_strtod_r+0x258>
 80a344e:	2b65      	cmp	r3, #101	; 0x65
 80a3450:	f040 84ad 	bne.w	80a3dae <_strtod_r+0xbae>
 80a3454:	2200      	movs	r2, #0
 80a3456:	2101      	movs	r1, #1
 80a3458:	b928      	cbnz	r0, 80a3466 <_strtod_r+0x266>
 80a345a:	9b05      	ldr	r3, [sp, #20]
 80a345c:	2b00      	cmp	r3, #0
 80a345e:	f000 8092 	beq.w	80a3586 <_strtod_r+0x386>
 80a3462:	4605      	mov	r5, r0
 80a3464:	e000      	b.n	80a3468 <_strtod_r+0x268>
 80a3466:	2500      	movs	r5, #0
 80a3468:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80a346a:	1c63      	adds	r3, r4, #1
 80a346c:	9317      	str	r3, [sp, #92]	; 0x5c
 80a346e:	7863      	ldrb	r3, [r4, #1]
 80a3470:	2b2b      	cmp	r3, #43	; 0x2b
 80a3472:	d006      	beq.n	80a3482 <_strtod_r+0x282>
 80a3474:	2b2d      	cmp	r3, #45	; 0x2d
 80a3476:	d002      	beq.n	80a347e <_strtod_r+0x27e>
 80a3478:	2600      	movs	r6, #0
 80a347a:	9603      	str	r6, [sp, #12]
 80a347c:	e006      	b.n	80a348c <_strtod_r+0x28c>
 80a347e:	2301      	movs	r3, #1
 80a3480:	e000      	b.n	80a3484 <_strtod_r+0x284>
 80a3482:	2300      	movs	r3, #0
 80a3484:	9303      	str	r3, [sp, #12]
 80a3486:	1ca3      	adds	r3, r4, #2
 80a3488:	9317      	str	r3, [sp, #92]	; 0x5c
 80a348a:	78a3      	ldrb	r3, [r4, #2]
 80a348c:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 80a3490:	2e09      	cmp	r6, #9
 80a3492:	d829      	bhi.n	80a34e8 <_strtod_r+0x2e8>
 80a3494:	2b30      	cmp	r3, #48	; 0x30
 80a3496:	d104      	bne.n	80a34a2 <_strtod_r+0x2a2>
 80a3498:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a349a:	1c5e      	adds	r6, r3, #1
 80a349c:	9617      	str	r6, [sp, #92]	; 0x5c
 80a349e:	785b      	ldrb	r3, [r3, #1]
 80a34a0:	e7f8      	b.n	80a3494 <_strtod_r+0x294>
 80a34a2:	f1a3 0631 	sub.w	r6, r3, #49	; 0x31
 80a34a6:	2e08      	cmp	r6, #8
 80a34a8:	d81f      	bhi.n	80a34ea <_strtod_r+0x2ea>
 80a34aa:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80a34ae:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a34b0:	461f      	mov	r7, r3
 80a34b2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a34b4:	1c5e      	adds	r6, r3, #1
 80a34b6:	9617      	str	r6, [sp, #92]	; 0x5c
 80a34b8:	785b      	ldrb	r3, [r3, #1]
 80a34ba:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 80a34be:	f1bc 0f09 	cmp.w	ip, #9
 80a34c2:	d805      	bhi.n	80a34d0 <_strtod_r+0x2d0>
 80a34c4:	260a      	movs	r6, #10
 80a34c6:	fb06 3e0e 	mla	lr, r6, lr, r3
 80a34ca:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80a34ce:	e7f0      	b.n	80a34b2 <_strtod_r+0x2b2>
 80a34d0:	1bf6      	subs	r6, r6, r7
 80a34d2:	2e08      	cmp	r6, #8
 80a34d4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80a34d8:	dc02      	bgt.n	80a34e0 <_strtod_r+0x2e0>
 80a34da:	4576      	cmp	r6, lr
 80a34dc:	bfa8      	it	ge
 80a34de:	4676      	movge	r6, lr
 80a34e0:	9f03      	ldr	r7, [sp, #12]
 80a34e2:	b11f      	cbz	r7, 80a34ec <_strtod_r+0x2ec>
 80a34e4:	4276      	negs	r6, r6
 80a34e6:	e001      	b.n	80a34ec <_strtod_r+0x2ec>
 80a34e8:	9417      	str	r4, [sp, #92]	; 0x5c
 80a34ea:	2600      	movs	r6, #0
 80a34ec:	2d00      	cmp	r5, #0
 80a34ee:	d152      	bne.n	80a3596 <_strtod_r+0x396>
 80a34f0:	2800      	cmp	r0, #0
 80a34f2:	f040 844e 	bne.w	80a3d92 <_strtod_r+0xb92>
 80a34f6:	9a05      	ldr	r2, [sp, #20]
 80a34f8:	2a00      	cmp	r2, #0
 80a34fa:	f040 844a 	bne.w	80a3d92 <_strtod_r+0xb92>
 80a34fe:	2900      	cmp	r1, #0
 80a3500:	d141      	bne.n	80a3586 <_strtod_r+0x386>
 80a3502:	2b4e      	cmp	r3, #78	; 0x4e
 80a3504:	d020      	beq.n	80a3548 <_strtod_r+0x348>
 80a3506:	dc07      	bgt.n	80a3518 <_strtod_r+0x318>
 80a3508:	2b49      	cmp	r3, #73	; 0x49
 80a350a:	d00a      	beq.n	80a3522 <_strtod_r+0x322>
 80a350c:	e03b      	b.n	80a3586 <_strtod_r+0x386>
 80a350e:	bf00      	nop
 80a3510:	080a5bb0 	.word	0x080a5bb0
 80a3514:	7ff00000 	.word	0x7ff00000
 80a3518:	2b69      	cmp	r3, #105	; 0x69
 80a351a:	d002      	beq.n	80a3522 <_strtod_r+0x322>
 80a351c:	2b6e      	cmp	r3, #110	; 0x6e
 80a351e:	d013      	beq.n	80a3548 <_strtod_r+0x348>
 80a3520:	e031      	b.n	80a3586 <_strtod_r+0x386>
 80a3522:	49aa      	ldr	r1, [pc, #680]	; (80a37cc <_strtod_r+0x5cc>)
 80a3524:	a817      	add	r0, sp, #92	; 0x5c
 80a3526:	f001 f9d5 	bl	80a48d4 <__match>
 80a352a:	b360      	cbz	r0, 80a3586 <_strtod_r+0x386>
 80a352c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a352e:	49a8      	ldr	r1, [pc, #672]	; (80a37d0 <_strtod_r+0x5d0>)
 80a3530:	3b01      	subs	r3, #1
 80a3532:	a817      	add	r0, sp, #92	; 0x5c
 80a3534:	9317      	str	r3, [sp, #92]	; 0x5c
 80a3536:	f001 f9cd 	bl	80a48d4 <__match>
 80a353a:	b910      	cbnz	r0, 80a3542 <_strtod_r+0x342>
 80a353c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a353e:	3301      	adds	r3, #1
 80a3540:	9317      	str	r3, [sp, #92]	; 0x5c
 80a3542:	f8df 92a8 	ldr.w	r9, [pc, #680]	; 80a37ec <_strtod_r+0x5ec>
 80a3546:	e01a      	b.n	80a357e <_strtod_r+0x37e>
 80a3548:	49a2      	ldr	r1, [pc, #648]	; (80a37d4 <_strtod_r+0x5d4>)
 80a354a:	a817      	add	r0, sp, #92	; 0x5c
 80a354c:	f001 f9c2 	bl	80a48d4 <__match>
 80a3550:	b1c8      	cbz	r0, 80a3586 <_strtod_r+0x386>
 80a3552:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a3554:	781b      	ldrb	r3, [r3, #0]
 80a3556:	2b28      	cmp	r3, #40	; 0x28
 80a3558:	d10f      	bne.n	80a357a <_strtod_r+0x37a>
 80a355a:	aa1a      	add	r2, sp, #104	; 0x68
 80a355c:	499e      	ldr	r1, [pc, #632]	; (80a37d8 <_strtod_r+0x5d8>)
 80a355e:	a817      	add	r0, sp, #92	; 0x5c
 80a3560:	f001 f9cb 	bl	80a48fa <__hexnan>
 80a3564:	2805      	cmp	r0, #5
 80a3566:	d108      	bne.n	80a357a <_strtod_r+0x37a>
 80a3568:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80a356a:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80a356e:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80a3572:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80a3576:	f000 bc0c 	b.w	80a3d92 <_strtod_r+0xb92>
 80a357a:	f8df 9274 	ldr.w	r9, [pc, #628]	; 80a37f0 <_strtod_r+0x5f0>
 80a357e:	f04f 0800 	mov.w	r8, #0
 80a3582:	f000 bc06 	b.w	80a3d92 <_strtod_r+0xb92>
 80a3586:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80a3588:	9417      	str	r4, [sp, #92]	; 0x5c
 80a358a:	2b00      	cmp	r3, #0
 80a358c:	f000 840c 	beq.w	80a3da8 <_strtod_r+0xba8>
 80a3590:	2300      	movs	r3, #0
 80a3592:	930c      	str	r3, [sp, #48]	; 0x30
 80a3594:	e3ff      	b.n	80a3d96 <_strtod_r+0xb96>
 80a3596:	462c      	mov	r4, r5
 80a3598:	f1bb 0f00 	cmp.w	fp, #0
 80a359c:	bf08      	it	eq
 80a359e:	46ab      	moveq	fp, r5
 80a35a0:	9804      	ldr	r0, [sp, #16]
 80a35a2:	2d10      	cmp	r5, #16
 80a35a4:	bfa8      	it	ge
 80a35a6:	2410      	movge	r4, #16
 80a35a8:	1ab7      	subs	r7, r6, r2
 80a35aa:	f7fe fedd 	bl	80a2368 <__aeabi_ui2d>
 80a35ae:	2c09      	cmp	r4, #9
 80a35b0:	4680      	mov	r8, r0
 80a35b2:	4689      	mov	r9, r1
 80a35b4:	dd13      	ble.n	80a35de <_strtod_r+0x3de>
 80a35b6:	4b89      	ldr	r3, [pc, #548]	; (80a37dc <_strtod_r+0x5dc>)
 80a35b8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80a35bc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80a35c0:	f7fe ff48 	bl	80a2454 <__aeabi_dmul>
 80a35c4:	4680      	mov	r8, r0
 80a35c6:	9802      	ldr	r0, [sp, #8]
 80a35c8:	4689      	mov	r9, r1
 80a35ca:	f7fe fecd 	bl	80a2368 <__aeabi_ui2d>
 80a35ce:	4602      	mov	r2, r0
 80a35d0:	460b      	mov	r3, r1
 80a35d2:	4640      	mov	r0, r8
 80a35d4:	4649      	mov	r1, r9
 80a35d6:	f7fe fd8b 	bl	80a20f0 <__adddf3>
 80a35da:	4680      	mov	r8, r0
 80a35dc:	4689      	mov	r9, r1
 80a35de:	2d0f      	cmp	r5, #15
 80a35e0:	dc33      	bgt.n	80a364a <_strtod_r+0x44a>
 80a35e2:	2f00      	cmp	r7, #0
 80a35e4:	f000 83d5 	beq.w	80a3d92 <_strtod_r+0xb92>
 80a35e8:	dd22      	ble.n	80a3630 <_strtod_r+0x430>
 80a35ea:	2f16      	cmp	r7, #22
 80a35ec:	dc07      	bgt.n	80a35fe <_strtod_r+0x3fe>
 80a35ee:	4d7b      	ldr	r5, [pc, #492]	; (80a37dc <_strtod_r+0x5dc>)
 80a35f0:	4642      	mov	r2, r8
 80a35f2:	eb05 01c7 	add.w	r1, r5, r7, lsl #3
 80a35f6:	464b      	mov	r3, r9
 80a35f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a35fc:	e013      	b.n	80a3626 <_strtod_r+0x426>
 80a35fe:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80a3602:	429f      	cmp	r7, r3
 80a3604:	dc21      	bgt.n	80a364a <_strtod_r+0x44a>
 80a3606:	4c75      	ldr	r4, [pc, #468]	; (80a37dc <_strtod_r+0x5dc>)
 80a3608:	f1c5 050f 	rsb	r5, r5, #15
 80a360c:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80a3610:	1b7d      	subs	r5, r7, r5
 80a3612:	4642      	mov	r2, r8
 80a3614:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a3618:	464b      	mov	r3, r9
 80a361a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80a361e:	f7fe ff19 	bl	80a2454 <__aeabi_dmul>
 80a3622:	e9d4 2300 	ldrd	r2, r3, [r4]
 80a3626:	f7fe ff15 	bl	80a2454 <__aeabi_dmul>
 80a362a:	4680      	mov	r8, r0
 80a362c:	4689      	mov	r9, r1
 80a362e:	e3b0      	b.n	80a3d92 <_strtod_r+0xb92>
 80a3630:	f117 0f16 	cmn.w	r7, #22
 80a3634:	db09      	blt.n	80a364a <_strtod_r+0x44a>
 80a3636:	4d69      	ldr	r5, [pc, #420]	; (80a37dc <_strtod_r+0x5dc>)
 80a3638:	4640      	mov	r0, r8
 80a363a:	eba5 03c7 	sub.w	r3, r5, r7, lsl #3
 80a363e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3642:	4649      	mov	r1, r9
 80a3644:	f7ff f830 	bl	80a26a8 <__aeabi_ddiv>
 80a3648:	e7ef      	b.n	80a362a <_strtod_r+0x42a>
 80a364a:	1b2c      	subs	r4, r5, r4
 80a364c:	443c      	add	r4, r7
 80a364e:	2c00      	cmp	r4, #0
 80a3650:	dd5d      	ble.n	80a370e <_strtod_r+0x50e>
 80a3652:	f014 010f 	ands.w	r1, r4, #15
 80a3656:	d00a      	beq.n	80a366e <_strtod_r+0x46e>
 80a3658:	4b60      	ldr	r3, [pc, #384]	; (80a37dc <_strtod_r+0x5dc>)
 80a365a:	4642      	mov	r2, r8
 80a365c:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 80a3660:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a3664:	464b      	mov	r3, r9
 80a3666:	f7fe fef5 	bl	80a2454 <__aeabi_dmul>
 80a366a:	4680      	mov	r8, r0
 80a366c:	4689      	mov	r9, r1
 80a366e:	f034 040f 	bics.w	r4, r4, #15
 80a3672:	f000 80c1 	beq.w	80a37f8 <_strtod_r+0x5f8>
 80a3676:	f5b4 7f9a 	cmp.w	r4, #308	; 0x134
 80a367a:	dd0f      	ble.n	80a369c <_strtod_r+0x49c>
 80a367c:	f04f 0b00 	mov.w	fp, #0
 80a3680:	f8cd b008 	str.w	fp, [sp, #8]
 80a3684:	f8cd b014 	str.w	fp, [sp, #20]
 80a3688:	f8cd b010 	str.w	fp, [sp, #16]
 80a368c:	2322      	movs	r3, #34	; 0x22
 80a368e:	f8ca 3000 	str.w	r3, [sl]
 80a3692:	f8df 9158 	ldr.w	r9, [pc, #344]	; 80a37ec <_strtod_r+0x5ec>
 80a3696:	f04f 0800 	mov.w	r8, #0
 80a369a:	e189      	b.n	80a39b0 <_strtod_r+0x7b0>
 80a369c:	4640      	mov	r0, r8
 80a369e:	4649      	mov	r1, r9
 80a36a0:	2300      	movs	r3, #0
 80a36a2:	4e4f      	ldr	r6, [pc, #316]	; (80a37e0 <_strtod_r+0x5e0>)
 80a36a4:	1124      	asrs	r4, r4, #4
 80a36a6:	9302      	str	r3, [sp, #8]
 80a36a8:	2c01      	cmp	r4, #1
 80a36aa:	dd0c      	ble.n	80a36c6 <_strtod_r+0x4c6>
 80a36ac:	07e2      	lsls	r2, r4, #31
 80a36ae:	d504      	bpl.n	80a36ba <_strtod_r+0x4ba>
 80a36b0:	e9d6 2300 	ldrd	r2, r3, [r6]
 80a36b4:	f7fe fece 	bl	80a2454 <__aeabi_dmul>
 80a36b8:	2301      	movs	r3, #1
 80a36ba:	9a02      	ldr	r2, [sp, #8]
 80a36bc:	1064      	asrs	r4, r4, #1
 80a36be:	3201      	adds	r2, #1
 80a36c0:	9202      	str	r2, [sp, #8]
 80a36c2:	3608      	adds	r6, #8
 80a36c4:	e7f0      	b.n	80a36a8 <_strtod_r+0x4a8>
 80a36c6:	b10b      	cbz	r3, 80a36cc <_strtod_r+0x4cc>
 80a36c8:	4680      	mov	r8, r0
 80a36ca:	4689      	mov	r9, r1
 80a36cc:	4b44      	ldr	r3, [pc, #272]	; (80a37e0 <_strtod_r+0x5e0>)
 80a36ce:	9a02      	ldr	r2, [sp, #8]
 80a36d0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80a36d4:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 80a36d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a36dc:	4642      	mov	r2, r8
 80a36de:	464b      	mov	r3, r9
 80a36e0:	f7fe feb8 	bl	80a2454 <__aeabi_dmul>
 80a36e4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80a36e8:	4689      	mov	r9, r1
 80a36ea:	460a      	mov	r2, r1
 80a36ec:	0d1b      	lsrs	r3, r3, #20
 80a36ee:	493d      	ldr	r1, [pc, #244]	; (80a37e4 <_strtod_r+0x5e4>)
 80a36f0:	051b      	lsls	r3, r3, #20
 80a36f2:	428b      	cmp	r3, r1
 80a36f4:	4680      	mov	r8, r0
 80a36f6:	d8c1      	bhi.n	80a367c <_strtod_r+0x47c>
 80a36f8:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80a36fc:	428b      	cmp	r3, r1
 80a36fe:	bf86      	itte	hi
 80a3700:	f8df 90f0 	ldrhi.w	r9, [pc, #240]	; 80a37f4 <_strtod_r+0x5f4>
 80a3704:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 80a3708:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80a370c:	e074      	b.n	80a37f8 <_strtod_r+0x5f8>
 80a370e:	d073      	beq.n	80a37f8 <_strtod_r+0x5f8>
 80a3710:	4264      	negs	r4, r4
 80a3712:	f014 020f 	ands.w	r2, r4, #15
 80a3716:	d00a      	beq.n	80a372e <_strtod_r+0x52e>
 80a3718:	4b30      	ldr	r3, [pc, #192]	; (80a37dc <_strtod_r+0x5dc>)
 80a371a:	4640      	mov	r0, r8
 80a371c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80a3720:	4649      	mov	r1, r9
 80a3722:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3726:	f7fe ffbf 	bl	80a26a8 <__aeabi_ddiv>
 80a372a:	4680      	mov	r8, r0
 80a372c:	4689      	mov	r9, r1
 80a372e:	1124      	asrs	r4, r4, #4
 80a3730:	d062      	beq.n	80a37f8 <_strtod_r+0x5f8>
 80a3732:	2c1f      	cmp	r4, #31
 80a3734:	dd08      	ble.n	80a3748 <_strtod_r+0x548>
 80a3736:	f04f 0b00 	mov.w	fp, #0
 80a373a:	f8cd b008 	str.w	fp, [sp, #8]
 80a373e:	f8cd b014 	str.w	fp, [sp, #20]
 80a3742:	f8cd b010 	str.w	fp, [sp, #16]
 80a3746:	e12c      	b.n	80a39a2 <_strtod_r+0x7a2>
 80a3748:	4640      	mov	r0, r8
 80a374a:	4649      	mov	r1, r9
 80a374c:	f014 0f10 	tst.w	r4, #16
 80a3750:	bf0c      	ite	eq
 80a3752:	2300      	moveq	r3, #0
 80a3754:	236a      	movne	r3, #106	; 0x6a
 80a3756:	4e24      	ldr	r6, [pc, #144]	; (80a37e8 <_strtod_r+0x5e8>)
 80a3758:	9303      	str	r3, [sp, #12]
 80a375a:	2300      	movs	r3, #0
 80a375c:	2c00      	cmp	r4, #0
 80a375e:	dd09      	ble.n	80a3774 <_strtod_r+0x574>
 80a3760:	07e2      	lsls	r2, r4, #31
 80a3762:	d504      	bpl.n	80a376e <_strtod_r+0x56e>
 80a3764:	e9d6 2300 	ldrd	r2, r3, [r6]
 80a3768:	f7fe fe74 	bl	80a2454 <__aeabi_dmul>
 80a376c:	2301      	movs	r3, #1
 80a376e:	1064      	asrs	r4, r4, #1
 80a3770:	3608      	adds	r6, #8
 80a3772:	e7f3      	b.n	80a375c <_strtod_r+0x55c>
 80a3774:	b10b      	cbz	r3, 80a377a <_strtod_r+0x57a>
 80a3776:	4680      	mov	r8, r0
 80a3778:	4689      	mov	r9, r1
 80a377a:	9b03      	ldr	r3, [sp, #12]
 80a377c:	b1eb      	cbz	r3, 80a37ba <_strtod_r+0x5ba>
 80a377e:	f3c9 530a 	ubfx	r3, r9, #20, #11
 80a3782:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80a3786:	2b00      	cmp	r3, #0
 80a3788:	4649      	mov	r1, r9
 80a378a:	dd16      	ble.n	80a37ba <_strtod_r+0x5ba>
 80a378c:	2b1f      	cmp	r3, #31
 80a378e:	dd0e      	ble.n	80a37ae <_strtod_r+0x5ae>
 80a3790:	2b34      	cmp	r3, #52	; 0x34
 80a3792:	bfde      	ittt	le
 80a3794:	3b20      	suble	r3, #32
 80a3796:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 80a379a:	fa02 f303 	lslle.w	r3, r2, r3
 80a379e:	f04f 0800 	mov.w	r8, #0
 80a37a2:	bfcc      	ite	gt
 80a37a4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80a37a8:	ea03 0901 	andle.w	r9, r3, r1
 80a37ac:	e005      	b.n	80a37ba <_strtod_r+0x5ba>
 80a37ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80a37b2:	fa02 f303 	lsl.w	r3, r2, r3
 80a37b6:	ea03 0808 	and.w	r8, r3, r8
 80a37ba:	2200      	movs	r2, #0
 80a37bc:	2300      	movs	r3, #0
 80a37be:	4640      	mov	r0, r8
 80a37c0:	4649      	mov	r1, r9
 80a37c2:	f7ff f8af 	bl	80a2924 <__aeabi_dcmpeq>
 80a37c6:	2800      	cmp	r0, #0
 80a37c8:	d1b5      	bne.n	80a3736 <_strtod_r+0x536>
 80a37ca:	e017      	b.n	80a37fc <_strtod_r+0x5fc>
 80a37cc:	080a5bc4 	.word	0x080a5bc4
 80a37d0:	080a5bc7 	.word	0x080a5bc7
 80a37d4:	080a5bcd 	.word	0x080a5bcd
 80a37d8:	080a5bd0 	.word	0x080a5bd0
 80a37dc:	080a5c50 	.word	0x080a5c50
 80a37e0:	080a5d18 	.word	0x080a5d18
 80a37e4:	7ca00000 	.word	0x7ca00000
 80a37e8:	080a5be8 	.word	0x080a5be8
 80a37ec:	7ff00000 	.word	0x7ff00000
 80a37f0:	fff80000 	.word	0xfff80000
 80a37f4:	7fefffff 	.word	0x7fefffff
 80a37f8:	2300      	movs	r3, #0
 80a37fa:	9303      	str	r3, [sp, #12]
 80a37fc:	9b04      	ldr	r3, [sp, #16]
 80a37fe:	465a      	mov	r2, fp
 80a3800:	9300      	str	r3, [sp, #0]
 80a3802:	9906      	ldr	r1, [sp, #24]
 80a3804:	462b      	mov	r3, r5
 80a3806:	4650      	mov	r0, sl
 80a3808:	f001 fa6b 	bl	80a4ce2 <__s2b>
 80a380c:	9005      	str	r0, [sp, #20]
 80a380e:	2800      	cmp	r0, #0
 80a3810:	f43f af34 	beq.w	80a367c <_strtod_r+0x47c>
 80a3814:	2f00      	cmp	r7, #0
 80a3816:	f1c7 0300 	rsb	r3, r7, #0
 80a381a:	bfa8      	it	ge
 80a381c:	2300      	movge	r3, #0
 80a381e:	930d      	str	r3, [sp, #52]	; 0x34
 80a3820:	f04f 0b00 	mov.w	fp, #0
 80a3824:	ea27 73e7 	bic.w	r3, r7, r7, asr #31
 80a3828:	9312      	str	r3, [sp, #72]	; 0x48
 80a382a:	f8cd b008 	str.w	fp, [sp, #8]
 80a382e:	9b05      	ldr	r3, [sp, #20]
 80a3830:	4650      	mov	r0, sl
 80a3832:	6859      	ldr	r1, [r3, #4]
 80a3834:	f001 f9ce 	bl	80a4bd4 <_Balloc>
 80a3838:	9004      	str	r0, [sp, #16]
 80a383a:	2800      	cmp	r0, #0
 80a383c:	f43f af26 	beq.w	80a368c <_strtod_r+0x48c>
 80a3840:	9b05      	ldr	r3, [sp, #20]
 80a3842:	300c      	adds	r0, #12
 80a3844:	691a      	ldr	r2, [r3, #16]
 80a3846:	f103 010c 	add.w	r1, r3, #12
 80a384a:	3202      	adds	r2, #2
 80a384c:	0092      	lsls	r2, r2, #2
 80a384e:	f7ff fc2d 	bl	80a30ac <memcpy>
 80a3852:	ab1a      	add	r3, sp, #104	; 0x68
 80a3854:	9301      	str	r3, [sp, #4]
 80a3856:	ab19      	add	r3, sp, #100	; 0x64
 80a3858:	9300      	str	r3, [sp, #0]
 80a385a:	4642      	mov	r2, r8
 80a385c:	464b      	mov	r3, r9
 80a385e:	4650      	mov	r0, sl
 80a3860:	e9cd 8908 	strd	r8, r9, [sp, #32]
 80a3864:	f001 fced 	bl	80a5242 <__d2b>
 80a3868:	9018      	str	r0, [sp, #96]	; 0x60
 80a386a:	2800      	cmp	r0, #0
 80a386c:	f43f af0e 	beq.w	80a368c <_strtod_r+0x48c>
 80a3870:	2101      	movs	r1, #1
 80a3872:	4650      	mov	r0, sl
 80a3874:	f001 fac0 	bl	80a4df8 <__i2b>
 80a3878:	9002      	str	r0, [sp, #8]
 80a387a:	2800      	cmp	r0, #0
 80a387c:	f43f af06 	beq.w	80a368c <_strtod_r+0x48c>
 80a3880:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80a3882:	9903      	ldr	r1, [sp, #12]
 80a3884:	2b00      	cmp	r3, #0
 80a3886:	bfac      	ite	ge
 80a3888:	9a0d      	ldrge	r2, [sp, #52]	; 0x34
 80a388a:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80a388c:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 80a388e:	bfac      	ite	ge
 80a3890:	18d6      	addge	r6, r2, r3
 80a3892:	1ad2      	sublt	r2, r2, r3
 80a3894:	eba3 0301 	sub.w	r3, r3, r1
 80a3898:	4423      	add	r3, r4
 80a389a:	49b1      	ldr	r1, [pc, #708]	; (80a3b60 <_strtod_r+0x960>)
 80a389c:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80a38a0:	bfac      	ite	ge
 80a38a2:	9a12      	ldrge	r2, [sp, #72]	; 0x48
 80a38a4:	9e0d      	ldrlt	r6, [sp, #52]	; 0x34
 80a38a6:	428b      	cmp	r3, r1
 80a38a8:	f1c4 0436 	rsb	r4, r4, #54	; 0x36
 80a38ac:	f280 8085 	bge.w	80a39ba <_strtod_r+0x7ba>
 80a38b0:	1ac9      	subs	r1, r1, r3
 80a38b2:	291f      	cmp	r1, #31
 80a38b4:	bfc8      	it	gt
 80a38b6:	4dab      	ldrgt	r5, [pc, #684]	; (80a3b64 <_strtod_r+0x964>)
 80a38b8:	f04f 0701 	mov.w	r7, #1
 80a38bc:	bfd4      	ite	le
 80a38be:	fa07 f301 	lslle.w	r3, r7, r1
 80a38c2:	1aed      	subgt	r5, r5, r3
 80a38c4:	eba4 0401 	sub.w	r4, r4, r1
 80a38c8:	bfd9      	ittee	le
 80a38ca:	9307      	strle	r3, [sp, #28]
 80a38cc:	2500      	movle	r5, #0
 80a38ce:	fa07 f505 	lslgt.w	r5, r7, r5
 80a38d2:	9707      	strgt	r7, [sp, #28]
 80a38d4:	1937      	adds	r7, r6, r4
 80a38d6:	9b03      	ldr	r3, [sp, #12]
 80a38d8:	42be      	cmp	r6, r7
 80a38da:	4414      	add	r4, r2
 80a38dc:	441c      	add	r4, r3
 80a38de:	4633      	mov	r3, r6
 80a38e0:	bfa8      	it	ge
 80a38e2:	463b      	movge	r3, r7
 80a38e4:	42a3      	cmp	r3, r4
 80a38e6:	bfa8      	it	ge
 80a38e8:	4623      	movge	r3, r4
 80a38ea:	2b00      	cmp	r3, #0
 80a38ec:	bfc2      	ittt	gt
 80a38ee:	1aff      	subgt	r7, r7, r3
 80a38f0:	1ae4      	subgt	r4, r4, r3
 80a38f2:	1af6      	subgt	r6, r6, r3
 80a38f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80a38f6:	2b00      	cmp	r3, #0
 80a38f8:	d163      	bne.n	80a39c2 <_strtod_r+0x7c2>
 80a38fa:	2f00      	cmp	r7, #0
 80a38fc:	dc7a      	bgt.n	80a39f4 <_strtod_r+0x7f4>
 80a38fe:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80a3900:	2b00      	cmp	r3, #0
 80a3902:	f040 8081 	bne.w	80a3a08 <_strtod_r+0x808>
 80a3906:	2c00      	cmp	r4, #0
 80a3908:	f300 8088 	bgt.w	80a3a1c <_strtod_r+0x81c>
 80a390c:	2e00      	cmp	r6, #0
 80a390e:	f300 808f 	bgt.w	80a3a30 <_strtod_r+0x830>
 80a3912:	9a04      	ldr	r2, [sp, #16]
 80a3914:	9918      	ldr	r1, [sp, #96]	; 0x60
 80a3916:	4650      	mov	r0, sl
 80a3918:	f001 fbc3 	bl	80a50a2 <__mdiff>
 80a391c:	4683      	mov	fp, r0
 80a391e:	2800      	cmp	r0, #0
 80a3920:	f43f aeb4 	beq.w	80a368c <_strtod_r+0x48c>
 80a3924:	68c3      	ldr	r3, [r0, #12]
 80a3926:	2400      	movs	r4, #0
 80a3928:	60c4      	str	r4, [r0, #12]
 80a392a:	9902      	ldr	r1, [sp, #8]
 80a392c:	9306      	str	r3, [sp, #24]
 80a392e:	f001 fb9c 	bl	80a506a <__mcmp>
 80a3932:	42a0      	cmp	r0, r4
 80a3934:	f280 808b 	bge.w	80a3a4e <_strtod_r+0x84e>
 80a3938:	9b06      	ldr	r3, [sp, #24]
 80a393a:	2b00      	cmp	r3, #0
 80a393c:	f040 8202 	bne.w	80a3d44 <_strtod_r+0xb44>
 80a3940:	f1b8 0f00 	cmp.w	r8, #0
 80a3944:	f040 81fe 	bne.w	80a3d44 <_strtod_r+0xb44>
 80a3948:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80a394c:	2b00      	cmp	r3, #0
 80a394e:	f040 81f9 	bne.w	80a3d44 <_strtod_r+0xb44>
 80a3952:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80a3956:	0d1b      	lsrs	r3, r3, #20
 80a3958:	051b      	lsls	r3, r3, #20
 80a395a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80a395e:	f240 81f1 	bls.w	80a3d44 <_strtod_r+0xb44>
 80a3962:	f8db 3014 	ldr.w	r3, [fp, #20]
 80a3966:	2b00      	cmp	r3, #0
 80a3968:	d06c      	beq.n	80a3a44 <_strtod_r+0x844>
 80a396a:	4659      	mov	r1, fp
 80a396c:	2201      	movs	r2, #1
 80a396e:	4650      	mov	r0, sl
 80a3970:	f001 fb2a 	bl	80a4fc8 <__lshift>
 80a3974:	9902      	ldr	r1, [sp, #8]
 80a3976:	4683      	mov	fp, r0
 80a3978:	f001 fb77 	bl	80a506a <__mcmp>
 80a397c:	2800      	cmp	r0, #0
 80a397e:	f340 81e1 	ble.w	80a3d44 <_strtod_r+0xb44>
 80a3982:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80a3986:	9a03      	ldr	r2, [sp, #12]
 80a3988:	0d1b      	lsrs	r3, r3, #20
 80a398a:	051b      	lsls	r3, r3, #20
 80a398c:	2a00      	cmp	r2, #0
 80a398e:	f000 808d 	beq.w	80a3aac <_strtod_r+0x8ac>
 80a3992:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80a3996:	f300 8089 	bgt.w	80a3aac <_strtod_r+0x8ac>
 80a399a:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
 80a399e:	f300 81d3 	bgt.w	80a3d48 <_strtod_r+0xb48>
 80a39a2:	2322      	movs	r3, #34	; 0x22
 80a39a4:	f04f 0800 	mov.w	r8, #0
 80a39a8:	f04f 0900 	mov.w	r9, #0
 80a39ac:	f8ca 3000 	str.w	r3, [sl]
 80a39b0:	9b05      	ldr	r3, [sp, #20]
 80a39b2:	2b00      	cmp	r3, #0
 80a39b4:	f040 81d9 	bne.w	80a3d6a <_strtod_r+0xb6a>
 80a39b8:	e1eb      	b.n	80a3d92 <_strtod_r+0xb92>
 80a39ba:	2301      	movs	r3, #1
 80a39bc:	2500      	movs	r5, #0
 80a39be:	9307      	str	r3, [sp, #28]
 80a39c0:	e788      	b.n	80a38d4 <_strtod_r+0x6d4>
 80a39c2:	461a      	mov	r2, r3
 80a39c4:	9902      	ldr	r1, [sp, #8]
 80a39c6:	4650      	mov	r0, sl
 80a39c8:	f001 fab0 	bl	80a4f2c <__pow5mult>
 80a39cc:	9002      	str	r0, [sp, #8]
 80a39ce:	2800      	cmp	r0, #0
 80a39d0:	f43f ae5c 	beq.w	80a368c <_strtod_r+0x48c>
 80a39d4:	4601      	mov	r1, r0
 80a39d6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80a39d8:	4650      	mov	r0, sl
 80a39da:	f001 fa16 	bl	80a4e0a <__multiply>
 80a39de:	9006      	str	r0, [sp, #24]
 80a39e0:	2800      	cmp	r0, #0
 80a39e2:	f43f ae53 	beq.w	80a368c <_strtod_r+0x48c>
 80a39e6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80a39e8:	4650      	mov	r0, sl
 80a39ea:	f001 f928 	bl	80a4c3e <_Bfree>
 80a39ee:	9b06      	ldr	r3, [sp, #24]
 80a39f0:	9318      	str	r3, [sp, #96]	; 0x60
 80a39f2:	e782      	b.n	80a38fa <_strtod_r+0x6fa>
 80a39f4:	463a      	mov	r2, r7
 80a39f6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80a39f8:	4650      	mov	r0, sl
 80a39fa:	f001 fae5 	bl	80a4fc8 <__lshift>
 80a39fe:	9018      	str	r0, [sp, #96]	; 0x60
 80a3a00:	2800      	cmp	r0, #0
 80a3a02:	f47f af7c 	bne.w	80a38fe <_strtod_r+0x6fe>
 80a3a06:	e641      	b.n	80a368c <_strtod_r+0x48c>
 80a3a08:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80a3a0a:	9904      	ldr	r1, [sp, #16]
 80a3a0c:	4650      	mov	r0, sl
 80a3a0e:	f001 fa8d 	bl	80a4f2c <__pow5mult>
 80a3a12:	9004      	str	r0, [sp, #16]
 80a3a14:	2800      	cmp	r0, #0
 80a3a16:	f47f af76 	bne.w	80a3906 <_strtod_r+0x706>
 80a3a1a:	e637      	b.n	80a368c <_strtod_r+0x48c>
 80a3a1c:	4622      	mov	r2, r4
 80a3a1e:	9904      	ldr	r1, [sp, #16]
 80a3a20:	4650      	mov	r0, sl
 80a3a22:	f001 fad1 	bl	80a4fc8 <__lshift>
 80a3a26:	9004      	str	r0, [sp, #16]
 80a3a28:	2800      	cmp	r0, #0
 80a3a2a:	f47f af6f 	bne.w	80a390c <_strtod_r+0x70c>
 80a3a2e:	e62d      	b.n	80a368c <_strtod_r+0x48c>
 80a3a30:	4632      	mov	r2, r6
 80a3a32:	9902      	ldr	r1, [sp, #8]
 80a3a34:	4650      	mov	r0, sl
 80a3a36:	f001 fac7 	bl	80a4fc8 <__lshift>
 80a3a3a:	9002      	str	r0, [sp, #8]
 80a3a3c:	2800      	cmp	r0, #0
 80a3a3e:	f47f af68 	bne.w	80a3912 <_strtod_r+0x712>
 80a3a42:	e623      	b.n	80a368c <_strtod_r+0x48c>
 80a3a44:	f8db 3010 	ldr.w	r3, [fp, #16]
 80a3a48:	2b01      	cmp	r3, #1
 80a3a4a:	dc8e      	bgt.n	80a396a <_strtod_r+0x76a>
 80a3a4c:	e17a      	b.n	80a3d44 <_strtod_r+0xb44>
 80a3a4e:	d161      	bne.n	80a3b14 <_strtod_r+0x914>
 80a3a50:	9a06      	ldr	r2, [sp, #24]
 80a3a52:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80a3a56:	b322      	cbz	r2, 80a3aa2 <_strtod_r+0x8a2>
 80a3a58:	4943      	ldr	r1, [pc, #268]	; (80a3b68 <_strtod_r+0x968>)
 80a3a5a:	464a      	mov	r2, r9
 80a3a5c:	428b      	cmp	r3, r1
 80a3a5e:	d12e      	bne.n	80a3abe <_strtod_r+0x8be>
 80a3a60:	9b03      	ldr	r3, [sp, #12]
 80a3a62:	4641      	mov	r1, r8
 80a3a64:	b163      	cbz	r3, 80a3a80 <_strtod_r+0x880>
 80a3a66:	4b41      	ldr	r3, [pc, #260]	; (80a3b6c <_strtod_r+0x96c>)
 80a3a68:	4013      	ands	r3, r2
 80a3a6a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80a3a6e:	d807      	bhi.n	80a3a80 <_strtod_r+0x880>
 80a3a70:	0d1b      	lsrs	r3, r3, #20
 80a3a72:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80a3a76:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a3a7a:	fa00 f303 	lsl.w	r3, r0, r3
 80a3a7e:	e001      	b.n	80a3a84 <_strtod_r+0x884>
 80a3a80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80a3a84:	428b      	cmp	r3, r1
 80a3a86:	d11a      	bne.n	80a3abe <_strtod_r+0x8be>
 80a3a88:	4939      	ldr	r1, [pc, #228]	; (80a3b70 <_strtod_r+0x970>)
 80a3a8a:	428a      	cmp	r2, r1
 80a3a8c:	d102      	bne.n	80a3a94 <_strtod_r+0x894>
 80a3a8e:	3301      	adds	r3, #1
 80a3a90:	f43f adfc 	beq.w	80a368c <_strtod_r+0x48c>
 80a3a94:	4b35      	ldr	r3, [pc, #212]	; (80a3b6c <_strtod_r+0x96c>)
 80a3a96:	f04f 0800 	mov.w	r8, #0
 80a3a9a:	4013      	ands	r3, r2
 80a3a9c:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 80a3aa0:	e150      	b.n	80a3d44 <_strtod_r+0xb44>
 80a3aa2:	b963      	cbnz	r3, 80a3abe <_strtod_r+0x8be>
 80a3aa4:	f1b8 0f00 	cmp.w	r8, #0
 80a3aa8:	d109      	bne.n	80a3abe <_strtod_r+0x8be>
 80a3aaa:	e76a      	b.n	80a3982 <_strtod_r+0x782>
 80a3aac:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80a3ab0:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80a3ab4:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80a3ab8:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80a3abc:	e142      	b.n	80a3d44 <_strtod_r+0xb44>
 80a3abe:	b115      	cbz	r5, 80a3ac6 <_strtod_r+0x8c6>
 80a3ac0:	ea15 0f09 	tst.w	r5, r9
 80a3ac4:	e002      	b.n	80a3acc <_strtod_r+0x8cc>
 80a3ac6:	9b07      	ldr	r3, [sp, #28]
 80a3ac8:	ea13 0f08 	tst.w	r3, r8
 80a3acc:	f000 813a 	beq.w	80a3d44 <_strtod_r+0xb44>
 80a3ad0:	9b06      	ldr	r3, [sp, #24]
 80a3ad2:	9a03      	ldr	r2, [sp, #12]
 80a3ad4:	4640      	mov	r0, r8
 80a3ad6:	4649      	mov	r1, r9
 80a3ad8:	b153      	cbz	r3, 80a3af0 <_strtod_r+0x8f0>
 80a3ada:	f7ff fb6d 	bl	80a31b8 <sulp>
 80a3ade:	4602      	mov	r2, r0
 80a3ae0:	460b      	mov	r3, r1
 80a3ae2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80a3ae6:	f7fe fb03 	bl	80a20f0 <__adddf3>
 80a3aea:	4680      	mov	r8, r0
 80a3aec:	4689      	mov	r9, r1
 80a3aee:	e129      	b.n	80a3d44 <_strtod_r+0xb44>
 80a3af0:	f7ff fb62 	bl	80a31b8 <sulp>
 80a3af4:	4602      	mov	r2, r0
 80a3af6:	460b      	mov	r3, r1
 80a3af8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80a3afc:	f7fe faf6 	bl	80a20ec <__aeabi_dsub>
 80a3b00:	2200      	movs	r2, #0
 80a3b02:	2300      	movs	r3, #0
 80a3b04:	4680      	mov	r8, r0
 80a3b06:	4689      	mov	r9, r1
 80a3b08:	f7fe ff0c 	bl	80a2924 <__aeabi_dcmpeq>
 80a3b0c:	2800      	cmp	r0, #0
 80a3b0e:	f47f af48 	bne.w	80a39a2 <_strtod_r+0x7a2>
 80a3b12:	e117      	b.n	80a3d44 <_strtod_r+0xb44>
 80a3b14:	9902      	ldr	r1, [sp, #8]
 80a3b16:	4658      	mov	r0, fp
 80a3b18:	f001 fbe1 	bl	80a52de <__ratio>
 80a3b1c:	2200      	movs	r2, #0
 80a3b1e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80a3b22:	4606      	mov	r6, r0
 80a3b24:	460f      	mov	r7, r1
 80a3b26:	f7fe ff11 	bl	80a294c <__aeabi_dcmple>
 80a3b2a:	2800      	cmp	r0, #0
 80a3b2c:	d03f      	beq.n	80a3bae <_strtod_r+0x9ae>
 80a3b2e:	9b06      	ldr	r3, [sp, #24]
 80a3b30:	b113      	cbz	r3, 80a3b38 <_strtod_r+0x938>
 80a3b32:	2600      	movs	r6, #0
 80a3b34:	4f0f      	ldr	r7, [pc, #60]	; (80a3b74 <_strtod_r+0x974>)
 80a3b36:	e010      	b.n	80a3b5a <_strtod_r+0x95a>
 80a3b38:	f1b8 0f00 	cmp.w	r8, #0
 80a3b3c:	d103      	bne.n	80a3b46 <_strtod_r+0x946>
 80a3b3e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80a3b42:	b93b      	cbnz	r3, 80a3b54 <_strtod_r+0x954>
 80a3b44:	e01a      	b.n	80a3b7c <_strtod_r+0x97c>
 80a3b46:	f1b8 0f01 	cmp.w	r8, #1
 80a3b4a:	d103      	bne.n	80a3b54 <_strtod_r+0x954>
 80a3b4c:	f1b9 0f00 	cmp.w	r9, #0
 80a3b50:	f43f af27 	beq.w	80a39a2 <_strtod_r+0x7a2>
 80a3b54:	4f08      	ldr	r7, [pc, #32]	; (80a3b78 <_strtod_r+0x978>)
 80a3b56:	2600      	movs	r6, #0
 80a3b58:	2400      	movs	r4, #0
 80a3b5a:	4d06      	ldr	r5, [pc, #24]	; (80a3b74 <_strtod_r+0x974>)
 80a3b5c:	e03c      	b.n	80a3bd8 <_strtod_r+0x9d8>
 80a3b5e:	bf00      	nop
 80a3b60:	fffffc02 	.word	0xfffffc02
 80a3b64:	fffffbe2 	.word	0xfffffbe2
 80a3b68:	000fffff 	.word	0x000fffff
 80a3b6c:	7ff00000 	.word	0x7ff00000
 80a3b70:	7fefffff 	.word	0x7fefffff
 80a3b74:	3ff00000 	.word	0x3ff00000
 80a3b78:	bff00000 	.word	0xbff00000
 80a3b7c:	2200      	movs	r2, #0
 80a3b7e:	4b9a      	ldr	r3, [pc, #616]	; (80a3de8 <_strtod_r+0xbe8>)
 80a3b80:	4630      	mov	r0, r6
 80a3b82:	4639      	mov	r1, r7
 80a3b84:	f7fe fed8 	bl	80a2938 <__aeabi_dcmplt>
 80a3b88:	b940      	cbnz	r0, 80a3b9c <_strtod_r+0x99c>
 80a3b8a:	2200      	movs	r2, #0
 80a3b8c:	4b97      	ldr	r3, [pc, #604]	; (80a3dec <_strtod_r+0xbec>)
 80a3b8e:	4630      	mov	r0, r6
 80a3b90:	4639      	mov	r1, r7
 80a3b92:	f7fe fc5f 	bl	80a2454 <__aeabi_dmul>
 80a3b96:	4604      	mov	r4, r0
 80a3b98:	460d      	mov	r5, r1
 80a3b9a:	e001      	b.n	80a3ba0 <_strtod_r+0x9a0>
 80a3b9c:	9c06      	ldr	r4, [sp, #24]
 80a3b9e:	4d93      	ldr	r5, [pc, #588]	; (80a3dec <_strtod_r+0xbec>)
 80a3ba0:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80a3ba4:	9414      	str	r4, [sp, #80]	; 0x50
 80a3ba6:	9315      	str	r3, [sp, #84]	; 0x54
 80a3ba8:	e9dd 6714 	ldrd	r6, r7, [sp, #80]	; 0x50
 80a3bac:	e014      	b.n	80a3bd8 <_strtod_r+0x9d8>
 80a3bae:	4b8f      	ldr	r3, [pc, #572]	; (80a3dec <_strtod_r+0xbec>)
 80a3bb0:	2200      	movs	r2, #0
 80a3bb2:	4630      	mov	r0, r6
 80a3bb4:	4639      	mov	r1, r7
 80a3bb6:	f7fe fc4d 	bl	80a2454 <__aeabi_dmul>
 80a3bba:	9b06      	ldr	r3, [sp, #24]
 80a3bbc:	4604      	mov	r4, r0
 80a3bbe:	460d      	mov	r5, r1
 80a3bc0:	b923      	cbnz	r3, 80a3bcc <_strtod_r+0x9cc>
 80a3bc2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80a3bc6:	900e      	str	r0, [sp, #56]	; 0x38
 80a3bc8:	930f      	str	r3, [sp, #60]	; 0x3c
 80a3bca:	e003      	b.n	80a3bd4 <_strtod_r+0x9d4>
 80a3bcc:	4602      	mov	r2, r0
 80a3bce:	460b      	mov	r3, r1
 80a3bd0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80a3bd4:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
 80a3bd8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80a3bdc:	0d1b      	lsrs	r3, r3, #20
 80a3bde:	051b      	lsls	r3, r3, #20
 80a3be0:	9307      	str	r3, [sp, #28]
 80a3be2:	9a07      	ldr	r2, [sp, #28]
 80a3be4:	4b82      	ldr	r3, [pc, #520]	; (80a3df0 <_strtod_r+0xbf0>)
 80a3be6:	429a      	cmp	r2, r3
 80a3be8:	d12b      	bne.n	80a3c42 <_strtod_r+0xa42>
 80a3bea:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80a3bee:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80a3bf2:	4640      	mov	r0, r8
 80a3bf4:	4649      	mov	r1, r9
 80a3bf6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80a3bfa:	f001 fab1 	bl	80a5160 <__ulp>
 80a3bfe:	4602      	mov	r2, r0
 80a3c00:	460b      	mov	r3, r1
 80a3c02:	4630      	mov	r0, r6
 80a3c04:	4639      	mov	r1, r7
 80a3c06:	f7fe fc25 	bl	80a2454 <__aeabi_dmul>
 80a3c0a:	4642      	mov	r2, r8
 80a3c0c:	464b      	mov	r3, r9
 80a3c0e:	f7fe fa6f 	bl	80a20f0 <__adddf3>
 80a3c12:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80a3c16:	0d1b      	lsrs	r3, r3, #20
 80a3c18:	4a76      	ldr	r2, [pc, #472]	; (80a3df4 <_strtod_r+0xbf4>)
 80a3c1a:	051b      	lsls	r3, r3, #20
 80a3c1c:	4293      	cmp	r3, r2
 80a3c1e:	4680      	mov	r8, r0
 80a3c20:	d90c      	bls.n	80a3c3c <_strtod_r+0xa3c>
 80a3c22:	4b75      	ldr	r3, [pc, #468]	; (80a3df8 <_strtod_r+0xbf8>)
 80a3c24:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80a3c26:	429a      	cmp	r2, r3
 80a3c28:	d103      	bne.n	80a3c32 <_strtod_r+0xa32>
 80a3c2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a3c2c:	3301      	adds	r3, #1
 80a3c2e:	f43f ad2d 	beq.w	80a368c <_strtod_r+0x48c>
 80a3c32:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 80a3df8 <_strtod_r+0xbf8>
 80a3c36:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80a3c3a:	e072      	b.n	80a3d22 <_strtod_r+0xb22>
 80a3c3c:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 80a3c40:	e039      	b.n	80a3cb6 <_strtod_r+0xab6>
 80a3c42:	9b03      	ldr	r3, [sp, #12]
 80a3c44:	b33b      	cbz	r3, 80a3c96 <_strtod_r+0xa96>
 80a3c46:	9b07      	ldr	r3, [sp, #28]
 80a3c48:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80a3c4c:	d823      	bhi.n	80a3c96 <_strtod_r+0xa96>
 80a3c4e:	a35e      	add	r3, pc, #376	; (adr r3, 80a3dc8 <_strtod_r+0xbc8>)
 80a3c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3c54:	4620      	mov	r0, r4
 80a3c56:	4629      	mov	r1, r5
 80a3c58:	f7fe fe78 	bl	80a294c <__aeabi_dcmple>
 80a3c5c:	b1b8      	cbz	r0, 80a3c8e <_strtod_r+0xa8e>
 80a3c5e:	4629      	mov	r1, r5
 80a3c60:	4620      	mov	r0, r4
 80a3c62:	f7fe feb9 	bl	80a29d8 <__aeabi_d2uiz>
 80a3c66:	2800      	cmp	r0, #0
 80a3c68:	bf08      	it	eq
 80a3c6a:	2001      	moveq	r0, #1
 80a3c6c:	f7fe fb7c 	bl	80a2368 <__aeabi_ui2d>
 80a3c70:	9b06      	ldr	r3, [sp, #24]
 80a3c72:	4604      	mov	r4, r0
 80a3c74:	460d      	mov	r5, r1
 80a3c76:	b923      	cbnz	r3, 80a3c82 <_strtod_r+0xa82>
 80a3c78:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80a3c7c:	9010      	str	r0, [sp, #64]	; 0x40
 80a3c7e:	9311      	str	r3, [sp, #68]	; 0x44
 80a3c80:	e003      	b.n	80a3c8a <_strtod_r+0xa8a>
 80a3c82:	4602      	mov	r2, r0
 80a3c84:	460b      	mov	r3, r1
 80a3c86:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80a3c8a:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80a3c8e:	9a07      	ldr	r2, [sp, #28]
 80a3c90:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 80a3c94:	1a9f      	subs	r7, r3, r2
 80a3c96:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80a3c9a:	f001 fa61 	bl	80a5160 <__ulp>
 80a3c9e:	4602      	mov	r2, r0
 80a3ca0:	460b      	mov	r3, r1
 80a3ca2:	4630      	mov	r0, r6
 80a3ca4:	4639      	mov	r1, r7
 80a3ca6:	f7fe fbd5 	bl	80a2454 <__aeabi_dmul>
 80a3caa:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80a3cae:	f7fe fa1f 	bl	80a20f0 <__adddf3>
 80a3cb2:	4680      	mov	r8, r0
 80a3cb4:	4689      	mov	r9, r1
 80a3cb6:	9b03      	ldr	r3, [sp, #12]
 80a3cb8:	bb9b      	cbnz	r3, 80a3d22 <_strtod_r+0xb22>
 80a3cba:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80a3cbe:	0d1b      	lsrs	r3, r3, #20
 80a3cc0:	9a07      	ldr	r2, [sp, #28]
 80a3cc2:	051b      	lsls	r3, r3, #20
 80a3cc4:	429a      	cmp	r2, r3
 80a3cc6:	464e      	mov	r6, r9
 80a3cc8:	d12b      	bne.n	80a3d22 <_strtod_r+0xb22>
 80a3cca:	4629      	mov	r1, r5
 80a3ccc:	4620      	mov	r0, r4
 80a3cce:	f7fe fe5b 	bl	80a2988 <__aeabi_d2iz>
 80a3cd2:	f7fe fb59 	bl	80a2388 <__aeabi_i2d>
 80a3cd6:	460b      	mov	r3, r1
 80a3cd8:	4602      	mov	r2, r0
 80a3cda:	4629      	mov	r1, r5
 80a3cdc:	4620      	mov	r0, r4
 80a3cde:	f7fe fa05 	bl	80a20ec <__aeabi_dsub>
 80a3ce2:	9b06      	ldr	r3, [sp, #24]
 80a3ce4:	4604      	mov	r4, r0
 80a3ce6:	460d      	mov	r5, r1
 80a3ce8:	b92b      	cbnz	r3, 80a3cf6 <_strtod_r+0xaf6>
 80a3cea:	f1b8 0f00 	cmp.w	r8, #0
 80a3cee:	d102      	bne.n	80a3cf6 <_strtod_r+0xaf6>
 80a3cf0:	f3c9 0613 	ubfx	r6, r9, #0, #20
 80a3cf4:	b17e      	cbz	r6, 80a3d16 <_strtod_r+0xb16>
 80a3cf6:	a336      	add	r3, pc, #216	; (adr r3, 80a3dd0 <_strtod_r+0xbd0>)
 80a3cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3cfc:	4620      	mov	r0, r4
 80a3cfe:	4629      	mov	r1, r5
 80a3d00:	f7fe fe1a 	bl	80a2938 <__aeabi_dcmplt>
 80a3d04:	bb88      	cbnz	r0, 80a3d6a <_strtod_r+0xb6a>
 80a3d06:	a334      	add	r3, pc, #208	; (adr r3, 80a3dd8 <_strtod_r+0xbd8>)
 80a3d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3d0c:	4620      	mov	r0, r4
 80a3d0e:	4629      	mov	r1, r5
 80a3d10:	f7fe fe30 	bl	80a2974 <__aeabi_dcmpgt>
 80a3d14:	e004      	b.n	80a3d20 <_strtod_r+0xb20>
 80a3d16:	a332      	add	r3, pc, #200	; (adr r3, 80a3de0 <_strtod_r+0xbe0>)
 80a3d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3d1c:	f7fe fe0c 	bl	80a2938 <__aeabi_dcmplt>
 80a3d20:	bb18      	cbnz	r0, 80a3d6a <_strtod_r+0xb6a>
 80a3d22:	9918      	ldr	r1, [sp, #96]	; 0x60
 80a3d24:	4650      	mov	r0, sl
 80a3d26:	f000 ff8a 	bl	80a4c3e <_Bfree>
 80a3d2a:	9904      	ldr	r1, [sp, #16]
 80a3d2c:	4650      	mov	r0, sl
 80a3d2e:	f000 ff86 	bl	80a4c3e <_Bfree>
 80a3d32:	9902      	ldr	r1, [sp, #8]
 80a3d34:	4650      	mov	r0, sl
 80a3d36:	f000 ff82 	bl	80a4c3e <_Bfree>
 80a3d3a:	4659      	mov	r1, fp
 80a3d3c:	4650      	mov	r0, sl
 80a3d3e:	f000 ff7e 	bl	80a4c3e <_Bfree>
 80a3d42:	e574      	b.n	80a382e <_strtod_r+0x62e>
 80a3d44:	9b03      	ldr	r3, [sp, #12]
 80a3d46:	b183      	cbz	r3, 80a3d6a <_strtod_r+0xb6a>
 80a3d48:	4b2c      	ldr	r3, [pc, #176]	; (80a3dfc <_strtod_r+0xbfc>)
 80a3d4a:	4640      	mov	r0, r8
 80a3d4c:	930b      	str	r3, [sp, #44]	; 0x2c
 80a3d4e:	2300      	movs	r3, #0
 80a3d50:	930a      	str	r3, [sp, #40]	; 0x28
 80a3d52:	4649      	mov	r1, r9
 80a3d54:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80a3d58:	f7fe fb7c 	bl	80a2454 <__aeabi_dmul>
 80a3d5c:	4680      	mov	r8, r0
 80a3d5e:	4689      	mov	r9, r1
 80a3d60:	b919      	cbnz	r1, 80a3d6a <_strtod_r+0xb6a>
 80a3d62:	b910      	cbnz	r0, 80a3d6a <_strtod_r+0xb6a>
 80a3d64:	2322      	movs	r3, #34	; 0x22
 80a3d66:	f8ca 3000 	str.w	r3, [sl]
 80a3d6a:	9918      	ldr	r1, [sp, #96]	; 0x60
 80a3d6c:	4650      	mov	r0, sl
 80a3d6e:	f000 ff66 	bl	80a4c3e <_Bfree>
 80a3d72:	9904      	ldr	r1, [sp, #16]
 80a3d74:	4650      	mov	r0, sl
 80a3d76:	f000 ff62 	bl	80a4c3e <_Bfree>
 80a3d7a:	9902      	ldr	r1, [sp, #8]
 80a3d7c:	4650      	mov	r0, sl
 80a3d7e:	f000 ff5e 	bl	80a4c3e <_Bfree>
 80a3d82:	9905      	ldr	r1, [sp, #20]
 80a3d84:	4650      	mov	r0, sl
 80a3d86:	f000 ff5a 	bl	80a4c3e <_Bfree>
 80a3d8a:	4659      	mov	r1, fp
 80a3d8c:	4650      	mov	r0, sl
 80a3d8e:	f000 ff56 	bl	80a4c3e <_Bfree>
 80a3d92:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80a3d94:	b113      	cbz	r3, 80a3d9c <_strtod_r+0xb9c>
 80a3d96:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a3d98:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80a3d9a:	6013      	str	r3, [r2, #0]
 80a3d9c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80a3d9e:	b11b      	cbz	r3, 80a3da8 <_strtod_r+0xba8>
 80a3da0:	4642      	mov	r2, r8
 80a3da2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80a3da6:	e007      	b.n	80a3db8 <_strtod_r+0xbb8>
 80a3da8:	4642      	mov	r2, r8
 80a3daa:	464b      	mov	r3, r9
 80a3dac:	e004      	b.n	80a3db8 <_strtod_r+0xbb8>
 80a3dae:	2500      	movs	r5, #0
 80a3db0:	462a      	mov	r2, r5
 80a3db2:	2101      	movs	r1, #1
 80a3db4:	f7ff bb47 	b.w	80a3446 <_strtod_r+0x246>
 80a3db8:	4610      	mov	r0, r2
 80a3dba:	4619      	mov	r1, r3
 80a3dbc:	b01d      	add	sp, #116	; 0x74
 80a3dbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a3dc2:	bf00      	nop
 80a3dc4:	f3af 8000 	nop.w
 80a3dc8:	ffc00000 	.word	0xffc00000
 80a3dcc:	41dfffff 	.word	0x41dfffff
 80a3dd0:	94a03595 	.word	0x94a03595
 80a3dd4:	3fdfffff 	.word	0x3fdfffff
 80a3dd8:	35afe535 	.word	0x35afe535
 80a3ddc:	3fe00000 	.word	0x3fe00000
 80a3de0:	94a03595 	.word	0x94a03595
 80a3de4:	3fcfffff 	.word	0x3fcfffff
 80a3de8:	3ff00000 	.word	0x3ff00000
 80a3dec:	3fe00000 	.word	0x3fe00000
 80a3df0:	7fe00000 	.word	0x7fe00000
 80a3df4:	7c9fffff 	.word	0x7c9fffff
 80a3df8:	7fefffff 	.word	0x7fefffff
 80a3dfc:	39500000 	.word	0x39500000

080a3e00 <strtod>:
 80a3e00:	4b02      	ldr	r3, [pc, #8]	; (80a3e0c <strtod+0xc>)
 80a3e02:	460a      	mov	r2, r1
 80a3e04:	4601      	mov	r1, r0
 80a3e06:	6818      	ldr	r0, [r3, #0]
 80a3e08:	f7ff b9fa 	b.w	80a3200 <_strtod_r>
 80a3e0c:	20000068 	.word	0x20000068

080a3e10 <__strtok_r>:
 80a3e10:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a3e12:	b948      	cbnz	r0, 80a3e28 <__strtok_r+0x18>
 80a3e14:	6810      	ldr	r0, [r2, #0]
 80a3e16:	b938      	cbnz	r0, 80a3e28 <__strtok_r+0x18>
 80a3e18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a3e1a:	f817 6b01 	ldrb.w	r6, [r7], #1
 80a3e1e:	b15e      	cbz	r6, 80a3e38 <__strtok_r+0x28>
 80a3e20:	42b5      	cmp	r5, r6
 80a3e22:	d1fa      	bne.n	80a3e1a <__strtok_r+0xa>
 80a3e24:	b12b      	cbz	r3, 80a3e32 <__strtok_r+0x22>
 80a3e26:	4620      	mov	r0, r4
 80a3e28:	4604      	mov	r4, r0
 80a3e2a:	460f      	mov	r7, r1
 80a3e2c:	f814 5b01 	ldrb.w	r5, [r4], #1
 80a3e30:	e7f3      	b.n	80a3e1a <__strtok_r+0xa>
 80a3e32:	6014      	str	r4, [r2, #0]
 80a3e34:	7003      	strb	r3, [r0, #0]
 80a3e36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a3e38:	b94d      	cbnz	r5, 80a3e4e <__strtok_r+0x3e>
 80a3e3a:	6015      	str	r5, [r2, #0]
 80a3e3c:	4628      	mov	r0, r5
 80a3e3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a3e40:	f817 6b01 	ldrb.w	r6, [r7], #1
 80a3e44:	42b5      	cmp	r5, r6
 80a3e46:	d007      	beq.n	80a3e58 <__strtok_r+0x48>
 80a3e48:	2e00      	cmp	r6, #0
 80a3e4a:	d1f9      	bne.n	80a3e40 <__strtok_r+0x30>
 80a3e4c:	461c      	mov	r4, r3
 80a3e4e:	4623      	mov	r3, r4
 80a3e50:	460f      	mov	r7, r1
 80a3e52:	f813 5b01 	ldrb.w	r5, [r3], #1
 80a3e56:	e7f3      	b.n	80a3e40 <__strtok_r+0x30>
 80a3e58:	b115      	cbz	r5, 80a3e60 <__strtok_r+0x50>
 80a3e5a:	2100      	movs	r1, #0
 80a3e5c:	7021      	strb	r1, [r4, #0]
 80a3e5e:	e000      	b.n	80a3e62 <__strtok_r+0x52>
 80a3e60:	462b      	mov	r3, r5
 80a3e62:	6013      	str	r3, [r2, #0]
 80a3e64:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a3e66 <strtok_r>:
 80a3e66:	2301      	movs	r3, #1
 80a3e68:	f7ff bfd2 	b.w	80a3e10 <__strtok_r>

080a3e6c <_strtoul_r>:
 80a3e6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a3e70:	460e      	mov	r6, r1
 80a3e72:	4680      	mov	r8, r0
 80a3e74:	483b      	ldr	r0, [pc, #236]	; (80a3f64 <_strtoul_r+0xf8>)
 80a3e76:	f8d0 9000 	ldr.w	r9, [r0]
 80a3e7a:	4635      	mov	r5, r6
 80a3e7c:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a3e80:	eb09 0004 	add.w	r0, r9, r4
 80a3e84:	7840      	ldrb	r0, [r0, #1]
 80a3e86:	f000 0008 	and.w	r0, r0, #8
 80a3e8a:	f000 07ff 	and.w	r7, r0, #255	; 0xff
 80a3e8e:	b108      	cbz	r0, 80a3e94 <_strtoul_r+0x28>
 80a3e90:	462e      	mov	r6, r5
 80a3e92:	e7f2      	b.n	80a3e7a <_strtoul_r+0xe>
 80a3e94:	2c2d      	cmp	r4, #45	; 0x2d
 80a3e96:	d103      	bne.n	80a3ea0 <_strtoul_r+0x34>
 80a3e98:	1cb5      	adds	r5, r6, #2
 80a3e9a:	7874      	ldrb	r4, [r6, #1]
 80a3e9c:	2701      	movs	r7, #1
 80a3e9e:	e003      	b.n	80a3ea8 <_strtoul_r+0x3c>
 80a3ea0:	2c2b      	cmp	r4, #43	; 0x2b
 80a3ea2:	bf04      	itt	eq
 80a3ea4:	7874      	ldrbeq	r4, [r6, #1]
 80a3ea6:	1cb5      	addeq	r5, r6, #2
 80a3ea8:	b113      	cbz	r3, 80a3eb0 <_strtoul_r+0x44>
 80a3eaa:	2b10      	cmp	r3, #16
 80a3eac:	d10a      	bne.n	80a3ec4 <_strtoul_r+0x58>
 80a3eae:	e053      	b.n	80a3f58 <_strtoul_r+0xec>
 80a3eb0:	2c30      	cmp	r4, #48	; 0x30
 80a3eb2:	d14f      	bne.n	80a3f54 <_strtoul_r+0xe8>
 80a3eb4:	7828      	ldrb	r0, [r5, #0]
 80a3eb6:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80a3eba:	2858      	cmp	r0, #88	; 0x58
 80a3ebc:	d145      	bne.n	80a3f4a <_strtoul_r+0xde>
 80a3ebe:	786c      	ldrb	r4, [r5, #1]
 80a3ec0:	2310      	movs	r3, #16
 80a3ec2:	3502      	adds	r5, #2
 80a3ec4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80a3ec8:	fbbc fcf3 	udiv	ip, ip, r3
 80a3ecc:	fb03 fa0c 	mul.w	sl, r3, ip
 80a3ed0:	2600      	movs	r6, #0
 80a3ed2:	ea6f 0a0a 	mvn.w	sl, sl
 80a3ed6:	4630      	mov	r0, r6
 80a3ed8:	eb09 0e04 	add.w	lr, r9, r4
 80a3edc:	f89e e001 	ldrb.w	lr, [lr, #1]
 80a3ee0:	f01e 0f04 	tst.w	lr, #4
 80a3ee4:	d001      	beq.n	80a3eea <_strtoul_r+0x7e>
 80a3ee6:	3c30      	subs	r4, #48	; 0x30
 80a3ee8:	e00b      	b.n	80a3f02 <_strtoul_r+0x96>
 80a3eea:	f01e 0e03 	ands.w	lr, lr, #3
 80a3eee:	d01a      	beq.n	80a3f26 <_strtoul_r+0xba>
 80a3ef0:	f1be 0f01 	cmp.w	lr, #1
 80a3ef4:	bf0c      	ite	eq
 80a3ef6:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 80a3efa:	f04f 0e57 	movne.w	lr, #87	; 0x57
 80a3efe:	ebce 0404 	rsb	r4, lr, r4
 80a3f02:	42a3      	cmp	r3, r4
 80a3f04:	dd0f      	ble.n	80a3f26 <_strtoul_r+0xba>
 80a3f06:	2e00      	cmp	r6, #0
 80a3f08:	db08      	blt.n	80a3f1c <_strtoul_r+0xb0>
 80a3f0a:	4560      	cmp	r0, ip
 80a3f0c:	d806      	bhi.n	80a3f1c <_strtoul_r+0xb0>
 80a3f0e:	d101      	bne.n	80a3f14 <_strtoul_r+0xa8>
 80a3f10:	4554      	cmp	r4, sl
 80a3f12:	dc03      	bgt.n	80a3f1c <_strtoul_r+0xb0>
 80a3f14:	fb03 4000 	mla	r0, r3, r0, r4
 80a3f18:	2601      	movs	r6, #1
 80a3f1a:	e001      	b.n	80a3f20 <_strtoul_r+0xb4>
 80a3f1c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 80a3f20:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a3f24:	e7d8      	b.n	80a3ed8 <_strtoul_r+0x6c>
 80a3f26:	2e00      	cmp	r6, #0
 80a3f28:	da07      	bge.n	80a3f3a <_strtoul_r+0xce>
 80a3f2a:	2322      	movs	r3, #34	; 0x22
 80a3f2c:	f8c8 3000 	str.w	r3, [r8]
 80a3f30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a3f34:	b92a      	cbnz	r2, 80a3f42 <_strtoul_r+0xd6>
 80a3f36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a3f3a:	b107      	cbz	r7, 80a3f3e <_strtoul_r+0xd2>
 80a3f3c:	4240      	negs	r0, r0
 80a3f3e:	b172      	cbz	r2, 80a3f5e <_strtoul_r+0xf2>
 80a3f40:	b106      	cbz	r6, 80a3f44 <_strtoul_r+0xd8>
 80a3f42:	1e69      	subs	r1, r5, #1
 80a3f44:	6011      	str	r1, [r2, #0]
 80a3f46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a3f4a:	2430      	movs	r4, #48	; 0x30
 80a3f4c:	2b00      	cmp	r3, #0
 80a3f4e:	d1b9      	bne.n	80a3ec4 <_strtoul_r+0x58>
 80a3f50:	2308      	movs	r3, #8
 80a3f52:	e7b7      	b.n	80a3ec4 <_strtoul_r+0x58>
 80a3f54:	230a      	movs	r3, #10
 80a3f56:	e7b5      	b.n	80a3ec4 <_strtoul_r+0x58>
 80a3f58:	2c30      	cmp	r4, #48	; 0x30
 80a3f5a:	d0ab      	beq.n	80a3eb4 <_strtoul_r+0x48>
 80a3f5c:	e7b2      	b.n	80a3ec4 <_strtoul_r+0x58>
 80a3f5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a3f62:	bf00      	nop
 80a3f64:	20000004 	.word	0x20000004

080a3f68 <strtoul>:
 80a3f68:	4613      	mov	r3, r2
 80a3f6a:	460a      	mov	r2, r1
 80a3f6c:	4601      	mov	r1, r0
 80a3f6e:	4802      	ldr	r0, [pc, #8]	; (80a3f78 <strtoul+0x10>)
 80a3f70:	6800      	ldr	r0, [r0, #0]
 80a3f72:	f7ff bf7b 	b.w	80a3e6c <_strtoul_r>
 80a3f76:	bf00      	nop
 80a3f78:	20000068 	.word	0x20000068

080a3f7c <__tzcalc_limits>:
 80a3f7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a3f80:	4604      	mov	r4, r0
 80a3f82:	f000 fd8d 	bl	80a4aa0 <__gettzinfo>
 80a3f86:	f240 73b1 	movw	r3, #1969	; 0x7b1
 80a3f8a:	429c      	cmp	r4, r3
 80a3f8c:	f340 8096 	ble.w	80a40bc <__tzcalc_limits+0x140>
 80a3f90:	f240 156d 	movw	r5, #365	; 0x16d
 80a3f94:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 80a3f98:	18e3      	adds	r3, r4, r3
 80a3f9a:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
 80a3f9e:	109b      	asrs	r3, r3, #2
 80a3fa0:	fb05 3502 	mla	r5, r5, r2, r3
 80a3fa4:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
 80a3fa8:	f06f 0363 	mvn.w	r3, #99	; 0x63
 80a3fac:	fb92 f3f3 	sdiv	r3, r2, r3
 80a3fb0:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 80a3fb4:	442b      	add	r3, r5
 80a3fb6:	18a5      	adds	r5, r4, r2
 80a3fb8:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80a3fbc:	fb94 f7f2 	sdiv	r7, r4, r2
 80a3fc0:	fb95 f5f2 	sdiv	r5, r5, r2
 80a3fc4:	fb02 4717 	mls	r7, r2, r7, r4
 80a3fc8:	441d      	add	r5, r3
 80a3fca:	2364      	movs	r3, #100	; 0x64
 80a3fcc:	fb94 f6f3 	sdiv	r6, r4, r3
 80a3fd0:	fab7 fe87 	clz	lr, r7
 80a3fd4:	4601      	mov	r1, r0
 80a3fd6:	fb03 4616 	mls	r6, r3, r6, r4
 80a3fda:	f100 0338 	add.w	r3, r0, #56	; 0x38
 80a3fde:	9301      	str	r3, [sp, #4]
 80a3fe0:	f004 0303 	and.w	r3, r4, #3
 80a3fe4:	6044      	str	r4, [r0, #4]
 80a3fe6:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 80a3fea:	9300      	str	r3, [sp, #0]
 80a3fec:	f04f 0c07 	mov.w	ip, #7
 80a3ff0:	7a0b      	ldrb	r3, [r1, #8]
 80a3ff2:	2b4a      	cmp	r3, #74	; 0x4a
 80a3ff4:	d10e      	bne.n	80a4014 <__tzcalc_limits+0x98>
 80a3ff6:	694b      	ldr	r3, [r1, #20]
 80a3ff8:	9a00      	ldr	r2, [sp, #0]
 80a3ffa:	18ec      	adds	r4, r5, r3
 80a3ffc:	b902      	cbnz	r2, 80a4000 <__tzcalc_limits+0x84>
 80a3ffe:	b906      	cbnz	r6, 80a4002 <__tzcalc_limits+0x86>
 80a4000:	b927      	cbnz	r7, 80a400c <__tzcalc_limits+0x90>
 80a4002:	2b3b      	cmp	r3, #59	; 0x3b
 80a4004:	bfd4      	ite	le
 80a4006:	2300      	movle	r3, #0
 80a4008:	2301      	movgt	r3, #1
 80a400a:	e000      	b.n	80a400e <__tzcalc_limits+0x92>
 80a400c:	2300      	movs	r3, #0
 80a400e:	4423      	add	r3, r4
 80a4010:	3b01      	subs	r3, #1
 80a4012:	e03f      	b.n	80a4094 <__tzcalc_limits+0x118>
 80a4014:	2b44      	cmp	r3, #68	; 0x44
 80a4016:	d102      	bne.n	80a401e <__tzcalc_limits+0xa2>
 80a4018:	694b      	ldr	r3, [r1, #20]
 80a401a:	442b      	add	r3, r5
 80a401c:	e03a      	b.n	80a4094 <__tzcalc_limits+0x118>
 80a401e:	9b00      	ldr	r3, [sp, #0]
 80a4020:	b92b      	cbnz	r3, 80a402e <__tzcalc_limits+0xb2>
 80a4022:	2e00      	cmp	r6, #0
 80a4024:	bf0c      	ite	eq
 80a4026:	46f0      	moveq	r8, lr
 80a4028:	f04f 0801 	movne.w	r8, #1
 80a402c:	e000      	b.n	80a4030 <__tzcalc_limits+0xb4>
 80a402e:	46f0      	mov	r8, lr
 80a4030:	46a9      	mov	r9, r5
 80a4032:	4b24      	ldr	r3, [pc, #144]	; (80a40c4 <__tzcalc_limits+0x148>)
 80a4034:	2230      	movs	r2, #48	; 0x30
 80a4036:	fb02 3808 	mla	r8, r2, r8, r3
 80a403a:	68cc      	ldr	r4, [r1, #12]
 80a403c:	f1a8 0a04 	sub.w	sl, r8, #4
 80a4040:	2301      	movs	r3, #1
 80a4042:	42a3      	cmp	r3, r4
 80a4044:	da04      	bge.n	80a4050 <__tzcalc_limits+0xd4>
 80a4046:	f85a bf04 	ldr.w	fp, [sl, #4]!
 80a404a:	3301      	adds	r3, #1
 80a404c:	44d9      	add	r9, fp
 80a404e:	e7f8      	b.n	80a4042 <__tzcalc_limits+0xc6>
 80a4050:	f109 0304 	add.w	r3, r9, #4
 80a4054:	fb93 fbfc 	sdiv	fp, r3, ip
 80a4058:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
 80a405c:	ebca 0a03 	rsb	sl, sl, r3
 80a4060:	694b      	ldr	r3, [r1, #20]
 80a4062:	2c01      	cmp	r4, #1
 80a4064:	bfb8      	it	lt
 80a4066:	2401      	movlt	r4, #1
 80a4068:	ebb3 0a0a 	subs.w	sl, r3, sl
 80a406c:	690b      	ldr	r3, [r1, #16]
 80a406e:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 80a4072:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80a4076:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80a407a:	bf48      	it	mi
 80a407c:	f10a 0a07 	addmi.w	sl, sl, #7
 80a4080:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a4084:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 80a4088:	4453      	add	r3, sl
 80a408a:	42a3      	cmp	r3, r4
 80a408c:	db01      	blt.n	80a4092 <__tzcalc_limits+0x116>
 80a408e:	3b07      	subs	r3, #7
 80a4090:	e7fb      	b.n	80a408a <__tzcalc_limits+0x10e>
 80a4092:	444b      	add	r3, r9
 80a4094:	698c      	ldr	r4, [r1, #24]
 80a4096:	4a0c      	ldr	r2, [pc, #48]	; (80a40c8 <__tzcalc_limits+0x14c>)
 80a4098:	fb02 4303 	mla	r3, r2, r3, r4
 80a409c:	6a0c      	ldr	r4, [r1, #32]
 80a409e:	4423      	add	r3, r4
 80a40a0:	f841 3f1c 	str.w	r3, [r1, #28]!
 80a40a4:	9b01      	ldr	r3, [sp, #4]
 80a40a6:	4299      	cmp	r1, r3
 80a40a8:	d1a2      	bne.n	80a3ff0 <__tzcalc_limits+0x74>
 80a40aa:	69c3      	ldr	r3, [r0, #28]
 80a40ac:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80a40ae:	4293      	cmp	r3, r2
 80a40b0:	bfac      	ite	ge
 80a40b2:	2300      	movge	r3, #0
 80a40b4:	2301      	movlt	r3, #1
 80a40b6:	6003      	str	r3, [r0, #0]
 80a40b8:	2001      	movs	r0, #1
 80a40ba:	e000      	b.n	80a40be <__tzcalc_limits+0x142>
 80a40bc:	2000      	movs	r0, #0
 80a40be:	b003      	add	sp, #12
 80a40c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a40c4:	080a5b50 	.word	0x080a5b50
 80a40c8:	00015180 	.word	0x00015180

080a40cc <__tz_lock>:
 80a40cc:	4770      	bx	lr

080a40ce <__tz_unlock>:
 80a40ce:	4770      	bx	lr

080a40d0 <_tzset_unlocked>:
 80a40d0:	4b01      	ldr	r3, [pc, #4]	; (80a40d8 <_tzset_unlocked+0x8>)
 80a40d2:	6818      	ldr	r0, [r3, #0]
 80a40d4:	f000 b802 	b.w	80a40dc <_tzset_unlocked_r>
 80a40d8:	20000068 	.word	0x20000068

080a40dc <_tzset_unlocked_r>:
 80a40dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a40e0:	b08d      	sub	sp, #52	; 0x34
 80a40e2:	4607      	mov	r7, r0
 80a40e4:	f000 fcdc 	bl	80a4aa0 <__gettzinfo>
 80a40e8:	49b0      	ldr	r1, [pc, #704]	; (80a43ac <_tzset_unlocked_r+0x2d0>)
 80a40ea:	4604      	mov	r4, r0
 80a40ec:	4638      	mov	r0, r7
 80a40ee:	f000 fccf 	bl	80a4a90 <_getenv_r>
 80a40f2:	4eaf      	ldr	r6, [pc, #700]	; (80a43b0 <_tzset_unlocked_r+0x2d4>)
 80a40f4:	4605      	mov	r5, r0
 80a40f6:	b960      	cbnz	r0, 80a4112 <_tzset_unlocked_r+0x36>
 80a40f8:	4bae      	ldr	r3, [pc, #696]	; (80a43b4 <_tzset_unlocked_r+0x2d8>)
 80a40fa:	4aaf      	ldr	r2, [pc, #700]	; (80a43b8 <_tzset_unlocked_r+0x2dc>)
 80a40fc:	6018      	str	r0, [r3, #0]
 80a40fe:	4baf      	ldr	r3, [pc, #700]	; (80a43bc <_tzset_unlocked_r+0x2e0>)
 80a4100:	6018      	str	r0, [r3, #0]
 80a4102:	4baf      	ldr	r3, [pc, #700]	; (80a43c0 <_tzset_unlocked_r+0x2e4>)
 80a4104:	6830      	ldr	r0, [r6, #0]
 80a4106:	601a      	str	r2, [r3, #0]
 80a4108:	605a      	str	r2, [r3, #4]
 80a410a:	f7fc fd7b 	bl	80a0c04 <free>
 80a410e:	6035      	str	r5, [r6, #0]
 80a4110:	e148      	b.n	80a43a4 <_tzset_unlocked_r+0x2c8>
 80a4112:	6831      	ldr	r1, [r6, #0]
 80a4114:	b979      	cbnz	r1, 80a4136 <_tzset_unlocked_r+0x5a>
 80a4116:	6830      	ldr	r0, [r6, #0]
 80a4118:	f7fc fd74 	bl	80a0c04 <free>
 80a411c:	4628      	mov	r0, r5
 80a411e:	f7ff f82e 	bl	80a317e <strlen>
 80a4122:	1c41      	adds	r1, r0, #1
 80a4124:	4638      	mov	r0, r7
 80a4126:	f7fc fd9d 	bl	80a0c64 <_malloc_r>
 80a412a:	6030      	str	r0, [r6, #0]
 80a412c:	b148      	cbz	r0, 80a4142 <_tzset_unlocked_r+0x66>
 80a412e:	4629      	mov	r1, r5
 80a4130:	f7ff f802 	bl	80a3138 <strcpy>
 80a4134:	e005      	b.n	80a4142 <_tzset_unlocked_r+0x66>
 80a4136:	f7fe fff5 	bl	80a3124 <strcmp>
 80a413a:	2800      	cmp	r0, #0
 80a413c:	f000 8132 	beq.w	80a43a4 <_tzset_unlocked_r+0x2c8>
 80a4140:	e7e9      	b.n	80a4116 <_tzset_unlocked_r+0x3a>
 80a4142:	782b      	ldrb	r3, [r5, #0]
 80a4144:	ae0a      	add	r6, sp, #40	; 0x28
 80a4146:	2b3a      	cmp	r3, #58	; 0x3a
 80a4148:	bf08      	it	eq
 80a414a:	3501      	addeq	r5, #1
 80a414c:	4633      	mov	r3, r6
 80a414e:	4a9d      	ldr	r2, [pc, #628]	; (80a43c4 <_tzset_unlocked_r+0x2e8>)
 80a4150:	499d      	ldr	r1, [pc, #628]	; (80a43c8 <_tzset_unlocked_r+0x2ec>)
 80a4152:	4628      	mov	r0, r5
 80a4154:	f7fc fd66 	bl	80a0c24 <siscanf>
 80a4158:	2800      	cmp	r0, #0
 80a415a:	f340 8123 	ble.w	80a43a4 <_tzset_unlocked_r+0x2c8>
 80a415e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a4160:	18ef      	adds	r7, r5, r3
 80a4162:	5ceb      	ldrb	r3, [r5, r3]
 80a4164:	2b2d      	cmp	r3, #45	; 0x2d
 80a4166:	d103      	bne.n	80a4170 <_tzset_unlocked_r+0x94>
 80a4168:	3701      	adds	r7, #1
 80a416a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80a416e:	e003      	b.n	80a4178 <_tzset_unlocked_r+0x9c>
 80a4170:	2b2b      	cmp	r3, #43	; 0x2b
 80a4172:	bf08      	it	eq
 80a4174:	3701      	addeq	r7, #1
 80a4176:	2501      	movs	r5, #1
 80a4178:	f10d 0a20 	add.w	sl, sp, #32
 80a417c:	f10d 0b1e 	add.w	fp, sp, #30
 80a4180:	f04f 0800 	mov.w	r8, #0
 80a4184:	9603      	str	r6, [sp, #12]
 80a4186:	f8cd a008 	str.w	sl, [sp, #8]
 80a418a:	9601      	str	r6, [sp, #4]
 80a418c:	f8cd b000 	str.w	fp, [sp]
 80a4190:	4633      	mov	r3, r6
 80a4192:	aa07      	add	r2, sp, #28
 80a4194:	498d      	ldr	r1, [pc, #564]	; (80a43cc <_tzset_unlocked_r+0x2f0>)
 80a4196:	4638      	mov	r0, r7
 80a4198:	f8ad 801e 	strh.w	r8, [sp, #30]
 80a419c:	f8ad 8020 	strh.w	r8, [sp, #32]
 80a41a0:	f7fc fd40 	bl	80a0c24 <siscanf>
 80a41a4:	4540      	cmp	r0, r8
 80a41a6:	f340 80fd 	ble.w	80a43a4 <_tzset_unlocked_r+0x2c8>
 80a41aa:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80a41ae:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80a41b2:	213c      	movs	r1, #60	; 0x3c
 80a41b4:	fb01 3302 	mla	r3, r1, r2, r3
 80a41b8:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80a41bc:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80a41c0:	fb01 3302 	mla	r3, r1, r2, r3
 80a41c4:	435d      	muls	r5, r3
 80a41c6:	4b7f      	ldr	r3, [pc, #508]	; (80a43c4 <_tzset_unlocked_r+0x2e8>)
 80a41c8:	6225      	str	r5, [r4, #32]
 80a41ca:	4d7d      	ldr	r5, [pc, #500]	; (80a43c0 <_tzset_unlocked_r+0x2e4>)
 80a41cc:	f8df 9208 	ldr.w	r9, [pc, #520]	; 80a43d8 <_tzset_unlocked_r+0x2fc>
 80a41d0:	602b      	str	r3, [r5, #0]
 80a41d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a41d4:	464a      	mov	r2, r9
 80a41d6:	441f      	add	r7, r3
 80a41d8:	497b      	ldr	r1, [pc, #492]	; (80a43c8 <_tzset_unlocked_r+0x2ec>)
 80a41da:	4633      	mov	r3, r6
 80a41dc:	4638      	mov	r0, r7
 80a41de:	f7fc fd21 	bl	80a0c24 <siscanf>
 80a41e2:	4540      	cmp	r0, r8
 80a41e4:	dc08      	bgt.n	80a41f8 <_tzset_unlocked_r+0x11c>
 80a41e6:	682b      	ldr	r3, [r5, #0]
 80a41e8:	6a22      	ldr	r2, [r4, #32]
 80a41ea:	606b      	str	r3, [r5, #4]
 80a41ec:	4b71      	ldr	r3, [pc, #452]	; (80a43b4 <_tzset_unlocked_r+0x2d8>)
 80a41ee:	601a      	str	r2, [r3, #0]
 80a41f0:	4b72      	ldr	r3, [pc, #456]	; (80a43bc <_tzset_unlocked_r+0x2e0>)
 80a41f2:	f8c3 8000 	str.w	r8, [r3]
 80a41f6:	e0d5      	b.n	80a43a4 <_tzset_unlocked_r+0x2c8>
 80a41f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a41fa:	f8c5 9004 	str.w	r9, [r5, #4]
 80a41fe:	18fd      	adds	r5, r7, r3
 80a4200:	5cfb      	ldrb	r3, [r7, r3]
 80a4202:	2b2d      	cmp	r3, #45	; 0x2d
 80a4204:	d103      	bne.n	80a420e <_tzset_unlocked_r+0x132>
 80a4206:	3501      	adds	r5, #1
 80a4208:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80a420c:	e003      	b.n	80a4216 <_tzset_unlocked_r+0x13a>
 80a420e:	2b2b      	cmp	r3, #43	; 0x2b
 80a4210:	bf08      	it	eq
 80a4212:	3501      	addeq	r5, #1
 80a4214:	2701      	movs	r7, #1
 80a4216:	2300      	movs	r3, #0
 80a4218:	f8ad 301c 	strh.w	r3, [sp, #28]
 80a421c:	f8ad 301e 	strh.w	r3, [sp, #30]
 80a4220:	f8ad 3020 	strh.w	r3, [sp, #32]
 80a4224:	930a      	str	r3, [sp, #40]	; 0x28
 80a4226:	9603      	str	r6, [sp, #12]
 80a4228:	f8cd a008 	str.w	sl, [sp, #8]
 80a422c:	9601      	str	r6, [sp, #4]
 80a422e:	f8cd b000 	str.w	fp, [sp]
 80a4232:	4633      	mov	r3, r6
 80a4234:	aa07      	add	r2, sp, #28
 80a4236:	4965      	ldr	r1, [pc, #404]	; (80a43cc <_tzset_unlocked_r+0x2f0>)
 80a4238:	4628      	mov	r0, r5
 80a423a:	f7fc fcf3 	bl	80a0c24 <siscanf>
 80a423e:	2800      	cmp	r0, #0
 80a4240:	dc04      	bgt.n	80a424c <_tzset_unlocked_r+0x170>
 80a4242:	6a23      	ldr	r3, [r4, #32]
 80a4244:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 80a4248:	63e3      	str	r3, [r4, #60]	; 0x3c
 80a424a:	e00e      	b.n	80a426a <_tzset_unlocked_r+0x18e>
 80a424c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80a4250:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80a4254:	213c      	movs	r1, #60	; 0x3c
 80a4256:	fb01 3302 	mla	r3, r1, r2, r3
 80a425a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80a425e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80a4262:	fb01 3302 	mla	r3, r1, r2, r3
 80a4266:	435f      	muls	r7, r3
 80a4268:	63e7      	str	r7, [r4, #60]	; 0x3c
 80a426a:	4627      	mov	r7, r4
 80a426c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a426e:	f04f 0900 	mov.w	r9, #0
 80a4272:	441d      	add	r5, r3
 80a4274:	782b      	ldrb	r3, [r5, #0]
 80a4276:	2b2c      	cmp	r3, #44	; 0x2c
 80a4278:	bf08      	it	eq
 80a427a:	3501      	addeq	r5, #1
 80a427c:	f895 8000 	ldrb.w	r8, [r5]
 80a4280:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 80a4284:	d126      	bne.n	80a42d4 <_tzset_unlocked_r+0x1f8>
 80a4286:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 80a428a:	9302      	str	r3, [sp, #8]
 80a428c:	ab09      	add	r3, sp, #36	; 0x24
 80a428e:	9300      	str	r3, [sp, #0]
 80a4290:	9603      	str	r6, [sp, #12]
 80a4292:	9601      	str	r6, [sp, #4]
 80a4294:	4633      	mov	r3, r6
 80a4296:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 80a429a:	494d      	ldr	r1, [pc, #308]	; (80a43d0 <_tzset_unlocked_r+0x2f4>)
 80a429c:	4628      	mov	r0, r5
 80a429e:	f7fc fcc1 	bl	80a0c24 <siscanf>
 80a42a2:	2803      	cmp	r0, #3
 80a42a4:	d17e      	bne.n	80a43a4 <_tzset_unlocked_r+0x2c8>
 80a42a6:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 80a42aa:	1e4b      	subs	r3, r1, #1
 80a42ac:	2b0b      	cmp	r3, #11
 80a42ae:	d879      	bhi.n	80a43a4 <_tzset_unlocked_r+0x2c8>
 80a42b0:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 80a42b4:	1e53      	subs	r3, r2, #1
 80a42b6:	2b04      	cmp	r3, #4
 80a42b8:	d874      	bhi.n	80a43a4 <_tzset_unlocked_r+0x2c8>
 80a42ba:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 80a42be:	2b06      	cmp	r3, #6
 80a42c0:	d870      	bhi.n	80a43a4 <_tzset_unlocked_r+0x2c8>
 80a42c2:	f887 8008 	strb.w	r8, [r7, #8]
 80a42c6:	60f9      	str	r1, [r7, #12]
 80a42c8:	613a      	str	r2, [r7, #16]
 80a42ca:	617b      	str	r3, [r7, #20]
 80a42cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a42ce:	eb05 0803 	add.w	r8, r5, r3
 80a42d2:	e02a      	b.n	80a432a <_tzset_unlocked_r+0x24e>
 80a42d4:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 80a42d8:	bf06      	itte	eq
 80a42da:	4643      	moveq	r3, r8
 80a42dc:	3501      	addeq	r5, #1
 80a42de:	2344      	movne	r3, #68	; 0x44
 80a42e0:	220a      	movs	r2, #10
 80a42e2:	a90b      	add	r1, sp, #44	; 0x2c
 80a42e4:	4628      	mov	r0, r5
 80a42e6:	9305      	str	r3, [sp, #20]
 80a42e8:	f7ff fe3e 	bl	80a3f68 <strtoul>
 80a42ec:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 80a42f0:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 80a42f4:	4545      	cmp	r5, r8
 80a42f6:	9b05      	ldr	r3, [sp, #20]
 80a42f8:	d114      	bne.n	80a4324 <_tzset_unlocked_r+0x248>
 80a42fa:	234d      	movs	r3, #77	; 0x4d
 80a42fc:	f1b9 0f00 	cmp.w	r9, #0
 80a4300:	d107      	bne.n	80a4312 <_tzset_unlocked_r+0x236>
 80a4302:	7223      	strb	r3, [r4, #8]
 80a4304:	2303      	movs	r3, #3
 80a4306:	60e3      	str	r3, [r4, #12]
 80a4308:	2302      	movs	r3, #2
 80a430a:	6123      	str	r3, [r4, #16]
 80a430c:	f8c4 9014 	str.w	r9, [r4, #20]
 80a4310:	e00b      	b.n	80a432a <_tzset_unlocked_r+0x24e>
 80a4312:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 80a4316:	230b      	movs	r3, #11
 80a4318:	62a3      	str	r3, [r4, #40]	; 0x28
 80a431a:	2301      	movs	r3, #1
 80a431c:	62e3      	str	r3, [r4, #44]	; 0x2c
 80a431e:	2300      	movs	r3, #0
 80a4320:	6323      	str	r3, [r4, #48]	; 0x30
 80a4322:	e002      	b.n	80a432a <_tzset_unlocked_r+0x24e>
 80a4324:	b280      	uxth	r0, r0
 80a4326:	723b      	strb	r3, [r7, #8]
 80a4328:	6178      	str	r0, [r7, #20]
 80a432a:	2302      	movs	r3, #2
 80a432c:	f8ad 301c 	strh.w	r3, [sp, #28]
 80a4330:	2300      	movs	r3, #0
 80a4332:	f8ad 301e 	strh.w	r3, [sp, #30]
 80a4336:	f8ad 3020 	strh.w	r3, [sp, #32]
 80a433a:	930a      	str	r3, [sp, #40]	; 0x28
 80a433c:	f898 3000 	ldrb.w	r3, [r8]
 80a4340:	2b2f      	cmp	r3, #47	; 0x2f
 80a4342:	d10b      	bne.n	80a435c <_tzset_unlocked_r+0x280>
 80a4344:	9603      	str	r6, [sp, #12]
 80a4346:	f8cd a008 	str.w	sl, [sp, #8]
 80a434a:	9601      	str	r6, [sp, #4]
 80a434c:	f8cd b000 	str.w	fp, [sp]
 80a4350:	4633      	mov	r3, r6
 80a4352:	aa07      	add	r2, sp, #28
 80a4354:	491f      	ldr	r1, [pc, #124]	; (80a43d4 <_tzset_unlocked_r+0x2f8>)
 80a4356:	4640      	mov	r0, r8
 80a4358:	f7fc fc64 	bl	80a0c24 <siscanf>
 80a435c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80a4360:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80a4364:	213c      	movs	r1, #60	; 0x3c
 80a4366:	fb01 3302 	mla	r3, r1, r2, r3
 80a436a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80a436e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80a4372:	fb01 3302 	mla	r3, r1, r2, r3
 80a4376:	61bb      	str	r3, [r7, #24]
 80a4378:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80a437a:	f109 0901 	add.w	r9, r9, #1
 80a437e:	f1b9 0f02 	cmp.w	r9, #2
 80a4382:	4445      	add	r5, r8
 80a4384:	f107 071c 	add.w	r7, r7, #28
 80a4388:	f47f af74 	bne.w	80a4274 <_tzset_unlocked_r+0x198>
 80a438c:	6860      	ldr	r0, [r4, #4]
 80a438e:	f7ff fdf5 	bl	80a3f7c <__tzcalc_limits>
 80a4392:	6a22      	ldr	r2, [r4, #32]
 80a4394:	4b07      	ldr	r3, [pc, #28]	; (80a43b4 <_tzset_unlocked_r+0x2d8>)
 80a4396:	601a      	str	r2, [r3, #0]
 80a4398:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80a439a:	1a9b      	subs	r3, r3, r2
 80a439c:	4a07      	ldr	r2, [pc, #28]	; (80a43bc <_tzset_unlocked_r+0x2e0>)
 80a439e:	bf18      	it	ne
 80a43a0:	2301      	movne	r3, #1
 80a43a2:	6013      	str	r3, [r2, #0]
 80a43a4:	b00d      	add	sp, #52	; 0x34
 80a43a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a43aa:	bf00      	nop
 80a43ac:	080a5c10 	.word	0x080a5c10
 80a43b0:	20000808 	.word	0x20000808
 80a43b4:	20000810 	.word	0x20000810
 80a43b8:	080a5c13 	.word	0x080a5c13
 80a43bc:	2000080c 	.word	0x2000080c
 80a43c0:	200000a4 	.word	0x200000a4
 80a43c4:	200007fb 	.word	0x200007fb
 80a43c8:	080a5c17 	.word	0x080a5c17
 80a43cc:	080a5c3a 	.word	0x080a5c3a
 80a43d0:	080a5c26 	.word	0x080a5c26
 80a43d4:	080a5c39 	.word	0x080a5c39
 80a43d8:	200007f0 	.word	0x200007f0

080a43dc <rshift>:
 80a43dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a43de:	6906      	ldr	r6, [r0, #16]
 80a43e0:	114b      	asrs	r3, r1, #5
 80a43e2:	42b3      	cmp	r3, r6
 80a43e4:	f100 0514 	add.w	r5, r0, #20
 80a43e8:	da27      	bge.n	80a443a <rshift+0x5e>
 80a43ea:	f011 011f 	ands.w	r1, r1, #31
 80a43ee:	eb05 0686 	add.w	r6, r5, r6, lsl #2
 80a43f2:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 80a43f6:	d101      	bne.n	80a43fc <rshift+0x20>
 80a43f8:	4629      	mov	r1, r5
 80a43fa:	e016      	b.n	80a442a <rshift+0x4e>
 80a43fc:	1d14      	adds	r4, r2, #4
 80a43fe:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
 80a4402:	462b      	mov	r3, r5
 80a4404:	f1c1 0e20 	rsb	lr, r1, #32
 80a4408:	40ca      	lsrs	r2, r1
 80a440a:	42b4      	cmp	r4, r6
 80a440c:	d209      	bcs.n	80a4422 <rshift+0x46>
 80a440e:	6827      	ldr	r7, [r4, #0]
 80a4410:	fa07 f70e 	lsl.w	r7, r7, lr
 80a4414:	433a      	orrs	r2, r7
 80a4416:	f843 2b04 	str.w	r2, [r3], #4
 80a441a:	f854 2b04 	ldr.w	r2, [r4], #4
 80a441e:	40ca      	lsrs	r2, r1
 80a4420:	e7f3      	b.n	80a440a <rshift+0x2e>
 80a4422:	601a      	str	r2, [r3, #0]
 80a4424:	b152      	cbz	r2, 80a443c <rshift+0x60>
 80a4426:	3304      	adds	r3, #4
 80a4428:	e008      	b.n	80a443c <rshift+0x60>
 80a442a:	42b2      	cmp	r2, r6
 80a442c:	460b      	mov	r3, r1
 80a442e:	d205      	bcs.n	80a443c <rshift+0x60>
 80a4430:	f852 3b04 	ldr.w	r3, [r2], #4
 80a4434:	f841 3b04 	str.w	r3, [r1], #4
 80a4438:	e7f7      	b.n	80a442a <rshift+0x4e>
 80a443a:	462b      	mov	r3, r5
 80a443c:	1b5b      	subs	r3, r3, r5
 80a443e:	109b      	asrs	r3, r3, #2
 80a4440:	6103      	str	r3, [r0, #16]
 80a4442:	b903      	cbnz	r3, 80a4446 <rshift+0x6a>
 80a4444:	6143      	str	r3, [r0, #20]
 80a4446:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a4448 <__hexdig_fun>:
 80a4448:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80a444c:	2b09      	cmp	r3, #9
 80a444e:	d801      	bhi.n	80a4454 <__hexdig_fun+0xc>
 80a4450:	3820      	subs	r0, #32
 80a4452:	e00a      	b.n	80a446a <__hexdig_fun+0x22>
 80a4454:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80a4458:	2b05      	cmp	r3, #5
 80a445a:	d801      	bhi.n	80a4460 <__hexdig_fun+0x18>
 80a445c:	3847      	subs	r0, #71	; 0x47
 80a445e:	e004      	b.n	80a446a <__hexdig_fun+0x22>
 80a4460:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80a4464:	2b05      	cmp	r3, #5
 80a4466:	d802      	bhi.n	80a446e <__hexdig_fun+0x26>
 80a4468:	3827      	subs	r0, #39	; 0x27
 80a446a:	b2c0      	uxtb	r0, r0
 80a446c:	4770      	bx	lr
 80a446e:	2000      	movs	r0, #0
 80a4470:	4770      	bx	lr

080a4472 <__gethex>:
 80a4472:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a4476:	b08b      	sub	sp, #44	; 0x2c
 80a4478:	468a      	mov	sl, r1
 80a447a:	4690      	mov	r8, r2
 80a447c:	9306      	str	r3, [sp, #24]
 80a447e:	9002      	str	r0, [sp, #8]
 80a4480:	f7fe fe10 	bl	80a30a4 <_localeconv_r>
 80a4484:	6803      	ldr	r3, [r0, #0]
 80a4486:	f04f 0b00 	mov.w	fp, #0
 80a448a:	4618      	mov	r0, r3
 80a448c:	9303      	str	r3, [sp, #12]
 80a448e:	f7fe fe76 	bl	80a317e <strlen>
 80a4492:	9b03      	ldr	r3, [sp, #12]
 80a4494:	9001      	str	r0, [sp, #4]
 80a4496:	4403      	add	r3, r0
 80a4498:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80a449c:	9307      	str	r3, [sp, #28]
 80a449e:	f8da 3000 	ldr.w	r3, [sl]
 80a44a2:	3302      	adds	r3, #2
 80a44a4:	461f      	mov	r7, r3
 80a44a6:	f813 0b01 	ldrb.w	r0, [r3], #1
 80a44aa:	2830      	cmp	r0, #48	; 0x30
 80a44ac:	d102      	bne.n	80a44b4 <__gethex+0x42>
 80a44ae:	f10b 0b01 	add.w	fp, fp, #1
 80a44b2:	e7f7      	b.n	80a44a4 <__gethex+0x32>
 80a44b4:	f7ff ffc8 	bl	80a4448 <__hexdig_fun>
 80a44b8:	4604      	mov	r4, r0
 80a44ba:	b9e0      	cbnz	r0, 80a44f6 <__gethex+0x84>
 80a44bc:	9a01      	ldr	r2, [sp, #4]
 80a44be:	9903      	ldr	r1, [sp, #12]
 80a44c0:	4638      	mov	r0, r7
 80a44c2:	f7fe fe64 	bl	80a318e <strncmp>
 80a44c6:	2800      	cmp	r0, #0
 80a44c8:	d134      	bne.n	80a4534 <__gethex+0xc2>
 80a44ca:	9b01      	ldr	r3, [sp, #4]
 80a44cc:	5cf8      	ldrb	r0, [r7, r3]
 80a44ce:	18fe      	adds	r6, r7, r3
 80a44d0:	f7ff ffba 	bl	80a4448 <__hexdig_fun>
 80a44d4:	b380      	cbz	r0, 80a4538 <__gethex+0xc6>
 80a44d6:	4633      	mov	r3, r6
 80a44d8:	7818      	ldrb	r0, [r3, #0]
 80a44da:	461f      	mov	r7, r3
 80a44dc:	2830      	cmp	r0, #48	; 0x30
 80a44de:	f103 0301 	add.w	r3, r3, #1
 80a44e2:	d0f9      	beq.n	80a44d8 <__gethex+0x66>
 80a44e4:	f7ff ffb0 	bl	80a4448 <__hexdig_fun>
 80a44e8:	fab0 f580 	clz	r5, r0
 80a44ec:	4634      	mov	r4, r6
 80a44ee:	096d      	lsrs	r5, r5, #5
 80a44f0:	f04f 0b01 	mov.w	fp, #1
 80a44f4:	e001      	b.n	80a44fa <__gethex+0x88>
 80a44f6:	2500      	movs	r5, #0
 80a44f8:	462c      	mov	r4, r5
 80a44fa:	463a      	mov	r2, r7
 80a44fc:	4616      	mov	r6, r2
 80a44fe:	7830      	ldrb	r0, [r6, #0]
 80a4500:	3201      	adds	r2, #1
 80a4502:	f7ff ffa1 	bl	80a4448 <__hexdig_fun>
 80a4506:	2800      	cmp	r0, #0
 80a4508:	d1f8      	bne.n	80a44fc <__gethex+0x8a>
 80a450a:	9a01      	ldr	r2, [sp, #4]
 80a450c:	9903      	ldr	r1, [sp, #12]
 80a450e:	4630      	mov	r0, r6
 80a4510:	f7fe fe3d 	bl	80a318e <strncmp>
 80a4514:	b950      	cbnz	r0, 80a452c <__gethex+0xba>
 80a4516:	b954      	cbnz	r4, 80a452e <__gethex+0xbc>
 80a4518:	9b01      	ldr	r3, [sp, #4]
 80a451a:	18f4      	adds	r4, r6, r3
 80a451c:	4622      	mov	r2, r4
 80a451e:	4616      	mov	r6, r2
 80a4520:	7830      	ldrb	r0, [r6, #0]
 80a4522:	3201      	adds	r2, #1
 80a4524:	f7ff ff90 	bl	80a4448 <__hexdig_fun>
 80a4528:	2800      	cmp	r0, #0
 80a452a:	d1f8      	bne.n	80a451e <__gethex+0xac>
 80a452c:	b134      	cbz	r4, 80a453c <__gethex+0xca>
 80a452e:	1ba4      	subs	r4, r4, r6
 80a4530:	00a4      	lsls	r4, r4, #2
 80a4532:	e003      	b.n	80a453c <__gethex+0xca>
 80a4534:	463e      	mov	r6, r7
 80a4536:	e000      	b.n	80a453a <__gethex+0xc8>
 80a4538:	4604      	mov	r4, r0
 80a453a:	2501      	movs	r5, #1
 80a453c:	7833      	ldrb	r3, [r6, #0]
 80a453e:	2b50      	cmp	r3, #80	; 0x50
 80a4540:	d001      	beq.n	80a4546 <__gethex+0xd4>
 80a4542:	2b70      	cmp	r3, #112	; 0x70
 80a4544:	d12a      	bne.n	80a459c <__gethex+0x12a>
 80a4546:	7873      	ldrb	r3, [r6, #1]
 80a4548:	2b2b      	cmp	r3, #43	; 0x2b
 80a454a:	d008      	beq.n	80a455e <__gethex+0xec>
 80a454c:	2b2d      	cmp	r3, #45	; 0x2d
 80a454e:	d003      	beq.n	80a4558 <__gethex+0xe6>
 80a4550:	1c71      	adds	r1, r6, #1
 80a4552:	f04f 0900 	mov.w	r9, #0
 80a4556:	e005      	b.n	80a4564 <__gethex+0xf2>
 80a4558:	f04f 0901 	mov.w	r9, #1
 80a455c:	e001      	b.n	80a4562 <__gethex+0xf0>
 80a455e:	f04f 0900 	mov.w	r9, #0
 80a4562:	1cb1      	adds	r1, r6, #2
 80a4564:	7808      	ldrb	r0, [r1, #0]
 80a4566:	f7ff ff6f 	bl	80a4448 <__hexdig_fun>
 80a456a:	1e43      	subs	r3, r0, #1
 80a456c:	b2db      	uxtb	r3, r3
 80a456e:	2b18      	cmp	r3, #24
 80a4570:	d814      	bhi.n	80a459c <__gethex+0x12a>
 80a4572:	f1a0 0210 	sub.w	r2, r0, #16
 80a4576:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80a457a:	f7ff ff65 	bl	80a4448 <__hexdig_fun>
 80a457e:	1e43      	subs	r3, r0, #1
 80a4580:	b2db      	uxtb	r3, r3
 80a4582:	2b18      	cmp	r3, #24
 80a4584:	d804      	bhi.n	80a4590 <__gethex+0x11e>
 80a4586:	230a      	movs	r3, #10
 80a4588:	fb03 0202 	mla	r2, r3, r2, r0
 80a458c:	3a10      	subs	r2, #16
 80a458e:	e7f2      	b.n	80a4576 <__gethex+0x104>
 80a4590:	f1b9 0f00 	cmp.w	r9, #0
 80a4594:	d000      	beq.n	80a4598 <__gethex+0x126>
 80a4596:	4252      	negs	r2, r2
 80a4598:	4414      	add	r4, r2
 80a459a:	e000      	b.n	80a459e <__gethex+0x12c>
 80a459c:	4631      	mov	r1, r6
 80a459e:	f8ca 1000 	str.w	r1, [sl]
 80a45a2:	b12d      	cbz	r5, 80a45b0 <__gethex+0x13e>
 80a45a4:	f1bb 0f00 	cmp.w	fp, #0
 80a45a8:	bf14      	ite	ne
 80a45aa:	2000      	movne	r0, #0
 80a45ac:	2006      	moveq	r0, #6
 80a45ae:	e17c      	b.n	80a48aa <__gethex+0x438>
 80a45b0:	4629      	mov	r1, r5
 80a45b2:	1bf3      	subs	r3, r6, r7
 80a45b4:	3b01      	subs	r3, #1
 80a45b6:	2b07      	cmp	r3, #7
 80a45b8:	dd02      	ble.n	80a45c0 <__gethex+0x14e>
 80a45ba:	3101      	adds	r1, #1
 80a45bc:	105b      	asrs	r3, r3, #1
 80a45be:	e7fa      	b.n	80a45b6 <__gethex+0x144>
 80a45c0:	9802      	ldr	r0, [sp, #8]
 80a45c2:	f000 fb07 	bl	80a4bd4 <_Balloc>
 80a45c6:	f04f 0900 	mov.w	r9, #0
 80a45ca:	4605      	mov	r5, r0
 80a45cc:	46cb      	mov	fp, r9
 80a45ce:	9b01      	ldr	r3, [sp, #4]
 80a45d0:	f100 0a14 	add.w	sl, r0, #20
 80a45d4:	f1c3 0301 	rsb	r3, r3, #1
 80a45d8:	f8cd a010 	str.w	sl, [sp, #16]
 80a45dc:	9308      	str	r3, [sp, #32]
 80a45de:	42b7      	cmp	r7, r6
 80a45e0:	d22f      	bcs.n	80a4642 <__gethex+0x1d0>
 80a45e2:	1e73      	subs	r3, r6, #1
 80a45e4:	9305      	str	r3, [sp, #20]
 80a45e6:	9a07      	ldr	r2, [sp, #28]
 80a45e8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80a45ec:	4293      	cmp	r3, r2
 80a45ee:	d00b      	beq.n	80a4608 <__gethex+0x196>
 80a45f0:	f1bb 0f20 	cmp.w	fp, #32
 80a45f4:	d116      	bne.n	80a4624 <__gethex+0x1b2>
 80a45f6:	9b04      	ldr	r3, [sp, #16]
 80a45f8:	f8c3 9000 	str.w	r9, [r3]
 80a45fc:	3304      	adds	r3, #4
 80a45fe:	f04f 0900 	mov.w	r9, #0
 80a4602:	9304      	str	r3, [sp, #16]
 80a4604:	46cb      	mov	fp, r9
 80a4606:	e00d      	b.n	80a4624 <__gethex+0x1b2>
 80a4608:	9b05      	ldr	r3, [sp, #20]
 80a460a:	9a08      	ldr	r2, [sp, #32]
 80a460c:	4413      	add	r3, r2
 80a460e:	429f      	cmp	r7, r3
 80a4610:	d8ee      	bhi.n	80a45f0 <__gethex+0x17e>
 80a4612:	4618      	mov	r0, r3
 80a4614:	9a01      	ldr	r2, [sp, #4]
 80a4616:	9903      	ldr	r1, [sp, #12]
 80a4618:	9309      	str	r3, [sp, #36]	; 0x24
 80a461a:	f7fe fdb8 	bl	80a318e <strncmp>
 80a461e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a4620:	b168      	cbz	r0, 80a463e <__gethex+0x1cc>
 80a4622:	e7e5      	b.n	80a45f0 <__gethex+0x17e>
 80a4624:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80a4628:	f7ff ff0e 	bl	80a4448 <__hexdig_fun>
 80a462c:	f000 000f 	and.w	r0, r0, #15
 80a4630:	fa00 f00b 	lsl.w	r0, r0, fp
 80a4634:	9b05      	ldr	r3, [sp, #20]
 80a4636:	ea49 0900 	orr.w	r9, r9, r0
 80a463a:	f10b 0b04 	add.w	fp, fp, #4
 80a463e:	461e      	mov	r6, r3
 80a4640:	e7cd      	b.n	80a45de <__gethex+0x16c>
 80a4642:	9804      	ldr	r0, [sp, #16]
 80a4644:	f840 9b04 	str.w	r9, [r0], #4
 80a4648:	ebca 0000 	rsb	r0, sl, r0
 80a464c:	1080      	asrs	r0, r0, #2
 80a464e:	6128      	str	r0, [r5, #16]
 80a4650:	0147      	lsls	r7, r0, #5
 80a4652:	4648      	mov	r0, r9
 80a4654:	f000 fb83 	bl	80a4d5e <__hi0bits>
 80a4658:	f8d8 6000 	ldr.w	r6, [r8]
 80a465c:	1a38      	subs	r0, r7, r0
 80a465e:	42b0      	cmp	r0, r6
 80a4660:	dd26      	ble.n	80a46b0 <__gethex+0x23e>
 80a4662:	1b87      	subs	r7, r0, r6
 80a4664:	4639      	mov	r1, r7
 80a4666:	4628      	mov	r0, r5
 80a4668:	f000 fe7b 	bl	80a5362 <__any_on>
 80a466c:	b1c8      	cbz	r0, 80a46a2 <__gethex+0x230>
 80a466e:	1e7b      	subs	r3, r7, #1
 80a4670:	1159      	asrs	r1, r3, #5
 80a4672:	f003 021f 	and.w	r2, r3, #31
 80a4676:	f04f 0901 	mov.w	r9, #1
 80a467a:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80a467e:	fa09 f202 	lsl.w	r2, r9, r2
 80a4682:	420a      	tst	r2, r1
 80a4684:	d00e      	beq.n	80a46a4 <__gethex+0x232>
 80a4686:	454b      	cmp	r3, r9
 80a4688:	dc02      	bgt.n	80a4690 <__gethex+0x21e>
 80a468a:	f04f 0902 	mov.w	r9, #2
 80a468e:	e009      	b.n	80a46a4 <__gethex+0x232>
 80a4690:	1eb9      	subs	r1, r7, #2
 80a4692:	4628      	mov	r0, r5
 80a4694:	f000 fe65 	bl	80a5362 <__any_on>
 80a4698:	2800      	cmp	r0, #0
 80a469a:	d0f6      	beq.n	80a468a <__gethex+0x218>
 80a469c:	f04f 0903 	mov.w	r9, #3
 80a46a0:	e000      	b.n	80a46a4 <__gethex+0x232>
 80a46a2:	4681      	mov	r9, r0
 80a46a4:	4639      	mov	r1, r7
 80a46a6:	4628      	mov	r0, r5
 80a46a8:	f7ff fe98 	bl	80a43dc <rshift>
 80a46ac:	443c      	add	r4, r7
 80a46ae:	e00c      	b.n	80a46ca <__gethex+0x258>
 80a46b0:	da09      	bge.n	80a46c6 <__gethex+0x254>
 80a46b2:	1a37      	subs	r7, r6, r0
 80a46b4:	4629      	mov	r1, r5
 80a46b6:	463a      	mov	r2, r7
 80a46b8:	9802      	ldr	r0, [sp, #8]
 80a46ba:	f000 fc85 	bl	80a4fc8 <__lshift>
 80a46be:	4605      	mov	r5, r0
 80a46c0:	1be4      	subs	r4, r4, r7
 80a46c2:	f100 0a14 	add.w	sl, r0, #20
 80a46c6:	f04f 0900 	mov.w	r9, #0
 80a46ca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80a46ce:	429c      	cmp	r4, r3
 80a46d0:	dd08      	ble.n	80a46e4 <__gethex+0x272>
 80a46d2:	9802      	ldr	r0, [sp, #8]
 80a46d4:	4629      	mov	r1, r5
 80a46d6:	f000 fab2 	bl	80a4c3e <_Bfree>
 80a46da:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80a46dc:	2300      	movs	r3, #0
 80a46de:	6013      	str	r3, [r2, #0]
 80a46e0:	20a3      	movs	r0, #163	; 0xa3
 80a46e2:	e0e2      	b.n	80a48aa <__gethex+0x438>
 80a46e4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80a46e8:	4284      	cmp	r4, r0
 80a46ea:	da53      	bge.n	80a4794 <__gethex+0x322>
 80a46ec:	1b04      	subs	r4, r0, r4
 80a46ee:	42a6      	cmp	r6, r4
 80a46f0:	dc2e      	bgt.n	80a4750 <__gethex+0x2de>
 80a46f2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80a46f6:	2b02      	cmp	r3, #2
 80a46f8:	d01a      	beq.n	80a4730 <__gethex+0x2be>
 80a46fa:	2b03      	cmp	r3, #3
 80a46fc:	d01c      	beq.n	80a4738 <__gethex+0x2c6>
 80a46fe:	2b01      	cmp	r3, #1
 80a4700:	d11d      	bne.n	80a473e <__gethex+0x2cc>
 80a4702:	42a6      	cmp	r6, r4
 80a4704:	d11b      	bne.n	80a473e <__gethex+0x2cc>
 80a4706:	2e01      	cmp	r6, #1
 80a4708:	dc0b      	bgt.n	80a4722 <__gethex+0x2b0>
 80a470a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80a470e:	9a06      	ldr	r2, [sp, #24]
 80a4710:	2062      	movs	r0, #98	; 0x62
 80a4712:	6013      	str	r3, [r2, #0]
 80a4714:	2301      	movs	r3, #1
 80a4716:	612b      	str	r3, [r5, #16]
 80a4718:	f8ca 3000 	str.w	r3, [sl]
 80a471c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80a471e:	601d      	str	r5, [r3, #0]
 80a4720:	e0c3      	b.n	80a48aa <__gethex+0x438>
 80a4722:	1e71      	subs	r1, r6, #1
 80a4724:	4628      	mov	r0, r5
 80a4726:	f000 fe1c 	bl	80a5362 <__any_on>
 80a472a:	2800      	cmp	r0, #0
 80a472c:	d1ed      	bne.n	80a470a <__gethex+0x298>
 80a472e:	e006      	b.n	80a473e <__gethex+0x2cc>
 80a4730:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80a4732:	2b00      	cmp	r3, #0
 80a4734:	d0e9      	beq.n	80a470a <__gethex+0x298>
 80a4736:	e002      	b.n	80a473e <__gethex+0x2cc>
 80a4738:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80a473a:	2b00      	cmp	r3, #0
 80a473c:	d1e5      	bne.n	80a470a <__gethex+0x298>
 80a473e:	9802      	ldr	r0, [sp, #8]
 80a4740:	4629      	mov	r1, r5
 80a4742:	f000 fa7c 	bl	80a4c3e <_Bfree>
 80a4746:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80a4748:	2300      	movs	r3, #0
 80a474a:	6013      	str	r3, [r2, #0]
 80a474c:	2050      	movs	r0, #80	; 0x50
 80a474e:	e0ac      	b.n	80a48aa <__gethex+0x438>
 80a4750:	1e67      	subs	r7, r4, #1
 80a4752:	f1b9 0f00 	cmp.w	r9, #0
 80a4756:	d106      	bne.n	80a4766 <__gethex+0x2f4>
 80a4758:	b13f      	cbz	r7, 80a476a <__gethex+0x2f8>
 80a475a:	4639      	mov	r1, r7
 80a475c:	4628      	mov	r0, r5
 80a475e:	f000 fe00 	bl	80a5362 <__any_on>
 80a4762:	4681      	mov	r9, r0
 80a4764:	e001      	b.n	80a476a <__gethex+0x2f8>
 80a4766:	f04f 0901 	mov.w	r9, #1
 80a476a:	117a      	asrs	r2, r7, #5
 80a476c:	2301      	movs	r3, #1
 80a476e:	f007 071f 	and.w	r7, r7, #31
 80a4772:	fa03 f707 	lsl.w	r7, r3, r7
 80a4776:	f85a 3022 	ldr.w	r3, [sl, r2, lsl #2]
 80a477a:	4621      	mov	r1, r4
 80a477c:	421f      	tst	r7, r3
 80a477e:	4628      	mov	r0, r5
 80a4780:	bf18      	it	ne
 80a4782:	f049 0902 	orrne.w	r9, r9, #2
 80a4786:	1b36      	subs	r6, r6, r4
 80a4788:	f7ff fe28 	bl	80a43dc <rshift>
 80a478c:	2702      	movs	r7, #2
 80a478e:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80a4792:	e000      	b.n	80a4796 <__gethex+0x324>
 80a4794:	2701      	movs	r7, #1
 80a4796:	f1b9 0f00 	cmp.w	r9, #0
 80a479a:	f000 8081 	beq.w	80a48a0 <__gethex+0x42e>
 80a479e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80a47a2:	2b02      	cmp	r3, #2
 80a47a4:	d00e      	beq.n	80a47c4 <__gethex+0x352>
 80a47a6:	2b03      	cmp	r3, #3
 80a47a8:	d010      	beq.n	80a47cc <__gethex+0x35a>
 80a47aa:	2b01      	cmp	r3, #1
 80a47ac:	d176      	bne.n	80a489c <__gethex+0x42a>
 80a47ae:	f019 0f02 	tst.w	r9, #2
 80a47b2:	d073      	beq.n	80a489c <__gethex+0x42a>
 80a47b4:	f8da 0000 	ldr.w	r0, [sl]
 80a47b8:	ea49 0900 	orr.w	r9, r9, r0
 80a47bc:	f019 0f01 	tst.w	r9, #1
 80a47c0:	d107      	bne.n	80a47d2 <__gethex+0x360>
 80a47c2:	e06b      	b.n	80a489c <__gethex+0x42a>
 80a47c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80a47c6:	f1c3 0301 	rsb	r3, r3, #1
 80a47ca:	9315      	str	r3, [sp, #84]	; 0x54
 80a47cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80a47ce:	2b00      	cmp	r3, #0
 80a47d0:	d064      	beq.n	80a489c <__gethex+0x42a>
 80a47d2:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80a47d6:	f105 0314 	add.w	r3, r5, #20
 80a47da:	ea4f 098a 	mov.w	r9, sl, lsl #2
 80a47de:	eb03 0109 	add.w	r1, r3, r9
 80a47e2:	2000      	movs	r0, #0
 80a47e4:	681a      	ldr	r2, [r3, #0]
 80a47e6:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 80a47ea:	d002      	beq.n	80a47f2 <__gethex+0x380>
 80a47ec:	3201      	adds	r2, #1
 80a47ee:	601a      	str	r2, [r3, #0]
 80a47f0:	e020      	b.n	80a4834 <__gethex+0x3c2>
 80a47f2:	f843 0b04 	str.w	r0, [r3], #4
 80a47f6:	4299      	cmp	r1, r3
 80a47f8:	d8f4      	bhi.n	80a47e4 <__gethex+0x372>
 80a47fa:	68ab      	ldr	r3, [r5, #8]
 80a47fc:	459a      	cmp	sl, r3
 80a47fe:	db12      	blt.n	80a4826 <__gethex+0x3b4>
 80a4800:	6869      	ldr	r1, [r5, #4]
 80a4802:	9802      	ldr	r0, [sp, #8]
 80a4804:	3101      	adds	r1, #1
 80a4806:	f000 f9e5 	bl	80a4bd4 <_Balloc>
 80a480a:	4683      	mov	fp, r0
 80a480c:	692a      	ldr	r2, [r5, #16]
 80a480e:	f105 010c 	add.w	r1, r5, #12
 80a4812:	3202      	adds	r2, #2
 80a4814:	0092      	lsls	r2, r2, #2
 80a4816:	300c      	adds	r0, #12
 80a4818:	f7fe fc48 	bl	80a30ac <memcpy>
 80a481c:	4629      	mov	r1, r5
 80a481e:	9802      	ldr	r0, [sp, #8]
 80a4820:	f000 fa0d 	bl	80a4c3e <_Bfree>
 80a4824:	465d      	mov	r5, fp
 80a4826:	692b      	ldr	r3, [r5, #16]
 80a4828:	1c5a      	adds	r2, r3, #1
 80a482a:	612a      	str	r2, [r5, #16]
 80a482c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80a4830:	2201      	movs	r2, #1
 80a4832:	615a      	str	r2, [r3, #20]
 80a4834:	2f02      	cmp	r7, #2
 80a4836:	f105 0214 	add.w	r2, r5, #20
 80a483a:	d111      	bne.n	80a4860 <__gethex+0x3ee>
 80a483c:	f8d8 3000 	ldr.w	r3, [r8]
 80a4840:	3b01      	subs	r3, #1
 80a4842:	429e      	cmp	r6, r3
 80a4844:	d127      	bne.n	80a4896 <__gethex+0x424>
 80a4846:	1171      	asrs	r1, r6, #5
 80a4848:	2301      	movs	r3, #1
 80a484a:	f006 061f 	and.w	r6, r6, #31
 80a484e:	fa03 f606 	lsl.w	r6, r3, r6
 80a4852:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80a4856:	421e      	tst	r6, r3
 80a4858:	bf0c      	ite	eq
 80a485a:	2702      	moveq	r7, #2
 80a485c:	2701      	movne	r7, #1
 80a485e:	e01a      	b.n	80a4896 <__gethex+0x424>
 80a4860:	692b      	ldr	r3, [r5, #16]
 80a4862:	459a      	cmp	sl, r3
 80a4864:	da0a      	bge.n	80a487c <__gethex+0x40a>
 80a4866:	2101      	movs	r1, #1
 80a4868:	4628      	mov	r0, r5
 80a486a:	f7ff fdb7 	bl	80a43dc <rshift>
 80a486e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80a4872:	3401      	adds	r4, #1
 80a4874:	429c      	cmp	r4, r3
 80a4876:	f73f af2c 	bgt.w	80a46d2 <__gethex+0x260>
 80a487a:	e00b      	b.n	80a4894 <__gethex+0x422>
 80a487c:	f016 061f 	ands.w	r6, r6, #31
 80a4880:	d008      	beq.n	80a4894 <__gethex+0x422>
 80a4882:	4491      	add	r9, r2
 80a4884:	f859 0c04 	ldr.w	r0, [r9, #-4]
 80a4888:	f000 fa69 	bl	80a4d5e <__hi0bits>
 80a488c:	f1c6 0620 	rsb	r6, r6, #32
 80a4890:	42b0      	cmp	r0, r6
 80a4892:	dbe8      	blt.n	80a4866 <__gethex+0x3f4>
 80a4894:	2701      	movs	r7, #1
 80a4896:	f047 0720 	orr.w	r7, r7, #32
 80a489a:	e001      	b.n	80a48a0 <__gethex+0x42e>
 80a489c:	f047 0710 	orr.w	r7, r7, #16
 80a48a0:	4638      	mov	r0, r7
 80a48a2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80a48a4:	601d      	str	r5, [r3, #0]
 80a48a6:	9b06      	ldr	r3, [sp, #24]
 80a48a8:	601c      	str	r4, [r3, #0]
 80a48aa:	b00b      	add	sp, #44	; 0x2c
 80a48ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a48b0 <L_shift>:
 80a48b0:	f1c2 0208 	rsb	r2, r2, #8
 80a48b4:	0092      	lsls	r2, r2, #2
 80a48b6:	b570      	push	{r4, r5, r6, lr}
 80a48b8:	f1c2 0620 	rsb	r6, r2, #32
 80a48bc:	6843      	ldr	r3, [r0, #4]
 80a48be:	6805      	ldr	r5, [r0, #0]
 80a48c0:	fa03 f406 	lsl.w	r4, r3, r6
 80a48c4:	432c      	orrs	r4, r5
 80a48c6:	40d3      	lsrs	r3, r2
 80a48c8:	6004      	str	r4, [r0, #0]
 80a48ca:	f840 3f04 	str.w	r3, [r0, #4]!
 80a48ce:	4288      	cmp	r0, r1
 80a48d0:	d3f4      	bcc.n	80a48bc <L_shift+0xc>
 80a48d2:	bd70      	pop	{r4, r5, r6, pc}

080a48d4 <__match>:
 80a48d4:	b530      	push	{r4, r5, lr}
 80a48d6:	6803      	ldr	r3, [r0, #0]
 80a48d8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a48dc:	3301      	adds	r3, #1
 80a48de:	b14c      	cbz	r4, 80a48f4 <__match+0x20>
 80a48e0:	781a      	ldrb	r2, [r3, #0]
 80a48e2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80a48e6:	2d19      	cmp	r5, #25
 80a48e8:	bf98      	it	ls
 80a48ea:	3220      	addls	r2, #32
 80a48ec:	42a2      	cmp	r2, r4
 80a48ee:	d0f3      	beq.n	80a48d8 <__match+0x4>
 80a48f0:	2000      	movs	r0, #0
 80a48f2:	bd30      	pop	{r4, r5, pc}
 80a48f4:	6003      	str	r3, [r0, #0]
 80a48f6:	2001      	movs	r0, #1
 80a48f8:	bd30      	pop	{r4, r5, pc}

080a48fa <__hexnan>:
 80a48fa:	680b      	ldr	r3, [r1, #0]
 80a48fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a4900:	115e      	asrs	r6, r3, #5
 80a4902:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80a4906:	f013 031f 	ands.w	r3, r3, #31
 80a490a:	bf18      	it	ne
 80a490c:	3604      	addne	r6, #4
 80a490e:	1f35      	subs	r5, r6, #4
 80a4910:	4617      	mov	r7, r2
 80a4912:	2200      	movs	r2, #0
 80a4914:	4682      	mov	sl, r0
 80a4916:	46a8      	mov	r8, r5
 80a4918:	462c      	mov	r4, r5
 80a491a:	4691      	mov	r9, r2
 80a491c:	b085      	sub	sp, #20
 80a491e:	f8d0 b000 	ldr.w	fp, [r0]
 80a4922:	9301      	str	r3, [sp, #4]
 80a4924:	f846 2c04 	str.w	r2, [r6, #-4]
 80a4928:	9200      	str	r2, [sp, #0]
 80a492a:	f81b 1f01 	ldrb.w	r1, [fp, #1]!
 80a492e:	2900      	cmp	r1, #0
 80a4930:	d03c      	beq.n	80a49ac <__hexnan+0xb2>
 80a4932:	4608      	mov	r0, r1
 80a4934:	9203      	str	r2, [sp, #12]
 80a4936:	9102      	str	r1, [sp, #8]
 80a4938:	f7ff fd86 	bl	80a4448 <__hexdig_fun>
 80a493c:	9a03      	ldr	r2, [sp, #12]
 80a493e:	bb00      	cbnz	r0, 80a4982 <__hexnan+0x88>
 80a4940:	9902      	ldr	r1, [sp, #8]
 80a4942:	2920      	cmp	r1, #32
 80a4944:	d816      	bhi.n	80a4974 <__hexnan+0x7a>
 80a4946:	9b00      	ldr	r3, [sp, #0]
 80a4948:	4599      	cmp	r9, r3
 80a494a:	ddee      	ble.n	80a492a <__hexnan+0x30>
 80a494c:	4544      	cmp	r4, r8
 80a494e:	d205      	bcs.n	80a495c <__hexnan+0x62>
 80a4950:	2a07      	cmp	r2, #7
 80a4952:	dc03      	bgt.n	80a495c <__hexnan+0x62>
 80a4954:	4641      	mov	r1, r8
 80a4956:	4620      	mov	r0, r4
 80a4958:	f7ff ffaa 	bl	80a48b0 <L_shift>
 80a495c:	42bc      	cmp	r4, r7
 80a495e:	d923      	bls.n	80a49a8 <__hexnan+0xae>
 80a4960:	2300      	movs	r3, #0
 80a4962:	f1a4 0804 	sub.w	r8, r4, #4
 80a4966:	f844 3c04 	str.w	r3, [r4, #-4]
 80a496a:	f8cd 9000 	str.w	r9, [sp]
 80a496e:	4644      	mov	r4, r8
 80a4970:	461a      	mov	r2, r3
 80a4972:	e7da      	b.n	80a492a <__hexnan+0x30>
 80a4974:	2929      	cmp	r1, #41	; 0x29
 80a4976:	d148      	bne.n	80a4a0a <__hexnan+0x110>
 80a4978:	f10b 0301 	add.w	r3, fp, #1
 80a497c:	f8ca 3000 	str.w	r3, [sl]
 80a4980:	e014      	b.n	80a49ac <__hexnan+0xb2>
 80a4982:	3201      	adds	r2, #1
 80a4984:	2a08      	cmp	r2, #8
 80a4986:	f109 0901 	add.w	r9, r9, #1
 80a498a:	dd06      	ble.n	80a499a <__hexnan+0xa0>
 80a498c:	42bc      	cmp	r4, r7
 80a498e:	d9cc      	bls.n	80a492a <__hexnan+0x30>
 80a4990:	2300      	movs	r3, #0
 80a4992:	f844 3c04 	str.w	r3, [r4, #-4]
 80a4996:	2201      	movs	r2, #1
 80a4998:	3c04      	subs	r4, #4
 80a499a:	6821      	ldr	r1, [r4, #0]
 80a499c:	f000 000f 	and.w	r0, r0, #15
 80a49a0:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
 80a49a4:	6020      	str	r0, [r4, #0]
 80a49a6:	e7c0      	b.n	80a492a <__hexnan+0x30>
 80a49a8:	2208      	movs	r2, #8
 80a49aa:	e7be      	b.n	80a492a <__hexnan+0x30>
 80a49ac:	f1b9 0f00 	cmp.w	r9, #0
 80a49b0:	d02b      	beq.n	80a4a0a <__hexnan+0x110>
 80a49b2:	4544      	cmp	r4, r8
 80a49b4:	d205      	bcs.n	80a49c2 <__hexnan+0xc8>
 80a49b6:	2a07      	cmp	r2, #7
 80a49b8:	dc03      	bgt.n	80a49c2 <__hexnan+0xc8>
 80a49ba:	4641      	mov	r1, r8
 80a49bc:	4620      	mov	r0, r4
 80a49be:	f7ff ff77 	bl	80a48b0 <L_shift>
 80a49c2:	42bc      	cmp	r4, r7
 80a49c4:	d90c      	bls.n	80a49e0 <__hexnan+0xe6>
 80a49c6:	463b      	mov	r3, r7
 80a49c8:	f854 2b04 	ldr.w	r2, [r4], #4
 80a49cc:	42a5      	cmp	r5, r4
 80a49ce:	f843 2b04 	str.w	r2, [r3], #4
 80a49d2:	d2f9      	bcs.n	80a49c8 <__hexnan+0xce>
 80a49d4:	2200      	movs	r2, #0
 80a49d6:	f843 2b04 	str.w	r2, [r3], #4
 80a49da:	429d      	cmp	r5, r3
 80a49dc:	d2fb      	bcs.n	80a49d6 <__hexnan+0xdc>
 80a49de:	e00b      	b.n	80a49f8 <__hexnan+0xfe>
 80a49e0:	9b01      	ldr	r3, [sp, #4]
 80a49e2:	b14b      	cbz	r3, 80a49f8 <__hexnan+0xfe>
 80a49e4:	f1c3 0220 	rsb	r2, r3, #32
 80a49e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80a49ec:	40d3      	lsrs	r3, r2
 80a49ee:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80a49f2:	4013      	ands	r3, r2
 80a49f4:	f846 3c04 	str.w	r3, [r6, #-4]
 80a49f8:	682b      	ldr	r3, [r5, #0]
 80a49fa:	b943      	cbnz	r3, 80a4a0e <__hexnan+0x114>
 80a49fc:	42bd      	cmp	r5, r7
 80a49fe:	d102      	bne.n	80a4a06 <__hexnan+0x10c>
 80a4a00:	2301      	movs	r3, #1
 80a4a02:	602b      	str	r3, [r5, #0]
 80a4a04:	e003      	b.n	80a4a0e <__hexnan+0x114>
 80a4a06:	3d04      	subs	r5, #4
 80a4a08:	e7f6      	b.n	80a49f8 <__hexnan+0xfe>
 80a4a0a:	2004      	movs	r0, #4
 80a4a0c:	e000      	b.n	80a4a10 <__hexnan+0x116>
 80a4a0e:	2005      	movs	r0, #5
 80a4a10:	b005      	add	sp, #20
 80a4a12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080a4a18 <_findenv_r>:
 80a4a18:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a4a1c:	4607      	mov	r7, r0
 80a4a1e:	468b      	mov	fp, r1
 80a4a20:	4690      	mov	r8, r2
 80a4a22:	f000 fcce 	bl	80a53c2 <__env_lock>
 80a4a26:	4b19      	ldr	r3, [pc, #100]	; (80a4a8c <_findenv_r+0x74>)
 80a4a28:	681d      	ldr	r5, [r3, #0]
 80a4a2a:	469a      	mov	sl, r3
 80a4a2c:	b13d      	cbz	r5, 80a4a3e <_findenv_r+0x26>
 80a4a2e:	465c      	mov	r4, fp
 80a4a30:	4623      	mov	r3, r4
 80a4a32:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a4a36:	b142      	cbz	r2, 80a4a4a <_findenv_r+0x32>
 80a4a38:	2a3d      	cmp	r2, #61	; 0x3d
 80a4a3a:	461c      	mov	r4, r3
 80a4a3c:	d1f8      	bne.n	80a4a30 <_findenv_r+0x18>
 80a4a3e:	4638      	mov	r0, r7
 80a4a40:	f000 fcc0 	bl	80a53c4 <__env_unlock>
 80a4a44:	2000      	movs	r0, #0
 80a4a46:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a4a4a:	ebcb 0404 	rsb	r4, fp, r4
 80a4a4e:	46a9      	mov	r9, r5
 80a4a50:	f859 0b04 	ldr.w	r0, [r9], #4
 80a4a54:	2800      	cmp	r0, #0
 80a4a56:	d0f2      	beq.n	80a4a3e <_findenv_r+0x26>
 80a4a58:	4622      	mov	r2, r4
 80a4a5a:	4659      	mov	r1, fp
 80a4a5c:	f7fe fb97 	bl	80a318e <strncmp>
 80a4a60:	b988      	cbnz	r0, 80a4a86 <_findenv_r+0x6e>
 80a4a62:	f859 3c04 	ldr.w	r3, [r9, #-4]
 80a4a66:	191e      	adds	r6, r3, r4
 80a4a68:	5d1b      	ldrb	r3, [r3, r4]
 80a4a6a:	2b3d      	cmp	r3, #61	; 0x3d
 80a4a6c:	d10b      	bne.n	80a4a86 <_findenv_r+0x6e>
 80a4a6e:	f8da 3000 	ldr.w	r3, [sl]
 80a4a72:	4638      	mov	r0, r7
 80a4a74:	1aed      	subs	r5, r5, r3
 80a4a76:	10ad      	asrs	r5, r5, #2
 80a4a78:	f8c8 5000 	str.w	r5, [r8]
 80a4a7c:	f000 fca2 	bl	80a53c4 <__env_unlock>
 80a4a80:	1c70      	adds	r0, r6, #1
 80a4a82:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a4a86:	464d      	mov	r5, r9
 80a4a88:	e7e1      	b.n	80a4a4e <_findenv_r+0x36>
 80a4a8a:	bf00      	nop
 80a4a8c:	200000ec 	.word	0x200000ec

080a4a90 <_getenv_r>:
 80a4a90:	b507      	push	{r0, r1, r2, lr}
 80a4a92:	aa01      	add	r2, sp, #4
 80a4a94:	f7ff ffc0 	bl	80a4a18 <_findenv_r>
 80a4a98:	b003      	add	sp, #12
 80a4a9a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a4aa0 <__gettzinfo>:
 80a4aa0:	4800      	ldr	r0, [pc, #0]	; (80a4aa4 <__gettzinfo+0x4>)
 80a4aa2:	4770      	bx	lr
 80a4aa4:	200000ac 	.word	0x200000ac

080a4aa8 <gmtime_r>:
 80a4aa8:	6802      	ldr	r2, [r0, #0]
 80a4aaa:	4b46      	ldr	r3, [pc, #280]	; (80a4bc4 <gmtime_r+0x11c>)
 80a4aac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a4aae:	fb92 f4f3 	sdiv	r4, r2, r3
 80a4ab2:	fb03 2214 	mls	r2, r3, r4, r2
 80a4ab6:	2a00      	cmp	r2, #0
 80a4ab8:	bfbc      	itt	lt
 80a4aba:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 80a4abe:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 80a4ac2:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 80a4ac6:	fb92 f3f0 	sdiv	r3, r2, r0
 80a4aca:	fb00 2213 	mls	r2, r0, r3, r2
 80a4ace:	f04f 003c 	mov.w	r0, #60	; 0x3c
 80a4ad2:	608b      	str	r3, [r1, #8]
 80a4ad4:	fb92 f3f0 	sdiv	r3, r2, r0
 80a4ad8:	fb00 2213 	mls	r2, r0, r3, r2
 80a4adc:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
 80a4ae0:	bfac      	ite	ge
 80a4ae2:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
 80a4ae6:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
 80a4aea:	604b      	str	r3, [r1, #4]
 80a4aec:	600a      	str	r2, [r1, #0]
 80a4aee:	2307      	movs	r3, #7
 80a4af0:	1ce2      	adds	r2, r4, #3
 80a4af2:	fb92 f3f3 	sdiv	r3, r2, r3
 80a4af6:	4d34      	ldr	r5, [pc, #208]	; (80a4bc8 <gmtime_r+0x120>)
 80a4af8:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a4afc:	fb94 f5f5 	sdiv	r5, r4, r5
 80a4b00:	1ad3      	subs	r3, r2, r3
 80a4b02:	f648 62ac 	movw	r2, #36524	; 0x8eac
 80a4b06:	f240 57b4 	movw	r7, #1460	; 0x5b4
 80a4b0a:	618b      	str	r3, [r1, #24]
 80a4b0c:	4b2f      	ldr	r3, [pc, #188]	; (80a4bcc <gmtime_r+0x124>)
 80a4b0e:	4830      	ldr	r0, [pc, #192]	; (80a4bd0 <gmtime_r+0x128>)
 80a4b10:	fb03 4405 	mla	r4, r3, r5, r4
 80a4b14:	fbb4 f2f2 	udiv	r2, r4, r2
 80a4b18:	fbb4 f3f7 	udiv	r3, r4, r7
 80a4b1c:	fbb4 f0f0 	udiv	r0, r4, r0
 80a4b20:	4422      	add	r2, r4
 80a4b22:	1ad2      	subs	r2, r2, r3
 80a4b24:	f648 6694 	movw	r6, #36500	; 0x8e94
 80a4b28:	1a13      	subs	r3, r2, r0
 80a4b2a:	f240 126d 	movw	r2, #365	; 0x16d
 80a4b2e:	fbb3 f6f6 	udiv	r6, r3, r6
 80a4b32:	fbb3 f0f2 	udiv	r0, r3, r2
 80a4b36:	fbb3 f3f7 	udiv	r3, r3, r7
 80a4b3a:	4434      	add	r4, r6
 80a4b3c:	1ae3      	subs	r3, r4, r3
 80a4b3e:	fb02 3310 	mls	r3, r2, r0, r3
 80a4b42:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80a4b46:	2499      	movs	r4, #153	; 0x99
 80a4b48:	3202      	adds	r2, #2
 80a4b4a:	fbb2 f2f4 	udiv	r2, r2, r4
 80a4b4e:	4354      	muls	r4, r2
 80a4b50:	1ca6      	adds	r6, r4, #2
 80a4b52:	2405      	movs	r4, #5
 80a4b54:	fbb6 f4f4 	udiv	r4, r6, r4
 80a4b58:	2a0a      	cmp	r2, #10
 80a4b5a:	bf34      	ite	cc
 80a4b5c:	2602      	movcc	r6, #2
 80a4b5e:	f06f 0609 	mvncs.w	r6, #9
 80a4b62:	4416      	add	r6, r2
 80a4b64:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80a4b68:	fb02 0505 	mla	r5, r2, r5, r0
 80a4b6c:	1c5f      	adds	r7, r3, #1
 80a4b6e:	2e01      	cmp	r6, #1
 80a4b70:	bf98      	it	ls
 80a4b72:	3501      	addls	r5, #1
 80a4b74:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 80a4b78:	eba7 0704 	sub.w	r7, r7, r4
 80a4b7c:	d302      	bcc.n	80a4b84 <gmtime_r+0xdc>
 80a4b7e:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
 80a4b82:	e014      	b.n	80a4bae <gmtime_r+0x106>
 80a4b84:	0782      	lsls	r2, r0, #30
 80a4b86:	d105      	bne.n	80a4b94 <gmtime_r+0xec>
 80a4b88:	2464      	movs	r4, #100	; 0x64
 80a4b8a:	fbb0 f2f4 	udiv	r2, r0, r4
 80a4b8e:	fb04 0212 	mls	r2, r4, r2, r0
 80a4b92:	b94a      	cbnz	r2, 80a4ba8 <gmtime_r+0x100>
 80a4b94:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80a4b98:	fbb0 f4f2 	udiv	r4, r0, r2
 80a4b9c:	fb02 0014 	mls	r0, r2, r4, r0
 80a4ba0:	fab0 f280 	clz	r2, r0
 80a4ba4:	0952      	lsrs	r2, r2, #5
 80a4ba6:	e000      	b.n	80a4baa <gmtime_r+0x102>
 80a4ba8:	2201      	movs	r2, #1
 80a4baa:	333b      	adds	r3, #59	; 0x3b
 80a4bac:	441a      	add	r2, r3
 80a4bae:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 80a4bb2:	2300      	movs	r3, #0
 80a4bb4:	61ca      	str	r2, [r1, #28]
 80a4bb6:	614d      	str	r5, [r1, #20]
 80a4bb8:	610e      	str	r6, [r1, #16]
 80a4bba:	60cf      	str	r7, [r1, #12]
 80a4bbc:	620b      	str	r3, [r1, #32]
 80a4bbe:	4608      	mov	r0, r1
 80a4bc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a4bc2:	bf00      	nop
 80a4bc4:	00015180 	.word	0x00015180
 80a4bc8:	00023ab1 	.word	0x00023ab1
 80a4bcc:	fffdc54f 	.word	0xfffdc54f
 80a4bd0:	00023ab0 	.word	0x00023ab0

080a4bd4 <_Balloc>:
 80a4bd4:	b570      	push	{r4, r5, r6, lr}
 80a4bd6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80a4bd8:	4604      	mov	r4, r0
 80a4bda:	460e      	mov	r6, r1
 80a4bdc:	b93d      	cbnz	r5, 80a4bee <_Balloc+0x1a>
 80a4bde:	2010      	movs	r0, #16
 80a4be0:	f7fc f808 	bl	80a0bf4 <malloc>
 80a4be4:	6260      	str	r0, [r4, #36]	; 0x24
 80a4be6:	6045      	str	r5, [r0, #4]
 80a4be8:	6085      	str	r5, [r0, #8]
 80a4bea:	6005      	str	r5, [r0, #0]
 80a4bec:	60c5      	str	r5, [r0, #12]
 80a4bee:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80a4bf0:	68eb      	ldr	r3, [r5, #12]
 80a4bf2:	b143      	cbz	r3, 80a4c06 <_Balloc+0x32>
 80a4bf4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80a4bf6:	68db      	ldr	r3, [r3, #12]
 80a4bf8:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80a4bfc:	b178      	cbz	r0, 80a4c1e <_Balloc+0x4a>
 80a4bfe:	6802      	ldr	r2, [r0, #0]
 80a4c00:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80a4c04:	e017      	b.n	80a4c36 <_Balloc+0x62>
 80a4c06:	2221      	movs	r2, #33	; 0x21
 80a4c08:	2104      	movs	r1, #4
 80a4c0a:	4620      	mov	r0, r4
 80a4c0c:	f000 fbcb 	bl	80a53a6 <_calloc_r>
 80a4c10:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80a4c12:	60e8      	str	r0, [r5, #12]
 80a4c14:	68db      	ldr	r3, [r3, #12]
 80a4c16:	2b00      	cmp	r3, #0
 80a4c18:	d1ec      	bne.n	80a4bf4 <_Balloc+0x20>
 80a4c1a:	2000      	movs	r0, #0
 80a4c1c:	bd70      	pop	{r4, r5, r6, pc}
 80a4c1e:	2101      	movs	r1, #1
 80a4c20:	fa01 f506 	lsl.w	r5, r1, r6
 80a4c24:	1d6a      	adds	r2, r5, #5
 80a4c26:	0092      	lsls	r2, r2, #2
 80a4c28:	4620      	mov	r0, r4
 80a4c2a:	f000 fbbc 	bl	80a53a6 <_calloc_r>
 80a4c2e:	2800      	cmp	r0, #0
 80a4c30:	d0f3      	beq.n	80a4c1a <_Balloc+0x46>
 80a4c32:	6046      	str	r6, [r0, #4]
 80a4c34:	6085      	str	r5, [r0, #8]
 80a4c36:	2300      	movs	r3, #0
 80a4c38:	6103      	str	r3, [r0, #16]
 80a4c3a:	60c3      	str	r3, [r0, #12]
 80a4c3c:	bd70      	pop	{r4, r5, r6, pc}

080a4c3e <_Bfree>:
 80a4c3e:	b570      	push	{r4, r5, r6, lr}
 80a4c40:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80a4c42:	4606      	mov	r6, r0
 80a4c44:	460d      	mov	r5, r1
 80a4c46:	b93c      	cbnz	r4, 80a4c58 <_Bfree+0x1a>
 80a4c48:	2010      	movs	r0, #16
 80a4c4a:	f7fb ffd3 	bl	80a0bf4 <malloc>
 80a4c4e:	6270      	str	r0, [r6, #36]	; 0x24
 80a4c50:	6044      	str	r4, [r0, #4]
 80a4c52:	6084      	str	r4, [r0, #8]
 80a4c54:	6004      	str	r4, [r0, #0]
 80a4c56:	60c4      	str	r4, [r0, #12]
 80a4c58:	b13d      	cbz	r5, 80a4c6a <_Bfree+0x2c>
 80a4c5a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80a4c5c:	686a      	ldr	r2, [r5, #4]
 80a4c5e:	68db      	ldr	r3, [r3, #12]
 80a4c60:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80a4c64:	6029      	str	r1, [r5, #0]
 80a4c66:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80a4c6a:	bd70      	pop	{r4, r5, r6, pc}

080a4c6c <__multadd>:
 80a4c6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a4c70:	4606      	mov	r6, r0
 80a4c72:	460c      	mov	r4, r1
 80a4c74:	690d      	ldr	r5, [r1, #16]
 80a4c76:	461f      	mov	r7, r3
 80a4c78:	f101 0e14 	add.w	lr, r1, #20
 80a4c7c:	2300      	movs	r3, #0
 80a4c7e:	f8de 0000 	ldr.w	r0, [lr]
 80a4c82:	3301      	adds	r3, #1
 80a4c84:	b281      	uxth	r1, r0
 80a4c86:	fb02 7101 	mla	r1, r2, r1, r7
 80a4c8a:	0c00      	lsrs	r0, r0, #16
 80a4c8c:	0c0f      	lsrs	r7, r1, #16
 80a4c8e:	fb02 7000 	mla	r0, r2, r0, r7
 80a4c92:	b289      	uxth	r1, r1
 80a4c94:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80a4c98:	429d      	cmp	r5, r3
 80a4c9a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80a4c9e:	f84e 1b04 	str.w	r1, [lr], #4
 80a4ca2:	dcec      	bgt.n	80a4c7e <__multadd+0x12>
 80a4ca4:	b1d7      	cbz	r7, 80a4cdc <__multadd+0x70>
 80a4ca6:	68a3      	ldr	r3, [r4, #8]
 80a4ca8:	429d      	cmp	r5, r3
 80a4caa:	db12      	blt.n	80a4cd2 <__multadd+0x66>
 80a4cac:	6861      	ldr	r1, [r4, #4]
 80a4cae:	4630      	mov	r0, r6
 80a4cb0:	3101      	adds	r1, #1
 80a4cb2:	f7ff ff8f 	bl	80a4bd4 <_Balloc>
 80a4cb6:	4680      	mov	r8, r0
 80a4cb8:	6922      	ldr	r2, [r4, #16]
 80a4cba:	f104 010c 	add.w	r1, r4, #12
 80a4cbe:	3202      	adds	r2, #2
 80a4cc0:	0092      	lsls	r2, r2, #2
 80a4cc2:	300c      	adds	r0, #12
 80a4cc4:	f7fe f9f2 	bl	80a30ac <memcpy>
 80a4cc8:	4621      	mov	r1, r4
 80a4cca:	4630      	mov	r0, r6
 80a4ccc:	f7ff ffb7 	bl	80a4c3e <_Bfree>
 80a4cd0:	4644      	mov	r4, r8
 80a4cd2:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80a4cd6:	3501      	adds	r5, #1
 80a4cd8:	615f      	str	r7, [r3, #20]
 80a4cda:	6125      	str	r5, [r4, #16]
 80a4cdc:	4620      	mov	r0, r4
 80a4cde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a4ce2 <__s2b>:
 80a4ce2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a4ce6:	4606      	mov	r6, r0
 80a4ce8:	4615      	mov	r5, r2
 80a4cea:	461f      	mov	r7, r3
 80a4cec:	2209      	movs	r2, #9
 80a4cee:	3308      	adds	r3, #8
 80a4cf0:	460c      	mov	r4, r1
 80a4cf2:	fb93 f3f2 	sdiv	r3, r3, r2
 80a4cf6:	2100      	movs	r1, #0
 80a4cf8:	2201      	movs	r2, #1
 80a4cfa:	429a      	cmp	r2, r3
 80a4cfc:	da02      	bge.n	80a4d04 <__s2b+0x22>
 80a4cfe:	0052      	lsls	r2, r2, #1
 80a4d00:	3101      	adds	r1, #1
 80a4d02:	e7fa      	b.n	80a4cfa <__s2b+0x18>
 80a4d04:	4630      	mov	r0, r6
 80a4d06:	f7ff ff65 	bl	80a4bd4 <_Balloc>
 80a4d0a:	9b08      	ldr	r3, [sp, #32]
 80a4d0c:	2d09      	cmp	r5, #9
 80a4d0e:	6143      	str	r3, [r0, #20]
 80a4d10:	f04f 0301 	mov.w	r3, #1
 80a4d14:	6103      	str	r3, [r0, #16]
 80a4d16:	dd11      	ble.n	80a4d3c <__s2b+0x5a>
 80a4d18:	f104 0809 	add.w	r8, r4, #9
 80a4d1c:	46c1      	mov	r9, r8
 80a4d1e:	442c      	add	r4, r5
 80a4d20:	f819 3b01 	ldrb.w	r3, [r9], #1
 80a4d24:	4601      	mov	r1, r0
 80a4d26:	3b30      	subs	r3, #48	; 0x30
 80a4d28:	220a      	movs	r2, #10
 80a4d2a:	4630      	mov	r0, r6
 80a4d2c:	f7ff ff9e 	bl	80a4c6c <__multadd>
 80a4d30:	45a1      	cmp	r9, r4
 80a4d32:	d1f5      	bne.n	80a4d20 <__s2b+0x3e>
 80a4d34:	eb08 0405 	add.w	r4, r8, r5
 80a4d38:	3c08      	subs	r4, #8
 80a4d3a:	e001      	b.n	80a4d40 <__s2b+0x5e>
 80a4d3c:	340a      	adds	r4, #10
 80a4d3e:	2509      	movs	r5, #9
 80a4d40:	1b2d      	subs	r5, r5, r4
 80a4d42:	1963      	adds	r3, r4, r5
 80a4d44:	429f      	cmp	r7, r3
 80a4d46:	dd08      	ble.n	80a4d5a <__s2b+0x78>
 80a4d48:	f814 3b01 	ldrb.w	r3, [r4], #1
 80a4d4c:	4601      	mov	r1, r0
 80a4d4e:	3b30      	subs	r3, #48	; 0x30
 80a4d50:	220a      	movs	r2, #10
 80a4d52:	4630      	mov	r0, r6
 80a4d54:	f7ff ff8a 	bl	80a4c6c <__multadd>
 80a4d58:	e7f3      	b.n	80a4d42 <__s2b+0x60>
 80a4d5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080a4d5e <__hi0bits>:
 80a4d5e:	0c03      	lsrs	r3, r0, #16
 80a4d60:	041b      	lsls	r3, r3, #16
 80a4d62:	b913      	cbnz	r3, 80a4d6a <__hi0bits+0xc>
 80a4d64:	0400      	lsls	r0, r0, #16
 80a4d66:	2310      	movs	r3, #16
 80a4d68:	e000      	b.n	80a4d6c <__hi0bits+0xe>
 80a4d6a:	2300      	movs	r3, #0
 80a4d6c:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80a4d70:	bf04      	itt	eq
 80a4d72:	0200      	lsleq	r0, r0, #8
 80a4d74:	3308      	addeq	r3, #8
 80a4d76:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80a4d7a:	bf04      	itt	eq
 80a4d7c:	0100      	lsleq	r0, r0, #4
 80a4d7e:	3304      	addeq	r3, #4
 80a4d80:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80a4d84:	bf04      	itt	eq
 80a4d86:	0080      	lsleq	r0, r0, #2
 80a4d88:	3302      	addeq	r3, #2
 80a4d8a:	2800      	cmp	r0, #0
 80a4d8c:	db03      	blt.n	80a4d96 <__hi0bits+0x38>
 80a4d8e:	0042      	lsls	r2, r0, #1
 80a4d90:	d503      	bpl.n	80a4d9a <__hi0bits+0x3c>
 80a4d92:	1c58      	adds	r0, r3, #1
 80a4d94:	4770      	bx	lr
 80a4d96:	4618      	mov	r0, r3
 80a4d98:	4770      	bx	lr
 80a4d9a:	2020      	movs	r0, #32
 80a4d9c:	4770      	bx	lr

080a4d9e <__lo0bits>:
 80a4d9e:	6803      	ldr	r3, [r0, #0]
 80a4da0:	f013 0207 	ands.w	r2, r3, #7
 80a4da4:	d00b      	beq.n	80a4dbe <__lo0bits+0x20>
 80a4da6:	07d9      	lsls	r1, r3, #31
 80a4da8:	d422      	bmi.n	80a4df0 <__lo0bits+0x52>
 80a4daa:	079a      	lsls	r2, r3, #30
 80a4dac:	bf4b      	itete	mi
 80a4dae:	085b      	lsrmi	r3, r3, #1
 80a4db0:	089b      	lsrpl	r3, r3, #2
 80a4db2:	6003      	strmi	r3, [r0, #0]
 80a4db4:	6003      	strpl	r3, [r0, #0]
 80a4db6:	bf4c      	ite	mi
 80a4db8:	2001      	movmi	r0, #1
 80a4dba:	2002      	movpl	r0, #2
 80a4dbc:	4770      	bx	lr
 80a4dbe:	b299      	uxth	r1, r3
 80a4dc0:	b909      	cbnz	r1, 80a4dc6 <__lo0bits+0x28>
 80a4dc2:	0c1b      	lsrs	r3, r3, #16
 80a4dc4:	2210      	movs	r2, #16
 80a4dc6:	f013 0fff 	tst.w	r3, #255	; 0xff
 80a4dca:	bf04      	itt	eq
 80a4dcc:	0a1b      	lsreq	r3, r3, #8
 80a4dce:	3208      	addeq	r2, #8
 80a4dd0:	0719      	lsls	r1, r3, #28
 80a4dd2:	bf04      	itt	eq
 80a4dd4:	091b      	lsreq	r3, r3, #4
 80a4dd6:	3204      	addeq	r2, #4
 80a4dd8:	0799      	lsls	r1, r3, #30
 80a4dda:	bf04      	itt	eq
 80a4ddc:	089b      	lsreq	r3, r3, #2
 80a4dde:	3202      	addeq	r2, #2
 80a4de0:	07d9      	lsls	r1, r3, #31
 80a4de2:	d402      	bmi.n	80a4dea <__lo0bits+0x4c>
 80a4de4:	085b      	lsrs	r3, r3, #1
 80a4de6:	d005      	beq.n	80a4df4 <__lo0bits+0x56>
 80a4de8:	3201      	adds	r2, #1
 80a4dea:	6003      	str	r3, [r0, #0]
 80a4dec:	4610      	mov	r0, r2
 80a4dee:	4770      	bx	lr
 80a4df0:	2000      	movs	r0, #0
 80a4df2:	4770      	bx	lr
 80a4df4:	2020      	movs	r0, #32
 80a4df6:	4770      	bx	lr

080a4df8 <__i2b>:
 80a4df8:	b510      	push	{r4, lr}
 80a4dfa:	460c      	mov	r4, r1
 80a4dfc:	2101      	movs	r1, #1
 80a4dfe:	f7ff fee9 	bl	80a4bd4 <_Balloc>
 80a4e02:	2201      	movs	r2, #1
 80a4e04:	6144      	str	r4, [r0, #20]
 80a4e06:	6102      	str	r2, [r0, #16]
 80a4e08:	bd10      	pop	{r4, pc}

080a4e0a <__multiply>:
 80a4e0a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a4e0e:	4614      	mov	r4, r2
 80a4e10:	690a      	ldr	r2, [r1, #16]
 80a4e12:	6923      	ldr	r3, [r4, #16]
 80a4e14:	4688      	mov	r8, r1
 80a4e16:	429a      	cmp	r2, r3
 80a4e18:	bfbe      	ittt	lt
 80a4e1a:	460b      	movlt	r3, r1
 80a4e1c:	46a0      	movlt	r8, r4
 80a4e1e:	461c      	movlt	r4, r3
 80a4e20:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80a4e24:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80a4e28:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80a4e2c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80a4e30:	eb07 0609 	add.w	r6, r7, r9
 80a4e34:	429e      	cmp	r6, r3
 80a4e36:	bfc8      	it	gt
 80a4e38:	3101      	addgt	r1, #1
 80a4e3a:	f7ff fecb 	bl	80a4bd4 <_Balloc>
 80a4e3e:	f100 0514 	add.w	r5, r0, #20
 80a4e42:	462b      	mov	r3, r5
 80a4e44:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
 80a4e48:	2200      	movs	r2, #0
 80a4e4a:	4563      	cmp	r3, ip
 80a4e4c:	d202      	bcs.n	80a4e54 <__multiply+0x4a>
 80a4e4e:	f843 2b04 	str.w	r2, [r3], #4
 80a4e52:	e7fa      	b.n	80a4e4a <__multiply+0x40>
 80a4e54:	f104 0214 	add.w	r2, r4, #20
 80a4e58:	f108 0114 	add.w	r1, r8, #20
 80a4e5c:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80a4e60:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80a4e64:	9300      	str	r3, [sp, #0]
 80a4e66:	9b00      	ldr	r3, [sp, #0]
 80a4e68:	9201      	str	r2, [sp, #4]
 80a4e6a:	4293      	cmp	r3, r2
 80a4e6c:	d957      	bls.n	80a4f1e <__multiply+0x114>
 80a4e6e:	f8b2 b000 	ldrh.w	fp, [r2]
 80a4e72:	f1bb 0f00 	cmp.w	fp, #0
 80a4e76:	d023      	beq.n	80a4ec0 <__multiply+0xb6>
 80a4e78:	4689      	mov	r9, r1
 80a4e7a:	46ae      	mov	lr, r5
 80a4e7c:	f04f 0800 	mov.w	r8, #0
 80a4e80:	f859 4b04 	ldr.w	r4, [r9], #4
 80a4e84:	f8be a000 	ldrh.w	sl, [lr]
 80a4e88:	b2a3      	uxth	r3, r4
 80a4e8a:	fb0b a303 	mla	r3, fp, r3, sl
 80a4e8e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80a4e92:	f8de 4000 	ldr.w	r4, [lr]
 80a4e96:	4443      	add	r3, r8
 80a4e98:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80a4e9c:	fb0b 840a 	mla	r4, fp, sl, r8
 80a4ea0:	46f2      	mov	sl, lr
 80a4ea2:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80a4ea6:	b29b      	uxth	r3, r3
 80a4ea8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80a4eac:	454f      	cmp	r7, r9
 80a4eae:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80a4eb2:	f84a 3b04 	str.w	r3, [sl], #4
 80a4eb6:	d901      	bls.n	80a4ebc <__multiply+0xb2>
 80a4eb8:	46d6      	mov	lr, sl
 80a4eba:	e7e1      	b.n	80a4e80 <__multiply+0x76>
 80a4ebc:	f8ce 8004 	str.w	r8, [lr, #4]
 80a4ec0:	9b01      	ldr	r3, [sp, #4]
 80a4ec2:	3204      	adds	r2, #4
 80a4ec4:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80a4ec8:	f1ba 0f00 	cmp.w	sl, #0
 80a4ecc:	d021      	beq.n	80a4f12 <__multiply+0x108>
 80a4ece:	462c      	mov	r4, r5
 80a4ed0:	4689      	mov	r9, r1
 80a4ed2:	682b      	ldr	r3, [r5, #0]
 80a4ed4:	f04f 0800 	mov.w	r8, #0
 80a4ed8:	f8b9 e000 	ldrh.w	lr, [r9]
 80a4edc:	f8b4 b002 	ldrh.w	fp, [r4, #2]
 80a4ee0:	b29b      	uxth	r3, r3
 80a4ee2:	fb0a be0e 	mla	lr, sl, lr, fp
 80a4ee6:	46a3      	mov	fp, r4
 80a4ee8:	44f0      	add	r8, lr
 80a4eea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80a4eee:	f84b 3b04 	str.w	r3, [fp], #4
 80a4ef2:	f859 3b04 	ldr.w	r3, [r9], #4
 80a4ef6:	f8b4 e004 	ldrh.w	lr, [r4, #4]
 80a4efa:	0c1b      	lsrs	r3, r3, #16
 80a4efc:	fb0a e303 	mla	r3, sl, r3, lr
 80a4f00:	454f      	cmp	r7, r9
 80a4f02:	eb03 4318 	add.w	r3, r3, r8, lsr #16
 80a4f06:	ea4f 4813 	mov.w	r8, r3, lsr #16
 80a4f0a:	d901      	bls.n	80a4f10 <__multiply+0x106>
 80a4f0c:	465c      	mov	r4, fp
 80a4f0e:	e7e3      	b.n	80a4ed8 <__multiply+0xce>
 80a4f10:	6063      	str	r3, [r4, #4]
 80a4f12:	3504      	adds	r5, #4
 80a4f14:	e7a7      	b.n	80a4e66 <__multiply+0x5c>
 80a4f16:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
 80a4f1a:	b913      	cbnz	r3, 80a4f22 <__multiply+0x118>
 80a4f1c:	3e01      	subs	r6, #1
 80a4f1e:	2e00      	cmp	r6, #0
 80a4f20:	dcf9      	bgt.n	80a4f16 <__multiply+0x10c>
 80a4f22:	6106      	str	r6, [r0, #16]
 80a4f24:	b003      	add	sp, #12
 80a4f26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080a4f2c <__pow5mult>:
 80a4f2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a4f30:	4615      	mov	r5, r2
 80a4f32:	f012 0203 	ands.w	r2, r2, #3
 80a4f36:	4606      	mov	r6, r0
 80a4f38:	460f      	mov	r7, r1
 80a4f3a:	d007      	beq.n	80a4f4c <__pow5mult+0x20>
 80a4f3c:	4c21      	ldr	r4, [pc, #132]	; (80a4fc4 <__pow5mult+0x98>)
 80a4f3e:	3a01      	subs	r2, #1
 80a4f40:	2300      	movs	r3, #0
 80a4f42:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80a4f46:	f7ff fe91 	bl	80a4c6c <__multadd>
 80a4f4a:	4607      	mov	r7, r0
 80a4f4c:	10ad      	asrs	r5, r5, #2
 80a4f4e:	d036      	beq.n	80a4fbe <__pow5mult+0x92>
 80a4f50:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80a4f52:	b93c      	cbnz	r4, 80a4f64 <__pow5mult+0x38>
 80a4f54:	2010      	movs	r0, #16
 80a4f56:	f7fb fe4d 	bl	80a0bf4 <malloc>
 80a4f5a:	6270      	str	r0, [r6, #36]	; 0x24
 80a4f5c:	6044      	str	r4, [r0, #4]
 80a4f5e:	6084      	str	r4, [r0, #8]
 80a4f60:	6004      	str	r4, [r0, #0]
 80a4f62:	60c4      	str	r4, [r0, #12]
 80a4f64:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80a4f68:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80a4f6c:	b94c      	cbnz	r4, 80a4f82 <__pow5mult+0x56>
 80a4f6e:	f240 2171 	movw	r1, #625	; 0x271
 80a4f72:	4630      	mov	r0, r6
 80a4f74:	f7ff ff40 	bl	80a4df8 <__i2b>
 80a4f78:	4604      	mov	r4, r0
 80a4f7a:	2300      	movs	r3, #0
 80a4f7c:	f8c8 0008 	str.w	r0, [r8, #8]
 80a4f80:	6003      	str	r3, [r0, #0]
 80a4f82:	f04f 0800 	mov.w	r8, #0
 80a4f86:	07eb      	lsls	r3, r5, #31
 80a4f88:	d50a      	bpl.n	80a4fa0 <__pow5mult+0x74>
 80a4f8a:	4639      	mov	r1, r7
 80a4f8c:	4622      	mov	r2, r4
 80a4f8e:	4630      	mov	r0, r6
 80a4f90:	f7ff ff3b 	bl	80a4e0a <__multiply>
 80a4f94:	4681      	mov	r9, r0
 80a4f96:	4639      	mov	r1, r7
 80a4f98:	4630      	mov	r0, r6
 80a4f9a:	f7ff fe50 	bl	80a4c3e <_Bfree>
 80a4f9e:	464f      	mov	r7, r9
 80a4fa0:	106d      	asrs	r5, r5, #1
 80a4fa2:	d00c      	beq.n	80a4fbe <__pow5mult+0x92>
 80a4fa4:	6820      	ldr	r0, [r4, #0]
 80a4fa6:	b108      	cbz	r0, 80a4fac <__pow5mult+0x80>
 80a4fa8:	4604      	mov	r4, r0
 80a4faa:	e7ec      	b.n	80a4f86 <__pow5mult+0x5a>
 80a4fac:	4622      	mov	r2, r4
 80a4fae:	4621      	mov	r1, r4
 80a4fb0:	4630      	mov	r0, r6
 80a4fb2:	f7ff ff2a 	bl	80a4e0a <__multiply>
 80a4fb6:	6020      	str	r0, [r4, #0]
 80a4fb8:	f8c0 8000 	str.w	r8, [r0]
 80a4fbc:	e7f4      	b.n	80a4fa8 <__pow5mult+0x7c>
 80a4fbe:	4638      	mov	r0, r7
 80a4fc0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a4fc4:	080a5d40 	.word	0x080a5d40

080a4fc8 <__lshift>:
 80a4fc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a4fcc:	460c      	mov	r4, r1
 80a4fce:	4607      	mov	r7, r0
 80a4fd0:	4691      	mov	r9, r2
 80a4fd2:	6926      	ldr	r6, [r4, #16]
 80a4fd4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80a4fd8:	4456      	add	r6, sl
 80a4fda:	6849      	ldr	r1, [r1, #4]
 80a4fdc:	68a3      	ldr	r3, [r4, #8]
 80a4fde:	1c75      	adds	r5, r6, #1
 80a4fe0:	42ab      	cmp	r3, r5
 80a4fe2:	da02      	bge.n	80a4fea <__lshift+0x22>
 80a4fe4:	3101      	adds	r1, #1
 80a4fe6:	005b      	lsls	r3, r3, #1
 80a4fe8:	e7fa      	b.n	80a4fe0 <__lshift+0x18>
 80a4fea:	4638      	mov	r0, r7
 80a4fec:	f7ff fdf2 	bl	80a4bd4 <_Balloc>
 80a4ff0:	2300      	movs	r3, #0
 80a4ff2:	4680      	mov	r8, r0
 80a4ff4:	461a      	mov	r2, r3
 80a4ff6:	f100 0114 	add.w	r1, r0, #20
 80a4ffa:	4553      	cmp	r3, sl
 80a4ffc:	da03      	bge.n	80a5006 <__lshift+0x3e>
 80a4ffe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80a5002:	3301      	adds	r3, #1
 80a5004:	e7f9      	b.n	80a4ffa <__lshift+0x32>
 80a5006:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
 80a500a:	6920      	ldr	r0, [r4, #16]
 80a500c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80a5010:	f019 091f 	ands.w	r9, r9, #31
 80a5014:	f104 0114 	add.w	r1, r4, #20
 80a5018:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 80a501c:	d014      	beq.n	80a5048 <__lshift+0x80>
 80a501e:	f1c9 0c20 	rsb	ip, r9, #32
 80a5022:	2200      	movs	r2, #0
 80a5024:	6808      	ldr	r0, [r1, #0]
 80a5026:	469a      	mov	sl, r3
 80a5028:	fa00 f009 	lsl.w	r0, r0, r9
 80a502c:	4302      	orrs	r2, r0
 80a502e:	f843 2b04 	str.w	r2, [r3], #4
 80a5032:	f851 2b04 	ldr.w	r2, [r1], #4
 80a5036:	458e      	cmp	lr, r1
 80a5038:	fa22 f20c 	lsr.w	r2, r2, ip
 80a503c:	d8f2      	bhi.n	80a5024 <__lshift+0x5c>
 80a503e:	f8ca 2004 	str.w	r2, [sl, #4]
 80a5042:	b142      	cbz	r2, 80a5056 <__lshift+0x8e>
 80a5044:	1cb5      	adds	r5, r6, #2
 80a5046:	e006      	b.n	80a5056 <__lshift+0x8e>
 80a5048:	3b04      	subs	r3, #4
 80a504a:	f851 2b04 	ldr.w	r2, [r1], #4
 80a504e:	458e      	cmp	lr, r1
 80a5050:	f843 2f04 	str.w	r2, [r3, #4]!
 80a5054:	d8f9      	bhi.n	80a504a <__lshift+0x82>
 80a5056:	3d01      	subs	r5, #1
 80a5058:	4638      	mov	r0, r7
 80a505a:	f8c8 5010 	str.w	r5, [r8, #16]
 80a505e:	4621      	mov	r1, r4
 80a5060:	f7ff fded 	bl	80a4c3e <_Bfree>
 80a5064:	4640      	mov	r0, r8
 80a5066:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080a506a <__mcmp>:
 80a506a:	6903      	ldr	r3, [r0, #16]
 80a506c:	690a      	ldr	r2, [r1, #16]
 80a506e:	b510      	push	{r4, lr}
 80a5070:	1a9b      	subs	r3, r3, r2
 80a5072:	d111      	bne.n	80a5098 <__mcmp+0x2e>
 80a5074:	0092      	lsls	r2, r2, #2
 80a5076:	3014      	adds	r0, #20
 80a5078:	3114      	adds	r1, #20
 80a507a:	1883      	adds	r3, r0, r2
 80a507c:	440a      	add	r2, r1
 80a507e:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 80a5082:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80a5086:	428c      	cmp	r4, r1
 80a5088:	d002      	beq.n	80a5090 <__mcmp+0x26>
 80a508a:	d307      	bcc.n	80a509c <__mcmp+0x32>
 80a508c:	2001      	movs	r0, #1
 80a508e:	bd10      	pop	{r4, pc}
 80a5090:	4298      	cmp	r0, r3
 80a5092:	d3f4      	bcc.n	80a507e <__mcmp+0x14>
 80a5094:	2000      	movs	r0, #0
 80a5096:	bd10      	pop	{r4, pc}
 80a5098:	4618      	mov	r0, r3
 80a509a:	bd10      	pop	{r4, pc}
 80a509c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a50a0:	bd10      	pop	{r4, pc}

080a50a2 <__mdiff>:
 80a50a2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a50a6:	460c      	mov	r4, r1
 80a50a8:	4607      	mov	r7, r0
 80a50aa:	4611      	mov	r1, r2
 80a50ac:	4620      	mov	r0, r4
 80a50ae:	4615      	mov	r5, r2
 80a50b0:	f7ff ffdb 	bl	80a506a <__mcmp>
 80a50b4:	1e06      	subs	r6, r0, #0
 80a50b6:	d108      	bne.n	80a50ca <__mdiff+0x28>
 80a50b8:	4631      	mov	r1, r6
 80a50ba:	4638      	mov	r0, r7
 80a50bc:	f7ff fd8a 	bl	80a4bd4 <_Balloc>
 80a50c0:	2301      	movs	r3, #1
 80a50c2:	6103      	str	r3, [r0, #16]
 80a50c4:	6146      	str	r6, [r0, #20]
 80a50c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a50ca:	bfbc      	itt	lt
 80a50cc:	4623      	movlt	r3, r4
 80a50ce:	462c      	movlt	r4, r5
 80a50d0:	4638      	mov	r0, r7
 80a50d2:	6861      	ldr	r1, [r4, #4]
 80a50d4:	bfba      	itte	lt
 80a50d6:	461d      	movlt	r5, r3
 80a50d8:	2601      	movlt	r6, #1
 80a50da:	2600      	movge	r6, #0
 80a50dc:	f7ff fd7a 	bl	80a4bd4 <_Balloc>
 80a50e0:	692b      	ldr	r3, [r5, #16]
 80a50e2:	60c6      	str	r6, [r0, #12]
 80a50e4:	6926      	ldr	r6, [r4, #16]
 80a50e6:	f105 0914 	add.w	r9, r5, #20
 80a50ea:	f104 0114 	add.w	r1, r4, #20
 80a50ee:	eb01 0786 	add.w	r7, r1, r6, lsl #2
 80a50f2:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80a50f6:	f100 0514 	add.w	r5, r0, #20
 80a50fa:	f04f 0c00 	mov.w	ip, #0
 80a50fe:	f851 2b04 	ldr.w	r2, [r1], #4
 80a5102:	f859 4b04 	ldr.w	r4, [r9], #4
 80a5106:	b293      	uxth	r3, r2
 80a5108:	449c      	add	ip, r3
 80a510a:	b2a3      	uxth	r3, r4
 80a510c:	0c24      	lsrs	r4, r4, #16
 80a510e:	ebc3 030c 	rsb	r3, r3, ip
 80a5112:	ebc4 4212 	rsb	r2, r4, r2, lsr #16
 80a5116:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80a511a:	b29b      	uxth	r3, r3
 80a511c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80a5120:	45c8      	cmp	r8, r9
 80a5122:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a5126:	468e      	mov	lr, r1
 80a5128:	f845 2b04 	str.w	r2, [r5], #4
 80a512c:	d8e7      	bhi.n	80a50fe <__mdiff+0x5c>
 80a512e:	45be      	cmp	lr, r7
 80a5130:	d20e      	bcs.n	80a5150 <__mdiff+0xae>
 80a5132:	f85e 1b04 	ldr.w	r1, [lr], #4
 80a5136:	b28a      	uxth	r2, r1
 80a5138:	4462      	add	r2, ip
 80a513a:	1413      	asrs	r3, r2, #16
 80a513c:	eb03 4311 	add.w	r3, r3, r1, lsr #16
 80a5140:	b292      	uxth	r2, r2
 80a5142:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80a5146:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80a514a:	f845 2b04 	str.w	r2, [r5], #4
 80a514e:	e7ee      	b.n	80a512e <__mdiff+0x8c>
 80a5150:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80a5154:	b90b      	cbnz	r3, 80a515a <__mdiff+0xb8>
 80a5156:	3e01      	subs	r6, #1
 80a5158:	e7fa      	b.n	80a5150 <__mdiff+0xae>
 80a515a:	6106      	str	r6, [r0, #16]
 80a515c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080a5160 <__ulp>:
 80a5160:	4b10      	ldr	r3, [pc, #64]	; (80a51a4 <__ulp+0x44>)
 80a5162:	400b      	ands	r3, r1
 80a5164:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80a5168:	2b00      	cmp	r3, #0
 80a516a:	dd02      	ble.n	80a5172 <__ulp+0x12>
 80a516c:	2000      	movs	r0, #0
 80a516e:	4619      	mov	r1, r3
 80a5170:	4770      	bx	lr
 80a5172:	425b      	negs	r3, r3
 80a5174:	151b      	asrs	r3, r3, #20
 80a5176:	2b13      	cmp	r3, #19
 80a5178:	f04f 0000 	mov.w	r0, #0
 80a517c:	f04f 0100 	mov.w	r1, #0
 80a5180:	dc04      	bgt.n	80a518c <__ulp+0x2c>
 80a5182:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80a5186:	fa42 f103 	asr.w	r1, r2, r3
 80a518a:	4770      	bx	lr
 80a518c:	3b14      	subs	r3, #20
 80a518e:	2b1e      	cmp	r3, #30
 80a5190:	f04f 0201 	mov.w	r2, #1
 80a5194:	bfce      	itee	gt
 80a5196:	4613      	movgt	r3, r2
 80a5198:	f1c3 031f 	rsble	r3, r3, #31
 80a519c:	fa02 f303 	lslle.w	r3, r2, r3
 80a51a0:	4618      	mov	r0, r3
 80a51a2:	4770      	bx	lr
 80a51a4:	7ff00000 	.word	0x7ff00000

080a51a8 <__b2d>:
 80a51a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a51aa:	6905      	ldr	r5, [r0, #16]
 80a51ac:	f100 0614 	add.w	r6, r0, #20
 80a51b0:	eb06 0585 	add.w	r5, r6, r5, lsl #2
 80a51b4:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80a51b8:	1f2f      	subs	r7, r5, #4
 80a51ba:	4620      	mov	r0, r4
 80a51bc:	f7ff fdcf 	bl	80a4d5e <__hi0bits>
 80a51c0:	f1c0 0320 	rsb	r3, r0, #32
 80a51c4:	280a      	cmp	r0, #10
 80a51c6:	600b      	str	r3, [r1, #0]
 80a51c8:	dc14      	bgt.n	80a51f4 <__b2d+0x4c>
 80a51ca:	f1c0 0e0b 	rsb	lr, r0, #11
 80a51ce:	fa24 f10e 	lsr.w	r1, r4, lr
 80a51d2:	42be      	cmp	r6, r7
 80a51d4:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
 80a51d8:	bf34      	ite	cc
 80a51da:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80a51de:	2100      	movcs	r1, #0
 80a51e0:	3015      	adds	r0, #21
 80a51e2:	fa04 f000 	lsl.w	r0, r4, r0
 80a51e6:	fa21 f10e 	lsr.w	r1, r1, lr
 80a51ea:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80a51ee:	ea40 0201 	orr.w	r2, r0, r1
 80a51f2:	e023      	b.n	80a523c <__b2d+0x94>
 80a51f4:	42be      	cmp	r6, r7
 80a51f6:	bf3a      	itte	cc
 80a51f8:	f1a5 0708 	subcc.w	r7, r5, #8
 80a51fc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80a5200:	2100      	movcs	r1, #0
 80a5202:	380b      	subs	r0, #11
 80a5204:	d015      	beq.n	80a5232 <__b2d+0x8a>
 80a5206:	4084      	lsls	r4, r0
 80a5208:	f1c0 0520 	rsb	r5, r0, #32
 80a520c:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 80a5210:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 80a5214:	42b7      	cmp	r7, r6
 80a5216:	fa21 fe05 	lsr.w	lr, r1, r5
 80a521a:	ea44 030e 	orr.w	r3, r4, lr
 80a521e:	bf8c      	ite	hi
 80a5220:	f857 4c04 	ldrhi.w	r4, [r7, #-4]
 80a5224:	2400      	movls	r4, #0
 80a5226:	fa01 f000 	lsl.w	r0, r1, r0
 80a522a:	40ec      	lsrs	r4, r5
 80a522c:	ea40 0204 	orr.w	r2, r0, r4
 80a5230:	e004      	b.n	80a523c <__b2d+0x94>
 80a5232:	460a      	mov	r2, r1
 80a5234:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 80a5238:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80a523c:	4610      	mov	r0, r2
 80a523e:	4619      	mov	r1, r3
 80a5240:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a5242 <__d2b>:
 80a5242:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80a5246:	461c      	mov	r4, r3
 80a5248:	2101      	movs	r1, #1
 80a524a:	4690      	mov	r8, r2
 80a524c:	9e08      	ldr	r6, [sp, #32]
 80a524e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80a5250:	f7ff fcc0 	bl	80a4bd4 <_Balloc>
 80a5254:	f3c4 0213 	ubfx	r2, r4, #0, #20
 80a5258:	f3c4 540a 	ubfx	r4, r4, #20, #11
 80a525c:	4607      	mov	r7, r0
 80a525e:	b10c      	cbz	r4, 80a5264 <__d2b+0x22>
 80a5260:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80a5264:	9201      	str	r2, [sp, #4]
 80a5266:	f1b8 0f00 	cmp.w	r8, #0
 80a526a:	d019      	beq.n	80a52a0 <__d2b+0x5e>
 80a526c:	a802      	add	r0, sp, #8
 80a526e:	f840 8d08 	str.w	r8, [r0, #-8]!
 80a5272:	f7ff fd94 	bl	80a4d9e <__lo0bits>
 80a5276:	9b00      	ldr	r3, [sp, #0]
 80a5278:	b148      	cbz	r0, 80a528e <__d2b+0x4c>
 80a527a:	9a01      	ldr	r2, [sp, #4]
 80a527c:	f1c0 0120 	rsb	r1, r0, #32
 80a5280:	fa02 f101 	lsl.w	r1, r2, r1
 80a5284:	430b      	orrs	r3, r1
 80a5286:	40c2      	lsrs	r2, r0
 80a5288:	617b      	str	r3, [r7, #20]
 80a528a:	9201      	str	r2, [sp, #4]
 80a528c:	e000      	b.n	80a5290 <__d2b+0x4e>
 80a528e:	617b      	str	r3, [r7, #20]
 80a5290:	9b01      	ldr	r3, [sp, #4]
 80a5292:	2b00      	cmp	r3, #0
 80a5294:	bf14      	ite	ne
 80a5296:	2102      	movne	r1, #2
 80a5298:	2101      	moveq	r1, #1
 80a529a:	61bb      	str	r3, [r7, #24]
 80a529c:	6139      	str	r1, [r7, #16]
 80a529e:	e007      	b.n	80a52b0 <__d2b+0x6e>
 80a52a0:	a801      	add	r0, sp, #4
 80a52a2:	f7ff fd7c 	bl	80a4d9e <__lo0bits>
 80a52a6:	9b01      	ldr	r3, [sp, #4]
 80a52a8:	2101      	movs	r1, #1
 80a52aa:	617b      	str	r3, [r7, #20]
 80a52ac:	6139      	str	r1, [r7, #16]
 80a52ae:	3020      	adds	r0, #32
 80a52b0:	b134      	cbz	r4, 80a52c0 <__d2b+0x7e>
 80a52b2:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80a52b6:	4404      	add	r4, r0
 80a52b8:	6034      	str	r4, [r6, #0]
 80a52ba:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80a52be:	e009      	b.n	80a52d4 <__d2b+0x92>
 80a52c0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80a52c4:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80a52c8:	6030      	str	r0, [r6, #0]
 80a52ca:	6918      	ldr	r0, [r3, #16]
 80a52cc:	f7ff fd47 	bl	80a4d5e <__hi0bits>
 80a52d0:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80a52d4:	6028      	str	r0, [r5, #0]
 80a52d6:	4638      	mov	r0, r7
 80a52d8:	b002      	add	sp, #8
 80a52da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a52de <__ratio>:
 80a52de:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80a52e2:	4688      	mov	r8, r1
 80a52e4:	4669      	mov	r1, sp
 80a52e6:	4681      	mov	r9, r0
 80a52e8:	f7ff ff5e 	bl	80a51a8 <__b2d>
 80a52ec:	460d      	mov	r5, r1
 80a52ee:	4604      	mov	r4, r0
 80a52f0:	a901      	add	r1, sp, #4
 80a52f2:	4640      	mov	r0, r8
 80a52f4:	f7ff ff58 	bl	80a51a8 <__b2d>
 80a52f8:	460f      	mov	r7, r1
 80a52fa:	4606      	mov	r6, r0
 80a52fc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80a5300:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80a5304:	4620      	mov	r0, r4
 80a5306:	1a9a      	subs	r2, r3, r2
 80a5308:	e89d 000a 	ldmia.w	sp, {r1, r3}
 80a530c:	1ac9      	subs	r1, r1, r3
 80a530e:	eb01 1342 	add.w	r3, r1, r2, lsl #5
 80a5312:	2b00      	cmp	r3, #0
 80a5314:	bfcc      	ite	gt
 80a5316:	eb05 5503 	addgt.w	r5, r5, r3, lsl #20
 80a531a:	eba7 5703 	suble.w	r7, r7, r3, lsl #20
 80a531e:	4632      	mov	r2, r6
 80a5320:	463b      	mov	r3, r7
 80a5322:	4629      	mov	r1, r5
 80a5324:	f7fd f9c0 	bl	80a26a8 <__aeabi_ddiv>
 80a5328:	b003      	add	sp, #12
 80a532a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080a532e <__copybits>:
 80a532e:	3901      	subs	r1, #1
 80a5330:	b510      	push	{r4, lr}
 80a5332:	1149      	asrs	r1, r1, #5
 80a5334:	6914      	ldr	r4, [r2, #16]
 80a5336:	3101      	adds	r1, #1
 80a5338:	f102 0314 	add.w	r3, r2, #20
 80a533c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80a5340:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80a5344:	42a3      	cmp	r3, r4
 80a5346:	4602      	mov	r2, r0
 80a5348:	d204      	bcs.n	80a5354 <__copybits+0x26>
 80a534a:	f853 2b04 	ldr.w	r2, [r3], #4
 80a534e:	f840 2b04 	str.w	r2, [r0], #4
 80a5352:	e7f7      	b.n	80a5344 <__copybits+0x16>
 80a5354:	2300      	movs	r3, #0
 80a5356:	428a      	cmp	r2, r1
 80a5358:	d202      	bcs.n	80a5360 <__copybits+0x32>
 80a535a:	f842 3b04 	str.w	r3, [r2], #4
 80a535e:	e7fa      	b.n	80a5356 <__copybits+0x28>
 80a5360:	bd10      	pop	{r4, pc}

080a5362 <__any_on>:
 80a5362:	f100 0214 	add.w	r2, r0, #20
 80a5366:	6900      	ldr	r0, [r0, #16]
 80a5368:	114b      	asrs	r3, r1, #5
 80a536a:	4298      	cmp	r0, r3
 80a536c:	b510      	push	{r4, lr}
 80a536e:	db0c      	blt.n	80a538a <__any_on+0x28>
 80a5370:	dd0c      	ble.n	80a538c <__any_on+0x2a>
 80a5372:	f011 011f 	ands.w	r1, r1, #31
 80a5376:	d009      	beq.n	80a538c <__any_on+0x2a>
 80a5378:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80a537c:	fa24 f001 	lsr.w	r0, r4, r1
 80a5380:	fa00 f101 	lsl.w	r1, r0, r1
 80a5384:	428c      	cmp	r4, r1
 80a5386:	d10c      	bne.n	80a53a2 <__any_on+0x40>
 80a5388:	e000      	b.n	80a538c <__any_on+0x2a>
 80a538a:	4603      	mov	r3, r0
 80a538c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80a5390:	4293      	cmp	r3, r2
 80a5392:	d904      	bls.n	80a539e <__any_on+0x3c>
 80a5394:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80a5398:	2900      	cmp	r1, #0
 80a539a:	d0f9      	beq.n	80a5390 <__any_on+0x2e>
 80a539c:	e001      	b.n	80a53a2 <__any_on+0x40>
 80a539e:	2000      	movs	r0, #0
 80a53a0:	bd10      	pop	{r4, pc}
 80a53a2:	2001      	movs	r0, #1
 80a53a4:	bd10      	pop	{r4, pc}

080a53a6 <_calloc_r>:
 80a53a6:	b538      	push	{r3, r4, r5, lr}
 80a53a8:	fb02 f401 	mul.w	r4, r2, r1
 80a53ac:	4621      	mov	r1, r4
 80a53ae:	f7fb fc59 	bl	80a0c64 <_malloc_r>
 80a53b2:	4605      	mov	r5, r0
 80a53b4:	b118      	cbz	r0, 80a53be <_calloc_r+0x18>
 80a53b6:	4622      	mov	r2, r4
 80a53b8:	2100      	movs	r1, #0
 80a53ba:	f7fd fe82 	bl	80a30c2 <memset>
 80a53be:	4628      	mov	r0, r5
 80a53c0:	bd38      	pop	{r3, r4, r5, pc}

080a53c2 <__env_lock>:
 80a53c2:	4770      	bx	lr

080a53c4 <__env_unlock>:
 80a53c4:	4770      	bx	lr

080a53c6 <link_code_end>:
	...

080a53c8 <dynalib_user>:
 80a53c8:	0021 080a 0061 080a 008d 080a 0091 080a     !...a...........
 80a53d8:	0000 0000 6f4c 6163 6974 6e6f 6143 6c6c     ....LocationCall
 80a53e8:	6162 6b63 2928 6c00 7461 253d 2066 6f6c     back().lat=%f lo
 80a53f8:	3d6e 6625 6120 6363 7275 6361 3d79 6625     n=%f accuracy=%f
 80a5408:	2500 362e 0066 2e25 6631 4700 5350 7620     .%.6f.%.1f.GPS v
 80a5418:	2e34 0031 6564 6976 6563 6f4c 6163 6f74     4.1.deviceLocato
 80a5428:	0072                                        r.

080a542a <_ZL9BasicFont>:
	...
 80a5432:	0000 005f 0000 0000 0000 0007 0007 0000     .._.............
 80a5442:	1400 147f 147f 0000 2400 7f2a 122a 0000     .........$*.*...
 80a5452:	2300 0813 6264 0000 3600 5549 5022 0000     .#..db...6IU"P..
 80a5462:	0000 0305 0000 0000 1c00 4122 0000 0000     .........."A....
 80a5472:	4100 1c22 0000 0000 0800 1c2a 082a 0000     .A".......*.*...
 80a5482:	0800 3e08 0808 0000 a000 0060 0000 0000     ...>......`.....
 80a5492:	0800 0808 0808 0000 6000 0060 0000 0000     .........``.....
 80a54a2:	2000 0810 0204 0000 3e00 4951 3e45 0000     . .......>QIE>..
 80a54b2:	0000 7f42 0040 0000 6200 4951 4649 0000     ..B.@....bQIIF..
 80a54c2:	2200 4941 3649 0000 1800 1214 107f 0000     ."AII6..........
 80a54d2:	2700 4545 3945 0000 3c00 494a 3049 0000     .'EEE9...<JII0..
 80a54e2:	0100 0971 0305 0000 3600 4949 3649 0000     ..q......6III6..
 80a54f2:	0600 4949 1e29 0000 0000 3636 0000 0000     ..II).....66....
 80a5502:	0000 6cac 0000 0000 0800 2214 0041 0000     ...l......."A...
 80a5512:	1400 1414 1414 0000 4100 1422 0008 0000     .........A".....
 80a5522:	0200 5101 0609 0000 3200 7949 3e41 0000     ...Q.....2IyA>..
 80a5532:	7e00 0909 7e09 0000 7f00 4949 3649 0000     .~...~....III6..
 80a5542:	3e00 4141 2241 0000 7f00 4141 1c22 0000     .>AAA"....AA"...
 80a5552:	7f00 4949 4149 0000 7f00 0909 0109 0000     ..IIIA..........
 80a5562:	3e00 4141 7251 0000 7f00 0808 7f08 0000     .>AAQr..........
 80a5572:	4100 417f 0000 0000 2000 4140 013f 0000     .A.A..... @A?...
 80a5582:	7f00 1408 4122 0000 7f00 4040 4040 0000     ...."A....@@@@..
 80a5592:	7f00 0c02 7f02 0000 7f00 0804 7f10 0000     ................
 80a55a2:	3e00 4141 3e41 0000 7f00 0909 0609 0000     .>AAA>..........
 80a55b2:	3e00 5141 5e21 0000 7f00 1909 4629 0000     .>AQ!^......)F..
 80a55c2:	2600 4949 3249 0000 0100 7f01 0101 0000     .&III2..........
 80a55d2:	3f00 4040 3f40 0000 1f00 4020 1f20 0000     .?@@@?.... @ ...
 80a55e2:	3f00 3840 3f40 0000 6300 0814 6314 0000     .?@8@?...c...c..
 80a55f2:	0300 7804 0304 0000 6100 4951 4345 0000     ...x.....aQIEC..
 80a5602:	7f00 4141 0000 0000 0200 0804 2010 0000     ..AA......... ..
 80a5612:	4100 7f41 0000 0000 0400 0102 0402 0000     .AA.............
 80a5622:	8000 8080 8080 0000 0100 0402 0000 0000     ................
 80a5632:	2000 5454 7854 0000 7f00 4448 3844 0000     . TTTx....HDD8..
 80a5642:	3800 4444 0028 0000 3800 4444 7f48 0000     .8DD(....8DDH...
 80a5652:	3800 5454 1854 0000 0800 097e 0002 0000     .8TTT.....~.....
 80a5662:	1800 a4a4 7ca4 0000 7f00 0408 7804 0000     .....|.......x..
 80a5672:	0000 007d 0000 0000 8000 7d84 0000 0000     ..}........}....
 80a5682:	7f00 2810 0044 0000 4100 407f 0000 0000     ...(D....A.@....
 80a5692:	7c00 1804 7804 0000 7c00 0408 007c 0000     .|...x...|..|...
 80a56a2:	3800 4444 0038 0000 fc00 2424 0018 0000     .8DD8.....$$....
 80a56b2:	1800 2424 00fc 0000 0000 087c 0004 0000     ..$$......|.....
 80a56c2:	4800 5454 0024 0000 0400 447f 0000 0000     .HTT$......D....
 80a56d2:	3c00 4040 007c 0000 1c00 4020 1c20 0000     .<@@|..... @ ...
 80a56e2:	3c00 3040 3c40 0000 4400 1028 4428 0000     .<@0@<...D(.(D..
 80a56f2:	1c00 a0a0 007c 0000 4400 5464 444c 0000     ....|....DdTLD..
 80a5702:	0800 4136 0000 0000 0000 007f 0000 0000     ..6A............
 80a5712:	4100 0836 0000 0000 0200 0101 0102 0000     .A6.............
 80a5722:	0200 0505 0002 0000 0000                    ..........

080a572c <_ZTV23GoogleMapsDeviceLocator>:
	...
 80a5734:	0479 080a 0499 080a 002c 7325 227b 226d     y.......,.%s{"m"
 80a5744:	223a 3025 7832 253a 3230 3a78 3025 7832     :"%02x:%02x:%02x
 80a5754:	253a 3230 3a78 3025 7832 253a 3230 2278     :%02x:%02x:%02x"
 80a5764:	222c 2273 253a 2c64 6322 3a22 6425 007d     ,"s":%d,"c":%d}.
 80a5774:	5441 5426 7b00 7722 3a22 227b 2261 003a     AT&T.{"w":{"a":.
 80a5784:	7570 6c62 7369 4c68 636f 7461 6f69 006e     publishLocation.
 80a5794:	6373 6e61 6144 6174 253d 0073 6f68 6b6f     scanData=%s.hook
 80a57a4:	722d 7365 6f70 736e 2f65 7325 252f 0073     -response/%s/%s.

080a57b4 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 80a57bc:	0ca3 080a 0ca9 080a 0ced 080a 0cb7 080a     ................
 80a57cc:	0ca5 080a                                   ....

080a57d0 <_ZTV7TwoWire>:
	...
 80a57d8:	12a1 080a 12eb 080a 12c3 080a 12a3 080a     ................
 80a57e8:	12cb 080a 12d3 080a 12db 080a 12e3 080a     ................

080a57f8 <_ZTV9IPAddress>:
	...
 80a5800:	1355 080a 1345 080a 1347 080a 6162 6475     U...E...G...baud
 80a5810:	5300 7265 6169 006c 5355 5342 7265 6169     .Serial.USBSeria
 80a5820:	316c 7400 7079 0065 6170 6172 006d 6d63     l1.type.param.cm
 80a5830:	0064 6469 6800 646e 7300 7274 006d 6966     d.id.hnd.strm.fi
 80a5840:	746c 6c00 6c76 6100 6464 6148 646e 656c     lt.lvl.addHandle
 80a5850:	0072 6572 6f6d 6576 6148 646e 656c 0072     r.removeHandler.
 80a5860:	6e65 6d75 6148 646e 656c 7372 4a00 4f53     enumHandlers.JSO
 80a5870:	534e 7274 6165 4c6d 676f 6148 646e 656c     NStreamLogHandle
 80a5880:	0072 7061 0070 3025 3031 2075 5d00 0020     r.app.%010u .] .
 80a5890:	6425 2c00 0020 2928 203a 2000 005b 6f63     %d., .(): . [.co
 80a58a0:	6564 3d20 0020 6925 6400 7465 6961 736c     de = .%i.details
 80a58b0:	3d20 0020 0a0d 6c00 006e 6e66 6300 646f      = ....ln.fn.cod
 80a58c0:	0065 6564 6174 6c69 6e00 6e6f 0065 7274     e.detail.none.tr
 80a58d0:	6361 0065 6e69 6f66 7700 7261 006e 7265     ace.info.warn.er
 80a58e0:	6f72 0072 6170 696e 0063 6c61 006c 0000     ror.panic.all...

080a58f0 <_ZTVN5spark12NetworkClassE>:
	...
 80a58f8:	141d 080a 1427 080a 1431 080a 143b 080a     ....'...1...;...
 80a5908:	1445 080a 1451 080a 145d 080a 1469 080a     E...Q...]...i...
 80a5918:	1471 080a 147b 080a 1485 080a 2b25 3330     q...{.......%+03
 80a5928:	3a64 3025 7532 2500 2d59 6d25 252d 5464     d:%02u.%Y-%m-%dT
 80a5938:	4825 253a 3a4d 5325 7a25 6100 6373 6974     %H:%M:%S%z.ascti
 80a5948:	656d 0000                                   me..

080a594c <_ZTV11USARTSerial>:
	...
 80a5954:	18c5 080a 1915 080a 1923 080a 14e9 080a     ........#.......
 80a5964:	18d9 080a 18fb 080a 18e7 080a 190f 080a     ................
 80a5974:	18c7 080a 18cb 080a                         ........

080a597c <_ZTV9USBSerial>:
	...
 80a5984:	19c5 080a 1a15 080a 1a23 080a 14e9 080a     ........#.......
 80a5994:	1a01 080a 19c7 080a 19dd 080a 1a0f 080a     ................
 80a59a4:	19f3 080a 19c1 080a                         ........

080a59ac <_ZTVN5spark9WiFiClassE>:
	...
 80a59b4:	1c07 080a 1bfd 080a 1bf3 080a 1b65 080a     ............e...
 80a59c4:	1be7 080a 1bdb 080a 1bcf 080a 1bc7 080a     ................
 80a59d4:	1bbd 080a 1bb3 080a 1b6f 080a               ........o...

080a59e0 <_ZSt7nothrow>:
	...

080a59e1 <_ctype_>:
 80a59e1:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
 80a59f1:	2020 2020 2020 2020 2020 2020 2020 2020                     
 80a5a01:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
 80a5a11:	0410 0404 0404 0404 0404 1004 1010 1010     ................
 80a5a21:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
 80a5a31:	0101 0101 0101 0101 0101 0101 1010 1010     ................
 80a5a41:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
 80a5a51:	0202 0202 0202 0202 0202 0202 1010 1010     ................
 80a5a61:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

080a5ae4 <__sf_fake_stdin>:
	...

080a5b04 <__sf_fake_stdout>:
	...

080a5b24 <__sf_fake_stderr>:
	...
 80a5b44:	0043 4f50 4953 0058 002e 0000               C.POSIX.....

080a5b50 <__month_lengths>:
 80a5b50:	001f 0000 001c 0000 001f 0000 001e 0000     ................
 80a5b60:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 80a5b70:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 80a5b80:	001f 0000 001d 0000 001f 0000 001e 0000     ................
 80a5b90:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 80a5ba0:	001e 0000 001f 0000 001e 0000 001f 0000     ................

080a5bb0 <fpi.5342>:
 80a5bb0:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
 80a5bc0:	0000 0000 666e 6900 696e 7974 6100 006e     ....nf.inity.an.

080a5bd0 <fpinan.5378>:
 80a5bd0:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
	...

080a5be8 <tinytens>:
 80a5be8:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
 80a5bf8:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
 80a5c08:	6f43 64ac 0628 1168 5a54 4700 544d 2500     Co.d(.h.TZ.GMT.%
 80a5c18:	3031 5e5b 2d30 2c39 2d2b 255d 006e 254d     10[^0-9,+-]%n.M%
 80a5c28:	7568 6e25 252e 7568 6e25 252e 7568 6e25     hu%n.%hu%n.%hu%n
 80a5c38:	2f00 6825 2575 3a6e 6825 2575 3a6e 6825     ./%hu%n:%hu%n:%h
 80a5c48:	2575 006e 0000 0000                         u%n.....

080a5c50 <__mprec_tens>:
 80a5c50:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
 80a5c60:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
 80a5c70:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
 80a5c80:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
 80a5c90:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
 80a5ca0:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
 80a5cb0:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
 80a5cc0:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
 80a5cd0:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
 80a5ce0:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
 80a5cf0:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
 80a5d00:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
 80a5d10:	9db4 79d9 7843 44ea                         ...yCx.D

080a5d18 <__mprec_bigtens>:
 80a5d18:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
 80a5d28:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
 80a5d38:	bf3c 7f73 4fdd 7515                         <.s..O.u

080a5d40 <p05.5385>:
 80a5d40:	0005 0000 0019 0000 007d 0000               ........}...

080a5d4c <link_const_variable_data_end>:
 80a5d4c:	080a0245 	.word	0x080a0245
 80a5d50:	080a0451 	.word	0x080a0451
 80a5d54:	080a0869 	.word	0x080a0869
 80a5d58:	080a140d 	.word	0x080a140d
 80a5d5c:	080a14d5 	.word	0x080a14d5
 80a5d60:	080a1625 	.word	0x080a1625
 80a5d64:	080a1735 	.word	0x080a1735
 80a5d68:	080a18b1 	.word	0x080a18b1
 80a5d6c:	080a1c11 	.word	0x080a1c11
 80a5d70:	080a1ddd 	.word	0x080a1ddd
 80a5d74:	080a1e55 	.word	0x080a1e55
 80a5d78:	080a1f19 	.word	0x080a1f19
 80a5d7c:	080a1f9d 	.word	0x080a1f9d
 80a5d80:	080a2021 	.word	0x080a2021

080a5d84 <link_constructors_end>:
	...
