
/Users/manuel/IoT_maps/gmaps-iot-v1/target/1.5.1/argon/gmaps-iot-v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00005bc0  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d9be0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         000000f0  2003e130  000d9be4  0001e130  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000005d0  2003e220  2003e220  0002e220  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d9cd4  000d9cd4  00029cd4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d9cfc  000d9cfc  00029cfc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000ed472  00000000  00000000  00029d00  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00011bf6  00000000  00000000  00117172  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001eda7  00000000  00000000  00128d68  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000025d8  00000000  00000000  00147b0f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00004810  00000000  00000000  0014a0e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00035628  00000000  00000000  0014e8f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002b568  00000000  00000000  00183f1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0010a1e8  00000000  00000000  001af487  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000d898  00000000  00000000  002b9670  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f002 ff4f 	bl	d6ed4 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f002 ff54 	bl	d6eea <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e130 	.word	0x2003e130
   d404c:	000d9be4 	.word	0x000d9be4
   d4050:	2003e220 	.word	0x2003e220
   d4054:	2003e220 	.word	0x2003e220
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405e:	f001 ff69 	bl	d5f34 <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000d9be0 	.word	0x000d9be0
   d4084:	000d9b9c 	.word	0x000d9b9c

000d4088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4088:	f000 b816 	b.w	d40b8 <setup>

000d408c <module_user_loop>:
}

void module_user_loop() {
   d408c:	b508      	push	{r3, lr}
    loop();
   d408e:	f000 f8bb 	bl	d4208 <loop>
    _post_loop();
}
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4096:	f001 bf0f 	b.w	d5eb8 <_post_loop>

000d409a <_Znwj>:
   d409a:	f000 bdd7 	b.w	d4c4c <malloc>

000d409e <_ZdlPv>:
   d409e:	f000 bddd 	b.w	d4c5c <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f000 bddb 	b.w	d4c5c <free>

000d40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a6:	7800      	ldrb	r0, [r0, #0]
   d40a8:	fab0 f080 	clz	r0, r0
   d40ac:	0940      	lsrs	r0, r0, #5
   d40ae:	4770      	bx	lr

000d40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40b0:	2301      	movs	r3, #1
   d40b2:	7003      	strb	r3, [r0, #0]
   d40b4:	4770      	bx	lr

000d40b6 <_Z16locationCallbackfff>:
       SeeedOled.putNumber(minutes); 
    }
    SeeedOled.putNumber(minutes); 
}

void locationCallback(float lat, float lon, float accuracy) {
   d40b6:	4770      	bx	lr

000d40b8 <setup>:
GoogleMapsDeviceLocator locator;
int hour=0;
int minutes=0;
int lastMinute=0;

void setup() {
   d40b8:	b510      	push	{r4, lr}
    Serial.begin(9600);
   d40ba:	f001 fe7b 	bl	d5db4 <_Z16_fetch_usbserialv>
	  Wire.begin();
    SeeedOled.init();  	
   d40be:	4c19      	ldr	r4, [pc, #100]	; (d4124 <setup+0x6c>)
int hour=0;
int minutes=0;
int lastMinute=0;

void setup() {
    Serial.begin(9600);
   d40c0:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d40c4:	f001 fe6a 	bl	d5d9c <_ZN9USBSerial5beginEl>
	  Wire.begin();
   d40c8:	f001 ff7a 	bl	d5fc0 <_Z19__fetch_global_Wirev>
   d40cc:	f001 f9b2 	bl	d5434 <_ZN7TwoWire5beginEv>
    SeeedOled.init();  	
   d40d0:	4620      	mov	r0, r4
   d40d2:	f000 f8d3 	bl	d427c <_ZN9SeeedOLED4initEv>
 	  SeeedOled.clearDisplay();
   d40d6:	4620      	mov	r0, r4
   d40d8:	f000 f93c 	bl	d4354 <_ZN9SeeedOLED12clearDisplayEv>
    SeeedOled.setNormalDisplay();
   d40dc:	4620      	mov	r0, r4
   d40de:	f000 f9a0 	bl	d4422 <_ZN9SeeedOLED16setNormalDisplayEv>
    SeeedOled.setPageMode(); 
   d40e2:	4620      	mov	r0, r4
   d40e4:	f000 f8df 	bl	d42a6 <_ZN9SeeedOLED11setPageModeEv>
    SeeedOled.setTextXY(2, 0);
   d40e8:	2200      	movs	r2, #0
   d40ea:	4620      	mov	r0, r4
   d40ec:	2102      	movs	r1, #2
   d40ee:	f000 f8e7 	bl	d42c0 <_ZN9SeeedOLED9setTextXYEhh>
    SeeedOled.putString("GPS v1.3");
   d40f2:	4620      	mov	r0, r4
    locator.withEventName("deviceLocator");
   d40f4:	4c0c      	ldr	r4, [pc, #48]	; (d4128 <setup+0x70>)
    SeeedOled.init();  	
 	  SeeedOled.clearDisplay();
    SeeedOled.setNormalDisplay();
    SeeedOled.setPageMode(); 
    SeeedOled.setTextXY(2, 0);
    SeeedOled.putString("GPS v1.3");
   d40f6:	490d      	ldr	r1, [pc, #52]	; (d412c <setup+0x74>)
   d40f8:	f000 f94e 	bl	d4398 <_ZN9SeeedOLED9putStringEPKc>
    locator.withEventName("deviceLocator");
   d40fc:	490c      	ldr	r1, [pc, #48]	; (d4130 <setup+0x78>)
   d40fe:	4620      	mov	r0, r4
   d4100:	f000 fa9a 	bl	d4638 <_ZN23GoogleMapsDeviceLocator13withEventNameEPKc>
    locator.withSubscribe(locationCallback).withLocatePeriodic(30);
   d4104:	490b      	ldr	r1, [pc, #44]	; (d4134 <setup+0x7c>)
   d4106:	4620      	mov	r0, r4
   d4108:	f000 fb54 	bl	d47b4 <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE>
   d410c:	211e      	movs	r1, #30
   d410e:	f000 fa89 	bl	d4624 <_ZN23GoogleMapsDeviceLocator18withLocatePeriodicEm>
    Time.zone(+7);
   d4112:	eeb1 0a0c 	vmov.f32	s0, #28	; 0x40e00000  7.0
   d4116:	f001 fd0d 	bl	d5b34 <_ZN9TimeClass4zoneEf>
    lastMinute = Time.minute();
   d411a:	f001 fd57 	bl	d5bcc <_ZN9TimeClass6minuteEv>
   d411e:	4b06      	ldr	r3, [pc, #24]	; (d4138 <setup+0x80>)
   d4120:	6018      	str	r0, [r3, #0]
   d4122:	bd10      	pop	{r4, pc}
   d4124:	2003e274 	.word	0x2003e274
   d4128:	2003e228 	.word	0x2003e228
   d412c:	000d9204 	.word	0x000d9204
   d4130:	000d920d 	.word	0x000d920d
   d4134:	000d40b7 	.word	0x000d40b7
   d4138:	2003e224 	.word	0x2003e224

000d413c <_Z10updateTimev>:
}

void updateTime()
{ 
   d413c:	b570      	push	{r4, r5, r6, lr}
hour = Time.hourFormat12();
   d413e:	f001 fd3d 	bl	d5bbc <_ZN9TimeClass12hourFormat12Ev>
   d4142:	4d2c      	ldr	r5, [pc, #176]	; (d41f4 <_Z10updateTimev+0xb8>)
minutes = Time.minute();
   d4144:	4c2c      	ldr	r4, [pc, #176]	; (d41f8 <_Z10updateTimev+0xbc>)
    lastMinute = Time.minute();
}

void updateTime()
{ 
hour = Time.hourFormat12();
   d4146:	6028      	str	r0, [r5, #0]
minutes = Time.minute();
   d4148:	f001 fd40 	bl	d5bcc <_ZN9TimeClass6minuteEv>
if (lastMinute +1 == minutes ){
   d414c:	4b2b      	ldr	r3, [pc, #172]	; (d41fc <_Z10updateTimev+0xc0>)
}

void updateTime()
{ 
hour = Time.hourFormat12();
minutes = Time.minute();
   d414e:	6020      	str	r0, [r4, #0]
if (lastMinute +1 == minutes ){
   d4150:	681a      	ldr	r2, [r3, #0]
   d4152:	3201      	adds	r2, #1
   d4154:	4290      	cmp	r0, r2
   d4156:	461e      	mov	r6, r3
   d4158:	d126      	bne.n	d41a8 <_Z10updateTimev+0x6c>
 	  SeeedOled.clearDisplay();
   d415a:	4829      	ldr	r0, [pc, #164]	; (d4200 <_Z10updateTimev+0xc4>)
   d415c:	f000 f8fa 	bl	d4354 <_ZN9SeeedOLED12clearDisplayEv>
    SeeedOled.setNormalDisplay();
   d4160:	4827      	ldr	r0, [pc, #156]	; (d4200 <_Z10updateTimev+0xc4>)
   d4162:	f000 f95e 	bl	d4422 <_ZN9SeeedOLED16setNormalDisplayEv>
    SeeedOled.setPageMode();
   d4166:	4826      	ldr	r0, [pc, #152]	; (d4200 <_Z10updateTimev+0xc4>)
   d4168:	f000 f89d 	bl	d42a6 <_ZN9SeeedOLED11setPageModeEv>
    SeeedOled.setTextXY(4,5);
   d416c:	2205      	movs	r2, #5
   d416e:	2104      	movs	r1, #4
   d4170:	4823      	ldr	r0, [pc, #140]	; (d4200 <_Z10updateTimev+0xc4>)
   d4172:	f000 f8a5 	bl	d42c0 <_ZN9SeeedOLED9setTextXYEhh>
    SeeedOled.putNumber(hour);
   d4176:	6829      	ldr	r1, [r5, #0]
   d4178:	4821      	ldr	r0, [pc, #132]	; (d4200 <_Z10updateTimev+0xc4>)
   d417a:	f000 f91a 	bl	d43b2 <_ZN9SeeedOLED9putNumberEl>
    SeeedOled.putString(":");
   d417e:	4921      	ldr	r1, [pc, #132]	; (d4204 <_Z10updateTimev+0xc8>)
   d4180:	481f      	ldr	r0, [pc, #124]	; (d4200 <_Z10updateTimev+0xc4>)
   d4182:	f000 f909 	bl	d4398 <_ZN9SeeedOLED9putStringEPKc>
    if(minutes<10 ){
   d4186:	6823      	ldr	r3, [r4, #0]
   d4188:	2b09      	cmp	r3, #9
   d418a:	dc07      	bgt.n	d419c <_Z10updateTimev+0x60>
       SeeedOled.putNumber(0); 
   d418c:	2100      	movs	r1, #0
   d418e:	481c      	ldr	r0, [pc, #112]	; (d4200 <_Z10updateTimev+0xc4>)
   d4190:	f000 f90f 	bl	d43b2 <_ZN9SeeedOLED9putNumberEl>
       SeeedOled.putNumber(minutes); 
   d4194:	6821      	ldr	r1, [r4, #0]
   d4196:	481a      	ldr	r0, [pc, #104]	; (d4200 <_Z10updateTimev+0xc4>)
   d4198:	f000 f90b 	bl	d43b2 <_ZN9SeeedOLED9putNumberEl>
    }
    SeeedOled.putNumber(minutes); 
   d419c:	6821      	ldr	r1, [r4, #0]
   d419e:	4818      	ldr	r0, [pc, #96]	; (d4200 <_Z10updateTimev+0xc4>)
   d41a0:	f000 f907 	bl	d43b2 <_ZN9SeeedOLED9putNumberEl>
    lastMinute = minutes;
   d41a4:	6823      	ldr	r3, [r4, #0]
   d41a6:	6033      	str	r3, [r6, #0]
}
    SeeedOled.setNormalDisplay();
   d41a8:	4815      	ldr	r0, [pc, #84]	; (d4200 <_Z10updateTimev+0xc4>)
   d41aa:	f000 f93a 	bl	d4422 <_ZN9SeeedOLED16setNormalDisplayEv>
    SeeedOled.setPageMode();
   d41ae:	4814      	ldr	r0, [pc, #80]	; (d4200 <_Z10updateTimev+0xc4>)
   d41b0:	f000 f879 	bl	d42a6 <_ZN9SeeedOLED11setPageModeEv>
    SeeedOled.setTextXY(4,5);
   d41b4:	2205      	movs	r2, #5
   d41b6:	2104      	movs	r1, #4
   d41b8:	4811      	ldr	r0, [pc, #68]	; (d4200 <_Z10updateTimev+0xc4>)
   d41ba:	f000 f881 	bl	d42c0 <_ZN9SeeedOLED9setTextXYEhh>
    SeeedOled.putNumber(hour);
   d41be:	6829      	ldr	r1, [r5, #0]
   d41c0:	480f      	ldr	r0, [pc, #60]	; (d4200 <_Z10updateTimev+0xc4>)
   d41c2:	f000 f8f6 	bl	d43b2 <_ZN9SeeedOLED9putNumberEl>
    SeeedOled.putString(":");
   d41c6:	490f      	ldr	r1, [pc, #60]	; (d4204 <_Z10updateTimev+0xc8>)
   d41c8:	480d      	ldr	r0, [pc, #52]	; (d4200 <_Z10updateTimev+0xc4>)
   d41ca:	f000 f8e5 	bl	d4398 <_ZN9SeeedOLED9putStringEPKc>
    if(minutes<10 ){
   d41ce:	6823      	ldr	r3, [r4, #0]
   d41d0:	2b09      	cmp	r3, #9
   d41d2:	dc08      	bgt.n	d41e6 <_Z10updateTimev+0xaa>
       SeeedOled.putNumber(0); 
   d41d4:	2100      	movs	r1, #0
   d41d6:	480a      	ldr	r0, [pc, #40]	; (d4200 <_Z10updateTimev+0xc4>)
   d41d8:	f000 f8eb 	bl	d43b2 <_ZN9SeeedOLED9putNumberEl>
       SeeedOled.putNumber(minutes); 
   d41dc:	4b06      	ldr	r3, [pc, #24]	; (d41f8 <_Z10updateTimev+0xbc>)
   d41de:	4808      	ldr	r0, [pc, #32]	; (d4200 <_Z10updateTimev+0xc4>)
   d41e0:	6819      	ldr	r1, [r3, #0]
   d41e2:	f000 f8e6 	bl	d43b2 <_ZN9SeeedOLED9putNumberEl>
    }
    SeeedOled.putNumber(minutes); 
   d41e6:	6821      	ldr	r1, [r4, #0]
   d41e8:	4805      	ldr	r0, [pc, #20]	; (d4200 <_Z10updateTimev+0xc4>)
}
   d41ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    SeeedOled.putString(":");
    if(minutes<10 ){
       SeeedOled.putNumber(0); 
       SeeedOled.putNumber(minutes); 
    }
    SeeedOled.putNumber(minutes); 
   d41ee:	f000 b8e0 	b.w	d43b2 <_ZN9SeeedOLED9putNumberEl>
   d41f2:	bf00      	nop
   d41f4:	2003e270 	.word	0x2003e270
   d41f8:	2003e26c 	.word	0x2003e26c
   d41fc:	2003e224 	.word	0x2003e224
   d4200:	2003e274 	.word	0x2003e274
   d4204:	000d9572 	.word	0x000d9572

000d4208 <loop>:
  // - Latitude
  // - Longitude
  // - Accuracy of estimated location (in meters)
}

void loop() {
   d4208:	b508      	push	{r3, lr}
  locator.loop();
   d420a:	4803      	ldr	r0, [pc, #12]	; (d4218 <loop+0x10>)
   d420c:	f000 fa84 	bl	d4718 <_ZN23GoogleMapsDeviceLocator4loopEv>
  updateTime();
}
   d4210:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  // - Accuracy of estimated location (in meters)
}

void loop() {
  locator.loop();
  updateTime();
   d4214:	f7ff bf92 	b.w	d413c <_Z10updateTimev>
   d4218:	2003e228 	.word	0x2003e228

000d421c <_GLOBAL__sub_I_locator>:
}
   d421c:	b510      	push	{r4, lr}
#include <google-maps-device-locator.h>
#include "SeeedOLED.h"

GoogleMapsDeviceLocator locator;
   d421e:	4c06      	ldr	r4, [pc, #24]	; (d4238 <_GLOBAL__sub_I_locator+0x1c>)

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4220:	f000 fb68 	bl	d48f4 <HAL_Pin_Map>
   d4224:	4620      	mov	r0, r4
   d4226:	f000 f9d7 	bl	d45d8 <_ZN23GoogleMapsDeviceLocatorC1Ev>
   d422a:	4620      	mov	r0, r4
   d422c:	4a03      	ldr	r2, [pc, #12]	; (d423c <_GLOBAL__sub_I_locator+0x20>)
   d422e:	4904      	ldr	r1, [pc, #16]	; (d4240 <_GLOBAL__sub_I_locator+0x24>)
}

void loop() {
  locator.loop();
  updateTime();
}
   d4230:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include <google-maps-device-locator.h>
#include "SeeedOLED.h"

GoogleMapsDeviceLocator locator;
   d4234:	f001 beea 	b.w	d600c <__aeabi_atexit>
   d4238:	2003e228 	.word	0x2003e228
   d423c:	2003e220 	.word	0x2003e220
   d4240:	000d4451 	.word	0x000d4451

000d4244 <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d4244:	6803      	ldr	r3, [r0, #0]
   d4246:	b2c9      	uxtb	r1, r1
   d4248:	689b      	ldr	r3, [r3, #8]
   d424a:	4718      	bx	r3

000d424c <_ZN9SeeedOLED11sendCommandEh>:
  delay(5);
  sendCommand(SeeedOLED_Normal_Display_Cmd); //Set Normal Display (default)
}

void SeeedOLED::sendCommand(unsigned char command)
{
   d424c:	b510      	push	{r4, lr}
   d424e:	460c      	mov	r4, r1
  Wire.beginTransmission(SeeedOLED_Address); // begin I2C communication
   d4250:	f001 feb6 	bl	d5fc0 <_Z19__fetch_global_Wirev>
   d4254:	213c      	movs	r1, #60	; 0x3c
   d4256:	f001 f8f7 	bl	d5448 <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(SeeedOLED_Command_Mode);        // Set OLED Command mode
   d425a:	f001 feb1 	bl	d5fc0 <_Z19__fetch_global_Wirev>
   d425e:	2180      	movs	r1, #128	; 0x80
   d4260:	f7ff fff0 	bl	d4244 <_ZN7TwoWire5writeEi>
  Wire.write(command);
   d4264:	f001 feac 	bl	d5fc0 <_Z19__fetch_global_Wirev>
   d4268:	6803      	ldr	r3, [r0, #0]
   d426a:	4621      	mov	r1, r4
   d426c:	689b      	ldr	r3, [r3, #8]
   d426e:	4798      	blx	r3
  Wire.endTransmission(); // End I2C communication
   d4270:	f001 fea6 	bl	d5fc0 <_Z19__fetch_global_Wirev>
}
   d4274:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void SeeedOLED::sendCommand(unsigned char command)
{
  Wire.beginTransmission(SeeedOLED_Address); // begin I2C communication
  Wire.write(SeeedOLED_Command_Mode);        // Set OLED Command mode
  Wire.write(command);
  Wire.endTransmission(); // End I2C communication
   d4278:	f001 b8ed 	b.w	d5456 <_ZN7TwoWire15endTransmissionEv>

000d427c <_ZN9SeeedOLED4initEv>:
        {0x00, 0x41, 0x36, 0x08, 0x00, 0x00, 0x00, 0x00},
        {0x00, 0x02, 0x01, 0x01, 0x02, 0x01, 0x00, 0x00},
        {0x00, 0x02, 0x05, 0x05, 0x02, 0x00, 0x00, 0x00}};

void SeeedOLED::init(void)
{
   d427c:	b510      	push	{r4, lr}
  sendCommand(SeeedOLED_Display_Off_Cmd); //display off
   d427e:	21ae      	movs	r1, #174	; 0xae
        {0x00, 0x41, 0x36, 0x08, 0x00, 0x00, 0x00, 0x00},
        {0x00, 0x02, 0x01, 0x01, 0x02, 0x01, 0x00, 0x00},
        {0x00, 0x02, 0x05, 0x05, 0x02, 0x00, 0x00, 0x00}};

void SeeedOLED::init(void)
{
   d4280:	4604      	mov	r4, r0
  sendCommand(SeeedOLED_Display_Off_Cmd); //display off
   d4282:	f7ff ffe3 	bl	d424c <_ZN9SeeedOLED11sendCommandEh>
  delay(5);
   d4286:	2005      	movs	r0, #5
   d4288:	f000 fd20 	bl	d4ccc <delay>
  sendCommand(SeeedOLED_Display_On_Cmd); //display on
   d428c:	21af      	movs	r1, #175	; 0xaf
   d428e:	4620      	mov	r0, r4
   d4290:	f7ff ffdc 	bl	d424c <_ZN9SeeedOLED11sendCommandEh>
  delay(5);
   d4294:	2005      	movs	r0, #5
   d4296:	f000 fd19 	bl	d4ccc <delay>
  sendCommand(SeeedOLED_Normal_Display_Cmd); //Set Normal Display (default)
   d429a:	4620      	mov	r0, r4
   d429c:	21a6      	movs	r1, #166	; 0xa6
}
   d429e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
{
  sendCommand(SeeedOLED_Display_Off_Cmd); //display off
  delay(5);
  sendCommand(SeeedOLED_Display_On_Cmd); //display on
  delay(5);
  sendCommand(SeeedOLED_Normal_Display_Cmd); //Set Normal Display (default)
   d42a2:	f7ff bfd3 	b.w	d424c <_ZN9SeeedOLED11sendCommandEh>

000d42a6 <_ZN9SeeedOLED11setPageModeEv>:
  sendCommand(0x20); //set addressing mode
  sendCommand(0x00); //set horizontal addressing mode
}

void SeeedOLED::setPageMode()
{
   d42a6:	b510      	push	{r4, lr}
  addressingMode = PAGE_MODE;
   d42a8:	2301      	movs	r3, #1
  sendCommand(0x20); //set addressing mode
  sendCommand(0x00); //set horizontal addressing mode
}

void SeeedOLED::setPageMode()
{
   d42aa:	4604      	mov	r4, r0
  addressingMode = PAGE_MODE;
   d42ac:	7003      	strb	r3, [r0, #0]
  sendCommand(0x20); //set addressing mode
   d42ae:	2120      	movs	r1, #32
   d42b0:	f7ff ffcc 	bl	d424c <_ZN9SeeedOLED11sendCommandEh>
  sendCommand(0x02); //set page addressing mode
   d42b4:	4620      	mov	r0, r4
   d42b6:	2102      	movs	r1, #2
}
   d42b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

void SeeedOLED::setPageMode()
{
  addressingMode = PAGE_MODE;
  sendCommand(0x20); //set addressing mode
  sendCommand(0x02); //set page addressing mode
   d42bc:	f7ff bfc6 	b.w	d424c <_ZN9SeeedOLED11sendCommandEh>

000d42c0 <_ZN9SeeedOLED9setTextXYEhh>:
}

void SeeedOLED::setTextXY(unsigned char Row, unsigned char Column)
{
   d42c0:	b538      	push	{r3, r4, r5, lr}
  sendCommand(0xB0 + Row);                        //set page address
   d42c2:	3950      	subs	r1, #80	; 0x50
  sendCommand(0x20); //set addressing mode
  sendCommand(0x02); //set page addressing mode
}

void SeeedOLED::setTextXY(unsigned char Row, unsigned char Column)
{
   d42c4:	4614      	mov	r4, r2
  sendCommand(0xB0 + Row);                        //set page address
   d42c6:	b2c9      	uxtb	r1, r1
  sendCommand(0x20); //set addressing mode
  sendCommand(0x02); //set page addressing mode
}

void SeeedOLED::setTextXY(unsigned char Row, unsigned char Column)
{
   d42c8:	4605      	mov	r5, r0
  sendCommand(0xB0 + Row);                        //set page address
   d42ca:	f7ff ffbf 	bl	d424c <_ZN9SeeedOLED11sendCommandEh>
  sendCommand(0x00 + (8 * Column & 0x0F));        //set column lower address
   d42ce:	00e1      	lsls	r1, r4, #3
   d42d0:	4628      	mov	r0, r5
   d42d2:	f001 0108 	and.w	r1, r1, #8
   d42d6:	f7ff ffb9 	bl	d424c <_ZN9SeeedOLED11sendCommandEh>
  sendCommand(0x10 + ((8 * Column >> 4) & 0x0F)); //set column higher address
   d42da:	f3c4 0143 	ubfx	r1, r4, #1, #4
   d42de:	4628      	mov	r0, r5
   d42e0:	3110      	adds	r1, #16
}
   d42e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

void SeeedOLED::setTextXY(unsigned char Row, unsigned char Column)
{
  sendCommand(0xB0 + Row);                        //set page address
  sendCommand(0x00 + (8 * Column & 0x0F));        //set column lower address
  sendCommand(0x10 + ((8 * Column >> 4) & 0x0F)); //set column higher address
   d42e6:	f7ff bfb1 	b.w	d424c <_ZN9SeeedOLED11sendCommandEh>

000d42ea <_ZN9SeeedOLED8sendDataEh>:
  sendCommand(SeeedOLED_Display_On_Cmd); //display on
  setTextXY(0, 0);
}

void SeeedOLED::sendData(unsigned char Data)
{
   d42ea:	b510      	push	{r4, lr}
   d42ec:	460c      	mov	r4, r1
  Wire.beginTransmission(SeeedOLED_Address); // begin I2C transmission
   d42ee:	f001 fe67 	bl	d5fc0 <_Z19__fetch_global_Wirev>
   d42f2:	213c      	movs	r1, #60	; 0x3c
   d42f4:	f001 f8a8 	bl	d5448 <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(SeeedOLED_Data_Mode);           // data mode
   d42f8:	f001 fe62 	bl	d5fc0 <_Z19__fetch_global_Wirev>
   d42fc:	2140      	movs	r1, #64	; 0x40
   d42fe:	f7ff ffa1 	bl	d4244 <_ZN7TwoWire5writeEi>
  Wire.write(Data);
   d4302:	f001 fe5d 	bl	d5fc0 <_Z19__fetch_global_Wirev>
   d4306:	6803      	ldr	r3, [r0, #0]
   d4308:	4621      	mov	r1, r4
   d430a:	689b      	ldr	r3, [r3, #8]
   d430c:	4798      	blx	r3
  Wire.endTransmission(); // stop I2C transmission
   d430e:	f001 fe57 	bl	d5fc0 <_Z19__fetch_global_Wirev>
}
   d4312:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void SeeedOLED::sendData(unsigned char Data)
{
  Wire.beginTransmission(SeeedOLED_Address); // begin I2C transmission
  Wire.write(SeeedOLED_Data_Mode);           // data mode
  Wire.write(Data);
  Wire.endTransmission(); // stop I2C transmission
   d4316:	f001 b89e 	b.w	d5456 <_ZN7TwoWire15endTransmissionEv>
	...

000d431c <_ZN9SeeedOLED7putCharEh>:
}

void SeeedOLED::putChar(unsigned char C)
{
  if (C < 32 || C > 127) //Ignore non-printable ASCII characters. This can be modified for multilingual font.
   d431c:	f1a1 0320 	sub.w	r3, r1, #32
  {
    C = ' '; //Space
   d4320:	2b5f      	cmp	r3, #95	; 0x5f
   d4322:	4b0b      	ldr	r3, [pc, #44]	; (d4350 <_ZN9SeeedOLED7putCharEh+0x34>)
   d4324:	bf88      	it	hi
   d4326:	2120      	movhi	r1, #32
  Wire.write(Data);
  Wire.endTransmission(); // stop I2C transmission
}

void SeeedOLED::putChar(unsigned char C)
{
   d4328:	b570      	push	{r4, r5, r6, lr}
   d432a:	f46f 7280 	mvn.w	r2, #256	; 0x100
   d432e:	eb03 05c1 	add.w	r5, r3, r1, lsl #3
   d4332:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   d4336:	4606      	mov	r6, r0
   d4338:	4415      	add	r5, r2
   d433a:	f1a3 04f9 	sub.w	r4, r3, #249	; 0xf9
  }
  unsigned char i = 0;
  for (i = 0; i < 8; i++)
  {
    //read bytes from code memory
    sendData(pgm_read_byte(&BasicFont[C - 32][i])); //font array starts at 0, ASCII starts at 32. Hence the translation
   d433e:	f815 1f01 	ldrb.w	r1, [r5, #1]!
   d4342:	4630      	mov	r0, r6
   d4344:	f7ff ffd1 	bl	d42ea <_ZN9SeeedOLED8sendDataEh>
  if (C < 32 || C > 127) //Ignore non-printable ASCII characters. This can be modified for multilingual font.
  {
    C = ' '; //Space
  }
  unsigned char i = 0;
  for (i = 0; i < 8; i++)
   d4348:	42a5      	cmp	r5, r4
   d434a:	d1f8      	bne.n	d433e <_ZN9SeeedOLED7putCharEh+0x22>
  {
    //read bytes from code memory
    sendData(pgm_read_byte(&BasicFont[C - 32][i])); //font array starts at 0, ASCII starts at 32. Hence the translation
  }
}
   d434c:	bd70      	pop	{r4, r5, r6, pc}
   d434e:	bf00      	nop
   d4350:	000d921b 	.word	0x000d921b

000d4354 <_ZN9SeeedOLED12clearDisplayEv>:
  sendCommand(0x00 + (8 * Column & 0x0F));        //set column lower address
  sendCommand(0x10 + ((8 * Column >> 4) & 0x0F)); //set column higher address
}

void SeeedOLED::clearDisplay()
{
   d4354:	b570      	push	{r4, r5, r6, lr}
  unsigned char i, j;
  sendCommand(SeeedOLED_Display_Off_Cmd); //display off
   d4356:	21ae      	movs	r1, #174	; 0xae
  sendCommand(0x00 + (8 * Column & 0x0F));        //set column lower address
  sendCommand(0x10 + ((8 * Column >> 4) & 0x0F)); //set column higher address
}

void SeeedOLED::clearDisplay()
{
   d4358:	4605      	mov	r5, r0
  unsigned char i, j;
  sendCommand(SeeedOLED_Display_Off_Cmd); //display off
   d435a:	f7ff ff77 	bl	d424c <_ZN9SeeedOLED11sendCommandEh>
   d435e:	2600      	movs	r6, #0
  for (j = 0; j < 8; j++)
  {
    setTextXY(j, 0);
   d4360:	2200      	movs	r2, #0
   d4362:	b2f1      	uxtb	r1, r6
   d4364:	4628      	mov	r0, r5
   d4366:	f7ff ffab 	bl	d42c0 <_ZN9SeeedOLED9setTextXYEhh>
   d436a:	2410      	movs	r4, #16
    {
      for (i = 0; i < 16; i++) //clear all columns
      {
        putChar(' ');
   d436c:	2120      	movs	r1, #32
   d436e:	4628      	mov	r0, r5
   d4370:	3c01      	subs	r4, #1
   d4372:	f7ff ffd3 	bl	d431c <_ZN9SeeedOLED7putCharEh>
  sendCommand(SeeedOLED_Display_Off_Cmd); //display off
  for (j = 0; j < 8; j++)
  {
    setTextXY(j, 0);
    {
      for (i = 0; i < 16; i++) //clear all columns
   d4376:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   d437a:	d1f7      	bne.n	d436c <_ZN9SeeedOLED12clearDisplayEv+0x18>
   d437c:	3601      	adds	r6, #1

void SeeedOLED::clearDisplay()
{
  unsigned char i, j;
  sendCommand(SeeedOLED_Display_Off_Cmd); //display off
  for (j = 0; j < 8; j++)
   d437e:	2e08      	cmp	r6, #8
   d4380:	d1ee      	bne.n	d4360 <_ZN9SeeedOLED12clearDisplayEv+0xc>
      {
        putChar(' ');
      }
    }
  }
  sendCommand(SeeedOLED_Display_On_Cmd); //display on
   d4382:	4628      	mov	r0, r5
   d4384:	21af      	movs	r1, #175	; 0xaf
   d4386:	f7ff ff61 	bl	d424c <_ZN9SeeedOLED11sendCommandEh>
  setTextXY(0, 0);
   d438a:	4622      	mov	r2, r4
   d438c:	4621      	mov	r1, r4
   d438e:	4628      	mov	r0, r5
}
   d4390:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        putChar(' ');
      }
    }
  }
  sendCommand(SeeedOLED_Display_On_Cmd); //display on
  setTextXY(0, 0);
   d4394:	f7ff bf94 	b.w	d42c0 <_ZN9SeeedOLED9setTextXYEhh>

000d4398 <_ZN9SeeedOLED9putStringEPKc>:
    sendData(pgm_read_byte(&BasicFont[C - 32][i])); //font array starts at 0, ASCII starts at 32. Hence the translation
  }
}

void SeeedOLED::putString(const char *String)
{
   d4398:	b570      	push	{r4, r5, r6, lr}
   d439a:	4605      	mov	r5, r0
   d439c:	460e      	mov	r6, r1
   d439e:	2400      	movs	r4, #0
  unsigned char i = 0;
  while (String[i])
   d43a0:	b2e3      	uxtb	r3, r4
   d43a2:	3401      	adds	r4, #1
   d43a4:	5cf1      	ldrb	r1, [r6, r3]
   d43a6:	b119      	cbz	r1, d43b0 <_ZN9SeeedOLED9putStringEPKc+0x18>
  {
    putChar(String[i]);
   d43a8:	4628      	mov	r0, r5
   d43aa:	f7ff ffb7 	bl	d431c <_ZN9SeeedOLED7putCharEh>
}

void SeeedOLED::putString(const char *String)
{
  unsigned char i = 0;
  while (String[i])
   d43ae:	e7f7      	b.n	d43a0 <_ZN9SeeedOLED9putStringEPKc+0x8>
   d43b0:	bd70      	pop	{r4, r5, r6, pc}

000d43b2 <_ZN9SeeedOLED9putNumberEl>:
    i++;
  }
}

unsigned char SeeedOLED::putNumber(long long_num)
{
   d43b2:	b5f0      	push	{r4, r5, r6, r7, lr}
   d43b4:	b085      	sub	sp, #20
  unsigned char char_buffer[10] = "";
   d43b6:	2300      	movs	r3, #0
  unsigned char i = 0;
  unsigned char f = 0;

  if (long_num < 0)
   d43b8:	1e0e      	subs	r6, r1, #0
    i++;
  }
}

unsigned char SeeedOLED::putNumber(long long_num)
{
   d43ba:	4607      	mov	r7, r0
  unsigned char char_buffer[10] = "";
   d43bc:	9301      	str	r3, [sp, #4]
   d43be:	9302      	str	r3, [sp, #8]
   d43c0:	f8ad 300c 	strh.w	r3, [sp, #12]
  unsigned char i = 0;
  unsigned char f = 0;

  if (long_num < 0)
   d43c4:	da07      	bge.n	d43d6 <_ZN9SeeedOLED9putNumberEl+0x24>
  {
    f = 1;
    putChar('-');
   d43c6:	212d      	movs	r1, #45	; 0x2d
   d43c8:	f7ff ffa8 	bl	d431c <_ZN9SeeedOLED7putCharEh>
    long_num = -long_num;
   d43cc:	4276      	negs	r6, r6
  unsigned char i = 0;
  unsigned char f = 0;

  if (long_num < 0)
  {
    f = 1;
   d43ce:	2301      	movs	r3, #1

unsigned char SeeedOLED::putNumber(long long_num)
{
  unsigned char char_buffer[10] = "";
  unsigned char i = 0;
  unsigned char f = 0;
   d43d0:	2400      	movs	r4, #0
    return f;
  }

  while (long_num > 0)
  {
    char_buffer[i++] = long_num % 10;
   d43d2:	210a      	movs	r1, #10
   d43d4:	e005      	b.n	d43e2 <_ZN9SeeedOLED9putNumberEl+0x30>
  {
    f = 1;
    putChar('-');
    long_num = -long_num;
  }
  else if (long_num == 0)
   d43d6:	d1fb      	bne.n	d43d0 <_ZN9SeeedOLED9putNumberEl+0x1e>
  {
    f = 1;
    putChar('0');
   d43d8:	2130      	movs	r1, #48	; 0x30
   d43da:	f7ff ff9f 	bl	d431c <_ZN9SeeedOLED7putCharEh>
    return f;
   d43de:	2001      	movs	r0, #1
   d43e0:	e01d      	b.n	d441e <_ZN9SeeedOLED9putNumberEl+0x6c>
  }

  while (long_num > 0)
  {
    char_buffer[i++] = long_num % 10;
   d43e2:	aa04      	add	r2, sp, #16
   d43e4:	1c65      	adds	r5, r4, #1
   d43e6:	4414      	add	r4, r2
   d43e8:	b2ed      	uxtb	r5, r5
   d43ea:	fb96 f2f1 	sdiv	r2, r6, r1
   d43ee:	fb01 6612 	mls	r6, r1, r2, r6
   d43f2:	f804 6c0c 	strb.w	r6, [r4, #-12]
   d43f6:	462c      	mov	r4, r5
    f = 1;
    putChar('0');
    return f;
  }

  while (long_num > 0)
   d43f8:	4616      	mov	r6, r2
   d43fa:	2a00      	cmp	r2, #0
   d43fc:	d1f1      	bne.n	d43e2 <_ZN9SeeedOLED9putNumberEl+0x30>
  {
    char_buffer[i++] = long_num % 10;
    long_num /= 10;
  }

  f = f + i;
   d43fe:	442b      	add	r3, r5
   d4400:	b2dc      	uxtb	r4, r3
  for (; i > 0; i--)
   d4402:	b15d      	cbz	r5, d441c <_ZN9SeeedOLED9putNumberEl+0x6a>
  {
    putChar('0' + char_buffer[i - 1]);
   d4404:	ab04      	add	r3, sp, #16
   d4406:	442b      	add	r3, r5
   d4408:	4638      	mov	r0, r7
   d440a:	f813 1c0d 	ldrb.w	r1, [r3, #-13]
   d440e:	3130      	adds	r1, #48	; 0x30
   d4410:	b2c9      	uxtb	r1, r1
    char_buffer[i++] = long_num % 10;
    long_num /= 10;
  }

  f = f + i;
  for (; i > 0; i--)
   d4412:	3d01      	subs	r5, #1
  {
    putChar('0' + char_buffer[i - 1]);
   d4414:	f7ff ff82 	bl	d431c <_ZN9SeeedOLED7putCharEh>
    char_buffer[i++] = long_num % 10;
    long_num /= 10;
  }

  f = f + i;
  for (; i > 0; i--)
   d4418:	b2ed      	uxtb	r5, r5
   d441a:	e7f2      	b.n	d4402 <_ZN9SeeedOLED9putNumberEl+0x50>
  {
    putChar('0' + char_buffer[i - 1]);
  }
  return f;
   d441c:	4620      	mov	r0, r4
}
   d441e:	b005      	add	sp, #20
   d4420:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4422 <_ZN9SeeedOLED16setNormalDisplayEv>:
  sendCommand(SeeedOLED_Dectivate_Scroll_Cmd);
}

void SeeedOLED::setNormalDisplay()
{
  sendCommand(SeeedOLED_Normal_Display_Cmd);
   d4422:	21a6      	movs	r1, #166	; 0xa6
   d4424:	f7ff bf12 	b.w	d424c <_ZN9SeeedOLED11sendCommandEh>

000d4428 <_GLOBAL__sub_I__ZN9SeeedOLED4initEv>:
   d4428:	f000 ba64 	b.w	d48f4 <HAL_Pin_Map>

000d442c <_ZNSt17_Function_handlerIFvPKcS1_ESt5_BindIFSt7_Mem_fnIM23GoogleMapsDeviceLocatorFvS1_S1_EEPS5_St12_PlaceholderILi1EESA_ILi2EEEEE9_M_invokeERKSt9_Any_dataOS1_SJ_>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d442c:	b430      	push	{r4, r5}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d442e:	6803      	ldr	r3, [r0, #0]
      template<typename... _Args, typename _Req
               = _Require<typename _Traits::__lvalue,
                          _CheckArgs<_Pack<_Args...>>>>
	result_type
	operator()(_Class* __object, _Args&&... __args) const
	{ return (__object->*_M_pmf)(std::forward<_Args>(__args)...); }
   d4430:	6812      	ldr	r2, [r2, #0]
   d4432:	6858      	ldr	r0, [r3, #4]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d4434:	689c      	ldr	r4, [r3, #8]
   d4436:	681b      	ldr	r3, [r3, #0]
      template<typename... _Args, typename _Req
               = _Require<typename _Traits::__lvalue,
                          _CheckArgs<_Pack<_Args...>>>>
	result_type
	operator()(_Class* __object, _Args&&... __args) const
	{ return (__object->*_M_pmf)(std::forward<_Args>(__args)...); }
   d4438:	6809      	ldr	r1, [r1, #0]
   d443a:	f010 0f01 	tst.w	r0, #1
   d443e:	ea4f 0060 	mov.w	r0, r0, asr #1
   d4442:	bf18      	it	ne
   d4444:	5825      	ldrne	r5, [r4, r0]
   d4446:	4420      	add	r0, r4
   d4448:	bf18      	it	ne
   d444a:	58eb      	ldrne	r3, [r5, r3]
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	(*_Base::_M_get_pointer(__functor))(
	    std::forward<_ArgTypes>(__args)...);
      }
   d444c:	bc30      	pop	{r4, r5}
      template<typename... _Args, typename _Req
               = _Require<typename _Traits::__lvalue,
                          _CheckArgs<_Pack<_Args...>>>>
	result_type
	operator()(_Class* __object, _Args&&... __args) const
	{ return (__object->*_M_pmf)(std::forward<_Args>(__args)...); }
   d444e:	4718      	bx	r3

000d4450 <_ZN23GoogleMapsDeviceLocatorD1Ev>:
GoogleMapsDeviceLocator::GoogleMapsDeviceLocator() : locatorMode(LOCATOR_MODE_MANUAL), periodMs(10000), eventName("deviceLocator"),
	stateTime(0), state(CONNECT_WAIT_STATE), callback(NULL), waitAfterConnect(8000) {

}

GoogleMapsDeviceLocator::~GoogleMapsDeviceLocator() {
   d4450:	b510      	push	{r4, lr}
   d4452:	4b06      	ldr	r3, [pc, #24]	; (d446c <_ZN23GoogleMapsDeviceLocatorD1Ev+0x1c>)
   d4454:	4604      	mov	r4, r0
   d4456:	f840 3b2c 	str.w	r3, [r0], #44
   d445a:	f001 fa89 	bl	d5970 <_ZN6StringD1Ev>
   d445e:	f104 000c 	add.w	r0, r4, #12
   d4462:	f001 fa85 	bl	d5970 <_ZN6StringD1Ev>

}
   d4466:	4620      	mov	r0, r4
   d4468:	bd10      	pop	{r4, pc}
   d446a:	bf00      	nop
   d446c:	000d9524 	.word	0x000d9524

000d4470 <_ZN23GoogleMapsDeviceLocatorD0Ev>:
GoogleMapsDeviceLocator::GoogleMapsDeviceLocator() : locatorMode(LOCATOR_MODE_MANUAL), periodMs(10000), eventName("deviceLocator"),
	stateTime(0), state(CONNECT_WAIT_STATE), callback(NULL), waitAfterConnect(8000) {

}

GoogleMapsDeviceLocator::~GoogleMapsDeviceLocator() {
   d4470:	b510      	push	{r4, lr}
   d4472:	4604      	mov	r4, r0

}
   d4474:	f7ff ffec 	bl	d4450 <_ZN23GoogleMapsDeviceLocatorD1Ev>
   d4478:	4620      	mov	r0, r4
   d447a:	2144      	movs	r1, #68	; 0x44
   d447c:	f001 fdcb 	bl	d6016 <_ZdlPvj>
   d4480:	4620      	mov	r0, r4
   d4482:	bd10      	pop	{r4, pc}

000d4484 <_ZL16wifiScanCallbackP15WiFiAccessPointPv>:



#if Wiring_WiFi

static void wifiScanCallback(WiFiAccessPoint* wap, void* data) {
   d4484:	b530      	push	{r4, r5, lr}
	// The - 3 factor here to leave room for the closing JSON array ] object }} and the trailing null
	size_t spaceLeft = &requestBuf[sizeof(requestBuf) - 3] - requestCur;
   d4486:	4d19      	ldr	r5, [pc, #100]	; (d44ec <_ZL16wifiScanCallbackP15WiFiAccessPointPv+0x68>)
   d4488:	4c19      	ldr	r4, [pc, #100]	; (d44f0 <_ZL16wifiScanCallbackP15WiFiAccessPointPv+0x6c>)



#if Wiring_WiFi

static void wifiScanCallback(WiFiAccessPoint* wap, void* data) {
   d448a:	4602      	mov	r2, r0
   d448c:	b089      	sub	sp, #36	; 0x24
	// The - 3 factor here to leave room for the closing JSON array ] object }} and the trailing null
	size_t spaceLeft = &requestBuf[sizeof(requestBuf) - 3] - requestCur;
   d448e:	6828      	ldr	r0, [r5, #0]

	size_t sizeNeeded = snprintf(requestCur, spaceLeft,
   d4490:	f892 302e 	ldrb.w	r3, [r2, #46]	; 0x2e
   d4494:	f810 1c01 	ldrb.w	r1, [r0, #-1]
   d4498:	9307      	str	r3, [sp, #28]
   d449a:	6b53      	ldr	r3, [r2, #52]	; 0x34
   d449c:	9306      	str	r3, [sp, #24]
   d449e:	f892 302b 	ldrb.w	r3, [r2, #43]	; 0x2b
   d44a2:	9305      	str	r3, [sp, #20]
   d44a4:	f892 302a 	ldrb.w	r3, [r2, #42]	; 0x2a
   d44a8:	9304      	str	r3, [sp, #16]
   d44aa:	f892 3029 	ldrb.w	r3, [r2, #41]	; 0x29
   d44ae:	9303      	str	r3, [sp, #12]
   d44b0:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
   d44b4:	9302      	str	r3, [sp, #8]
   d44b6:	f892 3027 	ldrb.w	r3, [r2, #39]	; 0x27
   d44ba:	9301      	str	r3, [sp, #4]
   d44bc:	f892 3026 	ldrb.w	r3, [r2, #38]	; 0x26
   d44c0:	9300      	str	r3, [sp, #0]
   d44c2:	4a0c      	ldr	r2, [pc, #48]	; (d44f4 <_ZL16wifiScanCallbackP15WiFiAccessPointPv+0x70>)
   d44c4:	4b0c      	ldr	r3, [pc, #48]	; (d44f8 <_ZL16wifiScanCallbackP15WiFiAccessPointPv+0x74>)

#if Wiring_WiFi

static void wifiScanCallback(WiFiAccessPoint* wap, void* data) {
	// The - 3 factor here to leave room for the closing JSON array ] object }} and the trailing null
	size_t spaceLeft = &requestBuf[sizeof(requestBuf) - 3] - requestCur;
   d44c6:	1a24      	subs	r4, r4, r0

	size_t sizeNeeded = snprintf(requestCur, spaceLeft,
   d44c8:	295b      	cmp	r1, #91	; 0x5b
   d44ca:	bf18      	it	ne
   d44cc:	4613      	movne	r3, r2
   d44ce:	4a0b      	ldr	r2, [pc, #44]	; (d44fc <_ZL16wifiScanCallbackP15WiFiAccessPointPv+0x78>)
   d44d0:	4621      	mov	r1, r4
   d44d2:	f000 fbdb 	bl	d4c8c <snprintf>
			"%s{\"m\":\"%02x:%02x:%02x:%02x:%02x:%02x\",\"s\":%d,\"c\":%d}",
			(requestCur[-1] == '[' ? "" : ","),
			wap->bssid[0], wap->bssid[1], wap->bssid[2], wap->bssid[3], wap->bssid[4], wap->bssid[5],
			wap->rssi, wap->channel);
	if (sizeNeeded <= spaceLeft) {
   d44d6:	4284      	cmp	r4, r0
   d44d8:	d306      	bcc.n	d44e8 <_ZL16wifiScanCallbackP15WiFiAccessPointPv+0x64>
		// There is enough space to store the whole entry, so save it
		requestCur += sizeNeeded;
   d44da:	682b      	ldr	r3, [r5, #0]
		numAdded++;
   d44dc:	4a08      	ldr	r2, [pc, #32]	; (d4500 <_ZL16wifiScanCallbackP15WiFiAccessPointPv+0x7c>)
			(requestCur[-1] == '[' ? "" : ","),
			wap->bssid[0], wap->bssid[1], wap->bssid[2], wap->bssid[3], wap->bssid[4], wap->bssid[5],
			wap->rssi, wap->channel);
	if (sizeNeeded <= spaceLeft) {
		// There is enough space to store the whole entry, so save it
		requestCur += sizeNeeded;
   d44de:	4418      	add	r0, r3
		numAdded++;
   d44e0:	6813      	ldr	r3, [r2, #0]
			(requestCur[-1] == '[' ? "" : ","),
			wap->bssid[0], wap->bssid[1], wap->bssid[2], wap->bssid[3], wap->bssid[4], wap->bssid[5],
			wap->rssi, wap->channel);
	if (sizeNeeded <= spaceLeft) {
		// There is enough space to store the whole entry, so save it
		requestCur += sizeNeeded;
   d44e2:	6028      	str	r0, [r5, #0]
		numAdded++;
   d44e4:	3301      	adds	r3, #1
   d44e6:	6013      	str	r3, [r2, #0]
	}
}
   d44e8:	b009      	add	sp, #36	; 0x24
   d44ea:	bd30      	pop	{r4, r5, pc}
   d44ec:	2003e380 	.word	0x2003e380
   d44f0:	2003e37a 	.word	0x2003e37a
   d44f4:	000d952c 	.word	0x000d952c
   d44f8:	000d96d7 	.word	0x000d96d7
   d44fc:	000d952e 	.word	0x000d952e
   d4500:	2003e278 	.word	0x2003e278

000d4504 <_ZN23GoogleMapsDeviceLocator19subscriptionHandlerEPKcS1_>:
			Particle.publish(eventName, scanData, PRIVATE);
		}
	}
}

void GoogleMapsDeviceLocator::subscriptionHandler(const char *event, const char *data) {
   d4504:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	// event: hook-response/deviceLocator/<deviceid>/0

	if (callback) {
   d4508:	6a43      	ldr	r3, [r0, #36]	; 0x24
			Particle.publish(eventName, scanData, PRIVATE);
		}
	}
}

void GoogleMapsDeviceLocator::subscriptionHandler(const char *event, const char *data) {
   d450a:	b085      	sub	sp, #20
   d450c:	4604      	mov	r4, r0
	// event: hook-response/deviceLocator/<deviceid>/0

	if (callback) {
   d450e:	2b00      	cmp	r3, #0
   d4510:	d037      	beq.n	d4582 <_ZN23GoogleMapsDeviceLocator19subscriptionHandlerEPKcS1_+0x7e>
		// float lat, float lon, float accuracy
		char *mutableCopy = strdup(data);
   d4512:	4610      	mov	r0, r2
   d4514:	f002 fd2c 	bl	d6f70 <strdup>
		char *part, *end;
		float lat, lon, accuracy;

		part = strtok_r(mutableCopy, ",", &end);
   d4518:	aa03      	add	r2, sp, #12
   d451a:	491b      	ldr	r1, [pc, #108]	; (d4588 <_ZN23GoogleMapsDeviceLocator19subscriptionHandlerEPKcS1_+0x84>)
void GoogleMapsDeviceLocator::subscriptionHandler(const char *event, const char *data) {
	// event: hook-response/deviceLocator/<deviceid>/0

	if (callback) {
		// float lat, float lon, float accuracy
		char *mutableCopy = strdup(data);
   d451c:	4605      	mov	r5, r0
		char *part, *end;
		float lat, lon, accuracy;

		part = strtok_r(mutableCopy, ",", &end);
   d451e:	f003 fbae 	bl	d7c7e <strtok_r>
		if (part) {
   d4522:	b358      	cbz	r0, d457c <_ZN23GoogleMapsDeviceLocator19subscriptionHandlerEPKcS1_+0x78>
			lat = atof(part);
   d4524:	f002 fbc8 	bl	d6cb8 <atof>
			part = strtok_r(NULL, ",", &end);
   d4528:	aa03      	add	r2, sp, #12
   d452a:	4917      	ldr	r1, [pc, #92]	; (d4588 <_ZN23GoogleMapsDeviceLocator19subscriptionHandlerEPKcS1_+0x84>)
   d452c:	2000      	movs	r0, #0
		char *part, *end;
		float lat, lon, accuracy;

		part = strtok_r(mutableCopy, ",", &end);
		if (part) {
			lat = atof(part);
   d452e:	ec57 6b10 	vmov	r6, r7, d0
			part = strtok_r(NULL, ",", &end);
   d4532:	f003 fba4 	bl	d7c7e <strtok_r>
			if (part) {
   d4536:	b308      	cbz	r0, d457c <_ZN23GoogleMapsDeviceLocator19subscriptionHandlerEPKcS1_+0x78>
				lon = atof(part);
   d4538:	f002 fbbe 	bl	d6cb8 <atof>
				part = strtok_r(NULL, ",", &end);
   d453c:	aa03      	add	r2, sp, #12
   d453e:	4912      	ldr	r1, [pc, #72]	; (d4588 <_ZN23GoogleMapsDeviceLocator19subscriptionHandlerEPKcS1_+0x84>)
   d4540:	2000      	movs	r0, #0
		part = strtok_r(mutableCopy, ",", &end);
		if (part) {
			lat = atof(part);
			part = strtok_r(NULL, ",", &end);
			if (part) {
				lon = atof(part);
   d4542:	ec59 8b10 	vmov	r8, r9, d0
				part = strtok_r(NULL, ",", &end);
   d4546:	f003 fb9a 	bl	d7c7e <strtok_r>
				if (part) {
   d454a:	b1b8      	cbz	r0, d457c <_ZN23GoogleMapsDeviceLocator19subscriptionHandlerEPKcS1_+0x78>
					accuracy = atof(part);
   d454c:	f002 fbb4 	bl	d6cb8 <atof>

					(*callback)(lat, lon, accuracy);
   d4550:	ec51 0b10 	vmov	r0, r1, d0
   d4554:	f002 fb60 	bl	d6c18 <__aeabi_d2f>
   d4558:	4649      	mov	r1, r9
   d455a:	9001      	str	r0, [sp, #4]
   d455c:	4640      	mov	r0, r8
   d455e:	f002 fb5b 	bl	d6c18 <__aeabi_d2f>
   d4562:	4639      	mov	r1, r7
   d4564:	9000      	str	r0, [sp, #0]
   d4566:	4630      	mov	r0, r6
   d4568:	f002 fb56 	bl	d6c18 <__aeabi_d2f>
   d456c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d456e:	ed9d 1a01 	vldr	s2, [sp, #4]
   d4572:	eddd 0a00 	vldr	s1, [sp]
   d4576:	ee00 0a10 	vmov	s0, r0
   d457a:	4798      	blx	r3
				}
			}
		}

		free(mutableCopy);
   d457c:	4628      	mov	r0, r5
   d457e:	f000 fb6d 	bl	d4c5c <free>
	}
}
   d4582:	b005      	add	sp, #20
   d4584:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d4588:	000d952c 	.word	0x000d952c

000d458c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM23GoogleMapsDeviceLocatorFvPKcS5_EEPS3_St12_PlaceholderILi1EESA_ILi2EEEEE10_M_managerERSt9_Any_dataRKSG_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d458c:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d458e:	b538      	push	{r3, r4, r5, lr}
   d4590:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d4592:	d005      	beq.n	d45a0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM23GoogleMapsDeviceLocatorFvPKcS5_EEPS3_St12_PlaceholderILi1EESA_ILi2EEEEE10_M_managerERSt9_Any_dataRKSG_St18_Manager_operation+0x14>
   d4594:	2a03      	cmp	r2, #3
   d4596:	d00f      	beq.n	d45b8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM23GoogleMapsDeviceLocatorFvPKcS5_EEPS3_St12_PlaceholderILi1EESA_ILi2EEEEE10_M_managerERSt9_Any_dataRKSG_St18_Manager_operation+0x2c>
   d4598:	2a01      	cmp	r2, #1
   d459a:	d111      	bne.n	d45c0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM23GoogleMapsDeviceLocatorFvPKcS5_EEPS3_St12_PlaceholderILi1EESA_ILi2EEEEE10_M_managerERSt9_Any_dataRKSG_St18_Manager_operation+0x34>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d459c:	680b      	ldr	r3, [r1, #0]
   d459e:	e009      	b.n	d45b4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM23GoogleMapsDeviceLocatorFvPKcS5_EEPS3_St12_PlaceholderILi1EESA_ILi2EEEEE10_M_managerERSt9_Any_dataRKSG_St18_Manager_operation+0x28>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d45a0:	200c      	movs	r0, #12
   d45a2:	680d      	ldr	r5, [r1, #0]
   d45a4:	f7ff fd79 	bl	d409a <_Znwj>
   d45a8:	4603      	mov	r3, r0
   d45aa:	b118      	cbz	r0, d45b4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM23GoogleMapsDeviceLocatorFvPKcS5_EEPS3_St12_PlaceholderILi1EESA_ILi2EEEEE10_M_managerERSt9_Any_dataRKSG_St18_Manager_operation+0x28>
   d45ac:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   d45b0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   d45b4:	6023      	str	r3, [r4, #0]
   d45b6:	e003      	b.n	d45c0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM23GoogleMapsDeviceLocatorFvPKcS5_EEPS3_St12_PlaceholderILi1EESA_ILi2EEEEE10_M_managerERSt9_Any_dataRKSG_St18_Manager_operation+0x34>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d45b8:	210c      	movs	r1, #12
   d45ba:	6800      	ldr	r0, [r0, #0]
   d45bc:	f001 fd2b 	bl	d6016 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d45c0:	2000      	movs	r0, #0
   d45c2:	bd38      	pop	{r3, r4, r5, pc}

000d45c4 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d45c4:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d45c6:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d45c8:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d45ca:	b113      	cbz	r3, d45d2 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d45cc:	2203      	movs	r2, #3
   d45ce:	4601      	mov	r1, r0
   d45d0:	4798      	blx	r3
    }
   d45d2:	4620      	mov	r0, r4
   d45d4:	bd10      	pop	{r4, pc}
	...

000d45d8 <_ZN23GoogleMapsDeviceLocatorC1Ev>:

static char requestBuf[256];
static char *requestCur;
static int numAdded = 0;

GoogleMapsDeviceLocator::GoogleMapsDeviceLocator() : locatorMode(LOCATOR_MODE_MANUAL), periodMs(10000), eventName("deviceLocator"),
   d45d8:	b538      	push	{r3, r4, r5, lr}
	stateTime(0), state(CONNECT_WAIT_STATE), callback(NULL), waitAfterConnect(8000) {
   d45da:	4b0f      	ldr	r3, [pc, #60]	; (d4618 <_ZN23GoogleMapsDeviceLocatorC1Ev+0x40>)
   d45dc:	6003      	str	r3, [r0, #0]
   d45de:	2500      	movs	r5, #0
   d45e0:	f242 7310 	movw	r3, #10000	; 0x2710

static char requestBuf[256];
static char *requestCur;
static int numAdded = 0;

GoogleMapsDeviceLocator::GoogleMapsDeviceLocator() : locatorMode(LOCATOR_MODE_MANUAL), periodMs(10000), eventName("deviceLocator"),
   d45e4:	4604      	mov	r4, r0
	stateTime(0), state(CONNECT_WAIT_STATE), callback(NULL), waitAfterConnect(8000) {
   d45e6:	6045      	str	r5, [r0, #4]
   d45e8:	6083      	str	r3, [r0, #8]
   d45ea:	490c      	ldr	r1, [pc, #48]	; (d461c <_ZN23GoogleMapsDeviceLocatorC1Ev+0x44>)
   d45ec:	300c      	adds	r0, #12
   d45ee:	f001 fa06 	bl	d59fe <_ZN6StringC1EPK19__FlashStringHelper>
   d45f2:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
   d45f6:	62a3      	str	r3, [r4, #40]	; 0x28
   d45f8:	61e5      	str	r5, [r4, #28]
   d45fa:	6225      	str	r5, [r4, #32]
   d45fc:	6265      	str	r5, [r4, #36]	; 0x24
   d45fe:	4908      	ldr	r1, [pc, #32]	; (d4620 <_ZN23GoogleMapsDeviceLocatorC1Ev+0x48>)
   d4600:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   d4604:	f001 f9fb 	bl	d59fe <_ZN6StringC1EPK19__FlashStringHelper>
   d4608:	f44f 739b 	mov.w	r3, #310	; 0x136
   d460c:	63e3      	str	r3, [r4, #60]	; 0x3c
   d460e:	f44f 73cd 	mov.w	r3, #410	; 0x19a
   d4612:	6423      	str	r3, [r4, #64]	; 0x40

}
   d4614:	4620      	mov	r0, r4
   d4616:	bd38      	pop	{r3, r4, r5, pc}
   d4618:	000d9524 	.word	0x000d9524
   d461c:	000d920d 	.word	0x000d920d
   d4620:	000d9564 	.word	0x000d9564

000d4624 <_ZN23GoogleMapsDeviceLocator18withLocatePeriodicEm>:
	locatorMode = LOCATOR_MODE_ONCE;
	return *this;
}

GoogleMapsDeviceLocator &GoogleMapsDeviceLocator::withLocatePeriodic(unsigned long secondsPeriodic) {
	locatorMode = LOCATOR_MODE_PERIODIC;
   d4624:	2302      	movs	r3, #2
   d4626:	6043      	str	r3, [r0, #4]
	if (secondsPeriodic < 5) {
		secondsPeriodic = 5;
   d4628:	2904      	cmp	r1, #4
   d462a:	bf98      	it	ls
   d462c:	2105      	movls	r1, #5
	}
	periodMs = secondsPeriodic * 1000;
   d462e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4632:	4359      	muls	r1, r3
   d4634:	6081      	str	r1, [r0, #8]
	return *this;
}
   d4636:	4770      	bx	lr

000d4638 <_ZN23GoogleMapsDeviceLocator13withEventNameEPKc>:

GoogleMapsDeviceLocator &GoogleMapsDeviceLocator::withEventName(const char *name) {
   d4638:	b510      	push	{r4, lr}
   d463a:	4604      	mov	r4, r0
	this->eventName = name;
   d463c:	300c      	adds	r0, #12
   d463e:	f001 f9f1 	bl	d5a24 <_ZN6StringaSEPKc>
	return *this;
}
   d4642:	4620      	mov	r0, r4
   d4644:	bd10      	pop	{r4, pc}
	...

000d4648 <_ZN23GoogleMapsDeviceLocator8wifiScanEv>:
		numAdded++;
	}
}


const char *GoogleMapsDeviceLocator::wifiScan() {
   d4648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	requestCur = requestBuf;
	numAdded = 0;

	requestCur += sprintf(requestCur, "{\"w\":{\"a\":");
   d464a:	4c10      	ldr	r4, [pc, #64]	; (d468c <_ZN23GoogleMapsDeviceLocator8wifiScanEv+0x44>)


const char *GoogleMapsDeviceLocator::wifiScan() {

	requestCur = requestBuf;
	numAdded = 0;
   d464c:	4f10      	ldr	r7, [pc, #64]	; (d4690 <_ZN23GoogleMapsDeviceLocator8wifiScanEv+0x48>)

	requestCur += sprintf(requestCur, "{\"w\":{\"a\":");
	*requestCur++ = '[';
   d464e:	4e11      	ldr	r6, [pc, #68]	; (d4694 <_ZN23GoogleMapsDeviceLocator8wifiScanEv+0x4c>)
const char *GoogleMapsDeviceLocator::wifiScan() {

	requestCur = requestBuf;
	numAdded = 0;

	requestCur += sprintf(requestCur, "{\"w\":{\"a\":");
   d4650:	4911      	ldr	r1, [pc, #68]	; (d4698 <_ZN23GoogleMapsDeviceLocator8wifiScanEv+0x50>)


const char *GoogleMapsDeviceLocator::wifiScan() {

	requestCur = requestBuf;
	numAdded = 0;
   d4652:	2500      	movs	r5, #0

	requestCur += sprintf(requestCur, "{\"w\":{\"a\":");
   d4654:	4620      	mov	r0, r4


const char *GoogleMapsDeviceLocator::wifiScan() {

	requestCur = requestBuf;
	numAdded = 0;
   d4656:	603d      	str	r5, [r7, #0]

	requestCur += sprintf(requestCur, "{\"w\":{\"a\":");
   d4658:	f002 fc82 	bl	d6f60 <strcpy>
	*requestCur++ = '[';
   d465c:	f104 030b 	add.w	r3, r4, #11
   d4660:	6033      	str	r3, [r6, #0]
   d4662:	235b      	movs	r3, #91	; 0x5b
   d4664:	72a3      	strb	r3, [r4, #10]
    {
        setIPAddressSource(DYNAMIC_IP);
    }

    int scan(wlan_scan_result_t callback, void* cookie=NULL) {
        return wlan_scan(callback, cookie);
   d4666:	4629      	mov	r1, r5
   d4668:	480c      	ldr	r0, [pc, #48]	; (d469c <_ZN23GoogleMapsDeviceLocator8wifiScanEv+0x54>)
   d466a:	f000 fa1b 	bl	d4aa4 <wlan_scan>

	WiFi.scan(wifiScanCallback);

	*requestCur++ = ']';
   d466e:	6833      	ldr	r3, [r6, #0]
   d4670:	225d      	movs	r2, #93	; 0x5d
   d4672:	701a      	strb	r2, [r3, #0]
	*requestCur++ = '}';
   d4674:	227d      	movs	r2, #125	; 0x7d
   d4676:	705a      	strb	r2, [r3, #1]
	*requestCur++ = '}';
   d4678:	709a      	strb	r2, [r3, #2]
	*requestCur++ = 0;
   d467a:	70dd      	strb	r5, [r3, #3]
   d467c:	1d1a      	adds	r2, r3, #4

	if (numAdded == 0) {
   d467e:	683b      	ldr	r3, [r7, #0]
	WiFi.scan(wifiScanCallback);

	*requestCur++ = ']';
	*requestCur++ = '}';
	*requestCur++ = '}';
	*requestCur++ = 0;
   d4680:	6032      	str	r2, [r6, #0]

	if (numAdded == 0) {
   d4682:	b903      	cbnz	r3, d4686 <_ZN23GoogleMapsDeviceLocator8wifiScanEv+0x3e>
		requestBuf[0] = 0;
   d4684:	7023      	strb	r3, [r4, #0]
	}

	return requestBuf;
}
   d4686:	4801      	ldr	r0, [pc, #4]	; (d468c <_ZN23GoogleMapsDeviceLocator8wifiScanEv+0x44>)
   d4688:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d468a:	bf00      	nop
   d468c:	2003e27d 	.word	0x2003e27d
   d4690:	2003e278 	.word	0x2003e278
   d4694:	2003e380 	.word	0x2003e380
   d4698:	000d9569 	.word	0x000d9569
   d469c:	000d4485 	.word	0x000d4485

000d46a0 <_ZN23GoogleMapsDeviceLocator15publishLocationEv>:
	return cellularScan();
#endif
}


void GoogleMapsDeviceLocator::publishLocation() {
   d46a0:	b530      	push	{r4, r5, lr}
   d46a2:	b085      	sub	sp, #20
   d46a4:	4605      	mov	r5, r0

	Serial.println("publishLocation");
   d46a6:	f001 fb85 	bl	d5db4 <_Z16_fetch_usbserialv>
   d46aa:	4918      	ldr	r1, [pc, #96]	; (d470c <_ZN23GoogleMapsDeviceLocator15publishLocationEv+0x6c>)
   d46ac:	f001 f8e7 	bl	d587e <_ZN5Print7printlnEPKc>

}

const char *GoogleMapsDeviceLocator::scan() {
#if Wiring_WiFi
	return wifiScan();
   d46b0:	4628      	mov	r0, r5
   d46b2:	f7ff ffc9 	bl	d4648 <_ZN23GoogleMapsDeviceLocator8wifiScanEv>
   d46b6:	4604      	mov	r4, r0

	Serial.println("publishLocation");

	const char *scanData = scan();

	Serial.printlnf("scanData=%s", scanData);
   d46b8:	f001 fb7c 	bl	d5db4 <_Z16_fetch_usbserialv>
    }

    template <typename... Args>
    inline size_t printlnf(const char* format, Args... args)
    {
        return this->printf_impl(true, format, args...);
   d46bc:	4623      	mov	r3, r4
   d46be:	4a14      	ldr	r2, [pc, #80]	; (d4710 <_ZN23GoogleMapsDeviceLocator15publishLocationEv+0x70>)
   d46c0:	2101      	movs	r1, #1
   d46c2:	f001 f906 	bl	d58d2 <_ZN5Print11printf_implEbPKcz>

	if (scanData[0]) {
   d46c6:	7823      	ldrb	r3, [r4, #0]
   d46c8:	b1f3      	cbz	r3, d4708 <_ZN23GoogleMapsDeviceLocator15publishLocationEv+0x68>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d46ca:	f000 fa3f 	bl	d4b4c <spark_cloud_flag_connected>

		if (Particle.connected()) {
   d46ce:	b1d8      	cbz	r0, d4708 <_ZN23GoogleMapsDeviceLocator15publishLocationEv+0x68>
   d46d0:	4b10      	ldr	r3, [pc, #64]	; (d4714 <_ZN23GoogleMapsDeviceLocator15publishLocationEv+0x74>)
   d46d2:	68e9      	ldr	r1, [r5, #12]
   d46d4:	781b      	ldrb	r3, [r3, #0]
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d46d6:	f88d 3000 	strb.w	r3, [sp]
   d46da:	4622      	mov	r2, r4
   d46dc:	233c      	movs	r3, #60	; 0x3c
   d46de:	a802      	add	r0, sp, #8
   d46e0:	f000 fcaa 	bl	d5038 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d46e4:	9c03      	ldr	r4, [sp, #12]
   d46e6:	b17c      	cbz	r4, d4708 <_ZN23GoogleMapsDeviceLocator15publishLocationEv+0x68>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d46e8:	6863      	ldr	r3, [r4, #4]
   d46ea:	3b01      	subs	r3, #1
   d46ec:	6063      	str	r3, [r4, #4]
   d46ee:	b95b      	cbnz	r3, d4708 <_ZN23GoogleMapsDeviceLocator15publishLocationEv+0x68>
        {
          _M_dispose();
   d46f0:	6823      	ldr	r3, [r4, #0]
   d46f2:	4620      	mov	r0, r4
   d46f4:	689b      	ldr	r3, [r3, #8]
   d46f6:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d46f8:	68a3      	ldr	r3, [r4, #8]
   d46fa:	3b01      	subs	r3, #1
   d46fc:	60a3      	str	r3, [r4, #8]
   d46fe:	b91b      	cbnz	r3, d4708 <_ZN23GoogleMapsDeviceLocator15publishLocationEv+0x68>
            _M_destroy();
   d4700:	6823      	ldr	r3, [r4, #0]
   d4702:	4620      	mov	r0, r4
   d4704:	68db      	ldr	r3, [r3, #12]
   d4706:	4798      	blx	r3
			Particle.publish(eventName, scanData, PRIVATE);
		}
	}
}
   d4708:	b005      	add	sp, #20
   d470a:	bd30      	pop	{r4, r5, pc}
   d470c:	000d9574 	.word	0x000d9574
   d4710:	000d9584 	.word	0x000d9584
   d4714:	2003e27c 	.word	0x2003e27c

000d4718 <_ZN23GoogleMapsDeviceLocator4loopEv>:
	return *this;
}



void GoogleMapsDeviceLocator::loop() {
   d4718:	b510      	push	{r4, lr}
	switch(state) {
   d471a:	6a03      	ldr	r3, [r0, #32]
   d471c:	2b02      	cmp	r3, #2
	return *this;
}



void GoogleMapsDeviceLocator::loop() {
   d471e:	4604      	mov	r4, r0
	switch(state) {
   d4720:	d00b      	beq.n	d473a <_ZN23GoogleMapsDeviceLocator4loopEv+0x22>
   d4722:	2b03      	cmp	r3, #3
   d4724:	d023      	beq.n	d476e <_ZN23GoogleMapsDeviceLocator4loopEv+0x56>
   d4726:	2b00      	cmp	r3, #0
   d4728:	d134      	bne.n	d4794 <_ZN23GoogleMapsDeviceLocator4loopEv+0x7c>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d472a:	f000 fa0f 	bl	d4b4c <spark_cloud_flag_connected>
	case CONNECT_WAIT_STATE:
		if (Particle.connected()) {
   d472e:	b388      	cbz	r0, d4794 <_ZN23GoogleMapsDeviceLocator4loopEv+0x7c>
			state = CONNECTED_WAIT_STATE;
   d4730:	2302      	movs	r3, #2
   d4732:	6223      	str	r3, [r4, #32]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4734:	f000 f8c6 	bl	d48c4 <HAL_Timer_Get_Milli_Seconds>
   d4738:	e017      	b.n	d476a <_ZN23GoogleMapsDeviceLocator4loopEv+0x52>
   d473a:	f000 f8c3 	bl	d48c4 <HAL_Timer_Get_Milli_Seconds>
			stateTime = millis();
		}
		break;

	case CONNECTED_WAIT_STATE:
		if (millis() - stateTime >= waitAfterConnect) {
   d473e:	69e3      	ldr	r3, [r4, #28]
   d4740:	1ac0      	subs	r0, r0, r3
   d4742:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   d4744:	4298      	cmp	r0, r3
   d4746:	d325      	bcc.n	d4794 <_ZN23GoogleMapsDeviceLocator4loopEv+0x7c>
			// Wait several seconds after connecting before doing the location
			if (locatorMode == LOCATOR_MODE_ONCE) {
   d4748:	6863      	ldr	r3, [r4, #4]
   d474a:	2b01      	cmp	r3, #1
   d474c:	d103      	bne.n	d4756 <_ZN23GoogleMapsDeviceLocator4loopEv+0x3e>
				publishLocation();
   d474e:	4620      	mov	r0, r4
   d4750:	f7ff ffa6 	bl	d46a0 <_ZN23GoogleMapsDeviceLocator15publishLocationEv>
   d4754:	e000      	b.n	d4758 <_ZN23GoogleMapsDeviceLocator4loopEv+0x40>

				state = IDLE_STATE;
			}
			else
			if (locatorMode == LOCATOR_MODE_MANUAL) {
   d4756:	b913      	cbnz	r3, d475e <_ZN23GoogleMapsDeviceLocator4loopEv+0x46>
				state = IDLE_STATE;
   d4758:	2304      	movs	r3, #4
   d475a:	6223      	str	r3, [r4, #32]
   d475c:	bd10      	pop	{r4, pc}
			}
			else {
				state = CONNECTED_STATE;
   d475e:	2303      	movs	r3, #3
   d4760:	6223      	str	r3, [r4, #32]
   d4762:	f000 f8af 	bl	d48c4 <HAL_Timer_Get_Milli_Seconds>
				stateTime = millis() - periodMs;
   d4766:	68a3      	ldr	r3, [r4, #8]
   d4768:	1ac0      	subs	r0, r0, r3
   d476a:	61e0      	str	r0, [r4, #28]
   d476c:	bd10      	pop	{r4, pc}
   d476e:	f000 f9ed 	bl	d4b4c <spark_cloud_flag_connected>
			}
		}
		break;

	case CONNECTED_STATE:
		if (Particle.connected()) {
   d4772:	b170      	cbz	r0, d4792 <_ZN23GoogleMapsDeviceLocator4loopEv+0x7a>
   d4774:	f000 f8a6 	bl	d48c4 <HAL_Timer_Get_Milli_Seconds>
			if (millis() - stateTime >= periodMs) {
   d4778:	69e3      	ldr	r3, [r4, #28]
   d477a:	1ac0      	subs	r0, r0, r3
   d477c:	68a3      	ldr	r3, [r4, #8]
   d477e:	4298      	cmp	r0, r3
   d4780:	d308      	bcc.n	d4794 <_ZN23GoogleMapsDeviceLocator4loopEv+0x7c>
   d4782:	f000 f89f 	bl	d48c4 <HAL_Timer_Get_Milli_Seconds>
				stateTime = millis();
   d4786:	61e0      	str	r0, [r4, #28]
				publishLocation();
   d4788:	4620      	mov	r0, r4
	case IDLE_STATE:
		// Just hang out here forever (entered only on LOCATOR_MODE_ONCE)
		break;
	}

}
   d478a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

	case CONNECTED_STATE:
		if (Particle.connected()) {
			if (millis() - stateTime >= periodMs) {
				stateTime = millis();
				publishLocation();
   d478e:	f7ff bf87 	b.w	d46a0 <_ZN23GoogleMapsDeviceLocator15publishLocationEv>
			}
		}
		else {
			// We have disconnected, rec
			state = CONNECT_WAIT_STATE;
   d4792:	6220      	str	r0, [r4, #32]
   d4794:	bd10      	pop	{r4, pc}

000d4796 <_ZNSt8functionIFvPKcS1_EEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d4796:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4798:	2300      	movs	r3, #0
   d479a:	6083      	str	r3, [r0, #8]
   d479c:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d479e:	4604      	mov	r4, r0
   d47a0:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d47a2:	b12b      	cbz	r3, d47b0 <_ZNSt8functionIFvPKcS1_EEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d47a4:	2202      	movs	r2, #2
   d47a6:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d47a8:	68eb      	ldr	r3, [r5, #12]
   d47aa:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d47ac:	68ab      	ldr	r3, [r5, #8]
   d47ae:	60a3      	str	r3, [r4, #8]
	}
    }
   d47b0:	4620      	mov	r0, r4
   d47b2:	bd38      	pop	{r3, r4, r5, pc}

000d47b4 <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE>:
GoogleMapsDeviceLocator &GoogleMapsDeviceLocator::withEventName(const char *name) {
	this->eventName = name;
	return *this;
}

GoogleMapsDeviceLocator &GoogleMapsDeviceLocator::withSubscribe(GoogleMapsDeviceLocatorSubscriptionCallback callback) {
   d47b4:	b530      	push	{r4, r5, lr}
   d47b6:	b08b      	sub	sp, #44	; 0x2c
   d47b8:	68c5      	ldr	r5, [r0, #12]
	this->callback = callback;
   d47ba:	6241      	str	r1, [r0, #36]	; 0x24
GoogleMapsDeviceLocator &GoogleMapsDeviceLocator::withEventName(const char *name) {
	this->eventName = name;
	return *this;
}

GoogleMapsDeviceLocator &GoogleMapsDeviceLocator::withSubscribe(GoogleMapsDeviceLocatorSubscriptionCallback callback) {
   d47bc:	4604      	mov	r4, r0
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, long seconds = 0, SleepOptionFlags flag = SLEEP_NETWORK_OFF) { return sleepPinImpl(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, std::chrono::seconds s, SleepOptionFlags flag = SLEEP_NETWORK_OFF) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, s.count(), flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, long seconds = 0) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, std::chrono::seconds s) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, flag, s.count()); }

    static String deviceID(void) { return spark_deviceID(); }
   d47be:	a806      	add	r0, sp, #24
   d47c0:	f000 f9cc 	bl	d4b5c <spark_deviceID>
	this->callback = callback;

	snprintf(requestBuf, sizeof(requestBuf), "hook-response/%s/%s", eventName.c_str(), System.deviceID().c_str());
   d47c4:	9b06      	ldr	r3, [sp, #24]
   d47c6:	9300      	str	r3, [sp, #0]
   d47c8:	4a1b      	ldr	r2, [pc, #108]	; (d4838 <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE+0x84>)
   d47ca:	481c      	ldr	r0, [pc, #112]	; (d483c <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE+0x88>)
   d47cc:	462b      	mov	r3, r5
   d47ce:	f44f 7180 	mov.w	r1, #256	; 0x100
   d47d2:	f000 fa5b 	bl	d4c8c <snprintf>
   d47d6:	a806      	add	r0, sp, #24
   d47d8:	f001 f8ca 	bl	d5970 <_ZN6StringD1Ev>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d47dc:	2500      	movs	r5, #0
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d47de:	200c      	movs	r0, #12
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d47e0:	9504      	str	r5, [sp, #16]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d47e2:	f7ff fc5a 	bl	d409a <_Znwj>
   d47e6:	b118      	cbz	r0, d47f0 <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE+0x3c>
	{ }

      _Bind(const _Bind&) = default;

      _Bind(_Bind&& __b)
      : _M_f(std::move(__b._M_f)), _M_bound_args(std::move(__b._M_bound_args))
   d47e8:	4b15      	ldr	r3, [pc, #84]	; (d4840 <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE+0x8c>)
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d47ea:	6084      	str	r4, [r0, #8]
   d47ec:	e880 0028 	stmia.w	r0, {r3, r5}
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d47f0:	4b14      	ldr	r3, [pc, #80]	; (d4844 <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE+0x90>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d47f2:	9002      	str	r0, [sp, #8]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d47f4:	9305      	str	r3, [sp, #20]
        return spark_subscribe(eventName, handler, NULL, MY_DEVICES, deviceID, NULL);
    }

    bool subscribe(const char *eventName, wiring_event_handler_t handler, Spark_Subscription_Scope_TypeDef scope)
    {
        return subscribe_wiring(eventName, handler, scope);
   d47f6:	a902      	add	r1, sp, #8
	    _M_manager = &_My_handler::_M_manager;
   d47f8:	4b13      	ldr	r3, [pc, #76]	; (d4848 <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE+0x94>)
   d47fa:	9304      	str	r3, [sp, #16]
   d47fc:	a806      	add	r0, sp, #24
   d47fe:	f7ff ffca 	bl	d4796 <_ZNSt8functionIFvPKcS1_EEC1ERKS3_>
    }

    bool subscribe_wiring(const char *eventName, wiring_event_handler_t handler, Spark_Subscription_Scope_TypeDef scope, const char *deviceID = NULL)
    {
        bool success = false;
        if (handler) // if the call-wrapper has wrapped a callable object
   d4802:	9b08      	ldr	r3, [sp, #32]
   d4804:	b17b      	cbz	r3, d4826 <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE+0x72>
        {
            auto wrapper = new wiring_event_handler_t(handler);
   d4806:	2010      	movs	r0, #16
   d4808:	f7ff fc47 	bl	d409a <_Znwj>
   d480c:	4605      	mov	r5, r0
   d480e:	b150      	cbz	r0, d4826 <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE+0x72>
   d4810:	a906      	add	r1, sp, #24
   d4812:	f7ff ffc0 	bl	d4796 <_ZNSt8functionIFvPKcS1_EEC1ERKS3_>
            if (wrapper) {
                success = spark_subscribe(eventName, (EventHandler)call_wiring_event_handler, wrapper, scope, deviceID, NULL);
   d4816:	2300      	movs	r3, #0
   d4818:	9301      	str	r3, [sp, #4]
   d481a:	9300      	str	r3, [sp, #0]
   d481c:	462a      	mov	r2, r5
   d481e:	490b      	ldr	r1, [pc, #44]	; (d484c <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE+0x98>)
   d4820:	4806      	ldr	r0, [pc, #24]	; (d483c <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE+0x88>)
   d4822:	f000 f9ab 	bl	d4b7c <spark_subscribe>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4826:	a806      	add	r0, sp, #24
   d4828:	f7ff fecc 	bl	d45c4 <_ZNSt14_Function_baseD1Ev>
   d482c:	a802      	add	r0, sp, #8
   d482e:	f7ff fec9 	bl	d45c4 <_ZNSt14_Function_baseD1Ev>

	Particle.subscribe(requestBuf, &GoogleMapsDeviceLocator::subscriptionHandler, this, MY_DEVICES);

	return *this;
}
   d4832:	4620      	mov	r0, r4
   d4834:	b00b      	add	sp, #44	; 0x2c
   d4836:	bd30      	pop	{r4, r5, pc}
   d4838:	000d9590 	.word	0x000d9590
   d483c:	2003e27d 	.word	0x2003e27d
   d4840:	000d4505 	.word	0x000d4505
   d4844:	000d442d 	.word	0x000d442d
   d4848:	000d458d 	.word	0x000d458d
   d484c:	000d4e09 	.word	0x000d4e09

000d4850 <_GLOBAL__sub_I__ZN23GoogleMapsDeviceLocatorC2Ev>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d4850:	4b02      	ldr	r3, [pc, #8]	; (d485c <_GLOBAL__sub_I__ZN23GoogleMapsDeviceLocatorC2Ev+0xc>)
   d4852:	2201      	movs	r2, #1
   d4854:	701a      	strb	r2, [r3, #0]
   d4856:	f000 b84d 	b.w	d48f4 <HAL_Pin_Map>
   d485a:	bf00      	nop
   d485c:	2003e27c 	.word	0x2003e27c

000d4860 <_GLOBAL__sub_I_CellularHelper.cpp>:
   d4860:	f000 b848 	b.w	d48f4 <HAL_Pin_Map>

000d4864 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d4864:	b508      	push	{r3, lr}
   d4866:	4b02      	ldr	r3, [pc, #8]	; (d4870 <os_thread_is_current+0xc>)
   d4868:	681b      	ldr	r3, [r3, #0]
   d486a:	689b      	ldr	r3, [r3, #8]
   d486c:	9301      	str	r3, [sp, #4]
   d486e:	bd08      	pop	{r3, pc}
   d4870:	00030248 	.word	0x00030248

000d4874 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d4874:	b508      	push	{r3, lr}
   d4876:	4b02      	ldr	r3, [pc, #8]	; (d4880 <os_thread_join+0xc>)
   d4878:	681b      	ldr	r3, [r3, #0]
   d487a:	691b      	ldr	r3, [r3, #16]
   d487c:	9301      	str	r3, [sp, #4]
   d487e:	bd08      	pop	{r3, pc}
   d4880:	00030248 	.word	0x00030248

000d4884 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d4884:	b508      	push	{r3, lr}
   d4886:	4b02      	ldr	r3, [pc, #8]	; (d4890 <os_thread_cleanup+0xc>)
   d4888:	681b      	ldr	r3, [r3, #0]
   d488a:	695b      	ldr	r3, [r3, #20]
   d488c:	9301      	str	r3, [sp, #4]
   d488e:	bd08      	pop	{r3, pc}
   d4890:	00030248 	.word	0x00030248

000d4894 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4894:	b508      	push	{r3, lr}
   d4896:	4b02      	ldr	r3, [pc, #8]	; (d48a0 <os_mutex_recursive_create+0xc>)
   d4898:	681b      	ldr	r3, [r3, #0]
   d489a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d489c:	9301      	str	r3, [sp, #4]
   d489e:	bd08      	pop	{r3, pc}
   d48a0:	00030248 	.word	0x00030248

000d48a4 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d48a4:	b508      	push	{r3, lr}
   d48a6:	4b02      	ldr	r3, [pc, #8]	; (d48b0 <os_mutex_recursive_destroy+0xc>)
   d48a8:	681b      	ldr	r3, [r3, #0]
   d48aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d48ac:	9301      	str	r3, [sp, #4]
   d48ae:	bd08      	pop	{r3, pc}
   d48b0:	00030248 	.word	0x00030248

000d48b4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d48b4:	b508      	push	{r3, lr}
   d48b6:	4b02      	ldr	r3, [pc, #8]	; (d48c0 <HAL_RNG_GetRandomNumber+0xc>)
   d48b8:	681b      	ldr	r3, [r3, #0]
   d48ba:	685b      	ldr	r3, [r3, #4]
   d48bc:	9301      	str	r3, [sp, #4]
   d48be:	bd08      	pop	{r3, pc}
   d48c0:	00030218 	.word	0x00030218

000d48c4 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d48c4:	b508      	push	{r3, lr}
   d48c6:	4b02      	ldr	r3, [pc, #8]	; (d48d0 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d48c8:	681b      	ldr	r3, [r3, #0]
   d48ca:	695b      	ldr	r3, [r3, #20]
   d48cc:	9301      	str	r3, [sp, #4]
   d48ce:	bd08      	pop	{r3, pc}
   d48d0:	00030218 	.word	0x00030218

000d48d4 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
   d48d4:	b508      	push	{r3, lr}
   d48d6:	4b02      	ldr	r3, [pc, #8]	; (d48e0 <HAL_RTC_Get_UnixTime+0xc>)
   d48d8:	681b      	ldr	r3, [r3, #0]
   d48da:	69db      	ldr	r3, [r3, #28]
   d48dc:	9301      	str	r3, [sp, #4]
   d48de:	bd08      	pop	{r3, pc}
   d48e0:	00030218 	.word	0x00030218

000d48e4 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
   d48e4:	b508      	push	{r3, lr}
   d48e6:	4b02      	ldr	r3, [pc, #8]	; (d48f0 <HAL_RTC_Time_Is_Valid+0xc>)
   d48e8:	681b      	ldr	r3, [r3, #0]
   d48ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d48ec:	9301      	str	r3, [sp, #4]
   d48ee:	bd08      	pop	{r3, pc}
   d48f0:	00030218 	.word	0x00030218

000d48f4 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d48f4:	b508      	push	{r3, lr}
   d48f6:	4b02      	ldr	r3, [pc, #8]	; (d4900 <HAL_Pin_Map+0xc>)
   d48f8:	681b      	ldr	r3, [r3, #0]
   d48fa:	681b      	ldr	r3, [r3, #0]
   d48fc:	9301      	str	r3, [sp, #4]
   d48fe:	bd08      	pop	{r3, pc}
   d4900:	0003022c 	.word	0x0003022c

000d4904 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d4904:	b508      	push	{r3, lr}
   d4906:	4b02      	ldr	r3, [pc, #8]	; (d4910 <HAL_I2C_Begin+0xc>)
   d4908:	681b      	ldr	r3, [r3, #0]
   d490a:	68db      	ldr	r3, [r3, #12]
   d490c:	9301      	str	r3, [sp, #4]
   d490e:	bd08      	pop	{r3, pc}
   d4910:	00030228 	.word	0x00030228

000d4914 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
   d4914:	b508      	push	{r3, lr}
   d4916:	4b02      	ldr	r3, [pc, #8]	; (d4920 <HAL_I2C_Begin_Transmission+0xc>)
   d4918:	681b      	ldr	r3, [r3, #0]
   d491a:	699b      	ldr	r3, [r3, #24]
   d491c:	9301      	str	r3, [sp, #4]
   d491e:	bd08      	pop	{r3, pc}
   d4920:	00030228 	.word	0x00030228

000d4924 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d4924:	b508      	push	{r3, lr}
   d4926:	4b02      	ldr	r3, [pc, #8]	; (d4930 <HAL_I2C_End_Transmission+0xc>)
   d4928:	681b      	ldr	r3, [r3, #0]
   d492a:	69db      	ldr	r3, [r3, #28]
   d492c:	9301      	str	r3, [sp, #4]
   d492e:	bd08      	pop	{r3, pc}
   d4930:	00030228 	.word	0x00030228

000d4934 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d4934:	b508      	push	{r3, lr}
   d4936:	4b02      	ldr	r3, [pc, #8]	; (d4940 <HAL_I2C_Write_Data+0xc>)
   d4938:	681b      	ldr	r3, [r3, #0]
   d493a:	6a1b      	ldr	r3, [r3, #32]
   d493c:	9301      	str	r3, [sp, #4]
   d493e:	bd08      	pop	{r3, pc}
   d4940:	00030228 	.word	0x00030228

000d4944 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d4944:	b508      	push	{r3, lr}
   d4946:	4b02      	ldr	r3, [pc, #8]	; (d4950 <HAL_I2C_Available_Data+0xc>)
   d4948:	681b      	ldr	r3, [r3, #0]
   d494a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d494c:	9301      	str	r3, [sp, #4]
   d494e:	bd08      	pop	{r3, pc}
   d4950:	00030228 	.word	0x00030228

000d4954 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d4954:	b508      	push	{r3, lr}
   d4956:	4b02      	ldr	r3, [pc, #8]	; (d4960 <HAL_I2C_Read_Data+0xc>)
   d4958:	681b      	ldr	r3, [r3, #0]
   d495a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d495c:	9301      	str	r3, [sp, #4]
   d495e:	bd08      	pop	{r3, pc}
   d4960:	00030228 	.word	0x00030228

000d4964 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d4964:	b508      	push	{r3, lr}
   d4966:	4b02      	ldr	r3, [pc, #8]	; (d4970 <HAL_I2C_Peek_Data+0xc>)
   d4968:	681b      	ldr	r3, [r3, #0]
   d496a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d496c:	9301      	str	r3, [sp, #4]
   d496e:	bd08      	pop	{r3, pc}
   d4970:	00030228 	.word	0x00030228

000d4974 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d4974:	b508      	push	{r3, lr}
   d4976:	4b02      	ldr	r3, [pc, #8]	; (d4980 <HAL_I2C_Flush_Data+0xc>)
   d4978:	681b      	ldr	r3, [r3, #0]
   d497a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d497c:	9301      	str	r3, [sp, #4]
   d497e:	bd08      	pop	{r3, pc}
   d4980:	00030228 	.word	0x00030228

000d4984 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d4984:	b508      	push	{r3, lr}
   d4986:	4b02      	ldr	r3, [pc, #8]	; (d4990 <HAL_I2C_Init+0xc>)
   d4988:	681b      	ldr	r3, [r3, #0]
   d498a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d498c:	9301      	str	r3, [sp, #4]
   d498e:	bd08      	pop	{r3, pc}
   d4990:	00030228 	.word	0x00030228

000d4994 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4994:	b508      	push	{r3, lr}
   d4996:	4b02      	ldr	r3, [pc, #8]	; (d49a0 <inet_inet_ntop+0xc>)
   d4998:	681b      	ldr	r3, [r3, #0]
   d499a:	695b      	ldr	r3, [r3, #20]
   d499c:	9301      	str	r3, [sp, #4]
   d499e:	bd08      	pop	{r3, pc}
   d49a0:	00030264 	.word	0x00030264

000d49a4 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d49a4:	b508      	push	{r3, lr}
   d49a6:	4b02      	ldr	r3, [pc, #8]	; (d49b0 <netdb_freeaddrinfo+0xc>)
   d49a8:	681b      	ldr	r3, [r3, #0]
   d49aa:	689b      	ldr	r3, [r3, #8]
   d49ac:	9301      	str	r3, [sp, #4]
   d49ae:	bd08      	pop	{r3, pc}
   d49b0:	00030268 	.word	0x00030268

000d49b4 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d49b4:	b508      	push	{r3, lr}
   d49b6:	4b02      	ldr	r3, [pc, #8]	; (d49c0 <netdb_getaddrinfo+0xc>)
   d49b8:	681b      	ldr	r3, [r3, #0]
   d49ba:	68db      	ldr	r3, [r3, #12]
   d49bc:	9301      	str	r3, [sp, #4]
   d49be:	bd08      	pop	{r3, pc}
   d49c0:	00030268 	.word	0x00030268

000d49c4 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d49c4:	b508      	push	{r3, lr}
   d49c6:	4b02      	ldr	r3, [pc, #8]	; (d49d0 <HAL_USART_Init+0xc>)
   d49c8:	681b      	ldr	r3, [r3, #0]
   d49ca:	681b      	ldr	r3, [r3, #0]
   d49cc:	9301      	str	r3, [sp, #4]
   d49ce:	bd08      	pop	{r3, pc}
   d49d0:	0003023c 	.word	0x0003023c

000d49d4 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d49d4:	b508      	push	{r3, lr}
   d49d6:	4b02      	ldr	r3, [pc, #8]	; (d49e0 <HAL_USART_Write_Data+0xc>)
   d49d8:	681b      	ldr	r3, [r3, #0]
   d49da:	68db      	ldr	r3, [r3, #12]
   d49dc:	9301      	str	r3, [sp, #4]
   d49de:	bd08      	pop	{r3, pc}
   d49e0:	0003023c 	.word	0x0003023c

000d49e4 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d49e4:	b508      	push	{r3, lr}
   d49e6:	4b02      	ldr	r3, [pc, #8]	; (d49f0 <HAL_USART_Available_Data+0xc>)
   d49e8:	681b      	ldr	r3, [r3, #0]
   d49ea:	691b      	ldr	r3, [r3, #16]
   d49ec:	9301      	str	r3, [sp, #4]
   d49ee:	bd08      	pop	{r3, pc}
   d49f0:	0003023c 	.word	0x0003023c

000d49f4 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d49f4:	b508      	push	{r3, lr}
   d49f6:	4b02      	ldr	r3, [pc, #8]	; (d4a00 <HAL_USART_Read_Data+0xc>)
   d49f8:	681b      	ldr	r3, [r3, #0]
   d49fa:	695b      	ldr	r3, [r3, #20]
   d49fc:	9301      	str	r3, [sp, #4]
   d49fe:	bd08      	pop	{r3, pc}
   d4a00:	0003023c 	.word	0x0003023c

000d4a04 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d4a04:	b508      	push	{r3, lr}
   d4a06:	4b02      	ldr	r3, [pc, #8]	; (d4a10 <HAL_USART_Peek_Data+0xc>)
   d4a08:	681b      	ldr	r3, [r3, #0]
   d4a0a:	699b      	ldr	r3, [r3, #24]
   d4a0c:	9301      	str	r3, [sp, #4]
   d4a0e:	bd08      	pop	{r3, pc}
   d4a10:	0003023c 	.word	0x0003023c

000d4a14 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d4a14:	b508      	push	{r3, lr}
   d4a16:	4b02      	ldr	r3, [pc, #8]	; (d4a20 <HAL_USART_Flush_Data+0xc>)
   d4a18:	681b      	ldr	r3, [r3, #0]
   d4a1a:	69db      	ldr	r3, [r3, #28]
   d4a1c:	9301      	str	r3, [sp, #4]
   d4a1e:	bd08      	pop	{r3, pc}
   d4a20:	0003023c 	.word	0x0003023c

000d4a24 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d4a24:	b508      	push	{r3, lr}
   d4a26:	4b02      	ldr	r3, [pc, #8]	; (d4a30 <HAL_USART_Available_Data_For_Write+0xc>)
   d4a28:	681b      	ldr	r3, [r3, #0]
   d4a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4a2c:	9301      	str	r3, [sp, #4]
   d4a2e:	bd08      	pop	{r3, pc}
   d4a30:	0003023c 	.word	0x0003023c

000d4a34 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4a34:	b508      	push	{r3, lr}
   d4a36:	4b02      	ldr	r3, [pc, #8]	; (d4a40 <HAL_USB_USART_Init+0xc>)
   d4a38:	681b      	ldr	r3, [r3, #0]
   d4a3a:	681b      	ldr	r3, [r3, #0]
   d4a3c:	9301      	str	r3, [sp, #4]
   d4a3e:	bd08      	pop	{r3, pc}
   d4a40:	0003024c 	.word	0x0003024c

000d4a44 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d4a44:	b508      	push	{r3, lr}
   d4a46:	4b02      	ldr	r3, [pc, #8]	; (d4a50 <HAL_USB_USART_Begin+0xc>)
   d4a48:	681b      	ldr	r3, [r3, #0]
   d4a4a:	685b      	ldr	r3, [r3, #4]
   d4a4c:	9301      	str	r3, [sp, #4]
   d4a4e:	bd08      	pop	{r3, pc}
   d4a50:	0003024c 	.word	0x0003024c

000d4a54 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4a54:	b508      	push	{r3, lr}
   d4a56:	4b02      	ldr	r3, [pc, #8]	; (d4a60 <HAL_USB_USART_Available_Data+0xc>)
   d4a58:	681b      	ldr	r3, [r3, #0]
   d4a5a:	691b      	ldr	r3, [r3, #16]
   d4a5c:	9301      	str	r3, [sp, #4]
   d4a5e:	bd08      	pop	{r3, pc}
   d4a60:	0003024c 	.word	0x0003024c

000d4a64 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4a64:	b508      	push	{r3, lr}
   d4a66:	4b02      	ldr	r3, [pc, #8]	; (d4a70 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4a68:	681b      	ldr	r3, [r3, #0]
   d4a6a:	695b      	ldr	r3, [r3, #20]
   d4a6c:	9301      	str	r3, [sp, #4]
   d4a6e:	bd08      	pop	{r3, pc}
   d4a70:	0003024c 	.word	0x0003024c

000d4a74 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4a74:	b508      	push	{r3, lr}
   d4a76:	4b02      	ldr	r3, [pc, #8]	; (d4a80 <HAL_USB_USART_Receive_Data+0xc>)
   d4a78:	681b      	ldr	r3, [r3, #0]
   d4a7a:	699b      	ldr	r3, [r3, #24]
   d4a7c:	9301      	str	r3, [sp, #4]
   d4a7e:	bd08      	pop	{r3, pc}
   d4a80:	0003024c 	.word	0x0003024c

000d4a84 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4a84:	b508      	push	{r3, lr}
   d4a86:	4b02      	ldr	r3, [pc, #8]	; (d4a90 <HAL_USB_USART_Send_Data+0xc>)
   d4a88:	681b      	ldr	r3, [r3, #0]
   d4a8a:	69db      	ldr	r3, [r3, #28]
   d4a8c:	9301      	str	r3, [sp, #4]
   d4a8e:	bd08      	pop	{r3, pc}
   d4a90:	0003024c 	.word	0x0003024c

000d4a94 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4a94:	b508      	push	{r3, lr}
   d4a96:	4b02      	ldr	r3, [pc, #8]	; (d4aa0 <HAL_USB_USART_Flush_Data+0xc>)
   d4a98:	681b      	ldr	r3, [r3, #0]
   d4a9a:	6a1b      	ldr	r3, [r3, #32]
   d4a9c:	9301      	str	r3, [sp, #4]
   d4a9e:	bd08      	pop	{r3, pc}
   d4aa0:	0003024c 	.word	0x0003024c

000d4aa4 <wlan_scan>:
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
DYNALIB_FN(19, hal_wlan, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(20, hal_wlan, wlan_select_antenna, int(WLanSelectAntenna_TypeDef))
DYNALIB_FN(21, hal_wlan, wlan_set_ipaddress, void(const HAL_IPAddress*, const HAL_IPAddress*, const HAL_IPAddress*, const HAL_IPAddress*, const HAL_IPAddress*, void*))
DYNALIB_FN(22, hal_wlan, wlan_set_ipaddress_source, void(IPAddressSource, bool, void*))
DYNALIB_FN(23, hal_wlan, wlan_scan, int(wlan_scan_result_t, void*))
   d4aa4:	b508      	push	{r3, lr}
   d4aa6:	4b02      	ldr	r3, [pc, #8]	; (d4ab0 <wlan_scan+0xc>)
   d4aa8:	681b      	ldr	r3, [r3, #0]
   d4aaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d4aac:	9301      	str	r3, [sp, #4]
   d4aae:	bd08      	pop	{r3, pc}
   d4ab0:	00030274 	.word	0x00030274

000d4ab4 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d4ab4:	b508      	push	{r3, lr}
   d4ab6:	4b02      	ldr	r3, [pc, #8]	; (d4ac0 <system_mode+0xc>)
   d4ab8:	681b      	ldr	r3, [r3, #0]
   d4aba:	681b      	ldr	r3, [r3, #0]
   d4abc:	9301      	str	r3, [sp, #4]
   d4abe:	bd08      	pop	{r3, pc}
   d4ac0:	00030220 	.word	0x00030220

000d4ac4 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4ac4:	b508      	push	{r3, lr}
   d4ac6:	4b02      	ldr	r3, [pc, #8]	; (d4ad0 <set_system_mode+0xc>)
   d4ac8:	681b      	ldr	r3, [r3, #0]
   d4aca:	685b      	ldr	r3, [r3, #4]
   d4acc:	9301      	str	r3, [sp, #4]
   d4ace:	bd08      	pop	{r3, pc}
   d4ad0:	00030220 	.word	0x00030220

000d4ad4 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d4ad4:	b508      	push	{r3, lr}
   d4ad6:	4b02      	ldr	r3, [pc, #8]	; (d4ae0 <system_delay_ms+0xc>)
   d4ad8:	681b      	ldr	r3, [r3, #0]
   d4ada:	695b      	ldr	r3, [r3, #20]
   d4adc:	9301      	str	r3, [sp, #4]
   d4ade:	bd08      	pop	{r3, pc}
   d4ae0:	00030220 	.word	0x00030220

000d4ae4 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d4ae4:	b508      	push	{r3, lr}
   d4ae6:	4b02      	ldr	r3, [pc, #8]	; (d4af0 <application_thread_current+0xc>)
   d4ae8:	681b      	ldr	r3, [r3, #0]
   d4aea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d4aec:	9301      	str	r3, [sp, #4]
   d4aee:	bd08      	pop	{r3, pc}
   d4af0:	00030220 	.word	0x00030220

000d4af4 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d4af4:	b508      	push	{r3, lr}
   d4af6:	4b02      	ldr	r3, [pc, #8]	; (d4b00 <application_thread_invoke+0xc>)
   d4af8:	681b      	ldr	r3, [r3, #0]
   d4afa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4afc:	9301      	str	r3, [sp, #4]
   d4afe:	bd08      	pop	{r3, pc}
   d4b00:	00030220 	.word	0x00030220

000d4b04 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d4b04:	b508      	push	{r3, lr}
   d4b06:	4b02      	ldr	r3, [pc, #8]	; (d4b10 <system_thread_get_state+0xc>)
   d4b08:	681b      	ldr	r3, [r3, #0]
   d4b0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d4b0c:	9301      	str	r3, [sp, #4]
   d4b0e:	bd08      	pop	{r3, pc}
   d4b10:	00030220 	.word	0x00030220

000d4b14 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4b14:	b508      	push	{r3, lr}
   d4b16:	4b03      	ldr	r3, [pc, #12]	; (d4b24 <system_ctrl_set_app_request_handler+0x10>)
   d4b18:	681b      	ldr	r3, [r3, #0]
   d4b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d4b1e:	9301      	str	r3, [sp, #4]
   d4b20:	bd08      	pop	{r3, pc}
   d4b22:	0000      	.short	0x0000
   d4b24:	00030220 	.word	0x00030220

000d4b28 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4b28:	b508      	push	{r3, lr}
   d4b2a:	4b03      	ldr	r3, [pc, #12]	; (d4b38 <system_ctrl_set_result+0x10>)
   d4b2c:	681b      	ldr	r3, [r3, #0]
   d4b2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4b32:	9301      	str	r3, [sp, #4]
   d4b34:	bd08      	pop	{r3, pc}
   d4b36:	0000      	.short	0x0000
   d4b38:	00030220 	.word	0x00030220

000d4b3c <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d4b3c:	b508      	push	{r3, lr}
   d4b3e:	4b02      	ldr	r3, [pc, #8]	; (d4b48 <spark_process+0xc>)
   d4b40:	681b      	ldr	r3, [r3, #0]
   d4b42:	689b      	ldr	r3, [r3, #8]
   d4b44:	9301      	str	r3, [sp, #4]
   d4b46:	bd08      	pop	{r3, pc}
   d4b48:	00030244 	.word	0x00030244

000d4b4c <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d4b4c:	b508      	push	{r3, lr}
   d4b4e:	4b02      	ldr	r3, [pc, #8]	; (d4b58 <spark_cloud_flag_connected+0xc>)
   d4b50:	681b      	ldr	r3, [r3, #0]
   d4b52:	695b      	ldr	r3, [r3, #20]
   d4b54:	9301      	str	r3, [sp, #4]
   d4b56:	bd08      	pop	{r3, pc}
   d4b58:	00030244 	.word	0x00030244

000d4b5c <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   d4b5c:	b508      	push	{r3, lr}
   d4b5e:	4b02      	ldr	r3, [pc, #8]	; (d4b68 <spark_deviceID+0xc>)
   d4b60:	681b      	ldr	r3, [r3, #0]
   d4b62:	69db      	ldr	r3, [r3, #28]
   d4b64:	9301      	str	r3, [sp, #4]
   d4b66:	bd08      	pop	{r3, pc}
   d4b68:	00030244 	.word	0x00030244

000d4b6c <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d4b6c:	b508      	push	{r3, lr}
   d4b6e:	4b02      	ldr	r3, [pc, #8]	; (d4b78 <spark_send_event+0xc>)
   d4b70:	681b      	ldr	r3, [r3, #0]
   d4b72:	6a1b      	ldr	r3, [r3, #32]
   d4b74:	9301      	str	r3, [sp, #4]
   d4b76:	bd08      	pop	{r3, pc}
   d4b78:	00030244 	.word	0x00030244

000d4b7c <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   d4b7c:	b508      	push	{r3, lr}
   d4b7e:	4b02      	ldr	r3, [pc, #8]	; (d4b88 <spark_subscribe+0xc>)
   d4b80:	681b      	ldr	r3, [r3, #0]
   d4b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4b84:	9301      	str	r3, [sp, #4]
   d4b86:	bd08      	pop	{r3, pc}
   d4b88:	00030244 	.word	0x00030244

000d4b8c <spark_sync_time_pending>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d4b8c:	b508      	push	{r3, lr}
   d4b8e:	4b02      	ldr	r3, [pc, #8]	; (d4b98 <spark_sync_time_pending+0xc>)
   d4b90:	681b      	ldr	r3, [r3, #0]
   d4b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4b94:	9301      	str	r3, [sp, #4]
   d4b96:	bd08      	pop	{r3, pc}
   d4b98:	00030244 	.word	0x00030244

000d4b9c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4b9c:	b508      	push	{r3, lr}
   d4b9e:	4b02      	ldr	r3, [pc, #8]	; (d4ba8 <spark_set_random_seed_from_cloud_handler+0xc>)
   d4ba0:	681b      	ldr	r3, [r3, #0]
   d4ba2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4ba4:	9301      	str	r3, [sp, #4]
   d4ba6:	bd08      	pop	{r3, pc}
   d4ba8:	00030244 	.word	0x00030244

000d4bac <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4bac:	b508      	push	{r3, lr}
   d4bae:	4b02      	ldr	r3, [pc, #8]	; (d4bb8 <network_connect+0xc>)
   d4bb0:	681b      	ldr	r3, [r3, #0]
   d4bb2:	685b      	ldr	r3, [r3, #4]
   d4bb4:	9301      	str	r3, [sp, #4]
   d4bb6:	bd08      	pop	{r3, pc}
   d4bb8:	00030240 	.word	0x00030240

000d4bbc <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4bbc:	b508      	push	{r3, lr}
   d4bbe:	4b02      	ldr	r3, [pc, #8]	; (d4bc8 <network_connecting+0xc>)
   d4bc0:	681b      	ldr	r3, [r3, #0]
   d4bc2:	689b      	ldr	r3, [r3, #8]
   d4bc4:	9301      	str	r3, [sp, #4]
   d4bc6:	bd08      	pop	{r3, pc}
   d4bc8:	00030240 	.word	0x00030240

000d4bcc <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4bcc:	b508      	push	{r3, lr}
   d4bce:	4b02      	ldr	r3, [pc, #8]	; (d4bd8 <network_disconnect+0xc>)
   d4bd0:	681b      	ldr	r3, [r3, #0]
   d4bd2:	68db      	ldr	r3, [r3, #12]
   d4bd4:	9301      	str	r3, [sp, #4]
   d4bd6:	bd08      	pop	{r3, pc}
   d4bd8:	00030240 	.word	0x00030240

000d4bdc <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4bdc:	b508      	push	{r3, lr}
   d4bde:	4b02      	ldr	r3, [pc, #8]	; (d4be8 <network_ready+0xc>)
   d4be0:	681b      	ldr	r3, [r3, #0]
   d4be2:	691b      	ldr	r3, [r3, #16]
   d4be4:	9301      	str	r3, [sp, #4]
   d4be6:	bd08      	pop	{r3, pc}
   d4be8:	00030240 	.word	0x00030240

000d4bec <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4bec:	b508      	push	{r3, lr}
   d4bee:	4b02      	ldr	r3, [pc, #8]	; (d4bf8 <network_on+0xc>)
   d4bf0:	681b      	ldr	r3, [r3, #0]
   d4bf2:	695b      	ldr	r3, [r3, #20]
   d4bf4:	9301      	str	r3, [sp, #4]
   d4bf6:	bd08      	pop	{r3, pc}
   d4bf8:	00030240 	.word	0x00030240

000d4bfc <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4bfc:	b508      	push	{r3, lr}
   d4bfe:	4b02      	ldr	r3, [pc, #8]	; (d4c08 <network_off+0xc>)
   d4c00:	681b      	ldr	r3, [r3, #0]
   d4c02:	699b      	ldr	r3, [r3, #24]
   d4c04:	9301      	str	r3, [sp, #4]
   d4c06:	bd08      	pop	{r3, pc}
   d4c08:	00030240 	.word	0x00030240

000d4c0c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4c0c:	b508      	push	{r3, lr}
   d4c0e:	4b02      	ldr	r3, [pc, #8]	; (d4c18 <network_listen+0xc>)
   d4c10:	681b      	ldr	r3, [r3, #0]
   d4c12:	69db      	ldr	r3, [r3, #28]
   d4c14:	9301      	str	r3, [sp, #4]
   d4c16:	bd08      	pop	{r3, pc}
   d4c18:	00030240 	.word	0x00030240

000d4c1c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4c1c:	b508      	push	{r3, lr}
   d4c1e:	4b02      	ldr	r3, [pc, #8]	; (d4c28 <network_listening+0xc>)
   d4c20:	681b      	ldr	r3, [r3, #0]
   d4c22:	6a1b      	ldr	r3, [r3, #32]
   d4c24:	9301      	str	r3, [sp, #4]
   d4c26:	bd08      	pop	{r3, pc}
   d4c28:	00030240 	.word	0x00030240

000d4c2c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4c2c:	b508      	push	{r3, lr}
   d4c2e:	4b02      	ldr	r3, [pc, #8]	; (d4c38 <network_set_listen_timeout+0xc>)
   d4c30:	681b      	ldr	r3, [r3, #0]
   d4c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4c34:	9301      	str	r3, [sp, #4]
   d4c36:	bd08      	pop	{r3, pc}
   d4c38:	00030240 	.word	0x00030240

000d4c3c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4c3c:	b508      	push	{r3, lr}
   d4c3e:	4b02      	ldr	r3, [pc, #8]	; (d4c48 <network_get_listen_timeout+0xc>)
   d4c40:	681b      	ldr	r3, [r3, #0]
   d4c42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4c44:	9301      	str	r3, [sp, #4]
   d4c46:	bd08      	pop	{r3, pc}
   d4c48:	00030240 	.word	0x00030240

000d4c4c <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4c4c:	b508      	push	{r3, lr}
   d4c4e:	4b02      	ldr	r3, [pc, #8]	; (d4c58 <malloc+0xc>)
   d4c50:	681b      	ldr	r3, [r3, #0]
   d4c52:	681b      	ldr	r3, [r3, #0]
   d4c54:	9301      	str	r3, [sp, #4]
   d4c56:	bd08      	pop	{r3, pc}
   d4c58:	0003021c 	.word	0x0003021c

000d4c5c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4c5c:	b508      	push	{r3, lr}
   d4c5e:	4b02      	ldr	r3, [pc, #8]	; (d4c68 <free+0xc>)
   d4c60:	681b      	ldr	r3, [r3, #0]
   d4c62:	685b      	ldr	r3, [r3, #4]
   d4c64:	9301      	str	r3, [sp, #4]
   d4c66:	bd08      	pop	{r3, pc}
   d4c68:	0003021c 	.word	0x0003021c

000d4c6c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d4c6c:	b508      	push	{r3, lr}
   d4c6e:	4b02      	ldr	r3, [pc, #8]	; (d4c78 <realloc+0xc>)
   d4c70:	681b      	ldr	r3, [r3, #0]
   d4c72:	689b      	ldr	r3, [r3, #8]
   d4c74:	9301      	str	r3, [sp, #4]
   d4c76:	bd08      	pop	{r3, pc}
   d4c78:	0003021c 	.word	0x0003021c

000d4c7c <siscanf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
   d4c7c:	b508      	push	{r3, lr}
   d4c7e:	4b02      	ldr	r3, [pc, #8]	; (d4c88 <siscanf+0xc>)
   d4c80:	681b      	ldr	r3, [r3, #0]
   d4c82:	699b      	ldr	r3, [r3, #24]
   d4c84:	9301      	str	r3, [sp, #4]
   d4c86:	bd08      	pop	{r3, pc}
   d4c88:	0003021c 	.word	0x0003021c

000d4c8c <snprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d4c8c:	b508      	push	{r3, lr}
   d4c8e:	4b02      	ldr	r3, [pc, #8]	; (d4c98 <snprintf+0xc>)
   d4c90:	681b      	ldr	r3, [r3, #0]
   d4c92:	69db      	ldr	r3, [r3, #28]
   d4c94:	9301      	str	r3, [sp, #4]
   d4c96:	bd08      	pop	{r3, pc}
   d4c98:	0003021c 	.word	0x0003021c

000d4c9c <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d4c9c:	b508      	push	{r3, lr}
   d4c9e:	4b02      	ldr	r3, [pc, #8]	; (d4ca8 <vsnprintf+0xc>)
   d4ca0:	681b      	ldr	r3, [r3, #0]
   d4ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4ca4:	9301      	str	r3, [sp, #4]
   d4ca6:	bd08      	pop	{r3, pc}
   d4ca8:	0003021c 	.word	0x0003021c

000d4cac <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d4cac:	b508      	push	{r3, lr}
   d4cae:	4b02      	ldr	r3, [pc, #8]	; (d4cb8 <abort+0xc>)
   d4cb0:	681b      	ldr	r3, [r3, #0]
   d4cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4cb4:	9301      	str	r3, [sp, #4]
   d4cb6:	bd08      	pop	{r3, pc}
   d4cb8:	0003021c 	.word	0x0003021c

000d4cbc <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d4cbc:	b508      	push	{r3, lr}
   d4cbe:	4b02      	ldr	r3, [pc, #8]	; (d4cc8 <_malloc_r+0xc>)
   d4cc0:	681b      	ldr	r3, [r3, #0]
   d4cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4cc4:	9301      	str	r3, [sp, #4]
   d4cc6:	bd08      	pop	{r3, pc}
   d4cc8:	0003021c 	.word	0x0003021c

000d4ccc <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d4ccc:	2100      	movs	r1, #0
   d4cce:	f7ff bf01 	b.w	d4ad4 <system_delay_ms>

000d4cd2 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d4cd2:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4cd4:	6883      	ldr	r3, [r0, #8]
   d4cd6:	4604      	mov	r4, r0
   d4cd8:	b90b      	cbnz	r3, d4cde <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d4cda:	f001 f9b8 	bl	d604e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4cde:	68c3      	ldr	r3, [r0, #12]
   d4ce0:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d4ce2:	68a3      	ldr	r3, [r4, #8]
   d4ce4:	b11b      	cbz	r3, d4cee <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4ce6:	2203      	movs	r2, #3
   d4ce8:	4621      	mov	r1, r4
   d4cea:	4620      	mov	r0, r4
   d4cec:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d4cee:	4620      	mov	r0, r4
   d4cf0:	2110      	movs	r1, #16
}
   d4cf2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d4cf6:	f001 b98e 	b.w	d6016 <_ZdlPvj>

000d4cfa <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d4cfa:	b510      	push	{r4, lr}
   d4cfc:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d4cfe:	6800      	ldr	r0, [r0, #0]
   d4d00:	b108      	cbz	r0, d4d06 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d4d02:	f7ff fdcf 	bl	d48a4 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d4d06:	4620      	mov	r0, r4
   d4d08:	bd10      	pop	{r4, pc}

000d4d0a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d4d0a:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d4d0c:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d4d0e:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d4d10:	689b      	ldr	r3, [r3, #8]
   d4d12:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4d14:	68a3      	ldr	r3, [r4, #8]
   d4d16:	3b01      	subs	r3, #1
   d4d18:	60a3      	str	r3, [r4, #8]
   d4d1a:	b92b      	cbnz	r3, d4d28 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112+0x1e>
            _M_destroy();
   d4d1c:	6823      	ldr	r3, [r4, #0]
   d4d1e:	4620      	mov	r0, r4
   d4d20:	68db      	ldr	r3, [r3, #12]
        }
    }
   d4d22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d4d26:	4718      	bx	r3
   d4d28:	bd10      	pop	{r4, pc}

000d4d2a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d4d2a:	680b      	ldr	r3, [r1, #0]
   d4d2c:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d4d2e:	b113      	cbz	r3, d4d36 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d4d30:	685a      	ldr	r2, [r3, #4]
   d4d32:	3201      	adds	r2, #1
   d4d34:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d4d36:	4770      	bx	lr

000d4d38 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4d38:	b510      	push	{r4, lr}
   d4d3a:	4604      	mov	r4, r0
      {
	if (_M_pi != nullptr)
   d4d3c:	6800      	ldr	r0, [r0, #0]
   d4d3e:	b128      	cbz	r0, d4d4c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d4d40:	6843      	ldr	r3, [r0, #4]
   d4d42:	3b01      	subs	r3, #1
   d4d44:	6043      	str	r3, [r0, #4]
   d4d46:	b90b      	cbnz	r3, d4d4c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d4d48:	f7ff ffdf 	bl	d4d0a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d4d4c:	4620      	mov	r0, r4
   d4d4e:	bd10      	pop	{r4, pc}

000d4d50 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d4d50:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4d52:	4c06      	ldr	r4, [pc, #24]	; (d4d6c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d4d54:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d4d56:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4d58:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d4d5a:	f7ff fd9b 	bl	d4894 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d4d5e:	4620      	mov	r0, r4
   d4d60:	4a03      	ldr	r2, [pc, #12]	; (d4d70 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d4d62:	4904      	ldr	r1, [pc, #16]	; (d4d74 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d4d64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d4d68:	f001 b950 	b.w	d600c <__aeabi_atexit>
   d4d6c:	2003e384 	.word	0x2003e384
   d4d70:	2003e220 	.word	0x2003e220
   d4d74:	000d4cfb 	.word	0x000d4cfb

000d4d78 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d4d78:	4770      	bx	lr

000d4d7a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d4d7a:	2000      	movs	r0, #0
   d4d7c:	4770      	bx	lr

000d4d7e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d4d7e:	b510      	push	{r4, lr}
   d4d80:	2110      	movs	r1, #16
   d4d82:	4604      	mov	r4, r0
   d4d84:	f001 f947 	bl	d6016 <_ZdlPvj>
   d4d88:	4620      	mov	r0, r4
   d4d8a:	bd10      	pop	{r4, pc}

000d4d8c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d4d8c:	b508      	push	{r3, lr}
      { delete this; }
   d4d8e:	b108      	cbz	r0, d4d94 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d4d90:	f7ff fff5 	bl	d4d7e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d4d94:	bd08      	pop	{r3, pc}

000d4d96 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d4d96:	2200      	movs	r2, #0
   d4d98:	6002      	str	r2, [r0, #0]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d4d9a:	b510      	push	{r4, lr}

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d4d9c:	f64f 729c 	movw	r2, #65436	; 0xff9c
   d4da0:	8082      	strh	r2, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d4da2:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
   d4da6:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d4da8:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4daa:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d4dac:	680c      	ldr	r4, [r1, #0]
   d4dae:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d4db0:	600a      	str	r2, [r1, #0]
}

inline particle::Error::Error(Error&& error) :
        Error() {
    swap(*this, error);
}
   d4db2:	bd10      	pop	{r4, pc}

000d4db4 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d4db4:	b510      	push	{r4, lr}
   d4db6:	4604      	mov	r4, r0
    free((void*)msg_);
   d4db8:	6800      	ldr	r0, [r0, #0]
   d4dba:	f7ff ff4f 	bl	d4c5c <free>
}
   d4dbe:	4620      	mov	r0, r4
   d4dc0:	bd10      	pop	{r4, pc}

000d4dc2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d4dc2:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d4dc4:	68c4      	ldr	r4, [r0, #12]
   d4dc6:	b1f4      	cbz	r4, d4e06 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d4dc8:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d4dca:	2b02      	cmp	r3, #2
   d4dcc:	d103      	bne.n	d4dd6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d4dce:	f104 000c 	add.w	r0, r4, #12
   d4dd2:	f7ff ffef 	bl	d4db4 <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d4dd6:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d4dd8:	b135      	cbz	r5, d4de8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4dda:	4628      	mov	r0, r5
   d4ddc:	f7ff fbf2 	bl	d45c4 <_ZNSt14_Function_baseD1Ev>
   d4de0:	2110      	movs	r1, #16
   d4de2:	4628      	mov	r0, r5
   d4de4:	f001 f917 	bl	d6016 <_ZdlPvj>
   d4de8:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d4dea:	b135      	cbz	r5, d4dfa <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d4dec:	4628      	mov	r0, r5
   d4dee:	f7ff fbe9 	bl	d45c4 <_ZNSt14_Function_baseD1Ev>
   d4df2:	2110      	movs	r1, #16
   d4df4:	4628      	mov	r0, r5
   d4df6:	f001 f90e 	bl	d6016 <_ZdlPvj>
   d4dfa:	4620      	mov	r0, r4
   d4dfc:	2114      	movs	r1, #20
   d4dfe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d4e02:	f001 b908 	b.w	d6016 <_ZdlPvj>
   d4e06:	bd38      	pop	{r3, r4, r5, pc}

000d4e08 <_ZN10CloudClass25call_wiring_event_handlerEPKvPKcS3_>:
    user_std_function_int_str_t* fn = (user_std_function_int_str_t*)(data);
    return (*fn)(String(param));
}

void CloudClass::call_wiring_event_handler(const void* handler_data, const char *event_name, const char *data)
{
   d4e08:	b507      	push	{r0, r1, r2, lr}
   d4e0a:	e88d 0006 	stmia.w	sp, {r1, r2}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4e0e:	6882      	ldr	r2, [r0, #8]
   d4e10:	b90a      	cbnz	r2, d4e16 <_ZN10CloudClass25call_wiring_event_handlerEPKvPKcS3_+0xe>
	__throw_bad_function_call();
   d4e12:	f001 f91c 	bl	d604e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4e16:	68c3      	ldr	r3, [r0, #12]
   d4e18:	aa01      	add	r2, sp, #4
   d4e1a:	4669      	mov	r1, sp
   d4e1c:	4798      	blx	r3
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}
   d4e1e:	b003      	add	sp, #12
   d4e20:	f85d fb04 	ldr.w	pc, [sp], #4

000d4e24 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d4e24:	b513      	push	{r0, r1, r4, lr}
   d4e26:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d4e28:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d4e2c:	2300      	movs	r3, #0
   d4e2e:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d4e30:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d4e32:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d4e34:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4e36:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d4e38:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d4e3a:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4e3c:	f7ff ff7c 	bl	d4d38 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4e40:	4620      	mov	r0, r4
   d4e42:	b002      	add	sp, #8
   d4e44:	bd10      	pop	{r4, pc}

000d4e46 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d4e46:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4e48:	460c      	mov	r4, r1
   d4e4a:	ad02      	add	r5, sp, #8
   d4e4c:	f854 3b04 	ldr.w	r3, [r4], #4
   d4e50:	f845 3d08 	str.w	r3, [r5, #-8]!
   d4e54:	4606      	mov	r6, r0
   d4e56:	460f      	mov	r7, r1
   d4e58:	a801      	add	r0, sp, #4
   d4e5a:	4621      	mov	r1, r4
   d4e5c:	f7ff ff65 	bl	d4d2a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d4e60:	4629      	mov	r1, r5
   d4e62:	4630      	mov	r0, r6
   d4e64:	f7ff ffde 	bl	d4e24 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4e68:	a801      	add	r0, sp, #4
   d4e6a:	f7ff ff65 	bl	d4d38 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4e6e:	4620      	mov	r0, r4
   d4e70:	f7ff ff62 	bl	d4d38 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d4e74:	4638      	mov	r0, r7
   d4e76:	2108      	movs	r1, #8
   d4e78:	f001 f8cd 	bl	d6016 <_ZdlPvj>
        return p;
    }
   d4e7c:	4630      	mov	r0, r6
   d4e7e:	b003      	add	sp, #12
   d4e80:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4e82 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d4e82:	b513      	push	{r0, r1, r4, lr}
   d4e84:	460b      	mov	r3, r1
   d4e86:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4e88:	c803      	ldmia	r0, {r0, r1}
   d4e8a:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d4e8e:	e893 0003 	ldmia.w	r3, {r0, r1}
   d4e92:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d4e96:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d4e9a:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d4e9e:	b002      	add	sp, #8
   d4ea0:	bd10      	pop	{r4, pc}
	...

000d4ea4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d4ea4:	b538      	push	{r3, r4, r5, lr}
   d4ea6:	2300      	movs	r3, #0
   d4ea8:	4604      	mov	r4, r0
   d4eaa:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d4eac:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d4eae:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d4eb0:	f7ff f8f3 	bl	d409a <_Znwj>
   d4eb4:	b128      	cbz	r0, d4ec2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d4eb6:	2301      	movs	r3, #1
   d4eb8:	6043      	str	r3, [r0, #4]
   d4eba:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d4ebc:	4b02      	ldr	r3, [pc, #8]	; (d4ec8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d4ebe:	6003      	str	r3, [r0, #0]
   d4ec0:	60c5      	str	r5, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d4ec2:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
   d4ec4:	4620      	mov	r0, r4
   d4ec6:	bd38      	pop	{r3, r4, r5, pc}
   d4ec8:	000d95ac 	.word	0x000d95ac

000d4ecc <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4ecc:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d4ece:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4ed0:	b90a      	cbnz	r2, d4ed6 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d4ed2:	f001 f8bc 	bl	d604e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4ed6:	68c3      	ldr	r3, [r0, #12]
    }
   d4ed8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4edc:	4718      	bx	r3

000d4ede <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d4ede:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d4ee0:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d4ee2:	f100 0110 	add.w	r1, r0, #16
   d4ee6:	f7ff fff1 	bl	d4ecc <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d4eea:	bd08      	pop	{r3, pc}

000d4eec <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4eec:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d4eee:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4ef0:	b90a      	cbnz	r2, d4ef6 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d4ef2:	f001 f8ac 	bl	d604e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4ef6:	68c3      	ldr	r3, [r0, #12]
    }
   d4ef8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4efc:	4718      	bx	r3

000d4efe <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d4efe:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d4f00:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d4f02:	f100 0110 	add.w	r1, r0, #16
   d4f06:	f7ff fff1 	bl	d4eec <_ZNKSt8functionIFvRKbEEclES1_>
   d4f0a:	bd08      	pop	{r3, pc}

000d4f0c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d4f0c:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4f0e:	2300      	movs	r3, #0
   d4f10:	6083      	str	r3, [r0, #8]
   d4f12:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d4f14:	4604      	mov	r4, r0
   d4f16:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d4f18:	b12b      	cbz	r3, d4f26 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d4f1a:	2202      	movs	r2, #2
   d4f1c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d4f1e:	68eb      	ldr	r3, [r5, #12]
   d4f20:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d4f22:	68ab      	ldr	r3, [r5, #8]
   d4f24:	60a3      	str	r3, [r4, #8]
	}
    }
   d4f26:	4620      	mov	r0, r4
   d4f28:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4f2c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d4f2c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4f2e:	b089      	sub	sp, #36	; 0x24
   d4f30:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d4f32:	4668      	mov	r0, sp
   d4f34:	f7ff ff2f 	bl	d4d96 <_ZN8particle5ErrorC1EOS0_>
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d4f38:	2300      	movs	r3, #0
   d4f3a:	f88d 3008 	strb.w	r3, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d4f3e:	f04f 0202 	mov.w	r2, #2
   d4f42:	e8d4 3f4f 	ldrexb	r3, [r4]
   d4f46:	2b00      	cmp	r3, #0
   d4f48:	d103      	bne.n	d4f52 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
   d4f4a:	e8c4 2f41 	strexb	r1, r2, [r4]
   d4f4e:	2900      	cmp	r1, #0
   d4f50:	d1f7      	bne.n	d4f42 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
   d4f52:	d002      	beq.n	d4f5a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
   d4f54:	f88d 3008 	strb.w	r3, [sp, #8]
   d4f58:	e063      	b.n	d5022 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d4f5a:	f114 050c 	adds.w	r5, r4, #12
   d4f5e:	d003      	beq.n	d4f68 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
   d4f60:	4669      	mov	r1, sp
   d4f62:	4628      	mov	r0, r5
   d4f64:	f7ff ff17 	bl	d4d96 <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d4f68:	f3bf 8f5f 	dmb	sy
   d4f6c:	2301      	movs	r3, #1
   d4f6e:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d4f70:	2000      	movs	r0, #0
   d4f72:	f104 0308 	add.w	r3, r4, #8
   d4f76:	f3bf 8f5f 	dmb	sy
   d4f7a:	e853 6f00 	ldrex	r6, [r3]
   d4f7e:	e843 0200 	strex	r2, r0, [r3]
   d4f82:	2a00      	cmp	r2, #0
   d4f84:	d1f9      	bne.n	d4f7a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
   d4f86:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d4f8a:	2e00      	cmp	r6, #0
   d4f8c:	d049      	beq.n	d5022 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d4f8e:	f7ff fda9 	bl	d4ae4 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d4f92:	b120      	cbz	r0, d4f9e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d4f94:	4629      	mov	r1, r5
   d4f96:	4630      	mov	r0, r6
   d4f98:	f7ff ff98 	bl	d4ecc <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d4f9c:	e03a      	b.n	d5014 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d4f9e:	4631      	mov	r1, r6
   d4fa0:	a802      	add	r0, sp, #8
   d4fa2:	f7ff ffb3 	bl	d4f0c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d4fa6:	68e0      	ldr	r0, [r4, #12]
   d4fa8:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d4fac:	b108      	cbz	r0, d4fb2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
   d4fae:	f001 ffdf 	bl	d6f70 <strdup>
   d4fb2:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d4fb4:	2010      	movs	r0, #16
   d4fb6:	f8ad 501c 	strh.w	r5, [sp, #28]
   d4fba:	f7ff f86e 	bl	d409a <_Znwj>
   d4fbe:	4605      	mov	r5, r0
   d4fc0:	b1e8      	cbz	r0, d4ffe <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4fc2:	2700      	movs	r7, #0
   d4fc4:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4fc6:	2018      	movs	r0, #24
   d4fc8:	f7ff f867 	bl	d409a <_Znwj>
   d4fcc:	4604      	mov	r4, r0
   d4fce:	b188      	cbz	r0, d4ff4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d4fd0:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4fd2:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d4fd4:	a802      	add	r0, sp, #8
   d4fd6:	f7ff ff54 	bl	d4e82 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4fda:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d4fdc:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d4fde:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4fe0:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d4fe2:	9204      	str	r2, [sp, #16]
   d4fe4:	a906      	add	r1, sp, #24
   d4fe6:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d4fe8:	60e3      	str	r3, [r4, #12]
   d4fea:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d4fee:	9205      	str	r2, [sp, #20]
   d4ff0:	f7ff fed1 	bl	d4d96 <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d4ff4:	4b0d      	ldr	r3, [pc, #52]	; (d502c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
   d4ff6:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d4ff8:	4b0d      	ldr	r3, [pc, #52]	; (d5030 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4ffa:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d4ffc:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
   d4ffe:	a806      	add	r0, sp, #24
   d5000:	f7ff fed8 	bl	d4db4 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5004:	a802      	add	r0, sp, #8
   d5006:	f7ff fadd 	bl	d45c4 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d500a:	2200      	movs	r2, #0
   d500c:	4629      	mov	r1, r5
   d500e:	4809      	ldr	r0, [pc, #36]	; (d5034 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
   d5010:	f7ff fd70 	bl	d4af4 <application_thread_invoke>
   d5014:	4630      	mov	r0, r6
   d5016:	f7ff fad5 	bl	d45c4 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d501a:	2110      	movs	r1, #16
   d501c:	4630      	mov	r0, r6
   d501e:	f000 fffa 	bl	d6016 <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
   d5022:	4668      	mov	r0, sp
   d5024:	f7ff fec6 	bl	d4db4 <_ZN8particle5ErrorD1Ev>
    }
   d5028:	b009      	add	sp, #36	; 0x24
   d502a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d502c:	000d4edf 	.word	0x000d4edf
   d5030:	000d5155 	.word	0x000d5155
   d5034:	000d4cd3 	.word	0x000d4cd3

000d5038 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d5038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d503c:	b08b      	sub	sp, #44	; 0x2c
   d503e:	4606      	mov	r6, r0
   d5040:	460f      	mov	r7, r1
   d5042:	4690      	mov	r8, r2
   d5044:	4699      	mov	r9, r3
   d5046:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d504a:	f7ff fd7f 	bl	d4b4c <spark_cloud_flag_connected>
   d504e:	ad07      	add	r5, sp, #28
    if (!connected()) {
   d5050:	4683      	mov	fp, r0
   d5052:	bb30      	cbnz	r0, d50a2 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d5054:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d5058:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d505a:	a905      	add	r1, sp, #20
   d505c:	4628      	mov	r0, r5
   d505e:	f8ad 3018 	strh.w	r3, [sp, #24]
   d5062:	f7ff fe98 	bl	d4d96 <_ZN8particle5ErrorC1EOS0_>
   d5066:	2014      	movs	r0, #20
   d5068:	f7ff f817 	bl	d409a <_Znwj>
   d506c:	4604      	mov	r4, r0
   d506e:	b158      	cbz	r0, d5088 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d5070:	2302      	movs	r3, #2
   d5072:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5074:	2301      	movs	r3, #1
   d5076:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d5078:	f8c0 b004 	str.w	fp, [r0, #4]
   d507c:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
   d5080:	4629      	mov	r1, r5
   d5082:	300c      	adds	r0, #12
   d5084:	f7ff fe87 	bl	d4d96 <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d5088:	4630      	mov	r0, r6
   d508a:	4621      	mov	r1, r4
   d508c:	f840 4b04 	str.w	r4, [r0], #4
   d5090:	f7ff ff08 	bl	d4ea4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d5094:	4628      	mov	r0, r5
   d5096:	f7ff fe8d 	bl	d4db4 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d509a:	a805      	add	r0, sp, #20
   d509c:	f7ff fe8a 	bl	d4db4 <_ZN8particle5ErrorD1Ev>
   d50a0:	e052      	b.n	d5148 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d50a2:	2400      	movs	r4, #0
   d50a4:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d50a6:	2014      	movs	r0, #20
   d50a8:	606c      	str	r4, [r5, #4]
   d50aa:	60ac      	str	r4, [r5, #8]
   d50ac:	9307      	str	r3, [sp, #28]
   d50ae:	f7fe fff4 	bl	d409a <_Znwj>
   d50b2:	4601      	mov	r1, r0
   d50b4:	b118      	cbz	r0, d50be <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
   d50b6:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d50b8:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d50ba:	6044      	str	r4, [r0, #4]
   d50bc:	6084      	str	r4, [r0, #8]
   d50be:	a804      	add	r0, sp, #16
   d50c0:	9103      	str	r1, [sp, #12]
   d50c2:	f7ff feef 	bl	d4ea4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d50c6:	4b22      	ldr	r3, [pc, #136]	; (d5150 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
   d50c8:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d50ca:	2008      	movs	r0, #8
   d50cc:	f7fe ffe5 	bl	d409a <_Znwj>
   d50d0:	4604      	mov	r4, r0
   d50d2:	b128      	cbz	r0, d50e0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d50d4:	9b03      	ldr	r3, [sp, #12]
   d50d6:	f840 3b04 	str.w	r3, [r0], #4
   d50da:	a904      	add	r1, sp, #16
   d50dc:	f7ff fe25 	bl	d4d2a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d50e0:	9500      	str	r5, [sp, #0]
   d50e2:	fa5f f38a 	uxtb.w	r3, sl
   d50e6:	464a      	mov	r2, r9
   d50e8:	4641      	mov	r1, r8
   d50ea:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d50ec:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d50ee:	f7ff fd3d 	bl	d4b6c <spark_send_event>
   d50f2:	b920      	cbnz	r0, d50fe <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d50f4:	9b03      	ldr	r3, [sp, #12]
   d50f6:	785b      	ldrb	r3, [r3, #1]
   d50f8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d50fc:	b183      	cbz	r3, d5120 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   d50fe:	9b03      	ldr	r3, [sp, #12]
   d5100:	9305      	str	r3, [sp, #20]
   d5102:	a904      	add	r1, sp, #16
   d5104:	a806      	add	r0, sp, #24
   d5106:	f7ff fe10 	bl	d4d2a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d510a:	a905      	add	r1, sp, #20
   d510c:	4630      	mov	r0, r6
   d510e:	f7ff fe89 	bl	d4e24 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5112:	a806      	add	r0, sp, #24
   d5114:	f7ff fe10 	bl	d4d38 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5118:	a804      	add	r0, sp, #16
   d511a:	f7ff fe0d 	bl	d4d38 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d511e:	e013      	b.n	d5148 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
   d5120:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d5124:	a905      	add	r1, sp, #20
   d5126:	a803      	add	r0, sp, #12
   d5128:	9205      	str	r2, [sp, #20]
   d512a:	f8ad 3018 	strh.w	r3, [sp, #24]
   d512e:	f7ff fefd 	bl	d4f2c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d5132:	a805      	add	r0, sp, #20
   d5134:	f7ff fe3e 	bl	d4db4 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d5138:	a805      	add	r0, sp, #20
   d513a:	9909      	ldr	r1, [sp, #36]	; 0x24
   d513c:	f7ff fe83 	bl	d4e46 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
   d5140:	a806      	add	r0, sp, #24
   d5142:	f7ff fdf9 	bl	d4d38 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5146:	e7da      	b.n	d50fe <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
    }

    return p.future();
}
   d5148:	4630      	mov	r0, r6
   d514a:	b00b      	add	sp, #44	; 0x2c
   d514c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5150:	000d52c5 	.word	0x000d52c5

000d5154 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d5154:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d5156:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5158:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d515a:	d006      	beq.n	d516a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d515c:	2a03      	cmp	r2, #3
   d515e:	d017      	beq.n	d5190 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d5160:	2a01      	cmp	r2, #1
   d5162:	d122      	bne.n	d51aa <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d5164:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d5166:	6003      	str	r3, [r0, #0]
	      break;
   d5168:	e01f      	b.n	d51aa <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d516a:	2018      	movs	r0, #24
   d516c:	680e      	ldr	r6, [r1, #0]
   d516e:	f7fe ff94 	bl	d409a <_Znwj>
   d5172:	4605      	mov	r5, r0
   d5174:	b150      	cbz	r0, d518c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d5176:	4631      	mov	r1, r6
   d5178:	f7ff fec8 	bl	d4f0c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d517c:	6930      	ldr	r0, [r6, #16]
   d517e:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d5182:	b108      	cbz	r0, d5188 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d5184:	f001 fef4 	bl	d6f70 <strdup>
   d5188:	6128      	str	r0, [r5, #16]
   d518a:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d518c:	6025      	str	r5, [r4, #0]
   d518e:	e00c      	b.n	d51aa <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d5190:	6804      	ldr	r4, [r0, #0]
   d5192:	b154      	cbz	r4, d51aa <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
   d5194:	f104 0010 	add.w	r0, r4, #16
   d5198:	f7ff fe0c 	bl	d4db4 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d519c:	4620      	mov	r0, r4
   d519e:	f7ff fa11 	bl	d45c4 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d51a2:	2118      	movs	r1, #24
   d51a4:	4620      	mov	r0, r4
   d51a6:	f000 ff36 	bl	d6016 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d51aa:	2000      	movs	r0, #0
   d51ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d51ae <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d51ae:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d51b0:	2300      	movs	r3, #0
   d51b2:	6083      	str	r3, [r0, #8]
   d51b4:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d51b6:	4604      	mov	r4, r0
   d51b8:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d51ba:	b12b      	cbz	r3, d51c8 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d51bc:	2202      	movs	r2, #2
   d51be:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d51c0:	68eb      	ldr	r3, [r5, #12]
   d51c2:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d51c4:	68ab      	ldr	r3, [r5, #8]
   d51c6:	60a3      	str	r3, [r4, #8]
	}
    }
   d51c8:	4620      	mov	r0, r4
   d51ca:	bd38      	pop	{r3, r4, r5, pc}

000d51cc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d51cc:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d51ce:	b570      	push	{r4, r5, r6, lr}
   d51d0:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d51d2:	d006      	beq.n	d51e2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d51d4:	2a03      	cmp	r2, #3
   d51d6:	d011      	beq.n	d51fc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d51d8:	2a01      	cmp	r2, #1
   d51da:	d118      	bne.n	d520e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d51dc:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d51de:	6003      	str	r3, [r0, #0]
	      break;
   d51e0:	e015      	b.n	d520e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d51e2:	2014      	movs	r0, #20
   d51e4:	680e      	ldr	r6, [r1, #0]
   d51e6:	f7fe ff58 	bl	d409a <_Znwj>
   d51ea:	4605      	mov	r5, r0
   d51ec:	b120      	cbz	r0, d51f8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d51ee:	4631      	mov	r1, r6
   d51f0:	f7ff ffdd 	bl	d51ae <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d51f4:	7c33      	ldrb	r3, [r6, #16]
   d51f6:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d51f8:	6025      	str	r5, [r4, #0]
   d51fa:	e008      	b.n	d520e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d51fc:	6804      	ldr	r4, [r0, #0]
   d51fe:	b134      	cbz	r4, d520e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5200:	4620      	mov	r0, r4
   d5202:	f7ff f9df 	bl	d45c4 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d5206:	2114      	movs	r1, #20
   d5208:	4620      	mov	r0, r4
   d520a:	f000 ff04 	bl	d6016 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d520e:	2000      	movs	r0, #0
   d5210:	bd70      	pop	{r4, r5, r6, pc}
	...

000d5214 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d5214:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d5216:	2300      	movs	r3, #0
   d5218:	b087      	sub	sp, #28
   d521a:	460c      	mov	r4, r1
   d521c:	f3bf 8f5f 	dmb	sy
   d5220:	e850 6f00 	ldrex	r6, [r0]
   d5224:	e840 3200 	strex	r2, r3, [r0]
   d5228:	2a00      	cmp	r2, #0
   d522a:	d1f9      	bne.n	d5220 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d522c:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d5230:	2e00      	cmp	r6, #0
   d5232:	d03f      	beq.n	d52b4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d5234:	4618      	mov	r0, r3
   d5236:	f7ff fc55 	bl	d4ae4 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d523a:	4607      	mov	r7, r0
   d523c:	b120      	cbz	r0, d5248 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d523e:	4621      	mov	r1, r4
   d5240:	4630      	mov	r0, r6
   d5242:	f7ff fe53 	bl	d4eec <_ZNKSt8functionIFvRKbEEclES1_>
   d5246:	e02e      	b.n	d52a6 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d5248:	4631      	mov	r1, r6
   d524a:	a801      	add	r0, sp, #4
   d524c:	f7ff ffaf 	bl	d51ae <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d5250:	7823      	ldrb	r3, [r4, #0]
   d5252:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d5256:	2010      	movs	r0, #16
   d5258:	f7fe ff1f 	bl	d409a <_Znwj>
   d525c:	4605      	mov	r5, r0
   d525e:	b1d0      	cbz	r0, d5296 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5260:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5262:	2014      	movs	r0, #20
   d5264:	f7fe ff19 	bl	d409a <_Znwj>
   d5268:	4604      	mov	r4, r0
   d526a:	b178      	cbz	r0, d528c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d526c:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d526e:	4601      	mov	r1, r0
   d5270:	a801      	add	r0, sp, #4
   d5272:	f7ff fe06 	bl	d4e82 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5276:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d5278:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d527a:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d527c:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d527e:	9203      	str	r2, [sp, #12]
   d5280:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d5282:	60e3      	str	r3, [r4, #12]
   d5284:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5288:	9204      	str	r2, [sp, #16]
   d528a:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d528c:	4b0a      	ldr	r3, [pc, #40]	; (d52b8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d528e:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d5290:	4b0a      	ldr	r3, [pc, #40]	; (d52bc <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5292:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d5294:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5296:	a801      	add	r0, sp, #4
   d5298:	f7ff f994 	bl	d45c4 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d529c:	2200      	movs	r2, #0
   d529e:	4629      	mov	r1, r5
   d52a0:	4807      	ldr	r0, [pc, #28]	; (d52c0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d52a2:	f7ff fc27 	bl	d4af4 <application_thread_invoke>
   d52a6:	4630      	mov	r0, r6
   d52a8:	f7ff f98c 	bl	d45c4 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d52ac:	2110      	movs	r1, #16
   d52ae:	4630      	mov	r0, r6
   d52b0:	f000 feb1 	bl	d6016 <_ZdlPvj>
        }
    }
   d52b4:	b007      	add	sp, #28
   d52b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d52b8:	000d4eff 	.word	0x000d4eff
   d52bc:	000d51cd 	.word	0x000d51cd
   d52c0:	000d4cd3 	.word	0x000d4cd3

000d52c4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:

namespace {

using namespace particle;

void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d52c4:	b530      	push	{r4, r5, lr}
   d52c6:	b085      	sub	sp, #20
   d52c8:	4604      	mov	r4, r0
   d52ca:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d52cc:	4668      	mov	r0, sp
   d52ce:	4611      	mov	r1, r2
   d52d0:	f7ff fdb9 	bl	d4e46 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d52d4:	b17c      	cbz	r4, d52f6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d52d6:	b224      	sxth	r4, r4
   d52d8:	4628      	mov	r0, r5
   d52da:	b10d      	cbz	r5, d52e0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d52dc:	f001 fe48 	bl	d6f70 <strdup>
   d52e0:	9002      	str	r0, [sp, #8]
   d52e2:	a902      	add	r1, sp, #8
   d52e4:	4668      	mov	r0, sp
   d52e6:	f8ad 400c 	strh.w	r4, [sp, #12]
   d52ea:	f7ff fe1f 	bl	d4f2c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d52ee:	a802      	add	r0, sp, #8
   d52f0:	f7ff fd60 	bl	d4db4 <_ZN8particle5ErrorD1Ev>
   d52f4:	e01d      	b.n	d5332 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d52f6:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d52f8:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d52fc:	f04f 0201 	mov.w	r2, #1
   d5300:	e8d0 3f4f 	ldrexb	r3, [r0]
   d5304:	42a3      	cmp	r3, r4
   d5306:	d103      	bne.n	d5310 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d5308:	e8c0 2f41 	strexb	r1, r2, [r0]
   d530c:	2900      	cmp	r1, #0
   d530e:	d1f7      	bne.n	d5300 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d5310:	d002      	beq.n	d5318 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d5312:	f88d 3008 	strb.w	r3, [sp, #8]
   d5316:	e00c      	b.n	d5332 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d5318:	f110 010c 	adds.w	r1, r0, #12
   d531c:	f04f 0301 	mov.w	r3, #1
   d5320:	bf18      	it	ne
   d5322:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d5324:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d5328:	3004      	adds	r0, #4
   d532a:	f800 3c03 	strb.w	r3, [r0, #-3]
   d532e:	f7ff ff71 	bl	d5214 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d5332:	a801      	add	r0, sp, #4
   d5334:	f7ff fd00 	bl	d4d38 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d5338:	b005      	add	sp, #20
   d533a:	bd30      	pop	{r4, r5, pc}

000d533c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d533c:	2200      	movs	r2, #0
   d533e:	4611      	mov	r1, r2
   d5340:	6840      	ldr	r0, [r0, #4]
   d5342:	f7ff bc6b 	b.w	d4c1c <network_listening>

000d5346 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5346:	2200      	movs	r2, #0
   d5348:	4611      	mov	r1, r2
   d534a:	6840      	ldr	r0, [r0, #4]
   d534c:	f7ff bc76 	b.w	d4c3c <network_get_listen_timeout>

000d5350 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5350:	2200      	movs	r2, #0
   d5352:	6840      	ldr	r0, [r0, #4]
   d5354:	f7ff bc6a 	b.w	d4c2c <network_set_listen_timeout>

000d5358 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5358:	2200      	movs	r2, #0
   d535a:	f081 0101 	eor.w	r1, r1, #1
   d535e:	6840      	ldr	r0, [r0, #4]
   d5360:	f7ff bc54 	b.w	d4c0c <network_listen>

000d5364 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d5364:	2300      	movs	r3, #0
   d5366:	461a      	mov	r2, r3
   d5368:	4619      	mov	r1, r3
   d536a:	6840      	ldr	r0, [r0, #4]
   d536c:	f7ff bc46 	b.w	d4bfc <network_off>

000d5370 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5370:	2300      	movs	r3, #0
   d5372:	461a      	mov	r2, r3
   d5374:	4619      	mov	r1, r3
   d5376:	6840      	ldr	r0, [r0, #4]
   d5378:	f7ff bc38 	b.w	d4bec <network_on>

000d537c <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d537c:	2200      	movs	r2, #0
   d537e:	4611      	mov	r1, r2
   d5380:	6840      	ldr	r0, [r0, #4]
   d5382:	f7ff bc2b 	b.w	d4bdc <network_ready>

000d5386 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5386:	2200      	movs	r2, #0
   d5388:	4611      	mov	r1, r2
   d538a:	6840      	ldr	r0, [r0, #4]
   d538c:	f7ff bc16 	b.w	d4bbc <network_connecting>

000d5390 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5390:	2200      	movs	r2, #0
   d5392:	2102      	movs	r1, #2
   d5394:	6840      	ldr	r0, [r0, #4]
   d5396:	f7ff bc19 	b.w	d4bcc <network_disconnect>

000d539a <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d539a:	2300      	movs	r3, #0
   d539c:	461a      	mov	r2, r3
   d539e:	6840      	ldr	r0, [r0, #4]
   d53a0:	f7ff bc04 	b.w	d4bac <network_connect>

000d53a4 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d53a4:	4b02      	ldr	r3, [pc, #8]	; (d53b0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d53a6:	2203      	movs	r2, #3
   d53a8:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d53aa:	4a02      	ldr	r2, [pc, #8]	; (d53b4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d53ac:	601a      	str	r2, [r3, #0]
   d53ae:	4770      	bx	lr
   d53b0:	2003e388 	.word	0x2003e388
   d53b4:	000d95c8 	.word	0x000d95c8

000d53b8 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d53b8:	4770      	bx	lr

000d53ba <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d53ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d53bc:	4606      	mov	r6, r0
   d53be:	4615      	mov	r5, r2
   d53c0:	460c      	mov	r4, r1
   d53c2:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d53c4:	42bc      	cmp	r4, r7
   d53c6:	d006      	beq.n	d53d6 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d53c8:	6833      	ldr	r3, [r6, #0]
   d53ca:	f814 1b01 	ldrb.w	r1, [r4], #1
   d53ce:	689b      	ldr	r3, [r3, #8]
   d53d0:	4630      	mov	r0, r6
   d53d2:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d53d4:	e7f6      	b.n	d53c4 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d53d6:	4628      	mov	r0, r5
   d53d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d53da <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d53da:	2200      	movs	r2, #0
   d53dc:	7c00      	ldrb	r0, [r0, #16]
   d53de:	f7ff baa9 	b.w	d4934 <HAL_I2C_Write_Data>

000d53e2 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d53e2:	2100      	movs	r1, #0
   d53e4:	7c00      	ldrb	r0, [r0, #16]
   d53e6:	f7ff baad 	b.w	d4944 <HAL_I2C_Available_Data>

000d53ea <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d53ea:	2100      	movs	r1, #0
   d53ec:	7c00      	ldrb	r0, [r0, #16]
   d53ee:	f7ff bab1 	b.w	d4954 <HAL_I2C_Read_Data>

000d53f2 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d53f2:	2100      	movs	r1, #0
   d53f4:	7c00      	ldrb	r0, [r0, #16]
   d53f6:	f7ff bab5 	b.w	d4964 <HAL_I2C_Peek_Data>

000d53fa <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d53fa:	2100      	movs	r1, #0
   d53fc:	7c00      	ldrb	r0, [r0, #16]
   d53fe:	f7ff bab9 	b.w	d4974 <HAL_I2C_Flush_Data>

000d5402 <_ZN7TwoWireD0Ev>:
   d5402:	b510      	push	{r4, lr}
   d5404:	2114      	movs	r1, #20
   d5406:	4604      	mov	r4, r0
   d5408:	f000 fe05 	bl	d6016 <_ZdlPvj>
   d540c:	4620      	mov	r0, r4
   d540e:	bd10      	pop	{r4, pc}

000d5410 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d5410:	b510      	push	{r4, lr}
   d5412:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d5414:	2300      	movs	r3, #0
   d5416:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d5418:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d541c:	60a3      	str	r3, [r4, #8]
   d541e:	4b04      	ldr	r3, [pc, #16]	; (d5430 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d5420:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d5422:	4608      	mov	r0, r1
   d5424:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d5426:	4611      	mov	r1, r2
   d5428:	f7ff faac 	bl	d4984 <HAL_I2C_Init>
}
   d542c:	4620      	mov	r0, r4
   d542e:	bd10      	pop	{r4, pc}
   d5430:	000d95fc 	.word	0x000d95fc

000d5434 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d5434:	2300      	movs	r3, #0
   d5436:	461a      	mov	r2, r3
   d5438:	4619      	mov	r1, r3
   d543a:	7c00      	ldrb	r0, [r0, #16]
   d543c:	f7ff ba62 	b.w	d4904 <HAL_I2C_Begin>

000d5440 <_ZN7TwoWire17beginTransmissionEh>:
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d5440:	2200      	movs	r2, #0
   d5442:	7c00      	ldrb	r0, [r0, #16]
   d5444:	f7ff ba66 	b.w	d4914 <HAL_I2C_Begin_Transmission>

000d5448 <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
   d5448:	b2c9      	uxtb	r1, r1
   d544a:	f7ff bff9 	b.w	d5440 <_ZN7TwoWire17beginTransmissionEh>

000d544e <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d544e:	2200      	movs	r2, #0
   d5450:	7c00      	ldrb	r0, [r0, #16]
   d5452:	f7ff ba67 	b.w	d4924 <HAL_I2C_End_Transmission>

000d5456 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
   d5456:	2101      	movs	r1, #1
   d5458:	f7ff bff9 	b.w	d544e <_ZN7TwoWire15endTransmissionEh>

000d545c <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d545c:	4770      	bx	lr

000d545e <_ZN9IPAddressD0Ev>:
   d545e:	b510      	push	{r4, lr}
   d5460:	2118      	movs	r1, #24
   d5462:	4604      	mov	r4, r0
   d5464:	f000 fdd7 	bl	d6016 <_ZdlPvj>
   d5468:	4620      	mov	r0, r4
   d546a:	bd10      	pop	{r4, pc}

000d546c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d546c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d546e:	7d03      	ldrb	r3, [r0, #20]
   d5470:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5472:	b08d      	sub	sp, #52	; 0x34
   d5474:	460e      	mov	r6, r1
   d5476:	f100 0704 	add.w	r7, r0, #4
   d547a:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d547e:	d002      	beq.n	d5486 <_ZNK9IPAddress7printToER5Print+0x1a>
   d5480:	f100 0508 	add.w	r5, r0, #8
   d5484:	e018      	b.n	d54b8 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d5486:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5488:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d548a:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d548e:	232f      	movs	r3, #47	; 0x2f
   d5490:	462a      	mov	r2, r5
   d5492:	200a      	movs	r0, #10
   d5494:	f7ff fa7e 	bl	d4994 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5498:	4628      	mov	r0, r5
   d549a:	f001 fd84 	bl	d6fa6 <strlen>
   d549e:	6833      	ldr	r3, [r6, #0]
   d54a0:	4602      	mov	r2, r0
   d54a2:	68db      	ldr	r3, [r3, #12]
   d54a4:	4629      	mov	r1, r5
   d54a6:	4630      	mov	r0, r6
   d54a8:	4798      	blx	r3
   d54aa:	e00f      	b.n	d54cc <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d54ac:	b124      	cbz	r4, d54b8 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d54ae:	212e      	movs	r1, #46	; 0x2e
   d54b0:	4630      	mov	r0, r6
   d54b2:	f000 f9d5 	bl	d5860 <_ZN5Print5printEc>
   d54b6:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d54b8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d54bc:	220a      	movs	r2, #10
   d54be:	4630      	mov	r0, r6
   d54c0:	f000 f9e7 	bl	d5892 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d54c4:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d54c6:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d54c8:	d1f0      	bne.n	d54ac <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d54ca:	4620      	mov	r0, r4
    }
    return n;
}
   d54cc:	b00d      	add	sp, #52	; 0x34
   d54ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d54d0 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d54d0:	b510      	push	{r4, lr}
   d54d2:	4b05      	ldr	r3, [pc, #20]	; (d54e8 <_ZN9IPAddressC1Ev+0x18>)
   d54d4:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d54d6:	2211      	movs	r2, #17
   d54d8:	f840 3b04 	str.w	r3, [r0], #4
   d54dc:	2100      	movs	r1, #0
   d54de:	f001 fd04 	bl	d6eea <memset>
{
    clear();
}
   d54e2:	4620      	mov	r0, r4
   d54e4:	bd10      	pop	{r4, pc}
   d54e6:	bf00      	nop
   d54e8:	000d9624 	.word	0x000d9624

000d54ec <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d54ec:	4603      	mov	r3, r0
   d54ee:	4a07      	ldr	r2, [pc, #28]	; (d550c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d54f0:	b510      	push	{r4, lr}
   d54f2:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d54f6:	f101 0210 	add.w	r2, r1, #16
   d54fa:	f851 4b04 	ldr.w	r4, [r1], #4
   d54fe:	f843 4b04 	str.w	r4, [r3], #4
   d5502:	4291      	cmp	r1, r2
   d5504:	d1f9      	bne.n	d54fa <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d5506:	780a      	ldrb	r2, [r1, #0]
   d5508:	701a      	strb	r2, [r3, #0]
}
   d550a:	bd10      	pop	{r4, pc}
   d550c:	000d9624 	.word	0x000d9624

000d5510 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d5510:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d5512:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d5516:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d551a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d551e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d5522:	2304      	movs	r3, #4
   d5524:	6041      	str	r1, [r0, #4]
   d5526:	7503      	strb	r3, [r0, #20]
   d5528:	bd10      	pop	{r4, pc}

000d552a <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d552a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d552c:	780d      	ldrb	r5, [r1, #0]
   d552e:	788b      	ldrb	r3, [r1, #2]
   d5530:	784a      	ldrb	r2, [r1, #1]
   d5532:	78c9      	ldrb	r1, [r1, #3]
   d5534:	9100      	str	r1, [sp, #0]
   d5536:	4629      	mov	r1, r5
   d5538:	f7ff ffea 	bl	d5510 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d553c:	b003      	add	sp, #12
   d553e:	bd30      	pop	{r4, r5, pc}

000d5540 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d5540:	4b01      	ldr	r3, [pc, #4]	; (d5548 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d5542:	4a02      	ldr	r2, [pc, #8]	; (d554c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d5544:	601a      	str	r2, [r3, #0]
   d5546:	4770      	bx	lr
   d5548:	2003e390 	.word	0x2003e390
   d554c:	000d96a3 	.word	0x000d96a3

000d5550 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5550:	2200      	movs	r2, #0
   d5552:	4611      	mov	r1, r2
   d5554:	6840      	ldr	r0, [r0, #4]
   d5556:	f7ff bb61 	b.w	d4c1c <network_listening>

000d555a <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d555a:	2200      	movs	r2, #0
   d555c:	4611      	mov	r1, r2
   d555e:	6840      	ldr	r0, [r0, #4]
   d5560:	f7ff bb6c 	b.w	d4c3c <network_get_listen_timeout>

000d5564 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5564:	2200      	movs	r2, #0
   d5566:	6840      	ldr	r0, [r0, #4]
   d5568:	f7ff bb60 	b.w	d4c2c <network_set_listen_timeout>

000d556c <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d556c:	2200      	movs	r2, #0
   d556e:	f081 0101 	eor.w	r1, r1, #1
   d5572:	6840      	ldr	r0, [r0, #4]
   d5574:	f7ff bb4a 	b.w	d4c0c <network_listen>

000d5578 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d5578:	2300      	movs	r3, #0
   d557a:	461a      	mov	r2, r3
   d557c:	2101      	movs	r1, #1
   d557e:	6840      	ldr	r0, [r0, #4]
   d5580:	f7ff bb3c 	b.w	d4bfc <network_off>

000d5584 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5584:	2300      	movs	r3, #0
   d5586:	461a      	mov	r2, r3
   d5588:	4619      	mov	r1, r3
   d558a:	6840      	ldr	r0, [r0, #4]
   d558c:	f7ff bb2e 	b.w	d4bec <network_on>

000d5590 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5590:	2200      	movs	r2, #0
   d5592:	4611      	mov	r1, r2
   d5594:	6840      	ldr	r0, [r0, #4]
   d5596:	f7ff bb21 	b.w	d4bdc <network_ready>

000d559a <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d559a:	2200      	movs	r2, #0
   d559c:	4611      	mov	r1, r2
   d559e:	6840      	ldr	r0, [r0, #4]
   d55a0:	f7ff bb0c 	b.w	d4bbc <network_connecting>

000d55a4 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d55a4:	2200      	movs	r2, #0
   d55a6:	2102      	movs	r1, #2
   d55a8:	6840      	ldr	r0, [r0, #4]
   d55aa:	f7ff bb0f 	b.w	d4bcc <network_disconnect>

000d55ae <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d55ae:	2300      	movs	r3, #0
   d55b0:	461a      	mov	r2, r3
   d55b2:	6840      	ldr	r0, [r0, #4]
   d55b4:	f7ff bafa 	b.w	d4bac <network_connect>

000d55b8 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d55b8:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d55ba:	4605      	mov	r5, r0
   d55bc:	b188      	cbz	r0, d55e2 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d55be:	6804      	ldr	r4, [r0, #0]
   d55c0:	b14c      	cbz	r4, d55d6 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d55c2:	68a3      	ldr	r3, [r4, #8]
   d55c4:	b11b      	cbz	r3, d55ce <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d55c6:	2203      	movs	r2, #3
   d55c8:	4621      	mov	r1, r4
   d55ca:	4620      	mov	r0, r4
   d55cc:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d55ce:	2110      	movs	r1, #16
   d55d0:	4620      	mov	r0, r4
   d55d2:	f000 fd20 	bl	d6016 <_ZdlPvj>
   d55d6:	4628      	mov	r0, r5
   d55d8:	2114      	movs	r1, #20
      }
   d55da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d55de:	f000 bd1a 	b.w	d6016 <_ZdlPvj>
   d55e2:	bd38      	pop	{r3, r4, r5, pc}

000d55e4 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d55e4:	b110      	cbz	r0, d55ec <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d55e6:	6803      	ldr	r3, [r0, #0]
   d55e8:	685b      	ldr	r3, [r3, #4]
   d55ea:	4718      	bx	r3
   d55ec:	4770      	bx	lr

000d55ee <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d55ee:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d55f0:	6803      	ldr	r3, [r0, #0]
   d55f2:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d55f4:	b1bb      	cbz	r3, d5626 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d55f6:	6858      	ldr	r0, [r3, #4]
   d55f8:	f7ff f934 	bl	d4864 <os_thread_is_current>
   d55fc:	b978      	cbnz	r0, d561e <_ZN6ThreadD1Ev+0x30>
   d55fe:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d5600:	7c5a      	ldrb	r2, [r3, #17]
   d5602:	b912      	cbnz	r2, d560a <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d5604:	6858      	ldr	r0, [r3, #4]
   d5606:	f7ff f935 	bl	d4874 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d560a:	6823      	ldr	r3, [r4, #0]
   d560c:	6858      	ldr	r0, [r3, #4]
   d560e:	f7ff f939 	bl	d4884 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5612:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d5614:	2300      	movs	r3, #0
   d5616:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d5618:	b128      	cbz	r0, d5626 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d561a:	f7ff ffcd 	bl	d55b8 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d561e:	6820      	ldr	r0, [r4, #0]
   d5620:	b108      	cbz	r0, d5626 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d5622:	f7ff ffc9 	bl	d55b8 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d5626:	4620      	mov	r0, r4
   d5628:	bd10      	pop	{r4, pc}

000d562a <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d562a:	b538      	push	{r3, r4, r5, lr}
   d562c:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d562e:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d5632:	b108      	cbz	r0, d5638 <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d5634:	f7fe fd35 	bl	d40a2 <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d5638:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d563c:	b108      	cbz	r0, d5642 <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d563e:	f7ff f931 	bl	d48a4 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5642:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d5646:	b135      	cbz	r5, d5656 <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5648:	4628      	mov	r0, r5
   d564a:	f7ff ffd0 	bl	d55ee <_ZN6ThreadD1Ev>
   d564e:	2104      	movs	r1, #4
   d5650:	4628      	mov	r0, r5
   d5652:	f000 fce0 	bl	d6016 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5656:	6820      	ldr	r0, [r4, #0]
   d5658:	b108      	cbz	r0, d565e <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d565a:	f7ff ffc3 	bl	d55e4 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d565e:	4620      	mov	r0, r4
   d5660:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5664 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d5664:	b510      	push	{r4, lr}
   d5666:	4b04      	ldr	r3, [pc, #16]	; (d5678 <_ZN5spark9MeshClassD1Ev+0x14>)
   d5668:	4604      	mov	r4, r0
   d566a:	f840 3b08 	str.w	r3, [r0], #8
   d566e:	f7ff ffdc 	bl	d562a <_ZN5spark11MeshPublishD1Ev>
   d5672:	4620      	mov	r0, r4
   d5674:	bd10      	pop	{r4, pc}
   d5676:	bf00      	nop
   d5678:	000d9718 	.word	0x000d9718

000d567c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d567c:	b538      	push	{r3, r4, r5, lr}
   d567e:	4c0e      	ldr	r4, [pc, #56]	; (d56b8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d5680:	4b0e      	ldr	r3, [pc, #56]	; (d56bc <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d5682:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d5684:	2500      	movs	r5, #0
   d5686:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d5688:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d568c:	6063      	str	r3, [r4, #4]
   d568e:	60a5      	str	r5, [r4, #8]
   d5690:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5694:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d5698:	f7ff f8fc 	bl	d4894 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d569c:	4b08      	ldr	r3, [pc, #32]	; (d56c0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d569e:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d56a2:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d56a6:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d56a8:	4620      	mov	r0, r4
   d56aa:	4a06      	ldr	r2, [pc, #24]	; (d56c4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d56ac:	4906      	ldr	r1, [pc, #24]	; (d56c8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d56ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d56b2:	f000 bcab 	b.w	d600c <__aeabi_atexit>
   d56b6:	bf00      	nop
   d56b8:	2003e394 	.word	0x2003e394
   d56bc:	000d974c 	.word	0x000d974c
   d56c0:	000d9718 	.word	0x000d9718
   d56c4:	2003e220 	.word	0x2003e220
   d56c8:	000d5665 	.word	0x000d5665

000d56cc <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d56cc:	2300      	movs	r3, #0
   d56ce:	461a      	mov	r2, r3
   d56d0:	6840      	ldr	r0, [r0, #4]
   d56d2:	f7ff ba6b 	b.w	d4bac <network_connect>

000d56d6 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d56d6:	2200      	movs	r2, #0
   d56d8:	2102      	movs	r1, #2
   d56da:	6840      	ldr	r0, [r0, #4]
   d56dc:	f7ff ba76 	b.w	d4bcc <network_disconnect>

000d56e0 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d56e0:	2200      	movs	r2, #0
   d56e2:	4611      	mov	r1, r2
   d56e4:	6840      	ldr	r0, [r0, #4]
   d56e6:	f7ff ba69 	b.w	d4bbc <network_connecting>

000d56ea <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d56ea:	2200      	movs	r2, #0
   d56ec:	4611      	mov	r1, r2
   d56ee:	6840      	ldr	r0, [r0, #4]
   d56f0:	f7ff ba74 	b.w	d4bdc <network_ready>

000d56f4 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d56f4:	2300      	movs	r3, #0
   d56f6:	461a      	mov	r2, r3
   d56f8:	4619      	mov	r1, r3
   d56fa:	6840      	ldr	r0, [r0, #4]
   d56fc:	f7ff ba76 	b.w	d4bec <network_on>

000d5700 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d5700:	2300      	movs	r3, #0
   d5702:	461a      	mov	r2, r3
   d5704:	4619      	mov	r1, r3
   d5706:	6840      	ldr	r0, [r0, #4]
   d5708:	f7ff ba78 	b.w	d4bfc <network_off>

000d570c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d570c:	2200      	movs	r2, #0
   d570e:	f081 0101 	eor.w	r1, r1, #1
   d5712:	6840      	ldr	r0, [r0, #4]
   d5714:	f7ff ba7a 	b.w	d4c0c <network_listen>

000d5718 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d5718:	2200      	movs	r2, #0
   d571a:	6840      	ldr	r0, [r0, #4]
   d571c:	f7ff ba86 	b.w	d4c2c <network_set_listen_timeout>

000d5720 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d5720:	2200      	movs	r2, #0
   d5722:	4611      	mov	r1, r2
   d5724:	6840      	ldr	r0, [r0, #4]
   d5726:	f7ff ba89 	b.w	d4c3c <network_get_listen_timeout>

000d572a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d572a:	2200      	movs	r2, #0
   d572c:	4611      	mov	r1, r2
   d572e:	6840      	ldr	r0, [r0, #4]
   d5730:	f7ff ba74 	b.w	d4c1c <network_listening>

000d5734 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d5734:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5738:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d573a:	b095      	sub	sp, #84	; 0x54
   d573c:	4616      	mov	r6, r2
   d573e:	460d      	mov	r5, r1
   d5740:	4607      	mov	r7, r0
    IPAddress addr;
   d5742:	f7ff fec5 	bl	d54d0 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d5746:	4621      	mov	r1, r4
   d5748:	2220      	movs	r2, #32
   d574a:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d574c:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d574e:	f001 fbcc 	bl	d6eea <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d5752:	2340      	movs	r3, #64	; 0x40
   d5754:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d5756:	4621      	mov	r1, r4
   d5758:	466b      	mov	r3, sp
   d575a:	aa0c      	add	r2, sp, #48	; 0x30
   d575c:	4630      	mov	r0, r6
   d575e:	f7ff f929 	bl	d49b4 <netdb_getaddrinfo>
    if (!r) {
   d5762:	4604      	mov	r4, r0
   d5764:	2800      	cmp	r0, #0
   d5766:	d144      	bne.n	d57f2 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5768:	4602      	mov	r2, r0
   d576a:	2101      	movs	r1, #1
   d576c:	6868      	ldr	r0, [r5, #4]
   d576e:	f7ff fa35 	bl	d4bdc <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5772:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5774:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5776:	4622      	mov	r2, r4
   d5778:	6868      	ldr	r0, [r5, #4]
   d577a:	f7ff fa2f 	bl	d4bdc <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d577e:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5780:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d5782:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5784:	2e00      	cmp	r6, #0
   d5786:	d034      	beq.n	d57f2 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d5788:	2900      	cmp	r1, #0
   d578a:	d132      	bne.n	d57f2 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d578c:	6873      	ldr	r3, [r6, #4]
   d578e:	2b02      	cmp	r3, #2
   d5790:	d002      	beq.n	d5798 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d5792:	2b0a      	cmp	r3, #10
   d5794:	d009      	beq.n	d57aa <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d5796:	e02a      	b.n	d57ee <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d5798:	f1b8 0f00 	cmp.w	r8, #0
   d579c:	d027      	beq.n	d57ee <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d579e:	6971      	ldr	r1, [r6, #20]
   d57a0:	4638      	mov	r0, r7
   d57a2:	3104      	adds	r1, #4
   d57a4:	f7ff fec1 	bl	d552a <_ZN9IPAddressaSEPKh>
   d57a8:	e020      	b.n	d57ec <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d57aa:	f1b9 0f00 	cmp.w	r9, #0
   d57ae:	d01e      	beq.n	d57ee <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d57b0:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d57b2:	2211      	movs	r2, #17
   d57b4:	a801      	add	r0, sp, #4
   d57b6:	f001 fb98 	bl	d6eea <memset>
                    a.v = 6;
   d57ba:	2306      	movs	r3, #6
   d57bc:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d57c0:	ad01      	add	r5, sp, #4
   d57c2:	f104 0308 	add.w	r3, r4, #8
   d57c6:	3418      	adds	r4, #24
   d57c8:	6818      	ldr	r0, [r3, #0]
   d57ca:	6859      	ldr	r1, [r3, #4]
   d57cc:	462a      	mov	r2, r5
   d57ce:	c203      	stmia	r2!, {r0, r1}
   d57d0:	3308      	adds	r3, #8
   d57d2:	42a3      	cmp	r3, r4
   d57d4:	4615      	mov	r5, r2
   d57d6:	d1f7      	bne.n	d57c8 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d57d8:	a901      	add	r1, sp, #4
   d57da:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d57dc:	ad07      	add	r5, sp, #28
   d57de:	f7ff fe85 	bl	d54ec <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d57e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d57e4:	1d3c      	adds	r4, r7, #4
   d57e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d57e8:	682b      	ldr	r3, [r5, #0]
   d57ea:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d57ec:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d57ee:	69f6      	ldr	r6, [r6, #28]
   d57f0:	e7c8      	b.n	d5784 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d57f2:	9800      	ldr	r0, [sp, #0]
   d57f4:	f7ff f8d6 	bl	d49a4 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d57f8:	4638      	mov	r0, r7
   d57fa:	b015      	add	sp, #84	; 0x54
   d57fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d5800 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d5800:	4b02      	ldr	r3, [pc, #8]	; (d580c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d5802:	4a03      	ldr	r2, [pc, #12]	; (d5810 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d5804:	601a      	str	r2, [r3, #0]
   d5806:	2200      	movs	r2, #0
   d5808:	605a      	str	r2, [r3, #4]
   d580a:	4770      	bx	lr
   d580c:	2003e568 	.word	0x2003e568
   d5810:	000d974c 	.word	0x000d974c

000d5814 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d5814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5816:	4606      	mov	r6, r0
   d5818:	460d      	mov	r5, r1
   d581a:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d581c:	2400      	movs	r4, #0
  while (size--) {
   d581e:	42bd      	cmp	r5, r7
   d5820:	d00c      	beq.n	d583c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d5822:	6833      	ldr	r3, [r6, #0]
   d5824:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5828:	689b      	ldr	r3, [r3, #8]
   d582a:	4630      	mov	r0, r6
   d582c:	4798      	blx	r3
     if (chunk>=0)
   d582e:	2800      	cmp	r0, #0
   d5830:	db01      	blt.n	d5836 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d5832:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d5834:	e7f3      	b.n	d581e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d5836:	2c00      	cmp	r4, #0
   d5838:	bf08      	it	eq
   d583a:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d583c:	4620      	mov	r0, r4
   d583e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5840 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d5840:	b570      	push	{r4, r5, r6, lr}
   d5842:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d5844:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d5846:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d5848:	b149      	cbz	r1, d585e <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d584a:	f001 fbac 	bl	d6fa6 <strlen>
   d584e:	682b      	ldr	r3, [r5, #0]
   d5850:	4602      	mov	r2, r0
   d5852:	4621      	mov	r1, r4
   d5854:	4628      	mov	r0, r5
   d5856:	68db      	ldr	r3, [r3, #12]
    }
   d5858:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d585c:	4718      	bx	r3
    }
   d585e:	bd70      	pop	{r4, r5, r6, pc}

000d5860 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d5860:	6803      	ldr	r3, [r0, #0]
   d5862:	689b      	ldr	r3, [r3, #8]
   d5864:	4718      	bx	r3

000d5866 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d5866:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d5868:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d586a:	4605      	mov	r5, r0
  size_t n = print('\r');
   d586c:	f7ff fff8 	bl	d5860 <_ZN5Print5printEc>
  n += print('\n');
   d5870:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d5872:	4604      	mov	r4, r0
  n += print('\n');
   d5874:	4628      	mov	r0, r5
   d5876:	f7ff fff3 	bl	d5860 <_ZN5Print5printEc>
  return n;
}
   d587a:	4420      	add	r0, r4
   d587c:	bd38      	pop	{r3, r4, r5, pc}

000d587e <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d587e:	b538      	push	{r3, r4, r5, lr}
   d5880:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d5882:	f7ff ffdd 	bl	d5840 <_ZN5Print5writeEPKc>
   d5886:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d5888:	4628      	mov	r0, r5
   d588a:	f7ff ffec 	bl	d5866 <_ZN5Print7printlnEv>
  return n;
}
   d588e:	4420      	add	r0, r4
   d5890:	bd38      	pop	{r3, r4, r5, pc}

000d5892 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d5892:	b530      	push	{r4, r5, lr}
   d5894:	b08b      	sub	sp, #44	; 0x2c
   d5896:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d5898:	2100      	movs	r1, #0
   d589a:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d589e:	2a01      	cmp	r2, #1
   d58a0:	bf98      	it	ls
   d58a2:	220a      	movls	r2, #10
   d58a4:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d58a8:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d58ac:	fb05 3312 	mls	r3, r5, r2, r3
   d58b0:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d58b4:	2b09      	cmp	r3, #9
   d58b6:	bf94      	ite	ls
   d58b8:	3330      	addls	r3, #48	; 0x30
   d58ba:	3337      	addhi	r3, #55	; 0x37
   d58bc:	b2db      	uxtb	r3, r3
   d58be:	4621      	mov	r1, r4
   d58c0:	f804 3901 	strb.w	r3, [r4], #-1
   d58c4:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d58c6:	2d00      	cmp	r5, #0
   d58c8:	d1ee      	bne.n	d58a8 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d58ca:	f7ff ffb9 	bl	d5840 <_ZN5Print5writeEPKc>
}
   d58ce:	b00b      	add	sp, #44	; 0x2c
   d58d0:	bd30      	pop	{r4, r5, pc}

000d58d2 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d58d2:	b40c      	push	{r2, r3}
   d58d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d58d8:	b087      	sub	sp, #28
   d58da:	af00      	add	r7, sp, #0
   d58dc:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d58e0:	4605      	mov	r5, r0
   d58e2:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d58e6:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d58e8:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d58ea:	4623      	mov	r3, r4
   d58ec:	464a      	mov	r2, r9
   d58ee:	2114      	movs	r1, #20
   d58f0:	1d38      	adds	r0, r7, #4
   d58f2:	f7ff f9d3 	bl	d4c9c <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d58f6:	2813      	cmp	r0, #19
   d58f8:	d805      	bhi.n	d5906 <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d58fa:	1d39      	adds	r1, r7, #4
   d58fc:	4628      	mov	r0, r5
   d58fe:	f7ff ff9f 	bl	d5840 <_ZN5Print5writeEPKc>
   d5902:	4604      	mov	r4, r0
   d5904:	e013      	b.n	d592e <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d5906:	f100 0308 	add.w	r3, r0, #8
   d590a:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d590e:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d5910:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d5914:	1c41      	adds	r1, r0, #1
   d5916:	4623      	mov	r3, r4
   d5918:	464a      	mov	r2, r9
   d591a:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d591c:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d591e:	f7ff f9bd 	bl	d4c9c <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d5922:	4669      	mov	r1, sp
   d5924:	4628      	mov	r0, r5
   d5926:	f7ff ff8b 	bl	d5840 <_ZN5Print5writeEPKc>
   d592a:	4604      	mov	r4, r0
   d592c:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d592e:	b11e      	cbz	r6, d5938 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d5930:	4628      	mov	r0, r5
   d5932:	f7ff ff98 	bl	d5866 <_ZN5Print7printlnEv>
   d5936:	4404      	add	r4, r0
    return n;
}
   d5938:	4620      	mov	r0, r4
   d593a:	371c      	adds	r7, #28
   d593c:	46bd      	mov	sp, r7
   d593e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5942:	b002      	add	sp, #8
   d5944:	4770      	bx	lr

000d5946 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d5946:	b510      	push	{r4, lr}
   d5948:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d594a:	f7fe fe3b 	bl	d45c4 <_ZNSt14_Function_baseD1Ev>
   d594e:	4620      	mov	r0, r4
   d5950:	bd10      	pop	{r4, pc}
	...

000d5954 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5954:	4803      	ldr	r0, [pc, #12]	; (d5964 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d5956:	4a04      	ldr	r2, [pc, #16]	; (d5968 <_GLOBAL__sub_I_RGB+0x14>)
   d5958:	4904      	ldr	r1, [pc, #16]	; (d596c <_GLOBAL__sub_I_RGB+0x18>)
   d595a:	2300      	movs	r3, #0
   d595c:	6083      	str	r3, [r0, #8]
   d595e:	f000 bb55 	b.w	d600c <__aeabi_atexit>
   d5962:	bf00      	nop
   d5964:	2003e570 	.word	0x2003e570
   d5968:	2003e220 	.word	0x2003e220
   d596c:	000d5947 	.word	0x000d5947

000d5970 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d5970:	b510      	push	{r4, lr}
   d5972:	4604      	mov	r4, r0
{
	free(buffer);
   d5974:	6800      	ldr	r0, [r0, #0]
   d5976:	f7ff f971 	bl	d4c5c <free>
}
   d597a:	4620      	mov	r0, r4
   d597c:	bd10      	pop	{r4, pc}

000d597e <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d597e:	b510      	push	{r4, lr}
   d5980:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d5982:	6800      	ldr	r0, [r0, #0]
   d5984:	b108      	cbz	r0, d598a <_ZN6String10invalidateEv+0xc>
   d5986:	f7ff f969 	bl	d4c5c <free>
	buffer = NULL;
   d598a:	2300      	movs	r3, #0
   d598c:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d598e:	60a3      	str	r3, [r4, #8]
   d5990:	6063      	str	r3, [r4, #4]
   d5992:	bd10      	pop	{r4, pc}

000d5994 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d5994:	b538      	push	{r3, r4, r5, lr}
   d5996:	4604      	mov	r4, r0
   d5998:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d599a:	6800      	ldr	r0, [r0, #0]
   d599c:	3101      	adds	r1, #1
   d599e:	f7ff f965 	bl	d4c6c <realloc>
	if (newbuffer) {
   d59a2:	b110      	cbz	r0, d59aa <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d59a4:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d59a8:	2001      	movs	r0, #1
	}
	return 0;
}
   d59aa:	bd38      	pop	{r3, r4, r5, pc}

000d59ac <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d59ac:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d59ae:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d59b0:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d59b2:	b113      	cbz	r3, d59ba <_ZN6String7reserveEj+0xe>
   d59b4:	6843      	ldr	r3, [r0, #4]
   d59b6:	428b      	cmp	r3, r1
   d59b8:	d207      	bcs.n	d59ca <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d59ba:	4620      	mov	r0, r4
   d59bc:	f7ff ffea 	bl	d5994 <_ZN6String12changeBufferEj>
   d59c0:	b120      	cbz	r0, d59cc <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d59c2:	68a3      	ldr	r3, [r4, #8]
   d59c4:	b90b      	cbnz	r3, d59ca <_ZN6String7reserveEj+0x1e>
   d59c6:	6822      	ldr	r2, [r4, #0]
   d59c8:	7013      	strb	r3, [r2, #0]
   d59ca:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d59cc:	bd10      	pop	{r4, pc}

000d59ce <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d59ce:	b570      	push	{r4, r5, r6, lr}
   d59d0:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d59d2:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d59d4:	4604      	mov	r4, r0
   d59d6:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d59d8:	f7ff ffe8 	bl	d59ac <_ZN6String7reserveEj>
   d59dc:	b918      	cbnz	r0, d59e6 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d59de:	4620      	mov	r0, r4
   d59e0:	f7ff ffcd 	bl	d597e <_ZN6String10invalidateEv>
		return *this;
   d59e4:	e009      	b.n	d59fa <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d59e6:	462a      	mov	r2, r5
   d59e8:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d59ea:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d59ec:	6820      	ldr	r0, [r4, #0]
   d59ee:	f001 fa71 	bl	d6ed4 <memcpy>
	buffer[len] = 0;
   d59f2:	6822      	ldr	r2, [r4, #0]
   d59f4:	68a3      	ldr	r3, [r4, #8]
   d59f6:	2100      	movs	r1, #0
   d59f8:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d59fa:	4620      	mov	r0, r4
   d59fc:	bd70      	pop	{r4, r5, r6, pc}

000d59fe <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d59fe:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5a00:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d5a02:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5a04:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d5a06:	6043      	str	r3, [r0, #4]
	len = 0;
   d5a08:	6083      	str	r3, [r0, #8]
	flags = 0;
   d5a0a:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d5a0c:	460d      	mov	r5, r1
   d5a0e:	b139      	cbz	r1, d5a20 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d5a10:	4608      	mov	r0, r1
   d5a12:	f001 fac8 	bl	d6fa6 <strlen>
   d5a16:	4629      	mov	r1, r5
   d5a18:	4602      	mov	r2, r0
   d5a1a:	4620      	mov	r0, r4
   d5a1c:	f7ff ffd7 	bl	d59ce <_ZN6String4copyEPKcj>
}
   d5a20:	4620      	mov	r0, r4
   d5a22:	bd38      	pop	{r3, r4, r5, pc}

000d5a24 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d5a24:	b538      	push	{r3, r4, r5, lr}
   d5a26:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   d5a28:	460c      	mov	r4, r1
   d5a2a:	b141      	cbz	r1, d5a3e <_ZN6StringaSEPKc+0x1a>
   d5a2c:	4608      	mov	r0, r1
   d5a2e:	f001 faba 	bl	d6fa6 <strlen>
   d5a32:	4621      	mov	r1, r4
   d5a34:	4602      	mov	r2, r0
   d5a36:	4628      	mov	r0, r5
   d5a38:	f7ff ffc9 	bl	d59ce <_ZN6String4copyEPKcj>
   d5a3c:	e001      	b.n	d5a42 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   d5a3e:	f7ff ff9e 	bl	d597e <_ZN6String10invalidateEv>

	return *this;
}
   d5a42:	4628      	mov	r0, r5
   d5a44:	bd38      	pop	{r3, r4, r5, pc}

000d5a46 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d5a46:	b510      	push	{r4, lr}
   d5a48:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d5a4a:	6800      	ldr	r0, [r0, #0]
   d5a4c:	b118      	cbz	r0, d5a56 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   d5a4e:	f7ff f905 	bl	d4c5c <free>
            wakeupSource_ = nullptr;
   d5a52:	2300      	movs	r3, #0
   d5a54:	6023      	str	r3, [r4, #0]
   d5a56:	bd10      	pop	{r4, pc}

000d5a58 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d5a58:	b510      	push	{r4, lr}
   d5a5a:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d5a5c:	f7ff fff3 	bl	d5a46 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d5a60:	4620      	mov	r0, r4
   d5a62:	bd10      	pop	{r4, pc}

000d5a64 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d5a64:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d5a66:	4c09      	ldr	r4, [pc, #36]	; (d5a8c <_GLOBAL__sub_I_System+0x28>)
   d5a68:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d5a6a:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d5a6e:	6020      	str	r0, [r4, #0]
   d5a70:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d5a72:	71a0      	strb	r0, [r4, #6]
   d5a74:	8120      	strh	r0, [r4, #8]
   d5a76:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d5a78:	f7ff f824 	bl	d4ac4 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d5a7c:	4620      	mov	r0, r4
   d5a7e:	4a04      	ldr	r2, [pc, #16]	; (d5a90 <_GLOBAL__sub_I_System+0x2c>)
   d5a80:	4904      	ldr	r1, [pc, #16]	; (d5a94 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d5a82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d5a86:	f000 bac1 	b.w	d600c <__aeabi_atexit>
   d5a8a:	bf00      	nop
   d5a8c:	2003e580 	.word	0x2003e580
   d5a90:	2003e220 	.word	0x2003e220
   d5a94:	000d5a59 	.word	0x000d5a59

000d5a98 <_ZL22Refresh_UnixTime_Cachel>:
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d5a98:	b5f0      	push	{r4, r5, r6, r7, lr}
    unix_time += time_zone_cache;
   d5a9a:	4b14      	ldr	r3, [pc, #80]	; (d5aec <_ZL22Refresh_UnixTime_Cachel+0x54>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d5a9c:	4f14      	ldr	r7, [pc, #80]	; (d5af0 <_ZL22Refresh_UnixTime_Cachel+0x58>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   d5a9e:	681e      	ldr	r6, [r3, #0]
    unix_time += dst_current_cache;
   d5aa0:	4b14      	ldr	r3, [pc, #80]	; (d5af4 <_ZL22Refresh_UnixTime_Cachel+0x5c>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   d5aa2:	4406      	add	r6, r0
    unix_time += dst_current_cache;
   d5aa4:	6818      	ldr	r0, [r3, #0]
    if(unix_time != unix_time_cache)
   d5aa6:	683b      	ldr	r3, [r7, #0]

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
   d5aa8:	4406      	add	r6, r0
    if(unix_time != unix_time_cache)
   d5aaa:	429e      	cmp	r6, r3
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d5aac:	b08b      	sub	sp, #44	; 0x2c
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d5aae:	d01b      	beq.n	d5ae8 <_ZL22Refresh_UnixTime_Cachel+0x50>
   d5ab0:	a80a      	add	r0, sp, #40	; 0x28
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
	return *calendar_time;
   d5ab2:	ad01      	add	r5, sp, #4
   d5ab4:	f840 6d28 	str.w	r6, [r0, #-40]!

/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
   d5ab8:	f001 f910 	bl	d6cdc <localtime>
	calendar_time->tm_year += 1900;
   d5abc:	6943      	ldr	r3, [r0, #20]
   d5abe:	f203 736c 	addw	r3, r3, #1900	; 0x76c
   d5ac2:	6143      	str	r3, [r0, #20]
	return *calendar_time;
   d5ac4:	4604      	mov	r4, r0
   d5ac6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d5ac8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d5aca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d5acc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d5ace:	f8d4 e000 	ldr.w	lr, [r4]
   d5ad2:	f8c5 e000 	str.w	lr, [r5]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d5ad6:	ad01      	add	r5, sp, #4
   d5ad8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5ada:	4c07      	ldr	r4, [pc, #28]	; (d5af8 <_ZL22Refresh_UnixTime_Cachel+0x60>)
   d5adc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5ade:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5ae0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   d5ae2:	603e      	str	r6, [r7, #0]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d5ae4:	f8c4 e000 	str.w	lr, [r4]
            unix_time_cache = unix_time;
    }
}
   d5ae8:	b00b      	add	sp, #44	; 0x2c
   d5aea:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5aec:	2003e5bc 	.word	0x2003e5bc
   d5af0:	2003e5b8 	.word	0x2003e5b8
   d5af4:	2003e5b4 	.word	0x2003e5b4
   d5af8:	2003e58c 	.word	0x2003e58c

000d5afc <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   d5afc:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d5afe:	2000      	movs	r0, #0
   d5b00:	f7ff f844 	bl	d4b8c <spark_sync_time_pending>
   d5b04:	b128      	cbz	r0, d5b12 <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5b06:	f7ff f821 	bl	d4b4c <spark_cloud_flag_connected>
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d5b0a:	f080 0001 	eor.w	r0, r0, #1
   d5b0e:	b2c0      	uxtb	r0, r0
   d5b10:	bd08      	pop	{r3, pc}
   d5b12:	2001      	movs	r0, #1
    }
   d5b14:	bd08      	pop	{r3, pc}
	...

000d5b18 <_ZN9TimeClass12hourFormat12El>:
	return hourFormat12(now());
}

/* the hour for the given time in 12 hour format */
int TimeClass::hourFormat12(time_t t)
{
   d5b18:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   d5b1a:	f7ff ffbd 	bl	d5a98 <_ZL22Refresh_UnixTime_Cachel>
	if(calendar_time_cache.tm_hour == 0)
   d5b1e:	4b04      	ldr	r3, [pc, #16]	; (d5b30 <_ZN9TimeClass12hourFormat12El+0x18>)
   d5b20:	6898      	ldr	r0, [r3, #8]
   d5b22:	b118      	cbz	r0, d5b2c <_ZN9TimeClass12hourFormat12El+0x14>
		return 12;	//midnight
	else if( calendar_time_cache.tm_hour > 12)
   d5b24:	280c      	cmp	r0, #12
   d5b26:	dd02      	ble.n	d5b2e <_ZN9TimeClass12hourFormat12El+0x16>
		return calendar_time_cache.tm_hour - 12 ;
   d5b28:	380c      	subs	r0, #12
   d5b2a:	bd08      	pop	{r3, pc}
/* the hour for the given time in 12 hour format */
int TimeClass::hourFormat12(time_t t)
{
	Refresh_UnixTime_Cache(t);
	if(calendar_time_cache.tm_hour == 0)
		return 12;	//midnight
   d5b2c:	200c      	movs	r0, #12
	else if( calendar_time_cache.tm_hour > 12)
		return calendar_time_cache.tm_hour - 12 ;
	else
		return calendar_time_cache.tm_hour ;
}
   d5b2e:	bd08      	pop	{r3, pc}
   d5b30:	2003e58c 	.word	0x2003e58c

000d5b34 <_ZN9TimeClass4zoneEf>:
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
	if(GMT_Offset < -12 || GMT_Offset > 14)
   d5b34:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
   d5b38:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d5b3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d5b40:	d40f      	bmi.n	d5b62 <_ZN9TimeClass4zoneEf+0x2e>
   d5b42:	eef2 7a0c 	vmov.f32	s15, #44	; 0x41600000  14.0
   d5b46:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d5b4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d5b4e:	dc08      	bgt.n	d5b62 <_ZN9TimeClass4zoneEf+0x2e>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
   d5b50:	eddf 7a04 	vldr	s15, [pc, #16]	; d5b64 <_ZN9TimeClass4zoneEf+0x30>
   d5b54:	4b04      	ldr	r3, [pc, #16]	; (d5b68 <_ZN9TimeClass4zoneEf+0x34>)
   d5b56:	ee20 0a27 	vmul.f32	s0, s0, s15
   d5b5a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   d5b5e:	ed83 0a00 	vstr	s0, [r3]
   d5b62:	4770      	bx	lr
   d5b64:	45610000 	.word	0x45610000
   d5b68:	2003e5bc 	.word	0x2003e5bc

000d5b6c <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d5b6c:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
   d5b6e:	2000      	movs	r0, #0
   d5b70:	f7fe feb8 	bl	d48e4 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
   d5b74:	4604      	mov	r4, r0
   d5b76:	b968      	cbnz	r0, d5b94 <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d5b78:	f7fe ff9c 	bl	d4ab4 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d5b7c:	2801      	cmp	r0, #1
   d5b7e:	d10b      	bne.n	d5b98 <_ZN9TimeClass7isValidEv+0x2c>
   d5b80:	4620      	mov	r0, r4
   d5b82:	f7fe ffbf 	bl	d4b04 <system_thread_get_state>
   d5b86:	b938      	cbnz	r0, d5b98 <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
   d5b88:	f7ff ffb8 	bl	d5afc <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d5b8c:	b930      	cbnz	r0, d5b9c <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
   d5b8e:	f7fe ffd5 	bl	d4b3c <spark_process>
   d5b92:	e7f9      	b.n	d5b88 <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
   d5b94:	2001      	movs	r0, #1
   d5b96:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
   d5b98:	2000      	movs	r0, #0
   d5b9a:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
   d5b9c:	f7ff ffae 	bl	d5afc <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
   d5ba0:	2000      	movs	r0, #0
   d5ba2:	f7fe fe9f 	bl	d48e4 <HAL_RTC_Time_Is_Valid>
   d5ba6:	3000      	adds	r0, #0
   d5ba8:	bf18      	it	ne
   d5baa:	2001      	movne	r0, #1
    }
    return rtcstate;
}
   d5bac:	bd10      	pop	{r4, pc}

000d5bae <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
   d5bae:	b508      	push	{r3, lr}
    (void)isValid();
   d5bb0:	f7ff ffdc 	bl	d5b6c <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
   d5bb4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
   d5bb8:	f7fe be8c 	b.w	d48d4 <HAL_RTC_Get_UnixTime>

000d5bbc <_ZN9TimeClass12hourFormat12Ev>:
	return calendar_time_cache.tm_hour;
}

/* current hour in 12 hour format */
int TimeClass::hourFormat12()
{
   d5bbc:	b508      	push	{r3, lr}
	return hourFormat12(now());
   d5bbe:	f7ff fff6 	bl	d5bae <_ZN9TimeClass3nowEv>
}
   d5bc2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
}

/* current hour in 12 hour format */
int TimeClass::hourFormat12()
{
	return hourFormat12(now());
   d5bc6:	f7ff bfa7 	b.w	d5b18 <_ZN9TimeClass12hourFormat12El>
	...

000d5bcc <_ZN9TimeClass6minuteEv>:
	return (hour(t) >= 12);
}

/* current minute */
int TimeClass::minute()
{
   d5bcc:	b508      	push	{r3, lr}
	return minute(now());
   d5bce:	f7ff ffee 	bl	d5bae <_ZN9TimeClass3nowEv>
}

/* the minute for the given time */
int TimeClass::minute(time_t t)
{
	Refresh_UnixTime_Cache(t);
   d5bd2:	f7ff ff61 	bl	d5a98 <_ZL22Refresh_UnixTime_Cachel>

/* current minute */
int TimeClass::minute()
{
	return minute(now());
}
   d5bd6:	4b01      	ldr	r3, [pc, #4]	; (d5bdc <_ZN9TimeClass6minuteEv+0x10>)
   d5bd8:	6858      	ldr	r0, [r3, #4]
   d5bda:	bd08      	pop	{r3, pc}
   d5bdc:	2003e58c 	.word	0x2003e58c

000d5be0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d5be0:	4b02      	ldr	r3, [pc, #8]	; (d5bec <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d5be2:	681a      	ldr	r2, [r3, #0]
   d5be4:	4b02      	ldr	r3, [pc, #8]	; (d5bf0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d5be6:	601a      	str	r2, [r3, #0]
   d5be8:	4770      	bx	lr
   d5bea:	bf00      	nop
   d5bec:	2003e130 	.word	0x2003e130
   d5bf0:	2003e5b0 	.word	0x2003e5b0

000d5bf4 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d5bf4:	4770      	bx	lr

000d5bf6 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5bf6:	7441      	strb	r1, [r0, #17]
   d5bf8:	4770      	bx	lr

000d5bfa <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d5bfa:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d5bfc:	7c00      	ldrb	r0, [r0, #16]
   d5bfe:	f7fe ff11 	bl	d4a24 <HAL_USART_Available_Data_For_Write>
}
   d5c02:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5c06:	bd08      	pop	{r3, pc}

000d5c08 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d5c08:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d5c0a:	7c00      	ldrb	r0, [r0, #16]
   d5c0c:	f7fe feea 	bl	d49e4 <HAL_USART_Available_Data>
}
   d5c10:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5c14:	bd08      	pop	{r3, pc}

000d5c16 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d5c16:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d5c18:	7c00      	ldrb	r0, [r0, #16]
   d5c1a:	f7fe fef3 	bl	d4a04 <HAL_USART_Peek_Data>
}
   d5c1e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5c22:	bf28      	it	cs
   d5c24:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d5c28:	bd08      	pop	{r3, pc}

000d5c2a <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d5c2a:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d5c2c:	7c00      	ldrb	r0, [r0, #16]
   d5c2e:	f7fe fee1 	bl	d49f4 <HAL_USART_Read_Data>
}
   d5c32:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5c36:	bf28      	it	cs
   d5c38:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d5c3c:	bd08      	pop	{r3, pc}

000d5c3e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d5c3e:	7c00      	ldrb	r0, [r0, #16]
   d5c40:	f7fe bee8 	b.w	d4a14 <HAL_USART_Flush_Data>

000d5c44 <_ZN11USARTSerialD0Ev>:
   d5c44:	b510      	push	{r4, lr}
   d5c46:	2114      	movs	r1, #20
   d5c48:	4604      	mov	r4, r0
   d5c4a:	f000 f9e4 	bl	d6016 <_ZdlPvj>
   d5c4e:	4620      	mov	r0, r4
   d5c50:	bd10      	pop	{r4, pc}

000d5c52 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d5c52:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5c54:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d5c56:	4604      	mov	r4, r0
   d5c58:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5c5a:	b925      	cbnz	r5, d5c66 <_ZN11USARTSerial5writeEh+0x14>
   d5c5c:	7c00      	ldrb	r0, [r0, #16]
   d5c5e:	f7fe fee1 	bl	d4a24 <HAL_USART_Available_Data_For_Write>
   d5c62:	2800      	cmp	r0, #0
   d5c64:	dd05      	ble.n	d5c72 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d5c66:	4631      	mov	r1, r6
   d5c68:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d5c6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d5c6e:	f7fe beb1 	b.w	d49d4 <HAL_USART_Write_Data>
  }
  return 0;
}
   d5c72:	4628      	mov	r0, r5
   d5c74:	bd70      	pop	{r4, r5, r6, pc}
	...

000d5c78 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d5c78:	b510      	push	{r4, lr}
   d5c7a:	4604      	mov	r4, r0
   d5c7c:	4608      	mov	r0, r1
   d5c7e:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d5c80:	2200      	movs	r2, #0
   d5c82:	6062      	str	r2, [r4, #4]
   d5c84:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5c88:	60a2      	str	r2, [r4, #8]
   d5c8a:	4a05      	ldr	r2, [pc, #20]	; (d5ca0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d5c8c:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d5c8e:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d5c90:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d5c92:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d5c94:	461a      	mov	r2, r3
   d5c96:	f7fe fe95 	bl	d49c4 <HAL_USART_Init>
}
   d5c9a:	4620      	mov	r0, r4
   d5c9c:	bd10      	pop	{r4, pc}
   d5c9e:	bf00      	nop
   d5ca0:	000d97a8 	.word	0x000d97a8

000d5ca4 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d5ca4:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d5ca6:	4d0c      	ldr	r5, [pc, #48]	; (d5cd8 <_Z22__fetch_global_Serial1v+0x34>)
   d5ca8:	6829      	ldr	r1, [r5, #0]
   d5caa:	f011 0401 	ands.w	r4, r1, #1
   d5cae:	d111      	bne.n	d5cd4 <_Z22__fetch_global_Serial1v+0x30>
   d5cb0:	4628      	mov	r0, r5
   d5cb2:	f7fe f9f8 	bl	d40a6 <__cxa_guard_acquire>
   d5cb6:	b168      	cbz	r0, d5cd4 <_Z22__fetch_global_Serial1v+0x30>
   d5cb8:	4a08      	ldr	r2, [pc, #32]	; (d5cdc <_Z22__fetch_global_Serial1v+0x38>)
   d5cba:	4b09      	ldr	r3, [pc, #36]	; (d5ce0 <_Z22__fetch_global_Serial1v+0x3c>)
   d5cbc:	4809      	ldr	r0, [pc, #36]	; (d5ce4 <_Z22__fetch_global_Serial1v+0x40>)
   d5cbe:	4621      	mov	r1, r4
   d5cc0:	f7ff ffda 	bl	d5c78 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d5cc4:	4628      	mov	r0, r5
   d5cc6:	f7fe f9f3 	bl	d40b0 <__cxa_guard_release>
   d5cca:	4a07      	ldr	r2, [pc, #28]	; (d5ce8 <_Z22__fetch_global_Serial1v+0x44>)
   d5ccc:	4907      	ldr	r1, [pc, #28]	; (d5cec <_Z22__fetch_global_Serial1v+0x48>)
   d5cce:	4805      	ldr	r0, [pc, #20]	; (d5ce4 <_Z22__fetch_global_Serial1v+0x40>)
   d5cd0:	f000 f99c 	bl	d600c <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d5cd4:	4803      	ldr	r0, [pc, #12]	; (d5ce4 <_Z22__fetch_global_Serial1v+0x40>)
   d5cd6:	bd38      	pop	{r3, r4, r5, pc}
   d5cd8:	2003e658 	.word	0x2003e658
   d5cdc:	2003e65c 	.word	0x2003e65c
   d5ce0:	2003e5d4 	.word	0x2003e5d4
   d5ce4:	2003e5c0 	.word	0x2003e5c0
   d5ce8:	2003e220 	.word	0x2003e220
   d5cec:	000d5bf5 	.word	0x000d5bf5

000d5cf0 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5cf0:	7441      	strb	r1, [r0, #17]
   d5cf2:	4770      	bx	lr

000d5cf4 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d5cf4:	4770      	bx	lr

000d5cf6 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d5cf6:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d5cf8:	2100      	movs	r1, #0
   d5cfa:	7c00      	ldrb	r0, [r0, #16]
   d5cfc:	f7fe feba 	bl	d4a74 <HAL_USB_USART_Receive_Data>
}
   d5d00:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5d04:	bf28      	it	cs
   d5d06:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d5d0a:	bd08      	pop	{r3, pc}

000d5d0c <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d5d0c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d5d0e:	2101      	movs	r1, #1
   d5d10:	7c00      	ldrb	r0, [r0, #16]
   d5d12:	f7fe feaf 	bl	d4a74 <HAL_USB_USART_Receive_Data>
}
   d5d16:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5d1a:	bf28      	it	cs
   d5d1c:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d5d20:	bd08      	pop	{r3, pc}

000d5d22 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d5d22:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d5d24:	7c00      	ldrb	r0, [r0, #16]
   d5d26:	f7fe fe9d 	bl	d4a64 <HAL_USB_USART_Available_Data_For_Write>
}
   d5d2a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5d2e:	bd08      	pop	{r3, pc}

000d5d30 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d5d30:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d5d32:	7c00      	ldrb	r0, [r0, #16]
   d5d34:	f7fe fe8e 	bl	d4a54 <HAL_USB_USART_Available_Data>
}
   d5d38:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5d3c:	bd08      	pop	{r3, pc}

000d5d3e <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d5d3e:	7c00      	ldrb	r0, [r0, #16]
   d5d40:	f7fe bea8 	b.w	d4a94 <HAL_USB_USART_Flush_Data>

000d5d44 <_ZN9USBSerialD0Ev>:
   d5d44:	b510      	push	{r4, lr}
   d5d46:	2114      	movs	r1, #20
   d5d48:	4604      	mov	r4, r0
   d5d4a:	f000 f964 	bl	d6016 <_ZdlPvj>
   d5d4e:	4620      	mov	r0, r4
   d5d50:	bd10      	pop	{r4, pc}

000d5d52 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d5d52:	b538      	push	{r3, r4, r5, lr}
   d5d54:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5d56:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d5d58:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5d5a:	f7fe fe83 	bl	d4a64 <HAL_USB_USART_Available_Data_For_Write>
   d5d5e:	2800      	cmp	r0, #0
   d5d60:	dc01      	bgt.n	d5d66 <_ZN9USBSerial5writeEh+0x14>
   d5d62:	7c60      	ldrb	r0, [r4, #17]
   d5d64:	b128      	cbz	r0, d5d72 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d5d66:	4629      	mov	r1, r5
   d5d68:	7c20      	ldrb	r0, [r4, #16]
   d5d6a:	f7fe fe8b 	bl	d4a84 <HAL_USB_USART_Send_Data>
   d5d6e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d5d72:	bd38      	pop	{r3, r4, r5, pc}

000d5d74 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5d74:	b510      	push	{r4, lr}
   d5d76:	4604      	mov	r4, r0
   d5d78:	2300      	movs	r3, #0
   d5d7a:	6063      	str	r3, [r4, #4]
   d5d7c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5d80:	60a3      	str	r3, [r4, #8]
   d5d82:	4b05      	ldr	r3, [pc, #20]	; (d5d98 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d5d84:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d5d86:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5d88:	4608      	mov	r0, r1
{
  _serial = serial;
   d5d8a:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d5d8c:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d5d8e:	4611      	mov	r1, r2
   d5d90:	f7fe fe50 	bl	d4a34 <HAL_USB_USART_Init>
}
   d5d94:	4620      	mov	r0, r4
   d5d96:	bd10      	pop	{r4, pc}
   d5d98:	000d97d8 	.word	0x000d97d8

000d5d9c <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d5d9c:	2200      	movs	r2, #0
   d5d9e:	7c00      	ldrb	r0, [r0, #16]
   d5da0:	f7fe be50 	b.w	d4a44 <HAL_USB_USART_Begin>

000d5da4 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5da4:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d5da6:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5da8:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d5daa:	2100      	movs	r1, #0
   d5dac:	f001 f89d 	bl	d6eea <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d5db0:	4620      	mov	r0, r4
   d5db2:	bd10      	pop	{r4, pc}

000d5db4 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d5db4:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5db6:	4d0e      	ldr	r5, [pc, #56]	; (d5df0 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d5db8:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d5dba:	a801      	add	r0, sp, #4
   d5dbc:	f7ff fff2 	bl	d5da4 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5dc0:	6829      	ldr	r1, [r5, #0]
   d5dc2:	f011 0401 	ands.w	r4, r1, #1
   d5dc6:	d110      	bne.n	d5dea <_Z16_fetch_usbserialv+0x36>
   d5dc8:	4628      	mov	r0, r5
   d5dca:	f7fe f96c 	bl	d40a6 <__cxa_guard_acquire>
   d5dce:	b160      	cbz	r0, d5dea <_Z16_fetch_usbserialv+0x36>
   d5dd0:	aa01      	add	r2, sp, #4
   d5dd2:	4621      	mov	r1, r4
   d5dd4:	4807      	ldr	r0, [pc, #28]	; (d5df4 <_Z16_fetch_usbserialv+0x40>)
   d5dd6:	f7ff ffcd 	bl	d5d74 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d5dda:	4628      	mov	r0, r5
   d5ddc:	f7fe f968 	bl	d40b0 <__cxa_guard_release>
   d5de0:	4a05      	ldr	r2, [pc, #20]	; (d5df8 <_Z16_fetch_usbserialv+0x44>)
   d5de2:	4906      	ldr	r1, [pc, #24]	; (d5dfc <_Z16_fetch_usbserialv+0x48>)
   d5de4:	4803      	ldr	r0, [pc, #12]	; (d5df4 <_Z16_fetch_usbserialv+0x40>)
   d5de6:	f000 f911 	bl	d600c <__aeabi_atexit>
	return _usbserial;
}
   d5dea:	4802      	ldr	r0, [pc, #8]	; (d5df4 <_Z16_fetch_usbserialv+0x40>)
   d5dec:	b007      	add	sp, #28
   d5dee:	bd30      	pop	{r4, r5, pc}
   d5df0:	2003e6e0 	.word	0x2003e6e0
   d5df4:	2003e6e4 	.word	0x2003e6e4
   d5df8:	2003e220 	.word	0x2003e220
   d5dfc:	000d5cf5 	.word	0x000d5cf5

000d5e00 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d5e00:	2200      	movs	r2, #0
   d5e02:	4611      	mov	r1, r2
   d5e04:	6840      	ldr	r0, [r0, #4]
   d5e06:	f7fe bee9 	b.w	d4bdc <network_ready>

000d5e0a <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5e0a:	2200      	movs	r2, #0
   d5e0c:	4611      	mov	r1, r2
   d5e0e:	6840      	ldr	r0, [r0, #4]
   d5e10:	f7fe bf04 	b.w	d4c1c <network_listening>

000d5e14 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5e14:	2200      	movs	r2, #0
   d5e16:	4611      	mov	r1, r2
   d5e18:	6840      	ldr	r0, [r0, #4]
   d5e1a:	f7fe bf0f 	b.w	d4c3c <network_get_listen_timeout>

000d5e1e <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5e1e:	2200      	movs	r2, #0
   d5e20:	6840      	ldr	r0, [r0, #4]
   d5e22:	f7fe bf03 	b.w	d4c2c <network_set_listen_timeout>

000d5e26 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5e26:	2200      	movs	r2, #0
   d5e28:	f081 0101 	eor.w	r1, r1, #1
   d5e2c:	6840      	ldr	r0, [r0, #4]
   d5e2e:	f7fe beed 	b.w	d4c0c <network_listen>

000d5e32 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d5e32:	2300      	movs	r3, #0
   d5e34:	461a      	mov	r2, r3
   d5e36:	4619      	mov	r1, r3
   d5e38:	6840      	ldr	r0, [r0, #4]
   d5e3a:	f7fe bedf 	b.w	d4bfc <network_off>

000d5e3e <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d5e3e:	2300      	movs	r3, #0
   d5e40:	461a      	mov	r2, r3
   d5e42:	4619      	mov	r1, r3
   d5e44:	6840      	ldr	r0, [r0, #4]
   d5e46:	f7fe bed1 	b.w	d4bec <network_on>

000d5e4a <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5e4a:	2200      	movs	r2, #0
   d5e4c:	4611      	mov	r1, r2
   d5e4e:	6840      	ldr	r0, [r0, #4]
   d5e50:	f7fe beb4 	b.w	d4bbc <network_connecting>

000d5e54 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5e54:	2200      	movs	r2, #0
   d5e56:	2102      	movs	r1, #2
   d5e58:	6840      	ldr	r0, [r0, #4]
   d5e5a:	f7fe beb7 	b.w	d4bcc <network_disconnect>

000d5e5e <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5e5e:	2300      	movs	r3, #0
   d5e60:	461a      	mov	r2, r3
   d5e62:	6840      	ldr	r0, [r0, #4]
   d5e64:	f7fe bea2 	b.w	d4bac <network_connect>

000d5e68 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d5e68:	4b02      	ldr	r3, [pc, #8]	; (d5e74 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d5e6a:	2204      	movs	r2, #4
   d5e6c:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d5e6e:	4a02      	ldr	r2, [pc, #8]	; (d5e78 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d5e70:	601a      	str	r2, [r3, #0]
   d5e72:	4770      	bx	lr
   d5e74:	2003e6f8 	.word	0x2003e6f8
   d5e78:	000d9808 	.word	0x000d9808

000d5e7c <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d5e7c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d5e7e:	4b0c      	ldr	r3, [pc, #48]	; (d5eb0 <serialEventRun+0x34>)
   d5e80:	b133      	cbz	r3, d5e90 <serialEventRun+0x14>
   d5e82:	f7ff ff97 	bl	d5db4 <_Z16_fetch_usbserialv>
   d5e86:	6803      	ldr	r3, [r0, #0]
   d5e88:	691b      	ldr	r3, [r3, #16]
   d5e8a:	4798      	blx	r3
   d5e8c:	2800      	cmp	r0, #0
   d5e8e:	dc09      	bgt.n	d5ea4 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d5e90:	4b08      	ldr	r3, [pc, #32]	; (d5eb4 <serialEventRun+0x38>)
   d5e92:	b163      	cbz	r3, d5eae <serialEventRun+0x32>
   d5e94:	f7ff ff06 	bl	d5ca4 <_Z22__fetch_global_Serial1v>
   d5e98:	6803      	ldr	r3, [r0, #0]
   d5e9a:	691b      	ldr	r3, [r3, #16]
   d5e9c:	4798      	blx	r3
   d5e9e:	2800      	cmp	r0, #0
   d5ea0:	dc03      	bgt.n	d5eaa <serialEventRun+0x2e>
   d5ea2:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d5ea4:	f3af 8000 	nop.w
   d5ea8:	e7f2      	b.n	d5e90 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d5eaa:	f3af 8000 	nop.w
   d5eae:	bd08      	pop	{r3, pc}
	...

000d5eb8 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d5eb8:	b508      	push	{r3, lr}
	serialEventRun();
   d5eba:	f7ff ffdf 	bl	d5e7c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d5ebe:	f7fe fd01 	bl	d48c4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d5ec2:	4b01      	ldr	r3, [pc, #4]	; (d5ec8 <_post_loop+0x10>)
   d5ec4:	6018      	str	r0, [r3, #0]
   d5ec6:	bd08      	pop	{r3, pc}
   d5ec8:	2003e708 	.word	0x2003e708

000d5ecc <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d5ecc:	4802      	ldr	r0, [pc, #8]	; (d5ed8 <_Z33system_initialize_user_backup_ramv+0xc>)
   d5ece:	4a03      	ldr	r2, [pc, #12]	; (d5edc <_Z33system_initialize_user_backup_ramv+0x10>)
   d5ed0:	4903      	ldr	r1, [pc, #12]	; (d5ee0 <_Z33system_initialize_user_backup_ramv+0x14>)
   d5ed2:	1a12      	subs	r2, r2, r0
   d5ed4:	f000 bffe 	b.w	d6ed4 <memcpy>
   d5ed8:	2003f400 	.word	0x2003f400
   d5edc:	2003f404 	.word	0x2003f404
   d5ee0:	000d9be0 	.word	0x000d9be0

000d5ee4 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d5ee4:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5ee6:	2300      	movs	r3, #0
   d5ee8:	9300      	str	r3, [sp, #0]
   d5eea:	461a      	mov	r2, r3
   d5eec:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5ef0:	f7fe fe1a 	bl	d4b28 <system_ctrl_set_result>
}
   d5ef4:	b003      	add	sp, #12
   d5ef6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d5efc <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d5efc:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d5efe:	8843      	ldrh	r3, [r0, #2]
   d5f00:	2b0a      	cmp	r3, #10
   d5f02:	d008      	beq.n	d5f16 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d5f04:	2b50      	cmp	r3, #80	; 0x50
   d5f06:	d109      	bne.n	d5f1c <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d5f08:	4b09      	ldr	r3, [pc, #36]	; (d5f30 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d5f0a:	681b      	ldr	r3, [r3, #0]
   d5f0c:	b13b      	cbz	r3, d5f1e <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d5f0e:	b003      	add	sp, #12
   d5f10:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d5f14:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d5f16:	f7ff ffe5 	bl	d5ee4 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d5f1a:	e006      	b.n	d5f2a <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5f1c:	2300      	movs	r3, #0
   d5f1e:	9300      	str	r3, [sp, #0]
   d5f20:	461a      	mov	r2, r3
   d5f22:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5f26:	f7fe fdff 	bl	d4b28 <system_ctrl_set_result>
        break;
    }
}
   d5f2a:	b003      	add	sp, #12
   d5f2c:	f85d fb04 	ldr.w	pc, [sp], #4
   d5f30:	2003e700 	.word	0x2003e700

000d5f34 <module_user_init_hook>:

void module_user_init_hook()
{
   d5f34:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d5f36:	4c10      	ldr	r4, [pc, #64]	; (d5f78 <module_user_init_hook+0x44>)
   d5f38:	4d10      	ldr	r5, [pc, #64]	; (d5f7c <module_user_init_hook+0x48>)
   d5f3a:	6823      	ldr	r3, [r4, #0]
   d5f3c:	42ab      	cmp	r3, r5
   d5f3e:	4b10      	ldr	r3, [pc, #64]	; (d5f80 <module_user_init_hook+0x4c>)
   d5f40:	bf0c      	ite	eq
   d5f42:	2201      	moveq	r2, #1
   d5f44:	2200      	movne	r2, #0
   d5f46:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d5f48:	d002      	beq.n	d5f50 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d5f4a:	f7ff ffbf 	bl	d5ecc <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d5f4e:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d5f50:	f7fe fcb0 	bl	d48b4 <HAL_RNG_GetRandomNumber>
   d5f54:	4604      	mov	r4, r0
    srand(seed);
   d5f56:	f000 ffd1 	bl	d6efc <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d5f5a:	4b0a      	ldr	r3, [pc, #40]	; (d5f84 <module_user_init_hook+0x50>)
   d5f5c:	b113      	cbz	r3, d5f64 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d5f5e:	4620      	mov	r0, r4
   d5f60:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d5f64:	2100      	movs	r1, #0
   d5f66:	4807      	ldr	r0, [pc, #28]	; (d5f84 <module_user_init_hook+0x50>)
   d5f68:	f7fe fe18 	bl	d4b9c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5f6c:	2100      	movs	r1, #0
   d5f6e:	4806      	ldr	r0, [pc, #24]	; (d5f88 <module_user_init_hook+0x54>)
}
   d5f70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5f74:	f7fe bdce 	b.w	d4b14 <system_ctrl_set_app_request_handler>
   d5f78:	2003f400 	.word	0x2003f400
   d5f7c:	9a271c1e 	.word	0x9a271c1e
   d5f80:	2003e704 	.word	0x2003e704
   d5f84:	00000000 	.word	0x00000000
   d5f88:	000d5efd 	.word	0x000d5efd

000d5f8c <_Z17acquireWireBufferv>:
   d5f8c:	b570      	push	{r4, r5, r6, lr}
   d5f8e:	4604      	mov	r4, r0
   d5f90:	2514      	movs	r5, #20
   d5f92:	462a      	mov	r2, r5
   d5f94:	4e09      	ldr	r6, [pc, #36]	; (d5fbc <_Z17acquireWireBufferv+0x30>)
   d5f96:	2100      	movs	r1, #0
   d5f98:	f000 ffa7 	bl	d6eea <memset>
   d5f9c:	8025      	strh	r5, [r4, #0]
   d5f9e:	2520      	movs	r5, #32
   d5fa0:	4631      	mov	r1, r6
   d5fa2:	60a5      	str	r5, [r4, #8]
   d5fa4:	6125      	str	r5, [r4, #16]
   d5fa6:	4628      	mov	r0, r5
   d5fa8:	f000 f84f 	bl	d604a <_ZnajRKSt9nothrow_t>
   d5fac:	4631      	mov	r1, r6
   d5fae:	6060      	str	r0, [r4, #4]
   d5fb0:	4628      	mov	r0, r5
   d5fb2:	f000 f84a 	bl	d604a <_ZnajRKSt9nothrow_t>
   d5fb6:	60e0      	str	r0, [r4, #12]
   d5fb8:	4620      	mov	r0, r4
   d5fba:	bd70      	pop	{r4, r5, r6, pc}
   d5fbc:	000d9834 	.word	0x000d9834

000d5fc0 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d5fc0:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d5fc2:	4d0e      	ldr	r5, [pc, #56]	; (d5ffc <_Z19__fetch_global_Wirev+0x3c>)
   d5fc4:	6829      	ldr	r1, [r5, #0]
   d5fc6:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d5fca:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d5fcc:	d113      	bne.n	d5ff6 <_Z19__fetch_global_Wirev+0x36>
   d5fce:	4628      	mov	r0, r5
   d5fd0:	f7fe f869 	bl	d40a6 <__cxa_guard_acquire>
   d5fd4:	b178      	cbz	r0, d5ff6 <_Z19__fetch_global_Wirev+0x36>
   d5fd6:	a801      	add	r0, sp, #4
   d5fd8:	f7ff ffd8 	bl	d5f8c <_Z17acquireWireBufferv>
   d5fdc:	aa01      	add	r2, sp, #4
   d5fde:	4621      	mov	r1, r4
   d5fe0:	4807      	ldr	r0, [pc, #28]	; (d6000 <_Z19__fetch_global_Wirev+0x40>)
   d5fe2:	f7ff fa15 	bl	d5410 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d5fe6:	4628      	mov	r0, r5
   d5fe8:	f7fe f862 	bl	d40b0 <__cxa_guard_release>
   d5fec:	4a05      	ldr	r2, [pc, #20]	; (d6004 <_Z19__fetch_global_Wirev+0x44>)
   d5fee:	4906      	ldr	r1, [pc, #24]	; (d6008 <_Z19__fetch_global_Wirev+0x48>)
   d5ff0:	4803      	ldr	r0, [pc, #12]	; (d6000 <_Z19__fetch_global_Wirev+0x40>)
   d5ff2:	f000 f80b 	bl	d600c <__aeabi_atexit>
	return wire;
}
   d5ff6:	4802      	ldr	r0, [pc, #8]	; (d6000 <_Z19__fetch_global_Wirev+0x40>)
   d5ff8:	b007      	add	sp, #28
   d5ffa:	bd30      	pop	{r4, r5, pc}
   d5ffc:	2003e70c 	.word	0x2003e70c
   d6000:	2003e710 	.word	0x2003e710
   d6004:	2003e220 	.word	0x2003e220
   d6008:	000d53b9 	.word	0x000d53b9

000d600c <__aeabi_atexit>:
   d600c:	460b      	mov	r3, r1
   d600e:	4601      	mov	r1, r0
   d6010:	4618      	mov	r0, r3
   d6012:	f000 be55 	b.w	d6cc0 <__cxa_atexit>

000d6016 <_ZdlPvj>:
   d6016:	f7fe b842 	b.w	d409e <_ZdlPv>
	...

000d601c <_ZSt15get_new_handlerv>:
   d601c:	4b02      	ldr	r3, [pc, #8]	; (d6028 <_ZSt15get_new_handlerv+0xc>)
   d601e:	6818      	ldr	r0, [r3, #0]
   d6020:	f3bf 8f5f 	dmb	sy
   d6024:	4770      	bx	lr
   d6026:	bf00      	nop
   d6028:	2003e724 	.word	0x2003e724

000d602c <_ZnwjRKSt9nothrow_t>:
   d602c:	b510      	push	{r4, lr}
   d602e:	2800      	cmp	r0, #0
   d6030:	bf14      	ite	ne
   d6032:	4604      	movne	r4, r0
   d6034:	2401      	moveq	r4, #1
   d6036:	4620      	mov	r0, r4
   d6038:	f7fe fe08 	bl	d4c4c <malloc>
   d603c:	b920      	cbnz	r0, d6048 <_ZnwjRKSt9nothrow_t+0x1c>
   d603e:	f7ff ffed 	bl	d601c <_ZSt15get_new_handlerv>
   d6042:	b108      	cbz	r0, d6048 <_ZnwjRKSt9nothrow_t+0x1c>
   d6044:	4780      	blx	r0
   d6046:	e7f6      	b.n	d6036 <_ZnwjRKSt9nothrow_t+0xa>
   d6048:	bd10      	pop	{r4, pc}

000d604a <_ZnajRKSt9nothrow_t>:
   d604a:	f7ff bfef 	b.w	d602c <_ZnwjRKSt9nothrow_t>

000d604e <_ZSt25__throw_bad_function_callv>:
   d604e:	b508      	push	{r3, lr}
   d6050:	f7fe fe2c 	bl	d4cac <abort>

000d6054 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d6054:	4b24      	ldr	r3, [pc, #144]	; (d60e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d6056:	681a      	ldr	r2, [r3, #0]
   d6058:	07d0      	lsls	r0, r2, #31
   d605a:	bf5c      	itt	pl
   d605c:	2201      	movpl	r2, #1
   d605e:	601a      	strpl	r2, [r3, #0]
   d6060:	4b22      	ldr	r3, [pc, #136]	; (d60ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d6062:	681a      	ldr	r2, [r3, #0]
   d6064:	07d1      	lsls	r1, r2, #31
   d6066:	bf5c      	itt	pl
   d6068:	2201      	movpl	r2, #1
   d606a:	601a      	strpl	r2, [r3, #0]
   d606c:	4b20      	ldr	r3, [pc, #128]	; (d60f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d606e:	681a      	ldr	r2, [r3, #0]
   d6070:	07d2      	lsls	r2, r2, #31
   d6072:	bf5c      	itt	pl
   d6074:	2201      	movpl	r2, #1
   d6076:	601a      	strpl	r2, [r3, #0]
   d6078:	4b1e      	ldr	r3, [pc, #120]	; (d60f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d607a:	681a      	ldr	r2, [r3, #0]
   d607c:	07d0      	lsls	r0, r2, #31
   d607e:	bf5c      	itt	pl
   d6080:	2201      	movpl	r2, #1
   d6082:	601a      	strpl	r2, [r3, #0]
   d6084:	4b1c      	ldr	r3, [pc, #112]	; (d60f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d6086:	681a      	ldr	r2, [r3, #0]
   d6088:	07d1      	lsls	r1, r2, #31
   d608a:	bf5c      	itt	pl
   d608c:	2201      	movpl	r2, #1
   d608e:	601a      	strpl	r2, [r3, #0]
   d6090:	4b1a      	ldr	r3, [pc, #104]	; (d60fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d6092:	681a      	ldr	r2, [r3, #0]
   d6094:	07d2      	lsls	r2, r2, #31
   d6096:	bf5c      	itt	pl
   d6098:	2201      	movpl	r2, #1
   d609a:	601a      	strpl	r2, [r3, #0]
   d609c:	4b18      	ldr	r3, [pc, #96]	; (d6100 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d609e:	681a      	ldr	r2, [r3, #0]
   d60a0:	07d0      	lsls	r0, r2, #31
   d60a2:	bf5c      	itt	pl
   d60a4:	2201      	movpl	r2, #1
   d60a6:	601a      	strpl	r2, [r3, #0]
   d60a8:	4b16      	ldr	r3, [pc, #88]	; (d6104 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d60aa:	681a      	ldr	r2, [r3, #0]
   d60ac:	07d1      	lsls	r1, r2, #31
   d60ae:	bf5c      	itt	pl
   d60b0:	2201      	movpl	r2, #1
   d60b2:	601a      	strpl	r2, [r3, #0]
   d60b4:	4b14      	ldr	r3, [pc, #80]	; (d6108 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d60b6:	681a      	ldr	r2, [r3, #0]
   d60b8:	07d2      	lsls	r2, r2, #31
   d60ba:	bf5c      	itt	pl
   d60bc:	2201      	movpl	r2, #1
   d60be:	601a      	strpl	r2, [r3, #0]
   d60c0:	4b12      	ldr	r3, [pc, #72]	; (d610c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d60c2:	681a      	ldr	r2, [r3, #0]
   d60c4:	07d0      	lsls	r0, r2, #31
   d60c6:	bf5c      	itt	pl
   d60c8:	2201      	movpl	r2, #1
   d60ca:	601a      	strpl	r2, [r3, #0]
   d60cc:	4b10      	ldr	r3, [pc, #64]	; (d6110 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d60ce:	681a      	ldr	r2, [r3, #0]
   d60d0:	07d1      	lsls	r1, r2, #31
   d60d2:	bf5c      	itt	pl
   d60d4:	2201      	movpl	r2, #1
   d60d6:	601a      	strpl	r2, [r3, #0]
   d60d8:	4b0e      	ldr	r3, [pc, #56]	; (d6114 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d60da:	681a      	ldr	r2, [r3, #0]
   d60dc:	07d2      	lsls	r2, r2, #31
   d60de:	bf5c      	itt	pl
   d60e0:	2201      	movpl	r2, #1
   d60e2:	601a      	strpl	r2, [r3, #0]
   d60e4:	4770      	bx	lr
   d60e6:	bf00      	nop
   d60e8:	2003e754 	.word	0x2003e754
   d60ec:	2003e750 	.word	0x2003e750
   d60f0:	2003e74c 	.word	0x2003e74c
   d60f4:	2003e748 	.word	0x2003e748
   d60f8:	2003e744 	.word	0x2003e744
   d60fc:	2003e740 	.word	0x2003e740
   d6100:	2003e73c 	.word	0x2003e73c
   d6104:	2003e738 	.word	0x2003e738
   d6108:	2003e734 	.word	0x2003e734
   d610c:	2003e730 	.word	0x2003e730
   d6110:	2003e72c 	.word	0x2003e72c
   d6114:	2003e728 	.word	0x2003e728

000d6118 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d6118:	4b18      	ldr	r3, [pc, #96]	; (d617c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d611a:	681a      	ldr	r2, [r3, #0]
   d611c:	07d1      	lsls	r1, r2, #31
   d611e:	bf5c      	itt	pl
   d6120:	2201      	movpl	r2, #1
   d6122:	601a      	strpl	r2, [r3, #0]
   d6124:	4b16      	ldr	r3, [pc, #88]	; (d6180 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d6126:	681a      	ldr	r2, [r3, #0]
   d6128:	07d2      	lsls	r2, r2, #31
   d612a:	bf5c      	itt	pl
   d612c:	2201      	movpl	r2, #1
   d612e:	601a      	strpl	r2, [r3, #0]
   d6130:	4b14      	ldr	r3, [pc, #80]	; (d6184 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d6132:	681a      	ldr	r2, [r3, #0]
   d6134:	07d0      	lsls	r0, r2, #31
   d6136:	bf5c      	itt	pl
   d6138:	2201      	movpl	r2, #1
   d613a:	601a      	strpl	r2, [r3, #0]
   d613c:	4b12      	ldr	r3, [pc, #72]	; (d6188 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d613e:	681a      	ldr	r2, [r3, #0]
   d6140:	07d1      	lsls	r1, r2, #31
   d6142:	bf5c      	itt	pl
   d6144:	2201      	movpl	r2, #1
   d6146:	601a      	strpl	r2, [r3, #0]
   d6148:	4b10      	ldr	r3, [pc, #64]	; (d618c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d614a:	681a      	ldr	r2, [r3, #0]
   d614c:	07d2      	lsls	r2, r2, #31
   d614e:	bf5c      	itt	pl
   d6150:	2201      	movpl	r2, #1
   d6152:	601a      	strpl	r2, [r3, #0]
   d6154:	4b0e      	ldr	r3, [pc, #56]	; (d6190 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d6156:	681a      	ldr	r2, [r3, #0]
   d6158:	07d0      	lsls	r0, r2, #31
   d615a:	bf5c      	itt	pl
   d615c:	2201      	movpl	r2, #1
   d615e:	601a      	strpl	r2, [r3, #0]
   d6160:	4b0c      	ldr	r3, [pc, #48]	; (d6194 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d6162:	681a      	ldr	r2, [r3, #0]
   d6164:	07d1      	lsls	r1, r2, #31
   d6166:	bf5c      	itt	pl
   d6168:	2201      	movpl	r2, #1
   d616a:	601a      	strpl	r2, [r3, #0]
   d616c:	4b0a      	ldr	r3, [pc, #40]	; (d6198 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d616e:	681a      	ldr	r2, [r3, #0]
   d6170:	07d2      	lsls	r2, r2, #31
   d6172:	bf5c      	itt	pl
   d6174:	2201      	movpl	r2, #1
   d6176:	601a      	strpl	r2, [r3, #0]
   d6178:	4770      	bx	lr
   d617a:	bf00      	nop
   d617c:	2003e774 	.word	0x2003e774
   d6180:	2003e770 	.word	0x2003e770
   d6184:	2003e76c 	.word	0x2003e76c
   d6188:	2003e768 	.word	0x2003e768
   d618c:	2003e764 	.word	0x2003e764
   d6190:	2003e760 	.word	0x2003e760
   d6194:	2003e75c 	.word	0x2003e75c
   d6198:	2003e758 	.word	0x2003e758

000d619c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d619c:	4b18      	ldr	r3, [pc, #96]	; (d6200 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d619e:	681a      	ldr	r2, [r3, #0]
   d61a0:	07d1      	lsls	r1, r2, #31
   d61a2:	bf5c      	itt	pl
   d61a4:	2201      	movpl	r2, #1
   d61a6:	601a      	strpl	r2, [r3, #0]
   d61a8:	4b16      	ldr	r3, [pc, #88]	; (d6204 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d61aa:	681a      	ldr	r2, [r3, #0]
   d61ac:	07d2      	lsls	r2, r2, #31
   d61ae:	bf5c      	itt	pl
   d61b0:	2201      	movpl	r2, #1
   d61b2:	601a      	strpl	r2, [r3, #0]
   d61b4:	4b14      	ldr	r3, [pc, #80]	; (d6208 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d61b6:	681a      	ldr	r2, [r3, #0]
   d61b8:	07d0      	lsls	r0, r2, #31
   d61ba:	bf5c      	itt	pl
   d61bc:	2201      	movpl	r2, #1
   d61be:	601a      	strpl	r2, [r3, #0]
   d61c0:	4b12      	ldr	r3, [pc, #72]	; (d620c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d61c2:	681a      	ldr	r2, [r3, #0]
   d61c4:	07d1      	lsls	r1, r2, #31
   d61c6:	bf5c      	itt	pl
   d61c8:	2201      	movpl	r2, #1
   d61ca:	601a      	strpl	r2, [r3, #0]
   d61cc:	4b10      	ldr	r3, [pc, #64]	; (d6210 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d61ce:	681a      	ldr	r2, [r3, #0]
   d61d0:	07d2      	lsls	r2, r2, #31
   d61d2:	bf5c      	itt	pl
   d61d4:	2201      	movpl	r2, #1
   d61d6:	601a      	strpl	r2, [r3, #0]
   d61d8:	4b0e      	ldr	r3, [pc, #56]	; (d6214 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d61da:	681a      	ldr	r2, [r3, #0]
   d61dc:	07d0      	lsls	r0, r2, #31
   d61de:	bf5c      	itt	pl
   d61e0:	2201      	movpl	r2, #1
   d61e2:	601a      	strpl	r2, [r3, #0]
   d61e4:	4b0c      	ldr	r3, [pc, #48]	; (d6218 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d61e6:	681a      	ldr	r2, [r3, #0]
   d61e8:	07d1      	lsls	r1, r2, #31
   d61ea:	bf5c      	itt	pl
   d61ec:	2201      	movpl	r2, #1
   d61ee:	601a      	strpl	r2, [r3, #0]
   d61f0:	4b0a      	ldr	r3, [pc, #40]	; (d621c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d61f2:	681a      	ldr	r2, [r3, #0]
   d61f4:	07d2      	lsls	r2, r2, #31
   d61f6:	bf5c      	itt	pl
   d61f8:	2201      	movpl	r2, #1
   d61fa:	601a      	strpl	r2, [r3, #0]
   d61fc:	4770      	bx	lr
   d61fe:	bf00      	nop
   d6200:	2003e794 	.word	0x2003e794
   d6204:	2003e790 	.word	0x2003e790
   d6208:	2003e78c 	.word	0x2003e78c
   d620c:	2003e788 	.word	0x2003e788
   d6210:	2003e784 	.word	0x2003e784
   d6214:	2003e780 	.word	0x2003e780
   d6218:	2003e77c 	.word	0x2003e77c
   d621c:	2003e778 	.word	0x2003e778

000d6220 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d6220:	4b24      	ldr	r3, [pc, #144]	; (d62b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d6222:	681a      	ldr	r2, [r3, #0]
   d6224:	07d0      	lsls	r0, r2, #31
   d6226:	bf5c      	itt	pl
   d6228:	2201      	movpl	r2, #1
   d622a:	601a      	strpl	r2, [r3, #0]
   d622c:	4b22      	ldr	r3, [pc, #136]	; (d62b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d622e:	681a      	ldr	r2, [r3, #0]
   d6230:	07d1      	lsls	r1, r2, #31
   d6232:	bf5c      	itt	pl
   d6234:	2201      	movpl	r2, #1
   d6236:	601a      	strpl	r2, [r3, #0]
   d6238:	4b20      	ldr	r3, [pc, #128]	; (d62bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d623a:	681a      	ldr	r2, [r3, #0]
   d623c:	07d2      	lsls	r2, r2, #31
   d623e:	bf5c      	itt	pl
   d6240:	2201      	movpl	r2, #1
   d6242:	601a      	strpl	r2, [r3, #0]
   d6244:	4b1e      	ldr	r3, [pc, #120]	; (d62c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d6246:	681a      	ldr	r2, [r3, #0]
   d6248:	07d0      	lsls	r0, r2, #31
   d624a:	bf5c      	itt	pl
   d624c:	2201      	movpl	r2, #1
   d624e:	601a      	strpl	r2, [r3, #0]
   d6250:	4b1c      	ldr	r3, [pc, #112]	; (d62c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d6252:	681a      	ldr	r2, [r3, #0]
   d6254:	07d1      	lsls	r1, r2, #31
   d6256:	bf5c      	itt	pl
   d6258:	2201      	movpl	r2, #1
   d625a:	601a      	strpl	r2, [r3, #0]
   d625c:	4b1a      	ldr	r3, [pc, #104]	; (d62c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d625e:	681a      	ldr	r2, [r3, #0]
   d6260:	07d2      	lsls	r2, r2, #31
   d6262:	bf5c      	itt	pl
   d6264:	2201      	movpl	r2, #1
   d6266:	601a      	strpl	r2, [r3, #0]
   d6268:	4b18      	ldr	r3, [pc, #96]	; (d62cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d626a:	681a      	ldr	r2, [r3, #0]
   d626c:	07d0      	lsls	r0, r2, #31
   d626e:	bf5c      	itt	pl
   d6270:	2201      	movpl	r2, #1
   d6272:	601a      	strpl	r2, [r3, #0]
   d6274:	4b16      	ldr	r3, [pc, #88]	; (d62d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d6276:	681a      	ldr	r2, [r3, #0]
   d6278:	07d1      	lsls	r1, r2, #31
   d627a:	bf5c      	itt	pl
   d627c:	2201      	movpl	r2, #1
   d627e:	601a      	strpl	r2, [r3, #0]
   d6280:	4b14      	ldr	r3, [pc, #80]	; (d62d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d6282:	681a      	ldr	r2, [r3, #0]
   d6284:	07d2      	lsls	r2, r2, #31
   d6286:	bf5c      	itt	pl
   d6288:	2201      	movpl	r2, #1
   d628a:	601a      	strpl	r2, [r3, #0]
   d628c:	4b12      	ldr	r3, [pc, #72]	; (d62d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d628e:	681a      	ldr	r2, [r3, #0]
   d6290:	07d0      	lsls	r0, r2, #31
   d6292:	bf5c      	itt	pl
   d6294:	2201      	movpl	r2, #1
   d6296:	601a      	strpl	r2, [r3, #0]
   d6298:	4b10      	ldr	r3, [pc, #64]	; (d62dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d629a:	681a      	ldr	r2, [r3, #0]
   d629c:	07d1      	lsls	r1, r2, #31
   d629e:	bf5c      	itt	pl
   d62a0:	2201      	movpl	r2, #1
   d62a2:	601a      	strpl	r2, [r3, #0]
   d62a4:	4b0e      	ldr	r3, [pc, #56]	; (d62e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d62a6:	681a      	ldr	r2, [r3, #0]
   d62a8:	07d2      	lsls	r2, r2, #31
   d62aa:	bf5c      	itt	pl
   d62ac:	2201      	movpl	r2, #1
   d62ae:	601a      	strpl	r2, [r3, #0]
   d62b0:	4770      	bx	lr
   d62b2:	bf00      	nop
   d62b4:	2003e7c4 	.word	0x2003e7c4
   d62b8:	2003e7c0 	.word	0x2003e7c0
   d62bc:	2003e7bc 	.word	0x2003e7bc
   d62c0:	2003e7b8 	.word	0x2003e7b8
   d62c4:	2003e7b4 	.word	0x2003e7b4
   d62c8:	2003e7b0 	.word	0x2003e7b0
   d62cc:	2003e7ac 	.word	0x2003e7ac
   d62d0:	2003e7a8 	.word	0x2003e7a8
   d62d4:	2003e7a4 	.word	0x2003e7a4
   d62d8:	2003e7a0 	.word	0x2003e7a0
   d62dc:	2003e79c 	.word	0x2003e79c
   d62e0:	2003e798 	.word	0x2003e798

000d62e4 <__aeabi_drsub>:
   d62e4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d62e8:	e002      	b.n	d62f0 <__adddf3>
   d62ea:	bf00      	nop

000d62ec <__aeabi_dsub>:
   d62ec:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d62f0 <__adddf3>:
   d62f0:	b530      	push	{r4, r5, lr}
   d62f2:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d62f6:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d62fa:	ea94 0f05 	teq	r4, r5
   d62fe:	bf08      	it	eq
   d6300:	ea90 0f02 	teqeq	r0, r2
   d6304:	bf1f      	itttt	ne
   d6306:	ea54 0c00 	orrsne.w	ip, r4, r0
   d630a:	ea55 0c02 	orrsne.w	ip, r5, r2
   d630e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d6312:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d6316:	f000 80e2 	beq.w	d64de <__adddf3+0x1ee>
   d631a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d631e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d6322:	bfb8      	it	lt
   d6324:	426d      	neglt	r5, r5
   d6326:	dd0c      	ble.n	d6342 <__adddf3+0x52>
   d6328:	442c      	add	r4, r5
   d632a:	ea80 0202 	eor.w	r2, r0, r2
   d632e:	ea81 0303 	eor.w	r3, r1, r3
   d6332:	ea82 0000 	eor.w	r0, r2, r0
   d6336:	ea83 0101 	eor.w	r1, r3, r1
   d633a:	ea80 0202 	eor.w	r2, r0, r2
   d633e:	ea81 0303 	eor.w	r3, r1, r3
   d6342:	2d36      	cmp	r5, #54	; 0x36
   d6344:	bf88      	it	hi
   d6346:	bd30      	pophi	{r4, r5, pc}
   d6348:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d634c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d6350:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d6354:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d6358:	d002      	beq.n	d6360 <__adddf3+0x70>
   d635a:	4240      	negs	r0, r0
   d635c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d6360:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d6364:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d6368:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d636c:	d002      	beq.n	d6374 <__adddf3+0x84>
   d636e:	4252      	negs	r2, r2
   d6370:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d6374:	ea94 0f05 	teq	r4, r5
   d6378:	f000 80a7 	beq.w	d64ca <__adddf3+0x1da>
   d637c:	f1a4 0401 	sub.w	r4, r4, #1
   d6380:	f1d5 0e20 	rsbs	lr, r5, #32
   d6384:	db0d      	blt.n	d63a2 <__adddf3+0xb2>
   d6386:	fa02 fc0e 	lsl.w	ip, r2, lr
   d638a:	fa22 f205 	lsr.w	r2, r2, r5
   d638e:	1880      	adds	r0, r0, r2
   d6390:	f141 0100 	adc.w	r1, r1, #0
   d6394:	fa03 f20e 	lsl.w	r2, r3, lr
   d6398:	1880      	adds	r0, r0, r2
   d639a:	fa43 f305 	asr.w	r3, r3, r5
   d639e:	4159      	adcs	r1, r3
   d63a0:	e00e      	b.n	d63c0 <__adddf3+0xd0>
   d63a2:	f1a5 0520 	sub.w	r5, r5, #32
   d63a6:	f10e 0e20 	add.w	lr, lr, #32
   d63aa:	2a01      	cmp	r2, #1
   d63ac:	fa03 fc0e 	lsl.w	ip, r3, lr
   d63b0:	bf28      	it	cs
   d63b2:	f04c 0c02 	orrcs.w	ip, ip, #2
   d63b6:	fa43 f305 	asr.w	r3, r3, r5
   d63ba:	18c0      	adds	r0, r0, r3
   d63bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d63c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d63c4:	d507      	bpl.n	d63d6 <__adddf3+0xe6>
   d63c6:	f04f 0e00 	mov.w	lr, #0
   d63ca:	f1dc 0c00 	rsbs	ip, ip, #0
   d63ce:	eb7e 0000 	sbcs.w	r0, lr, r0
   d63d2:	eb6e 0101 	sbc.w	r1, lr, r1
   d63d6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d63da:	d31b      	bcc.n	d6414 <__adddf3+0x124>
   d63dc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d63e0:	d30c      	bcc.n	d63fc <__adddf3+0x10c>
   d63e2:	0849      	lsrs	r1, r1, #1
   d63e4:	ea5f 0030 	movs.w	r0, r0, rrx
   d63e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d63ec:	f104 0401 	add.w	r4, r4, #1
   d63f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d63f4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d63f8:	f080 809a 	bcs.w	d6530 <__adddf3+0x240>
   d63fc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d6400:	bf08      	it	eq
   d6402:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d6406:	f150 0000 	adcs.w	r0, r0, #0
   d640a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d640e:	ea41 0105 	orr.w	r1, r1, r5
   d6412:	bd30      	pop	{r4, r5, pc}
   d6414:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d6418:	4140      	adcs	r0, r0
   d641a:	eb41 0101 	adc.w	r1, r1, r1
   d641e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6422:	f1a4 0401 	sub.w	r4, r4, #1
   d6426:	d1e9      	bne.n	d63fc <__adddf3+0x10c>
   d6428:	f091 0f00 	teq	r1, #0
   d642c:	bf04      	itt	eq
   d642e:	4601      	moveq	r1, r0
   d6430:	2000      	moveq	r0, #0
   d6432:	fab1 f381 	clz	r3, r1
   d6436:	bf08      	it	eq
   d6438:	3320      	addeq	r3, #32
   d643a:	f1a3 030b 	sub.w	r3, r3, #11
   d643e:	f1b3 0220 	subs.w	r2, r3, #32
   d6442:	da0c      	bge.n	d645e <__adddf3+0x16e>
   d6444:	320c      	adds	r2, #12
   d6446:	dd08      	ble.n	d645a <__adddf3+0x16a>
   d6448:	f102 0c14 	add.w	ip, r2, #20
   d644c:	f1c2 020c 	rsb	r2, r2, #12
   d6450:	fa01 f00c 	lsl.w	r0, r1, ip
   d6454:	fa21 f102 	lsr.w	r1, r1, r2
   d6458:	e00c      	b.n	d6474 <__adddf3+0x184>
   d645a:	f102 0214 	add.w	r2, r2, #20
   d645e:	bfd8      	it	le
   d6460:	f1c2 0c20 	rsble	ip, r2, #32
   d6464:	fa01 f102 	lsl.w	r1, r1, r2
   d6468:	fa20 fc0c 	lsr.w	ip, r0, ip
   d646c:	bfdc      	itt	le
   d646e:	ea41 010c 	orrle.w	r1, r1, ip
   d6472:	4090      	lslle	r0, r2
   d6474:	1ae4      	subs	r4, r4, r3
   d6476:	bfa2      	ittt	ge
   d6478:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d647c:	4329      	orrge	r1, r5
   d647e:	bd30      	popge	{r4, r5, pc}
   d6480:	ea6f 0404 	mvn.w	r4, r4
   d6484:	3c1f      	subs	r4, #31
   d6486:	da1c      	bge.n	d64c2 <__adddf3+0x1d2>
   d6488:	340c      	adds	r4, #12
   d648a:	dc0e      	bgt.n	d64aa <__adddf3+0x1ba>
   d648c:	f104 0414 	add.w	r4, r4, #20
   d6490:	f1c4 0220 	rsb	r2, r4, #32
   d6494:	fa20 f004 	lsr.w	r0, r0, r4
   d6498:	fa01 f302 	lsl.w	r3, r1, r2
   d649c:	ea40 0003 	orr.w	r0, r0, r3
   d64a0:	fa21 f304 	lsr.w	r3, r1, r4
   d64a4:	ea45 0103 	orr.w	r1, r5, r3
   d64a8:	bd30      	pop	{r4, r5, pc}
   d64aa:	f1c4 040c 	rsb	r4, r4, #12
   d64ae:	f1c4 0220 	rsb	r2, r4, #32
   d64b2:	fa20 f002 	lsr.w	r0, r0, r2
   d64b6:	fa01 f304 	lsl.w	r3, r1, r4
   d64ba:	ea40 0003 	orr.w	r0, r0, r3
   d64be:	4629      	mov	r1, r5
   d64c0:	bd30      	pop	{r4, r5, pc}
   d64c2:	fa21 f004 	lsr.w	r0, r1, r4
   d64c6:	4629      	mov	r1, r5
   d64c8:	bd30      	pop	{r4, r5, pc}
   d64ca:	f094 0f00 	teq	r4, #0
   d64ce:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d64d2:	bf06      	itte	eq
   d64d4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d64d8:	3401      	addeq	r4, #1
   d64da:	3d01      	subne	r5, #1
   d64dc:	e74e      	b.n	d637c <__adddf3+0x8c>
   d64de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d64e2:	bf18      	it	ne
   d64e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d64e8:	d029      	beq.n	d653e <__adddf3+0x24e>
   d64ea:	ea94 0f05 	teq	r4, r5
   d64ee:	bf08      	it	eq
   d64f0:	ea90 0f02 	teqeq	r0, r2
   d64f4:	d005      	beq.n	d6502 <__adddf3+0x212>
   d64f6:	ea54 0c00 	orrs.w	ip, r4, r0
   d64fa:	bf04      	itt	eq
   d64fc:	4619      	moveq	r1, r3
   d64fe:	4610      	moveq	r0, r2
   d6500:	bd30      	pop	{r4, r5, pc}
   d6502:	ea91 0f03 	teq	r1, r3
   d6506:	bf1e      	ittt	ne
   d6508:	2100      	movne	r1, #0
   d650a:	2000      	movne	r0, #0
   d650c:	bd30      	popne	{r4, r5, pc}
   d650e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d6512:	d105      	bne.n	d6520 <__adddf3+0x230>
   d6514:	0040      	lsls	r0, r0, #1
   d6516:	4149      	adcs	r1, r1
   d6518:	bf28      	it	cs
   d651a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d651e:	bd30      	pop	{r4, r5, pc}
   d6520:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d6524:	bf3c      	itt	cc
   d6526:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d652a:	bd30      	popcc	{r4, r5, pc}
   d652c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6530:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d6534:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d6538:	f04f 0000 	mov.w	r0, #0
   d653c:	bd30      	pop	{r4, r5, pc}
   d653e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d6542:	bf1a      	itte	ne
   d6544:	4619      	movne	r1, r3
   d6546:	4610      	movne	r0, r2
   d6548:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d654c:	bf1c      	itt	ne
   d654e:	460b      	movne	r3, r1
   d6550:	4602      	movne	r2, r0
   d6552:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d6556:	bf06      	itte	eq
   d6558:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d655c:	ea91 0f03 	teqeq	r1, r3
   d6560:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d6564:	bd30      	pop	{r4, r5, pc}
   d6566:	bf00      	nop

000d6568 <__aeabi_ui2d>:
   d6568:	f090 0f00 	teq	r0, #0
   d656c:	bf04      	itt	eq
   d656e:	2100      	moveq	r1, #0
   d6570:	4770      	bxeq	lr
   d6572:	b530      	push	{r4, r5, lr}
   d6574:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6578:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d657c:	f04f 0500 	mov.w	r5, #0
   d6580:	f04f 0100 	mov.w	r1, #0
   d6584:	e750      	b.n	d6428 <__adddf3+0x138>
   d6586:	bf00      	nop

000d6588 <__aeabi_i2d>:
   d6588:	f090 0f00 	teq	r0, #0
   d658c:	bf04      	itt	eq
   d658e:	2100      	moveq	r1, #0
   d6590:	4770      	bxeq	lr
   d6592:	b530      	push	{r4, r5, lr}
   d6594:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6598:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d659c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d65a0:	bf48      	it	mi
   d65a2:	4240      	negmi	r0, r0
   d65a4:	f04f 0100 	mov.w	r1, #0
   d65a8:	e73e      	b.n	d6428 <__adddf3+0x138>
   d65aa:	bf00      	nop

000d65ac <__aeabi_f2d>:
   d65ac:	0042      	lsls	r2, r0, #1
   d65ae:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d65b2:	ea4f 0131 	mov.w	r1, r1, rrx
   d65b6:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d65ba:	bf1f      	itttt	ne
   d65bc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d65c0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d65c4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d65c8:	4770      	bxne	lr
   d65ca:	f092 0f00 	teq	r2, #0
   d65ce:	bf14      	ite	ne
   d65d0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d65d4:	4770      	bxeq	lr
   d65d6:	b530      	push	{r4, r5, lr}
   d65d8:	f44f 7460 	mov.w	r4, #896	; 0x380
   d65dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d65e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d65e4:	e720      	b.n	d6428 <__adddf3+0x138>
   d65e6:	bf00      	nop

000d65e8 <__aeabi_ul2d>:
   d65e8:	ea50 0201 	orrs.w	r2, r0, r1
   d65ec:	bf08      	it	eq
   d65ee:	4770      	bxeq	lr
   d65f0:	b530      	push	{r4, r5, lr}
   d65f2:	f04f 0500 	mov.w	r5, #0
   d65f6:	e00a      	b.n	d660e <__aeabi_l2d+0x16>

000d65f8 <__aeabi_l2d>:
   d65f8:	ea50 0201 	orrs.w	r2, r0, r1
   d65fc:	bf08      	it	eq
   d65fe:	4770      	bxeq	lr
   d6600:	b530      	push	{r4, r5, lr}
   d6602:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d6606:	d502      	bpl.n	d660e <__aeabi_l2d+0x16>
   d6608:	4240      	negs	r0, r0
   d660a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d660e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6612:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6616:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d661a:	f43f aedc 	beq.w	d63d6 <__adddf3+0xe6>
   d661e:	f04f 0203 	mov.w	r2, #3
   d6622:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d6626:	bf18      	it	ne
   d6628:	3203      	addne	r2, #3
   d662a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d662e:	bf18      	it	ne
   d6630:	3203      	addne	r2, #3
   d6632:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d6636:	f1c2 0320 	rsb	r3, r2, #32
   d663a:	fa00 fc03 	lsl.w	ip, r0, r3
   d663e:	fa20 f002 	lsr.w	r0, r0, r2
   d6642:	fa01 fe03 	lsl.w	lr, r1, r3
   d6646:	ea40 000e 	orr.w	r0, r0, lr
   d664a:	fa21 f102 	lsr.w	r1, r1, r2
   d664e:	4414      	add	r4, r2
   d6650:	e6c1      	b.n	d63d6 <__adddf3+0xe6>
   d6652:	bf00      	nop

000d6654 <__aeabi_dmul>:
   d6654:	b570      	push	{r4, r5, r6, lr}
   d6656:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d665a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d665e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d6662:	bf1d      	ittte	ne
   d6664:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d6668:	ea94 0f0c 	teqne	r4, ip
   d666c:	ea95 0f0c 	teqne	r5, ip
   d6670:	f000 f8de 	bleq	d6830 <__aeabi_dmul+0x1dc>
   d6674:	442c      	add	r4, r5
   d6676:	ea81 0603 	eor.w	r6, r1, r3
   d667a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d667e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d6682:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d6686:	bf18      	it	ne
   d6688:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d668c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6690:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d6694:	d038      	beq.n	d6708 <__aeabi_dmul+0xb4>
   d6696:	fba0 ce02 	umull	ip, lr, r0, r2
   d669a:	f04f 0500 	mov.w	r5, #0
   d669e:	fbe1 e502 	umlal	lr, r5, r1, r2
   d66a2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d66a6:	fbe0 e503 	umlal	lr, r5, r0, r3
   d66aa:	f04f 0600 	mov.w	r6, #0
   d66ae:	fbe1 5603 	umlal	r5, r6, r1, r3
   d66b2:	f09c 0f00 	teq	ip, #0
   d66b6:	bf18      	it	ne
   d66b8:	f04e 0e01 	orrne.w	lr, lr, #1
   d66bc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d66c0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d66c4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d66c8:	d204      	bcs.n	d66d4 <__aeabi_dmul+0x80>
   d66ca:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d66ce:	416d      	adcs	r5, r5
   d66d0:	eb46 0606 	adc.w	r6, r6, r6
   d66d4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d66d8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d66dc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d66e0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d66e4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d66e8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d66ec:	bf88      	it	hi
   d66ee:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d66f2:	d81e      	bhi.n	d6732 <__aeabi_dmul+0xde>
   d66f4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d66f8:	bf08      	it	eq
   d66fa:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d66fe:	f150 0000 	adcs.w	r0, r0, #0
   d6702:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6706:	bd70      	pop	{r4, r5, r6, pc}
   d6708:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d670c:	ea46 0101 	orr.w	r1, r6, r1
   d6710:	ea40 0002 	orr.w	r0, r0, r2
   d6714:	ea81 0103 	eor.w	r1, r1, r3
   d6718:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d671c:	bfc2      	ittt	gt
   d671e:	ebd4 050c 	rsbsgt	r5, r4, ip
   d6722:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d6726:	bd70      	popgt	{r4, r5, r6, pc}
   d6728:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d672c:	f04f 0e00 	mov.w	lr, #0
   d6730:	3c01      	subs	r4, #1
   d6732:	f300 80ab 	bgt.w	d688c <__aeabi_dmul+0x238>
   d6736:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d673a:	bfde      	ittt	le
   d673c:	2000      	movle	r0, #0
   d673e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d6742:	bd70      	pople	{r4, r5, r6, pc}
   d6744:	f1c4 0400 	rsb	r4, r4, #0
   d6748:	3c20      	subs	r4, #32
   d674a:	da35      	bge.n	d67b8 <__aeabi_dmul+0x164>
   d674c:	340c      	adds	r4, #12
   d674e:	dc1b      	bgt.n	d6788 <__aeabi_dmul+0x134>
   d6750:	f104 0414 	add.w	r4, r4, #20
   d6754:	f1c4 0520 	rsb	r5, r4, #32
   d6758:	fa00 f305 	lsl.w	r3, r0, r5
   d675c:	fa20 f004 	lsr.w	r0, r0, r4
   d6760:	fa01 f205 	lsl.w	r2, r1, r5
   d6764:	ea40 0002 	orr.w	r0, r0, r2
   d6768:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d676c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d6770:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d6774:	fa21 f604 	lsr.w	r6, r1, r4
   d6778:	eb42 0106 	adc.w	r1, r2, r6
   d677c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6780:	bf08      	it	eq
   d6782:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6786:	bd70      	pop	{r4, r5, r6, pc}
   d6788:	f1c4 040c 	rsb	r4, r4, #12
   d678c:	f1c4 0520 	rsb	r5, r4, #32
   d6790:	fa00 f304 	lsl.w	r3, r0, r4
   d6794:	fa20 f005 	lsr.w	r0, r0, r5
   d6798:	fa01 f204 	lsl.w	r2, r1, r4
   d679c:	ea40 0002 	orr.w	r0, r0, r2
   d67a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d67a4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d67a8:	f141 0100 	adc.w	r1, r1, #0
   d67ac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d67b0:	bf08      	it	eq
   d67b2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d67b6:	bd70      	pop	{r4, r5, r6, pc}
   d67b8:	f1c4 0520 	rsb	r5, r4, #32
   d67bc:	fa00 f205 	lsl.w	r2, r0, r5
   d67c0:	ea4e 0e02 	orr.w	lr, lr, r2
   d67c4:	fa20 f304 	lsr.w	r3, r0, r4
   d67c8:	fa01 f205 	lsl.w	r2, r1, r5
   d67cc:	ea43 0302 	orr.w	r3, r3, r2
   d67d0:	fa21 f004 	lsr.w	r0, r1, r4
   d67d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d67d8:	fa21 f204 	lsr.w	r2, r1, r4
   d67dc:	ea20 0002 	bic.w	r0, r0, r2
   d67e0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d67e4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d67e8:	bf08      	it	eq
   d67ea:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d67ee:	bd70      	pop	{r4, r5, r6, pc}
   d67f0:	f094 0f00 	teq	r4, #0
   d67f4:	d10f      	bne.n	d6816 <__aeabi_dmul+0x1c2>
   d67f6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d67fa:	0040      	lsls	r0, r0, #1
   d67fc:	eb41 0101 	adc.w	r1, r1, r1
   d6800:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6804:	bf08      	it	eq
   d6806:	3c01      	subeq	r4, #1
   d6808:	d0f7      	beq.n	d67fa <__aeabi_dmul+0x1a6>
   d680a:	ea41 0106 	orr.w	r1, r1, r6
   d680e:	f095 0f00 	teq	r5, #0
   d6812:	bf18      	it	ne
   d6814:	4770      	bxne	lr
   d6816:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d681a:	0052      	lsls	r2, r2, #1
   d681c:	eb43 0303 	adc.w	r3, r3, r3
   d6820:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d6824:	bf08      	it	eq
   d6826:	3d01      	subeq	r5, #1
   d6828:	d0f7      	beq.n	d681a <__aeabi_dmul+0x1c6>
   d682a:	ea43 0306 	orr.w	r3, r3, r6
   d682e:	4770      	bx	lr
   d6830:	ea94 0f0c 	teq	r4, ip
   d6834:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d6838:	bf18      	it	ne
   d683a:	ea95 0f0c 	teqne	r5, ip
   d683e:	d00c      	beq.n	d685a <__aeabi_dmul+0x206>
   d6840:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6844:	bf18      	it	ne
   d6846:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d684a:	d1d1      	bne.n	d67f0 <__aeabi_dmul+0x19c>
   d684c:	ea81 0103 	eor.w	r1, r1, r3
   d6850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6854:	f04f 0000 	mov.w	r0, #0
   d6858:	bd70      	pop	{r4, r5, r6, pc}
   d685a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d685e:	bf06      	itte	eq
   d6860:	4610      	moveq	r0, r2
   d6862:	4619      	moveq	r1, r3
   d6864:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6868:	d019      	beq.n	d689e <__aeabi_dmul+0x24a>
   d686a:	ea94 0f0c 	teq	r4, ip
   d686e:	d102      	bne.n	d6876 <__aeabi_dmul+0x222>
   d6870:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d6874:	d113      	bne.n	d689e <__aeabi_dmul+0x24a>
   d6876:	ea95 0f0c 	teq	r5, ip
   d687a:	d105      	bne.n	d6888 <__aeabi_dmul+0x234>
   d687c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d6880:	bf1c      	itt	ne
   d6882:	4610      	movne	r0, r2
   d6884:	4619      	movne	r1, r3
   d6886:	d10a      	bne.n	d689e <__aeabi_dmul+0x24a>
   d6888:	ea81 0103 	eor.w	r1, r1, r3
   d688c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6890:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d6894:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d6898:	f04f 0000 	mov.w	r0, #0
   d689c:	bd70      	pop	{r4, r5, r6, pc}
   d689e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d68a2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d68a6:	bd70      	pop	{r4, r5, r6, pc}

000d68a8 <__aeabi_ddiv>:
   d68a8:	b570      	push	{r4, r5, r6, lr}
   d68aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d68ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d68b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d68b6:	bf1d      	ittte	ne
   d68b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d68bc:	ea94 0f0c 	teqne	r4, ip
   d68c0:	ea95 0f0c 	teqne	r5, ip
   d68c4:	f000 f8a7 	bleq	d6a16 <__aeabi_ddiv+0x16e>
   d68c8:	eba4 0405 	sub.w	r4, r4, r5
   d68cc:	ea81 0e03 	eor.w	lr, r1, r3
   d68d0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d68d4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d68d8:	f000 8088 	beq.w	d69ec <__aeabi_ddiv+0x144>
   d68dc:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d68e0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d68e4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d68e8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d68ec:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d68f0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d68f4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d68f8:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d68fc:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d6900:	429d      	cmp	r5, r3
   d6902:	bf08      	it	eq
   d6904:	4296      	cmpeq	r6, r2
   d6906:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d690a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d690e:	d202      	bcs.n	d6916 <__aeabi_ddiv+0x6e>
   d6910:	085b      	lsrs	r3, r3, #1
   d6912:	ea4f 0232 	mov.w	r2, r2, rrx
   d6916:	1ab6      	subs	r6, r6, r2
   d6918:	eb65 0503 	sbc.w	r5, r5, r3
   d691c:	085b      	lsrs	r3, r3, #1
   d691e:	ea4f 0232 	mov.w	r2, r2, rrx
   d6922:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d6926:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d692a:	ebb6 0e02 	subs.w	lr, r6, r2
   d692e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6932:	bf22      	ittt	cs
   d6934:	1ab6      	subcs	r6, r6, r2
   d6936:	4675      	movcs	r5, lr
   d6938:	ea40 000c 	orrcs.w	r0, r0, ip
   d693c:	085b      	lsrs	r3, r3, #1
   d693e:	ea4f 0232 	mov.w	r2, r2, rrx
   d6942:	ebb6 0e02 	subs.w	lr, r6, r2
   d6946:	eb75 0e03 	sbcs.w	lr, r5, r3
   d694a:	bf22      	ittt	cs
   d694c:	1ab6      	subcs	r6, r6, r2
   d694e:	4675      	movcs	r5, lr
   d6950:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d6954:	085b      	lsrs	r3, r3, #1
   d6956:	ea4f 0232 	mov.w	r2, r2, rrx
   d695a:	ebb6 0e02 	subs.w	lr, r6, r2
   d695e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6962:	bf22      	ittt	cs
   d6964:	1ab6      	subcs	r6, r6, r2
   d6966:	4675      	movcs	r5, lr
   d6968:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d696c:	085b      	lsrs	r3, r3, #1
   d696e:	ea4f 0232 	mov.w	r2, r2, rrx
   d6972:	ebb6 0e02 	subs.w	lr, r6, r2
   d6976:	eb75 0e03 	sbcs.w	lr, r5, r3
   d697a:	bf22      	ittt	cs
   d697c:	1ab6      	subcs	r6, r6, r2
   d697e:	4675      	movcs	r5, lr
   d6980:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d6984:	ea55 0e06 	orrs.w	lr, r5, r6
   d6988:	d018      	beq.n	d69bc <__aeabi_ddiv+0x114>
   d698a:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d698e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d6992:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d6996:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d699a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d699e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d69a2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d69a6:	d1c0      	bne.n	d692a <__aeabi_ddiv+0x82>
   d69a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d69ac:	d10b      	bne.n	d69c6 <__aeabi_ddiv+0x11e>
   d69ae:	ea41 0100 	orr.w	r1, r1, r0
   d69b2:	f04f 0000 	mov.w	r0, #0
   d69b6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d69ba:	e7b6      	b.n	d692a <__aeabi_ddiv+0x82>
   d69bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d69c0:	bf04      	itt	eq
   d69c2:	4301      	orreq	r1, r0
   d69c4:	2000      	moveq	r0, #0
   d69c6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d69ca:	bf88      	it	hi
   d69cc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d69d0:	f63f aeaf 	bhi.w	d6732 <__aeabi_dmul+0xde>
   d69d4:	ebb5 0c03 	subs.w	ip, r5, r3
   d69d8:	bf04      	itt	eq
   d69da:	ebb6 0c02 	subseq.w	ip, r6, r2
   d69de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d69e2:	f150 0000 	adcs.w	r0, r0, #0
   d69e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d69ea:	bd70      	pop	{r4, r5, r6, pc}
   d69ec:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d69f0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d69f4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d69f8:	bfc2      	ittt	gt
   d69fa:	ebd4 050c 	rsbsgt	r5, r4, ip
   d69fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d6a02:	bd70      	popgt	{r4, r5, r6, pc}
   d6a04:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6a08:	f04f 0e00 	mov.w	lr, #0
   d6a0c:	3c01      	subs	r4, #1
   d6a0e:	e690      	b.n	d6732 <__aeabi_dmul+0xde>
   d6a10:	ea45 0e06 	orr.w	lr, r5, r6
   d6a14:	e68d      	b.n	d6732 <__aeabi_dmul+0xde>
   d6a16:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d6a1a:	ea94 0f0c 	teq	r4, ip
   d6a1e:	bf08      	it	eq
   d6a20:	ea95 0f0c 	teqeq	r5, ip
   d6a24:	f43f af3b 	beq.w	d689e <__aeabi_dmul+0x24a>
   d6a28:	ea94 0f0c 	teq	r4, ip
   d6a2c:	d10a      	bne.n	d6a44 <__aeabi_ddiv+0x19c>
   d6a2e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d6a32:	f47f af34 	bne.w	d689e <__aeabi_dmul+0x24a>
   d6a36:	ea95 0f0c 	teq	r5, ip
   d6a3a:	f47f af25 	bne.w	d6888 <__aeabi_dmul+0x234>
   d6a3e:	4610      	mov	r0, r2
   d6a40:	4619      	mov	r1, r3
   d6a42:	e72c      	b.n	d689e <__aeabi_dmul+0x24a>
   d6a44:	ea95 0f0c 	teq	r5, ip
   d6a48:	d106      	bne.n	d6a58 <__aeabi_ddiv+0x1b0>
   d6a4a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d6a4e:	f43f aefd 	beq.w	d684c <__aeabi_dmul+0x1f8>
   d6a52:	4610      	mov	r0, r2
   d6a54:	4619      	mov	r1, r3
   d6a56:	e722      	b.n	d689e <__aeabi_dmul+0x24a>
   d6a58:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6a5c:	bf18      	it	ne
   d6a5e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6a62:	f47f aec5 	bne.w	d67f0 <__aeabi_dmul+0x19c>
   d6a66:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d6a6a:	f47f af0d 	bne.w	d6888 <__aeabi_dmul+0x234>
   d6a6e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d6a72:	f47f aeeb 	bne.w	d684c <__aeabi_dmul+0x1f8>
   d6a76:	e712      	b.n	d689e <__aeabi_dmul+0x24a>

000d6a78 <__gedf2>:
   d6a78:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   d6a7c:	e006      	b.n	d6a8c <__cmpdf2+0x4>
   d6a7e:	bf00      	nop

000d6a80 <__ledf2>:
   d6a80:	f04f 0c01 	mov.w	ip, #1
   d6a84:	e002      	b.n	d6a8c <__cmpdf2+0x4>
   d6a86:	bf00      	nop

000d6a88 <__cmpdf2>:
   d6a88:	f04f 0c01 	mov.w	ip, #1
   d6a8c:	f84d cd04 	str.w	ip, [sp, #-4]!
   d6a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d6a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6a98:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d6a9c:	bf18      	it	ne
   d6a9e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d6aa2:	d01b      	beq.n	d6adc <__cmpdf2+0x54>
   d6aa4:	b001      	add	sp, #4
   d6aa6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d6aaa:	bf0c      	ite	eq
   d6aac:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d6ab0:	ea91 0f03 	teqne	r1, r3
   d6ab4:	bf02      	ittt	eq
   d6ab6:	ea90 0f02 	teqeq	r0, r2
   d6aba:	2000      	moveq	r0, #0
   d6abc:	4770      	bxeq	lr
   d6abe:	f110 0f00 	cmn.w	r0, #0
   d6ac2:	ea91 0f03 	teq	r1, r3
   d6ac6:	bf58      	it	pl
   d6ac8:	4299      	cmppl	r1, r3
   d6aca:	bf08      	it	eq
   d6acc:	4290      	cmpeq	r0, r2
   d6ace:	bf2c      	ite	cs
   d6ad0:	17d8      	asrcs	r0, r3, #31
   d6ad2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d6ad6:	f040 0001 	orr.w	r0, r0, #1
   d6ada:	4770      	bx	lr
   d6adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d6ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6ae4:	d102      	bne.n	d6aec <__cmpdf2+0x64>
   d6ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d6aea:	d107      	bne.n	d6afc <__cmpdf2+0x74>
   d6aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d6af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6af4:	d1d6      	bne.n	d6aa4 <__cmpdf2+0x1c>
   d6af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d6afa:	d0d3      	beq.n	d6aa4 <__cmpdf2+0x1c>
   d6afc:	f85d 0b04 	ldr.w	r0, [sp], #4
   d6b00:	4770      	bx	lr
   d6b02:	bf00      	nop

000d6b04 <__aeabi_cdrcmple>:
   d6b04:	4684      	mov	ip, r0
   d6b06:	4610      	mov	r0, r2
   d6b08:	4662      	mov	r2, ip
   d6b0a:	468c      	mov	ip, r1
   d6b0c:	4619      	mov	r1, r3
   d6b0e:	4663      	mov	r3, ip
   d6b10:	e000      	b.n	d6b14 <__aeabi_cdcmpeq>
   d6b12:	bf00      	nop

000d6b14 <__aeabi_cdcmpeq>:
   d6b14:	b501      	push	{r0, lr}
   d6b16:	f7ff ffb7 	bl	d6a88 <__cmpdf2>
   d6b1a:	2800      	cmp	r0, #0
   d6b1c:	bf48      	it	mi
   d6b1e:	f110 0f00 	cmnmi.w	r0, #0
   d6b22:	bd01      	pop	{r0, pc}

000d6b24 <__aeabi_dcmpeq>:
   d6b24:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6b28:	f7ff fff4 	bl	d6b14 <__aeabi_cdcmpeq>
   d6b2c:	bf0c      	ite	eq
   d6b2e:	2001      	moveq	r0, #1
   d6b30:	2000      	movne	r0, #0
   d6b32:	f85d fb08 	ldr.w	pc, [sp], #8
   d6b36:	bf00      	nop

000d6b38 <__aeabi_dcmplt>:
   d6b38:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6b3c:	f7ff ffea 	bl	d6b14 <__aeabi_cdcmpeq>
   d6b40:	bf34      	ite	cc
   d6b42:	2001      	movcc	r0, #1
   d6b44:	2000      	movcs	r0, #0
   d6b46:	f85d fb08 	ldr.w	pc, [sp], #8
   d6b4a:	bf00      	nop

000d6b4c <__aeabi_dcmple>:
   d6b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6b50:	f7ff ffe0 	bl	d6b14 <__aeabi_cdcmpeq>
   d6b54:	bf94      	ite	ls
   d6b56:	2001      	movls	r0, #1
   d6b58:	2000      	movhi	r0, #0
   d6b5a:	f85d fb08 	ldr.w	pc, [sp], #8
   d6b5e:	bf00      	nop

000d6b60 <__aeabi_dcmpge>:
   d6b60:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6b64:	f7ff ffce 	bl	d6b04 <__aeabi_cdrcmple>
   d6b68:	bf94      	ite	ls
   d6b6a:	2001      	movls	r0, #1
   d6b6c:	2000      	movhi	r0, #0
   d6b6e:	f85d fb08 	ldr.w	pc, [sp], #8
   d6b72:	bf00      	nop

000d6b74 <__aeabi_dcmpgt>:
   d6b74:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6b78:	f7ff ffc4 	bl	d6b04 <__aeabi_cdrcmple>
   d6b7c:	bf34      	ite	cc
   d6b7e:	2001      	movcc	r0, #1
   d6b80:	2000      	movcs	r0, #0
   d6b82:	f85d fb08 	ldr.w	pc, [sp], #8
   d6b86:	bf00      	nop

000d6b88 <__aeabi_d2iz>:
   d6b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d6b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d6b90:	d215      	bcs.n	d6bbe <__aeabi_d2iz+0x36>
   d6b92:	d511      	bpl.n	d6bb8 <__aeabi_d2iz+0x30>
   d6b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d6b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d6b9c:	d912      	bls.n	d6bc4 <__aeabi_d2iz+0x3c>
   d6b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d6ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d6ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d6baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d6bae:	fa23 f002 	lsr.w	r0, r3, r2
   d6bb2:	bf18      	it	ne
   d6bb4:	4240      	negne	r0, r0
   d6bb6:	4770      	bx	lr
   d6bb8:	f04f 0000 	mov.w	r0, #0
   d6bbc:	4770      	bx	lr
   d6bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d6bc2:	d105      	bne.n	d6bd0 <__aeabi_d2iz+0x48>
   d6bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d6bc8:	bf08      	it	eq
   d6bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d6bce:	4770      	bx	lr
   d6bd0:	f04f 0000 	mov.w	r0, #0
   d6bd4:	4770      	bx	lr
   d6bd6:	bf00      	nop

000d6bd8 <__aeabi_d2uiz>:
   d6bd8:	004a      	lsls	r2, r1, #1
   d6bda:	d211      	bcs.n	d6c00 <__aeabi_d2uiz+0x28>
   d6bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d6be0:	d211      	bcs.n	d6c06 <__aeabi_d2uiz+0x2e>
   d6be2:	d50d      	bpl.n	d6c00 <__aeabi_d2uiz+0x28>
   d6be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d6be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d6bec:	d40e      	bmi.n	d6c0c <__aeabi_d2uiz+0x34>
   d6bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d6bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d6bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d6bfa:	fa23 f002 	lsr.w	r0, r3, r2
   d6bfe:	4770      	bx	lr
   d6c00:	f04f 0000 	mov.w	r0, #0
   d6c04:	4770      	bx	lr
   d6c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d6c0a:	d102      	bne.n	d6c12 <__aeabi_d2uiz+0x3a>
   d6c0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d6c10:	4770      	bx	lr
   d6c12:	f04f 0000 	mov.w	r0, #0
   d6c16:	4770      	bx	lr

000d6c18 <__aeabi_d2f>:
   d6c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d6c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d6c20:	bf24      	itt	cs
   d6c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d6c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d6c2a:	d90d      	bls.n	d6c48 <__aeabi_d2f+0x30>
   d6c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d6c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d6c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d6c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d6c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d6c40:	bf08      	it	eq
   d6c42:	f020 0001 	biceq.w	r0, r0, #1
   d6c46:	4770      	bx	lr
   d6c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d6c4c:	d121      	bne.n	d6c92 <__aeabi_d2f+0x7a>
   d6c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d6c52:	bfbc      	itt	lt
   d6c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d6c58:	4770      	bxlt	lr
   d6c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d6c62:	f1c2 0218 	rsb	r2, r2, #24
   d6c66:	f1c2 0c20 	rsb	ip, r2, #32
   d6c6a:	fa10 f30c 	lsls.w	r3, r0, ip
   d6c6e:	fa20 f002 	lsr.w	r0, r0, r2
   d6c72:	bf18      	it	ne
   d6c74:	f040 0001 	orrne.w	r0, r0, #1
   d6c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d6c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d6c80:	fa03 fc0c 	lsl.w	ip, r3, ip
   d6c84:	ea40 000c 	orr.w	r0, r0, ip
   d6c88:	fa23 f302 	lsr.w	r3, r3, r2
   d6c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d6c90:	e7cc      	b.n	d6c2c <__aeabi_d2f+0x14>
   d6c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d6c96:	d107      	bne.n	d6ca8 <__aeabi_d2f+0x90>
   d6c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d6c9c:	bf1e      	ittt	ne
   d6c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d6ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d6ca6:	4770      	bxne	lr
   d6ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d6cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d6cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d6cb4:	4770      	bx	lr
   d6cb6:	bf00      	nop

000d6cb8 <atof>:
   d6cb8:	2100      	movs	r1, #0
   d6cba:	f000 bfad 	b.w	d7c18 <strtod>
	...

000d6cc0 <__cxa_atexit>:
   d6cc0:	b510      	push	{r4, lr}
   d6cc2:	4c05      	ldr	r4, [pc, #20]	; (d6cd8 <__cxa_atexit+0x18>)
   d6cc4:	4613      	mov	r3, r2
   d6cc6:	b12c      	cbz	r4, d6cd4 <__cxa_atexit+0x14>
   d6cc8:	460a      	mov	r2, r1
   d6cca:	4601      	mov	r1, r0
   d6ccc:	2002      	movs	r0, #2
   d6cce:	f3af 8000 	nop.w
   d6cd2:	bd10      	pop	{r4, pc}
   d6cd4:	4620      	mov	r0, r4
   d6cd6:	bd10      	pop	{r4, pc}
   d6cd8:	00000000 	.word	0x00000000

000d6cdc <localtime>:
   d6cdc:	b538      	push	{r3, r4, r5, lr}
   d6cde:	4b07      	ldr	r3, [pc, #28]	; (d6cfc <localtime+0x20>)
   d6ce0:	681c      	ldr	r4, [r3, #0]
   d6ce2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d6ce4:	4605      	mov	r5, r0
   d6ce6:	b91b      	cbnz	r3, d6cf0 <localtime+0x14>
   d6ce8:	2024      	movs	r0, #36	; 0x24
   d6cea:	f7fd ffaf 	bl	d4c4c <malloc>
   d6cee:	63e0      	str	r0, [r4, #60]	; 0x3c
   d6cf0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d6cf2:	4628      	mov	r0, r5
   d6cf4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d6cf8:	f000 b802 	b.w	d6d00 <localtime_r>
   d6cfc:	2003e198 	.word	0x2003e198

000d6d00 <localtime_r>:
   d6d00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6d04:	460c      	mov	r4, r1
   d6d06:	4680      	mov	r8, r0
   d6d08:	f001 fdd6 	bl	d88b8 <__gettzinfo>
   d6d0c:	4621      	mov	r1, r4
   d6d0e:	4607      	mov	r7, r0
   d6d10:	4640      	mov	r0, r8
   d6d12:	f001 fdd5 	bl	d88c0 <gmtime_r>
   d6d16:	6946      	ldr	r6, [r0, #20]
   d6d18:	f206 766c 	addw	r6, r6, #1900	; 0x76c
   d6d1c:	07b3      	lsls	r3, r6, #30
   d6d1e:	4604      	mov	r4, r0
   d6d20:	d105      	bne.n	d6d2e <localtime_r+0x2e>
   d6d22:	2264      	movs	r2, #100	; 0x64
   d6d24:	fb96 f3f2 	sdiv	r3, r6, r2
   d6d28:	fb02 6313 	mls	r3, r2, r3, r6
   d6d2c:	b94b      	cbnz	r3, d6d42 <localtime_r+0x42>
   d6d2e:	f44f 75c8 	mov.w	r5, #400	; 0x190
   d6d32:	fb96 f3f5 	sdiv	r3, r6, r5
   d6d36:	fb05 6513 	mls	r5, r5, r3, r6
   d6d3a:	fab5 f385 	clz	r3, r5
   d6d3e:	095b      	lsrs	r3, r3, #5
   d6d40:	e000      	b.n	d6d44 <localtime_r+0x44>
   d6d42:	2301      	movs	r3, #1
   d6d44:	4a5f      	ldr	r2, [pc, #380]	; (d6ec4 <localtime_r+0x1c4>)
   d6d46:	2530      	movs	r5, #48	; 0x30
   d6d48:	fb05 2503 	mla	r5, r5, r3, r2
   d6d4c:	f001 f8ca 	bl	d7ee4 <__tz_lock>
   d6d50:	f001 f8ca 	bl	d7ee8 <_tzset_unlocked>
   d6d54:	4b5c      	ldr	r3, [pc, #368]	; (d6ec8 <localtime_r+0x1c8>)
   d6d56:	681b      	ldr	r3, [r3, #0]
   d6d58:	b1f3      	cbz	r3, d6d98 <localtime_r+0x98>
   d6d5a:	687b      	ldr	r3, [r7, #4]
   d6d5c:	429e      	cmp	r6, r3
   d6d5e:	d105      	bne.n	d6d6c <localtime_r+0x6c>
   d6d60:	6839      	ldr	r1, [r7, #0]
   d6d62:	f8d8 3000 	ldr.w	r3, [r8]
   d6d66:	69fa      	ldr	r2, [r7, #28]
   d6d68:	b941      	cbnz	r1, d6d7c <localtime_r+0x7c>
   d6d6a:	e00a      	b.n	d6d82 <localtime_r+0x82>
   d6d6c:	4630      	mov	r0, r6
   d6d6e:	f001 f811 	bl	d7d94 <__tzcalc_limits>
   d6d72:	2800      	cmp	r0, #0
   d6d74:	d1f4      	bne.n	d6d60 <localtime_r+0x60>
   d6d76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d6d7a:	e00d      	b.n	d6d98 <localtime_r+0x98>
   d6d7c:	4293      	cmp	r3, r2
   d6d7e:	db08      	blt.n	d6d92 <localtime_r+0x92>
   d6d80:	e001      	b.n	d6d86 <localtime_r+0x86>
   d6d82:	4293      	cmp	r3, r2
   d6d84:	da07      	bge.n	d6d96 <localtime_r+0x96>
   d6d86:	6bba      	ldr	r2, [r7, #56]	; 0x38
   d6d88:	4293      	cmp	r3, r2
   d6d8a:	bfac      	ite	ge
   d6d8c:	2300      	movge	r3, #0
   d6d8e:	2301      	movlt	r3, #1
   d6d90:	e002      	b.n	d6d98 <localtime_r+0x98>
   d6d92:	2300      	movs	r3, #0
   d6d94:	e000      	b.n	d6d98 <localtime_r+0x98>
   d6d96:	2301      	movs	r3, #1
   d6d98:	6223      	str	r3, [r4, #32]
   d6d9a:	6a23      	ldr	r3, [r4, #32]
   d6d9c:	2b01      	cmp	r3, #1
   d6d9e:	bf0c      	ite	eq
   d6da0:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
   d6da2:	6a39      	ldrne	r1, [r7, #32]
   d6da4:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   d6da8:	203c      	movs	r0, #60	; 0x3c
   d6daa:	fb91 f6f3 	sdiv	r6, r1, r3
   d6dae:	fb03 1316 	mls	r3, r3, r6, r1
   d6db2:	6861      	ldr	r1, [r4, #4]
   d6db4:	fb93 f2f0 	sdiv	r2, r3, r0
   d6db8:	fb00 3012 	mls	r0, r0, r2, r3
   d6dbc:	6823      	ldr	r3, [r4, #0]
   d6dbe:	1a89      	subs	r1, r1, r2
   d6dc0:	68a2      	ldr	r2, [r4, #8]
   d6dc2:	6061      	str	r1, [r4, #4]
   d6dc4:	1a1b      	subs	r3, r3, r0
   d6dc6:	1b92      	subs	r2, r2, r6
   d6dc8:	2b3b      	cmp	r3, #59	; 0x3b
   d6dca:	6023      	str	r3, [r4, #0]
   d6dcc:	60a2      	str	r2, [r4, #8]
   d6dce:	dd03      	ble.n	d6dd8 <localtime_r+0xd8>
   d6dd0:	3101      	adds	r1, #1
   d6dd2:	6061      	str	r1, [r4, #4]
   d6dd4:	3b3c      	subs	r3, #60	; 0x3c
   d6dd6:	e004      	b.n	d6de2 <localtime_r+0xe2>
   d6dd8:	2b00      	cmp	r3, #0
   d6dda:	da03      	bge.n	d6de4 <localtime_r+0xe4>
   d6ddc:	3901      	subs	r1, #1
   d6dde:	6061      	str	r1, [r4, #4]
   d6de0:	333c      	adds	r3, #60	; 0x3c
   d6de2:	6023      	str	r3, [r4, #0]
   d6de4:	6863      	ldr	r3, [r4, #4]
   d6de6:	2b3b      	cmp	r3, #59	; 0x3b
   d6de8:	dd03      	ble.n	d6df2 <localtime_r+0xf2>
   d6dea:	3201      	adds	r2, #1
   d6dec:	60a2      	str	r2, [r4, #8]
   d6dee:	3b3c      	subs	r3, #60	; 0x3c
   d6df0:	e004      	b.n	d6dfc <localtime_r+0xfc>
   d6df2:	2b00      	cmp	r3, #0
   d6df4:	da03      	bge.n	d6dfe <localtime_r+0xfe>
   d6df6:	3a01      	subs	r2, #1
   d6df8:	60a2      	str	r2, [r4, #8]
   d6dfa:	333c      	adds	r3, #60	; 0x3c
   d6dfc:	6063      	str	r3, [r4, #4]
   d6dfe:	68a3      	ldr	r3, [r4, #8]
   d6e00:	2b17      	cmp	r3, #23
   d6e02:	dd22      	ble.n	d6e4a <localtime_r+0x14a>
   d6e04:	69e2      	ldr	r2, [r4, #28]
   d6e06:	3201      	adds	r2, #1
   d6e08:	61e2      	str	r2, [r4, #28]
   d6e0a:	69a2      	ldr	r2, [r4, #24]
   d6e0c:	3201      	adds	r2, #1
   d6e0e:	2a06      	cmp	r2, #6
   d6e10:	bfc8      	it	gt
   d6e12:	2200      	movgt	r2, #0
   d6e14:	61a2      	str	r2, [r4, #24]
   d6e16:	68e2      	ldr	r2, [r4, #12]
   d6e18:	3b18      	subs	r3, #24
   d6e1a:	3201      	adds	r2, #1
   d6e1c:	60a3      	str	r3, [r4, #8]
   d6e1e:	6923      	ldr	r3, [r4, #16]
   d6e20:	60e2      	str	r2, [r4, #12]
   d6e22:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   d6e26:	428a      	cmp	r2, r1
   d6e28:	dd46      	ble.n	d6eb8 <localtime_r+0x1b8>
   d6e2a:	3301      	adds	r3, #1
   d6e2c:	2b0c      	cmp	r3, #12
   d6e2e:	bf0c      	ite	eq
   d6e30:	6963      	ldreq	r3, [r4, #20]
   d6e32:	6123      	strne	r3, [r4, #16]
   d6e34:	eba2 0201 	sub.w	r2, r2, r1
   d6e38:	60e2      	str	r2, [r4, #12]
   d6e3a:	bf01      	itttt	eq
   d6e3c:	3301      	addeq	r3, #1
   d6e3e:	2200      	moveq	r2, #0
   d6e40:	6122      	streq	r2, [r4, #16]
   d6e42:	6163      	streq	r3, [r4, #20]
   d6e44:	bf08      	it	eq
   d6e46:	61e2      	streq	r2, [r4, #28]
   d6e48:	e036      	b.n	d6eb8 <localtime_r+0x1b8>
   d6e4a:	2b00      	cmp	r3, #0
   d6e4c:	da34      	bge.n	d6eb8 <localtime_r+0x1b8>
   d6e4e:	69e2      	ldr	r2, [r4, #28]
   d6e50:	3a01      	subs	r2, #1
   d6e52:	61e2      	str	r2, [r4, #28]
   d6e54:	69a2      	ldr	r2, [r4, #24]
   d6e56:	3a01      	subs	r2, #1
   d6e58:	bf48      	it	mi
   d6e5a:	2206      	movmi	r2, #6
   d6e5c:	61a2      	str	r2, [r4, #24]
   d6e5e:	68e2      	ldr	r2, [r4, #12]
   d6e60:	3318      	adds	r3, #24
   d6e62:	3a01      	subs	r2, #1
   d6e64:	60e2      	str	r2, [r4, #12]
   d6e66:	60a3      	str	r3, [r4, #8]
   d6e68:	bb32      	cbnz	r2, d6eb8 <localtime_r+0x1b8>
   d6e6a:	6923      	ldr	r3, [r4, #16]
   d6e6c:	3b01      	subs	r3, #1
   d6e6e:	d401      	bmi.n	d6e74 <localtime_r+0x174>
   d6e70:	6123      	str	r3, [r4, #16]
   d6e72:	e01d      	b.n	d6eb0 <localtime_r+0x1b0>
   d6e74:	230b      	movs	r3, #11
   d6e76:	6123      	str	r3, [r4, #16]
   d6e78:	6963      	ldr	r3, [r4, #20]
   d6e7a:	1e5a      	subs	r2, r3, #1
   d6e7c:	f012 0f03 	tst.w	r2, #3
   d6e80:	6162      	str	r2, [r4, #20]
   d6e82:	f203 736b 	addw	r3, r3, #1899	; 0x76b
   d6e86:	d105      	bne.n	d6e94 <localtime_r+0x194>
   d6e88:	2164      	movs	r1, #100	; 0x64
   d6e8a:	fb93 f2f1 	sdiv	r2, r3, r1
   d6e8e:	fb01 3212 	mls	r2, r1, r2, r3
   d6e92:	b94a      	cbnz	r2, d6ea8 <localtime_r+0x1a8>
   d6e94:	f44f 71c8 	mov.w	r1, #400	; 0x190
   d6e98:	fb93 f2f1 	sdiv	r2, r3, r1
   d6e9c:	fb01 3312 	mls	r3, r1, r2, r3
   d6ea0:	fab3 f383 	clz	r3, r3
   d6ea4:	095b      	lsrs	r3, r3, #5
   d6ea6:	e000      	b.n	d6eaa <localtime_r+0x1aa>
   d6ea8:	2301      	movs	r3, #1
   d6eaa:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
   d6eae:	61e3      	str	r3, [r4, #28]
   d6eb0:	6923      	ldr	r3, [r4, #16]
   d6eb2:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
   d6eb6:	60e3      	str	r3, [r4, #12]
   d6eb8:	f001 f815 	bl	d7ee6 <__tz_unlock>
   d6ebc:	4620      	mov	r0, r4
   d6ebe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6ec2:	bf00      	nop
   d6ec4:	000d99a4 	.word	0x000d99a4
   d6ec8:	2003e7e4 	.word	0x2003e7e4

000d6ecc <_localeconv_r>:
   d6ecc:	4800      	ldr	r0, [pc, #0]	; (d6ed0 <_localeconv_r+0x4>)
   d6ece:	4770      	bx	lr
   d6ed0:	2003e19c 	.word	0x2003e19c

000d6ed4 <memcpy>:
   d6ed4:	b510      	push	{r4, lr}
   d6ed6:	1e43      	subs	r3, r0, #1
   d6ed8:	440a      	add	r2, r1
   d6eda:	4291      	cmp	r1, r2
   d6edc:	d004      	beq.n	d6ee8 <memcpy+0x14>
   d6ede:	f811 4b01 	ldrb.w	r4, [r1], #1
   d6ee2:	f803 4f01 	strb.w	r4, [r3, #1]!
   d6ee6:	e7f8      	b.n	d6eda <memcpy+0x6>
   d6ee8:	bd10      	pop	{r4, pc}

000d6eea <memset>:
   d6eea:	4402      	add	r2, r0
   d6eec:	4603      	mov	r3, r0
   d6eee:	4293      	cmp	r3, r2
   d6ef0:	d002      	beq.n	d6ef8 <memset+0xe>
   d6ef2:	f803 1b01 	strb.w	r1, [r3], #1
   d6ef6:	e7fa      	b.n	d6eee <memset+0x4>
   d6ef8:	4770      	bx	lr
	...

000d6efc <srand>:
   d6efc:	b538      	push	{r3, r4, r5, lr}
   d6efe:	4b12      	ldr	r3, [pc, #72]	; (d6f48 <srand+0x4c>)
   d6f00:	681c      	ldr	r4, [r3, #0]
   d6f02:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d6f04:	4605      	mov	r5, r0
   d6f06:	b9d3      	cbnz	r3, d6f3e <srand+0x42>
   d6f08:	2018      	movs	r0, #24
   d6f0a:	f7fd fe9f 	bl	d4c4c <malloc>
   d6f0e:	f243 330e 	movw	r3, #13070	; 0x330e
   d6f12:	63a0      	str	r0, [r4, #56]	; 0x38
   d6f14:	8003      	strh	r3, [r0, #0]
   d6f16:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d6f1a:	8043      	strh	r3, [r0, #2]
   d6f1c:	f241 2334 	movw	r3, #4660	; 0x1234
   d6f20:	8083      	strh	r3, [r0, #4]
   d6f22:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d6f26:	80c3      	strh	r3, [r0, #6]
   d6f28:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d6f2c:	8103      	strh	r3, [r0, #8]
   d6f2e:	2305      	movs	r3, #5
   d6f30:	8143      	strh	r3, [r0, #10]
   d6f32:	230b      	movs	r3, #11
   d6f34:	8183      	strh	r3, [r0, #12]
   d6f36:	2201      	movs	r2, #1
   d6f38:	2300      	movs	r3, #0
   d6f3a:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d6f3e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d6f40:	2200      	movs	r2, #0
   d6f42:	611d      	str	r5, [r3, #16]
   d6f44:	615a      	str	r2, [r3, #20]
   d6f46:	bd38      	pop	{r3, r4, r5, pc}
   d6f48:	2003e198 	.word	0x2003e198

000d6f4c <strcmp>:
   d6f4c:	f810 2b01 	ldrb.w	r2, [r0], #1
   d6f50:	f811 3b01 	ldrb.w	r3, [r1], #1
   d6f54:	2a01      	cmp	r2, #1
   d6f56:	bf28      	it	cs
   d6f58:	429a      	cmpcs	r2, r3
   d6f5a:	d0f7      	beq.n	d6f4c <strcmp>
   d6f5c:	1ad0      	subs	r0, r2, r3
   d6f5e:	4770      	bx	lr

000d6f60 <strcpy>:
   d6f60:	4603      	mov	r3, r0
   d6f62:	f811 2b01 	ldrb.w	r2, [r1], #1
   d6f66:	f803 2b01 	strb.w	r2, [r3], #1
   d6f6a:	2a00      	cmp	r2, #0
   d6f6c:	d1f9      	bne.n	d6f62 <strcpy+0x2>
   d6f6e:	4770      	bx	lr

000d6f70 <strdup>:
   d6f70:	4b02      	ldr	r3, [pc, #8]	; (d6f7c <strdup+0xc>)
   d6f72:	4601      	mov	r1, r0
   d6f74:	6818      	ldr	r0, [r3, #0]
   d6f76:	f000 b803 	b.w	d6f80 <_strdup_r>
   d6f7a:	bf00      	nop
   d6f7c:	2003e198 	.word	0x2003e198

000d6f80 <_strdup_r>:
   d6f80:	b570      	push	{r4, r5, r6, lr}
   d6f82:	4606      	mov	r6, r0
   d6f84:	4608      	mov	r0, r1
   d6f86:	460c      	mov	r4, r1
   d6f88:	f000 f80d 	bl	d6fa6 <strlen>
   d6f8c:	1c45      	adds	r5, r0, #1
   d6f8e:	4629      	mov	r1, r5
   d6f90:	4630      	mov	r0, r6
   d6f92:	f7fd fe93 	bl	d4cbc <_malloc_r>
   d6f96:	4606      	mov	r6, r0
   d6f98:	b118      	cbz	r0, d6fa2 <_strdup_r+0x22>
   d6f9a:	462a      	mov	r2, r5
   d6f9c:	4621      	mov	r1, r4
   d6f9e:	f7ff ff99 	bl	d6ed4 <memcpy>
   d6fa2:	4630      	mov	r0, r6
   d6fa4:	bd70      	pop	{r4, r5, r6, pc}

000d6fa6 <strlen>:
   d6fa6:	4603      	mov	r3, r0
   d6fa8:	f813 2b01 	ldrb.w	r2, [r3], #1
   d6fac:	2a00      	cmp	r2, #0
   d6fae:	d1fb      	bne.n	d6fa8 <strlen+0x2>
   d6fb0:	1a18      	subs	r0, r3, r0
   d6fb2:	3801      	subs	r0, #1
   d6fb4:	4770      	bx	lr

000d6fb6 <strncmp>:
   d6fb6:	b530      	push	{r4, r5, lr}
   d6fb8:	b182      	cbz	r2, d6fdc <strncmp+0x26>
   d6fba:	1e45      	subs	r5, r0, #1
   d6fbc:	3901      	subs	r1, #1
   d6fbe:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   d6fc2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d6fc6:	42a3      	cmp	r3, r4
   d6fc8:	d106      	bne.n	d6fd8 <strncmp+0x22>
   d6fca:	43ec      	mvns	r4, r5
   d6fcc:	4414      	add	r4, r2
   d6fce:	42e0      	cmn	r0, r4
   d6fd0:	d001      	beq.n	d6fd6 <strncmp+0x20>
   d6fd2:	2b00      	cmp	r3, #0
   d6fd4:	d1f3      	bne.n	d6fbe <strncmp+0x8>
   d6fd6:	461c      	mov	r4, r3
   d6fd8:	1b18      	subs	r0, r3, r4
   d6fda:	bd30      	pop	{r4, r5, pc}
   d6fdc:	4610      	mov	r0, r2
   d6fde:	bd30      	pop	{r4, r5, pc}

000d6fe0 <sulp>:
   d6fe0:	b570      	push	{r4, r5, r6, lr}
   d6fe2:	4604      	mov	r4, r0
   d6fe4:	460d      	mov	r5, r1
   d6fe6:	ec45 4b10 	vmov	d0, r4, r5
   d6fea:	4616      	mov	r6, r2
   d6fec:	f001 ffc6 	bl	d8f7c <__ulp>
   d6ff0:	ec51 0b10 	vmov	r0, r1, d0
   d6ff4:	b17e      	cbz	r6, d7016 <sulp+0x36>
   d6ff6:	f3c5 530a 	ubfx	r3, r5, #20, #11
   d6ffa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   d6ffe:	2b00      	cmp	r3, #0
   d7000:	dd09      	ble.n	d7016 <sulp+0x36>
   d7002:	051b      	lsls	r3, r3, #20
   d7004:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   d7008:	2400      	movs	r4, #0
   d700a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   d700e:	4622      	mov	r2, r4
   d7010:	462b      	mov	r3, r5
   d7012:	f7ff fb1f 	bl	d6654 <__aeabi_dmul>
   d7016:	bd70      	pop	{r4, r5, r6, pc}

000d7018 <_strtod_r>:
   d7018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d701c:	b09d      	sub	sp, #116	; 0x74
   d701e:	2300      	movs	r3, #0
   d7020:	9002      	str	r0, [sp, #8]
   d7022:	460c      	mov	r4, r1
   d7024:	9213      	str	r2, [sp, #76]	; 0x4c
   d7026:	9318      	str	r3, [sp, #96]	; 0x60
   d7028:	f04f 0a00 	mov.w	sl, #0
   d702c:	f04f 0b00 	mov.w	fp, #0
   d7030:	9117      	str	r1, [sp, #92]	; 0x5c
   d7032:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d7034:	781a      	ldrb	r2, [r3, #0]
   d7036:	2a0d      	cmp	r2, #13
   d7038:	d805      	bhi.n	d7046 <_strtod_r+0x2e>
   d703a:	2a09      	cmp	r2, #9
   d703c:	d213      	bcs.n	d7066 <_strtod_r+0x4e>
   d703e:	2a00      	cmp	r2, #0
   d7040:	f000 81ac 	beq.w	d739c <_strtod_r+0x384>
   d7044:	e012      	b.n	d706c <_strtod_r+0x54>
   d7046:	2a2b      	cmp	r2, #43	; 0x2b
   d7048:	d004      	beq.n	d7054 <_strtod_r+0x3c>
   d704a:	2a2d      	cmp	r2, #45	; 0x2d
   d704c:	d004      	beq.n	d7058 <_strtod_r+0x40>
   d704e:	2a20      	cmp	r2, #32
   d7050:	d10c      	bne.n	d706c <_strtod_r+0x54>
   d7052:	e008      	b.n	d7066 <_strtod_r+0x4e>
   d7054:	2200      	movs	r2, #0
   d7056:	e000      	b.n	d705a <_strtod_r+0x42>
   d7058:	2201      	movs	r2, #1
   d705a:	920c      	str	r2, [sp, #48]	; 0x30
   d705c:	1c5a      	adds	r2, r3, #1
   d705e:	9217      	str	r2, [sp, #92]	; 0x5c
   d7060:	785b      	ldrb	r3, [r3, #1]
   d7062:	b92b      	cbnz	r3, d7070 <_strtod_r+0x58>
   d7064:	e19a      	b.n	d739c <_strtod_r+0x384>
   d7066:	3301      	adds	r3, #1
   d7068:	9317      	str	r3, [sp, #92]	; 0x5c
   d706a:	e7e2      	b.n	d7032 <_strtod_r+0x1a>
   d706c:	2300      	movs	r3, #0
   d706e:	930c      	str	r3, [sp, #48]	; 0x30
   d7070:	9d17      	ldr	r5, [sp, #92]	; 0x5c
   d7072:	782b      	ldrb	r3, [r5, #0]
   d7074:	2b30      	cmp	r3, #48	; 0x30
   d7076:	d15c      	bne.n	d7132 <_strtod_r+0x11a>
   d7078:	786b      	ldrb	r3, [r5, #1]
   d707a:	2b58      	cmp	r3, #88	; 0x58
   d707c:	d001      	beq.n	d7082 <_strtod_r+0x6a>
   d707e:	2b78      	cmp	r3, #120	; 0x78
   d7080:	d14c      	bne.n	d711c <_strtod_r+0x104>
   d7082:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d7084:	9301      	str	r3, [sp, #4]
   d7086:	ab18      	add	r3, sp, #96	; 0x60
   d7088:	9300      	str	r3, [sp, #0]
   d708a:	4aa9      	ldr	r2, [pc, #676]	; (d7330 <_strtod_r+0x318>)
   d708c:	9802      	ldr	r0, [sp, #8]
   d708e:	ab19      	add	r3, sp, #100	; 0x64
   d7090:	a917      	add	r1, sp, #92	; 0x5c
   d7092:	f001 f8fa 	bl	d828a <__gethex>
   d7096:	f010 0607 	ands.w	r6, r0, #7
   d709a:	4604      	mov	r4, r0
   d709c:	f000 8587 	beq.w	d7bae <_strtod_r+0xb96>
   d70a0:	2e06      	cmp	r6, #6
   d70a2:	d105      	bne.n	d70b0 <_strtod_r+0x98>
   d70a4:	3501      	adds	r5, #1
   d70a6:	2300      	movs	r3, #0
   d70a8:	9517      	str	r5, [sp, #92]	; 0x5c
   d70aa:	930c      	str	r3, [sp, #48]	; 0x30
   d70ac:	f000 bd7f 	b.w	d7bae <_strtod_r+0xb96>
   d70b0:	9a18      	ldr	r2, [sp, #96]	; 0x60
   d70b2:	b13a      	cbz	r2, d70c4 <_strtod_r+0xac>
   d70b4:	2135      	movs	r1, #53	; 0x35
   d70b6:	a81a      	add	r0, sp, #104	; 0x68
   d70b8:	f002 f84d 	bl	d9156 <__copybits>
   d70bc:	9918      	ldr	r1, [sp, #96]	; 0x60
   d70be:	9802      	ldr	r0, [sp, #8]
   d70c0:	f001 fccb 	bl	d8a5a <_Bfree>
   d70c4:	2e06      	cmp	r6, #6
   d70c6:	d822      	bhi.n	d710e <_strtod_r+0xf6>
   d70c8:	e8df f006 	tbb	[pc, r6]
   d70cc:	18080d04 	.word	0x18080d04
   d70d0:	0d1d      	.short	0x0d1d
   d70d2:	04          	.byte	0x04
   d70d3:	00          	.byte	0x00
   d70d4:	f04f 0b00 	mov.w	fp, #0
   d70d8:	46da      	mov	sl, fp
   d70da:	e018      	b.n	d710e <_strtod_r+0xf6>
   d70dc:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   d70e0:	f8dd b06c 	ldr.w	fp, [sp, #108]	; 0x6c
   d70e4:	e013      	b.n	d710e <_strtod_r+0xf6>
   d70e6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   d70e8:	9a19      	ldr	r2, [sp, #100]	; 0x64
   d70ea:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   d70ee:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   d70f2:	f202 4233 	addw	r2, r2, #1075	; 0x433
   d70f6:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   d70fa:	e008      	b.n	d710e <_strtod_r+0xf6>
   d70fc:	f8df b234 	ldr.w	fp, [pc, #564]	; d7334 <_strtod_r+0x31c>
   d7100:	f04f 0a00 	mov.w	sl, #0
   d7104:	e003      	b.n	d710e <_strtod_r+0xf6>
   d7106:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   d710a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   d710e:	0721      	lsls	r1, r4, #28
   d7110:	f140 854d 	bpl.w	d7bae <_strtod_r+0xb96>
   d7114:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   d7118:	f000 bd49 	b.w	d7bae <_strtod_r+0xb96>
   d711c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d711e:	1c5a      	adds	r2, r3, #1
   d7120:	9217      	str	r2, [sp, #92]	; 0x5c
   d7122:	785b      	ldrb	r3, [r3, #1]
   d7124:	2b30      	cmp	r3, #48	; 0x30
   d7126:	d0f9      	beq.n	d711c <_strtod_r+0x104>
   d7128:	2b00      	cmp	r3, #0
   d712a:	f000 8540 	beq.w	d7bae <_strtod_r+0xb96>
   d712e:	2301      	movs	r3, #1
   d7130:	e000      	b.n	d7134 <_strtod_r+0x11c>
   d7132:	2300      	movs	r3, #0
   d7134:	f04f 0800 	mov.w	r8, #0
   d7138:	9306      	str	r3, [sp, #24]
   d713a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d713c:	9307      	str	r3, [sp, #28]
   d713e:	f8cd 8014 	str.w	r8, [sp, #20]
   d7142:	f8cd 8010 	str.w	r8, [sp, #16]
   d7146:	220a      	movs	r2, #10
   d7148:	9d17      	ldr	r5, [sp, #92]	; 0x5c
   d714a:	782e      	ldrb	r6, [r5, #0]
   d714c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   d7150:	b2d9      	uxtb	r1, r3
   d7152:	2909      	cmp	r1, #9
   d7154:	d80e      	bhi.n	d7174 <_strtod_r+0x15c>
   d7156:	9904      	ldr	r1, [sp, #16]
   d7158:	2908      	cmp	r1, #8
   d715a:	bfdd      	ittte	le
   d715c:	9905      	ldrle	r1, [sp, #20]
   d715e:	fb02 3301 	mlale	r3, r2, r1, r3
   d7162:	9305      	strle	r3, [sp, #20]
   d7164:	fb02 3808 	mlagt	r8, r2, r8, r3
   d7168:	9b04      	ldr	r3, [sp, #16]
   d716a:	3501      	adds	r5, #1
   d716c:	3301      	adds	r3, #1
   d716e:	9304      	str	r3, [sp, #16]
   d7170:	9517      	str	r5, [sp, #92]	; 0x5c
   d7172:	e7e9      	b.n	d7148 <_strtod_r+0x130>
   d7174:	9802      	ldr	r0, [sp, #8]
   d7176:	f7ff fea9 	bl	d6ecc <_localeconv_r>
   d717a:	6807      	ldr	r7, [r0, #0]
   d717c:	9802      	ldr	r0, [sp, #8]
   d717e:	f7ff fea5 	bl	d6ecc <_localeconv_r>
   d7182:	6800      	ldr	r0, [r0, #0]
   d7184:	f7ff ff0f 	bl	d6fa6 <strlen>
   d7188:	4639      	mov	r1, r7
   d718a:	4602      	mov	r2, r0
   d718c:	4628      	mov	r0, r5
   d718e:	f7ff ff12 	bl	d6fb6 <strncmp>
   d7192:	4607      	mov	r7, r0
   d7194:	b128      	cbz	r0, d71a2 <_strtod_r+0x18a>
   d7196:	2000      	movs	r0, #0
   d7198:	4633      	mov	r3, r6
   d719a:	9d04      	ldr	r5, [sp, #16]
   d719c:	4602      	mov	r2, r0
   d719e:	4601      	mov	r1, r0
   d71a0:	e057      	b.n	d7252 <_strtod_r+0x23a>
   d71a2:	9802      	ldr	r0, [sp, #8]
   d71a4:	f7ff fe92 	bl	d6ecc <_localeconv_r>
   d71a8:	6800      	ldr	r0, [r0, #0]
   d71aa:	f7ff fefc 	bl	d6fa6 <strlen>
   d71ae:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d71b0:	181a      	adds	r2, r3, r0
   d71b2:	9217      	str	r2, [sp, #92]	; 0x5c
   d71b4:	9a04      	ldr	r2, [sp, #16]
   d71b6:	5c1b      	ldrb	r3, [r3, r0]
   d71b8:	2a00      	cmp	r2, #0
   d71ba:	d142      	bne.n	d7242 <_strtod_r+0x22a>
   d71bc:	4610      	mov	r0, r2
   d71be:	2b30      	cmp	r3, #48	; 0x30
   d71c0:	d105      	bne.n	d71ce <_strtod_r+0x1b6>
   d71c2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d71c4:	1c5a      	adds	r2, r3, #1
   d71c6:	9217      	str	r2, [sp, #92]	; 0x5c
   d71c8:	3001      	adds	r0, #1
   d71ca:	785b      	ldrb	r3, [r3, #1]
   d71cc:	e7f7      	b.n	d71be <_strtod_r+0x1a6>
   d71ce:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
   d71d2:	2a08      	cmp	r2, #8
   d71d4:	d843      	bhi.n	d725e <_strtod_r+0x246>
   d71d6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   d71d8:	9207      	str	r2, [sp, #28]
   d71da:	4602      	mov	r2, r0
   d71dc:	2000      	movs	r0, #0
   d71de:	4605      	mov	r5, r0
   d71e0:	3b30      	subs	r3, #48	; 0x30
   d71e2:	f100 0101 	add.w	r1, r0, #1
   d71e6:	d026      	beq.n	d7236 <_strtod_r+0x21e>
   d71e8:	440a      	add	r2, r1
   d71ea:	eb05 0c00 	add.w	ip, r5, r0
   d71ee:	4629      	mov	r1, r5
   d71f0:	260a      	movs	r6, #10
   d71f2:	4561      	cmp	r1, ip
   d71f4:	d00e      	beq.n	d7214 <_strtod_r+0x1fc>
   d71f6:	3101      	adds	r1, #1
   d71f8:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
   d71fc:	f1be 0f08 	cmp.w	lr, #8
   d7200:	dc03      	bgt.n	d720a <_strtod_r+0x1f2>
   d7202:	9f05      	ldr	r7, [sp, #20]
   d7204:	4377      	muls	r7, r6
   d7206:	9705      	str	r7, [sp, #20]
   d7208:	e7f3      	b.n	d71f2 <_strtod_r+0x1da>
   d720a:	2910      	cmp	r1, #16
   d720c:	bfd8      	it	le
   d720e:	fb06 f808 	mulle.w	r8, r6, r8
   d7212:	e7ee      	b.n	d71f2 <_strtod_r+0x1da>
   d7214:	4428      	add	r0, r5
   d7216:	2808      	cmp	r0, #8
   d7218:	f100 0501 	add.w	r5, r0, #1
   d721c:	dc05      	bgt.n	d722a <_strtod_r+0x212>
   d721e:	9805      	ldr	r0, [sp, #20]
   d7220:	210a      	movs	r1, #10
   d7222:	fb01 3300 	mla	r3, r1, r0, r3
   d7226:	9305      	str	r3, [sp, #20]
   d7228:	e004      	b.n	d7234 <_strtod_r+0x21c>
   d722a:	2d10      	cmp	r5, #16
   d722c:	bfdc      	itt	le
   d722e:	210a      	movle	r1, #10
   d7230:	fb01 3808 	mlale	r8, r1, r8, r3
   d7234:	2100      	movs	r1, #0
   d7236:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d7238:	1c58      	adds	r0, r3, #1
   d723a:	9017      	str	r0, [sp, #92]	; 0x5c
   d723c:	785b      	ldrb	r3, [r3, #1]
   d723e:	4608      	mov	r0, r1
   d7240:	e002      	b.n	d7248 <_strtod_r+0x230>
   d7242:	9d04      	ldr	r5, [sp, #16]
   d7244:	4638      	mov	r0, r7
   d7246:	463a      	mov	r2, r7
   d7248:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   d724c:	2909      	cmp	r1, #9
   d724e:	d9c7      	bls.n	d71e0 <_strtod_r+0x1c8>
   d7250:	2101      	movs	r1, #1
   d7252:	2b65      	cmp	r3, #101	; 0x65
   d7254:	d001      	beq.n	d725a <_strtod_r+0x242>
   d7256:	2b45      	cmp	r3, #69	; 0x45
   d7258:	d151      	bne.n	d72fe <_strtod_r+0x2e6>
   d725a:	b96d      	cbnz	r5, d7278 <_strtod_r+0x260>
   d725c:	e004      	b.n	d7268 <_strtod_r+0x250>
   d725e:	2b65      	cmp	r3, #101	; 0x65
   d7260:	f040 84b3 	bne.w	d7bca <_strtod_r+0xbb2>
   d7264:	2200      	movs	r2, #0
   d7266:	2101      	movs	r1, #1
   d7268:	b928      	cbnz	r0, d7276 <_strtod_r+0x25e>
   d726a:	9b06      	ldr	r3, [sp, #24]
   d726c:	2b00      	cmp	r3, #0
   d726e:	f000 8095 	beq.w	d739c <_strtod_r+0x384>
   d7272:	4605      	mov	r5, r0
   d7274:	e000      	b.n	d7278 <_strtod_r+0x260>
   d7276:	2500      	movs	r5, #0
   d7278:	9c17      	ldr	r4, [sp, #92]	; 0x5c
   d727a:	1c63      	adds	r3, r4, #1
   d727c:	9317      	str	r3, [sp, #92]	; 0x5c
   d727e:	7863      	ldrb	r3, [r4, #1]
   d7280:	2b2b      	cmp	r3, #43	; 0x2b
   d7282:	d006      	beq.n	d7292 <_strtod_r+0x27a>
   d7284:	2b2d      	cmp	r3, #45	; 0x2d
   d7286:	d002      	beq.n	d728e <_strtod_r+0x276>
   d7288:	2600      	movs	r6, #0
   d728a:	9603      	str	r6, [sp, #12]
   d728c:	e006      	b.n	d729c <_strtod_r+0x284>
   d728e:	2301      	movs	r3, #1
   d7290:	e000      	b.n	d7294 <_strtod_r+0x27c>
   d7292:	2300      	movs	r3, #0
   d7294:	9303      	str	r3, [sp, #12]
   d7296:	1ca3      	adds	r3, r4, #2
   d7298:	9317      	str	r3, [sp, #92]	; 0x5c
   d729a:	78a3      	ldrb	r3, [r4, #2]
   d729c:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
   d72a0:	2e09      	cmp	r6, #9
   d72a2:	d82b      	bhi.n	d72fc <_strtod_r+0x2e4>
   d72a4:	2b30      	cmp	r3, #48	; 0x30
   d72a6:	d104      	bne.n	d72b2 <_strtod_r+0x29a>
   d72a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d72aa:	1c5e      	adds	r6, r3, #1
   d72ac:	9617      	str	r6, [sp, #92]	; 0x5c
   d72ae:	785b      	ldrb	r3, [r3, #1]
   d72b0:	e7f8      	b.n	d72a4 <_strtod_r+0x28c>
   d72b2:	f1a3 0631 	sub.w	r6, r3, #49	; 0x31
   d72b6:	2e08      	cmp	r6, #8
   d72b8:	d821      	bhi.n	d72fe <_strtod_r+0x2e6>
   d72ba:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
   d72be:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d72c0:	f04f 0c0a 	mov.w	ip, #10
   d72c4:	461f      	mov	r7, r3
   d72c6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d72c8:	1c5e      	adds	r6, r3, #1
   d72ca:	9617      	str	r6, [sp, #92]	; 0x5c
   d72cc:	785b      	ldrb	r3, [r3, #1]
   d72ce:	f1a3 0930 	sub.w	r9, r3, #48	; 0x30
   d72d2:	f1b9 0f09 	cmp.w	r9, #9
   d72d6:	d804      	bhi.n	d72e2 <_strtod_r+0x2ca>
   d72d8:	fb0c 3e0e 	mla	lr, ip, lr, r3
   d72dc:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   d72e0:	e7f1      	b.n	d72c6 <_strtod_r+0x2ae>
   d72e2:	1bf6      	subs	r6, r6, r7
   d72e4:	2e08      	cmp	r6, #8
   d72e6:	f644 691f 	movw	r9, #19999	; 0x4e1f
   d72ea:	dc02      	bgt.n	d72f2 <_strtod_r+0x2da>
   d72ec:	45f1      	cmp	r9, lr
   d72ee:	bfa8      	it	ge
   d72f0:	46f1      	movge	r9, lr
   d72f2:	9e03      	ldr	r6, [sp, #12]
   d72f4:	b12e      	cbz	r6, d7302 <_strtod_r+0x2ea>
   d72f6:	f1c9 0900 	rsb	r9, r9, #0
   d72fa:	e002      	b.n	d7302 <_strtod_r+0x2ea>
   d72fc:	9417      	str	r4, [sp, #92]	; 0x5c
   d72fe:	f04f 0900 	mov.w	r9, #0
   d7302:	2d00      	cmp	r5, #0
   d7304:	d153      	bne.n	d73ae <_strtod_r+0x396>
   d7306:	2800      	cmp	r0, #0
   d7308:	f040 8451 	bne.w	d7bae <_strtod_r+0xb96>
   d730c:	9a06      	ldr	r2, [sp, #24]
   d730e:	2a00      	cmp	r2, #0
   d7310:	f040 844d 	bne.w	d7bae <_strtod_r+0xb96>
   d7314:	2900      	cmp	r1, #0
   d7316:	d141      	bne.n	d739c <_strtod_r+0x384>
   d7318:	2b4e      	cmp	r3, #78	; 0x4e
   d731a:	d020      	beq.n	d735e <_strtod_r+0x346>
   d731c:	dc02      	bgt.n	d7324 <_strtod_r+0x30c>
   d731e:	2b49      	cmp	r3, #73	; 0x49
   d7320:	d00a      	beq.n	d7338 <_strtod_r+0x320>
   d7322:	e03b      	b.n	d739c <_strtod_r+0x384>
   d7324:	2b69      	cmp	r3, #105	; 0x69
   d7326:	d007      	beq.n	d7338 <_strtod_r+0x320>
   d7328:	2b6e      	cmp	r3, #110	; 0x6e
   d732a:	d018      	beq.n	d735e <_strtod_r+0x346>
   d732c:	e036      	b.n	d739c <_strtod_r+0x384>
   d732e:	bf00      	nop
   d7330:	000d9a04 	.word	0x000d9a04
   d7334:	7ff00000 	.word	0x7ff00000
   d7338:	49a8      	ldr	r1, [pc, #672]	; (d75dc <_strtod_r+0x5c4>)
   d733a:	a817      	add	r0, sp, #92	; 0x5c
   d733c:	f001 f9d6 	bl	d86ec <__match>
   d7340:	b360      	cbz	r0, d739c <_strtod_r+0x384>
   d7342:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d7344:	49a6      	ldr	r1, [pc, #664]	; (d75e0 <_strtod_r+0x5c8>)
   d7346:	3b01      	subs	r3, #1
   d7348:	a817      	add	r0, sp, #92	; 0x5c
   d734a:	9317      	str	r3, [sp, #92]	; 0x5c
   d734c:	f001 f9ce 	bl	d86ec <__match>
   d7350:	b910      	cbnz	r0, d7358 <_strtod_r+0x340>
   d7352:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d7354:	3301      	adds	r3, #1
   d7356:	9317      	str	r3, [sp, #92]	; 0x5c
   d7358:	f8df b2a0 	ldr.w	fp, [pc, #672]	; d75fc <_strtod_r+0x5e4>
   d735c:	e01a      	b.n	d7394 <_strtod_r+0x37c>
   d735e:	49a1      	ldr	r1, [pc, #644]	; (d75e4 <_strtod_r+0x5cc>)
   d7360:	a817      	add	r0, sp, #92	; 0x5c
   d7362:	f001 f9c3 	bl	d86ec <__match>
   d7366:	b1c8      	cbz	r0, d739c <_strtod_r+0x384>
   d7368:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d736a:	781b      	ldrb	r3, [r3, #0]
   d736c:	2b28      	cmp	r3, #40	; 0x28
   d736e:	d10f      	bne.n	d7390 <_strtod_r+0x378>
   d7370:	aa1a      	add	r2, sp, #104	; 0x68
   d7372:	499d      	ldr	r1, [pc, #628]	; (d75e8 <_strtod_r+0x5d0>)
   d7374:	a817      	add	r0, sp, #92	; 0x5c
   d7376:	f001 f9cc 	bl	d8712 <__hexnan>
   d737a:	2805      	cmp	r0, #5
   d737c:	d108      	bne.n	d7390 <_strtod_r+0x378>
   d737e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   d7380:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   d7384:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   d7388:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   d738c:	f000 bc0f 	b.w	d7bae <_strtod_r+0xb96>
   d7390:	f8df b26c 	ldr.w	fp, [pc, #620]	; d7600 <_strtod_r+0x5e8>
   d7394:	f04f 0a00 	mov.w	sl, #0
   d7398:	f000 bc09 	b.w	d7bae <_strtod_r+0xb96>
   d739c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   d739e:	9417      	str	r4, [sp, #92]	; 0x5c
   d73a0:	2b00      	cmp	r3, #0
   d73a2:	f000 840f 	beq.w	d7bc4 <_strtod_r+0xbac>
   d73a6:	2300      	movs	r3, #0
   d73a8:	930c      	str	r3, [sp, #48]	; 0x30
   d73aa:	f000 bc02 	b.w	d7bb2 <_strtod_r+0xb9a>
   d73ae:	9b04      	ldr	r3, [sp, #16]
   d73b0:	9805      	ldr	r0, [sp, #20]
   d73b2:	2b00      	cmp	r3, #0
   d73b4:	bf08      	it	eq
   d73b6:	462b      	moveq	r3, r5
   d73b8:	2d10      	cmp	r5, #16
   d73ba:	462c      	mov	r4, r5
   d73bc:	ebc2 0909 	rsb	r9, r2, r9
   d73c0:	bfa8      	it	ge
   d73c2:	2410      	movge	r4, #16
   d73c4:	9304      	str	r3, [sp, #16]
   d73c6:	f7ff f8cf 	bl	d6568 <__aeabi_ui2d>
   d73ca:	2c09      	cmp	r4, #9
   d73cc:	4682      	mov	sl, r0
   d73ce:	468b      	mov	fp, r1
   d73d0:	dd13      	ble.n	d73fa <_strtod_r+0x3e2>
   d73d2:	4b86      	ldr	r3, [pc, #536]	; (d75ec <_strtod_r+0x5d4>)
   d73d4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   d73d8:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   d73dc:	f7ff f93a 	bl	d6654 <__aeabi_dmul>
   d73e0:	4606      	mov	r6, r0
   d73e2:	4640      	mov	r0, r8
   d73e4:	460f      	mov	r7, r1
   d73e6:	f7ff f8bf 	bl	d6568 <__aeabi_ui2d>
   d73ea:	4602      	mov	r2, r0
   d73ec:	460b      	mov	r3, r1
   d73ee:	4630      	mov	r0, r6
   d73f0:	4639      	mov	r1, r7
   d73f2:	f7fe ff7d 	bl	d62f0 <__adddf3>
   d73f6:	4682      	mov	sl, r0
   d73f8:	468b      	mov	fp, r1
   d73fa:	2d0f      	cmp	r5, #15
   d73fc:	dc36      	bgt.n	d746c <_strtod_r+0x454>
   d73fe:	f1b9 0f00 	cmp.w	r9, #0
   d7402:	f000 83d4 	beq.w	d7bae <_strtod_r+0xb96>
   d7406:	dd24      	ble.n	d7452 <_strtod_r+0x43a>
   d7408:	f1b9 0f16 	cmp.w	r9, #22
   d740c:	dc07      	bgt.n	d741e <_strtod_r+0x406>
   d740e:	4d77      	ldr	r5, [pc, #476]	; (d75ec <_strtod_r+0x5d4>)
   d7410:	eb05 09c9 	add.w	r9, r5, r9, lsl #3
   d7414:	4652      	mov	r2, sl
   d7416:	465b      	mov	r3, fp
   d7418:	e9d9 0100 	ldrd	r0, r1, [r9]
   d741c:	e014      	b.n	d7448 <_strtod_r+0x430>
   d741e:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   d7422:	4599      	cmp	r9, r3
   d7424:	dc22      	bgt.n	d746c <_strtod_r+0x454>
   d7426:	4c71      	ldr	r4, [pc, #452]	; (d75ec <_strtod_r+0x5d4>)
   d7428:	f1c5 050f 	rsb	r5, r5, #15
   d742c:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   d7430:	ebc5 0509 	rsb	r5, r5, r9
   d7434:	4652      	mov	r2, sl
   d7436:	465b      	mov	r3, fp
   d7438:	e9d1 0100 	ldrd	r0, r1, [r1]
   d743c:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   d7440:	f7ff f908 	bl	d6654 <__aeabi_dmul>
   d7444:	e9d4 2300 	ldrd	r2, r3, [r4]
   d7448:	f7ff f904 	bl	d6654 <__aeabi_dmul>
   d744c:	4682      	mov	sl, r0
   d744e:	468b      	mov	fp, r1
   d7450:	e3ad      	b.n	d7bae <_strtod_r+0xb96>
   d7452:	f119 0f16 	cmn.w	r9, #22
   d7456:	db09      	blt.n	d746c <_strtod_r+0x454>
   d7458:	4d64      	ldr	r5, [pc, #400]	; (d75ec <_strtod_r+0x5d4>)
   d745a:	eba5 09c9 	sub.w	r9, r5, r9, lsl #3
   d745e:	e9d9 2300 	ldrd	r2, r3, [r9]
   d7462:	4650      	mov	r0, sl
   d7464:	4659      	mov	r1, fp
   d7466:	f7ff fa1f 	bl	d68a8 <__aeabi_ddiv>
   d746a:	e7ef      	b.n	d744c <_strtod_r+0x434>
   d746c:	1b2c      	subs	r4, r5, r4
   d746e:	444c      	add	r4, r9
   d7470:	2c00      	cmp	r4, #0
   d7472:	dd57      	ble.n	d7524 <_strtod_r+0x50c>
   d7474:	f014 010f 	ands.w	r1, r4, #15
   d7478:	d00a      	beq.n	d7490 <_strtod_r+0x478>
   d747a:	4b5c      	ldr	r3, [pc, #368]	; (d75ec <_strtod_r+0x5d4>)
   d747c:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   d7480:	4652      	mov	r2, sl
   d7482:	465b      	mov	r3, fp
   d7484:	e9d1 0100 	ldrd	r0, r1, [r1]
   d7488:	f7ff f8e4 	bl	d6654 <__aeabi_dmul>
   d748c:	4682      	mov	sl, r0
   d748e:	468b      	mov	fp, r1
   d7490:	f034 040f 	bics.w	r4, r4, #15
   d7494:	f000 80b8 	beq.w	d7608 <_strtod_r+0x5f0>
   d7498:	f5b4 7f9a 	cmp.w	r4, #308	; 0x134
   d749c:	dd0b      	ble.n	d74b6 <_strtod_r+0x49e>
   d749e:	2400      	movs	r4, #0
   d74a0:	4625      	mov	r5, r4
   d74a2:	9405      	str	r4, [sp, #20]
   d74a4:	9404      	str	r4, [sp, #16]
   d74a6:	9a02      	ldr	r2, [sp, #8]
   d74a8:	f8df b150 	ldr.w	fp, [pc, #336]	; d75fc <_strtod_r+0x5e4>
   d74ac:	2322      	movs	r3, #34	; 0x22
   d74ae:	6013      	str	r3, [r2, #0]
   d74b0:	f04f 0a00 	mov.w	sl, #0
   d74b4:	e187      	b.n	d77c6 <_strtod_r+0x7ae>
   d74b6:	4e4e      	ldr	r6, [pc, #312]	; (d75f0 <_strtod_r+0x5d8>)
   d74b8:	2300      	movs	r3, #0
   d74ba:	1124      	asrs	r4, r4, #4
   d74bc:	4650      	mov	r0, sl
   d74be:	4659      	mov	r1, fp
   d74c0:	4698      	mov	r8, r3
   d74c2:	4637      	mov	r7, r6
   d74c4:	2c01      	cmp	r4, #1
   d74c6:	dd0b      	ble.n	d74e0 <_strtod_r+0x4c8>
   d74c8:	07e2      	lsls	r2, r4, #31
   d74ca:	d504      	bpl.n	d74d6 <_strtod_r+0x4be>
   d74cc:	e9d6 2300 	ldrd	r2, r3, [r6]
   d74d0:	f7ff f8c0 	bl	d6654 <__aeabi_dmul>
   d74d4:	2301      	movs	r3, #1
   d74d6:	f108 0801 	add.w	r8, r8, #1
   d74da:	1064      	asrs	r4, r4, #1
   d74dc:	3608      	adds	r6, #8
   d74de:	e7f1      	b.n	d74c4 <_strtod_r+0x4ac>
   d74e0:	b10b      	cbz	r3, d74e6 <_strtod_r+0x4ce>
   d74e2:	4682      	mov	sl, r0
   d74e4:	468b      	mov	fp, r1
   d74e6:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   d74ea:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
   d74ee:	4652      	mov	r2, sl
   d74f0:	465b      	mov	r3, fp
   d74f2:	e9d7 0100 	ldrd	r0, r1, [r7]
   d74f6:	f7ff f8ad 	bl	d6654 <__aeabi_dmul>
   d74fa:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   d74fe:	468b      	mov	fp, r1
   d7500:	460a      	mov	r2, r1
   d7502:	0d1b      	lsrs	r3, r3, #20
   d7504:	493b      	ldr	r1, [pc, #236]	; (d75f4 <_strtod_r+0x5dc>)
   d7506:	051b      	lsls	r3, r3, #20
   d7508:	428b      	cmp	r3, r1
   d750a:	4682      	mov	sl, r0
   d750c:	d8c7      	bhi.n	d749e <_strtod_r+0x486>
   d750e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   d7512:	428b      	cmp	r3, r1
   d7514:	bf86      	itte	hi
   d7516:	f8df b0ec 	ldrhi.w	fp, [pc, #236]	; d7604 <_strtod_r+0x5ec>
   d751a:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
   d751e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   d7522:	e071      	b.n	d7608 <_strtod_r+0x5f0>
   d7524:	d070      	beq.n	d7608 <_strtod_r+0x5f0>
   d7526:	4264      	negs	r4, r4
   d7528:	f014 020f 	ands.w	r2, r4, #15
   d752c:	d00a      	beq.n	d7544 <_strtod_r+0x52c>
   d752e:	4b2f      	ldr	r3, [pc, #188]	; (d75ec <_strtod_r+0x5d4>)
   d7530:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   d7534:	4650      	mov	r0, sl
   d7536:	4659      	mov	r1, fp
   d7538:	e9d3 2300 	ldrd	r2, r3, [r3]
   d753c:	f7ff f9b4 	bl	d68a8 <__aeabi_ddiv>
   d7540:	4682      	mov	sl, r0
   d7542:	468b      	mov	fp, r1
   d7544:	1124      	asrs	r4, r4, #4
   d7546:	d05f      	beq.n	d7608 <_strtod_r+0x5f0>
   d7548:	2c1f      	cmp	r4, #31
   d754a:	dd04      	ble.n	d7556 <_strtod_r+0x53e>
   d754c:	2400      	movs	r4, #0
   d754e:	4625      	mov	r5, r4
   d7550:	9405      	str	r4, [sp, #20]
   d7552:	9404      	str	r4, [sp, #16]
   d7554:	e130      	b.n	d77b8 <_strtod_r+0x7a0>
   d7556:	f014 0f10 	tst.w	r4, #16
   d755a:	bf0c      	ite	eq
   d755c:	2300      	moveq	r3, #0
   d755e:	236a      	movne	r3, #106	; 0x6a
   d7560:	4e25      	ldr	r6, [pc, #148]	; (d75f8 <_strtod_r+0x5e0>)
   d7562:	9303      	str	r3, [sp, #12]
   d7564:	4650      	mov	r0, sl
   d7566:	4659      	mov	r1, fp
   d7568:	2300      	movs	r3, #0
   d756a:	2c00      	cmp	r4, #0
   d756c:	dd09      	ble.n	d7582 <_strtod_r+0x56a>
   d756e:	07e2      	lsls	r2, r4, #31
   d7570:	d504      	bpl.n	d757c <_strtod_r+0x564>
   d7572:	e9d6 2300 	ldrd	r2, r3, [r6]
   d7576:	f7ff f86d 	bl	d6654 <__aeabi_dmul>
   d757a:	2301      	movs	r3, #1
   d757c:	1064      	asrs	r4, r4, #1
   d757e:	3608      	adds	r6, #8
   d7580:	e7f3      	b.n	d756a <_strtod_r+0x552>
   d7582:	b10b      	cbz	r3, d7588 <_strtod_r+0x570>
   d7584:	4682      	mov	sl, r0
   d7586:	468b      	mov	fp, r1
   d7588:	9b03      	ldr	r3, [sp, #12]
   d758a:	b1eb      	cbz	r3, d75c8 <_strtod_r+0x5b0>
   d758c:	f3cb 530a 	ubfx	r3, fp, #20, #11
   d7590:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   d7594:	2b00      	cmp	r3, #0
   d7596:	4659      	mov	r1, fp
   d7598:	dd16      	ble.n	d75c8 <_strtod_r+0x5b0>
   d759a:	2b1f      	cmp	r3, #31
   d759c:	dd0e      	ble.n	d75bc <_strtod_r+0x5a4>
   d759e:	2b34      	cmp	r3, #52	; 0x34
   d75a0:	bfde      	ittt	le
   d75a2:	3b20      	suble	r3, #32
   d75a4:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
   d75a8:	fa02 f303 	lslle.w	r3, r2, r3
   d75ac:	f04f 0a00 	mov.w	sl, #0
   d75b0:	bfcc      	ite	gt
   d75b2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   d75b6:	ea03 0b01 	andle.w	fp, r3, r1
   d75ba:	e005      	b.n	d75c8 <_strtod_r+0x5b0>
   d75bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d75c0:	fa02 f303 	lsl.w	r3, r2, r3
   d75c4:	ea03 0a0a 	and.w	sl, r3, sl
   d75c8:	2200      	movs	r2, #0
   d75ca:	2300      	movs	r3, #0
   d75cc:	4650      	mov	r0, sl
   d75ce:	4659      	mov	r1, fp
   d75d0:	f7ff faa8 	bl	d6b24 <__aeabi_dcmpeq>
   d75d4:	2800      	cmp	r0, #0
   d75d6:	d1b9      	bne.n	d754c <_strtod_r+0x534>
   d75d8:	e018      	b.n	d760c <_strtod_r+0x5f4>
   d75da:	bf00      	nop
   d75dc:	000d9a2c 	.word	0x000d9a2c
   d75e0:	000d9a2f 	.word	0x000d9a2f
   d75e4:	000d9a35 	.word	0x000d9a35
   d75e8:	000d9a18 	.word	0x000d9a18
   d75ec:	000d9aa0 	.word	0x000d9aa0
   d75f0:	000d9b68 	.word	0x000d9b68
   d75f4:	7ca00000 	.word	0x7ca00000
   d75f8:	000d9a38 	.word	0x000d9a38
   d75fc:	7ff00000 	.word	0x7ff00000
   d7600:	fff80000 	.word	0xfff80000
   d7604:	7fefffff 	.word	0x7fefffff
   d7608:	2300      	movs	r3, #0
   d760a:	9303      	str	r3, [sp, #12]
   d760c:	9b05      	ldr	r3, [sp, #20]
   d760e:	9300      	str	r3, [sp, #0]
   d7610:	9a04      	ldr	r2, [sp, #16]
   d7612:	9907      	ldr	r1, [sp, #28]
   d7614:	9802      	ldr	r0, [sp, #8]
   d7616:	462b      	mov	r3, r5
   d7618:	f001 fa71 	bl	d8afe <__s2b>
   d761c:	9005      	str	r0, [sp, #20]
   d761e:	2800      	cmp	r0, #0
   d7620:	f43f af3d 	beq.w	d749e <_strtod_r+0x486>
   d7624:	f1b9 0f00 	cmp.w	r9, #0
   d7628:	f1c9 0300 	rsb	r3, r9, #0
   d762c:	bfa8      	it	ge
   d762e:	2300      	movge	r3, #0
   d7630:	930d      	str	r3, [sp, #52]	; 0x34
   d7632:	2400      	movs	r4, #0
   d7634:	ea29 73e9 	bic.w	r3, r9, r9, asr #31
   d7638:	9312      	str	r3, [sp, #72]	; 0x48
   d763a:	4625      	mov	r5, r4
   d763c:	9b05      	ldr	r3, [sp, #20]
   d763e:	9802      	ldr	r0, [sp, #8]
   d7640:	6859      	ldr	r1, [r3, #4]
   d7642:	f001 f9d5 	bl	d89f0 <_Balloc>
   d7646:	9004      	str	r0, [sp, #16]
   d7648:	2800      	cmp	r0, #0
   d764a:	f43f af2c 	beq.w	d74a6 <_strtod_r+0x48e>
   d764e:	9b05      	ldr	r3, [sp, #20]
   d7650:	691a      	ldr	r2, [r3, #16]
   d7652:	3202      	adds	r2, #2
   d7654:	f103 010c 	add.w	r1, r3, #12
   d7658:	0092      	lsls	r2, r2, #2
   d765a:	300c      	adds	r0, #12
   d765c:	f7ff fc3a 	bl	d6ed4 <memcpy>
   d7660:	aa1a      	add	r2, sp, #104	; 0x68
   d7662:	a919      	add	r1, sp, #100	; 0x64
   d7664:	ec4b ab10 	vmov	d0, sl, fp
   d7668:	9802      	ldr	r0, [sp, #8]
   d766a:	e9cd ab08 	strd	sl, fp, [sp, #32]
   d766e:	f001 fcfa 	bl	d9066 <__d2b>
   d7672:	9018      	str	r0, [sp, #96]	; 0x60
   d7674:	2800      	cmp	r0, #0
   d7676:	f43f af16 	beq.w	d74a6 <_strtod_r+0x48e>
   d767a:	2101      	movs	r1, #1
   d767c:	9802      	ldr	r0, [sp, #8]
   d767e:	f001 fac9 	bl	d8c14 <__i2b>
   d7682:	4605      	mov	r5, r0
   d7684:	2800      	cmp	r0, #0
   d7686:	f43f af0e 	beq.w	d74a6 <_strtod_r+0x48e>
   d768a:	9b19      	ldr	r3, [sp, #100]	; 0x64
   d768c:	9903      	ldr	r1, [sp, #12]
   d768e:	9e1a      	ldr	r6, [sp, #104]	; 0x68
   d7690:	2b00      	cmp	r3, #0
   d7692:	bfad      	iteet	ge
   d7694:	9a0d      	ldrge	r2, [sp, #52]	; 0x34
   d7696:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   d7698:	f8dd 8034 	ldrlt.w	r8, [sp, #52]	; 0x34
   d769c:	eb02 0803 	addge.w	r8, r2, r3
   d76a0:	bfb8      	it	lt
   d76a2:	1ad2      	sublt	r2, r2, r3
   d76a4:	eba3 0301 	sub.w	r3, r3, r1
   d76a8:	4433      	add	r3, r6
   d76aa:	49b5      	ldr	r1, [pc, #724]	; (d7980 <_strtod_r+0x968>)
   d76ac:	bfa8      	it	ge
   d76ae:	9a12      	ldrge	r2, [sp, #72]	; 0x48
   d76b0:	3b01      	subs	r3, #1
   d76b2:	428b      	cmp	r3, r1
   d76b4:	f1c6 0636 	rsb	r6, r6, #54	; 0x36
   d76b8:	f280 808a 	bge.w	d77d0 <_strtod_r+0x7b8>
   d76bc:	1ac9      	subs	r1, r1, r3
   d76be:	291f      	cmp	r1, #31
   d76c0:	bfc8      	it	gt
   d76c2:	4fb0      	ldrgt	r7, [pc, #704]	; (d7984 <_strtod_r+0x96c>)
   d76c4:	f04f 0901 	mov.w	r9, #1
   d76c8:	bfd4      	ite	le
   d76ca:	fa09 f301 	lslle.w	r3, r9, r1
   d76ce:	1aff      	subgt	r7, r7, r3
   d76d0:	eba6 0601 	sub.w	r6, r6, r1
   d76d4:	bfd9      	ittee	le
   d76d6:	9306      	strle	r3, [sp, #24]
   d76d8:	2700      	movle	r7, #0
   d76da:	fa09 f707 	lslgt.w	r7, r9, r7
   d76de:	f8cd 9018 	strgt.w	r9, [sp, #24]
   d76e2:	eb08 0906 	add.w	r9, r8, r6
   d76e6:	9b03      	ldr	r3, [sp, #12]
   d76e8:	45c8      	cmp	r8, r9
   d76ea:	4416      	add	r6, r2
   d76ec:	441e      	add	r6, r3
   d76ee:	4643      	mov	r3, r8
   d76f0:	bfa8      	it	ge
   d76f2:	464b      	movge	r3, r9
   d76f4:	42b3      	cmp	r3, r6
   d76f6:	bfa8      	it	ge
   d76f8:	4633      	movge	r3, r6
   d76fa:	2b00      	cmp	r3, #0
   d76fc:	bfc2      	ittt	gt
   d76fe:	ebc3 0909 	rsbgt	r9, r3, r9
   d7702:	1af6      	subgt	r6, r6, r3
   d7704:	ebc3 0808 	rsbgt	r8, r3, r8
   d7708:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   d770a:	2b00      	cmp	r3, #0
   d770c:	d164      	bne.n	d77d8 <_strtod_r+0x7c0>
   d770e:	f1b9 0f00 	cmp.w	r9, #0
   d7712:	dc7a      	bgt.n	d780a <_strtod_r+0x7f2>
   d7714:	9b12      	ldr	r3, [sp, #72]	; 0x48
   d7716:	2b00      	cmp	r3, #0
   d7718:	f040 8081 	bne.w	d781e <_strtod_r+0x806>
   d771c:	2e00      	cmp	r6, #0
   d771e:	f300 8088 	bgt.w	d7832 <_strtod_r+0x81a>
   d7722:	f1b8 0f00 	cmp.w	r8, #0
   d7726:	f300 808e 	bgt.w	d7846 <_strtod_r+0x82e>
   d772a:	9a04      	ldr	r2, [sp, #16]
   d772c:	9918      	ldr	r1, [sp, #96]	; 0x60
   d772e:	9802      	ldr	r0, [sp, #8]
   d7730:	f001 fbc5 	bl	d8ebe <__mdiff>
   d7734:	4604      	mov	r4, r0
   d7736:	2800      	cmp	r0, #0
   d7738:	f43f aeb5 	beq.w	d74a6 <_strtod_r+0x48e>
   d773c:	68c3      	ldr	r3, [r0, #12]
   d773e:	9307      	str	r3, [sp, #28]
   d7740:	2300      	movs	r3, #0
   d7742:	60c3      	str	r3, [r0, #12]
   d7744:	4629      	mov	r1, r5
   d7746:	f001 fb9e 	bl	d8e86 <__mcmp>
   d774a:	2800      	cmp	r0, #0
   d774c:	f280 8089 	bge.w	d7862 <_strtod_r+0x84a>
   d7750:	9b07      	ldr	r3, [sp, #28]
   d7752:	2b00      	cmp	r3, #0
   d7754:	f040 8204 	bne.w	d7b60 <_strtod_r+0xb48>
   d7758:	f1ba 0f00 	cmp.w	sl, #0
   d775c:	f040 8200 	bne.w	d7b60 <_strtod_r+0xb48>
   d7760:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d7764:	2b00      	cmp	r3, #0
   d7766:	f040 81fb 	bne.w	d7b60 <_strtod_r+0xb48>
   d776a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   d776e:	0d1b      	lsrs	r3, r3, #20
   d7770:	051b      	lsls	r3, r3, #20
   d7772:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   d7776:	f240 81f3 	bls.w	d7b60 <_strtod_r+0xb48>
   d777a:	6963      	ldr	r3, [r4, #20]
   d777c:	2b00      	cmp	r3, #0
   d777e:	d06c      	beq.n	d785a <_strtod_r+0x842>
   d7780:	4621      	mov	r1, r4
   d7782:	2201      	movs	r2, #1
   d7784:	9802      	ldr	r0, [sp, #8]
   d7786:	f001 fb2d 	bl	d8de4 <__lshift>
   d778a:	4629      	mov	r1, r5
   d778c:	4604      	mov	r4, r0
   d778e:	f001 fb7a 	bl	d8e86 <__mcmp>
   d7792:	2800      	cmp	r0, #0
   d7794:	f340 81e4 	ble.w	d7b60 <_strtod_r+0xb48>
   d7798:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   d779c:	9a03      	ldr	r2, [sp, #12]
   d779e:	0d1b      	lsrs	r3, r3, #20
   d77a0:	051b      	lsls	r3, r3, #20
   d77a2:	2a00      	cmp	r2, #0
   d77a4:	f000 808c 	beq.w	d78c0 <_strtod_r+0x8a8>
   d77a8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   d77ac:	f300 8088 	bgt.w	d78c0 <_strtod_r+0x8a8>
   d77b0:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
   d77b4:	f300 81d6 	bgt.w	d7b64 <_strtod_r+0xb4c>
   d77b8:	9a02      	ldr	r2, [sp, #8]
   d77ba:	2322      	movs	r3, #34	; 0x22
   d77bc:	f04f 0a00 	mov.w	sl, #0
   d77c0:	f04f 0b00 	mov.w	fp, #0
   d77c4:	6013      	str	r3, [r2, #0]
   d77c6:	9b05      	ldr	r3, [sp, #20]
   d77c8:	2b00      	cmp	r3, #0
   d77ca:	f040 81dc 	bne.w	d7b86 <_strtod_r+0xb6e>
   d77ce:	e1ee      	b.n	d7bae <_strtod_r+0xb96>
   d77d0:	2301      	movs	r3, #1
   d77d2:	2700      	movs	r7, #0
   d77d4:	9306      	str	r3, [sp, #24]
   d77d6:	e784      	b.n	d76e2 <_strtod_r+0x6ca>
   d77d8:	4629      	mov	r1, r5
   d77da:	461a      	mov	r2, r3
   d77dc:	9802      	ldr	r0, [sp, #8]
   d77de:	f001 fab3 	bl	d8d48 <__pow5mult>
   d77e2:	4605      	mov	r5, r0
   d77e4:	2800      	cmp	r0, #0
   d77e6:	f43f ae5e 	beq.w	d74a6 <_strtod_r+0x48e>
   d77ea:	4601      	mov	r1, r0
   d77ec:	9a18      	ldr	r2, [sp, #96]	; 0x60
   d77ee:	9802      	ldr	r0, [sp, #8]
   d77f0:	f001 fa19 	bl	d8c26 <__multiply>
   d77f4:	9007      	str	r0, [sp, #28]
   d77f6:	2800      	cmp	r0, #0
   d77f8:	f43f ae55 	beq.w	d74a6 <_strtod_r+0x48e>
   d77fc:	9918      	ldr	r1, [sp, #96]	; 0x60
   d77fe:	9802      	ldr	r0, [sp, #8]
   d7800:	f001 f92b 	bl	d8a5a <_Bfree>
   d7804:	9b07      	ldr	r3, [sp, #28]
   d7806:	9318      	str	r3, [sp, #96]	; 0x60
   d7808:	e781      	b.n	d770e <_strtod_r+0x6f6>
   d780a:	464a      	mov	r2, r9
   d780c:	9918      	ldr	r1, [sp, #96]	; 0x60
   d780e:	9802      	ldr	r0, [sp, #8]
   d7810:	f001 fae8 	bl	d8de4 <__lshift>
   d7814:	9018      	str	r0, [sp, #96]	; 0x60
   d7816:	2800      	cmp	r0, #0
   d7818:	f47f af7c 	bne.w	d7714 <_strtod_r+0x6fc>
   d781c:	e643      	b.n	d74a6 <_strtod_r+0x48e>
   d781e:	9a12      	ldr	r2, [sp, #72]	; 0x48
   d7820:	9904      	ldr	r1, [sp, #16]
   d7822:	9802      	ldr	r0, [sp, #8]
   d7824:	f001 fa90 	bl	d8d48 <__pow5mult>
   d7828:	9004      	str	r0, [sp, #16]
   d782a:	2800      	cmp	r0, #0
   d782c:	f47f af76 	bne.w	d771c <_strtod_r+0x704>
   d7830:	e639      	b.n	d74a6 <_strtod_r+0x48e>
   d7832:	4632      	mov	r2, r6
   d7834:	9904      	ldr	r1, [sp, #16]
   d7836:	9802      	ldr	r0, [sp, #8]
   d7838:	f001 fad4 	bl	d8de4 <__lshift>
   d783c:	9004      	str	r0, [sp, #16]
   d783e:	2800      	cmp	r0, #0
   d7840:	f47f af6f 	bne.w	d7722 <_strtod_r+0x70a>
   d7844:	e62f      	b.n	d74a6 <_strtod_r+0x48e>
   d7846:	4629      	mov	r1, r5
   d7848:	4642      	mov	r2, r8
   d784a:	9802      	ldr	r0, [sp, #8]
   d784c:	f001 faca 	bl	d8de4 <__lshift>
   d7850:	4605      	mov	r5, r0
   d7852:	2800      	cmp	r0, #0
   d7854:	f47f af69 	bne.w	d772a <_strtod_r+0x712>
   d7858:	e625      	b.n	d74a6 <_strtod_r+0x48e>
   d785a:	6923      	ldr	r3, [r4, #16]
   d785c:	2b01      	cmp	r3, #1
   d785e:	dc8f      	bgt.n	d7780 <_strtod_r+0x768>
   d7860:	e17e      	b.n	d7b60 <_strtod_r+0xb48>
   d7862:	d161      	bne.n	d7928 <_strtod_r+0x910>
   d7864:	9a07      	ldr	r2, [sp, #28]
   d7866:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d786a:	b322      	cbz	r2, d78b6 <_strtod_r+0x89e>
   d786c:	4946      	ldr	r1, [pc, #280]	; (d7988 <_strtod_r+0x970>)
   d786e:	428b      	cmp	r3, r1
   d7870:	465a      	mov	r2, fp
   d7872:	d12e      	bne.n	d78d2 <_strtod_r+0x8ba>
   d7874:	9b03      	ldr	r3, [sp, #12]
   d7876:	4651      	mov	r1, sl
   d7878:	b163      	cbz	r3, d7894 <_strtod_r+0x87c>
   d787a:	4b44      	ldr	r3, [pc, #272]	; (d798c <_strtod_r+0x974>)
   d787c:	4013      	ands	r3, r2
   d787e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   d7882:	d807      	bhi.n	d7894 <_strtod_r+0x87c>
   d7884:	0d1b      	lsrs	r3, r3, #20
   d7886:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   d788a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d788e:	fa00 f303 	lsl.w	r3, r0, r3
   d7892:	e001      	b.n	d7898 <_strtod_r+0x880>
   d7894:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d7898:	428b      	cmp	r3, r1
   d789a:	d11a      	bne.n	d78d2 <_strtod_r+0x8ba>
   d789c:	493c      	ldr	r1, [pc, #240]	; (d7990 <_strtod_r+0x978>)
   d789e:	428a      	cmp	r2, r1
   d78a0:	d102      	bne.n	d78a8 <_strtod_r+0x890>
   d78a2:	3301      	adds	r3, #1
   d78a4:	f43f adff 	beq.w	d74a6 <_strtod_r+0x48e>
   d78a8:	4b38      	ldr	r3, [pc, #224]	; (d798c <_strtod_r+0x974>)
   d78aa:	4013      	ands	r3, r2
   d78ac:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   d78b0:	f04f 0a00 	mov.w	sl, #0
   d78b4:	e154      	b.n	d7b60 <_strtod_r+0xb48>
   d78b6:	b963      	cbnz	r3, d78d2 <_strtod_r+0x8ba>
   d78b8:	f1ba 0f00 	cmp.w	sl, #0
   d78bc:	d109      	bne.n	d78d2 <_strtod_r+0x8ba>
   d78be:	e76b      	b.n	d7798 <_strtod_r+0x780>
   d78c0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   d78c4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   d78c8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   d78cc:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   d78d0:	e146      	b.n	d7b60 <_strtod_r+0xb48>
   d78d2:	b117      	cbz	r7, d78da <_strtod_r+0x8c2>
   d78d4:	ea17 0f0b 	tst.w	r7, fp
   d78d8:	e002      	b.n	d78e0 <_strtod_r+0x8c8>
   d78da:	9b06      	ldr	r3, [sp, #24]
   d78dc:	ea13 0f0a 	tst.w	r3, sl
   d78e0:	f000 813e 	beq.w	d7b60 <_strtod_r+0xb48>
   d78e4:	9b07      	ldr	r3, [sp, #28]
   d78e6:	9a03      	ldr	r2, [sp, #12]
   d78e8:	4650      	mov	r0, sl
   d78ea:	4659      	mov	r1, fp
   d78ec:	b153      	cbz	r3, d7904 <_strtod_r+0x8ec>
   d78ee:	f7ff fb77 	bl	d6fe0 <sulp>
   d78f2:	4602      	mov	r2, r0
   d78f4:	460b      	mov	r3, r1
   d78f6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   d78fa:	f7fe fcf9 	bl	d62f0 <__adddf3>
   d78fe:	4682      	mov	sl, r0
   d7900:	468b      	mov	fp, r1
   d7902:	e12d      	b.n	d7b60 <_strtod_r+0xb48>
   d7904:	f7ff fb6c 	bl	d6fe0 <sulp>
   d7908:	4602      	mov	r2, r0
   d790a:	460b      	mov	r3, r1
   d790c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   d7910:	f7fe fcec 	bl	d62ec <__aeabi_dsub>
   d7914:	2200      	movs	r2, #0
   d7916:	2300      	movs	r3, #0
   d7918:	4682      	mov	sl, r0
   d791a:	468b      	mov	fp, r1
   d791c:	f7ff f902 	bl	d6b24 <__aeabi_dcmpeq>
   d7920:	2800      	cmp	r0, #0
   d7922:	f47f af49 	bne.w	d77b8 <_strtod_r+0x7a0>
   d7926:	e11b      	b.n	d7b60 <_strtod_r+0xb48>
   d7928:	4629      	mov	r1, r5
   d792a:	4620      	mov	r0, r4
   d792c:	f001 fbe9 	bl	d9102 <__ratio>
   d7930:	ec57 6b10 	vmov	r6, r7, d0
   d7934:	2200      	movs	r2, #0
   d7936:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   d793a:	ee10 0a10 	vmov	r0, s0
   d793e:	4639      	mov	r1, r7
   d7940:	f7ff f904 	bl	d6b4c <__aeabi_dcmple>
   d7944:	2800      	cmp	r0, #0
   d7946:	d042      	beq.n	d79ce <_strtod_r+0x9b6>
   d7948:	9b07      	ldr	r3, [sp, #28]
   d794a:	b123      	cbz	r3, d7956 <_strtod_r+0x93e>
   d794c:	f04f 0800 	mov.w	r8, #0
   d7950:	f8df 9040 	ldr.w	r9, [pc, #64]	; d7994 <_strtod_r+0x97c>
   d7954:	e011      	b.n	d797a <_strtod_r+0x962>
   d7956:	f1ba 0f00 	cmp.w	sl, #0
   d795a:	d103      	bne.n	d7964 <_strtod_r+0x94c>
   d795c:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d7960:	b93b      	cbnz	r3, d7972 <_strtod_r+0x95a>
   d7962:	e01b      	b.n	d799c <_strtod_r+0x984>
   d7964:	f1ba 0f01 	cmp.w	sl, #1
   d7968:	d103      	bne.n	d7972 <_strtod_r+0x95a>
   d796a:	f1bb 0f00 	cmp.w	fp, #0
   d796e:	f43f af23 	beq.w	d77b8 <_strtod_r+0x7a0>
   d7972:	f8df 9024 	ldr.w	r9, [pc, #36]	; d7998 <_strtod_r+0x980>
   d7976:	f04f 0800 	mov.w	r8, #0
   d797a:	2600      	movs	r6, #0
   d797c:	4f05      	ldr	r7, [pc, #20]	; (d7994 <_strtod_r+0x97c>)
   d797e:	e039      	b.n	d79f4 <_strtod_r+0x9dc>
   d7980:	fffffc02 	.word	0xfffffc02
   d7984:	fffffbe2 	.word	0xfffffbe2
   d7988:	000fffff 	.word	0x000fffff
   d798c:	7ff00000 	.word	0x7ff00000
   d7990:	7fefffff 	.word	0x7fefffff
   d7994:	3ff00000 	.word	0x3ff00000
   d7998:	bff00000 	.word	0xbff00000
   d799c:	2200      	movs	r2, #0
   d799e:	4b98      	ldr	r3, [pc, #608]	; (d7c00 <_strtod_r+0xbe8>)
   d79a0:	4630      	mov	r0, r6
   d79a2:	4639      	mov	r1, r7
   d79a4:	f7ff f8c8 	bl	d6b38 <__aeabi_dcmplt>
   d79a8:	b940      	cbnz	r0, d79bc <_strtod_r+0x9a4>
   d79aa:	4630      	mov	r0, r6
   d79ac:	4639      	mov	r1, r7
   d79ae:	2200      	movs	r2, #0
   d79b0:	4b94      	ldr	r3, [pc, #592]	; (d7c04 <_strtod_r+0xbec>)
   d79b2:	f7fe fe4f 	bl	d6654 <__aeabi_dmul>
   d79b6:	4606      	mov	r6, r0
   d79b8:	460f      	mov	r7, r1
   d79ba:	e001      	b.n	d79c0 <_strtod_r+0x9a8>
   d79bc:	4f91      	ldr	r7, [pc, #580]	; (d7c04 <_strtod_r+0xbec>)
   d79be:	2600      	movs	r6, #0
   d79c0:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   d79c4:	9614      	str	r6, [sp, #80]	; 0x50
   d79c6:	9315      	str	r3, [sp, #84]	; 0x54
   d79c8:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
   d79cc:	e012      	b.n	d79f4 <_strtod_r+0x9dc>
   d79ce:	4b8d      	ldr	r3, [pc, #564]	; (d7c04 <_strtod_r+0xbec>)
   d79d0:	4630      	mov	r0, r6
   d79d2:	4639      	mov	r1, r7
   d79d4:	2200      	movs	r2, #0
   d79d6:	f7fe fe3d 	bl	d6654 <__aeabi_dmul>
   d79da:	9b07      	ldr	r3, [sp, #28]
   d79dc:	4606      	mov	r6, r0
   d79de:	460f      	mov	r7, r1
   d79e0:	b923      	cbnz	r3, d79ec <_strtod_r+0x9d4>
   d79e2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d79e6:	900e      	str	r0, [sp, #56]	; 0x38
   d79e8:	930f      	str	r3, [sp, #60]	; 0x3c
   d79ea:	e001      	b.n	d79f0 <_strtod_r+0x9d8>
   d79ec:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
   d79f0:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
   d79f4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   d79f8:	0d1b      	lsrs	r3, r3, #20
   d79fa:	051b      	lsls	r3, r3, #20
   d79fc:	9306      	str	r3, [sp, #24]
   d79fe:	9a06      	ldr	r2, [sp, #24]
   d7a00:	4b81      	ldr	r3, [pc, #516]	; (d7c08 <_strtod_r+0xbf0>)
   d7a02:	429a      	cmp	r2, r3
   d7a04:	d12b      	bne.n	d7a5e <_strtod_r+0xa46>
   d7a06:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   d7a0a:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   d7a0e:	ec4b ab10 	vmov	d0, sl, fp
   d7a12:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
   d7a16:	f001 fab1 	bl	d8f7c <__ulp>
   d7a1a:	4640      	mov	r0, r8
   d7a1c:	ec53 2b10 	vmov	r2, r3, d0
   d7a20:	4649      	mov	r1, r9
   d7a22:	f7fe fe17 	bl	d6654 <__aeabi_dmul>
   d7a26:	4652      	mov	r2, sl
   d7a28:	465b      	mov	r3, fp
   d7a2a:	f7fe fc61 	bl	d62f0 <__adddf3>
   d7a2e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   d7a32:	0d1b      	lsrs	r3, r3, #20
   d7a34:	4a75      	ldr	r2, [pc, #468]	; (d7c0c <_strtod_r+0xbf4>)
   d7a36:	051b      	lsls	r3, r3, #20
   d7a38:	4293      	cmp	r3, r2
   d7a3a:	4682      	mov	sl, r0
   d7a3c:	d90c      	bls.n	d7a58 <_strtod_r+0xa40>
   d7a3e:	4b74      	ldr	r3, [pc, #464]	; (d7c10 <_strtod_r+0xbf8>)
   d7a40:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   d7a42:	429a      	cmp	r2, r3
   d7a44:	d103      	bne.n	d7a4e <_strtod_r+0xa36>
   d7a46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d7a48:	3301      	adds	r3, #1
   d7a4a:	f43f ad2c 	beq.w	d74a6 <_strtod_r+0x48e>
   d7a4e:	f8df b1c0 	ldr.w	fp, [pc, #448]	; d7c10 <_strtod_r+0xbf8>
   d7a52:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   d7a56:	e072      	b.n	d7b3e <_strtod_r+0xb26>
   d7a58:	f101 7b54 	add.w	fp, r1, #55574528	; 0x3500000
   d7a5c:	e038      	b.n	d7ad0 <_strtod_r+0xab8>
   d7a5e:	9b03      	ldr	r3, [sp, #12]
   d7a60:	b333      	cbz	r3, d7ab0 <_strtod_r+0xa98>
   d7a62:	9b06      	ldr	r3, [sp, #24]
   d7a64:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   d7a68:	d822      	bhi.n	d7ab0 <_strtod_r+0xa98>
   d7a6a:	a35d      	add	r3, pc, #372	; (adr r3, d7be0 <_strtod_r+0xbc8>)
   d7a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7a70:	4630      	mov	r0, r6
   d7a72:	4639      	mov	r1, r7
   d7a74:	f7ff f86a 	bl	d6b4c <__aeabi_dcmple>
   d7a78:	b1a8      	cbz	r0, d7aa6 <_strtod_r+0xa8e>
   d7a7a:	4639      	mov	r1, r7
   d7a7c:	4630      	mov	r0, r6
   d7a7e:	f7ff f8ab 	bl	d6bd8 <__aeabi_d2uiz>
   d7a82:	2800      	cmp	r0, #0
   d7a84:	bf08      	it	eq
   d7a86:	2001      	moveq	r0, #1
   d7a88:	f7fe fd6e 	bl	d6568 <__aeabi_ui2d>
   d7a8c:	9b07      	ldr	r3, [sp, #28]
   d7a8e:	4606      	mov	r6, r0
   d7a90:	460f      	mov	r7, r1
   d7a92:	b923      	cbnz	r3, d7a9e <_strtod_r+0xa86>
   d7a94:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d7a98:	9010      	str	r0, [sp, #64]	; 0x40
   d7a9a:	9311      	str	r3, [sp, #68]	; 0x44
   d7a9c:	e001      	b.n	d7aa2 <_strtod_r+0xa8a>
   d7a9e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
   d7aa2:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
   d7aa6:	9a06      	ldr	r2, [sp, #24]
   d7aa8:	f109 63d6 	add.w	r3, r9, #112197632	; 0x6b00000
   d7aac:	ebc2 0903 	rsb	r9, r2, r3
   d7ab0:	ed9d 0b08 	vldr	d0, [sp, #32]
   d7ab4:	f001 fa62 	bl	d8f7c <__ulp>
   d7ab8:	4640      	mov	r0, r8
   d7aba:	ec53 2b10 	vmov	r2, r3, d0
   d7abe:	4649      	mov	r1, r9
   d7ac0:	f7fe fdc8 	bl	d6654 <__aeabi_dmul>
   d7ac4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   d7ac8:	f7fe fc12 	bl	d62f0 <__adddf3>
   d7acc:	4682      	mov	sl, r0
   d7ace:	468b      	mov	fp, r1
   d7ad0:	9b03      	ldr	r3, [sp, #12]
   d7ad2:	bba3      	cbnz	r3, d7b3e <_strtod_r+0xb26>
   d7ad4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   d7ad8:	0d1b      	lsrs	r3, r3, #20
   d7ada:	9a06      	ldr	r2, [sp, #24]
   d7adc:	051b      	lsls	r3, r3, #20
   d7ade:	429a      	cmp	r2, r3
   d7ae0:	46d8      	mov	r8, fp
   d7ae2:	d12c      	bne.n	d7b3e <_strtod_r+0xb26>
   d7ae4:	4639      	mov	r1, r7
   d7ae6:	4630      	mov	r0, r6
   d7ae8:	f7ff f84e 	bl	d6b88 <__aeabi_d2iz>
   d7aec:	f7fe fd4c 	bl	d6588 <__aeabi_i2d>
   d7af0:	460b      	mov	r3, r1
   d7af2:	4602      	mov	r2, r0
   d7af4:	4639      	mov	r1, r7
   d7af6:	4630      	mov	r0, r6
   d7af8:	f7fe fbf8 	bl	d62ec <__aeabi_dsub>
   d7afc:	9b07      	ldr	r3, [sp, #28]
   d7afe:	4606      	mov	r6, r0
   d7b00:	460f      	mov	r7, r1
   d7b02:	b92b      	cbnz	r3, d7b10 <_strtod_r+0xaf8>
   d7b04:	f1ba 0f00 	cmp.w	sl, #0
   d7b08:	d102      	bne.n	d7b10 <_strtod_r+0xaf8>
   d7b0a:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d7b0e:	b183      	cbz	r3, d7b32 <_strtod_r+0xb1a>
   d7b10:	a335      	add	r3, pc, #212	; (adr r3, d7be8 <_strtod_r+0xbd0>)
   d7b12:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7b16:	4630      	mov	r0, r6
   d7b18:	4639      	mov	r1, r7
   d7b1a:	f7ff f80d 	bl	d6b38 <__aeabi_dcmplt>
   d7b1e:	2800      	cmp	r0, #0
   d7b20:	d131      	bne.n	d7b86 <_strtod_r+0xb6e>
   d7b22:	a333      	add	r3, pc, #204	; (adr r3, d7bf0 <_strtod_r+0xbd8>)
   d7b24:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7b28:	4630      	mov	r0, r6
   d7b2a:	4639      	mov	r1, r7
   d7b2c:	f7ff f822 	bl	d6b74 <__aeabi_dcmpgt>
   d7b30:	e004      	b.n	d7b3c <_strtod_r+0xb24>
   d7b32:	a331      	add	r3, pc, #196	; (adr r3, d7bf8 <_strtod_r+0xbe0>)
   d7b34:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7b38:	f7fe fffe 	bl	d6b38 <__aeabi_dcmplt>
   d7b3c:	bb18      	cbnz	r0, d7b86 <_strtod_r+0xb6e>
   d7b3e:	9918      	ldr	r1, [sp, #96]	; 0x60
   d7b40:	9802      	ldr	r0, [sp, #8]
   d7b42:	f000 ff8a 	bl	d8a5a <_Bfree>
   d7b46:	9904      	ldr	r1, [sp, #16]
   d7b48:	9802      	ldr	r0, [sp, #8]
   d7b4a:	f000 ff86 	bl	d8a5a <_Bfree>
   d7b4e:	4629      	mov	r1, r5
   d7b50:	9802      	ldr	r0, [sp, #8]
   d7b52:	f000 ff82 	bl	d8a5a <_Bfree>
   d7b56:	4621      	mov	r1, r4
   d7b58:	9802      	ldr	r0, [sp, #8]
   d7b5a:	f000 ff7e 	bl	d8a5a <_Bfree>
   d7b5e:	e56d      	b.n	d763c <_strtod_r+0x624>
   d7b60:	9b03      	ldr	r3, [sp, #12]
   d7b62:	b183      	cbz	r3, d7b86 <_strtod_r+0xb6e>
   d7b64:	4b2b      	ldr	r3, [pc, #172]	; (d7c14 <_strtod_r+0xbfc>)
   d7b66:	930b      	str	r3, [sp, #44]	; 0x2c
   d7b68:	2300      	movs	r3, #0
   d7b6a:	930a      	str	r3, [sp, #40]	; 0x28
   d7b6c:	4650      	mov	r0, sl
   d7b6e:	4659      	mov	r1, fp
   d7b70:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   d7b74:	f7fe fd6e 	bl	d6654 <__aeabi_dmul>
   d7b78:	4682      	mov	sl, r0
   d7b7a:	468b      	mov	fp, r1
   d7b7c:	b919      	cbnz	r1, d7b86 <_strtod_r+0xb6e>
   d7b7e:	b910      	cbnz	r0, d7b86 <_strtod_r+0xb6e>
   d7b80:	9a02      	ldr	r2, [sp, #8]
   d7b82:	2322      	movs	r3, #34	; 0x22
   d7b84:	6013      	str	r3, [r2, #0]
   d7b86:	9918      	ldr	r1, [sp, #96]	; 0x60
   d7b88:	9802      	ldr	r0, [sp, #8]
   d7b8a:	f000 ff66 	bl	d8a5a <_Bfree>
   d7b8e:	9904      	ldr	r1, [sp, #16]
   d7b90:	9802      	ldr	r0, [sp, #8]
   d7b92:	f000 ff62 	bl	d8a5a <_Bfree>
   d7b96:	4629      	mov	r1, r5
   d7b98:	9802      	ldr	r0, [sp, #8]
   d7b9a:	f000 ff5e 	bl	d8a5a <_Bfree>
   d7b9e:	9905      	ldr	r1, [sp, #20]
   d7ba0:	9802      	ldr	r0, [sp, #8]
   d7ba2:	f000 ff5a 	bl	d8a5a <_Bfree>
   d7ba6:	4621      	mov	r1, r4
   d7ba8:	9802      	ldr	r0, [sp, #8]
   d7baa:	f000 ff56 	bl	d8a5a <_Bfree>
   d7bae:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   d7bb0:	b113      	cbz	r3, d7bb8 <_strtod_r+0xba0>
   d7bb2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   d7bb4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d7bb6:	6013      	str	r3, [r2, #0]
   d7bb8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d7bba:	b11b      	cbz	r3, d7bc4 <_strtod_r+0xbac>
   d7bbc:	4652      	mov	r2, sl
   d7bbe:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   d7bc2:	e007      	b.n	d7bd4 <_strtod_r+0xbbc>
   d7bc4:	4652      	mov	r2, sl
   d7bc6:	465b      	mov	r3, fp
   d7bc8:	e004      	b.n	d7bd4 <_strtod_r+0xbbc>
   d7bca:	2500      	movs	r5, #0
   d7bcc:	462a      	mov	r2, r5
   d7bce:	2101      	movs	r1, #1
   d7bd0:	f7ff bb41 	b.w	d7256 <_strtod_r+0x23e>
   d7bd4:	ec43 2b10 	vmov	d0, r2, r3
   d7bd8:	b01d      	add	sp, #116	; 0x74
   d7bda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7bde:	bf00      	nop
   d7be0:	ffc00000 	.word	0xffc00000
   d7be4:	41dfffff 	.word	0x41dfffff
   d7be8:	94a03595 	.word	0x94a03595
   d7bec:	3fdfffff 	.word	0x3fdfffff
   d7bf0:	35afe535 	.word	0x35afe535
   d7bf4:	3fe00000 	.word	0x3fe00000
   d7bf8:	94a03595 	.word	0x94a03595
   d7bfc:	3fcfffff 	.word	0x3fcfffff
   d7c00:	3ff00000 	.word	0x3ff00000
   d7c04:	3fe00000 	.word	0x3fe00000
   d7c08:	7fe00000 	.word	0x7fe00000
   d7c0c:	7c9fffff 	.word	0x7c9fffff
   d7c10:	7fefffff 	.word	0x7fefffff
   d7c14:	39500000 	.word	0x39500000

000d7c18 <strtod>:
   d7c18:	4b02      	ldr	r3, [pc, #8]	; (d7c24 <strtod+0xc>)
   d7c1a:	460a      	mov	r2, r1
   d7c1c:	4601      	mov	r1, r0
   d7c1e:	6818      	ldr	r0, [r3, #0]
   d7c20:	f7ff b9fa 	b.w	d7018 <_strtod_r>
   d7c24:	2003e198 	.word	0x2003e198

000d7c28 <__strtok_r>:
   d7c28:	b5f0      	push	{r4, r5, r6, r7, lr}
   d7c2a:	b948      	cbnz	r0, d7c40 <__strtok_r+0x18>
   d7c2c:	6810      	ldr	r0, [r2, #0]
   d7c2e:	b938      	cbnz	r0, d7c40 <__strtok_r+0x18>
   d7c30:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7c32:	f817 6b01 	ldrb.w	r6, [r7], #1
   d7c36:	b15e      	cbz	r6, d7c50 <__strtok_r+0x28>
   d7c38:	42b5      	cmp	r5, r6
   d7c3a:	d1fa      	bne.n	d7c32 <__strtok_r+0xa>
   d7c3c:	b12b      	cbz	r3, d7c4a <__strtok_r+0x22>
   d7c3e:	4620      	mov	r0, r4
   d7c40:	4604      	mov	r4, r0
   d7c42:	460f      	mov	r7, r1
   d7c44:	f814 5b01 	ldrb.w	r5, [r4], #1
   d7c48:	e7f3      	b.n	d7c32 <__strtok_r+0xa>
   d7c4a:	6014      	str	r4, [r2, #0]
   d7c4c:	7003      	strb	r3, [r0, #0]
   d7c4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7c50:	b94d      	cbnz	r5, d7c66 <__strtok_r+0x3e>
   d7c52:	6015      	str	r5, [r2, #0]
   d7c54:	4628      	mov	r0, r5
   d7c56:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7c58:	f817 6b01 	ldrb.w	r6, [r7], #1
   d7c5c:	42b5      	cmp	r5, r6
   d7c5e:	d007      	beq.n	d7c70 <__strtok_r+0x48>
   d7c60:	2e00      	cmp	r6, #0
   d7c62:	d1f9      	bne.n	d7c58 <__strtok_r+0x30>
   d7c64:	461c      	mov	r4, r3
   d7c66:	4623      	mov	r3, r4
   d7c68:	460f      	mov	r7, r1
   d7c6a:	f813 5b01 	ldrb.w	r5, [r3], #1
   d7c6e:	e7f3      	b.n	d7c58 <__strtok_r+0x30>
   d7c70:	b115      	cbz	r5, d7c78 <__strtok_r+0x50>
   d7c72:	2100      	movs	r1, #0
   d7c74:	7021      	strb	r1, [r4, #0]
   d7c76:	e000      	b.n	d7c7a <__strtok_r+0x52>
   d7c78:	462b      	mov	r3, r5
   d7c7a:	6013      	str	r3, [r2, #0]
   d7c7c:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d7c7e <strtok_r>:
   d7c7e:	2301      	movs	r3, #1
   d7c80:	f7ff bfd2 	b.w	d7c28 <__strtok_r>

000d7c84 <_strtoul_r>:
   d7c84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d7c88:	4680      	mov	r8, r0
   d7c8a:	483c      	ldr	r0, [pc, #240]	; (d7d7c <_strtoul_r+0xf8>)
   d7c8c:	f8d0 9000 	ldr.w	r9, [r0]
   d7c90:	460e      	mov	r6, r1
   d7c92:	4635      	mov	r5, r6
   d7c94:	f815 4b01 	ldrb.w	r4, [r5], #1
   d7c98:	eb09 0004 	add.w	r0, r9, r4
   d7c9c:	7840      	ldrb	r0, [r0, #1]
   d7c9e:	f000 0008 	and.w	r0, r0, #8
   d7ca2:	f000 07ff 	and.w	r7, r0, #255	; 0xff
   d7ca6:	b108      	cbz	r0, d7cac <_strtoul_r+0x28>
   d7ca8:	462e      	mov	r6, r5
   d7caa:	e7f2      	b.n	d7c92 <_strtoul_r+0xe>
   d7cac:	2c2d      	cmp	r4, #45	; 0x2d
   d7cae:	d103      	bne.n	d7cb8 <_strtoul_r+0x34>
   d7cb0:	1cb5      	adds	r5, r6, #2
   d7cb2:	7874      	ldrb	r4, [r6, #1]
   d7cb4:	2701      	movs	r7, #1
   d7cb6:	e003      	b.n	d7cc0 <_strtoul_r+0x3c>
   d7cb8:	2c2b      	cmp	r4, #43	; 0x2b
   d7cba:	bf04      	itt	eq
   d7cbc:	7874      	ldrbeq	r4, [r6, #1]
   d7cbe:	1cb5      	addeq	r5, r6, #2
   d7cc0:	b113      	cbz	r3, d7cc8 <_strtoul_r+0x44>
   d7cc2:	2b10      	cmp	r3, #16
   d7cc4:	d10a      	bne.n	d7cdc <_strtoul_r+0x58>
   d7cc6:	e053      	b.n	d7d70 <_strtoul_r+0xec>
   d7cc8:	2c30      	cmp	r4, #48	; 0x30
   d7cca:	d14f      	bne.n	d7d6c <_strtoul_r+0xe8>
   d7ccc:	7828      	ldrb	r0, [r5, #0]
   d7cce:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d7cd2:	2858      	cmp	r0, #88	; 0x58
   d7cd4:	d145      	bne.n	d7d62 <_strtoul_r+0xde>
   d7cd6:	786c      	ldrb	r4, [r5, #1]
   d7cd8:	2310      	movs	r3, #16
   d7cda:	3502      	adds	r5, #2
   d7cdc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   d7ce0:	2600      	movs	r6, #0
   d7ce2:	fbbc fcf3 	udiv	ip, ip, r3
   d7ce6:	fb03 fa0c 	mul.w	sl, r3, ip
   d7cea:	ea6f 0a0a 	mvn.w	sl, sl
   d7cee:	4630      	mov	r0, r6
   d7cf0:	eb09 0e04 	add.w	lr, r9, r4
   d7cf4:	f89e e001 	ldrb.w	lr, [lr, #1]
   d7cf8:	f01e 0f04 	tst.w	lr, #4
   d7cfc:	d001      	beq.n	d7d02 <_strtoul_r+0x7e>
   d7cfe:	3c30      	subs	r4, #48	; 0x30
   d7d00:	e00b      	b.n	d7d1a <_strtoul_r+0x96>
   d7d02:	f01e 0e03 	ands.w	lr, lr, #3
   d7d06:	d01a      	beq.n	d7d3e <_strtoul_r+0xba>
   d7d08:	f1be 0f01 	cmp.w	lr, #1
   d7d0c:	bf0c      	ite	eq
   d7d0e:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   d7d12:	f04f 0e57 	movne.w	lr, #87	; 0x57
   d7d16:	ebce 0404 	rsb	r4, lr, r4
   d7d1a:	42a3      	cmp	r3, r4
   d7d1c:	dd0f      	ble.n	d7d3e <_strtoul_r+0xba>
   d7d1e:	2e00      	cmp	r6, #0
   d7d20:	db08      	blt.n	d7d34 <_strtoul_r+0xb0>
   d7d22:	4560      	cmp	r0, ip
   d7d24:	d806      	bhi.n	d7d34 <_strtoul_r+0xb0>
   d7d26:	d101      	bne.n	d7d2c <_strtoul_r+0xa8>
   d7d28:	4554      	cmp	r4, sl
   d7d2a:	dc03      	bgt.n	d7d34 <_strtoul_r+0xb0>
   d7d2c:	fb03 4000 	mla	r0, r3, r0, r4
   d7d30:	2601      	movs	r6, #1
   d7d32:	e001      	b.n	d7d38 <_strtoul_r+0xb4>
   d7d34:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   d7d38:	f815 4b01 	ldrb.w	r4, [r5], #1
   d7d3c:	e7d8      	b.n	d7cf0 <_strtoul_r+0x6c>
   d7d3e:	2e00      	cmp	r6, #0
   d7d40:	da07      	bge.n	d7d52 <_strtoul_r+0xce>
   d7d42:	2322      	movs	r3, #34	; 0x22
   d7d44:	f8c8 3000 	str.w	r3, [r8]
   d7d48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d7d4c:	b92a      	cbnz	r2, d7d5a <_strtoul_r+0xd6>
   d7d4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7d52:	b107      	cbz	r7, d7d56 <_strtoul_r+0xd2>
   d7d54:	4240      	negs	r0, r0
   d7d56:	b172      	cbz	r2, d7d76 <_strtoul_r+0xf2>
   d7d58:	b106      	cbz	r6, d7d5c <_strtoul_r+0xd8>
   d7d5a:	1e69      	subs	r1, r5, #1
   d7d5c:	6011      	str	r1, [r2, #0]
   d7d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7d62:	2430      	movs	r4, #48	; 0x30
   d7d64:	2b00      	cmp	r3, #0
   d7d66:	d1b9      	bne.n	d7cdc <_strtoul_r+0x58>
   d7d68:	2308      	movs	r3, #8
   d7d6a:	e7b7      	b.n	d7cdc <_strtoul_r+0x58>
   d7d6c:	230a      	movs	r3, #10
   d7d6e:	e7b5      	b.n	d7cdc <_strtoul_r+0x58>
   d7d70:	2c30      	cmp	r4, #48	; 0x30
   d7d72:	d0ab      	beq.n	d7ccc <_strtoul_r+0x48>
   d7d74:	e7b2      	b.n	d7cdc <_strtoul_r+0x58>
   d7d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7d7a:	bf00      	nop
   d7d7c:	2003e134 	.word	0x2003e134

000d7d80 <strtoul>:
   d7d80:	4613      	mov	r3, r2
   d7d82:	460a      	mov	r2, r1
   d7d84:	4601      	mov	r1, r0
   d7d86:	4802      	ldr	r0, [pc, #8]	; (d7d90 <strtoul+0x10>)
   d7d88:	6800      	ldr	r0, [r0, #0]
   d7d8a:	f7ff bf7b 	b.w	d7c84 <_strtoul_r>
   d7d8e:	bf00      	nop
   d7d90:	2003e198 	.word	0x2003e198

000d7d94 <__tzcalc_limits>:
   d7d94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7d98:	4604      	mov	r4, r0
   d7d9a:	f000 fd8d 	bl	d88b8 <__gettzinfo>
   d7d9e:	f240 73b1 	movw	r3, #1969	; 0x7b1
   d7da2:	429c      	cmp	r4, r3
   d7da4:	f340 8096 	ble.w	d7ed4 <__tzcalc_limits+0x140>
   d7da8:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
   d7dac:	18e3      	adds	r3, r4, r3
   d7dae:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
   d7db2:	109b      	asrs	r3, r3, #2
   d7db4:	f240 156d 	movw	r5, #365	; 0x16d
   d7db8:	fb05 3502 	mla	r5, r5, r2, r3
   d7dbc:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
   d7dc0:	f06f 0363 	mvn.w	r3, #99	; 0x63
   d7dc4:	fb92 f3f3 	sdiv	r3, r2, r3
   d7dc8:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
   d7dcc:	442b      	add	r3, r5
   d7dce:	18a5      	adds	r5, r4, r2
   d7dd0:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d7dd4:	fb95 f5f2 	sdiv	r5, r5, r2
   d7dd8:	441d      	add	r5, r3
   d7dda:	2364      	movs	r3, #100	; 0x64
   d7ddc:	fb94 f7f2 	sdiv	r7, r4, r2
   d7de0:	fb94 f6f3 	sdiv	r6, r4, r3
   d7de4:	fb02 4717 	mls	r7, r2, r7, r4
   d7de8:	fb03 4616 	mls	r6, r3, r6, r4
   d7dec:	f100 0338 	add.w	r3, r0, #56	; 0x38
   d7df0:	fab7 fe87 	clz	lr, r7
   d7df4:	9301      	str	r3, [sp, #4]
   d7df6:	f004 0303 	and.w	r3, r4, #3
   d7dfa:	6044      	str	r4, [r0, #4]
   d7dfc:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
   d7e00:	4601      	mov	r1, r0
   d7e02:	9300      	str	r3, [sp, #0]
   d7e04:	f04f 0c07 	mov.w	ip, #7
   d7e08:	7a0b      	ldrb	r3, [r1, #8]
   d7e0a:	2b4a      	cmp	r3, #74	; 0x4a
   d7e0c:	d10e      	bne.n	d7e2c <__tzcalc_limits+0x98>
   d7e0e:	694b      	ldr	r3, [r1, #20]
   d7e10:	9a00      	ldr	r2, [sp, #0]
   d7e12:	18ec      	adds	r4, r5, r3
   d7e14:	b902      	cbnz	r2, d7e18 <__tzcalc_limits+0x84>
   d7e16:	b906      	cbnz	r6, d7e1a <__tzcalc_limits+0x86>
   d7e18:	b927      	cbnz	r7, d7e24 <__tzcalc_limits+0x90>
   d7e1a:	2b3b      	cmp	r3, #59	; 0x3b
   d7e1c:	bfd4      	ite	le
   d7e1e:	2300      	movle	r3, #0
   d7e20:	2301      	movgt	r3, #1
   d7e22:	e000      	b.n	d7e26 <__tzcalc_limits+0x92>
   d7e24:	2300      	movs	r3, #0
   d7e26:	4423      	add	r3, r4
   d7e28:	3b01      	subs	r3, #1
   d7e2a:	e03f      	b.n	d7eac <__tzcalc_limits+0x118>
   d7e2c:	2b44      	cmp	r3, #68	; 0x44
   d7e2e:	d102      	bne.n	d7e36 <__tzcalc_limits+0xa2>
   d7e30:	694b      	ldr	r3, [r1, #20]
   d7e32:	442b      	add	r3, r5
   d7e34:	e03a      	b.n	d7eac <__tzcalc_limits+0x118>
   d7e36:	9b00      	ldr	r3, [sp, #0]
   d7e38:	b92b      	cbnz	r3, d7e46 <__tzcalc_limits+0xb2>
   d7e3a:	2e00      	cmp	r6, #0
   d7e3c:	bf0c      	ite	eq
   d7e3e:	46f0      	moveq	r8, lr
   d7e40:	f04f 0801 	movne.w	r8, #1
   d7e44:	e000      	b.n	d7e48 <__tzcalc_limits+0xb4>
   d7e46:	46f0      	mov	r8, lr
   d7e48:	4b24      	ldr	r3, [pc, #144]	; (d7edc <__tzcalc_limits+0x148>)
   d7e4a:	68cc      	ldr	r4, [r1, #12]
   d7e4c:	2230      	movs	r2, #48	; 0x30
   d7e4e:	fb02 3808 	mla	r8, r2, r8, r3
   d7e52:	f1a8 0a04 	sub.w	sl, r8, #4
   d7e56:	46a9      	mov	r9, r5
   d7e58:	2301      	movs	r3, #1
   d7e5a:	42a3      	cmp	r3, r4
   d7e5c:	da04      	bge.n	d7e68 <__tzcalc_limits+0xd4>
   d7e5e:	f85a bf04 	ldr.w	fp, [sl, #4]!
   d7e62:	3301      	adds	r3, #1
   d7e64:	44d9      	add	r9, fp
   d7e66:	e7f8      	b.n	d7e5a <__tzcalc_limits+0xc6>
   d7e68:	f109 0304 	add.w	r3, r9, #4
   d7e6c:	fb93 fbfc 	sdiv	fp, r3, ip
   d7e70:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
   d7e74:	2c01      	cmp	r4, #1
   d7e76:	ebca 0a03 	rsb	sl, sl, r3
   d7e7a:	694b      	ldr	r3, [r1, #20]
   d7e7c:	bfb8      	it	lt
   d7e7e:	2401      	movlt	r4, #1
   d7e80:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   d7e84:	ebb3 0a0a 	subs.w	sl, r3, sl
   d7e88:	690b      	ldr	r3, [r1, #16]
   d7e8a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
   d7e8e:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   d7e92:	bf48      	it	mi
   d7e94:	f10a 0a07 	addmi.w	sl, sl, #7
   d7e98:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   d7e9c:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
   d7ea0:	4453      	add	r3, sl
   d7ea2:	42a3      	cmp	r3, r4
   d7ea4:	db01      	blt.n	d7eaa <__tzcalc_limits+0x116>
   d7ea6:	3b07      	subs	r3, #7
   d7ea8:	e7fb      	b.n	d7ea2 <__tzcalc_limits+0x10e>
   d7eaa:	444b      	add	r3, r9
   d7eac:	698c      	ldr	r4, [r1, #24]
   d7eae:	4a0c      	ldr	r2, [pc, #48]	; (d7ee0 <__tzcalc_limits+0x14c>)
   d7eb0:	fb02 4303 	mla	r3, r2, r3, r4
   d7eb4:	6a0c      	ldr	r4, [r1, #32]
   d7eb6:	4423      	add	r3, r4
   d7eb8:	f841 3f1c 	str.w	r3, [r1, #28]!
   d7ebc:	9b01      	ldr	r3, [sp, #4]
   d7ebe:	4299      	cmp	r1, r3
   d7ec0:	d1a2      	bne.n	d7e08 <__tzcalc_limits+0x74>
   d7ec2:	69c3      	ldr	r3, [r0, #28]
   d7ec4:	6b82      	ldr	r2, [r0, #56]	; 0x38
   d7ec6:	4293      	cmp	r3, r2
   d7ec8:	bfac      	ite	ge
   d7eca:	2300      	movge	r3, #0
   d7ecc:	2301      	movlt	r3, #1
   d7ece:	6003      	str	r3, [r0, #0]
   d7ed0:	2001      	movs	r0, #1
   d7ed2:	e000      	b.n	d7ed6 <__tzcalc_limits+0x142>
   d7ed4:	2000      	movs	r0, #0
   d7ed6:	b003      	add	sp, #12
   d7ed8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7edc:	000d99a4 	.word	0x000d99a4
   d7ee0:	00015180 	.word	0x00015180

000d7ee4 <__tz_lock>:
   d7ee4:	4770      	bx	lr

000d7ee6 <__tz_unlock>:
   d7ee6:	4770      	bx	lr

000d7ee8 <_tzset_unlocked>:
   d7ee8:	4b01      	ldr	r3, [pc, #4]	; (d7ef0 <_tzset_unlocked+0x8>)
   d7eea:	6818      	ldr	r0, [r3, #0]
   d7eec:	f000 b802 	b.w	d7ef4 <_tzset_unlocked_r>
   d7ef0:	2003e198 	.word	0x2003e198

000d7ef4 <_tzset_unlocked_r>:
   d7ef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7ef8:	b08d      	sub	sp, #52	; 0x34
   d7efa:	4607      	mov	r7, r0
   d7efc:	f000 fcdc 	bl	d88b8 <__gettzinfo>
   d7f00:	49b0      	ldr	r1, [pc, #704]	; (d81c4 <_tzset_unlocked_r+0x2d0>)
   d7f02:	4eb1      	ldr	r6, [pc, #708]	; (d81c8 <_tzset_unlocked_r+0x2d4>)
   d7f04:	4604      	mov	r4, r0
   d7f06:	4638      	mov	r0, r7
   d7f08:	f000 fcce 	bl	d88a8 <_getenv_r>
   d7f0c:	4605      	mov	r5, r0
   d7f0e:	b960      	cbnz	r0, d7f2a <_tzset_unlocked_r+0x36>
   d7f10:	4bae      	ldr	r3, [pc, #696]	; (d81cc <_tzset_unlocked_r+0x2d8>)
   d7f12:	4aaf      	ldr	r2, [pc, #700]	; (d81d0 <_tzset_unlocked_r+0x2dc>)
   d7f14:	6018      	str	r0, [r3, #0]
   d7f16:	4baf      	ldr	r3, [pc, #700]	; (d81d4 <_tzset_unlocked_r+0x2e0>)
   d7f18:	6018      	str	r0, [r3, #0]
   d7f1a:	4baf      	ldr	r3, [pc, #700]	; (d81d8 <_tzset_unlocked_r+0x2e4>)
   d7f1c:	6830      	ldr	r0, [r6, #0]
   d7f1e:	601a      	str	r2, [r3, #0]
   d7f20:	605a      	str	r2, [r3, #4]
   d7f22:	f7fc fe9b 	bl	d4c5c <free>
   d7f26:	6035      	str	r5, [r6, #0]
   d7f28:	e148      	b.n	d81bc <_tzset_unlocked_r+0x2c8>
   d7f2a:	6831      	ldr	r1, [r6, #0]
   d7f2c:	b979      	cbnz	r1, d7f4e <_tzset_unlocked_r+0x5a>
   d7f2e:	6830      	ldr	r0, [r6, #0]
   d7f30:	f7fc fe94 	bl	d4c5c <free>
   d7f34:	4628      	mov	r0, r5
   d7f36:	f7ff f836 	bl	d6fa6 <strlen>
   d7f3a:	1c41      	adds	r1, r0, #1
   d7f3c:	4638      	mov	r0, r7
   d7f3e:	f7fc febd 	bl	d4cbc <_malloc_r>
   d7f42:	6030      	str	r0, [r6, #0]
   d7f44:	b148      	cbz	r0, d7f5a <_tzset_unlocked_r+0x66>
   d7f46:	4629      	mov	r1, r5
   d7f48:	f7ff f80a 	bl	d6f60 <strcpy>
   d7f4c:	e005      	b.n	d7f5a <_tzset_unlocked_r+0x66>
   d7f4e:	f7fe fffd 	bl	d6f4c <strcmp>
   d7f52:	2800      	cmp	r0, #0
   d7f54:	f000 8132 	beq.w	d81bc <_tzset_unlocked_r+0x2c8>
   d7f58:	e7e9      	b.n	d7f2e <_tzset_unlocked_r+0x3a>
   d7f5a:	782b      	ldrb	r3, [r5, #0]
   d7f5c:	4a9f      	ldr	r2, [pc, #636]	; (d81dc <_tzset_unlocked_r+0x2e8>)
   d7f5e:	49a0      	ldr	r1, [pc, #640]	; (d81e0 <_tzset_unlocked_r+0x2ec>)
   d7f60:	2b3a      	cmp	r3, #58	; 0x3a
   d7f62:	bf08      	it	eq
   d7f64:	3501      	addeq	r5, #1
   d7f66:	ae0a      	add	r6, sp, #40	; 0x28
   d7f68:	4633      	mov	r3, r6
   d7f6a:	4628      	mov	r0, r5
   d7f6c:	f7fc fe86 	bl	d4c7c <siscanf>
   d7f70:	2800      	cmp	r0, #0
   d7f72:	f340 8123 	ble.w	d81bc <_tzset_unlocked_r+0x2c8>
   d7f76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d7f78:	18ef      	adds	r7, r5, r3
   d7f7a:	5ceb      	ldrb	r3, [r5, r3]
   d7f7c:	2b2d      	cmp	r3, #45	; 0x2d
   d7f7e:	d103      	bne.n	d7f88 <_tzset_unlocked_r+0x94>
   d7f80:	3701      	adds	r7, #1
   d7f82:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   d7f86:	e003      	b.n	d7f90 <_tzset_unlocked_r+0x9c>
   d7f88:	2b2b      	cmp	r3, #43	; 0x2b
   d7f8a:	bf08      	it	eq
   d7f8c:	3701      	addeq	r7, #1
   d7f8e:	2501      	movs	r5, #1
   d7f90:	f10d 0a20 	add.w	sl, sp, #32
   d7f94:	f10d 0b1e 	add.w	fp, sp, #30
   d7f98:	f04f 0800 	mov.w	r8, #0
   d7f9c:	9603      	str	r6, [sp, #12]
   d7f9e:	f8cd a008 	str.w	sl, [sp, #8]
   d7fa2:	9601      	str	r6, [sp, #4]
   d7fa4:	f8cd b000 	str.w	fp, [sp]
   d7fa8:	4633      	mov	r3, r6
   d7faa:	aa07      	add	r2, sp, #28
   d7fac:	498d      	ldr	r1, [pc, #564]	; (d81e4 <_tzset_unlocked_r+0x2f0>)
   d7fae:	f8ad 801e 	strh.w	r8, [sp, #30]
   d7fb2:	4638      	mov	r0, r7
   d7fb4:	f8ad 8020 	strh.w	r8, [sp, #32]
   d7fb8:	f7fc fe60 	bl	d4c7c <siscanf>
   d7fbc:	4540      	cmp	r0, r8
   d7fbe:	f340 80fd 	ble.w	d81bc <_tzset_unlocked_r+0x2c8>
   d7fc2:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d7fc6:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d7fca:	f8df 9224 	ldr.w	r9, [pc, #548]	; d81f0 <_tzset_unlocked_r+0x2fc>
   d7fce:	213c      	movs	r1, #60	; 0x3c
   d7fd0:	fb01 3302 	mla	r3, r1, r2, r3
   d7fd4:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d7fd8:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d7fdc:	fb01 3302 	mla	r3, r1, r2, r3
   d7fe0:	435d      	muls	r5, r3
   d7fe2:	6225      	str	r5, [r4, #32]
   d7fe4:	4d7c      	ldr	r5, [pc, #496]	; (d81d8 <_tzset_unlocked_r+0x2e4>)
   d7fe6:	4b7d      	ldr	r3, [pc, #500]	; (d81dc <_tzset_unlocked_r+0x2e8>)
   d7fe8:	602b      	str	r3, [r5, #0]
   d7fea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d7fec:	497c      	ldr	r1, [pc, #496]	; (d81e0 <_tzset_unlocked_r+0x2ec>)
   d7fee:	441f      	add	r7, r3
   d7ff0:	464a      	mov	r2, r9
   d7ff2:	4633      	mov	r3, r6
   d7ff4:	4638      	mov	r0, r7
   d7ff6:	f7fc fe41 	bl	d4c7c <siscanf>
   d7ffa:	4540      	cmp	r0, r8
   d7ffc:	dc08      	bgt.n	d8010 <_tzset_unlocked_r+0x11c>
   d7ffe:	682b      	ldr	r3, [r5, #0]
   d8000:	606b      	str	r3, [r5, #4]
   d8002:	4b72      	ldr	r3, [pc, #456]	; (d81cc <_tzset_unlocked_r+0x2d8>)
   d8004:	6a22      	ldr	r2, [r4, #32]
   d8006:	601a      	str	r2, [r3, #0]
   d8008:	4b72      	ldr	r3, [pc, #456]	; (d81d4 <_tzset_unlocked_r+0x2e0>)
   d800a:	f8c3 8000 	str.w	r8, [r3]
   d800e:	e0d5      	b.n	d81bc <_tzset_unlocked_r+0x2c8>
   d8010:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d8012:	f8c5 9004 	str.w	r9, [r5, #4]
   d8016:	18fd      	adds	r5, r7, r3
   d8018:	5cfb      	ldrb	r3, [r7, r3]
   d801a:	2b2d      	cmp	r3, #45	; 0x2d
   d801c:	d103      	bne.n	d8026 <_tzset_unlocked_r+0x132>
   d801e:	3501      	adds	r5, #1
   d8020:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   d8024:	e003      	b.n	d802e <_tzset_unlocked_r+0x13a>
   d8026:	2b2b      	cmp	r3, #43	; 0x2b
   d8028:	bf08      	it	eq
   d802a:	3501      	addeq	r5, #1
   d802c:	2701      	movs	r7, #1
   d802e:	2300      	movs	r3, #0
   d8030:	f8ad 301c 	strh.w	r3, [sp, #28]
   d8034:	f8ad 301e 	strh.w	r3, [sp, #30]
   d8038:	f8ad 3020 	strh.w	r3, [sp, #32]
   d803c:	930a      	str	r3, [sp, #40]	; 0x28
   d803e:	9603      	str	r6, [sp, #12]
   d8040:	f8cd a008 	str.w	sl, [sp, #8]
   d8044:	9601      	str	r6, [sp, #4]
   d8046:	f8cd b000 	str.w	fp, [sp]
   d804a:	4633      	mov	r3, r6
   d804c:	aa07      	add	r2, sp, #28
   d804e:	4965      	ldr	r1, [pc, #404]	; (d81e4 <_tzset_unlocked_r+0x2f0>)
   d8050:	4628      	mov	r0, r5
   d8052:	f7fc fe13 	bl	d4c7c <siscanf>
   d8056:	2800      	cmp	r0, #0
   d8058:	dc04      	bgt.n	d8064 <_tzset_unlocked_r+0x170>
   d805a:	6a23      	ldr	r3, [r4, #32]
   d805c:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
   d8060:	63e3      	str	r3, [r4, #60]	; 0x3c
   d8062:	e00e      	b.n	d8082 <_tzset_unlocked_r+0x18e>
   d8064:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d8068:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d806c:	213c      	movs	r1, #60	; 0x3c
   d806e:	fb01 3302 	mla	r3, r1, r2, r3
   d8072:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d8076:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d807a:	fb01 3302 	mla	r3, r1, r2, r3
   d807e:	435f      	muls	r7, r3
   d8080:	63e7      	str	r7, [r4, #60]	; 0x3c
   d8082:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d8084:	4627      	mov	r7, r4
   d8086:	441d      	add	r5, r3
   d8088:	f04f 0900 	mov.w	r9, #0
   d808c:	782b      	ldrb	r3, [r5, #0]
   d808e:	2b2c      	cmp	r3, #44	; 0x2c
   d8090:	bf08      	it	eq
   d8092:	3501      	addeq	r5, #1
   d8094:	f895 8000 	ldrb.w	r8, [r5]
   d8098:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
   d809c:	d126      	bne.n	d80ec <_tzset_unlocked_r+0x1f8>
   d809e:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   d80a2:	9302      	str	r3, [sp, #8]
   d80a4:	ab09      	add	r3, sp, #36	; 0x24
   d80a6:	9300      	str	r3, [sp, #0]
   d80a8:	9603      	str	r6, [sp, #12]
   d80aa:	9601      	str	r6, [sp, #4]
   d80ac:	4633      	mov	r3, r6
   d80ae:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   d80b2:	494d      	ldr	r1, [pc, #308]	; (d81e8 <_tzset_unlocked_r+0x2f4>)
   d80b4:	4628      	mov	r0, r5
   d80b6:	f7fc fde1 	bl	d4c7c <siscanf>
   d80ba:	2803      	cmp	r0, #3
   d80bc:	d17e      	bne.n	d81bc <_tzset_unlocked_r+0x2c8>
   d80be:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
   d80c2:	1e4b      	subs	r3, r1, #1
   d80c4:	2b0b      	cmp	r3, #11
   d80c6:	d879      	bhi.n	d81bc <_tzset_unlocked_r+0x2c8>
   d80c8:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   d80cc:	1e53      	subs	r3, r2, #1
   d80ce:	2b04      	cmp	r3, #4
   d80d0:	d874      	bhi.n	d81bc <_tzset_unlocked_r+0x2c8>
   d80d2:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   d80d6:	2b06      	cmp	r3, #6
   d80d8:	d870      	bhi.n	d81bc <_tzset_unlocked_r+0x2c8>
   d80da:	f887 8008 	strb.w	r8, [r7, #8]
   d80de:	60f9      	str	r1, [r7, #12]
   d80e0:	613a      	str	r2, [r7, #16]
   d80e2:	617b      	str	r3, [r7, #20]
   d80e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d80e6:	eb05 0803 	add.w	r8, r5, r3
   d80ea:	e02a      	b.n	d8142 <_tzset_unlocked_r+0x24e>
   d80ec:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
   d80f0:	bf06      	itte	eq
   d80f2:	3501      	addeq	r5, #1
   d80f4:	4643      	moveq	r3, r8
   d80f6:	2344      	movne	r3, #68	; 0x44
   d80f8:	220a      	movs	r2, #10
   d80fa:	a90b      	add	r1, sp, #44	; 0x2c
   d80fc:	4628      	mov	r0, r5
   d80fe:	9305      	str	r3, [sp, #20]
   d8100:	f7ff fe3e 	bl	d7d80 <strtoul>
   d8104:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   d8108:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
   d810c:	4545      	cmp	r5, r8
   d810e:	9b05      	ldr	r3, [sp, #20]
   d8110:	d114      	bne.n	d813c <_tzset_unlocked_r+0x248>
   d8112:	234d      	movs	r3, #77	; 0x4d
   d8114:	f1b9 0f00 	cmp.w	r9, #0
   d8118:	d107      	bne.n	d812a <_tzset_unlocked_r+0x236>
   d811a:	7223      	strb	r3, [r4, #8]
   d811c:	2303      	movs	r3, #3
   d811e:	60e3      	str	r3, [r4, #12]
   d8120:	2302      	movs	r3, #2
   d8122:	6123      	str	r3, [r4, #16]
   d8124:	f8c4 9014 	str.w	r9, [r4, #20]
   d8128:	e00b      	b.n	d8142 <_tzset_unlocked_r+0x24e>
   d812a:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
   d812e:	230b      	movs	r3, #11
   d8130:	62a3      	str	r3, [r4, #40]	; 0x28
   d8132:	2301      	movs	r3, #1
   d8134:	62e3      	str	r3, [r4, #44]	; 0x2c
   d8136:	2300      	movs	r3, #0
   d8138:	6323      	str	r3, [r4, #48]	; 0x30
   d813a:	e002      	b.n	d8142 <_tzset_unlocked_r+0x24e>
   d813c:	b280      	uxth	r0, r0
   d813e:	723b      	strb	r3, [r7, #8]
   d8140:	6178      	str	r0, [r7, #20]
   d8142:	2302      	movs	r3, #2
   d8144:	f8ad 301c 	strh.w	r3, [sp, #28]
   d8148:	2300      	movs	r3, #0
   d814a:	f8ad 301e 	strh.w	r3, [sp, #30]
   d814e:	f8ad 3020 	strh.w	r3, [sp, #32]
   d8152:	930a      	str	r3, [sp, #40]	; 0x28
   d8154:	f898 3000 	ldrb.w	r3, [r8]
   d8158:	2b2f      	cmp	r3, #47	; 0x2f
   d815a:	d10b      	bne.n	d8174 <_tzset_unlocked_r+0x280>
   d815c:	9603      	str	r6, [sp, #12]
   d815e:	f8cd a008 	str.w	sl, [sp, #8]
   d8162:	9601      	str	r6, [sp, #4]
   d8164:	f8cd b000 	str.w	fp, [sp]
   d8168:	4633      	mov	r3, r6
   d816a:	aa07      	add	r2, sp, #28
   d816c:	491f      	ldr	r1, [pc, #124]	; (d81ec <_tzset_unlocked_r+0x2f8>)
   d816e:	4640      	mov	r0, r8
   d8170:	f7fc fd84 	bl	d4c7c <siscanf>
   d8174:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d8178:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d817c:	213c      	movs	r1, #60	; 0x3c
   d817e:	fb01 3302 	mla	r3, r1, r2, r3
   d8182:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d8186:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d818a:	fb01 3302 	mla	r3, r1, r2, r3
   d818e:	61bb      	str	r3, [r7, #24]
   d8190:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   d8192:	f109 0901 	add.w	r9, r9, #1
   d8196:	f1b9 0f02 	cmp.w	r9, #2
   d819a:	4445      	add	r5, r8
   d819c:	f107 071c 	add.w	r7, r7, #28
   d81a0:	f47f af74 	bne.w	d808c <_tzset_unlocked_r+0x198>
   d81a4:	6860      	ldr	r0, [r4, #4]
   d81a6:	f7ff fdf5 	bl	d7d94 <__tzcalc_limits>
   d81aa:	4b08      	ldr	r3, [pc, #32]	; (d81cc <_tzset_unlocked_r+0x2d8>)
   d81ac:	6a22      	ldr	r2, [r4, #32]
   d81ae:	601a      	str	r2, [r3, #0]
   d81b0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d81b2:	1a9b      	subs	r3, r3, r2
   d81b4:	4a07      	ldr	r2, [pc, #28]	; (d81d4 <_tzset_unlocked_r+0x2e0>)
   d81b6:	bf18      	it	ne
   d81b8:	2301      	movne	r3, #1
   d81ba:	6013      	str	r3, [r2, #0]
   d81bc:	b00d      	add	sp, #52	; 0x34
   d81be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d81c2:	bf00      	nop
   d81c4:	000d9a60 	.word	0x000d9a60
   d81c8:	2003e7e0 	.word	0x2003e7e0
   d81cc:	2003e7e8 	.word	0x2003e7e8
   d81d0:	000d9a63 	.word	0x000d9a63
   d81d4:	2003e7e4 	.word	0x2003e7e4
   d81d8:	2003e1d4 	.word	0x2003e1d4
   d81dc:	2003e7d3 	.word	0x2003e7d3
   d81e0:	000d9a67 	.word	0x000d9a67
   d81e4:	000d9a8a 	.word	0x000d9a8a
   d81e8:	000d9a76 	.word	0x000d9a76
   d81ec:	000d9a89 	.word	0x000d9a89
   d81f0:	2003e7c8 	.word	0x2003e7c8

000d81f4 <rshift>:
   d81f4:	b5f0      	push	{r4, r5, r6, r7, lr}
   d81f6:	6906      	ldr	r6, [r0, #16]
   d81f8:	114b      	asrs	r3, r1, #5
   d81fa:	42b3      	cmp	r3, r6
   d81fc:	f100 0514 	add.w	r5, r0, #20
   d8200:	da27      	bge.n	d8252 <rshift+0x5e>
   d8202:	f011 011f 	ands.w	r1, r1, #31
   d8206:	eb05 0686 	add.w	r6, r5, r6, lsl #2
   d820a:	eb05 0283 	add.w	r2, r5, r3, lsl #2
   d820e:	d101      	bne.n	d8214 <rshift+0x20>
   d8210:	4629      	mov	r1, r5
   d8212:	e016      	b.n	d8242 <rshift+0x4e>
   d8214:	1d14      	adds	r4, r2, #4
   d8216:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
   d821a:	f1c1 0e20 	rsb	lr, r1, #32
   d821e:	40ca      	lsrs	r2, r1
   d8220:	462b      	mov	r3, r5
   d8222:	42b4      	cmp	r4, r6
   d8224:	d209      	bcs.n	d823a <rshift+0x46>
   d8226:	6827      	ldr	r7, [r4, #0]
   d8228:	fa07 f70e 	lsl.w	r7, r7, lr
   d822c:	433a      	orrs	r2, r7
   d822e:	f843 2b04 	str.w	r2, [r3], #4
   d8232:	f854 2b04 	ldr.w	r2, [r4], #4
   d8236:	40ca      	lsrs	r2, r1
   d8238:	e7f3      	b.n	d8222 <rshift+0x2e>
   d823a:	601a      	str	r2, [r3, #0]
   d823c:	b152      	cbz	r2, d8254 <rshift+0x60>
   d823e:	3304      	adds	r3, #4
   d8240:	e008      	b.n	d8254 <rshift+0x60>
   d8242:	42b2      	cmp	r2, r6
   d8244:	460b      	mov	r3, r1
   d8246:	d205      	bcs.n	d8254 <rshift+0x60>
   d8248:	f852 3b04 	ldr.w	r3, [r2], #4
   d824c:	f841 3b04 	str.w	r3, [r1], #4
   d8250:	e7f7      	b.n	d8242 <rshift+0x4e>
   d8252:	462b      	mov	r3, r5
   d8254:	1b5b      	subs	r3, r3, r5
   d8256:	109b      	asrs	r3, r3, #2
   d8258:	6103      	str	r3, [r0, #16]
   d825a:	b903      	cbnz	r3, d825e <rshift+0x6a>
   d825c:	6143      	str	r3, [r0, #20]
   d825e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d8260 <__hexdig_fun>:
   d8260:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d8264:	2b09      	cmp	r3, #9
   d8266:	d801      	bhi.n	d826c <__hexdig_fun+0xc>
   d8268:	3820      	subs	r0, #32
   d826a:	e00a      	b.n	d8282 <__hexdig_fun+0x22>
   d826c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   d8270:	2b05      	cmp	r3, #5
   d8272:	d801      	bhi.n	d8278 <__hexdig_fun+0x18>
   d8274:	3847      	subs	r0, #71	; 0x47
   d8276:	e004      	b.n	d8282 <__hexdig_fun+0x22>
   d8278:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   d827c:	2b05      	cmp	r3, #5
   d827e:	d802      	bhi.n	d8286 <__hexdig_fun+0x26>
   d8280:	3827      	subs	r0, #39	; 0x27
   d8282:	b2c0      	uxtb	r0, r0
   d8284:	4770      	bx	lr
   d8286:	2000      	movs	r0, #0
   d8288:	4770      	bx	lr

000d828a <__gethex>:
   d828a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d828e:	b08b      	sub	sp, #44	; 0x2c
   d8290:	468a      	mov	sl, r1
   d8292:	4690      	mov	r8, r2
   d8294:	9306      	str	r3, [sp, #24]
   d8296:	9002      	str	r0, [sp, #8]
   d8298:	f7fe fe18 	bl	d6ecc <_localeconv_r>
   d829c:	6803      	ldr	r3, [r0, #0]
   d829e:	9303      	str	r3, [sp, #12]
   d82a0:	4618      	mov	r0, r3
   d82a2:	f7fe fe80 	bl	d6fa6 <strlen>
   d82a6:	9b03      	ldr	r3, [sp, #12]
   d82a8:	9001      	str	r0, [sp, #4]
   d82aa:	4403      	add	r3, r0
   d82ac:	f04f 0b00 	mov.w	fp, #0
   d82b0:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   d82b4:	9307      	str	r3, [sp, #28]
   d82b6:	f8da 3000 	ldr.w	r3, [sl]
   d82ba:	3302      	adds	r3, #2
   d82bc:	461f      	mov	r7, r3
   d82be:	f813 0b01 	ldrb.w	r0, [r3], #1
   d82c2:	2830      	cmp	r0, #48	; 0x30
   d82c4:	d102      	bne.n	d82cc <__gethex+0x42>
   d82c6:	f10b 0b01 	add.w	fp, fp, #1
   d82ca:	e7f7      	b.n	d82bc <__gethex+0x32>
   d82cc:	f7ff ffc8 	bl	d8260 <__hexdig_fun>
   d82d0:	4604      	mov	r4, r0
   d82d2:	b9e0      	cbnz	r0, d830e <__gethex+0x84>
   d82d4:	9a01      	ldr	r2, [sp, #4]
   d82d6:	9903      	ldr	r1, [sp, #12]
   d82d8:	4638      	mov	r0, r7
   d82da:	f7fe fe6c 	bl	d6fb6 <strncmp>
   d82de:	2800      	cmp	r0, #0
   d82e0:	d134      	bne.n	d834c <__gethex+0xc2>
   d82e2:	9b01      	ldr	r3, [sp, #4]
   d82e4:	5cf8      	ldrb	r0, [r7, r3]
   d82e6:	18fe      	adds	r6, r7, r3
   d82e8:	f7ff ffba 	bl	d8260 <__hexdig_fun>
   d82ec:	b380      	cbz	r0, d8350 <__gethex+0xc6>
   d82ee:	4633      	mov	r3, r6
   d82f0:	7818      	ldrb	r0, [r3, #0]
   d82f2:	2830      	cmp	r0, #48	; 0x30
   d82f4:	461f      	mov	r7, r3
   d82f6:	f103 0301 	add.w	r3, r3, #1
   d82fa:	d0f9      	beq.n	d82f0 <__gethex+0x66>
   d82fc:	f7ff ffb0 	bl	d8260 <__hexdig_fun>
   d8300:	fab0 f580 	clz	r5, r0
   d8304:	096d      	lsrs	r5, r5, #5
   d8306:	4634      	mov	r4, r6
   d8308:	f04f 0b01 	mov.w	fp, #1
   d830c:	e001      	b.n	d8312 <__gethex+0x88>
   d830e:	2500      	movs	r5, #0
   d8310:	462c      	mov	r4, r5
   d8312:	463a      	mov	r2, r7
   d8314:	4616      	mov	r6, r2
   d8316:	3201      	adds	r2, #1
   d8318:	7830      	ldrb	r0, [r6, #0]
   d831a:	f7ff ffa1 	bl	d8260 <__hexdig_fun>
   d831e:	2800      	cmp	r0, #0
   d8320:	d1f8      	bne.n	d8314 <__gethex+0x8a>
   d8322:	9a01      	ldr	r2, [sp, #4]
   d8324:	9903      	ldr	r1, [sp, #12]
   d8326:	4630      	mov	r0, r6
   d8328:	f7fe fe45 	bl	d6fb6 <strncmp>
   d832c:	b950      	cbnz	r0, d8344 <__gethex+0xba>
   d832e:	b954      	cbnz	r4, d8346 <__gethex+0xbc>
   d8330:	9b01      	ldr	r3, [sp, #4]
   d8332:	18f4      	adds	r4, r6, r3
   d8334:	4622      	mov	r2, r4
   d8336:	4616      	mov	r6, r2
   d8338:	3201      	adds	r2, #1
   d833a:	7830      	ldrb	r0, [r6, #0]
   d833c:	f7ff ff90 	bl	d8260 <__hexdig_fun>
   d8340:	2800      	cmp	r0, #0
   d8342:	d1f8      	bne.n	d8336 <__gethex+0xac>
   d8344:	b134      	cbz	r4, d8354 <__gethex+0xca>
   d8346:	1ba4      	subs	r4, r4, r6
   d8348:	00a4      	lsls	r4, r4, #2
   d834a:	e003      	b.n	d8354 <__gethex+0xca>
   d834c:	463e      	mov	r6, r7
   d834e:	e000      	b.n	d8352 <__gethex+0xc8>
   d8350:	4604      	mov	r4, r0
   d8352:	2501      	movs	r5, #1
   d8354:	7833      	ldrb	r3, [r6, #0]
   d8356:	2b50      	cmp	r3, #80	; 0x50
   d8358:	d001      	beq.n	d835e <__gethex+0xd4>
   d835a:	2b70      	cmp	r3, #112	; 0x70
   d835c:	d12a      	bne.n	d83b4 <__gethex+0x12a>
   d835e:	7873      	ldrb	r3, [r6, #1]
   d8360:	2b2b      	cmp	r3, #43	; 0x2b
   d8362:	d008      	beq.n	d8376 <__gethex+0xec>
   d8364:	2b2d      	cmp	r3, #45	; 0x2d
   d8366:	d003      	beq.n	d8370 <__gethex+0xe6>
   d8368:	1c71      	adds	r1, r6, #1
   d836a:	f04f 0900 	mov.w	r9, #0
   d836e:	e005      	b.n	d837c <__gethex+0xf2>
   d8370:	f04f 0901 	mov.w	r9, #1
   d8374:	e001      	b.n	d837a <__gethex+0xf0>
   d8376:	f04f 0900 	mov.w	r9, #0
   d837a:	1cb1      	adds	r1, r6, #2
   d837c:	7808      	ldrb	r0, [r1, #0]
   d837e:	f7ff ff6f 	bl	d8260 <__hexdig_fun>
   d8382:	1e43      	subs	r3, r0, #1
   d8384:	b2db      	uxtb	r3, r3
   d8386:	2b18      	cmp	r3, #24
   d8388:	d814      	bhi.n	d83b4 <__gethex+0x12a>
   d838a:	f1a0 0210 	sub.w	r2, r0, #16
   d838e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   d8392:	f7ff ff65 	bl	d8260 <__hexdig_fun>
   d8396:	1e43      	subs	r3, r0, #1
   d8398:	b2db      	uxtb	r3, r3
   d839a:	2b18      	cmp	r3, #24
   d839c:	d804      	bhi.n	d83a8 <__gethex+0x11e>
   d839e:	230a      	movs	r3, #10
   d83a0:	fb03 0202 	mla	r2, r3, r2, r0
   d83a4:	3a10      	subs	r2, #16
   d83a6:	e7f2      	b.n	d838e <__gethex+0x104>
   d83a8:	f1b9 0f00 	cmp.w	r9, #0
   d83ac:	d000      	beq.n	d83b0 <__gethex+0x126>
   d83ae:	4252      	negs	r2, r2
   d83b0:	4414      	add	r4, r2
   d83b2:	e000      	b.n	d83b6 <__gethex+0x12c>
   d83b4:	4631      	mov	r1, r6
   d83b6:	f8ca 1000 	str.w	r1, [sl]
   d83ba:	b12d      	cbz	r5, d83c8 <__gethex+0x13e>
   d83bc:	f1bb 0f00 	cmp.w	fp, #0
   d83c0:	bf14      	ite	ne
   d83c2:	2000      	movne	r0, #0
   d83c4:	2006      	moveq	r0, #6
   d83c6:	e17c      	b.n	d86c2 <__gethex+0x438>
   d83c8:	1bf3      	subs	r3, r6, r7
   d83ca:	3b01      	subs	r3, #1
   d83cc:	4629      	mov	r1, r5
   d83ce:	2b07      	cmp	r3, #7
   d83d0:	dd02      	ble.n	d83d8 <__gethex+0x14e>
   d83d2:	3101      	adds	r1, #1
   d83d4:	105b      	asrs	r3, r3, #1
   d83d6:	e7fa      	b.n	d83ce <__gethex+0x144>
   d83d8:	9802      	ldr	r0, [sp, #8]
   d83da:	f000 fb09 	bl	d89f0 <_Balloc>
   d83de:	9b01      	ldr	r3, [sp, #4]
   d83e0:	f100 0a14 	add.w	sl, r0, #20
   d83e4:	f04f 0900 	mov.w	r9, #0
   d83e8:	f1c3 0301 	rsb	r3, r3, #1
   d83ec:	4605      	mov	r5, r0
   d83ee:	f8cd a010 	str.w	sl, [sp, #16]
   d83f2:	46cb      	mov	fp, r9
   d83f4:	9308      	str	r3, [sp, #32]
   d83f6:	42b7      	cmp	r7, r6
   d83f8:	d22f      	bcs.n	d845a <__gethex+0x1d0>
   d83fa:	1e73      	subs	r3, r6, #1
   d83fc:	9305      	str	r3, [sp, #20]
   d83fe:	9a07      	ldr	r2, [sp, #28]
   d8400:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   d8404:	4293      	cmp	r3, r2
   d8406:	d00b      	beq.n	d8420 <__gethex+0x196>
   d8408:	f1bb 0f20 	cmp.w	fp, #32
   d840c:	d116      	bne.n	d843c <__gethex+0x1b2>
   d840e:	9b04      	ldr	r3, [sp, #16]
   d8410:	f8c3 9000 	str.w	r9, [r3]
   d8414:	3304      	adds	r3, #4
   d8416:	f04f 0900 	mov.w	r9, #0
   d841a:	9304      	str	r3, [sp, #16]
   d841c:	46cb      	mov	fp, r9
   d841e:	e00d      	b.n	d843c <__gethex+0x1b2>
   d8420:	9b05      	ldr	r3, [sp, #20]
   d8422:	9a08      	ldr	r2, [sp, #32]
   d8424:	4413      	add	r3, r2
   d8426:	429f      	cmp	r7, r3
   d8428:	d8ee      	bhi.n	d8408 <__gethex+0x17e>
   d842a:	4618      	mov	r0, r3
   d842c:	9a01      	ldr	r2, [sp, #4]
   d842e:	9903      	ldr	r1, [sp, #12]
   d8430:	9309      	str	r3, [sp, #36]	; 0x24
   d8432:	f7fe fdc0 	bl	d6fb6 <strncmp>
   d8436:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d8438:	b168      	cbz	r0, d8456 <__gethex+0x1cc>
   d843a:	e7e5      	b.n	d8408 <__gethex+0x17e>
   d843c:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   d8440:	f7ff ff0e 	bl	d8260 <__hexdig_fun>
   d8444:	f000 000f 	and.w	r0, r0, #15
   d8448:	fa00 f00b 	lsl.w	r0, r0, fp
   d844c:	9b05      	ldr	r3, [sp, #20]
   d844e:	ea49 0900 	orr.w	r9, r9, r0
   d8452:	f10b 0b04 	add.w	fp, fp, #4
   d8456:	461e      	mov	r6, r3
   d8458:	e7cd      	b.n	d83f6 <__gethex+0x16c>
   d845a:	9804      	ldr	r0, [sp, #16]
   d845c:	f840 9b04 	str.w	r9, [r0], #4
   d8460:	ebca 0000 	rsb	r0, sl, r0
   d8464:	1080      	asrs	r0, r0, #2
   d8466:	6128      	str	r0, [r5, #16]
   d8468:	0147      	lsls	r7, r0, #5
   d846a:	4648      	mov	r0, r9
   d846c:	f000 fb85 	bl	d8b7a <__hi0bits>
   d8470:	f8d8 6000 	ldr.w	r6, [r8]
   d8474:	1a38      	subs	r0, r7, r0
   d8476:	42b0      	cmp	r0, r6
   d8478:	dd26      	ble.n	d84c8 <__gethex+0x23e>
   d847a:	1b87      	subs	r7, r0, r6
   d847c:	4639      	mov	r1, r7
   d847e:	4628      	mov	r0, r5
   d8480:	f000 fe83 	bl	d918a <__any_on>
   d8484:	b1c8      	cbz	r0, d84ba <__gethex+0x230>
   d8486:	1e7b      	subs	r3, r7, #1
   d8488:	1159      	asrs	r1, r3, #5
   d848a:	f003 021f 	and.w	r2, r3, #31
   d848e:	f04f 0901 	mov.w	r9, #1
   d8492:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
   d8496:	fa09 f202 	lsl.w	r2, r9, r2
   d849a:	420a      	tst	r2, r1
   d849c:	d00e      	beq.n	d84bc <__gethex+0x232>
   d849e:	454b      	cmp	r3, r9
   d84a0:	dc02      	bgt.n	d84a8 <__gethex+0x21e>
   d84a2:	f04f 0902 	mov.w	r9, #2
   d84a6:	e009      	b.n	d84bc <__gethex+0x232>
   d84a8:	1eb9      	subs	r1, r7, #2
   d84aa:	4628      	mov	r0, r5
   d84ac:	f000 fe6d 	bl	d918a <__any_on>
   d84b0:	2800      	cmp	r0, #0
   d84b2:	d0f6      	beq.n	d84a2 <__gethex+0x218>
   d84b4:	f04f 0903 	mov.w	r9, #3
   d84b8:	e000      	b.n	d84bc <__gethex+0x232>
   d84ba:	4681      	mov	r9, r0
   d84bc:	4639      	mov	r1, r7
   d84be:	4628      	mov	r0, r5
   d84c0:	f7ff fe98 	bl	d81f4 <rshift>
   d84c4:	443c      	add	r4, r7
   d84c6:	e00c      	b.n	d84e2 <__gethex+0x258>
   d84c8:	da09      	bge.n	d84de <__gethex+0x254>
   d84ca:	1a37      	subs	r7, r6, r0
   d84cc:	4629      	mov	r1, r5
   d84ce:	463a      	mov	r2, r7
   d84d0:	9802      	ldr	r0, [sp, #8]
   d84d2:	f000 fc87 	bl	d8de4 <__lshift>
   d84d6:	1be4      	subs	r4, r4, r7
   d84d8:	4605      	mov	r5, r0
   d84da:	f100 0a14 	add.w	sl, r0, #20
   d84de:	f04f 0900 	mov.w	r9, #0
   d84e2:	f8d8 3008 	ldr.w	r3, [r8, #8]
   d84e6:	429c      	cmp	r4, r3
   d84e8:	dd08      	ble.n	d84fc <__gethex+0x272>
   d84ea:	9802      	ldr	r0, [sp, #8]
   d84ec:	4629      	mov	r1, r5
   d84ee:	f000 fab4 	bl	d8a5a <_Bfree>
   d84f2:	9a14      	ldr	r2, [sp, #80]	; 0x50
   d84f4:	2300      	movs	r3, #0
   d84f6:	6013      	str	r3, [r2, #0]
   d84f8:	20a3      	movs	r0, #163	; 0xa3
   d84fa:	e0e2      	b.n	d86c2 <__gethex+0x438>
   d84fc:	f8d8 0004 	ldr.w	r0, [r8, #4]
   d8500:	4284      	cmp	r4, r0
   d8502:	da53      	bge.n	d85ac <__gethex+0x322>
   d8504:	1b04      	subs	r4, r0, r4
   d8506:	42a6      	cmp	r6, r4
   d8508:	dc2e      	bgt.n	d8568 <__gethex+0x2de>
   d850a:	f8d8 300c 	ldr.w	r3, [r8, #12]
   d850e:	2b02      	cmp	r3, #2
   d8510:	d01a      	beq.n	d8548 <__gethex+0x2be>
   d8512:	2b03      	cmp	r3, #3
   d8514:	d01c      	beq.n	d8550 <__gethex+0x2c6>
   d8516:	2b01      	cmp	r3, #1
   d8518:	d11d      	bne.n	d8556 <__gethex+0x2cc>
   d851a:	42a6      	cmp	r6, r4
   d851c:	d11b      	bne.n	d8556 <__gethex+0x2cc>
   d851e:	2e01      	cmp	r6, #1
   d8520:	dc0b      	bgt.n	d853a <__gethex+0x2b0>
   d8522:	9a06      	ldr	r2, [sp, #24]
   d8524:	f8d8 3004 	ldr.w	r3, [r8, #4]
   d8528:	6013      	str	r3, [r2, #0]
   d852a:	2301      	movs	r3, #1
   d852c:	612b      	str	r3, [r5, #16]
   d852e:	f8ca 3000 	str.w	r3, [sl]
   d8532:	9b14      	ldr	r3, [sp, #80]	; 0x50
   d8534:	2062      	movs	r0, #98	; 0x62
   d8536:	601d      	str	r5, [r3, #0]
   d8538:	e0c3      	b.n	d86c2 <__gethex+0x438>
   d853a:	1e71      	subs	r1, r6, #1
   d853c:	4628      	mov	r0, r5
   d853e:	f000 fe24 	bl	d918a <__any_on>
   d8542:	2800      	cmp	r0, #0
   d8544:	d1ed      	bne.n	d8522 <__gethex+0x298>
   d8546:	e006      	b.n	d8556 <__gethex+0x2cc>
   d8548:	9b15      	ldr	r3, [sp, #84]	; 0x54
   d854a:	2b00      	cmp	r3, #0
   d854c:	d0e9      	beq.n	d8522 <__gethex+0x298>
   d854e:	e002      	b.n	d8556 <__gethex+0x2cc>
   d8550:	9b15      	ldr	r3, [sp, #84]	; 0x54
   d8552:	2b00      	cmp	r3, #0
   d8554:	d1e5      	bne.n	d8522 <__gethex+0x298>
   d8556:	9802      	ldr	r0, [sp, #8]
   d8558:	4629      	mov	r1, r5
   d855a:	f000 fa7e 	bl	d8a5a <_Bfree>
   d855e:	9a14      	ldr	r2, [sp, #80]	; 0x50
   d8560:	2300      	movs	r3, #0
   d8562:	6013      	str	r3, [r2, #0]
   d8564:	2050      	movs	r0, #80	; 0x50
   d8566:	e0ac      	b.n	d86c2 <__gethex+0x438>
   d8568:	1e67      	subs	r7, r4, #1
   d856a:	f1b9 0f00 	cmp.w	r9, #0
   d856e:	d106      	bne.n	d857e <__gethex+0x2f4>
   d8570:	b13f      	cbz	r7, d8582 <__gethex+0x2f8>
   d8572:	4639      	mov	r1, r7
   d8574:	4628      	mov	r0, r5
   d8576:	f000 fe08 	bl	d918a <__any_on>
   d857a:	4681      	mov	r9, r0
   d857c:	e001      	b.n	d8582 <__gethex+0x2f8>
   d857e:	f04f 0901 	mov.w	r9, #1
   d8582:	117a      	asrs	r2, r7, #5
   d8584:	2301      	movs	r3, #1
   d8586:	f007 071f 	and.w	r7, r7, #31
   d858a:	fa03 f707 	lsl.w	r7, r3, r7
   d858e:	f85a 3022 	ldr.w	r3, [sl, r2, lsl #2]
   d8592:	4621      	mov	r1, r4
   d8594:	421f      	tst	r7, r3
   d8596:	4628      	mov	r0, r5
   d8598:	bf18      	it	ne
   d859a:	f049 0902 	orrne.w	r9, r9, #2
   d859e:	1b36      	subs	r6, r6, r4
   d85a0:	f7ff fe28 	bl	d81f4 <rshift>
   d85a4:	2702      	movs	r7, #2
   d85a6:	f8d8 4004 	ldr.w	r4, [r8, #4]
   d85aa:	e000      	b.n	d85ae <__gethex+0x324>
   d85ac:	2701      	movs	r7, #1
   d85ae:	f1b9 0f00 	cmp.w	r9, #0
   d85b2:	f000 8081 	beq.w	d86b8 <__gethex+0x42e>
   d85b6:	f8d8 300c 	ldr.w	r3, [r8, #12]
   d85ba:	2b02      	cmp	r3, #2
   d85bc:	d00e      	beq.n	d85dc <__gethex+0x352>
   d85be:	2b03      	cmp	r3, #3
   d85c0:	d010      	beq.n	d85e4 <__gethex+0x35a>
   d85c2:	2b01      	cmp	r3, #1
   d85c4:	d176      	bne.n	d86b4 <__gethex+0x42a>
   d85c6:	f019 0f02 	tst.w	r9, #2
   d85ca:	d073      	beq.n	d86b4 <__gethex+0x42a>
   d85cc:	f8da 0000 	ldr.w	r0, [sl]
   d85d0:	ea49 0900 	orr.w	r9, r9, r0
   d85d4:	f019 0f01 	tst.w	r9, #1
   d85d8:	d107      	bne.n	d85ea <__gethex+0x360>
   d85da:	e06b      	b.n	d86b4 <__gethex+0x42a>
   d85dc:	9b15      	ldr	r3, [sp, #84]	; 0x54
   d85de:	f1c3 0301 	rsb	r3, r3, #1
   d85e2:	9315      	str	r3, [sp, #84]	; 0x54
   d85e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
   d85e6:	2b00      	cmp	r3, #0
   d85e8:	d064      	beq.n	d86b4 <__gethex+0x42a>
   d85ea:	f8d5 a010 	ldr.w	sl, [r5, #16]
   d85ee:	f105 0314 	add.w	r3, r5, #20
   d85f2:	ea4f 098a 	mov.w	r9, sl, lsl #2
   d85f6:	eb03 0109 	add.w	r1, r3, r9
   d85fa:	2000      	movs	r0, #0
   d85fc:	681a      	ldr	r2, [r3, #0]
   d85fe:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   d8602:	d002      	beq.n	d860a <__gethex+0x380>
   d8604:	3201      	adds	r2, #1
   d8606:	601a      	str	r2, [r3, #0]
   d8608:	e020      	b.n	d864c <__gethex+0x3c2>
   d860a:	f843 0b04 	str.w	r0, [r3], #4
   d860e:	4299      	cmp	r1, r3
   d8610:	d8f4      	bhi.n	d85fc <__gethex+0x372>
   d8612:	68ab      	ldr	r3, [r5, #8]
   d8614:	459a      	cmp	sl, r3
   d8616:	db12      	blt.n	d863e <__gethex+0x3b4>
   d8618:	6869      	ldr	r1, [r5, #4]
   d861a:	9802      	ldr	r0, [sp, #8]
   d861c:	3101      	adds	r1, #1
   d861e:	f000 f9e7 	bl	d89f0 <_Balloc>
   d8622:	692a      	ldr	r2, [r5, #16]
   d8624:	3202      	adds	r2, #2
   d8626:	f105 010c 	add.w	r1, r5, #12
   d862a:	4683      	mov	fp, r0
   d862c:	0092      	lsls	r2, r2, #2
   d862e:	300c      	adds	r0, #12
   d8630:	f7fe fc50 	bl	d6ed4 <memcpy>
   d8634:	4629      	mov	r1, r5
   d8636:	9802      	ldr	r0, [sp, #8]
   d8638:	f000 fa0f 	bl	d8a5a <_Bfree>
   d863c:	465d      	mov	r5, fp
   d863e:	692b      	ldr	r3, [r5, #16]
   d8640:	1c5a      	adds	r2, r3, #1
   d8642:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   d8646:	612a      	str	r2, [r5, #16]
   d8648:	2201      	movs	r2, #1
   d864a:	615a      	str	r2, [r3, #20]
   d864c:	2f02      	cmp	r7, #2
   d864e:	f105 0214 	add.w	r2, r5, #20
   d8652:	d111      	bne.n	d8678 <__gethex+0x3ee>
   d8654:	f8d8 3000 	ldr.w	r3, [r8]
   d8658:	3b01      	subs	r3, #1
   d865a:	429e      	cmp	r6, r3
   d865c:	d127      	bne.n	d86ae <__gethex+0x424>
   d865e:	1171      	asrs	r1, r6, #5
   d8660:	2301      	movs	r3, #1
   d8662:	f006 061f 	and.w	r6, r6, #31
   d8666:	fa03 f606 	lsl.w	r6, r3, r6
   d866a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   d866e:	421e      	tst	r6, r3
   d8670:	bf0c      	ite	eq
   d8672:	2702      	moveq	r7, #2
   d8674:	2701      	movne	r7, #1
   d8676:	e01a      	b.n	d86ae <__gethex+0x424>
   d8678:	692b      	ldr	r3, [r5, #16]
   d867a:	459a      	cmp	sl, r3
   d867c:	da0a      	bge.n	d8694 <__gethex+0x40a>
   d867e:	2101      	movs	r1, #1
   d8680:	4628      	mov	r0, r5
   d8682:	f7ff fdb7 	bl	d81f4 <rshift>
   d8686:	f8d8 3008 	ldr.w	r3, [r8, #8]
   d868a:	3401      	adds	r4, #1
   d868c:	429c      	cmp	r4, r3
   d868e:	f73f af2c 	bgt.w	d84ea <__gethex+0x260>
   d8692:	e00b      	b.n	d86ac <__gethex+0x422>
   d8694:	f016 061f 	ands.w	r6, r6, #31
   d8698:	d008      	beq.n	d86ac <__gethex+0x422>
   d869a:	4491      	add	r9, r2
   d869c:	f1c6 0620 	rsb	r6, r6, #32
   d86a0:	f859 0c04 	ldr.w	r0, [r9, #-4]
   d86a4:	f000 fa69 	bl	d8b7a <__hi0bits>
   d86a8:	42b0      	cmp	r0, r6
   d86aa:	dbe8      	blt.n	d867e <__gethex+0x3f4>
   d86ac:	2701      	movs	r7, #1
   d86ae:	f047 0720 	orr.w	r7, r7, #32
   d86b2:	e001      	b.n	d86b8 <__gethex+0x42e>
   d86b4:	f047 0710 	orr.w	r7, r7, #16
   d86b8:	9b14      	ldr	r3, [sp, #80]	; 0x50
   d86ba:	601d      	str	r5, [r3, #0]
   d86bc:	9b06      	ldr	r3, [sp, #24]
   d86be:	4638      	mov	r0, r7
   d86c0:	601c      	str	r4, [r3, #0]
   d86c2:	b00b      	add	sp, #44	; 0x2c
   d86c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d86c8 <L_shift>:
   d86c8:	f1c2 0208 	rsb	r2, r2, #8
   d86cc:	0092      	lsls	r2, r2, #2
   d86ce:	b570      	push	{r4, r5, r6, lr}
   d86d0:	f1c2 0620 	rsb	r6, r2, #32
   d86d4:	6843      	ldr	r3, [r0, #4]
   d86d6:	6805      	ldr	r5, [r0, #0]
   d86d8:	fa03 f406 	lsl.w	r4, r3, r6
   d86dc:	432c      	orrs	r4, r5
   d86de:	40d3      	lsrs	r3, r2
   d86e0:	6004      	str	r4, [r0, #0]
   d86e2:	f840 3f04 	str.w	r3, [r0, #4]!
   d86e6:	4288      	cmp	r0, r1
   d86e8:	d3f4      	bcc.n	d86d4 <L_shift+0xc>
   d86ea:	bd70      	pop	{r4, r5, r6, pc}

000d86ec <__match>:
   d86ec:	b530      	push	{r4, r5, lr}
   d86ee:	6803      	ldr	r3, [r0, #0]
   d86f0:	f811 4b01 	ldrb.w	r4, [r1], #1
   d86f4:	3301      	adds	r3, #1
   d86f6:	b14c      	cbz	r4, d870c <__match+0x20>
   d86f8:	781a      	ldrb	r2, [r3, #0]
   d86fa:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   d86fe:	2d19      	cmp	r5, #25
   d8700:	bf98      	it	ls
   d8702:	3220      	addls	r2, #32
   d8704:	42a2      	cmp	r2, r4
   d8706:	d0f3      	beq.n	d86f0 <__match+0x4>
   d8708:	2000      	movs	r0, #0
   d870a:	bd30      	pop	{r4, r5, pc}
   d870c:	6003      	str	r3, [r0, #0]
   d870e:	2001      	movs	r0, #1
   d8710:	bd30      	pop	{r4, r5, pc}

000d8712 <__hexnan>:
   d8712:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8716:	680b      	ldr	r3, [r1, #0]
   d8718:	f8d0 b000 	ldr.w	fp, [r0]
   d871c:	115e      	asrs	r6, r3, #5
   d871e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   d8722:	f013 031f 	ands.w	r3, r3, #31
   d8726:	b085      	sub	sp, #20
   d8728:	bf18      	it	ne
   d872a:	3604      	addne	r6, #4
   d872c:	1f35      	subs	r5, r6, #4
   d872e:	4617      	mov	r7, r2
   d8730:	2200      	movs	r2, #0
   d8732:	4682      	mov	sl, r0
   d8734:	9301      	str	r3, [sp, #4]
   d8736:	f846 2c04 	str.w	r2, [r6, #-4]
   d873a:	46a8      	mov	r8, r5
   d873c:	462c      	mov	r4, r5
   d873e:	9200      	str	r2, [sp, #0]
   d8740:	4691      	mov	r9, r2
   d8742:	f81b 1f01 	ldrb.w	r1, [fp, #1]!
   d8746:	2900      	cmp	r1, #0
   d8748:	d03c      	beq.n	d87c4 <__hexnan+0xb2>
   d874a:	4608      	mov	r0, r1
   d874c:	9203      	str	r2, [sp, #12]
   d874e:	9102      	str	r1, [sp, #8]
   d8750:	f7ff fd86 	bl	d8260 <__hexdig_fun>
   d8754:	9a03      	ldr	r2, [sp, #12]
   d8756:	bb00      	cbnz	r0, d879a <__hexnan+0x88>
   d8758:	9902      	ldr	r1, [sp, #8]
   d875a:	2920      	cmp	r1, #32
   d875c:	d816      	bhi.n	d878c <__hexnan+0x7a>
   d875e:	9b00      	ldr	r3, [sp, #0]
   d8760:	4599      	cmp	r9, r3
   d8762:	ddee      	ble.n	d8742 <__hexnan+0x30>
   d8764:	4544      	cmp	r4, r8
   d8766:	d205      	bcs.n	d8774 <__hexnan+0x62>
   d8768:	2a07      	cmp	r2, #7
   d876a:	dc03      	bgt.n	d8774 <__hexnan+0x62>
   d876c:	4641      	mov	r1, r8
   d876e:	4620      	mov	r0, r4
   d8770:	f7ff ffaa 	bl	d86c8 <L_shift>
   d8774:	42bc      	cmp	r4, r7
   d8776:	d923      	bls.n	d87c0 <__hexnan+0xae>
   d8778:	2300      	movs	r3, #0
   d877a:	f1a4 0804 	sub.w	r8, r4, #4
   d877e:	f844 3c04 	str.w	r3, [r4, #-4]
   d8782:	f8cd 9000 	str.w	r9, [sp]
   d8786:	4644      	mov	r4, r8
   d8788:	461a      	mov	r2, r3
   d878a:	e7da      	b.n	d8742 <__hexnan+0x30>
   d878c:	2929      	cmp	r1, #41	; 0x29
   d878e:	d148      	bne.n	d8822 <__hexnan+0x110>
   d8790:	f10b 0301 	add.w	r3, fp, #1
   d8794:	f8ca 3000 	str.w	r3, [sl]
   d8798:	e014      	b.n	d87c4 <__hexnan+0xb2>
   d879a:	3201      	adds	r2, #1
   d879c:	2a08      	cmp	r2, #8
   d879e:	f109 0901 	add.w	r9, r9, #1
   d87a2:	dd06      	ble.n	d87b2 <__hexnan+0xa0>
   d87a4:	42bc      	cmp	r4, r7
   d87a6:	d9cc      	bls.n	d8742 <__hexnan+0x30>
   d87a8:	2300      	movs	r3, #0
   d87aa:	f844 3c04 	str.w	r3, [r4, #-4]
   d87ae:	2201      	movs	r2, #1
   d87b0:	3c04      	subs	r4, #4
   d87b2:	6821      	ldr	r1, [r4, #0]
   d87b4:	f000 000f 	and.w	r0, r0, #15
   d87b8:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
   d87bc:	6020      	str	r0, [r4, #0]
   d87be:	e7c0      	b.n	d8742 <__hexnan+0x30>
   d87c0:	2208      	movs	r2, #8
   d87c2:	e7be      	b.n	d8742 <__hexnan+0x30>
   d87c4:	f1b9 0f00 	cmp.w	r9, #0
   d87c8:	d02b      	beq.n	d8822 <__hexnan+0x110>
   d87ca:	4544      	cmp	r4, r8
   d87cc:	d205      	bcs.n	d87da <__hexnan+0xc8>
   d87ce:	2a07      	cmp	r2, #7
   d87d0:	dc03      	bgt.n	d87da <__hexnan+0xc8>
   d87d2:	4641      	mov	r1, r8
   d87d4:	4620      	mov	r0, r4
   d87d6:	f7ff ff77 	bl	d86c8 <L_shift>
   d87da:	42bc      	cmp	r4, r7
   d87dc:	d90c      	bls.n	d87f8 <__hexnan+0xe6>
   d87de:	463b      	mov	r3, r7
   d87e0:	f854 2b04 	ldr.w	r2, [r4], #4
   d87e4:	f843 2b04 	str.w	r2, [r3], #4
   d87e8:	42a5      	cmp	r5, r4
   d87ea:	d2f9      	bcs.n	d87e0 <__hexnan+0xce>
   d87ec:	2200      	movs	r2, #0
   d87ee:	f843 2b04 	str.w	r2, [r3], #4
   d87f2:	429d      	cmp	r5, r3
   d87f4:	d2fb      	bcs.n	d87ee <__hexnan+0xdc>
   d87f6:	e00b      	b.n	d8810 <__hexnan+0xfe>
   d87f8:	9b01      	ldr	r3, [sp, #4]
   d87fa:	b14b      	cbz	r3, d8810 <__hexnan+0xfe>
   d87fc:	f1c3 0220 	rsb	r2, r3, #32
   d8800:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d8804:	40d3      	lsrs	r3, r2
   d8806:	f856 2c04 	ldr.w	r2, [r6, #-4]
   d880a:	4013      	ands	r3, r2
   d880c:	f846 3c04 	str.w	r3, [r6, #-4]
   d8810:	682b      	ldr	r3, [r5, #0]
   d8812:	b943      	cbnz	r3, d8826 <__hexnan+0x114>
   d8814:	42bd      	cmp	r5, r7
   d8816:	d102      	bne.n	d881e <__hexnan+0x10c>
   d8818:	2301      	movs	r3, #1
   d881a:	602b      	str	r3, [r5, #0]
   d881c:	e003      	b.n	d8826 <__hexnan+0x114>
   d881e:	3d04      	subs	r5, #4
   d8820:	e7f6      	b.n	d8810 <__hexnan+0xfe>
   d8822:	2004      	movs	r0, #4
   d8824:	e000      	b.n	d8828 <__hexnan+0x116>
   d8826:	2005      	movs	r0, #5
   d8828:	b005      	add	sp, #20
   d882a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

000d8830 <_findenv_r>:
   d8830:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8834:	4607      	mov	r7, r0
   d8836:	468b      	mov	fp, r1
   d8838:	4690      	mov	r8, r2
   d883a:	f000 fcd6 	bl	d91ea <__env_lock>
   d883e:	4b19      	ldr	r3, [pc, #100]	; (d88a4 <_findenv_r+0x74>)
   d8840:	681d      	ldr	r5, [r3, #0]
   d8842:	469a      	mov	sl, r3
   d8844:	b13d      	cbz	r5, d8856 <_findenv_r+0x26>
   d8846:	465c      	mov	r4, fp
   d8848:	4623      	mov	r3, r4
   d884a:	f813 2b01 	ldrb.w	r2, [r3], #1
   d884e:	b142      	cbz	r2, d8862 <_findenv_r+0x32>
   d8850:	2a3d      	cmp	r2, #61	; 0x3d
   d8852:	461c      	mov	r4, r3
   d8854:	d1f8      	bne.n	d8848 <_findenv_r+0x18>
   d8856:	4638      	mov	r0, r7
   d8858:	f000 fcc8 	bl	d91ec <__env_unlock>
   d885c:	2000      	movs	r0, #0
   d885e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d8862:	ebcb 0404 	rsb	r4, fp, r4
   d8866:	46a9      	mov	r9, r5
   d8868:	f859 0b04 	ldr.w	r0, [r9], #4
   d886c:	2800      	cmp	r0, #0
   d886e:	d0f2      	beq.n	d8856 <_findenv_r+0x26>
   d8870:	4622      	mov	r2, r4
   d8872:	4659      	mov	r1, fp
   d8874:	f7fe fb9f 	bl	d6fb6 <strncmp>
   d8878:	b988      	cbnz	r0, d889e <_findenv_r+0x6e>
   d887a:	f859 3c04 	ldr.w	r3, [r9, #-4]
   d887e:	191e      	adds	r6, r3, r4
   d8880:	5d1b      	ldrb	r3, [r3, r4]
   d8882:	2b3d      	cmp	r3, #61	; 0x3d
   d8884:	d10b      	bne.n	d889e <_findenv_r+0x6e>
   d8886:	f8da 3000 	ldr.w	r3, [sl]
   d888a:	1aed      	subs	r5, r5, r3
   d888c:	10ad      	asrs	r5, r5, #2
   d888e:	4638      	mov	r0, r7
   d8890:	f8c8 5000 	str.w	r5, [r8]
   d8894:	f000 fcaa 	bl	d91ec <__env_unlock>
   d8898:	1c70      	adds	r0, r6, #1
   d889a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d889e:	464d      	mov	r5, r9
   d88a0:	e7e1      	b.n	d8866 <_findenv_r+0x36>
   d88a2:	bf00      	nop
   d88a4:	2003e21c 	.word	0x2003e21c

000d88a8 <_getenv_r>:
   d88a8:	b507      	push	{r0, r1, r2, lr}
   d88aa:	aa01      	add	r2, sp, #4
   d88ac:	f7ff ffc0 	bl	d8830 <_findenv_r>
   d88b0:	b003      	add	sp, #12
   d88b2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d88b8 <__gettzinfo>:
   d88b8:	4800      	ldr	r0, [pc, #0]	; (d88bc <__gettzinfo+0x4>)
   d88ba:	4770      	bx	lr
   d88bc:	2003e1dc 	.word	0x2003e1dc

000d88c0 <gmtime_r>:
   d88c0:	6802      	ldr	r2, [r0, #0]
   d88c2:	4b47      	ldr	r3, [pc, #284]	; (d89e0 <gmtime_r+0x120>)
   d88c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   d88c6:	fb92 f4f3 	sdiv	r4, r2, r3
   d88ca:	fb03 2214 	mls	r2, r3, r4, r2
   d88ce:	2a00      	cmp	r2, #0
   d88d0:	bfbc      	itt	lt
   d88d2:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
   d88d6:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
   d88da:	f44f 6061 	mov.w	r0, #3600	; 0xe10
   d88de:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
   d88e2:	fb92 f3f0 	sdiv	r3, r2, r0
   d88e6:	fb00 2213 	mls	r2, r0, r3, r2
   d88ea:	f04f 003c 	mov.w	r0, #60	; 0x3c
   d88ee:	bfac      	ite	ge
   d88f0:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
   d88f4:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
   d88f8:	608b      	str	r3, [r1, #8]
   d88fa:	fb92 f3f0 	sdiv	r3, r2, r0
   d88fe:	fb00 2213 	mls	r2, r0, r3, r2
   d8902:	604b      	str	r3, [r1, #4]
   d8904:	600a      	str	r2, [r1, #0]
   d8906:	2307      	movs	r3, #7
   d8908:	1ce2      	adds	r2, r4, #3
   d890a:	fb92 f3f3 	sdiv	r3, r2, r3
   d890e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   d8912:	1ad3      	subs	r3, r2, r3
   d8914:	618b      	str	r3, [r1, #24]
   d8916:	4b33      	ldr	r3, [pc, #204]	; (d89e4 <gmtime_r+0x124>)
   d8918:	4d33      	ldr	r5, [pc, #204]	; (d89e8 <gmtime_r+0x128>)
   d891a:	fb94 f5f5 	sdiv	r5, r4, r5
   d891e:	fb03 4405 	mla	r4, r3, r5, r4
   d8922:	f648 62ac 	movw	r2, #36524	; 0x8eac
   d8926:	fbb4 f2f2 	udiv	r2, r4, r2
   d892a:	4422      	add	r2, r4
   d892c:	f240 57b4 	movw	r7, #1460	; 0x5b4
   d8930:	fbb4 f3f7 	udiv	r3, r4, r7
   d8934:	1ad2      	subs	r2, r2, r3
   d8936:	482d      	ldr	r0, [pc, #180]	; (d89ec <gmtime_r+0x12c>)
   d8938:	fbb4 f0f0 	udiv	r0, r4, r0
   d893c:	f648 6694 	movw	r6, #36500	; 0x8e94
   d8940:	1a13      	subs	r3, r2, r0
   d8942:	fbb3 f6f6 	udiv	r6, r3, r6
   d8946:	4434      	add	r4, r6
   d8948:	f240 126d 	movw	r2, #365	; 0x16d
   d894c:	fbb3 f0f2 	udiv	r0, r3, r2
   d8950:	fbb3 f3f7 	udiv	r3, r3, r7
   d8954:	1ae3      	subs	r3, r4, r3
   d8956:	fb02 3310 	mls	r3, r2, r0, r3
   d895a:	2499      	movs	r4, #153	; 0x99
   d895c:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   d8960:	3202      	adds	r2, #2
   d8962:	fbb2 f2f4 	udiv	r2, r2, r4
   d8966:	2a0a      	cmp	r2, #10
   d8968:	fb04 f402 	mul.w	r4, r4, r2
   d896c:	f104 0602 	add.w	r6, r4, #2
   d8970:	f04f 0405 	mov.w	r4, #5
   d8974:	fbb6 f4f4 	udiv	r4, r6, r4
   d8978:	bf34      	ite	cc
   d897a:	2602      	movcc	r6, #2
   d897c:	f06f 0609 	mvncs.w	r6, #9
   d8980:	4416      	add	r6, r2
   d8982:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d8986:	fb02 0505 	mla	r5, r2, r5, r0
   d898a:	1c5f      	adds	r7, r3, #1
   d898c:	2e01      	cmp	r6, #1
   d898e:	bf98      	it	ls
   d8990:	3501      	addls	r5, #1
   d8992:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
   d8996:	eba7 0704 	sub.w	r7, r7, r4
   d899a:	d302      	bcc.n	d89a2 <gmtime_r+0xe2>
   d899c:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
   d89a0:	e014      	b.n	d89cc <gmtime_r+0x10c>
   d89a2:	0782      	lsls	r2, r0, #30
   d89a4:	d105      	bne.n	d89b2 <gmtime_r+0xf2>
   d89a6:	2464      	movs	r4, #100	; 0x64
   d89a8:	fbb0 f2f4 	udiv	r2, r0, r4
   d89ac:	fb04 0212 	mls	r2, r4, r2, r0
   d89b0:	b94a      	cbnz	r2, d89c6 <gmtime_r+0x106>
   d89b2:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d89b6:	fbb0 f4f2 	udiv	r4, r0, r2
   d89ba:	fb02 0014 	mls	r0, r2, r4, r0
   d89be:	fab0 f280 	clz	r2, r0
   d89c2:	0952      	lsrs	r2, r2, #5
   d89c4:	e000      	b.n	d89c8 <gmtime_r+0x108>
   d89c6:	2201      	movs	r2, #1
   d89c8:	333b      	adds	r3, #59	; 0x3b
   d89ca:	441a      	add	r2, r3
   d89cc:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
   d89d0:	2300      	movs	r3, #0
   d89d2:	61ca      	str	r2, [r1, #28]
   d89d4:	614d      	str	r5, [r1, #20]
   d89d6:	610e      	str	r6, [r1, #16]
   d89d8:	60cf      	str	r7, [r1, #12]
   d89da:	620b      	str	r3, [r1, #32]
   d89dc:	4608      	mov	r0, r1
   d89de:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d89e0:	00015180 	.word	0x00015180
   d89e4:	fffdc54f 	.word	0xfffdc54f
   d89e8:	00023ab1 	.word	0x00023ab1
   d89ec:	00023ab0 	.word	0x00023ab0

000d89f0 <_Balloc>:
   d89f0:	b570      	push	{r4, r5, r6, lr}
   d89f2:	6a45      	ldr	r5, [r0, #36]	; 0x24
   d89f4:	4604      	mov	r4, r0
   d89f6:	460e      	mov	r6, r1
   d89f8:	b93d      	cbnz	r5, d8a0a <_Balloc+0x1a>
   d89fa:	2010      	movs	r0, #16
   d89fc:	f7fc f926 	bl	d4c4c <malloc>
   d8a00:	6260      	str	r0, [r4, #36]	; 0x24
   d8a02:	6045      	str	r5, [r0, #4]
   d8a04:	6085      	str	r5, [r0, #8]
   d8a06:	6005      	str	r5, [r0, #0]
   d8a08:	60c5      	str	r5, [r0, #12]
   d8a0a:	6a65      	ldr	r5, [r4, #36]	; 0x24
   d8a0c:	68eb      	ldr	r3, [r5, #12]
   d8a0e:	b143      	cbz	r3, d8a22 <_Balloc+0x32>
   d8a10:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d8a12:	68db      	ldr	r3, [r3, #12]
   d8a14:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
   d8a18:	b178      	cbz	r0, d8a3a <_Balloc+0x4a>
   d8a1a:	6802      	ldr	r2, [r0, #0]
   d8a1c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
   d8a20:	e017      	b.n	d8a52 <_Balloc+0x62>
   d8a22:	2221      	movs	r2, #33	; 0x21
   d8a24:	2104      	movs	r1, #4
   d8a26:	4620      	mov	r0, r4
   d8a28:	f000 fbd1 	bl	d91ce <_calloc_r>
   d8a2c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d8a2e:	60e8      	str	r0, [r5, #12]
   d8a30:	68db      	ldr	r3, [r3, #12]
   d8a32:	2b00      	cmp	r3, #0
   d8a34:	d1ec      	bne.n	d8a10 <_Balloc+0x20>
   d8a36:	2000      	movs	r0, #0
   d8a38:	bd70      	pop	{r4, r5, r6, pc}
   d8a3a:	2101      	movs	r1, #1
   d8a3c:	fa01 f506 	lsl.w	r5, r1, r6
   d8a40:	1d6a      	adds	r2, r5, #5
   d8a42:	0092      	lsls	r2, r2, #2
   d8a44:	4620      	mov	r0, r4
   d8a46:	f000 fbc2 	bl	d91ce <_calloc_r>
   d8a4a:	2800      	cmp	r0, #0
   d8a4c:	d0f3      	beq.n	d8a36 <_Balloc+0x46>
   d8a4e:	6046      	str	r6, [r0, #4]
   d8a50:	6085      	str	r5, [r0, #8]
   d8a52:	2300      	movs	r3, #0
   d8a54:	6103      	str	r3, [r0, #16]
   d8a56:	60c3      	str	r3, [r0, #12]
   d8a58:	bd70      	pop	{r4, r5, r6, pc}

000d8a5a <_Bfree>:
   d8a5a:	b570      	push	{r4, r5, r6, lr}
   d8a5c:	6a44      	ldr	r4, [r0, #36]	; 0x24
   d8a5e:	4606      	mov	r6, r0
   d8a60:	460d      	mov	r5, r1
   d8a62:	b93c      	cbnz	r4, d8a74 <_Bfree+0x1a>
   d8a64:	2010      	movs	r0, #16
   d8a66:	f7fc f8f1 	bl	d4c4c <malloc>
   d8a6a:	6270      	str	r0, [r6, #36]	; 0x24
   d8a6c:	6044      	str	r4, [r0, #4]
   d8a6e:	6084      	str	r4, [r0, #8]
   d8a70:	6004      	str	r4, [r0, #0]
   d8a72:	60c4      	str	r4, [r0, #12]
   d8a74:	b13d      	cbz	r5, d8a86 <_Bfree+0x2c>
   d8a76:	6a73      	ldr	r3, [r6, #36]	; 0x24
   d8a78:	686a      	ldr	r2, [r5, #4]
   d8a7a:	68db      	ldr	r3, [r3, #12]
   d8a7c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   d8a80:	6029      	str	r1, [r5, #0]
   d8a82:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   d8a86:	bd70      	pop	{r4, r5, r6, pc}

000d8a88 <__multadd>:
   d8a88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d8a8c:	690d      	ldr	r5, [r1, #16]
   d8a8e:	461f      	mov	r7, r3
   d8a90:	4606      	mov	r6, r0
   d8a92:	460c      	mov	r4, r1
   d8a94:	f101 0e14 	add.w	lr, r1, #20
   d8a98:	2300      	movs	r3, #0
   d8a9a:	f8de 0000 	ldr.w	r0, [lr]
   d8a9e:	b281      	uxth	r1, r0
   d8aa0:	fb02 7101 	mla	r1, r2, r1, r7
   d8aa4:	0c0f      	lsrs	r7, r1, #16
   d8aa6:	0c00      	lsrs	r0, r0, #16
   d8aa8:	fb02 7000 	mla	r0, r2, r0, r7
   d8aac:	b289      	uxth	r1, r1
   d8aae:	3301      	adds	r3, #1
   d8ab0:	eb01 4100 	add.w	r1, r1, r0, lsl #16
   d8ab4:	429d      	cmp	r5, r3
   d8ab6:	ea4f 4710 	mov.w	r7, r0, lsr #16
   d8aba:	f84e 1b04 	str.w	r1, [lr], #4
   d8abe:	dcec      	bgt.n	d8a9a <__multadd+0x12>
   d8ac0:	b1d7      	cbz	r7, d8af8 <__multadd+0x70>
   d8ac2:	68a3      	ldr	r3, [r4, #8]
   d8ac4:	429d      	cmp	r5, r3
   d8ac6:	db12      	blt.n	d8aee <__multadd+0x66>
   d8ac8:	6861      	ldr	r1, [r4, #4]
   d8aca:	4630      	mov	r0, r6
   d8acc:	3101      	adds	r1, #1
   d8ace:	f7ff ff8f 	bl	d89f0 <_Balloc>
   d8ad2:	6922      	ldr	r2, [r4, #16]
   d8ad4:	3202      	adds	r2, #2
   d8ad6:	f104 010c 	add.w	r1, r4, #12
   d8ada:	4680      	mov	r8, r0
   d8adc:	0092      	lsls	r2, r2, #2
   d8ade:	300c      	adds	r0, #12
   d8ae0:	f7fe f9f8 	bl	d6ed4 <memcpy>
   d8ae4:	4621      	mov	r1, r4
   d8ae6:	4630      	mov	r0, r6
   d8ae8:	f7ff ffb7 	bl	d8a5a <_Bfree>
   d8aec:	4644      	mov	r4, r8
   d8aee:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   d8af2:	3501      	adds	r5, #1
   d8af4:	615f      	str	r7, [r3, #20]
   d8af6:	6125      	str	r5, [r4, #16]
   d8af8:	4620      	mov	r0, r4
   d8afa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d8afe <__s2b>:
   d8afe:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d8b02:	460c      	mov	r4, r1
   d8b04:	4615      	mov	r5, r2
   d8b06:	461f      	mov	r7, r3
   d8b08:	2209      	movs	r2, #9
   d8b0a:	3308      	adds	r3, #8
   d8b0c:	4606      	mov	r6, r0
   d8b0e:	fb93 f3f2 	sdiv	r3, r3, r2
   d8b12:	2100      	movs	r1, #0
   d8b14:	2201      	movs	r2, #1
   d8b16:	429a      	cmp	r2, r3
   d8b18:	da02      	bge.n	d8b20 <__s2b+0x22>
   d8b1a:	0052      	lsls	r2, r2, #1
   d8b1c:	3101      	adds	r1, #1
   d8b1e:	e7fa      	b.n	d8b16 <__s2b+0x18>
   d8b20:	4630      	mov	r0, r6
   d8b22:	f7ff ff65 	bl	d89f0 <_Balloc>
   d8b26:	9b08      	ldr	r3, [sp, #32]
   d8b28:	6143      	str	r3, [r0, #20]
   d8b2a:	2d09      	cmp	r5, #9
   d8b2c:	f04f 0301 	mov.w	r3, #1
   d8b30:	6103      	str	r3, [r0, #16]
   d8b32:	dd11      	ble.n	d8b58 <__s2b+0x5a>
   d8b34:	f104 0809 	add.w	r8, r4, #9
   d8b38:	46c1      	mov	r9, r8
   d8b3a:	442c      	add	r4, r5
   d8b3c:	f819 3b01 	ldrb.w	r3, [r9], #1
   d8b40:	4601      	mov	r1, r0
   d8b42:	3b30      	subs	r3, #48	; 0x30
   d8b44:	220a      	movs	r2, #10
   d8b46:	4630      	mov	r0, r6
   d8b48:	f7ff ff9e 	bl	d8a88 <__multadd>
   d8b4c:	45a1      	cmp	r9, r4
   d8b4e:	d1f5      	bne.n	d8b3c <__s2b+0x3e>
   d8b50:	eb08 0405 	add.w	r4, r8, r5
   d8b54:	3c08      	subs	r4, #8
   d8b56:	e001      	b.n	d8b5c <__s2b+0x5e>
   d8b58:	340a      	adds	r4, #10
   d8b5a:	2509      	movs	r5, #9
   d8b5c:	1b2d      	subs	r5, r5, r4
   d8b5e:	1963      	adds	r3, r4, r5
   d8b60:	429f      	cmp	r7, r3
   d8b62:	dd08      	ble.n	d8b76 <__s2b+0x78>
   d8b64:	f814 3b01 	ldrb.w	r3, [r4], #1
   d8b68:	4601      	mov	r1, r0
   d8b6a:	3b30      	subs	r3, #48	; 0x30
   d8b6c:	220a      	movs	r2, #10
   d8b6e:	4630      	mov	r0, r6
   d8b70:	f7ff ff8a 	bl	d8a88 <__multadd>
   d8b74:	e7f3      	b.n	d8b5e <__s2b+0x60>
   d8b76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d8b7a <__hi0bits>:
   d8b7a:	0c03      	lsrs	r3, r0, #16
   d8b7c:	041b      	lsls	r3, r3, #16
   d8b7e:	b913      	cbnz	r3, d8b86 <__hi0bits+0xc>
   d8b80:	0400      	lsls	r0, r0, #16
   d8b82:	2310      	movs	r3, #16
   d8b84:	e000      	b.n	d8b88 <__hi0bits+0xe>
   d8b86:	2300      	movs	r3, #0
   d8b88:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   d8b8c:	bf04      	itt	eq
   d8b8e:	0200      	lsleq	r0, r0, #8
   d8b90:	3308      	addeq	r3, #8
   d8b92:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   d8b96:	bf04      	itt	eq
   d8b98:	0100      	lsleq	r0, r0, #4
   d8b9a:	3304      	addeq	r3, #4
   d8b9c:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   d8ba0:	bf04      	itt	eq
   d8ba2:	0080      	lsleq	r0, r0, #2
   d8ba4:	3302      	addeq	r3, #2
   d8ba6:	2800      	cmp	r0, #0
   d8ba8:	db03      	blt.n	d8bb2 <__hi0bits+0x38>
   d8baa:	0042      	lsls	r2, r0, #1
   d8bac:	d503      	bpl.n	d8bb6 <__hi0bits+0x3c>
   d8bae:	1c58      	adds	r0, r3, #1
   d8bb0:	4770      	bx	lr
   d8bb2:	4618      	mov	r0, r3
   d8bb4:	4770      	bx	lr
   d8bb6:	2020      	movs	r0, #32
   d8bb8:	4770      	bx	lr

000d8bba <__lo0bits>:
   d8bba:	6803      	ldr	r3, [r0, #0]
   d8bbc:	f013 0207 	ands.w	r2, r3, #7
   d8bc0:	d00b      	beq.n	d8bda <__lo0bits+0x20>
   d8bc2:	07d9      	lsls	r1, r3, #31
   d8bc4:	d422      	bmi.n	d8c0c <__lo0bits+0x52>
   d8bc6:	079a      	lsls	r2, r3, #30
   d8bc8:	bf4b      	itete	mi
   d8bca:	085b      	lsrmi	r3, r3, #1
   d8bcc:	089b      	lsrpl	r3, r3, #2
   d8bce:	6003      	strmi	r3, [r0, #0]
   d8bd0:	6003      	strpl	r3, [r0, #0]
   d8bd2:	bf4c      	ite	mi
   d8bd4:	2001      	movmi	r0, #1
   d8bd6:	2002      	movpl	r0, #2
   d8bd8:	4770      	bx	lr
   d8bda:	b299      	uxth	r1, r3
   d8bdc:	b909      	cbnz	r1, d8be2 <__lo0bits+0x28>
   d8bde:	0c1b      	lsrs	r3, r3, #16
   d8be0:	2210      	movs	r2, #16
   d8be2:	f013 0fff 	tst.w	r3, #255	; 0xff
   d8be6:	bf04      	itt	eq
   d8be8:	0a1b      	lsreq	r3, r3, #8
   d8bea:	3208      	addeq	r2, #8
   d8bec:	0719      	lsls	r1, r3, #28
   d8bee:	bf04      	itt	eq
   d8bf0:	091b      	lsreq	r3, r3, #4
   d8bf2:	3204      	addeq	r2, #4
   d8bf4:	0799      	lsls	r1, r3, #30
   d8bf6:	bf04      	itt	eq
   d8bf8:	089b      	lsreq	r3, r3, #2
   d8bfa:	3202      	addeq	r2, #2
   d8bfc:	07d9      	lsls	r1, r3, #31
   d8bfe:	d402      	bmi.n	d8c06 <__lo0bits+0x4c>
   d8c00:	085b      	lsrs	r3, r3, #1
   d8c02:	d005      	beq.n	d8c10 <__lo0bits+0x56>
   d8c04:	3201      	adds	r2, #1
   d8c06:	6003      	str	r3, [r0, #0]
   d8c08:	4610      	mov	r0, r2
   d8c0a:	4770      	bx	lr
   d8c0c:	2000      	movs	r0, #0
   d8c0e:	4770      	bx	lr
   d8c10:	2020      	movs	r0, #32
   d8c12:	4770      	bx	lr

000d8c14 <__i2b>:
   d8c14:	b510      	push	{r4, lr}
   d8c16:	460c      	mov	r4, r1
   d8c18:	2101      	movs	r1, #1
   d8c1a:	f7ff fee9 	bl	d89f0 <_Balloc>
   d8c1e:	2201      	movs	r2, #1
   d8c20:	6144      	str	r4, [r0, #20]
   d8c22:	6102      	str	r2, [r0, #16]
   d8c24:	bd10      	pop	{r4, pc}

000d8c26 <__multiply>:
   d8c26:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8c2a:	4614      	mov	r4, r2
   d8c2c:	690a      	ldr	r2, [r1, #16]
   d8c2e:	6923      	ldr	r3, [r4, #16]
   d8c30:	429a      	cmp	r2, r3
   d8c32:	bfb8      	it	lt
   d8c34:	460b      	movlt	r3, r1
   d8c36:	4688      	mov	r8, r1
   d8c38:	bfbc      	itt	lt
   d8c3a:	46a0      	movlt	r8, r4
   d8c3c:	461c      	movlt	r4, r3
   d8c3e:	f8d8 7010 	ldr.w	r7, [r8, #16]
   d8c42:	f8d4 9010 	ldr.w	r9, [r4, #16]
   d8c46:	f8d8 3008 	ldr.w	r3, [r8, #8]
   d8c4a:	f8d8 1004 	ldr.w	r1, [r8, #4]
   d8c4e:	eb07 0609 	add.w	r6, r7, r9
   d8c52:	429e      	cmp	r6, r3
   d8c54:	bfc8      	it	gt
   d8c56:	3101      	addgt	r1, #1
   d8c58:	f7ff feca 	bl	d89f0 <_Balloc>
   d8c5c:	f100 0514 	add.w	r5, r0, #20
   d8c60:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
   d8c64:	462b      	mov	r3, r5
   d8c66:	2200      	movs	r2, #0
   d8c68:	4563      	cmp	r3, ip
   d8c6a:	d202      	bcs.n	d8c72 <__multiply+0x4c>
   d8c6c:	f843 2b04 	str.w	r2, [r3], #4
   d8c70:	e7fa      	b.n	d8c68 <__multiply+0x42>
   d8c72:	f104 0214 	add.w	r2, r4, #20
   d8c76:	f108 0114 	add.w	r1, r8, #20
   d8c7a:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   d8c7e:	eb01 0787 	add.w	r7, r1, r7, lsl #2
   d8c82:	9300      	str	r3, [sp, #0]
   d8c84:	9b00      	ldr	r3, [sp, #0]
   d8c86:	9201      	str	r2, [sp, #4]
   d8c88:	4293      	cmp	r3, r2
   d8c8a:	d957      	bls.n	d8d3c <__multiply+0x116>
   d8c8c:	f8b2 b000 	ldrh.w	fp, [r2]
   d8c90:	f1bb 0f00 	cmp.w	fp, #0
   d8c94:	d023      	beq.n	d8cde <__multiply+0xb8>
   d8c96:	4689      	mov	r9, r1
   d8c98:	46ae      	mov	lr, r5
   d8c9a:	f04f 0800 	mov.w	r8, #0
   d8c9e:	f859 4b04 	ldr.w	r4, [r9], #4
   d8ca2:	f8be a000 	ldrh.w	sl, [lr]
   d8ca6:	b2a3      	uxth	r3, r4
   d8ca8:	fb0b a303 	mla	r3, fp, r3, sl
   d8cac:	ea4f 4a14 	mov.w	sl, r4, lsr #16
   d8cb0:	f8de 4000 	ldr.w	r4, [lr]
   d8cb4:	4443      	add	r3, r8
   d8cb6:	ea4f 4814 	mov.w	r8, r4, lsr #16
   d8cba:	fb0b 840a 	mla	r4, fp, sl, r8
   d8cbe:	eb04 4413 	add.w	r4, r4, r3, lsr #16
   d8cc2:	46f2      	mov	sl, lr
   d8cc4:	b29b      	uxth	r3, r3
   d8cc6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
   d8cca:	454f      	cmp	r7, r9
   d8ccc:	ea4f 4814 	mov.w	r8, r4, lsr #16
   d8cd0:	f84a 3b04 	str.w	r3, [sl], #4
   d8cd4:	d901      	bls.n	d8cda <__multiply+0xb4>
   d8cd6:	46d6      	mov	lr, sl
   d8cd8:	e7e1      	b.n	d8c9e <__multiply+0x78>
   d8cda:	f8ce 8004 	str.w	r8, [lr, #4]
   d8cde:	9b01      	ldr	r3, [sp, #4]
   d8ce0:	f8b3 a002 	ldrh.w	sl, [r3, #2]
   d8ce4:	3204      	adds	r2, #4
   d8ce6:	f1ba 0f00 	cmp.w	sl, #0
   d8cea:	d021      	beq.n	d8d30 <__multiply+0x10a>
   d8cec:	682b      	ldr	r3, [r5, #0]
   d8cee:	462c      	mov	r4, r5
   d8cf0:	4689      	mov	r9, r1
   d8cf2:	f04f 0800 	mov.w	r8, #0
   d8cf6:	f8b9 e000 	ldrh.w	lr, [r9]
   d8cfa:	f8b4 b002 	ldrh.w	fp, [r4, #2]
   d8cfe:	fb0a be0e 	mla	lr, sl, lr, fp
   d8d02:	44f0      	add	r8, lr
   d8d04:	46a3      	mov	fp, r4
   d8d06:	b29b      	uxth	r3, r3
   d8d08:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   d8d0c:	f84b 3b04 	str.w	r3, [fp], #4
   d8d10:	f859 3b04 	ldr.w	r3, [r9], #4
   d8d14:	f8b4 e004 	ldrh.w	lr, [r4, #4]
   d8d18:	0c1b      	lsrs	r3, r3, #16
   d8d1a:	fb0a e303 	mla	r3, sl, r3, lr
   d8d1e:	eb03 4318 	add.w	r3, r3, r8, lsr #16
   d8d22:	454f      	cmp	r7, r9
   d8d24:	ea4f 4813 	mov.w	r8, r3, lsr #16
   d8d28:	d901      	bls.n	d8d2e <__multiply+0x108>
   d8d2a:	465c      	mov	r4, fp
   d8d2c:	e7e3      	b.n	d8cf6 <__multiply+0xd0>
   d8d2e:	6063      	str	r3, [r4, #4]
   d8d30:	3504      	adds	r5, #4
   d8d32:	e7a7      	b.n	d8c84 <__multiply+0x5e>
   d8d34:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
   d8d38:	b913      	cbnz	r3, d8d40 <__multiply+0x11a>
   d8d3a:	3e01      	subs	r6, #1
   d8d3c:	2e00      	cmp	r6, #0
   d8d3e:	dcf9      	bgt.n	d8d34 <__multiply+0x10e>
   d8d40:	6106      	str	r6, [r0, #16]
   d8d42:	b003      	add	sp, #12
   d8d44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d8d48 <__pow5mult>:
   d8d48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d8d4c:	4615      	mov	r5, r2
   d8d4e:	f012 0203 	ands.w	r2, r2, #3
   d8d52:	4606      	mov	r6, r0
   d8d54:	460f      	mov	r7, r1
   d8d56:	d007      	beq.n	d8d68 <__pow5mult+0x20>
   d8d58:	3a01      	subs	r2, #1
   d8d5a:	4c21      	ldr	r4, [pc, #132]	; (d8de0 <__pow5mult+0x98>)
   d8d5c:	2300      	movs	r3, #0
   d8d5e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   d8d62:	f7ff fe91 	bl	d8a88 <__multadd>
   d8d66:	4607      	mov	r7, r0
   d8d68:	10ad      	asrs	r5, r5, #2
   d8d6a:	d036      	beq.n	d8dda <__pow5mult+0x92>
   d8d6c:	6a74      	ldr	r4, [r6, #36]	; 0x24
   d8d6e:	b93c      	cbnz	r4, d8d80 <__pow5mult+0x38>
   d8d70:	2010      	movs	r0, #16
   d8d72:	f7fb ff6b 	bl	d4c4c <malloc>
   d8d76:	6270      	str	r0, [r6, #36]	; 0x24
   d8d78:	6044      	str	r4, [r0, #4]
   d8d7a:	6084      	str	r4, [r0, #8]
   d8d7c:	6004      	str	r4, [r0, #0]
   d8d7e:	60c4      	str	r4, [r0, #12]
   d8d80:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   d8d84:	f8d8 4008 	ldr.w	r4, [r8, #8]
   d8d88:	b94c      	cbnz	r4, d8d9e <__pow5mult+0x56>
   d8d8a:	f240 2171 	movw	r1, #625	; 0x271
   d8d8e:	4630      	mov	r0, r6
   d8d90:	f7ff ff40 	bl	d8c14 <__i2b>
   d8d94:	2300      	movs	r3, #0
   d8d96:	f8c8 0008 	str.w	r0, [r8, #8]
   d8d9a:	4604      	mov	r4, r0
   d8d9c:	6003      	str	r3, [r0, #0]
   d8d9e:	f04f 0800 	mov.w	r8, #0
   d8da2:	07eb      	lsls	r3, r5, #31
   d8da4:	d50a      	bpl.n	d8dbc <__pow5mult+0x74>
   d8da6:	4639      	mov	r1, r7
   d8da8:	4622      	mov	r2, r4
   d8daa:	4630      	mov	r0, r6
   d8dac:	f7ff ff3b 	bl	d8c26 <__multiply>
   d8db0:	4639      	mov	r1, r7
   d8db2:	4681      	mov	r9, r0
   d8db4:	4630      	mov	r0, r6
   d8db6:	f7ff fe50 	bl	d8a5a <_Bfree>
   d8dba:	464f      	mov	r7, r9
   d8dbc:	106d      	asrs	r5, r5, #1
   d8dbe:	d00c      	beq.n	d8dda <__pow5mult+0x92>
   d8dc0:	6820      	ldr	r0, [r4, #0]
   d8dc2:	b108      	cbz	r0, d8dc8 <__pow5mult+0x80>
   d8dc4:	4604      	mov	r4, r0
   d8dc6:	e7ec      	b.n	d8da2 <__pow5mult+0x5a>
   d8dc8:	4622      	mov	r2, r4
   d8dca:	4621      	mov	r1, r4
   d8dcc:	4630      	mov	r0, r6
   d8dce:	f7ff ff2a 	bl	d8c26 <__multiply>
   d8dd2:	6020      	str	r0, [r4, #0]
   d8dd4:	f8c0 8000 	str.w	r8, [r0]
   d8dd8:	e7f4      	b.n	d8dc4 <__pow5mult+0x7c>
   d8dda:	4638      	mov	r0, r7
   d8ddc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d8de0:	000d9b90 	.word	0x000d9b90

000d8de4 <__lshift>:
   d8de4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d8de8:	460c      	mov	r4, r1
   d8dea:	ea4f 1a62 	mov.w	sl, r2, asr #5
   d8dee:	6926      	ldr	r6, [r4, #16]
   d8df0:	6849      	ldr	r1, [r1, #4]
   d8df2:	68a3      	ldr	r3, [r4, #8]
   d8df4:	4456      	add	r6, sl
   d8df6:	4607      	mov	r7, r0
   d8df8:	4691      	mov	r9, r2
   d8dfa:	1c75      	adds	r5, r6, #1
   d8dfc:	42ab      	cmp	r3, r5
   d8dfe:	da02      	bge.n	d8e06 <__lshift+0x22>
   d8e00:	3101      	adds	r1, #1
   d8e02:	005b      	lsls	r3, r3, #1
   d8e04:	e7fa      	b.n	d8dfc <__lshift+0x18>
   d8e06:	4638      	mov	r0, r7
   d8e08:	f7ff fdf2 	bl	d89f0 <_Balloc>
   d8e0c:	2300      	movs	r3, #0
   d8e0e:	4680      	mov	r8, r0
   d8e10:	f100 0114 	add.w	r1, r0, #20
   d8e14:	461a      	mov	r2, r3
   d8e16:	4553      	cmp	r3, sl
   d8e18:	da03      	bge.n	d8e22 <__lshift+0x3e>
   d8e1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   d8e1e:	3301      	adds	r3, #1
   d8e20:	e7f9      	b.n	d8e16 <__lshift+0x32>
   d8e22:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
   d8e26:	6920      	ldr	r0, [r4, #16]
   d8e28:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   d8e2c:	f019 091f 	ands.w	r9, r9, #31
   d8e30:	f104 0114 	add.w	r1, r4, #20
   d8e34:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
   d8e38:	d014      	beq.n	d8e64 <__lshift+0x80>
   d8e3a:	f1c9 0c20 	rsb	ip, r9, #32
   d8e3e:	2200      	movs	r2, #0
   d8e40:	6808      	ldr	r0, [r1, #0]
   d8e42:	fa00 f009 	lsl.w	r0, r0, r9
   d8e46:	4302      	orrs	r2, r0
   d8e48:	469a      	mov	sl, r3
   d8e4a:	f843 2b04 	str.w	r2, [r3], #4
   d8e4e:	f851 2b04 	ldr.w	r2, [r1], #4
   d8e52:	458e      	cmp	lr, r1
   d8e54:	fa22 f20c 	lsr.w	r2, r2, ip
   d8e58:	d8f2      	bhi.n	d8e40 <__lshift+0x5c>
   d8e5a:	f8ca 2004 	str.w	r2, [sl, #4]
   d8e5e:	b142      	cbz	r2, d8e72 <__lshift+0x8e>
   d8e60:	1cb5      	adds	r5, r6, #2
   d8e62:	e006      	b.n	d8e72 <__lshift+0x8e>
   d8e64:	3b04      	subs	r3, #4
   d8e66:	f851 2b04 	ldr.w	r2, [r1], #4
   d8e6a:	f843 2f04 	str.w	r2, [r3, #4]!
   d8e6e:	458e      	cmp	lr, r1
   d8e70:	d8f9      	bhi.n	d8e66 <__lshift+0x82>
   d8e72:	3d01      	subs	r5, #1
   d8e74:	4638      	mov	r0, r7
   d8e76:	f8c8 5010 	str.w	r5, [r8, #16]
   d8e7a:	4621      	mov	r1, r4
   d8e7c:	f7ff fded 	bl	d8a5a <_Bfree>
   d8e80:	4640      	mov	r0, r8
   d8e82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d8e86 <__mcmp>:
   d8e86:	6903      	ldr	r3, [r0, #16]
   d8e88:	690a      	ldr	r2, [r1, #16]
   d8e8a:	1a9b      	subs	r3, r3, r2
   d8e8c:	b510      	push	{r4, lr}
   d8e8e:	d111      	bne.n	d8eb4 <__mcmp+0x2e>
   d8e90:	0092      	lsls	r2, r2, #2
   d8e92:	3014      	adds	r0, #20
   d8e94:	3114      	adds	r1, #20
   d8e96:	1883      	adds	r3, r0, r2
   d8e98:	440a      	add	r2, r1
   d8e9a:	f853 4d04 	ldr.w	r4, [r3, #-4]!
   d8e9e:	f852 1d04 	ldr.w	r1, [r2, #-4]!
   d8ea2:	428c      	cmp	r4, r1
   d8ea4:	d002      	beq.n	d8eac <__mcmp+0x26>
   d8ea6:	d307      	bcc.n	d8eb8 <__mcmp+0x32>
   d8ea8:	2001      	movs	r0, #1
   d8eaa:	bd10      	pop	{r4, pc}
   d8eac:	4298      	cmp	r0, r3
   d8eae:	d3f4      	bcc.n	d8e9a <__mcmp+0x14>
   d8eb0:	2000      	movs	r0, #0
   d8eb2:	bd10      	pop	{r4, pc}
   d8eb4:	4618      	mov	r0, r3
   d8eb6:	bd10      	pop	{r4, pc}
   d8eb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d8ebc:	bd10      	pop	{r4, pc}

000d8ebe <__mdiff>:
   d8ebe:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d8ec2:	460c      	mov	r4, r1
   d8ec4:	4607      	mov	r7, r0
   d8ec6:	4611      	mov	r1, r2
   d8ec8:	4620      	mov	r0, r4
   d8eca:	4615      	mov	r5, r2
   d8ecc:	f7ff ffdb 	bl	d8e86 <__mcmp>
   d8ed0:	1e06      	subs	r6, r0, #0
   d8ed2:	d108      	bne.n	d8ee6 <__mdiff+0x28>
   d8ed4:	4631      	mov	r1, r6
   d8ed6:	4638      	mov	r0, r7
   d8ed8:	f7ff fd8a 	bl	d89f0 <_Balloc>
   d8edc:	2301      	movs	r3, #1
   d8ede:	6103      	str	r3, [r0, #16]
   d8ee0:	6146      	str	r6, [r0, #20]
   d8ee2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d8ee6:	bfbc      	itt	lt
   d8ee8:	4623      	movlt	r3, r4
   d8eea:	462c      	movlt	r4, r5
   d8eec:	4638      	mov	r0, r7
   d8eee:	6861      	ldr	r1, [r4, #4]
   d8ef0:	bfba      	itte	lt
   d8ef2:	461d      	movlt	r5, r3
   d8ef4:	2601      	movlt	r6, #1
   d8ef6:	2600      	movge	r6, #0
   d8ef8:	f7ff fd7a 	bl	d89f0 <_Balloc>
   d8efc:	692b      	ldr	r3, [r5, #16]
   d8efe:	60c6      	str	r6, [r0, #12]
   d8f00:	6926      	ldr	r6, [r4, #16]
   d8f02:	f105 0914 	add.w	r9, r5, #20
   d8f06:	3414      	adds	r4, #20
   d8f08:	eb04 0786 	add.w	r7, r4, r6, lsl #2
   d8f0c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
   d8f10:	f100 0514 	add.w	r5, r0, #20
   d8f14:	f04f 0c00 	mov.w	ip, #0
   d8f18:	f854 3b04 	ldr.w	r3, [r4], #4
   d8f1c:	f859 2b04 	ldr.w	r2, [r9], #4
   d8f20:	fa1c f183 	uxtah	r1, ip, r3
   d8f24:	fa1f fe82 	uxth.w	lr, r2
   d8f28:	0c12      	lsrs	r2, r2, #16
   d8f2a:	ebce 0101 	rsb	r1, lr, r1
   d8f2e:	ebc2 4313 	rsb	r3, r2, r3, lsr #16
   d8f32:	eb03 4321 	add.w	r3, r3, r1, asr #16
   d8f36:	b289      	uxth	r1, r1
   d8f38:	ea4f 4c23 	mov.w	ip, r3, asr #16
   d8f3c:	45c8      	cmp	r8, r9
   d8f3e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
   d8f42:	46a6      	mov	lr, r4
   d8f44:	f845 3b04 	str.w	r3, [r5], #4
   d8f48:	d8e6      	bhi.n	d8f18 <__mdiff+0x5a>
   d8f4a:	45be      	cmp	lr, r7
   d8f4c:	d20e      	bcs.n	d8f6c <__mdiff+0xae>
   d8f4e:	f85e 1b04 	ldr.w	r1, [lr], #4
   d8f52:	fa1c f281 	uxtah	r2, ip, r1
   d8f56:	1413      	asrs	r3, r2, #16
   d8f58:	eb03 4311 	add.w	r3, r3, r1, lsr #16
   d8f5c:	b292      	uxth	r2, r2
   d8f5e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   d8f62:	ea4f 4c23 	mov.w	ip, r3, asr #16
   d8f66:	f845 2b04 	str.w	r2, [r5], #4
   d8f6a:	e7ee      	b.n	d8f4a <__mdiff+0x8c>
   d8f6c:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   d8f70:	b90b      	cbnz	r3, d8f76 <__mdiff+0xb8>
   d8f72:	3e01      	subs	r6, #1
   d8f74:	e7fa      	b.n	d8f6c <__mdiff+0xae>
   d8f76:	6106      	str	r6, [r0, #16]
   d8f78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d8f7c <__ulp>:
   d8f7c:	4b12      	ldr	r3, [pc, #72]	; (d8fc8 <__ulp+0x4c>)
   d8f7e:	ee10 2a90 	vmov	r2, s1
   d8f82:	401a      	ands	r2, r3
   d8f84:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
   d8f88:	2b00      	cmp	r3, #0
   d8f8a:	dd02      	ble.n	d8f92 <__ulp+0x16>
   d8f8c:	2000      	movs	r0, #0
   d8f8e:	4619      	mov	r1, r3
   d8f90:	e017      	b.n	d8fc2 <__ulp+0x46>
   d8f92:	425b      	negs	r3, r3
   d8f94:	151b      	asrs	r3, r3, #20
   d8f96:	2b13      	cmp	r3, #19
   d8f98:	f04f 0000 	mov.w	r0, #0
   d8f9c:	f04f 0100 	mov.w	r1, #0
   d8fa0:	dc04      	bgt.n	d8fac <__ulp+0x30>
   d8fa2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   d8fa6:	fa42 f103 	asr.w	r1, r2, r3
   d8faa:	e00a      	b.n	d8fc2 <__ulp+0x46>
   d8fac:	3b14      	subs	r3, #20
   d8fae:	2b1e      	cmp	r3, #30
   d8fb0:	f04f 0201 	mov.w	r2, #1
   d8fb4:	bfda      	itte	le
   d8fb6:	f1c3 031f 	rsble	r3, r3, #31
   d8fba:	fa02 f303 	lslle.w	r3, r2, r3
   d8fbe:	4613      	movgt	r3, r2
   d8fc0:	4618      	mov	r0, r3
   d8fc2:	ec41 0b10 	vmov	d0, r0, r1
   d8fc6:	4770      	bx	lr
   d8fc8:	7ff00000 	.word	0x7ff00000

000d8fcc <__b2d>:
   d8fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8fce:	6905      	ldr	r5, [r0, #16]
   d8fd0:	f100 0614 	add.w	r6, r0, #20
   d8fd4:	eb06 0585 	add.w	r5, r6, r5, lsl #2
   d8fd8:	1f2f      	subs	r7, r5, #4
   d8fda:	f855 4c04 	ldr.w	r4, [r5, #-4]
   d8fde:	4620      	mov	r0, r4
   d8fe0:	f7ff fdcb 	bl	d8b7a <__hi0bits>
   d8fe4:	f1c0 0320 	rsb	r3, r0, #32
   d8fe8:	280a      	cmp	r0, #10
   d8fea:	600b      	str	r3, [r1, #0]
   d8fec:	dc14      	bgt.n	d9018 <__b2d+0x4c>
   d8fee:	f1c0 0e0b 	rsb	lr, r0, #11
   d8ff2:	fa24 f10e 	lsr.w	r1, r4, lr
   d8ff6:	42be      	cmp	r6, r7
   d8ff8:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
   d8ffc:	bf34      	ite	cc
   d8ffe:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   d9002:	2100      	movcs	r1, #0
   d9004:	3015      	adds	r0, #21
   d9006:	fa04 f000 	lsl.w	r0, r4, r0
   d900a:	fa21 f10e 	lsr.w	r1, r1, lr
   d900e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   d9012:	ea40 0201 	orr.w	r2, r0, r1
   d9016:	e023      	b.n	d9060 <__b2d+0x94>
   d9018:	42be      	cmp	r6, r7
   d901a:	bf3a      	itte	cc
   d901c:	f1a5 0708 	subcc.w	r7, r5, #8
   d9020:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   d9024:	2100      	movcs	r1, #0
   d9026:	380b      	subs	r0, #11
   d9028:	d015      	beq.n	d9056 <__b2d+0x8a>
   d902a:	4084      	lsls	r4, r0
   d902c:	f1c0 0520 	rsb	r5, r0, #32
   d9030:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
   d9034:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
   d9038:	42b7      	cmp	r7, r6
   d903a:	fa21 fe05 	lsr.w	lr, r1, r5
   d903e:	ea44 030e 	orr.w	r3, r4, lr
   d9042:	bf8c      	ite	hi
   d9044:	f857 4c04 	ldrhi.w	r4, [r7, #-4]
   d9048:	2400      	movls	r4, #0
   d904a:	fa01 f000 	lsl.w	r0, r1, r0
   d904e:	40ec      	lsrs	r4, r5
   d9050:	ea40 0204 	orr.w	r2, r0, r4
   d9054:	e004      	b.n	d9060 <__b2d+0x94>
   d9056:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
   d905a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   d905e:	460a      	mov	r2, r1
   d9060:	ec43 2b10 	vmov	d0, r2, r3
   d9064:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d9066 <__d2b>:
   d9066:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d906a:	460e      	mov	r6, r1
   d906c:	2101      	movs	r1, #1
   d906e:	ec59 8b10 	vmov	r8, r9, d0
   d9072:	4615      	mov	r5, r2
   d9074:	f7ff fcbc 	bl	d89f0 <_Balloc>
   d9078:	f3c9 540a 	ubfx	r4, r9, #20, #11
   d907c:	4607      	mov	r7, r0
   d907e:	f3c9 0313 	ubfx	r3, r9, #0, #20
   d9082:	b10c      	cbz	r4, d9088 <__d2b+0x22>
   d9084:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d9088:	9301      	str	r3, [sp, #4]
   d908a:	f1b8 0f00 	cmp.w	r8, #0
   d908e:	d019      	beq.n	d90c4 <__d2b+0x5e>
   d9090:	a802      	add	r0, sp, #8
   d9092:	f840 8d08 	str.w	r8, [r0, #-8]!
   d9096:	f7ff fd90 	bl	d8bba <__lo0bits>
   d909a:	9b00      	ldr	r3, [sp, #0]
   d909c:	b148      	cbz	r0, d90b2 <__d2b+0x4c>
   d909e:	9a01      	ldr	r2, [sp, #4]
   d90a0:	f1c0 0120 	rsb	r1, r0, #32
   d90a4:	fa02 f101 	lsl.w	r1, r2, r1
   d90a8:	430b      	orrs	r3, r1
   d90aa:	40c2      	lsrs	r2, r0
   d90ac:	617b      	str	r3, [r7, #20]
   d90ae:	9201      	str	r2, [sp, #4]
   d90b0:	e000      	b.n	d90b4 <__d2b+0x4e>
   d90b2:	617b      	str	r3, [r7, #20]
   d90b4:	9b01      	ldr	r3, [sp, #4]
   d90b6:	61bb      	str	r3, [r7, #24]
   d90b8:	2b00      	cmp	r3, #0
   d90ba:	bf14      	ite	ne
   d90bc:	2102      	movne	r1, #2
   d90be:	2101      	moveq	r1, #1
   d90c0:	6139      	str	r1, [r7, #16]
   d90c2:	e007      	b.n	d90d4 <__d2b+0x6e>
   d90c4:	a801      	add	r0, sp, #4
   d90c6:	f7ff fd78 	bl	d8bba <__lo0bits>
   d90ca:	9b01      	ldr	r3, [sp, #4]
   d90cc:	617b      	str	r3, [r7, #20]
   d90ce:	2101      	movs	r1, #1
   d90d0:	6139      	str	r1, [r7, #16]
   d90d2:	3020      	adds	r0, #32
   d90d4:	b134      	cbz	r4, d90e4 <__d2b+0x7e>
   d90d6:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
   d90da:	4404      	add	r4, r0
   d90dc:	6034      	str	r4, [r6, #0]
   d90de:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   d90e2:	e009      	b.n	d90f8 <__d2b+0x92>
   d90e4:	eb07 0381 	add.w	r3, r7, r1, lsl #2
   d90e8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   d90ec:	6030      	str	r0, [r6, #0]
   d90ee:	6918      	ldr	r0, [r3, #16]
   d90f0:	f7ff fd43 	bl	d8b7a <__hi0bits>
   d90f4:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
   d90f8:	6028      	str	r0, [r5, #0]
   d90fa:	4638      	mov	r0, r7
   d90fc:	b003      	add	sp, #12
   d90fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d9102 <__ratio>:
   d9102:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d9106:	4688      	mov	r8, r1
   d9108:	4669      	mov	r1, sp
   d910a:	4681      	mov	r9, r0
   d910c:	f7ff ff5e 	bl	d8fcc <__b2d>
   d9110:	a901      	add	r1, sp, #4
   d9112:	4640      	mov	r0, r8
   d9114:	ec55 4b10 	vmov	r4, r5, d0
   d9118:	f7ff ff58 	bl	d8fcc <__b2d>
   d911c:	f8d9 3010 	ldr.w	r3, [r9, #16]
   d9120:	f8d8 2010 	ldr.w	r2, [r8, #16]
   d9124:	1a9a      	subs	r2, r3, r2
   d9126:	e89d 000a 	ldmia.w	sp, {r1, r3}
   d912a:	1ac9      	subs	r1, r1, r3
   d912c:	ec57 6b10 	vmov	r6, r7, d0
   d9130:	eb01 1342 	add.w	r3, r1, r2, lsl #5
   d9134:	2b00      	cmp	r3, #0
   d9136:	bfcc      	ite	gt
   d9138:	eb05 5503 	addgt.w	r5, r5, r3, lsl #20
   d913c:	eba7 5703 	suble.w	r7, r7, r3, lsl #20
   d9140:	4632      	mov	r2, r6
   d9142:	463b      	mov	r3, r7
   d9144:	4620      	mov	r0, r4
   d9146:	4629      	mov	r1, r5
   d9148:	f7fd fbae 	bl	d68a8 <__aeabi_ddiv>
   d914c:	ec41 0b10 	vmov	d0, r0, r1
   d9150:	b003      	add	sp, #12
   d9152:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d9156 <__copybits>:
   d9156:	3901      	subs	r1, #1
   d9158:	b510      	push	{r4, lr}
   d915a:	1149      	asrs	r1, r1, #5
   d915c:	6914      	ldr	r4, [r2, #16]
   d915e:	3101      	adds	r1, #1
   d9160:	f102 0314 	add.w	r3, r2, #20
   d9164:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   d9168:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   d916c:	42a3      	cmp	r3, r4
   d916e:	4602      	mov	r2, r0
   d9170:	d204      	bcs.n	d917c <__copybits+0x26>
   d9172:	f853 2b04 	ldr.w	r2, [r3], #4
   d9176:	f840 2b04 	str.w	r2, [r0], #4
   d917a:	e7f7      	b.n	d916c <__copybits+0x16>
   d917c:	2300      	movs	r3, #0
   d917e:	428a      	cmp	r2, r1
   d9180:	d202      	bcs.n	d9188 <__copybits+0x32>
   d9182:	f842 3b04 	str.w	r3, [r2], #4
   d9186:	e7fa      	b.n	d917e <__copybits+0x28>
   d9188:	bd10      	pop	{r4, pc}

000d918a <__any_on>:
   d918a:	f100 0214 	add.w	r2, r0, #20
   d918e:	6900      	ldr	r0, [r0, #16]
   d9190:	114b      	asrs	r3, r1, #5
   d9192:	4298      	cmp	r0, r3
   d9194:	b510      	push	{r4, lr}
   d9196:	db0c      	blt.n	d91b2 <__any_on+0x28>
   d9198:	dd0c      	ble.n	d91b4 <__any_on+0x2a>
   d919a:	f011 011f 	ands.w	r1, r1, #31
   d919e:	d009      	beq.n	d91b4 <__any_on+0x2a>
   d91a0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   d91a4:	fa24 f001 	lsr.w	r0, r4, r1
   d91a8:	fa00 f101 	lsl.w	r1, r0, r1
   d91ac:	428c      	cmp	r4, r1
   d91ae:	d10c      	bne.n	d91ca <__any_on+0x40>
   d91b0:	e000      	b.n	d91b4 <__any_on+0x2a>
   d91b2:	4603      	mov	r3, r0
   d91b4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   d91b8:	4293      	cmp	r3, r2
   d91ba:	d904      	bls.n	d91c6 <__any_on+0x3c>
   d91bc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   d91c0:	2900      	cmp	r1, #0
   d91c2:	d0f9      	beq.n	d91b8 <__any_on+0x2e>
   d91c4:	e001      	b.n	d91ca <__any_on+0x40>
   d91c6:	2000      	movs	r0, #0
   d91c8:	bd10      	pop	{r4, pc}
   d91ca:	2001      	movs	r0, #1
   d91cc:	bd10      	pop	{r4, pc}

000d91ce <_calloc_r>:
   d91ce:	b538      	push	{r3, r4, r5, lr}
   d91d0:	fb02 f401 	mul.w	r4, r2, r1
   d91d4:	4621      	mov	r1, r4
   d91d6:	f7fb fd71 	bl	d4cbc <_malloc_r>
   d91da:	4605      	mov	r5, r0
   d91dc:	b118      	cbz	r0, d91e6 <_calloc_r+0x18>
   d91de:	4622      	mov	r2, r4
   d91e0:	2100      	movs	r1, #0
   d91e2:	f7fd fe82 	bl	d6eea <memset>
   d91e6:	4628      	mov	r0, r5
   d91e8:	bd38      	pop	{r3, r4, r5, pc}

000d91ea <__env_lock>:
   d91ea:	4770      	bx	lr

000d91ec <__env_unlock>:
   d91ec:	4770      	bx	lr

000d91ee <link_code_end>:
	...

000d91f0 <dynalib_user>:
   d91f0:	4021 000d 405d 000d 4089 000d 408d 000d     !@..]@...@...@..
   d9200:	0000 0000 5047 2053 3176 332e 6400 7665     ....GPS v1.3.dev
   d9210:	6369 4c65 636f 7461 726f 0000                    iceLocator.

000d921b <_ZL9BasicFont>:
	...
   d9223:	0000 005f 0000 0000 0000 0007 0007 0000     .._.............
   d9233:	1400 147f 147f 0000 2400 7f2a 122a 0000     .........$*.*...
   d9243:	2300 0813 6264 0000 3600 5549 5022 0000     .#..db...6IU"P..
   d9253:	0000 0305 0000 0000 1c00 4122 0000 0000     .........."A....
   d9263:	4100 1c22 0000 0000 0800 1c2a 082a 0000     .A".......*.*...
   d9273:	0800 3e08 0808 0000 a000 0060 0000 0000     ...>......`.....
   d9283:	0800 0808 0808 0000 6000 0060 0000 0000     .........``.....
   d9293:	2000 0810 0204 0000 3e00 4951 3e45 0000     . .......>QIE>..
   d92a3:	0000 7f42 0040 0000 6200 4951 4649 0000     ..B.@....bQIIF..
   d92b3:	2200 4941 3649 0000 1800 1214 107f 0000     ."AII6..........
   d92c3:	2700 4545 3945 0000 3c00 494a 3049 0000     .'EEE9...<JII0..
   d92d3:	0100 0971 0305 0000 3600 4949 3649 0000     ..q......6III6..
   d92e3:	0600 4949 1e29 0000 0000 3636 0000 0000     ..II).....66....
   d92f3:	0000 6cac 0000 0000 0800 2214 0041 0000     ...l......."A...
   d9303:	1400 1414 1414 0000 4100 1422 0008 0000     .........A".....
   d9313:	0200 5101 0609 0000 3200 7949 3e41 0000     ...Q.....2IyA>..
   d9323:	7e00 0909 7e09 0000 7f00 4949 3649 0000     .~...~....III6..
   d9333:	3e00 4141 2241 0000 7f00 4141 1c22 0000     .>AAA"....AA"...
   d9343:	7f00 4949 4149 0000 7f00 0909 0109 0000     ..IIIA..........
   d9353:	3e00 4141 7251 0000 7f00 0808 7f08 0000     .>AAQr..........
   d9363:	4100 417f 0000 0000 2000 4140 013f 0000     .A.A..... @A?...
   d9373:	7f00 1408 4122 0000 7f00 4040 4040 0000     ...."A....@@@@..
   d9383:	7f00 0c02 7f02 0000 7f00 0804 7f10 0000     ................
   d9393:	3e00 4141 3e41 0000 7f00 0909 0609 0000     .>AAA>..........
   d93a3:	3e00 5141 5e21 0000 7f00 1909 4629 0000     .>AQ!^......)F..
   d93b3:	2600 4949 3249 0000 0100 7f01 0101 0000     .&III2..........
   d93c3:	3f00 4040 3f40 0000 1f00 4020 1f20 0000     .?@@@?.... @ ...
   d93d3:	3f00 3840 3f40 0000 6300 0814 6314 0000     .?@8@?...c...c..
   d93e3:	0300 7804 0304 0000 6100 4951 4345 0000     ...x.....aQIEC..
   d93f3:	7f00 4141 0000 0000 0200 0804 2010 0000     ..AA......... ..
   d9403:	4100 7f41 0000 0000 0400 0102 0402 0000     .AA.............
   d9413:	8000 8080 8080 0000 0100 0402 0000 0000     ................
   d9423:	2000 5454 7854 0000 7f00 4448 3844 0000     . TTTx....HDD8..
   d9433:	3800 4444 0028 0000 3800 4444 7f48 0000     .8DD(....8DDH...
   d9443:	3800 5454 1854 0000 0800 097e 0002 0000     .8TTT.....~.....
   d9453:	1800 a4a4 7ca4 0000 7f00 0408 7804 0000     .....|.......x..
   d9463:	0000 007d 0000 0000 8000 7d84 0000 0000     ..}........}....
   d9473:	7f00 2810 0044 0000 4100 407f 0000 0000     ...(D....A.@....
   d9483:	7c00 1804 7804 0000 7c00 0408 007c 0000     .|...x...|..|...
   d9493:	3800 4444 0038 0000 fc00 2424 0018 0000     .8DD8.....$$....
   d94a3:	1800 2424 00fc 0000 0000 087c 0004 0000     ..$$......|.....
   d94b3:	4800 5454 0024 0000 0400 447f 0000 0000     .HTT$......D....
   d94c3:	3c00 4040 007c 0000 1c00 4020 1c20 0000     .<@@|..... @ ...
   d94d3:	3c00 3040 3c40 0000 4400 1028 4428 0000     .<@0@<...D(.(D..
   d94e3:	1c00 a0a0 007c 0000 4400 5464 444c 0000     ....|....DdTLD..
   d94f3:	0800 4136 0000 0000 0000 007f 0000 0000     ..6A............
   d9503:	4100 0836 0000 0000 0200 0101 0102 0000     .A6.............
   d9513:	0200 0505 0002 0000 0000                         .........

000d951c <_ZTV23GoogleMapsDeviceLocator>:
	...
   d9524:	4451 000d 4471 000d 002c 7325 227b 226d     QD..qD..,.%s{"m"
   d9534:	223a 3025 7832 253a 3230 3a78 3025 7832     :"%02x:%02x:%02x
   d9544:	253a 3230 3a78 3025 7832 253a 3230 2278     :%02x:%02x:%02x"
   d9554:	222c 2273 253a 2c64 6322 3a22 6425 007d     ,"s":%d,"c":%d}.
   d9564:	5441 5426 7b00 7722 3a22 227b 2261 003a     AT&T.{"w":{"a":.
   d9574:	7570 6c62 7369 4c68 636f 7461 6f69 006e     publishLocation.
   d9584:	6373 6e61 6144 6174 253d 0073 6f68 6b6f     scanData=%s.hook
   d9594:	722d 7365 6f70 736e 2f65 7325 252f 0073     -response/%s/%s.

000d95a4 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d95ac:	4d79 000d 4d7f 000d 4dc3 000d 4d8d 000d     yM...M...M...M..
   d95bc:	4d7b 000d                                   {M..

000d95c0 <_ZTVN5spark13EthernetClassE>:
	...
   d95c8:	539b 000d 5391 000d 5387 000d 537d 000d     .S...S...S..}S..
   d95d8:	5371 000d 5365 000d 5359 000d 5351 000d     qS..eS..YS..QS..
   d95e8:	5347 000d 533d 000d 5735 000d               GS..=S..5W..

000d95f4 <_ZTV7TwoWire>:
	...
   d95fc:	53b9 000d 5403 000d 53db 000d 53bb 000d     .S...T...S...S..
   d960c:	53e3 000d 53eb 000d 53f3 000d 53fb 000d     .S...S...S...S..

000d961c <_ZTV9IPAddress>:
	...
   d9624:	546d 000d 545d 000d 545f 000d 6162 6475     mT..]T.._T..baud
   d9634:	5300 7265 6169 006c 6553 6972 6c61 0031     .Serial.Serial1.
   d9644:	7974 6570 7000 7261 6d61 6300 646d 6900     type.param.cmd.i
   d9654:	0064 6e68 0064 7473 6d72 6600 6c69 0074     d.hnd.strm.filt.
   d9664:	766c 006c 6461 4864 6e61 6c64 7265 7200     lvl.addHandler.r
   d9674:	6d65 766f 4865 6e61 6c64 7265 6500 756e     emoveHandler.enu
   d9684:	486d 6e61 6c64 7265 0073 534a 4e4f 7453     mHandlers.JSONSt
   d9694:	6572 6d61 6f4c 4867 6e61 6c64 7265 6100     reamLogHandler.a
   d96a4:	7070 2500 3130 7530 0020 205d 2500 0064     pp.%010u .] .%d.
   d96b4:	202c 2800 3a29 0020 5b20 6300 646f 2065     , .(): . [.code 
   d96c4:	203d 2500 0069 6564 6174 6c69 2073 203d     = .%i.details = 
   d96d4:	0d00 000a 6e6c 6600 006e 6f63 6564 6400     ....ln.fn.code.d
   d96e4:	7465 6961 006c 6f6e 656e 7400 6172 6563     etail.none.trace
   d96f4:	6900 666e 006f 6177 6e72 6500 7272 726f     .info.warn.error
   d9704:	7000 6e61 6369 6100 6c6c 0000               .panic.all..

000d9710 <_ZTVN5spark9MeshClassE>:
	...
   d9718:	55af 000d 55a5 000d 559b 000d 5591 000d     .U...U...U...U..
   d9728:	5585 000d 5579 000d 556d 000d 5565 000d     .U..yU..mU..eU..
   d9738:	555b 000d 5551 000d 5735 000d               [U..QU..5W..

000d9744 <_ZTVN5spark12NetworkClassE>:
	...
   d974c:	56cd 000d 56d7 000d 56e1 000d 56eb 000d     .V...V...V...V..
   d975c:	56f5 000d 5701 000d 570d 000d 5719 000d     .V...W...W...W..
   d976c:	5721 000d 572b 000d 5735 000d 2b25 3330     !W..+W..5W..%+03
   d977c:	3a64 3025 7532 2500 2d59 6d25 252d 5464     d:%02u.%Y-%m-%dT
   d978c:	4825 253a 3a4d 5325 7a25 6100 6373 6974     %H:%M:%S%z.ascti
   d979c:	656d 0000                                   me..

000d97a0 <_ZTV11USARTSerial>:
	...
   d97a8:	5bf5 000d 5c45 000d 5c53 000d 5815 000d     .[..E\..S\...X..
   d97b8:	5c09 000d 5c2b 000d 5c17 000d 5c3f 000d     .\..+\...\..?\..
   d97c8:	5bf7 000d 5bfb 000d                         .[...[..

000d97d0 <_ZTV9USBSerial>:
	...
   d97d8:	5cf5 000d 5d45 000d 5d53 000d 5815 000d     .\..E]..S]...X..
   d97e8:	5d31 000d 5cf7 000d 5d0d 000d 5d3f 000d     1]...\...]..?]..
   d97f8:	5d23 000d 5cf1 000d                         #]...\..

000d9800 <_ZTVN5spark9WiFiClassE>:
	...
   d9808:	5e5f 000d 5e55 000d 5e4b 000d 5e01 000d     _^..U^..K^...^..
   d9818:	5e3f 000d 5e33 000d 5e27 000d 5e1f 000d     ?^..3^..'^...^..
   d9828:	5e15 000d 5e0b 000d 5735 000d               .^...^..5W..

000d9834 <_ZSt7nothrow>:
	...

000d9835 <_ctype_>:
   d9835:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   d9845:	2020 2020 2020 2020 2020 2020 2020 2020                     
   d9855:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   d9865:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   d9875:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   d9885:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   d9895:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   d98a5:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   d98b5:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000d9938 <__sf_fake_stdin>:
	...

000d9958 <__sf_fake_stdout>:
	...

000d9978 <__sf_fake_stderr>:
	...
   d9998:	0043 4f50 4953 0058 002e 0000               C.POSIX.....

000d99a4 <__month_lengths>:
   d99a4:	001f 0000 001c 0000 001f 0000 001e 0000     ................
   d99b4:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   d99c4:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   d99d4:	001f 0000 001d 0000 001f 0000 001e 0000     ................
   d99e4:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   d99f4:	001e 0000 001f 0000 001e 0000 001f 0000     ................

000d9a04 <fpi.5344>:
   d9a04:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   d9a14:	0000 0000                                   ....

000d9a18 <fpinan.5380>:
   d9a18:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
   d9a28:	0000 0000 666e 6900 696e 7974 6100 006e     ....nf.inity.an.

000d9a38 <tinytens>:
   d9a38:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   d9a48:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   d9a58:	6f43 64ac 0628 1168 5a54 4700 544d 2500     Co.d(.h.TZ.GMT.%
   d9a68:	3031 5e5b 2d30 2c39 2d2b 255d 006e 254d     10[^0-9,+-]%n.M%
   d9a78:	7568 6e25 252e 7568 6e25 252e 7568 6e25     hu%n.%hu%n.%hu%n
   d9a88:	2f00 6825 2575 3a6e 6825 2575 3a6e 6825     ./%hu%n:%hu%n:%h
   d9a98:	2575 006e 0000 0000                         u%n.....

000d9aa0 <__mprec_tens>:
   d9aa0:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   d9ab0:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   d9ac0:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   d9ad0:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   d9ae0:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   d9af0:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   d9b00:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   d9b10:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   d9b20:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   d9b30:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   d9b40:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   d9b50:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   d9b60:	9db4 79d9 7843 44ea                         ...yCx.D

000d9b68 <__mprec_bigtens>:
   d9b68:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   d9b78:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   d9b88:	bf3c 7f73 4fdd 7515                         <.s..O.u

000d9b90 <p05.5387>:
   d9b90:	0005 0000 0019 0000 007d 0000               ........}...

000d9b9c <link_const_variable_data_end>:
   d9b9c:	000d421d 	.word	0x000d421d
   d9ba0:	000d4429 	.word	0x000d4429
   d9ba4:	000d4851 	.word	0x000d4851
   d9ba8:	000d4861 	.word	0x000d4861
   d9bac:	000d4d51 	.word	0x000d4d51
   d9bb0:	000d53a5 	.word	0x000d53a5
   d9bb4:	000d5541 	.word	0x000d5541
   d9bb8:	000d567d 	.word	0x000d567d
   d9bbc:	000d5801 	.word	0x000d5801
   d9bc0:	000d5955 	.word	0x000d5955
   d9bc4:	000d5a65 	.word	0x000d5a65
   d9bc8:	000d5be1 	.word	0x000d5be1
   d9bcc:	000d5e69 	.word	0x000d5e69
   d9bd0:	000d6055 	.word	0x000d6055
   d9bd4:	000d6119 	.word	0x000d6119
   d9bd8:	000d619d 	.word	0x000d619d
   d9bdc:	000d6221 	.word	0x000d6221
