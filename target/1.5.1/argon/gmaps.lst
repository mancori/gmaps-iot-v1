
/Users/manuel/IoT_maps/gmaps/target/1.5.1/argon/gmaps.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00005c40  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d9c60  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         000000f0  2003e134  000d9c64  0001e134  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000005cc  2003e224  2003e224  0002e224  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d9d54  000d9d54  00029d54  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d9d7c  000d9d7c  00029d7c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000e7594  00000000  00000000  00029d80  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000112e5  00000000  00000000  00111314  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001eed5  00000000  00000000  001225f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000025b8  00000000  00000000  001414ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00004820  00000000  00000000  00143a86  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000341ac  00000000  00000000  001482a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000291b3  00000000  00000000  0017c452  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0010a18b  00000000  00000000  001a5605  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000d898  00000000  00000000  002af790  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f002 ff6d 	bl	d6f10 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f002 ff72 	bl	d6f26 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e134 	.word	0x2003e134
   d404c:	000d9c64 	.word	0x000d9c64
   d4050:	2003e224 	.word	0x2003e224
   d4054:	2003e224 	.word	0x2003e224
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405e:	f001 ff87 	bl	d5f70 <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000d9c54 	.word	0x000d9c54
   d4084:	000d9c14 	.word	0x000d9c14

000d4088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4088:	f000 b872 	b.w	d4170 <setup>

000d408c <module_user_loop>:
}

void module_user_loop() {
   d408c:	b508      	push	{r3, lr}
    loop();
   d408e:	f000 f8db 	bl	d4248 <loop>
    _post_loop();
}
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4096:	f001 bf2d 	b.w	d5ef4 <_post_loop>

000d409a <_Znwj>:
   d409a:	f000 bdf5 	b.w	d4c88 <malloc>

000d409e <_ZdlPv>:
   d409e:	f000 bdfb 	b.w	d4c98 <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f000 bdf9 	b.w	d4c98 <free>

000d40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a6:	7800      	ldrb	r0, [r0, #0]
   d40a8:	fab0 f080 	clz	r0, r0
   d40ac:	0940      	lsrs	r0, r0, #5
   d40ae:	4770      	bx	lr

000d40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40b0:	2301      	movs	r3, #1
   d40b2:	7003      	strb	r3, [r0, #0]
   d40b4:	4770      	bx	lr
	...

000d40b8 <_Z16locationCallbackfff>:
void loop() {
	locator.loop();
    updateDisplay();
}

void locationCallback(float lat, float lon, float accuracy) {
   d40b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d40bc:	b08e      	sub	sp, #56	; 0x38
   d40be:	ed8d 1a07 	vstr	s2, [sp, #28]
   d40c2:	edcd 0a08 	vstr	s1, [sp, #32]
   d40c6:	ed8d 0a09 	vstr	s0, [sp, #36]	; 0x24
  Serial.println("LocationCallback()");
   d40ca:	f001 fe91 	bl	d5df0 <_Z16_fetch_usbserialv>
   d40ce:	4923      	ldr	r1, [pc, #140]	; (d415c <_Z16locationCallbackfff+0xa4>)
   d40d0:	f001 fbf3 	bl	d58ba <_ZN5Print7printlnEPKc>
	  Serial.printlnf("lat=%f lon=%f accuracy=%f", lat, lon, accuracy);
   d40d4:	f001 fe8c 	bl	d5df0 <_Z16_fetch_usbserialv>
    }

    template <typename... Args>
    inline size_t printlnf(const char* format, Args... args)
    {
        return this->printf_impl(true, format, args...);
   d40d8:	ed9d 0a09 	vldr	s0, [sp, #36]	; 0x24
   d40dc:	4682      	mov	sl, r0
   d40de:	ee10 0a10 	vmov	r0, s0
   d40e2:	f002 fa81 	bl	d65e8 <__aeabi_f2d>
   d40e6:	eddd 0a08 	vldr	s1, [sp, #32]
   d40ea:	4680      	mov	r8, r0
   d40ec:	ee10 0a90 	vmov	r0, s1
   d40f0:	4689      	mov	r9, r1
   d40f2:	f002 fa79 	bl	d65e8 <__aeabi_f2d>
   d40f6:	ed9d 1a07 	vldr	s2, [sp, #28]
   d40fa:	4606      	mov	r6, r0
   d40fc:	ee11 0a10 	vmov	r0, s2
   d4100:	460f      	mov	r7, r1
   d4102:	f002 fa71 	bl	d65e8 <__aeabi_f2d>
   d4106:	4604      	mov	r4, r0
   d4108:	460d      	mov	r5, r1
   d410a:	4a15      	ldr	r2, [pc, #84]	; (d4160 <_Z16locationCallbackfff+0xa8>)
   d410c:	2101      	movs	r1, #1
   d410e:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d4112:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d4116:	e9cd 8900 	strd	r8, r9, [sp]
   d411a:	4650      	mov	r0, sl
	SeeedOled.clearDisplay();   // clears the screen and buffer

	// 10 characters fit at text size 2

	char buf[16];
	snprintf(buf, sizeof(buf), "%.6f", lat);
   d411c:	f8df a04c 	ldr.w	sl, [pc, #76]	; d416c <_Z16locationCallbackfff+0xb4>
   d4120:	f001 fbf5 	bl	d590e <_ZN5Print11printf_implEbPKcz>
}

void locationCallback(float lat, float lon, float accuracy) {
  Serial.println("LocationCallback()");
	  Serial.printlnf("lat=%f lon=%f accuracy=%f", lat, lon, accuracy);
	SeeedOled.clearDisplay();   // clears the screen and buffer
   d4124:	480f      	ldr	r0, [pc, #60]	; (d4164 <_Z16locationCallbackfff+0xac>)
   d4126:	f000 f935 	bl	d4394 <_ZN9SeeedOLED12clearDisplayEv>

	// 10 characters fit at text size 2

	char buf[16];
	snprintf(buf, sizeof(buf), "%.6f", lat);
   d412a:	4652      	mov	r2, sl
   d412c:	e9cd 8900 	strd	r8, r9, [sp]
   d4130:	2110      	movs	r1, #16
   d4132:	a80a      	add	r0, sp, #40	; 0x28
   d4134:	f000 fdc8 	bl	d4cc8 <snprintf>
  //SeeedOled.putString(buf, sizeof(buf), "%.6f", lat);
	snprintf(buf, sizeof(buf), "%.6f", lon);
   d4138:	4652      	mov	r2, sl
   d413a:	e9cd 6700 	strd	r6, r7, [sp]
   d413e:	2110      	movs	r1, #16
   d4140:	a80a      	add	r0, sp, #40	; 0x28
   d4142:	f000 fdc1 	bl	d4cc8 <snprintf>
  //SeeedOled.putString(buf, sizeof(buf), "%.6f", lon);
	snprintf(buf, sizeof(buf), "%.1f", accuracy);
   d4146:	e9cd 4500 	strd	r4, r5, [sp]
   d414a:	4a07      	ldr	r2, [pc, #28]	; (d4168 <_Z16locationCallbackfff+0xb0>)
   d414c:	2110      	movs	r1, #16
   d414e:	a80a      	add	r0, sp, #40	; 0x28
   d4150:	f000 fdba 	bl	d4cc8 <snprintf>
  //SeeedOled.putString(buf);
   d4154:	b00e      	add	sp, #56	; 0x38
   d4156:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d415a:	bf00      	nop
   d415c:	000d9244 	.word	0x000d9244
   d4160:	000d9257 	.word	0x000d9257
   d4164:	2003e274 	.word	0x2003e274
   d4168:	000d9276 	.word	0x000d9276
   d416c:	000d9271 	.word	0x000d9271

000d4170 <setup>:

// SYSTEM_THREAD(ENABLED);

void locationCallback(float lat, float lon, float accuracy);

void setup() {
   d4170:	b510      	push	{r4, lr}
 	  Serial.begin(9600);
   d4172:	f001 fe3d 	bl	d5df0 <_Z16_fetch_usbserialv>
	  Wire.begin();
    SeeedOled.init();  	
   d4176:	4c18      	ldr	r4, [pc, #96]	; (d41d8 <setup+0x68>)
// SYSTEM_THREAD(ENABLED);

void locationCallback(float lat, float lon, float accuracy);

void setup() {
 	  Serial.begin(9600);
   d4178:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d417c:	f001 fe2c 	bl	d5dd8 <_ZN9USBSerial5beginEl>
	  Wire.begin();
   d4180:	f001 ff3c 	bl	d5ffc <_Z19__fetch_global_Wirev>
   d4184:	f001 f974 	bl	d5470 <_ZN7TwoWire5beginEv>
    SeeedOled.init();  	
   d4188:	4620      	mov	r0, r4
   d418a:	f000 f897 	bl	d42bc <_ZN9SeeedOLED4initEv>
 	  SeeedOled.clearDisplay();
   d418e:	4620      	mov	r0, r4
   d4190:	f000 f900 	bl	d4394 <_ZN9SeeedOLED12clearDisplayEv>
    SeeedOled.setNormalDisplay();
   d4194:	4620      	mov	r0, r4
   d4196:	f000 f964 	bl	d4462 <_ZN9SeeedOLED16setNormalDisplayEv>
    SeeedOled.setPageMode(); 
   d419a:	4620      	mov	r0, r4
   d419c:	f000 f8a3 	bl	d42e6 <_ZN9SeeedOLED11setPageModeEv>
    SeeedOled.setTextXY(2, 0);
   d41a0:	2200      	movs	r2, #0
   d41a2:	4620      	mov	r0, r4
   d41a4:	2102      	movs	r1, #2
   d41a6:	f000 f8ab 	bl	d4300 <_ZN9SeeedOLED9setTextXYEhh>
    SeeedOled.putString("GPS v3.1");
   d41aa:	4620      	mov	r0, r4
    locator.withEventName("deviceLocator");
   d41ac:	4c0b      	ldr	r4, [pc, #44]	; (d41dc <setup+0x6c>)
    SeeedOled.init();  	
 	  SeeedOled.clearDisplay();
    SeeedOled.setNormalDisplay();
    SeeedOled.setPageMode(); 
    SeeedOled.setTextXY(2, 0);
    SeeedOled.putString("GPS v3.1");
   d41ae:	490c      	ldr	r1, [pc, #48]	; (d41e0 <setup+0x70>)
   d41b0:	f000 f912 	bl	d43d8 <_ZN9SeeedOLED9putStringEPKc>
    locator.withEventName("deviceLocator");
   d41b4:	490b      	ldr	r1, [pc, #44]	; (d41e4 <setup+0x74>)
   d41b6:	4620      	mov	r0, r4
   d41b8:	f000 fa5e 	bl	d4678 <_ZN23GoogleMapsDeviceLocator13withEventNameEPKc>
    locator.withSubscribe(locationCallback).withLocatePeriodic(120);
   d41bc:	490a      	ldr	r1, [pc, #40]	; (d41e8 <setup+0x78>)
   d41be:	4620      	mov	r0, r4
   d41c0:	f000 fb18 	bl	d47f4 <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE>
   d41c4:	2178      	movs	r1, #120	; 0x78
   d41c6:	f000 fa4d 	bl	d4664 <_ZN23GoogleMapsDeviceLocator18withLocatePeriodicEm>
    Time.zone(+7);
   d41ca:	eeb1 0a0c 	vmov.f32	s0, #28	; 0x40e00000  7.0
}
   d41ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    SeeedOled.setPageMode(); 
    SeeedOled.setTextXY(2, 0);
    SeeedOled.putString("GPS v3.1");
    locator.withEventName("deviceLocator");
    locator.withSubscribe(locationCallback).withLocatePeriodic(120);
    Time.zone(+7);
   d41d2:	f001 bccd 	b.w	d5b70 <_ZN9TimeClass4zoneEf>
   d41d6:	bf00      	nop
   d41d8:	2003e274 	.word	0x2003e274
   d41dc:	2003e228 	.word	0x2003e228
   d41e0:	000d927b 	.word	0x000d927b
   d41e4:	000d9284 	.word	0x000d9284
   d41e8:	000d40b9 	.word	0x000d40b9

000d41ec <_Z13updateDisplayv>:
}

void updateDisplay()
{
   d41ec:	b570      	push	{r4, r5, r6, lr}
Time.now();    
   d41ee:	f001 fcfc 	bl	d5bea <_ZN9TimeClass3nowEv>
hour = Time.hourFormat12();
   d41f2:	f001 fd01 	bl	d5bf8 <_ZN9TimeClass12hourFormat12Ev>
   d41f6:	4e10      	ldr	r6, [pc, #64]	; (d4238 <_Z13updateDisplayv+0x4c>)
minutes = Time.minute();
SeeedOled.setNormalDisplay();
   d41f8:	4c10      	ldr	r4, [pc, #64]	; (d423c <_Z13updateDisplayv+0x50>)
}

void updateDisplay()
{
Time.now();    
hour = Time.hourFormat12();
   d41fa:	6030      	str	r0, [r6, #0]
minutes = Time.minute();
   d41fc:	f001 fd04 	bl	d5c08 <_ZN9TimeClass6minuteEv>
   d4200:	4d0f      	ldr	r5, [pc, #60]	; (d4240 <_Z13updateDisplayv+0x54>)
   d4202:	6028      	str	r0, [r5, #0]
SeeedOled.setNormalDisplay();
   d4204:	4620      	mov	r0, r4
   d4206:	f000 f92c 	bl	d4462 <_ZN9SeeedOLED16setNormalDisplayEv>
SeeedOled.setPageMode();
   d420a:	4620      	mov	r0, r4
   d420c:	f000 f86b 	bl	d42e6 <_ZN9SeeedOLED11setPageModeEv>
SeeedOled.setTextXY(4,5);
   d4210:	2205      	movs	r2, #5
   d4212:	4620      	mov	r0, r4
   d4214:	2104      	movs	r1, #4
   d4216:	f000 f873 	bl	d4300 <_ZN9SeeedOLED9setTextXYEhh>
SeeedOled.putNumber(hour);
   d421a:	6831      	ldr	r1, [r6, #0]
   d421c:	4620      	mov	r0, r4
   d421e:	f000 f8e8 	bl	d43f2 <_ZN9SeeedOLED9putNumberEl>
SeeedOled.putString(":");
   d4222:	4620      	mov	r0, r4
   d4224:	4907      	ldr	r1, [pc, #28]	; (d4244 <_Z13updateDisplayv+0x58>)
   d4226:	f000 f8d7 	bl	d43d8 <_ZN9SeeedOLED9putStringEPKc>
SeeedOled.putNumber(minutes);
   d422a:	6829      	ldr	r1, [r5, #0]
   d422c:	4620      	mov	r0, r4
}
   d422e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
SeeedOled.setNormalDisplay();
SeeedOled.setPageMode();
SeeedOled.setTextXY(4,5);
SeeedOled.putNumber(hour);
SeeedOled.putString(":");
SeeedOled.putNumber(minutes);
   d4232:	f000 b8de 	b.w	d43f2 <_ZN9SeeedOLED9putNumberEl>
   d4236:	bf00      	nop
   d4238:	2003e270 	.word	0x2003e270
   d423c:	2003e274 	.word	0x2003e274
   d4240:	2003e26c 	.word	0x2003e26c
   d4244:	000d95ea 	.word	0x000d95ea

000d4248 <loop>:
}

void loop() {
   d4248:	b508      	push	{r3, lr}
	locator.loop();
   d424a:	4803      	ldr	r0, [pc, #12]	; (d4258 <loop+0x10>)
   d424c:	f000 fa84 	bl	d4758 <_ZN23GoogleMapsDeviceLocator4loopEv>
    updateDisplay();
}
   d4250:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
SeeedOled.putNumber(minutes);
}

void loop() {
	locator.loop();
    updateDisplay();
   d4254:	f7ff bfca 	b.w	d41ec <_Z13updateDisplayv>
   d4258:	2003e228 	.word	0x2003e228

000d425c <_GLOBAL__sub_I_locator>:
  //SeeedOled.putString(buf, sizeof(buf), "%.6f", lat);
	snprintf(buf, sizeof(buf), "%.6f", lon);
  //SeeedOled.putString(buf, sizeof(buf), "%.6f", lon);
	snprintf(buf, sizeof(buf), "%.1f", accuracy);
  //SeeedOled.putString(buf);
   d425c:	b510      	push	{r4, lr}

 

// Uncomment to show debugging logs
//SerialLogHandler logHandler(LOG_LEVEL_TRACE);
GoogleMapsDeviceLocator locator;
   d425e:	4c06      	ldr	r4, [pc, #24]	; (d4278 <_GLOBAL__sub_I_locator+0x1c>)

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4260:	f000 fb66 	bl	d4930 <HAL_Pin_Map>
   d4264:	4620      	mov	r0, r4
   d4266:	f000 f9d7 	bl	d4618 <_ZN23GoogleMapsDeviceLocatorC1Ev>
   d426a:	4620      	mov	r0, r4
   d426c:	4a03      	ldr	r2, [pc, #12]	; (d427c <_GLOBAL__sub_I_locator+0x20>)
   d426e:	4904      	ldr	r1, [pc, #16]	; (d4280 <_GLOBAL__sub_I_locator+0x24>)
  //SeeedOled.putString(buf, sizeof(buf), "%.6f", lat);
	snprintf(buf, sizeof(buf), "%.6f", lon);
  //SeeedOled.putString(buf, sizeof(buf), "%.6f", lon);
	snprintf(buf, sizeof(buf), "%.1f", accuracy);
  //SeeedOled.putString(buf);
   d4270:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

 

// Uncomment to show debugging logs
//SerialLogHandler logHandler(LOG_LEVEL_TRACE);
GoogleMapsDeviceLocator locator;
   d4274:	f001 bee8 	b.w	d6048 <__aeabi_atexit>
   d4278:	2003e228 	.word	0x2003e228
   d427c:	2003e224 	.word	0x2003e224
   d4280:	000d4491 	.word	0x000d4491

000d4284 <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d4284:	6803      	ldr	r3, [r0, #0]
   d4286:	b2c9      	uxtb	r1, r1
   d4288:	689b      	ldr	r3, [r3, #8]
   d428a:	4718      	bx	r3

000d428c <_ZN9SeeedOLED11sendCommandEh>:
  delay(5);
  sendCommand(SeeedOLED_Normal_Display_Cmd); //Set Normal Display (default)
}

void SeeedOLED::sendCommand(unsigned char command)
{
   d428c:	b510      	push	{r4, lr}
   d428e:	460c      	mov	r4, r1
  Wire.beginTransmission(SeeedOLED_Address); // begin I2C communication
   d4290:	f001 feb4 	bl	d5ffc <_Z19__fetch_global_Wirev>
   d4294:	213c      	movs	r1, #60	; 0x3c
   d4296:	f001 f8f5 	bl	d5484 <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(SeeedOLED_Command_Mode);        // Set OLED Command mode
   d429a:	f001 feaf 	bl	d5ffc <_Z19__fetch_global_Wirev>
   d429e:	2180      	movs	r1, #128	; 0x80
   d42a0:	f7ff fff0 	bl	d4284 <_ZN7TwoWire5writeEi>
  Wire.write(command);
   d42a4:	f001 feaa 	bl	d5ffc <_Z19__fetch_global_Wirev>
   d42a8:	6803      	ldr	r3, [r0, #0]
   d42aa:	4621      	mov	r1, r4
   d42ac:	689b      	ldr	r3, [r3, #8]
   d42ae:	4798      	blx	r3
  Wire.endTransmission(); // End I2C communication
   d42b0:	f001 fea4 	bl	d5ffc <_Z19__fetch_global_Wirev>
}
   d42b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void SeeedOLED::sendCommand(unsigned char command)
{
  Wire.beginTransmission(SeeedOLED_Address); // begin I2C communication
  Wire.write(SeeedOLED_Command_Mode);        // Set OLED Command mode
  Wire.write(command);
  Wire.endTransmission(); // End I2C communication
   d42b8:	f001 b8eb 	b.w	d5492 <_ZN7TwoWire15endTransmissionEv>

000d42bc <_ZN9SeeedOLED4initEv>:
        {0x00, 0x41, 0x36, 0x08, 0x00, 0x00, 0x00, 0x00},
        {0x00, 0x02, 0x01, 0x01, 0x02, 0x01, 0x00, 0x00},
        {0x00, 0x02, 0x05, 0x05, 0x02, 0x00, 0x00, 0x00}};

void SeeedOLED::init(void)
{
   d42bc:	b510      	push	{r4, lr}
  sendCommand(SeeedOLED_Display_Off_Cmd); //display off
   d42be:	21ae      	movs	r1, #174	; 0xae
        {0x00, 0x41, 0x36, 0x08, 0x00, 0x00, 0x00, 0x00},
        {0x00, 0x02, 0x01, 0x01, 0x02, 0x01, 0x00, 0x00},
        {0x00, 0x02, 0x05, 0x05, 0x02, 0x00, 0x00, 0x00}};

void SeeedOLED::init(void)
{
   d42c0:	4604      	mov	r4, r0
  sendCommand(SeeedOLED_Display_Off_Cmd); //display off
   d42c2:	f7ff ffe3 	bl	d428c <_ZN9SeeedOLED11sendCommandEh>
  delay(5);
   d42c6:	2005      	movs	r0, #5
   d42c8:	f000 fd1e 	bl	d4d08 <delay>
  sendCommand(SeeedOLED_Display_On_Cmd); //display on
   d42cc:	21af      	movs	r1, #175	; 0xaf
   d42ce:	4620      	mov	r0, r4
   d42d0:	f7ff ffdc 	bl	d428c <_ZN9SeeedOLED11sendCommandEh>
  delay(5);
   d42d4:	2005      	movs	r0, #5
   d42d6:	f000 fd17 	bl	d4d08 <delay>
  sendCommand(SeeedOLED_Normal_Display_Cmd); //Set Normal Display (default)
   d42da:	4620      	mov	r0, r4
   d42dc:	21a6      	movs	r1, #166	; 0xa6
}
   d42de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
{
  sendCommand(SeeedOLED_Display_Off_Cmd); //display off
  delay(5);
  sendCommand(SeeedOLED_Display_On_Cmd); //display on
  delay(5);
  sendCommand(SeeedOLED_Normal_Display_Cmd); //Set Normal Display (default)
   d42e2:	f7ff bfd3 	b.w	d428c <_ZN9SeeedOLED11sendCommandEh>

000d42e6 <_ZN9SeeedOLED11setPageModeEv>:
  sendCommand(0x20); //set addressing mode
  sendCommand(0x00); //set horizontal addressing mode
}

void SeeedOLED::setPageMode()
{
   d42e6:	b510      	push	{r4, lr}
  addressingMode = PAGE_MODE;
   d42e8:	2301      	movs	r3, #1
  sendCommand(0x20); //set addressing mode
  sendCommand(0x00); //set horizontal addressing mode
}

void SeeedOLED::setPageMode()
{
   d42ea:	4604      	mov	r4, r0
  addressingMode = PAGE_MODE;
   d42ec:	7003      	strb	r3, [r0, #0]
  sendCommand(0x20); //set addressing mode
   d42ee:	2120      	movs	r1, #32
   d42f0:	f7ff ffcc 	bl	d428c <_ZN9SeeedOLED11sendCommandEh>
  sendCommand(0x02); //set page addressing mode
   d42f4:	4620      	mov	r0, r4
   d42f6:	2102      	movs	r1, #2
}
   d42f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

void SeeedOLED::setPageMode()
{
  addressingMode = PAGE_MODE;
  sendCommand(0x20); //set addressing mode
  sendCommand(0x02); //set page addressing mode
   d42fc:	f7ff bfc6 	b.w	d428c <_ZN9SeeedOLED11sendCommandEh>

000d4300 <_ZN9SeeedOLED9setTextXYEhh>:
}

void SeeedOLED::setTextXY(unsigned char Row, unsigned char Column)
{
   d4300:	b538      	push	{r3, r4, r5, lr}
  sendCommand(0xB0 + Row);                        //set page address
   d4302:	3950      	subs	r1, #80	; 0x50
  sendCommand(0x20); //set addressing mode
  sendCommand(0x02); //set page addressing mode
}

void SeeedOLED::setTextXY(unsigned char Row, unsigned char Column)
{
   d4304:	4614      	mov	r4, r2
  sendCommand(0xB0 + Row);                        //set page address
   d4306:	b2c9      	uxtb	r1, r1
  sendCommand(0x20); //set addressing mode
  sendCommand(0x02); //set page addressing mode
}

void SeeedOLED::setTextXY(unsigned char Row, unsigned char Column)
{
   d4308:	4605      	mov	r5, r0
  sendCommand(0xB0 + Row);                        //set page address
   d430a:	f7ff ffbf 	bl	d428c <_ZN9SeeedOLED11sendCommandEh>
  sendCommand(0x00 + (8 * Column & 0x0F));        //set column lower address
   d430e:	00e1      	lsls	r1, r4, #3
   d4310:	4628      	mov	r0, r5
   d4312:	f001 0108 	and.w	r1, r1, #8
   d4316:	f7ff ffb9 	bl	d428c <_ZN9SeeedOLED11sendCommandEh>
  sendCommand(0x10 + ((8 * Column >> 4) & 0x0F)); //set column higher address
   d431a:	f3c4 0143 	ubfx	r1, r4, #1, #4
   d431e:	4628      	mov	r0, r5
   d4320:	3110      	adds	r1, #16
}
   d4322:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

void SeeedOLED::setTextXY(unsigned char Row, unsigned char Column)
{
  sendCommand(0xB0 + Row);                        //set page address
  sendCommand(0x00 + (8 * Column & 0x0F));        //set column lower address
  sendCommand(0x10 + ((8 * Column >> 4) & 0x0F)); //set column higher address
   d4326:	f7ff bfb1 	b.w	d428c <_ZN9SeeedOLED11sendCommandEh>

000d432a <_ZN9SeeedOLED8sendDataEh>:
  sendCommand(SeeedOLED_Display_On_Cmd); //display on
  setTextXY(0, 0);
}

void SeeedOLED::sendData(unsigned char Data)
{
   d432a:	b510      	push	{r4, lr}
   d432c:	460c      	mov	r4, r1
  Wire.beginTransmission(SeeedOLED_Address); // begin I2C transmission
   d432e:	f001 fe65 	bl	d5ffc <_Z19__fetch_global_Wirev>
   d4332:	213c      	movs	r1, #60	; 0x3c
   d4334:	f001 f8a6 	bl	d5484 <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(SeeedOLED_Data_Mode);           // data mode
   d4338:	f001 fe60 	bl	d5ffc <_Z19__fetch_global_Wirev>
   d433c:	2140      	movs	r1, #64	; 0x40
   d433e:	f7ff ffa1 	bl	d4284 <_ZN7TwoWire5writeEi>
  Wire.write(Data);
   d4342:	f001 fe5b 	bl	d5ffc <_Z19__fetch_global_Wirev>
   d4346:	6803      	ldr	r3, [r0, #0]
   d4348:	4621      	mov	r1, r4
   d434a:	689b      	ldr	r3, [r3, #8]
   d434c:	4798      	blx	r3
  Wire.endTransmission(); // stop I2C transmission
   d434e:	f001 fe55 	bl	d5ffc <_Z19__fetch_global_Wirev>
}
   d4352:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void SeeedOLED::sendData(unsigned char Data)
{
  Wire.beginTransmission(SeeedOLED_Address); // begin I2C transmission
  Wire.write(SeeedOLED_Data_Mode);           // data mode
  Wire.write(Data);
  Wire.endTransmission(); // stop I2C transmission
   d4356:	f001 b89c 	b.w	d5492 <_ZN7TwoWire15endTransmissionEv>
	...

000d435c <_ZN9SeeedOLED7putCharEh>:
}

void SeeedOLED::putChar(unsigned char C)
{
  if (C < 32 || C > 127) //Ignore non-printable ASCII characters. This can be modified for multilingual font.
   d435c:	f1a1 0320 	sub.w	r3, r1, #32
  {
    C = ' '; //Space
   d4360:	2b5f      	cmp	r3, #95	; 0x5f
   d4362:	4b0b      	ldr	r3, [pc, #44]	; (d4390 <_ZN9SeeedOLED7putCharEh+0x34>)
   d4364:	bf88      	it	hi
   d4366:	2120      	movhi	r1, #32
  Wire.write(Data);
  Wire.endTransmission(); // stop I2C transmission
}

void SeeedOLED::putChar(unsigned char C)
{
   d4368:	b570      	push	{r4, r5, r6, lr}
   d436a:	f46f 7280 	mvn.w	r2, #256	; 0x100
   d436e:	eb03 05c1 	add.w	r5, r3, r1, lsl #3
   d4372:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   d4376:	4606      	mov	r6, r0
   d4378:	4415      	add	r5, r2
   d437a:	f1a3 04f9 	sub.w	r4, r3, #249	; 0xf9
  }
  unsigned char i = 0;
  for (i = 0; i < 8; i++)
  {
    //read bytes from code memory
    sendData(pgm_read_byte(&BasicFont[C - 32][i])); //font array starts at 0, ASCII starts at 32. Hence the translation
   d437e:	f815 1f01 	ldrb.w	r1, [r5, #1]!
   d4382:	4630      	mov	r0, r6
   d4384:	f7ff ffd1 	bl	d432a <_ZN9SeeedOLED8sendDataEh>
  if (C < 32 || C > 127) //Ignore non-printable ASCII characters. This can be modified for multilingual font.
  {
    C = ' '; //Space
  }
  unsigned char i = 0;
  for (i = 0; i < 8; i++)
   d4388:	42a5      	cmp	r5, r4
   d438a:	d1f8      	bne.n	d437e <_ZN9SeeedOLED7putCharEh+0x22>
  {
    //read bytes from code memory
    sendData(pgm_read_byte(&BasicFont[C - 32][i])); //font array starts at 0, ASCII starts at 32. Hence the translation
  }
}
   d438c:	bd70      	pop	{r4, r5, r6, pc}
   d438e:	bf00      	nop
   d4390:	000d9292 	.word	0x000d9292

000d4394 <_ZN9SeeedOLED12clearDisplayEv>:
  sendCommand(0x00 + (8 * Column & 0x0F));        //set column lower address
  sendCommand(0x10 + ((8 * Column >> 4) & 0x0F)); //set column higher address
}

void SeeedOLED::clearDisplay()
{
   d4394:	b570      	push	{r4, r5, r6, lr}
  unsigned char i, j;
  sendCommand(SeeedOLED_Display_Off_Cmd); //display off
   d4396:	21ae      	movs	r1, #174	; 0xae
  sendCommand(0x00 + (8 * Column & 0x0F));        //set column lower address
  sendCommand(0x10 + ((8 * Column >> 4) & 0x0F)); //set column higher address
}

void SeeedOLED::clearDisplay()
{
   d4398:	4605      	mov	r5, r0
  unsigned char i, j;
  sendCommand(SeeedOLED_Display_Off_Cmd); //display off
   d439a:	f7ff ff77 	bl	d428c <_ZN9SeeedOLED11sendCommandEh>
   d439e:	2600      	movs	r6, #0
  for (j = 0; j < 8; j++)
  {
    setTextXY(j, 0);
   d43a0:	2200      	movs	r2, #0
   d43a2:	b2f1      	uxtb	r1, r6
   d43a4:	4628      	mov	r0, r5
   d43a6:	f7ff ffab 	bl	d4300 <_ZN9SeeedOLED9setTextXYEhh>
   d43aa:	2410      	movs	r4, #16
    {
      for (i = 0; i < 16; i++) //clear all columns
      {
        putChar(' ');
   d43ac:	2120      	movs	r1, #32
   d43ae:	4628      	mov	r0, r5
   d43b0:	3c01      	subs	r4, #1
   d43b2:	f7ff ffd3 	bl	d435c <_ZN9SeeedOLED7putCharEh>
  sendCommand(SeeedOLED_Display_Off_Cmd); //display off
  for (j = 0; j < 8; j++)
  {
    setTextXY(j, 0);
    {
      for (i = 0; i < 16; i++) //clear all columns
   d43b6:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   d43ba:	d1f7      	bne.n	d43ac <_ZN9SeeedOLED12clearDisplayEv+0x18>
   d43bc:	3601      	adds	r6, #1

void SeeedOLED::clearDisplay()
{
  unsigned char i, j;
  sendCommand(SeeedOLED_Display_Off_Cmd); //display off
  for (j = 0; j < 8; j++)
   d43be:	2e08      	cmp	r6, #8
   d43c0:	d1ee      	bne.n	d43a0 <_ZN9SeeedOLED12clearDisplayEv+0xc>
      {
        putChar(' ');
      }
    }
  }
  sendCommand(SeeedOLED_Display_On_Cmd); //display on
   d43c2:	4628      	mov	r0, r5
   d43c4:	21af      	movs	r1, #175	; 0xaf
   d43c6:	f7ff ff61 	bl	d428c <_ZN9SeeedOLED11sendCommandEh>
  setTextXY(0, 0);
   d43ca:	4622      	mov	r2, r4
   d43cc:	4621      	mov	r1, r4
   d43ce:	4628      	mov	r0, r5
}
   d43d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        putChar(' ');
      }
    }
  }
  sendCommand(SeeedOLED_Display_On_Cmd); //display on
  setTextXY(0, 0);
   d43d4:	f7ff bf94 	b.w	d4300 <_ZN9SeeedOLED9setTextXYEhh>

000d43d8 <_ZN9SeeedOLED9putStringEPKc>:
    sendData(pgm_read_byte(&BasicFont[C - 32][i])); //font array starts at 0, ASCII starts at 32. Hence the translation
  }
}

void SeeedOLED::putString(const char *String)
{
   d43d8:	b570      	push	{r4, r5, r6, lr}
   d43da:	4605      	mov	r5, r0
   d43dc:	460e      	mov	r6, r1
   d43de:	2400      	movs	r4, #0
  unsigned char i = 0;
  while (String[i])
   d43e0:	b2e3      	uxtb	r3, r4
   d43e2:	3401      	adds	r4, #1
   d43e4:	5cf1      	ldrb	r1, [r6, r3]
   d43e6:	b119      	cbz	r1, d43f0 <_ZN9SeeedOLED9putStringEPKc+0x18>
  {
    putChar(String[i]);
   d43e8:	4628      	mov	r0, r5
   d43ea:	f7ff ffb7 	bl	d435c <_ZN9SeeedOLED7putCharEh>
}

void SeeedOLED::putString(const char *String)
{
  unsigned char i = 0;
  while (String[i])
   d43ee:	e7f7      	b.n	d43e0 <_ZN9SeeedOLED9putStringEPKc+0x8>
   d43f0:	bd70      	pop	{r4, r5, r6, pc}

000d43f2 <_ZN9SeeedOLED9putNumberEl>:
    i++;
  }
}

unsigned char SeeedOLED::putNumber(long long_num)
{
   d43f2:	b5f0      	push	{r4, r5, r6, r7, lr}
   d43f4:	b085      	sub	sp, #20
  unsigned char char_buffer[10] = "";
   d43f6:	2300      	movs	r3, #0
  unsigned char i = 0;
  unsigned char f = 0;

  if (long_num < 0)
   d43f8:	1e0e      	subs	r6, r1, #0
    i++;
  }
}

unsigned char SeeedOLED::putNumber(long long_num)
{
   d43fa:	4607      	mov	r7, r0
  unsigned char char_buffer[10] = "";
   d43fc:	9301      	str	r3, [sp, #4]
   d43fe:	9302      	str	r3, [sp, #8]
   d4400:	f8ad 300c 	strh.w	r3, [sp, #12]
  unsigned char i = 0;
  unsigned char f = 0;

  if (long_num < 0)
   d4404:	da07      	bge.n	d4416 <_ZN9SeeedOLED9putNumberEl+0x24>
  {
    f = 1;
    putChar('-');
   d4406:	212d      	movs	r1, #45	; 0x2d
   d4408:	f7ff ffa8 	bl	d435c <_ZN9SeeedOLED7putCharEh>
    long_num = -long_num;
   d440c:	4276      	negs	r6, r6
  unsigned char i = 0;
  unsigned char f = 0;

  if (long_num < 0)
  {
    f = 1;
   d440e:	2301      	movs	r3, #1

unsigned char SeeedOLED::putNumber(long long_num)
{
  unsigned char char_buffer[10] = "";
  unsigned char i = 0;
  unsigned char f = 0;
   d4410:	2400      	movs	r4, #0
    return f;
  }

  while (long_num > 0)
  {
    char_buffer[i++] = long_num % 10;
   d4412:	210a      	movs	r1, #10
   d4414:	e005      	b.n	d4422 <_ZN9SeeedOLED9putNumberEl+0x30>
  {
    f = 1;
    putChar('-');
    long_num = -long_num;
  }
  else if (long_num == 0)
   d4416:	d1fb      	bne.n	d4410 <_ZN9SeeedOLED9putNumberEl+0x1e>
  {
    f = 1;
    putChar('0');
   d4418:	2130      	movs	r1, #48	; 0x30
   d441a:	f7ff ff9f 	bl	d435c <_ZN9SeeedOLED7putCharEh>
    return f;
   d441e:	2001      	movs	r0, #1
   d4420:	e01d      	b.n	d445e <_ZN9SeeedOLED9putNumberEl+0x6c>
  }

  while (long_num > 0)
  {
    char_buffer[i++] = long_num % 10;
   d4422:	aa04      	add	r2, sp, #16
   d4424:	1c65      	adds	r5, r4, #1
   d4426:	4414      	add	r4, r2
   d4428:	b2ed      	uxtb	r5, r5
   d442a:	fb96 f2f1 	sdiv	r2, r6, r1
   d442e:	fb01 6612 	mls	r6, r1, r2, r6
   d4432:	f804 6c0c 	strb.w	r6, [r4, #-12]
   d4436:	462c      	mov	r4, r5
    f = 1;
    putChar('0');
    return f;
  }

  while (long_num > 0)
   d4438:	4616      	mov	r6, r2
   d443a:	2a00      	cmp	r2, #0
   d443c:	d1f1      	bne.n	d4422 <_ZN9SeeedOLED9putNumberEl+0x30>
  {
    char_buffer[i++] = long_num % 10;
    long_num /= 10;
  }

  f = f + i;
   d443e:	442b      	add	r3, r5
   d4440:	b2dc      	uxtb	r4, r3
  for (; i > 0; i--)
   d4442:	b15d      	cbz	r5, d445c <_ZN9SeeedOLED9putNumberEl+0x6a>
  {
    putChar('0' + char_buffer[i - 1]);
   d4444:	ab04      	add	r3, sp, #16
   d4446:	442b      	add	r3, r5
   d4448:	4638      	mov	r0, r7
   d444a:	f813 1c0d 	ldrb.w	r1, [r3, #-13]
   d444e:	3130      	adds	r1, #48	; 0x30
   d4450:	b2c9      	uxtb	r1, r1
    char_buffer[i++] = long_num % 10;
    long_num /= 10;
  }

  f = f + i;
  for (; i > 0; i--)
   d4452:	3d01      	subs	r5, #1
  {
    putChar('0' + char_buffer[i - 1]);
   d4454:	f7ff ff82 	bl	d435c <_ZN9SeeedOLED7putCharEh>
    char_buffer[i++] = long_num % 10;
    long_num /= 10;
  }

  f = f + i;
  for (; i > 0; i--)
   d4458:	b2ed      	uxtb	r5, r5
   d445a:	e7f2      	b.n	d4442 <_ZN9SeeedOLED9putNumberEl+0x50>
  {
    putChar('0' + char_buffer[i - 1]);
  }
  return f;
   d445c:	4620      	mov	r0, r4
}
   d445e:	b005      	add	sp, #20
   d4460:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4462 <_ZN9SeeedOLED16setNormalDisplayEv>:
  sendCommand(SeeedOLED_Dectivate_Scroll_Cmd);
}

void SeeedOLED::setNormalDisplay()
{
  sendCommand(SeeedOLED_Normal_Display_Cmd);
   d4462:	21a6      	movs	r1, #166	; 0xa6
   d4464:	f7ff bf12 	b.w	d428c <_ZN9SeeedOLED11sendCommandEh>

000d4468 <_GLOBAL__sub_I__ZN9SeeedOLED4initEv>:
   d4468:	f000 ba62 	b.w	d4930 <HAL_Pin_Map>

000d446c <_ZNSt17_Function_handlerIFvPKcS1_ESt5_BindIFSt7_Mem_fnIM23GoogleMapsDeviceLocatorFvS1_S1_EEPS5_St12_PlaceholderILi1EESA_ILi2EEEEE9_M_invokeERKSt9_Any_dataOS1_SJ_>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d446c:	b430      	push	{r4, r5}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d446e:	6803      	ldr	r3, [r0, #0]
      template<typename... _Args, typename _Req
               = _Require<typename _Traits::__lvalue,
                          _CheckArgs<_Pack<_Args...>>>>
	result_type
	operator()(_Class* __object, _Args&&... __args) const
	{ return (__object->*_M_pmf)(std::forward<_Args>(__args)...); }
   d4470:	6812      	ldr	r2, [r2, #0]
   d4472:	6858      	ldr	r0, [r3, #4]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d4474:	689c      	ldr	r4, [r3, #8]
   d4476:	681b      	ldr	r3, [r3, #0]
      template<typename... _Args, typename _Req
               = _Require<typename _Traits::__lvalue,
                          _CheckArgs<_Pack<_Args...>>>>
	result_type
	operator()(_Class* __object, _Args&&... __args) const
	{ return (__object->*_M_pmf)(std::forward<_Args>(__args)...); }
   d4478:	6809      	ldr	r1, [r1, #0]
   d447a:	f010 0f01 	tst.w	r0, #1
   d447e:	ea4f 0060 	mov.w	r0, r0, asr #1
   d4482:	bf18      	it	ne
   d4484:	5825      	ldrne	r5, [r4, r0]
   d4486:	4420      	add	r0, r4
   d4488:	bf18      	it	ne
   d448a:	58eb      	ldrne	r3, [r5, r3]
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	(*_Base::_M_get_pointer(__functor))(
	    std::forward<_ArgTypes>(__args)...);
      }
   d448c:	bc30      	pop	{r4, r5}
      template<typename... _Args, typename _Req
               = _Require<typename _Traits::__lvalue,
                          _CheckArgs<_Pack<_Args...>>>>
	result_type
	operator()(_Class* __object, _Args&&... __args) const
	{ return (__object->*_M_pmf)(std::forward<_Args>(__args)...); }
   d448e:	4718      	bx	r3

000d4490 <_ZN23GoogleMapsDeviceLocatorD1Ev>:
GoogleMapsDeviceLocator::GoogleMapsDeviceLocator() : locatorMode(LOCATOR_MODE_MANUAL), periodMs(10000), eventName("deviceLocator"),
	stateTime(0), state(CONNECT_WAIT_STATE), callback(NULL), waitAfterConnect(8000) {

}

GoogleMapsDeviceLocator::~GoogleMapsDeviceLocator() {
   d4490:	b510      	push	{r4, lr}
   d4492:	4b06      	ldr	r3, [pc, #24]	; (d44ac <_ZN23GoogleMapsDeviceLocatorD1Ev+0x1c>)
   d4494:	4604      	mov	r4, r0
   d4496:	f840 3b2c 	str.w	r3, [r0], #44
   d449a:	f001 fa87 	bl	d59ac <_ZN6StringD1Ev>
   d449e:	f104 000c 	add.w	r0, r4, #12
   d44a2:	f001 fa83 	bl	d59ac <_ZN6StringD1Ev>

}
   d44a6:	4620      	mov	r0, r4
   d44a8:	bd10      	pop	{r4, pc}
   d44aa:	bf00      	nop
   d44ac:	000d959c 	.word	0x000d959c

000d44b0 <_ZN23GoogleMapsDeviceLocatorD0Ev>:
GoogleMapsDeviceLocator::GoogleMapsDeviceLocator() : locatorMode(LOCATOR_MODE_MANUAL), periodMs(10000), eventName("deviceLocator"),
	stateTime(0), state(CONNECT_WAIT_STATE), callback(NULL), waitAfterConnect(8000) {

}

GoogleMapsDeviceLocator::~GoogleMapsDeviceLocator() {
   d44b0:	b510      	push	{r4, lr}
   d44b2:	4604      	mov	r4, r0

}
   d44b4:	f7ff ffec 	bl	d4490 <_ZN23GoogleMapsDeviceLocatorD1Ev>
   d44b8:	4620      	mov	r0, r4
   d44ba:	2144      	movs	r1, #68	; 0x44
   d44bc:	f001 fdc9 	bl	d6052 <_ZdlPvj>
   d44c0:	4620      	mov	r0, r4
   d44c2:	bd10      	pop	{r4, pc}

000d44c4 <_ZL16wifiScanCallbackP15WiFiAccessPointPv>:



#if Wiring_WiFi

static void wifiScanCallback(WiFiAccessPoint* wap, void* data) {
   d44c4:	b530      	push	{r4, r5, lr}
	// The - 3 factor here to leave room for the closing JSON array ] object }} and the trailing null
	size_t spaceLeft = &requestBuf[sizeof(requestBuf) - 3] - requestCur;
   d44c6:	4d19      	ldr	r5, [pc, #100]	; (d452c <_ZL16wifiScanCallbackP15WiFiAccessPointPv+0x68>)
   d44c8:	4c19      	ldr	r4, [pc, #100]	; (d4530 <_ZL16wifiScanCallbackP15WiFiAccessPointPv+0x6c>)



#if Wiring_WiFi

static void wifiScanCallback(WiFiAccessPoint* wap, void* data) {
   d44ca:	4602      	mov	r2, r0
   d44cc:	b089      	sub	sp, #36	; 0x24
	// The - 3 factor here to leave room for the closing JSON array ] object }} and the trailing null
	size_t spaceLeft = &requestBuf[sizeof(requestBuf) - 3] - requestCur;
   d44ce:	6828      	ldr	r0, [r5, #0]

	size_t sizeNeeded = snprintf(requestCur, spaceLeft,
   d44d0:	f892 302e 	ldrb.w	r3, [r2, #46]	; 0x2e
   d44d4:	f810 1c01 	ldrb.w	r1, [r0, #-1]
   d44d8:	9307      	str	r3, [sp, #28]
   d44da:	6b53      	ldr	r3, [r2, #52]	; 0x34
   d44dc:	9306      	str	r3, [sp, #24]
   d44de:	f892 302b 	ldrb.w	r3, [r2, #43]	; 0x2b
   d44e2:	9305      	str	r3, [sp, #20]
   d44e4:	f892 302a 	ldrb.w	r3, [r2, #42]	; 0x2a
   d44e8:	9304      	str	r3, [sp, #16]
   d44ea:	f892 3029 	ldrb.w	r3, [r2, #41]	; 0x29
   d44ee:	9303      	str	r3, [sp, #12]
   d44f0:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
   d44f4:	9302      	str	r3, [sp, #8]
   d44f6:	f892 3027 	ldrb.w	r3, [r2, #39]	; 0x27
   d44fa:	9301      	str	r3, [sp, #4]
   d44fc:	f892 3026 	ldrb.w	r3, [r2, #38]	; 0x26
   d4500:	9300      	str	r3, [sp, #0]
   d4502:	4a0c      	ldr	r2, [pc, #48]	; (d4534 <_ZL16wifiScanCallbackP15WiFiAccessPointPv+0x70>)
   d4504:	4b0c      	ldr	r3, [pc, #48]	; (d4538 <_ZL16wifiScanCallbackP15WiFiAccessPointPv+0x74>)

#if Wiring_WiFi

static void wifiScanCallback(WiFiAccessPoint* wap, void* data) {
	// The - 3 factor here to leave room for the closing JSON array ] object }} and the trailing null
	size_t spaceLeft = &requestBuf[sizeof(requestBuf) - 3] - requestCur;
   d4506:	1a24      	subs	r4, r4, r0

	size_t sizeNeeded = snprintf(requestCur, spaceLeft,
   d4508:	295b      	cmp	r1, #91	; 0x5b
   d450a:	bf18      	it	ne
   d450c:	4613      	movne	r3, r2
   d450e:	4a0b      	ldr	r2, [pc, #44]	; (d453c <_ZL16wifiScanCallbackP15WiFiAccessPointPv+0x78>)
   d4510:	4621      	mov	r1, r4
   d4512:	f000 fbd9 	bl	d4cc8 <snprintf>
			"%s{\"m\":\"%02x:%02x:%02x:%02x:%02x:%02x\",\"s\":%d,\"c\":%d}",
			(requestCur[-1] == '[' ? "" : ","),
			wap->bssid[0], wap->bssid[1], wap->bssid[2], wap->bssid[3], wap->bssid[4], wap->bssid[5],
			wap->rssi, wap->channel);
	if (sizeNeeded <= spaceLeft) {
   d4516:	4284      	cmp	r4, r0
   d4518:	d306      	bcc.n	d4528 <_ZL16wifiScanCallbackP15WiFiAccessPointPv+0x64>
		// There is enough space to store the whole entry, so save it
		requestCur += sizeNeeded;
   d451a:	682b      	ldr	r3, [r5, #0]
		numAdded++;
   d451c:	4a08      	ldr	r2, [pc, #32]	; (d4540 <_ZL16wifiScanCallbackP15WiFiAccessPointPv+0x7c>)
			(requestCur[-1] == '[' ? "" : ","),
			wap->bssid[0], wap->bssid[1], wap->bssid[2], wap->bssid[3], wap->bssid[4], wap->bssid[5],
			wap->rssi, wap->channel);
	if (sizeNeeded <= spaceLeft) {
		// There is enough space to store the whole entry, so save it
		requestCur += sizeNeeded;
   d451e:	4418      	add	r0, r3
		numAdded++;
   d4520:	6813      	ldr	r3, [r2, #0]
			(requestCur[-1] == '[' ? "" : ","),
			wap->bssid[0], wap->bssid[1], wap->bssid[2], wap->bssid[3], wap->bssid[4], wap->bssid[5],
			wap->rssi, wap->channel);
	if (sizeNeeded <= spaceLeft) {
		// There is enough space to store the whole entry, so save it
		requestCur += sizeNeeded;
   d4522:	6028      	str	r0, [r5, #0]
		numAdded++;
   d4524:	3301      	adds	r3, #1
   d4526:	6013      	str	r3, [r2, #0]
	}
}
   d4528:	b009      	add	sp, #36	; 0x24
   d452a:	bd30      	pop	{r4, r5, pc}
   d452c:	2003e380 	.word	0x2003e380
   d4530:	2003e37a 	.word	0x2003e37a
   d4534:	000d95a4 	.word	0x000d95a4
   d4538:	000d974f 	.word	0x000d974f
   d453c:	000d95a6 	.word	0x000d95a6
   d4540:	2003e278 	.word	0x2003e278

000d4544 <_ZN23GoogleMapsDeviceLocator19subscriptionHandlerEPKcS1_>:
			Particle.publish(eventName, scanData, PRIVATE);
		}
	}
}

void GoogleMapsDeviceLocator::subscriptionHandler(const char *event, const char *data) {
   d4544:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	// event: hook-response/deviceLocator/<deviceid>/0

	if (callback) {
   d4548:	6a43      	ldr	r3, [r0, #36]	; 0x24
			Particle.publish(eventName, scanData, PRIVATE);
		}
	}
}

void GoogleMapsDeviceLocator::subscriptionHandler(const char *event, const char *data) {
   d454a:	b085      	sub	sp, #20
   d454c:	4604      	mov	r4, r0
	// event: hook-response/deviceLocator/<deviceid>/0

	if (callback) {
   d454e:	2b00      	cmp	r3, #0
   d4550:	d037      	beq.n	d45c2 <_ZN23GoogleMapsDeviceLocator19subscriptionHandlerEPKcS1_+0x7e>
		// float lat, float lon, float accuracy
		char *mutableCopy = strdup(data);
   d4552:	4610      	mov	r0, r2
   d4554:	f002 fd2a 	bl	d6fac <strdup>
		char *part, *end;
		float lat, lon, accuracy;

		part = strtok_r(mutableCopy, ",", &end);
   d4558:	aa03      	add	r2, sp, #12
   d455a:	491b      	ldr	r1, [pc, #108]	; (d45c8 <_ZN23GoogleMapsDeviceLocator19subscriptionHandlerEPKcS1_+0x84>)
void GoogleMapsDeviceLocator::subscriptionHandler(const char *event, const char *data) {
	// event: hook-response/deviceLocator/<deviceid>/0

	if (callback) {
		// float lat, float lon, float accuracy
		char *mutableCopy = strdup(data);
   d455c:	4605      	mov	r5, r0
		char *part, *end;
		float lat, lon, accuracy;

		part = strtok_r(mutableCopy, ",", &end);
   d455e:	f003 fbae 	bl	d7cbe <strtok_r>
		if (part) {
   d4562:	b358      	cbz	r0, d45bc <_ZN23GoogleMapsDeviceLocator19subscriptionHandlerEPKcS1_+0x78>
			lat = atof(part);
   d4564:	f002 fbc6 	bl	d6cf4 <atof>
			part = strtok_r(NULL, ",", &end);
   d4568:	aa03      	add	r2, sp, #12
   d456a:	4917      	ldr	r1, [pc, #92]	; (d45c8 <_ZN23GoogleMapsDeviceLocator19subscriptionHandlerEPKcS1_+0x84>)
   d456c:	2000      	movs	r0, #0
		char *part, *end;
		float lat, lon, accuracy;

		part = strtok_r(mutableCopy, ",", &end);
		if (part) {
			lat = atof(part);
   d456e:	ec57 6b10 	vmov	r6, r7, d0
			part = strtok_r(NULL, ",", &end);
   d4572:	f003 fba4 	bl	d7cbe <strtok_r>
			if (part) {
   d4576:	b308      	cbz	r0, d45bc <_ZN23GoogleMapsDeviceLocator19subscriptionHandlerEPKcS1_+0x78>
				lon = atof(part);
   d4578:	f002 fbbc 	bl	d6cf4 <atof>
				part = strtok_r(NULL, ",", &end);
   d457c:	aa03      	add	r2, sp, #12
   d457e:	4912      	ldr	r1, [pc, #72]	; (d45c8 <_ZN23GoogleMapsDeviceLocator19subscriptionHandlerEPKcS1_+0x84>)
   d4580:	2000      	movs	r0, #0
		part = strtok_r(mutableCopy, ",", &end);
		if (part) {
			lat = atof(part);
			part = strtok_r(NULL, ",", &end);
			if (part) {
				lon = atof(part);
   d4582:	ec59 8b10 	vmov	r8, r9, d0
				part = strtok_r(NULL, ",", &end);
   d4586:	f003 fb9a 	bl	d7cbe <strtok_r>
				if (part) {
   d458a:	b1b8      	cbz	r0, d45bc <_ZN23GoogleMapsDeviceLocator19subscriptionHandlerEPKcS1_+0x78>
					accuracy = atof(part);
   d458c:	f002 fbb2 	bl	d6cf4 <atof>

					(*callback)(lat, lon, accuracy);
   d4590:	ec51 0b10 	vmov	r0, r1, d0
   d4594:	f002 fb5e 	bl	d6c54 <__aeabi_d2f>
   d4598:	4649      	mov	r1, r9
   d459a:	9001      	str	r0, [sp, #4]
   d459c:	4640      	mov	r0, r8
   d459e:	f002 fb59 	bl	d6c54 <__aeabi_d2f>
   d45a2:	4639      	mov	r1, r7
   d45a4:	9000      	str	r0, [sp, #0]
   d45a6:	4630      	mov	r0, r6
   d45a8:	f002 fb54 	bl	d6c54 <__aeabi_d2f>
   d45ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d45ae:	ed9d 1a01 	vldr	s2, [sp, #4]
   d45b2:	eddd 0a00 	vldr	s1, [sp]
   d45b6:	ee00 0a10 	vmov	s0, r0
   d45ba:	4798      	blx	r3
				}
			}
		}

		free(mutableCopy);
   d45bc:	4628      	mov	r0, r5
   d45be:	f000 fb6b 	bl	d4c98 <free>
	}
}
   d45c2:	b005      	add	sp, #20
   d45c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d45c8:	000d95a4 	.word	0x000d95a4

000d45cc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM23GoogleMapsDeviceLocatorFvPKcS5_EEPS3_St12_PlaceholderILi1EESA_ILi2EEEEE10_M_managerERSt9_Any_dataRKSG_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d45cc:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d45ce:	b538      	push	{r3, r4, r5, lr}
   d45d0:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d45d2:	d005      	beq.n	d45e0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM23GoogleMapsDeviceLocatorFvPKcS5_EEPS3_St12_PlaceholderILi1EESA_ILi2EEEEE10_M_managerERSt9_Any_dataRKSG_St18_Manager_operation+0x14>
   d45d4:	2a03      	cmp	r2, #3
   d45d6:	d00f      	beq.n	d45f8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM23GoogleMapsDeviceLocatorFvPKcS5_EEPS3_St12_PlaceholderILi1EESA_ILi2EEEEE10_M_managerERSt9_Any_dataRKSG_St18_Manager_operation+0x2c>
   d45d8:	2a01      	cmp	r2, #1
   d45da:	d111      	bne.n	d4600 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM23GoogleMapsDeviceLocatorFvPKcS5_EEPS3_St12_PlaceholderILi1EESA_ILi2EEEEE10_M_managerERSt9_Any_dataRKSG_St18_Manager_operation+0x34>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d45dc:	680b      	ldr	r3, [r1, #0]
   d45de:	e009      	b.n	d45f4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM23GoogleMapsDeviceLocatorFvPKcS5_EEPS3_St12_PlaceholderILi1EESA_ILi2EEEEE10_M_managerERSt9_Any_dataRKSG_St18_Manager_operation+0x28>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d45e0:	200c      	movs	r0, #12
   d45e2:	680d      	ldr	r5, [r1, #0]
   d45e4:	f7ff fd59 	bl	d409a <_Znwj>
   d45e8:	4603      	mov	r3, r0
   d45ea:	b118      	cbz	r0, d45f4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM23GoogleMapsDeviceLocatorFvPKcS5_EEPS3_St12_PlaceholderILi1EESA_ILi2EEEEE10_M_managerERSt9_Any_dataRKSG_St18_Manager_operation+0x28>
   d45ec:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   d45f0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   d45f4:	6023      	str	r3, [r4, #0]
   d45f6:	e003      	b.n	d4600 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM23GoogleMapsDeviceLocatorFvPKcS5_EEPS3_St12_PlaceholderILi1EESA_ILi2EEEEE10_M_managerERSt9_Any_dataRKSG_St18_Manager_operation+0x34>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d45f8:	210c      	movs	r1, #12
   d45fa:	6800      	ldr	r0, [r0, #0]
   d45fc:	f001 fd29 	bl	d6052 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d4600:	2000      	movs	r0, #0
   d4602:	bd38      	pop	{r3, r4, r5, pc}

000d4604 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4604:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d4606:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4608:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d460a:	b113      	cbz	r3, d4612 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d460c:	2203      	movs	r2, #3
   d460e:	4601      	mov	r1, r0
   d4610:	4798      	blx	r3
    }
   d4612:	4620      	mov	r0, r4
   d4614:	bd10      	pop	{r4, pc}
	...

000d4618 <_ZN23GoogleMapsDeviceLocatorC1Ev>:

static char requestBuf[256];
static char *requestCur;
static int numAdded = 0;

GoogleMapsDeviceLocator::GoogleMapsDeviceLocator() : locatorMode(LOCATOR_MODE_MANUAL), periodMs(10000), eventName("deviceLocator"),
   d4618:	b538      	push	{r3, r4, r5, lr}
	stateTime(0), state(CONNECT_WAIT_STATE), callback(NULL), waitAfterConnect(8000) {
   d461a:	4b0f      	ldr	r3, [pc, #60]	; (d4658 <_ZN23GoogleMapsDeviceLocatorC1Ev+0x40>)
   d461c:	6003      	str	r3, [r0, #0]
   d461e:	2500      	movs	r5, #0
   d4620:	f242 7310 	movw	r3, #10000	; 0x2710

static char requestBuf[256];
static char *requestCur;
static int numAdded = 0;

GoogleMapsDeviceLocator::GoogleMapsDeviceLocator() : locatorMode(LOCATOR_MODE_MANUAL), periodMs(10000), eventName("deviceLocator"),
   d4624:	4604      	mov	r4, r0
	stateTime(0), state(CONNECT_WAIT_STATE), callback(NULL), waitAfterConnect(8000) {
   d4626:	6045      	str	r5, [r0, #4]
   d4628:	6083      	str	r3, [r0, #8]
   d462a:	490c      	ldr	r1, [pc, #48]	; (d465c <_ZN23GoogleMapsDeviceLocatorC1Ev+0x44>)
   d462c:	300c      	adds	r0, #12
   d462e:	f001 fa04 	bl	d5a3a <_ZN6StringC1EPK19__FlashStringHelper>
   d4632:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
   d4636:	62a3      	str	r3, [r4, #40]	; 0x28
   d4638:	61e5      	str	r5, [r4, #28]
   d463a:	6225      	str	r5, [r4, #32]
   d463c:	6265      	str	r5, [r4, #36]	; 0x24
   d463e:	4908      	ldr	r1, [pc, #32]	; (d4660 <_ZN23GoogleMapsDeviceLocatorC1Ev+0x48>)
   d4640:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   d4644:	f001 f9f9 	bl	d5a3a <_ZN6StringC1EPK19__FlashStringHelper>
   d4648:	f44f 739b 	mov.w	r3, #310	; 0x136
   d464c:	63e3      	str	r3, [r4, #60]	; 0x3c
   d464e:	f44f 73cd 	mov.w	r3, #410	; 0x19a
   d4652:	6423      	str	r3, [r4, #64]	; 0x40

}
   d4654:	4620      	mov	r0, r4
   d4656:	bd38      	pop	{r3, r4, r5, pc}
   d4658:	000d959c 	.word	0x000d959c
   d465c:	000d9284 	.word	0x000d9284
   d4660:	000d95dc 	.word	0x000d95dc

000d4664 <_ZN23GoogleMapsDeviceLocator18withLocatePeriodicEm>:
	locatorMode = LOCATOR_MODE_ONCE;
	return *this;
}

GoogleMapsDeviceLocator &GoogleMapsDeviceLocator::withLocatePeriodic(unsigned long secondsPeriodic) {
	locatorMode = LOCATOR_MODE_PERIODIC;
   d4664:	2302      	movs	r3, #2
   d4666:	6043      	str	r3, [r0, #4]
	if (secondsPeriodic < 5) {
		secondsPeriodic = 5;
   d4668:	2904      	cmp	r1, #4
   d466a:	bf98      	it	ls
   d466c:	2105      	movls	r1, #5
	}
	periodMs = secondsPeriodic * 1000;
   d466e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4672:	4359      	muls	r1, r3
   d4674:	6081      	str	r1, [r0, #8]
	return *this;
}
   d4676:	4770      	bx	lr

000d4678 <_ZN23GoogleMapsDeviceLocator13withEventNameEPKc>:

GoogleMapsDeviceLocator &GoogleMapsDeviceLocator::withEventName(const char *name) {
   d4678:	b510      	push	{r4, lr}
   d467a:	4604      	mov	r4, r0
	this->eventName = name;
   d467c:	300c      	adds	r0, #12
   d467e:	f001 f9ef 	bl	d5a60 <_ZN6StringaSEPKc>
	return *this;
}
   d4682:	4620      	mov	r0, r4
   d4684:	bd10      	pop	{r4, pc}
	...

000d4688 <_ZN23GoogleMapsDeviceLocator8wifiScanEv>:
		numAdded++;
	}
}


const char *GoogleMapsDeviceLocator::wifiScan() {
   d4688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	requestCur = requestBuf;
	numAdded = 0;

	requestCur += sprintf(requestCur, "{\"w\":{\"a\":");
   d468a:	4c10      	ldr	r4, [pc, #64]	; (d46cc <_ZN23GoogleMapsDeviceLocator8wifiScanEv+0x44>)


const char *GoogleMapsDeviceLocator::wifiScan() {

	requestCur = requestBuf;
	numAdded = 0;
   d468c:	4f10      	ldr	r7, [pc, #64]	; (d46d0 <_ZN23GoogleMapsDeviceLocator8wifiScanEv+0x48>)

	requestCur += sprintf(requestCur, "{\"w\":{\"a\":");
	*requestCur++ = '[';
   d468e:	4e11      	ldr	r6, [pc, #68]	; (d46d4 <_ZN23GoogleMapsDeviceLocator8wifiScanEv+0x4c>)
const char *GoogleMapsDeviceLocator::wifiScan() {

	requestCur = requestBuf;
	numAdded = 0;

	requestCur += sprintf(requestCur, "{\"w\":{\"a\":");
   d4690:	4911      	ldr	r1, [pc, #68]	; (d46d8 <_ZN23GoogleMapsDeviceLocator8wifiScanEv+0x50>)


const char *GoogleMapsDeviceLocator::wifiScan() {

	requestCur = requestBuf;
	numAdded = 0;
   d4692:	2500      	movs	r5, #0

	requestCur += sprintf(requestCur, "{\"w\":{\"a\":");
   d4694:	4620      	mov	r0, r4


const char *GoogleMapsDeviceLocator::wifiScan() {

	requestCur = requestBuf;
	numAdded = 0;
   d4696:	603d      	str	r5, [r7, #0]

	requestCur += sprintf(requestCur, "{\"w\":{\"a\":");
   d4698:	f002 fc80 	bl	d6f9c <strcpy>
	*requestCur++ = '[';
   d469c:	f104 030b 	add.w	r3, r4, #11
   d46a0:	6033      	str	r3, [r6, #0]
   d46a2:	235b      	movs	r3, #91	; 0x5b
   d46a4:	72a3      	strb	r3, [r4, #10]
    {
        setIPAddressSource(DYNAMIC_IP);
    }

    int scan(wlan_scan_result_t callback, void* cookie=NULL) {
        return wlan_scan(callback, cookie);
   d46a6:	4629      	mov	r1, r5
   d46a8:	480c      	ldr	r0, [pc, #48]	; (d46dc <_ZN23GoogleMapsDeviceLocator8wifiScanEv+0x54>)
   d46aa:	f000 fa19 	bl	d4ae0 <wlan_scan>

	WiFi.scan(wifiScanCallback);

	*requestCur++ = ']';
   d46ae:	6833      	ldr	r3, [r6, #0]
   d46b0:	225d      	movs	r2, #93	; 0x5d
   d46b2:	701a      	strb	r2, [r3, #0]
	*requestCur++ = '}';
   d46b4:	227d      	movs	r2, #125	; 0x7d
   d46b6:	705a      	strb	r2, [r3, #1]
	*requestCur++ = '}';
   d46b8:	709a      	strb	r2, [r3, #2]
	*requestCur++ = 0;
   d46ba:	70dd      	strb	r5, [r3, #3]
   d46bc:	1d1a      	adds	r2, r3, #4

	if (numAdded == 0) {
   d46be:	683b      	ldr	r3, [r7, #0]
	WiFi.scan(wifiScanCallback);

	*requestCur++ = ']';
	*requestCur++ = '}';
	*requestCur++ = '}';
	*requestCur++ = 0;
   d46c0:	6032      	str	r2, [r6, #0]

	if (numAdded == 0) {
   d46c2:	b903      	cbnz	r3, d46c6 <_ZN23GoogleMapsDeviceLocator8wifiScanEv+0x3e>
		requestBuf[0] = 0;
   d46c4:	7023      	strb	r3, [r4, #0]
	}

	return requestBuf;
}
   d46c6:	4801      	ldr	r0, [pc, #4]	; (d46cc <_ZN23GoogleMapsDeviceLocator8wifiScanEv+0x44>)
   d46c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d46ca:	bf00      	nop
   d46cc:	2003e27d 	.word	0x2003e27d
   d46d0:	2003e278 	.word	0x2003e278
   d46d4:	2003e380 	.word	0x2003e380
   d46d8:	000d95e1 	.word	0x000d95e1
   d46dc:	000d44c5 	.word	0x000d44c5

000d46e0 <_ZN23GoogleMapsDeviceLocator15publishLocationEv>:
	return cellularScan();
#endif
}


void GoogleMapsDeviceLocator::publishLocation() {
   d46e0:	b530      	push	{r4, r5, lr}
   d46e2:	b085      	sub	sp, #20
   d46e4:	4605      	mov	r5, r0

	Serial.println("publishLocation");
   d46e6:	f001 fb83 	bl	d5df0 <_Z16_fetch_usbserialv>
   d46ea:	4918      	ldr	r1, [pc, #96]	; (d474c <_ZN23GoogleMapsDeviceLocator15publishLocationEv+0x6c>)
   d46ec:	f001 f8e5 	bl	d58ba <_ZN5Print7printlnEPKc>

}

const char *GoogleMapsDeviceLocator::scan() {
#if Wiring_WiFi
	return wifiScan();
   d46f0:	4628      	mov	r0, r5
   d46f2:	f7ff ffc9 	bl	d4688 <_ZN23GoogleMapsDeviceLocator8wifiScanEv>
   d46f6:	4604      	mov	r4, r0

	Serial.println("publishLocation");

	const char *scanData = scan();

	Serial.printlnf("scanData=%s", scanData);
   d46f8:	f001 fb7a 	bl	d5df0 <_Z16_fetch_usbserialv>
   d46fc:	4623      	mov	r3, r4
   d46fe:	4a14      	ldr	r2, [pc, #80]	; (d4750 <_ZN23GoogleMapsDeviceLocator15publishLocationEv+0x70>)
   d4700:	2101      	movs	r1, #1
   d4702:	f001 f904 	bl	d590e <_ZN5Print11printf_implEbPKcz>

	if (scanData[0]) {
   d4706:	7823      	ldrb	r3, [r4, #0]
   d4708:	b1f3      	cbz	r3, d4748 <_ZN23GoogleMapsDeviceLocator15publishLocationEv+0x68>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d470a:	f000 fa3d 	bl	d4b88 <spark_cloud_flag_connected>

		if (Particle.connected()) {
   d470e:	b1d8      	cbz	r0, d4748 <_ZN23GoogleMapsDeviceLocator15publishLocationEv+0x68>
   d4710:	4b10      	ldr	r3, [pc, #64]	; (d4754 <_ZN23GoogleMapsDeviceLocator15publishLocationEv+0x74>)
   d4712:	68e9      	ldr	r1, [r5, #12]
   d4714:	781b      	ldrb	r3, [r3, #0]
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4716:	f88d 3000 	strb.w	r3, [sp]
   d471a:	4622      	mov	r2, r4
   d471c:	233c      	movs	r3, #60	; 0x3c
   d471e:	a802      	add	r0, sp, #8
   d4720:	f000 fca8 	bl	d5074 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d4724:	9c03      	ldr	r4, [sp, #12]
   d4726:	b17c      	cbz	r4, d4748 <_ZN23GoogleMapsDeviceLocator15publishLocationEv+0x68>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d4728:	6863      	ldr	r3, [r4, #4]
   d472a:	3b01      	subs	r3, #1
   d472c:	6063      	str	r3, [r4, #4]
   d472e:	b95b      	cbnz	r3, d4748 <_ZN23GoogleMapsDeviceLocator15publishLocationEv+0x68>
        {
          _M_dispose();
   d4730:	6823      	ldr	r3, [r4, #0]
   d4732:	4620      	mov	r0, r4
   d4734:	689b      	ldr	r3, [r3, #8]
   d4736:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4738:	68a3      	ldr	r3, [r4, #8]
   d473a:	3b01      	subs	r3, #1
   d473c:	60a3      	str	r3, [r4, #8]
   d473e:	b91b      	cbnz	r3, d4748 <_ZN23GoogleMapsDeviceLocator15publishLocationEv+0x68>
            _M_destroy();
   d4740:	6823      	ldr	r3, [r4, #0]
   d4742:	4620      	mov	r0, r4
   d4744:	68db      	ldr	r3, [r3, #12]
   d4746:	4798      	blx	r3
			Particle.publish(eventName, scanData, PRIVATE);
		}
	}
}
   d4748:	b005      	add	sp, #20
   d474a:	bd30      	pop	{r4, r5, pc}
   d474c:	000d95ec 	.word	0x000d95ec
   d4750:	000d95fc 	.word	0x000d95fc
   d4754:	2003e27c 	.word	0x2003e27c

000d4758 <_ZN23GoogleMapsDeviceLocator4loopEv>:
	return *this;
}



void GoogleMapsDeviceLocator::loop() {
   d4758:	b510      	push	{r4, lr}
	switch(state) {
   d475a:	6a03      	ldr	r3, [r0, #32]
   d475c:	2b02      	cmp	r3, #2
	return *this;
}



void GoogleMapsDeviceLocator::loop() {
   d475e:	4604      	mov	r4, r0
	switch(state) {
   d4760:	d00b      	beq.n	d477a <_ZN23GoogleMapsDeviceLocator4loopEv+0x22>
   d4762:	2b03      	cmp	r3, #3
   d4764:	d023      	beq.n	d47ae <_ZN23GoogleMapsDeviceLocator4loopEv+0x56>
   d4766:	2b00      	cmp	r3, #0
   d4768:	d134      	bne.n	d47d4 <_ZN23GoogleMapsDeviceLocator4loopEv+0x7c>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d476a:	f000 fa0d 	bl	d4b88 <spark_cloud_flag_connected>
	case CONNECT_WAIT_STATE:
		if (Particle.connected()) {
   d476e:	b388      	cbz	r0, d47d4 <_ZN23GoogleMapsDeviceLocator4loopEv+0x7c>
			state = CONNECTED_WAIT_STATE;
   d4770:	2302      	movs	r3, #2
   d4772:	6223      	str	r3, [r4, #32]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4774:	f000 f8c4 	bl	d4900 <HAL_Timer_Get_Milli_Seconds>
   d4778:	e017      	b.n	d47aa <_ZN23GoogleMapsDeviceLocator4loopEv+0x52>
   d477a:	f000 f8c1 	bl	d4900 <HAL_Timer_Get_Milli_Seconds>
			stateTime = millis();
		}
		break;

	case CONNECTED_WAIT_STATE:
		if (millis() - stateTime >= waitAfterConnect) {
   d477e:	69e3      	ldr	r3, [r4, #28]
   d4780:	1ac0      	subs	r0, r0, r3
   d4782:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   d4784:	4298      	cmp	r0, r3
   d4786:	d325      	bcc.n	d47d4 <_ZN23GoogleMapsDeviceLocator4loopEv+0x7c>
			// Wait several seconds after connecting before doing the location
			if (locatorMode == LOCATOR_MODE_ONCE) {
   d4788:	6863      	ldr	r3, [r4, #4]
   d478a:	2b01      	cmp	r3, #1
   d478c:	d103      	bne.n	d4796 <_ZN23GoogleMapsDeviceLocator4loopEv+0x3e>
				publishLocation();
   d478e:	4620      	mov	r0, r4
   d4790:	f7ff ffa6 	bl	d46e0 <_ZN23GoogleMapsDeviceLocator15publishLocationEv>
   d4794:	e000      	b.n	d4798 <_ZN23GoogleMapsDeviceLocator4loopEv+0x40>

				state = IDLE_STATE;
			}
			else
			if (locatorMode == LOCATOR_MODE_MANUAL) {
   d4796:	b913      	cbnz	r3, d479e <_ZN23GoogleMapsDeviceLocator4loopEv+0x46>
				state = IDLE_STATE;
   d4798:	2304      	movs	r3, #4
   d479a:	6223      	str	r3, [r4, #32]
   d479c:	bd10      	pop	{r4, pc}
			}
			else {
				state = CONNECTED_STATE;
   d479e:	2303      	movs	r3, #3
   d47a0:	6223      	str	r3, [r4, #32]
   d47a2:	f000 f8ad 	bl	d4900 <HAL_Timer_Get_Milli_Seconds>
				stateTime = millis() - periodMs;
   d47a6:	68a3      	ldr	r3, [r4, #8]
   d47a8:	1ac0      	subs	r0, r0, r3
   d47aa:	61e0      	str	r0, [r4, #28]
   d47ac:	bd10      	pop	{r4, pc}
   d47ae:	f000 f9eb 	bl	d4b88 <spark_cloud_flag_connected>
			}
		}
		break;

	case CONNECTED_STATE:
		if (Particle.connected()) {
   d47b2:	b170      	cbz	r0, d47d2 <_ZN23GoogleMapsDeviceLocator4loopEv+0x7a>
   d47b4:	f000 f8a4 	bl	d4900 <HAL_Timer_Get_Milli_Seconds>
			if (millis() - stateTime >= periodMs) {
   d47b8:	69e3      	ldr	r3, [r4, #28]
   d47ba:	1ac0      	subs	r0, r0, r3
   d47bc:	68a3      	ldr	r3, [r4, #8]
   d47be:	4298      	cmp	r0, r3
   d47c0:	d308      	bcc.n	d47d4 <_ZN23GoogleMapsDeviceLocator4loopEv+0x7c>
   d47c2:	f000 f89d 	bl	d4900 <HAL_Timer_Get_Milli_Seconds>
				stateTime = millis();
   d47c6:	61e0      	str	r0, [r4, #28]
				publishLocation();
   d47c8:	4620      	mov	r0, r4
	case IDLE_STATE:
		// Just hang out here forever (entered only on LOCATOR_MODE_ONCE)
		break;
	}

}
   d47ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

	case CONNECTED_STATE:
		if (Particle.connected()) {
			if (millis() - stateTime >= periodMs) {
				stateTime = millis();
				publishLocation();
   d47ce:	f7ff bf87 	b.w	d46e0 <_ZN23GoogleMapsDeviceLocator15publishLocationEv>
			}
		}
		else {
			// We have disconnected, rec
			state = CONNECT_WAIT_STATE;
   d47d2:	6220      	str	r0, [r4, #32]
   d47d4:	bd10      	pop	{r4, pc}

000d47d6 <_ZNSt8functionIFvPKcS1_EEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d47d6:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d47d8:	2300      	movs	r3, #0
   d47da:	6083      	str	r3, [r0, #8]
   d47dc:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d47de:	4604      	mov	r4, r0
   d47e0:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d47e2:	b12b      	cbz	r3, d47f0 <_ZNSt8functionIFvPKcS1_EEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d47e4:	2202      	movs	r2, #2
   d47e6:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d47e8:	68eb      	ldr	r3, [r5, #12]
   d47ea:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d47ec:	68ab      	ldr	r3, [r5, #8]
   d47ee:	60a3      	str	r3, [r4, #8]
	}
    }
   d47f0:	4620      	mov	r0, r4
   d47f2:	bd38      	pop	{r3, r4, r5, pc}

000d47f4 <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE>:
GoogleMapsDeviceLocator &GoogleMapsDeviceLocator::withEventName(const char *name) {
	this->eventName = name;
	return *this;
}

GoogleMapsDeviceLocator &GoogleMapsDeviceLocator::withSubscribe(GoogleMapsDeviceLocatorSubscriptionCallback callback) {
   d47f4:	b530      	push	{r4, r5, lr}
   d47f6:	b08b      	sub	sp, #44	; 0x2c
   d47f8:	68c5      	ldr	r5, [r0, #12]
	this->callback = callback;
   d47fa:	6241      	str	r1, [r0, #36]	; 0x24
GoogleMapsDeviceLocator &GoogleMapsDeviceLocator::withEventName(const char *name) {
	this->eventName = name;
	return *this;
}

GoogleMapsDeviceLocator &GoogleMapsDeviceLocator::withSubscribe(GoogleMapsDeviceLocatorSubscriptionCallback callback) {
   d47fc:	4604      	mov	r4, r0
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, long seconds = 0, SleepOptionFlags flag = SLEEP_NETWORK_OFF) { return sleepPinImpl(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, std::chrono::seconds s, SleepOptionFlags flag = SLEEP_NETWORK_OFF) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, s.count(), flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, long seconds = 0) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, std::chrono::seconds s) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, flag, s.count()); }

    static String deviceID(void) { return spark_deviceID(); }
   d47fe:	a806      	add	r0, sp, #24
   d4800:	f000 f9ca 	bl	d4b98 <spark_deviceID>
	this->callback = callback;

	snprintf(requestBuf, sizeof(requestBuf), "hook-response/%s/%s", eventName.c_str(), System.deviceID().c_str());
   d4804:	9b06      	ldr	r3, [sp, #24]
   d4806:	9300      	str	r3, [sp, #0]
   d4808:	4a1b      	ldr	r2, [pc, #108]	; (d4878 <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE+0x84>)
   d480a:	481c      	ldr	r0, [pc, #112]	; (d487c <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE+0x88>)
   d480c:	462b      	mov	r3, r5
   d480e:	f44f 7180 	mov.w	r1, #256	; 0x100
   d4812:	f000 fa59 	bl	d4cc8 <snprintf>
   d4816:	a806      	add	r0, sp, #24
   d4818:	f001 f8c8 	bl	d59ac <_ZN6StringD1Ev>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d481c:	2500      	movs	r5, #0
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d481e:	200c      	movs	r0, #12
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4820:	9504      	str	r5, [sp, #16]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4822:	f7ff fc3a 	bl	d409a <_Znwj>
   d4826:	b118      	cbz	r0, d4830 <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE+0x3c>
	{ }

      _Bind(const _Bind&) = default;

      _Bind(_Bind&& __b)
      : _M_f(std::move(__b._M_f)), _M_bound_args(std::move(__b._M_bound_args))
   d4828:	4b15      	ldr	r3, [pc, #84]	; (d4880 <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE+0x8c>)
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d482a:	6084      	str	r4, [r0, #8]
   d482c:	e880 0028 	stmia.w	r0, {r3, r5}
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d4830:	4b14      	ldr	r3, [pc, #80]	; (d4884 <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE+0x90>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4832:	9002      	str	r0, [sp, #8]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d4834:	9305      	str	r3, [sp, #20]
        return spark_subscribe(eventName, handler, NULL, MY_DEVICES, deviceID, NULL);
    }

    bool subscribe(const char *eventName, wiring_event_handler_t handler, Spark_Subscription_Scope_TypeDef scope)
    {
        return subscribe_wiring(eventName, handler, scope);
   d4836:	a902      	add	r1, sp, #8
	    _M_manager = &_My_handler::_M_manager;
   d4838:	4b13      	ldr	r3, [pc, #76]	; (d4888 <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE+0x94>)
   d483a:	9304      	str	r3, [sp, #16]
   d483c:	a806      	add	r0, sp, #24
   d483e:	f7ff ffca 	bl	d47d6 <_ZNSt8functionIFvPKcS1_EEC1ERKS3_>
    }

    bool subscribe_wiring(const char *eventName, wiring_event_handler_t handler, Spark_Subscription_Scope_TypeDef scope, const char *deviceID = NULL)
    {
        bool success = false;
        if (handler) // if the call-wrapper has wrapped a callable object
   d4842:	9b08      	ldr	r3, [sp, #32]
   d4844:	b17b      	cbz	r3, d4866 <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE+0x72>
        {
            auto wrapper = new wiring_event_handler_t(handler);
   d4846:	2010      	movs	r0, #16
   d4848:	f7ff fc27 	bl	d409a <_Znwj>
   d484c:	4605      	mov	r5, r0
   d484e:	b150      	cbz	r0, d4866 <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE+0x72>
   d4850:	a906      	add	r1, sp, #24
   d4852:	f7ff ffc0 	bl	d47d6 <_ZNSt8functionIFvPKcS1_EEC1ERKS3_>
            if (wrapper) {
                success = spark_subscribe(eventName, (EventHandler)call_wiring_event_handler, wrapper, scope, deviceID, NULL);
   d4856:	2300      	movs	r3, #0
   d4858:	9301      	str	r3, [sp, #4]
   d485a:	9300      	str	r3, [sp, #0]
   d485c:	462a      	mov	r2, r5
   d485e:	490b      	ldr	r1, [pc, #44]	; (d488c <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE+0x98>)
   d4860:	4806      	ldr	r0, [pc, #24]	; (d487c <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE+0x88>)
   d4862:	f000 f9a9 	bl	d4bb8 <spark_subscribe>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4866:	a806      	add	r0, sp, #24
   d4868:	f7ff fecc 	bl	d4604 <_ZNSt14_Function_baseD1Ev>
   d486c:	a802      	add	r0, sp, #8
   d486e:	f7ff fec9 	bl	d4604 <_ZNSt14_Function_baseD1Ev>

	Particle.subscribe(requestBuf, &GoogleMapsDeviceLocator::subscriptionHandler, this, MY_DEVICES);

	return *this;
}
   d4872:	4620      	mov	r0, r4
   d4874:	b00b      	add	sp, #44	; 0x2c
   d4876:	bd30      	pop	{r4, r5, pc}
   d4878:	000d9608 	.word	0x000d9608
   d487c:	2003e27d 	.word	0x2003e27d
   d4880:	000d4545 	.word	0x000d4545
   d4884:	000d446d 	.word	0x000d446d
   d4888:	000d45cd 	.word	0x000d45cd
   d488c:	000d4e45 	.word	0x000d4e45

000d4890 <_GLOBAL__sub_I__ZN23GoogleMapsDeviceLocatorC2Ev>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d4890:	4b02      	ldr	r3, [pc, #8]	; (d489c <_GLOBAL__sub_I__ZN23GoogleMapsDeviceLocatorC2Ev+0xc>)
   d4892:	2201      	movs	r2, #1
   d4894:	701a      	strb	r2, [r3, #0]
   d4896:	f000 b84b 	b.w	d4930 <HAL_Pin_Map>
   d489a:	bf00      	nop
   d489c:	2003e27c 	.word	0x2003e27c

000d48a0 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d48a0:	b508      	push	{r3, lr}
   d48a2:	4b02      	ldr	r3, [pc, #8]	; (d48ac <os_thread_is_current+0xc>)
   d48a4:	681b      	ldr	r3, [r3, #0]
   d48a6:	689b      	ldr	r3, [r3, #8]
   d48a8:	9301      	str	r3, [sp, #4]
   d48aa:	bd08      	pop	{r3, pc}
   d48ac:	00030248 	.word	0x00030248

000d48b0 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d48b0:	b508      	push	{r3, lr}
   d48b2:	4b02      	ldr	r3, [pc, #8]	; (d48bc <os_thread_join+0xc>)
   d48b4:	681b      	ldr	r3, [r3, #0]
   d48b6:	691b      	ldr	r3, [r3, #16]
   d48b8:	9301      	str	r3, [sp, #4]
   d48ba:	bd08      	pop	{r3, pc}
   d48bc:	00030248 	.word	0x00030248

000d48c0 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d48c0:	b508      	push	{r3, lr}
   d48c2:	4b02      	ldr	r3, [pc, #8]	; (d48cc <os_thread_cleanup+0xc>)
   d48c4:	681b      	ldr	r3, [r3, #0]
   d48c6:	695b      	ldr	r3, [r3, #20]
   d48c8:	9301      	str	r3, [sp, #4]
   d48ca:	bd08      	pop	{r3, pc}
   d48cc:	00030248 	.word	0x00030248

000d48d0 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d48d0:	b508      	push	{r3, lr}
   d48d2:	4b02      	ldr	r3, [pc, #8]	; (d48dc <os_mutex_recursive_create+0xc>)
   d48d4:	681b      	ldr	r3, [r3, #0]
   d48d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d48d8:	9301      	str	r3, [sp, #4]
   d48da:	bd08      	pop	{r3, pc}
   d48dc:	00030248 	.word	0x00030248

000d48e0 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d48e0:	b508      	push	{r3, lr}
   d48e2:	4b02      	ldr	r3, [pc, #8]	; (d48ec <os_mutex_recursive_destroy+0xc>)
   d48e4:	681b      	ldr	r3, [r3, #0]
   d48e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d48e8:	9301      	str	r3, [sp, #4]
   d48ea:	bd08      	pop	{r3, pc}
   d48ec:	00030248 	.word	0x00030248

000d48f0 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d48f0:	b508      	push	{r3, lr}
   d48f2:	4b02      	ldr	r3, [pc, #8]	; (d48fc <HAL_RNG_GetRandomNumber+0xc>)
   d48f4:	681b      	ldr	r3, [r3, #0]
   d48f6:	685b      	ldr	r3, [r3, #4]
   d48f8:	9301      	str	r3, [sp, #4]
   d48fa:	bd08      	pop	{r3, pc}
   d48fc:	00030218 	.word	0x00030218

000d4900 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4900:	b508      	push	{r3, lr}
   d4902:	4b02      	ldr	r3, [pc, #8]	; (d490c <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4904:	681b      	ldr	r3, [r3, #0]
   d4906:	695b      	ldr	r3, [r3, #20]
   d4908:	9301      	str	r3, [sp, #4]
   d490a:	bd08      	pop	{r3, pc}
   d490c:	00030218 	.word	0x00030218

000d4910 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
   d4910:	b508      	push	{r3, lr}
   d4912:	4b02      	ldr	r3, [pc, #8]	; (d491c <HAL_RTC_Get_UnixTime+0xc>)
   d4914:	681b      	ldr	r3, [r3, #0]
   d4916:	69db      	ldr	r3, [r3, #28]
   d4918:	9301      	str	r3, [sp, #4]
   d491a:	bd08      	pop	{r3, pc}
   d491c:	00030218 	.word	0x00030218

000d4920 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
   d4920:	b508      	push	{r3, lr}
   d4922:	4b02      	ldr	r3, [pc, #8]	; (d492c <HAL_RTC_Time_Is_Valid+0xc>)
   d4924:	681b      	ldr	r3, [r3, #0]
   d4926:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d4928:	9301      	str	r3, [sp, #4]
   d492a:	bd08      	pop	{r3, pc}
   d492c:	00030218 	.word	0x00030218

000d4930 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d4930:	b508      	push	{r3, lr}
   d4932:	4b02      	ldr	r3, [pc, #8]	; (d493c <HAL_Pin_Map+0xc>)
   d4934:	681b      	ldr	r3, [r3, #0]
   d4936:	681b      	ldr	r3, [r3, #0]
   d4938:	9301      	str	r3, [sp, #4]
   d493a:	bd08      	pop	{r3, pc}
   d493c:	0003022c 	.word	0x0003022c

000d4940 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d4940:	b508      	push	{r3, lr}
   d4942:	4b02      	ldr	r3, [pc, #8]	; (d494c <HAL_I2C_Begin+0xc>)
   d4944:	681b      	ldr	r3, [r3, #0]
   d4946:	68db      	ldr	r3, [r3, #12]
   d4948:	9301      	str	r3, [sp, #4]
   d494a:	bd08      	pop	{r3, pc}
   d494c:	00030228 	.word	0x00030228

000d4950 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
   d4950:	b508      	push	{r3, lr}
   d4952:	4b02      	ldr	r3, [pc, #8]	; (d495c <HAL_I2C_Begin_Transmission+0xc>)
   d4954:	681b      	ldr	r3, [r3, #0]
   d4956:	699b      	ldr	r3, [r3, #24]
   d4958:	9301      	str	r3, [sp, #4]
   d495a:	bd08      	pop	{r3, pc}
   d495c:	00030228 	.word	0x00030228

000d4960 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d4960:	b508      	push	{r3, lr}
   d4962:	4b02      	ldr	r3, [pc, #8]	; (d496c <HAL_I2C_End_Transmission+0xc>)
   d4964:	681b      	ldr	r3, [r3, #0]
   d4966:	69db      	ldr	r3, [r3, #28]
   d4968:	9301      	str	r3, [sp, #4]
   d496a:	bd08      	pop	{r3, pc}
   d496c:	00030228 	.word	0x00030228

000d4970 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d4970:	b508      	push	{r3, lr}
   d4972:	4b02      	ldr	r3, [pc, #8]	; (d497c <HAL_I2C_Write_Data+0xc>)
   d4974:	681b      	ldr	r3, [r3, #0]
   d4976:	6a1b      	ldr	r3, [r3, #32]
   d4978:	9301      	str	r3, [sp, #4]
   d497a:	bd08      	pop	{r3, pc}
   d497c:	00030228 	.word	0x00030228

000d4980 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d4980:	b508      	push	{r3, lr}
   d4982:	4b02      	ldr	r3, [pc, #8]	; (d498c <HAL_I2C_Available_Data+0xc>)
   d4984:	681b      	ldr	r3, [r3, #0]
   d4986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4988:	9301      	str	r3, [sp, #4]
   d498a:	bd08      	pop	{r3, pc}
   d498c:	00030228 	.word	0x00030228

000d4990 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d4990:	b508      	push	{r3, lr}
   d4992:	4b02      	ldr	r3, [pc, #8]	; (d499c <HAL_I2C_Read_Data+0xc>)
   d4994:	681b      	ldr	r3, [r3, #0]
   d4996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4998:	9301      	str	r3, [sp, #4]
   d499a:	bd08      	pop	{r3, pc}
   d499c:	00030228 	.word	0x00030228

000d49a0 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d49a0:	b508      	push	{r3, lr}
   d49a2:	4b02      	ldr	r3, [pc, #8]	; (d49ac <HAL_I2C_Peek_Data+0xc>)
   d49a4:	681b      	ldr	r3, [r3, #0]
   d49a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d49a8:	9301      	str	r3, [sp, #4]
   d49aa:	bd08      	pop	{r3, pc}
   d49ac:	00030228 	.word	0x00030228

000d49b0 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d49b0:	b508      	push	{r3, lr}
   d49b2:	4b02      	ldr	r3, [pc, #8]	; (d49bc <HAL_I2C_Flush_Data+0xc>)
   d49b4:	681b      	ldr	r3, [r3, #0]
   d49b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d49b8:	9301      	str	r3, [sp, #4]
   d49ba:	bd08      	pop	{r3, pc}
   d49bc:	00030228 	.word	0x00030228

000d49c0 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d49c0:	b508      	push	{r3, lr}
   d49c2:	4b02      	ldr	r3, [pc, #8]	; (d49cc <HAL_I2C_Init+0xc>)
   d49c4:	681b      	ldr	r3, [r3, #0]
   d49c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d49c8:	9301      	str	r3, [sp, #4]
   d49ca:	bd08      	pop	{r3, pc}
   d49cc:	00030228 	.word	0x00030228

000d49d0 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d49d0:	b508      	push	{r3, lr}
   d49d2:	4b02      	ldr	r3, [pc, #8]	; (d49dc <inet_inet_ntop+0xc>)
   d49d4:	681b      	ldr	r3, [r3, #0]
   d49d6:	695b      	ldr	r3, [r3, #20]
   d49d8:	9301      	str	r3, [sp, #4]
   d49da:	bd08      	pop	{r3, pc}
   d49dc:	00030264 	.word	0x00030264

000d49e0 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d49e0:	b508      	push	{r3, lr}
   d49e2:	4b02      	ldr	r3, [pc, #8]	; (d49ec <netdb_freeaddrinfo+0xc>)
   d49e4:	681b      	ldr	r3, [r3, #0]
   d49e6:	689b      	ldr	r3, [r3, #8]
   d49e8:	9301      	str	r3, [sp, #4]
   d49ea:	bd08      	pop	{r3, pc}
   d49ec:	00030268 	.word	0x00030268

000d49f0 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d49f0:	b508      	push	{r3, lr}
   d49f2:	4b02      	ldr	r3, [pc, #8]	; (d49fc <netdb_getaddrinfo+0xc>)
   d49f4:	681b      	ldr	r3, [r3, #0]
   d49f6:	68db      	ldr	r3, [r3, #12]
   d49f8:	9301      	str	r3, [sp, #4]
   d49fa:	bd08      	pop	{r3, pc}
   d49fc:	00030268 	.word	0x00030268

000d4a00 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d4a00:	b508      	push	{r3, lr}
   d4a02:	4b02      	ldr	r3, [pc, #8]	; (d4a0c <HAL_USART_Init+0xc>)
   d4a04:	681b      	ldr	r3, [r3, #0]
   d4a06:	681b      	ldr	r3, [r3, #0]
   d4a08:	9301      	str	r3, [sp, #4]
   d4a0a:	bd08      	pop	{r3, pc}
   d4a0c:	0003023c 	.word	0x0003023c

000d4a10 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d4a10:	b508      	push	{r3, lr}
   d4a12:	4b02      	ldr	r3, [pc, #8]	; (d4a1c <HAL_USART_Write_Data+0xc>)
   d4a14:	681b      	ldr	r3, [r3, #0]
   d4a16:	68db      	ldr	r3, [r3, #12]
   d4a18:	9301      	str	r3, [sp, #4]
   d4a1a:	bd08      	pop	{r3, pc}
   d4a1c:	0003023c 	.word	0x0003023c

000d4a20 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d4a20:	b508      	push	{r3, lr}
   d4a22:	4b02      	ldr	r3, [pc, #8]	; (d4a2c <HAL_USART_Available_Data+0xc>)
   d4a24:	681b      	ldr	r3, [r3, #0]
   d4a26:	691b      	ldr	r3, [r3, #16]
   d4a28:	9301      	str	r3, [sp, #4]
   d4a2a:	bd08      	pop	{r3, pc}
   d4a2c:	0003023c 	.word	0x0003023c

000d4a30 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d4a30:	b508      	push	{r3, lr}
   d4a32:	4b02      	ldr	r3, [pc, #8]	; (d4a3c <HAL_USART_Read_Data+0xc>)
   d4a34:	681b      	ldr	r3, [r3, #0]
   d4a36:	695b      	ldr	r3, [r3, #20]
   d4a38:	9301      	str	r3, [sp, #4]
   d4a3a:	bd08      	pop	{r3, pc}
   d4a3c:	0003023c 	.word	0x0003023c

000d4a40 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d4a40:	b508      	push	{r3, lr}
   d4a42:	4b02      	ldr	r3, [pc, #8]	; (d4a4c <HAL_USART_Peek_Data+0xc>)
   d4a44:	681b      	ldr	r3, [r3, #0]
   d4a46:	699b      	ldr	r3, [r3, #24]
   d4a48:	9301      	str	r3, [sp, #4]
   d4a4a:	bd08      	pop	{r3, pc}
   d4a4c:	0003023c 	.word	0x0003023c

000d4a50 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d4a50:	b508      	push	{r3, lr}
   d4a52:	4b02      	ldr	r3, [pc, #8]	; (d4a5c <HAL_USART_Flush_Data+0xc>)
   d4a54:	681b      	ldr	r3, [r3, #0]
   d4a56:	69db      	ldr	r3, [r3, #28]
   d4a58:	9301      	str	r3, [sp, #4]
   d4a5a:	bd08      	pop	{r3, pc}
   d4a5c:	0003023c 	.word	0x0003023c

000d4a60 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d4a60:	b508      	push	{r3, lr}
   d4a62:	4b02      	ldr	r3, [pc, #8]	; (d4a6c <HAL_USART_Available_Data_For_Write+0xc>)
   d4a64:	681b      	ldr	r3, [r3, #0]
   d4a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4a68:	9301      	str	r3, [sp, #4]
   d4a6a:	bd08      	pop	{r3, pc}
   d4a6c:	0003023c 	.word	0x0003023c

000d4a70 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4a70:	b508      	push	{r3, lr}
   d4a72:	4b02      	ldr	r3, [pc, #8]	; (d4a7c <HAL_USB_USART_Init+0xc>)
   d4a74:	681b      	ldr	r3, [r3, #0]
   d4a76:	681b      	ldr	r3, [r3, #0]
   d4a78:	9301      	str	r3, [sp, #4]
   d4a7a:	bd08      	pop	{r3, pc}
   d4a7c:	0003024c 	.word	0x0003024c

000d4a80 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d4a80:	b508      	push	{r3, lr}
   d4a82:	4b02      	ldr	r3, [pc, #8]	; (d4a8c <HAL_USB_USART_Begin+0xc>)
   d4a84:	681b      	ldr	r3, [r3, #0]
   d4a86:	685b      	ldr	r3, [r3, #4]
   d4a88:	9301      	str	r3, [sp, #4]
   d4a8a:	bd08      	pop	{r3, pc}
   d4a8c:	0003024c 	.word	0x0003024c

000d4a90 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4a90:	b508      	push	{r3, lr}
   d4a92:	4b02      	ldr	r3, [pc, #8]	; (d4a9c <HAL_USB_USART_Available_Data+0xc>)
   d4a94:	681b      	ldr	r3, [r3, #0]
   d4a96:	691b      	ldr	r3, [r3, #16]
   d4a98:	9301      	str	r3, [sp, #4]
   d4a9a:	bd08      	pop	{r3, pc}
   d4a9c:	0003024c 	.word	0x0003024c

000d4aa0 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4aa0:	b508      	push	{r3, lr}
   d4aa2:	4b02      	ldr	r3, [pc, #8]	; (d4aac <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4aa4:	681b      	ldr	r3, [r3, #0]
   d4aa6:	695b      	ldr	r3, [r3, #20]
   d4aa8:	9301      	str	r3, [sp, #4]
   d4aaa:	bd08      	pop	{r3, pc}
   d4aac:	0003024c 	.word	0x0003024c

000d4ab0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4ab0:	b508      	push	{r3, lr}
   d4ab2:	4b02      	ldr	r3, [pc, #8]	; (d4abc <HAL_USB_USART_Receive_Data+0xc>)
   d4ab4:	681b      	ldr	r3, [r3, #0]
   d4ab6:	699b      	ldr	r3, [r3, #24]
   d4ab8:	9301      	str	r3, [sp, #4]
   d4aba:	bd08      	pop	{r3, pc}
   d4abc:	0003024c 	.word	0x0003024c

000d4ac0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4ac0:	b508      	push	{r3, lr}
   d4ac2:	4b02      	ldr	r3, [pc, #8]	; (d4acc <HAL_USB_USART_Send_Data+0xc>)
   d4ac4:	681b      	ldr	r3, [r3, #0]
   d4ac6:	69db      	ldr	r3, [r3, #28]
   d4ac8:	9301      	str	r3, [sp, #4]
   d4aca:	bd08      	pop	{r3, pc}
   d4acc:	0003024c 	.word	0x0003024c

000d4ad0 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4ad0:	b508      	push	{r3, lr}
   d4ad2:	4b02      	ldr	r3, [pc, #8]	; (d4adc <HAL_USB_USART_Flush_Data+0xc>)
   d4ad4:	681b      	ldr	r3, [r3, #0]
   d4ad6:	6a1b      	ldr	r3, [r3, #32]
   d4ad8:	9301      	str	r3, [sp, #4]
   d4ada:	bd08      	pop	{r3, pc}
   d4adc:	0003024c 	.word	0x0003024c

000d4ae0 <wlan_scan>:
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
DYNALIB_FN(19, hal_wlan, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(20, hal_wlan, wlan_select_antenna, int(WLanSelectAntenna_TypeDef))
DYNALIB_FN(21, hal_wlan, wlan_set_ipaddress, void(const HAL_IPAddress*, const HAL_IPAddress*, const HAL_IPAddress*, const HAL_IPAddress*, const HAL_IPAddress*, void*))
DYNALIB_FN(22, hal_wlan, wlan_set_ipaddress_source, void(IPAddressSource, bool, void*))
DYNALIB_FN(23, hal_wlan, wlan_scan, int(wlan_scan_result_t, void*))
   d4ae0:	b508      	push	{r3, lr}
   d4ae2:	4b02      	ldr	r3, [pc, #8]	; (d4aec <wlan_scan+0xc>)
   d4ae4:	681b      	ldr	r3, [r3, #0]
   d4ae6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d4ae8:	9301      	str	r3, [sp, #4]
   d4aea:	bd08      	pop	{r3, pc}
   d4aec:	00030274 	.word	0x00030274

000d4af0 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d4af0:	b508      	push	{r3, lr}
   d4af2:	4b02      	ldr	r3, [pc, #8]	; (d4afc <system_mode+0xc>)
   d4af4:	681b      	ldr	r3, [r3, #0]
   d4af6:	681b      	ldr	r3, [r3, #0]
   d4af8:	9301      	str	r3, [sp, #4]
   d4afa:	bd08      	pop	{r3, pc}
   d4afc:	00030220 	.word	0x00030220

000d4b00 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4b00:	b508      	push	{r3, lr}
   d4b02:	4b02      	ldr	r3, [pc, #8]	; (d4b0c <set_system_mode+0xc>)
   d4b04:	681b      	ldr	r3, [r3, #0]
   d4b06:	685b      	ldr	r3, [r3, #4]
   d4b08:	9301      	str	r3, [sp, #4]
   d4b0a:	bd08      	pop	{r3, pc}
   d4b0c:	00030220 	.word	0x00030220

000d4b10 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d4b10:	b508      	push	{r3, lr}
   d4b12:	4b02      	ldr	r3, [pc, #8]	; (d4b1c <system_delay_ms+0xc>)
   d4b14:	681b      	ldr	r3, [r3, #0]
   d4b16:	695b      	ldr	r3, [r3, #20]
   d4b18:	9301      	str	r3, [sp, #4]
   d4b1a:	bd08      	pop	{r3, pc}
   d4b1c:	00030220 	.word	0x00030220

000d4b20 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d4b20:	b508      	push	{r3, lr}
   d4b22:	4b02      	ldr	r3, [pc, #8]	; (d4b2c <application_thread_current+0xc>)
   d4b24:	681b      	ldr	r3, [r3, #0]
   d4b26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d4b28:	9301      	str	r3, [sp, #4]
   d4b2a:	bd08      	pop	{r3, pc}
   d4b2c:	00030220 	.word	0x00030220

000d4b30 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d4b30:	b508      	push	{r3, lr}
   d4b32:	4b02      	ldr	r3, [pc, #8]	; (d4b3c <application_thread_invoke+0xc>)
   d4b34:	681b      	ldr	r3, [r3, #0]
   d4b36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4b38:	9301      	str	r3, [sp, #4]
   d4b3a:	bd08      	pop	{r3, pc}
   d4b3c:	00030220 	.word	0x00030220

000d4b40 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d4b40:	b508      	push	{r3, lr}
   d4b42:	4b02      	ldr	r3, [pc, #8]	; (d4b4c <system_thread_get_state+0xc>)
   d4b44:	681b      	ldr	r3, [r3, #0]
   d4b46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d4b48:	9301      	str	r3, [sp, #4]
   d4b4a:	bd08      	pop	{r3, pc}
   d4b4c:	00030220 	.word	0x00030220

000d4b50 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4b50:	b508      	push	{r3, lr}
   d4b52:	4b03      	ldr	r3, [pc, #12]	; (d4b60 <system_ctrl_set_app_request_handler+0x10>)
   d4b54:	681b      	ldr	r3, [r3, #0]
   d4b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d4b5a:	9301      	str	r3, [sp, #4]
   d4b5c:	bd08      	pop	{r3, pc}
   d4b5e:	0000      	.short	0x0000
   d4b60:	00030220 	.word	0x00030220

000d4b64 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4b64:	b508      	push	{r3, lr}
   d4b66:	4b03      	ldr	r3, [pc, #12]	; (d4b74 <system_ctrl_set_result+0x10>)
   d4b68:	681b      	ldr	r3, [r3, #0]
   d4b6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4b6e:	9301      	str	r3, [sp, #4]
   d4b70:	bd08      	pop	{r3, pc}
   d4b72:	0000      	.short	0x0000
   d4b74:	00030220 	.word	0x00030220

000d4b78 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d4b78:	b508      	push	{r3, lr}
   d4b7a:	4b02      	ldr	r3, [pc, #8]	; (d4b84 <spark_process+0xc>)
   d4b7c:	681b      	ldr	r3, [r3, #0]
   d4b7e:	689b      	ldr	r3, [r3, #8]
   d4b80:	9301      	str	r3, [sp, #4]
   d4b82:	bd08      	pop	{r3, pc}
   d4b84:	00030244 	.word	0x00030244

000d4b88 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d4b88:	b508      	push	{r3, lr}
   d4b8a:	4b02      	ldr	r3, [pc, #8]	; (d4b94 <spark_cloud_flag_connected+0xc>)
   d4b8c:	681b      	ldr	r3, [r3, #0]
   d4b8e:	695b      	ldr	r3, [r3, #20]
   d4b90:	9301      	str	r3, [sp, #4]
   d4b92:	bd08      	pop	{r3, pc}
   d4b94:	00030244 	.word	0x00030244

000d4b98 <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   d4b98:	b508      	push	{r3, lr}
   d4b9a:	4b02      	ldr	r3, [pc, #8]	; (d4ba4 <spark_deviceID+0xc>)
   d4b9c:	681b      	ldr	r3, [r3, #0]
   d4b9e:	69db      	ldr	r3, [r3, #28]
   d4ba0:	9301      	str	r3, [sp, #4]
   d4ba2:	bd08      	pop	{r3, pc}
   d4ba4:	00030244 	.word	0x00030244

000d4ba8 <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d4ba8:	b508      	push	{r3, lr}
   d4baa:	4b02      	ldr	r3, [pc, #8]	; (d4bb4 <spark_send_event+0xc>)
   d4bac:	681b      	ldr	r3, [r3, #0]
   d4bae:	6a1b      	ldr	r3, [r3, #32]
   d4bb0:	9301      	str	r3, [sp, #4]
   d4bb2:	bd08      	pop	{r3, pc}
   d4bb4:	00030244 	.word	0x00030244

000d4bb8 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   d4bb8:	b508      	push	{r3, lr}
   d4bba:	4b02      	ldr	r3, [pc, #8]	; (d4bc4 <spark_subscribe+0xc>)
   d4bbc:	681b      	ldr	r3, [r3, #0]
   d4bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4bc0:	9301      	str	r3, [sp, #4]
   d4bc2:	bd08      	pop	{r3, pc}
   d4bc4:	00030244 	.word	0x00030244

000d4bc8 <spark_sync_time_pending>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d4bc8:	b508      	push	{r3, lr}
   d4bca:	4b02      	ldr	r3, [pc, #8]	; (d4bd4 <spark_sync_time_pending+0xc>)
   d4bcc:	681b      	ldr	r3, [r3, #0]
   d4bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4bd0:	9301      	str	r3, [sp, #4]
   d4bd2:	bd08      	pop	{r3, pc}
   d4bd4:	00030244 	.word	0x00030244

000d4bd8 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4bd8:	b508      	push	{r3, lr}
   d4bda:	4b02      	ldr	r3, [pc, #8]	; (d4be4 <spark_set_random_seed_from_cloud_handler+0xc>)
   d4bdc:	681b      	ldr	r3, [r3, #0]
   d4bde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4be0:	9301      	str	r3, [sp, #4]
   d4be2:	bd08      	pop	{r3, pc}
   d4be4:	00030244 	.word	0x00030244

000d4be8 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4be8:	b508      	push	{r3, lr}
   d4bea:	4b02      	ldr	r3, [pc, #8]	; (d4bf4 <network_connect+0xc>)
   d4bec:	681b      	ldr	r3, [r3, #0]
   d4bee:	685b      	ldr	r3, [r3, #4]
   d4bf0:	9301      	str	r3, [sp, #4]
   d4bf2:	bd08      	pop	{r3, pc}
   d4bf4:	00030240 	.word	0x00030240

000d4bf8 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4bf8:	b508      	push	{r3, lr}
   d4bfa:	4b02      	ldr	r3, [pc, #8]	; (d4c04 <network_connecting+0xc>)
   d4bfc:	681b      	ldr	r3, [r3, #0]
   d4bfe:	689b      	ldr	r3, [r3, #8]
   d4c00:	9301      	str	r3, [sp, #4]
   d4c02:	bd08      	pop	{r3, pc}
   d4c04:	00030240 	.word	0x00030240

000d4c08 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4c08:	b508      	push	{r3, lr}
   d4c0a:	4b02      	ldr	r3, [pc, #8]	; (d4c14 <network_disconnect+0xc>)
   d4c0c:	681b      	ldr	r3, [r3, #0]
   d4c0e:	68db      	ldr	r3, [r3, #12]
   d4c10:	9301      	str	r3, [sp, #4]
   d4c12:	bd08      	pop	{r3, pc}
   d4c14:	00030240 	.word	0x00030240

000d4c18 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4c18:	b508      	push	{r3, lr}
   d4c1a:	4b02      	ldr	r3, [pc, #8]	; (d4c24 <network_ready+0xc>)
   d4c1c:	681b      	ldr	r3, [r3, #0]
   d4c1e:	691b      	ldr	r3, [r3, #16]
   d4c20:	9301      	str	r3, [sp, #4]
   d4c22:	bd08      	pop	{r3, pc}
   d4c24:	00030240 	.word	0x00030240

000d4c28 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4c28:	b508      	push	{r3, lr}
   d4c2a:	4b02      	ldr	r3, [pc, #8]	; (d4c34 <network_on+0xc>)
   d4c2c:	681b      	ldr	r3, [r3, #0]
   d4c2e:	695b      	ldr	r3, [r3, #20]
   d4c30:	9301      	str	r3, [sp, #4]
   d4c32:	bd08      	pop	{r3, pc}
   d4c34:	00030240 	.word	0x00030240

000d4c38 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4c38:	b508      	push	{r3, lr}
   d4c3a:	4b02      	ldr	r3, [pc, #8]	; (d4c44 <network_off+0xc>)
   d4c3c:	681b      	ldr	r3, [r3, #0]
   d4c3e:	699b      	ldr	r3, [r3, #24]
   d4c40:	9301      	str	r3, [sp, #4]
   d4c42:	bd08      	pop	{r3, pc}
   d4c44:	00030240 	.word	0x00030240

000d4c48 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4c48:	b508      	push	{r3, lr}
   d4c4a:	4b02      	ldr	r3, [pc, #8]	; (d4c54 <network_listen+0xc>)
   d4c4c:	681b      	ldr	r3, [r3, #0]
   d4c4e:	69db      	ldr	r3, [r3, #28]
   d4c50:	9301      	str	r3, [sp, #4]
   d4c52:	bd08      	pop	{r3, pc}
   d4c54:	00030240 	.word	0x00030240

000d4c58 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4c58:	b508      	push	{r3, lr}
   d4c5a:	4b02      	ldr	r3, [pc, #8]	; (d4c64 <network_listening+0xc>)
   d4c5c:	681b      	ldr	r3, [r3, #0]
   d4c5e:	6a1b      	ldr	r3, [r3, #32]
   d4c60:	9301      	str	r3, [sp, #4]
   d4c62:	bd08      	pop	{r3, pc}
   d4c64:	00030240 	.word	0x00030240

000d4c68 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4c68:	b508      	push	{r3, lr}
   d4c6a:	4b02      	ldr	r3, [pc, #8]	; (d4c74 <network_set_listen_timeout+0xc>)
   d4c6c:	681b      	ldr	r3, [r3, #0]
   d4c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4c70:	9301      	str	r3, [sp, #4]
   d4c72:	bd08      	pop	{r3, pc}
   d4c74:	00030240 	.word	0x00030240

000d4c78 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4c78:	b508      	push	{r3, lr}
   d4c7a:	4b02      	ldr	r3, [pc, #8]	; (d4c84 <network_get_listen_timeout+0xc>)
   d4c7c:	681b      	ldr	r3, [r3, #0]
   d4c7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4c80:	9301      	str	r3, [sp, #4]
   d4c82:	bd08      	pop	{r3, pc}
   d4c84:	00030240 	.word	0x00030240

000d4c88 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4c88:	b508      	push	{r3, lr}
   d4c8a:	4b02      	ldr	r3, [pc, #8]	; (d4c94 <malloc+0xc>)
   d4c8c:	681b      	ldr	r3, [r3, #0]
   d4c8e:	681b      	ldr	r3, [r3, #0]
   d4c90:	9301      	str	r3, [sp, #4]
   d4c92:	bd08      	pop	{r3, pc}
   d4c94:	0003021c 	.word	0x0003021c

000d4c98 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4c98:	b508      	push	{r3, lr}
   d4c9a:	4b02      	ldr	r3, [pc, #8]	; (d4ca4 <free+0xc>)
   d4c9c:	681b      	ldr	r3, [r3, #0]
   d4c9e:	685b      	ldr	r3, [r3, #4]
   d4ca0:	9301      	str	r3, [sp, #4]
   d4ca2:	bd08      	pop	{r3, pc}
   d4ca4:	0003021c 	.word	0x0003021c

000d4ca8 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d4ca8:	b508      	push	{r3, lr}
   d4caa:	4b02      	ldr	r3, [pc, #8]	; (d4cb4 <realloc+0xc>)
   d4cac:	681b      	ldr	r3, [r3, #0]
   d4cae:	689b      	ldr	r3, [r3, #8]
   d4cb0:	9301      	str	r3, [sp, #4]
   d4cb2:	bd08      	pop	{r3, pc}
   d4cb4:	0003021c 	.word	0x0003021c

000d4cb8 <siscanf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
   d4cb8:	b508      	push	{r3, lr}
   d4cba:	4b02      	ldr	r3, [pc, #8]	; (d4cc4 <siscanf+0xc>)
   d4cbc:	681b      	ldr	r3, [r3, #0]
   d4cbe:	699b      	ldr	r3, [r3, #24]
   d4cc0:	9301      	str	r3, [sp, #4]
   d4cc2:	bd08      	pop	{r3, pc}
   d4cc4:	0003021c 	.word	0x0003021c

000d4cc8 <snprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d4cc8:	b508      	push	{r3, lr}
   d4cca:	4b02      	ldr	r3, [pc, #8]	; (d4cd4 <snprintf+0xc>)
   d4ccc:	681b      	ldr	r3, [r3, #0]
   d4cce:	69db      	ldr	r3, [r3, #28]
   d4cd0:	9301      	str	r3, [sp, #4]
   d4cd2:	bd08      	pop	{r3, pc}
   d4cd4:	0003021c 	.word	0x0003021c

000d4cd8 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d4cd8:	b508      	push	{r3, lr}
   d4cda:	4b02      	ldr	r3, [pc, #8]	; (d4ce4 <vsnprintf+0xc>)
   d4cdc:	681b      	ldr	r3, [r3, #0]
   d4cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4ce0:	9301      	str	r3, [sp, #4]
   d4ce2:	bd08      	pop	{r3, pc}
   d4ce4:	0003021c 	.word	0x0003021c

000d4ce8 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d4ce8:	b508      	push	{r3, lr}
   d4cea:	4b02      	ldr	r3, [pc, #8]	; (d4cf4 <abort+0xc>)
   d4cec:	681b      	ldr	r3, [r3, #0]
   d4cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4cf0:	9301      	str	r3, [sp, #4]
   d4cf2:	bd08      	pop	{r3, pc}
   d4cf4:	0003021c 	.word	0x0003021c

000d4cf8 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d4cf8:	b508      	push	{r3, lr}
   d4cfa:	4b02      	ldr	r3, [pc, #8]	; (d4d04 <_malloc_r+0xc>)
   d4cfc:	681b      	ldr	r3, [r3, #0]
   d4cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4d00:	9301      	str	r3, [sp, #4]
   d4d02:	bd08      	pop	{r3, pc}
   d4d04:	0003021c 	.word	0x0003021c

000d4d08 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d4d08:	2100      	movs	r1, #0
   d4d0a:	f7ff bf01 	b.w	d4b10 <system_delay_ms>

000d4d0e <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d4d0e:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4d10:	6883      	ldr	r3, [r0, #8]
   d4d12:	4604      	mov	r4, r0
   d4d14:	b90b      	cbnz	r3, d4d1a <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d4d16:	f001 f9b8 	bl	d608a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4d1a:	68c3      	ldr	r3, [r0, #12]
   d4d1c:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d4d1e:	68a3      	ldr	r3, [r4, #8]
   d4d20:	b11b      	cbz	r3, d4d2a <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4d22:	2203      	movs	r2, #3
   d4d24:	4621      	mov	r1, r4
   d4d26:	4620      	mov	r0, r4
   d4d28:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d4d2a:	4620      	mov	r0, r4
   d4d2c:	2110      	movs	r1, #16
}
   d4d2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d4d32:	f001 b98e 	b.w	d6052 <_ZdlPvj>

000d4d36 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d4d36:	b510      	push	{r4, lr}
   d4d38:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d4d3a:	6800      	ldr	r0, [r0, #0]
   d4d3c:	b108      	cbz	r0, d4d42 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d4d3e:	f7ff fdcf 	bl	d48e0 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d4d42:	4620      	mov	r0, r4
   d4d44:	bd10      	pop	{r4, pc}

000d4d46 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d4d46:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d4d48:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d4d4a:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d4d4c:	689b      	ldr	r3, [r3, #8]
   d4d4e:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4d50:	68a3      	ldr	r3, [r4, #8]
   d4d52:	3b01      	subs	r3, #1
   d4d54:	60a3      	str	r3, [r4, #8]
   d4d56:	b92b      	cbnz	r3, d4d64 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112+0x1e>
            _M_destroy();
   d4d58:	6823      	ldr	r3, [r4, #0]
   d4d5a:	4620      	mov	r0, r4
   d4d5c:	68db      	ldr	r3, [r3, #12]
        }
    }
   d4d5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d4d62:	4718      	bx	r3
   d4d64:	bd10      	pop	{r4, pc}

000d4d66 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d4d66:	680b      	ldr	r3, [r1, #0]
   d4d68:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d4d6a:	b113      	cbz	r3, d4d72 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d4d6c:	685a      	ldr	r2, [r3, #4]
   d4d6e:	3201      	adds	r2, #1
   d4d70:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d4d72:	4770      	bx	lr

000d4d74 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4d74:	b510      	push	{r4, lr}
   d4d76:	4604      	mov	r4, r0
      {
	if (_M_pi != nullptr)
   d4d78:	6800      	ldr	r0, [r0, #0]
   d4d7a:	b128      	cbz	r0, d4d88 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d4d7c:	6843      	ldr	r3, [r0, #4]
   d4d7e:	3b01      	subs	r3, #1
   d4d80:	6043      	str	r3, [r0, #4]
   d4d82:	b90b      	cbnz	r3, d4d88 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d4d84:	f7ff ffdf 	bl	d4d46 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d4d88:	4620      	mov	r0, r4
   d4d8a:	bd10      	pop	{r4, pc}

000d4d8c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d4d8c:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4d8e:	4c06      	ldr	r4, [pc, #24]	; (d4da8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d4d90:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d4d92:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4d94:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d4d96:	f7ff fd9b 	bl	d48d0 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d4d9a:	4620      	mov	r0, r4
   d4d9c:	4a03      	ldr	r2, [pc, #12]	; (d4dac <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d4d9e:	4904      	ldr	r1, [pc, #16]	; (d4db0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d4da0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d4da4:	f001 b950 	b.w	d6048 <__aeabi_atexit>
   d4da8:	2003e384 	.word	0x2003e384
   d4dac:	2003e224 	.word	0x2003e224
   d4db0:	000d4d37 	.word	0x000d4d37

000d4db4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d4db4:	4770      	bx	lr

000d4db6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d4db6:	2000      	movs	r0, #0
   d4db8:	4770      	bx	lr

000d4dba <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d4dba:	b510      	push	{r4, lr}
   d4dbc:	2110      	movs	r1, #16
   d4dbe:	4604      	mov	r4, r0
   d4dc0:	f001 f947 	bl	d6052 <_ZdlPvj>
   d4dc4:	4620      	mov	r0, r4
   d4dc6:	bd10      	pop	{r4, pc}

000d4dc8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d4dc8:	b508      	push	{r3, lr}
      { delete this; }
   d4dca:	b108      	cbz	r0, d4dd0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d4dcc:	f7ff fff5 	bl	d4dba <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d4dd0:	bd08      	pop	{r3, pc}

000d4dd2 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d4dd2:	2200      	movs	r2, #0
   d4dd4:	6002      	str	r2, [r0, #0]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d4dd6:	b510      	push	{r4, lr}

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d4dd8:	f64f 729c 	movw	r2, #65436	; 0xff9c
   d4ddc:	8082      	strh	r2, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d4dde:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
   d4de2:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d4de4:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4de6:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d4de8:	680c      	ldr	r4, [r1, #0]
   d4dea:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d4dec:	600a      	str	r2, [r1, #0]
}

inline particle::Error::Error(Error&& error) :
        Error() {
    swap(*this, error);
}
   d4dee:	bd10      	pop	{r4, pc}

000d4df0 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d4df0:	b510      	push	{r4, lr}
   d4df2:	4604      	mov	r4, r0
    free((void*)msg_);
   d4df4:	6800      	ldr	r0, [r0, #0]
   d4df6:	f7ff ff4f 	bl	d4c98 <free>
}
   d4dfa:	4620      	mov	r0, r4
   d4dfc:	bd10      	pop	{r4, pc}

000d4dfe <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d4dfe:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d4e00:	68c4      	ldr	r4, [r0, #12]
   d4e02:	b1f4      	cbz	r4, d4e42 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d4e04:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d4e06:	2b02      	cmp	r3, #2
   d4e08:	d103      	bne.n	d4e12 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d4e0a:	f104 000c 	add.w	r0, r4, #12
   d4e0e:	f7ff ffef 	bl	d4df0 <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d4e12:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d4e14:	b135      	cbz	r5, d4e24 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4e16:	4628      	mov	r0, r5
   d4e18:	f7ff fbf4 	bl	d4604 <_ZNSt14_Function_baseD1Ev>
   d4e1c:	2110      	movs	r1, #16
   d4e1e:	4628      	mov	r0, r5
   d4e20:	f001 f917 	bl	d6052 <_ZdlPvj>
   d4e24:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d4e26:	b135      	cbz	r5, d4e36 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d4e28:	4628      	mov	r0, r5
   d4e2a:	f7ff fbeb 	bl	d4604 <_ZNSt14_Function_baseD1Ev>
   d4e2e:	2110      	movs	r1, #16
   d4e30:	4628      	mov	r0, r5
   d4e32:	f001 f90e 	bl	d6052 <_ZdlPvj>
   d4e36:	4620      	mov	r0, r4
   d4e38:	2114      	movs	r1, #20
   d4e3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d4e3e:	f001 b908 	b.w	d6052 <_ZdlPvj>
   d4e42:	bd38      	pop	{r3, r4, r5, pc}

000d4e44 <_ZN10CloudClass25call_wiring_event_handlerEPKvPKcS3_>:
    user_std_function_int_str_t* fn = (user_std_function_int_str_t*)(data);
    return (*fn)(String(param));
}

void CloudClass::call_wiring_event_handler(const void* handler_data, const char *event_name, const char *data)
{
   d4e44:	b507      	push	{r0, r1, r2, lr}
   d4e46:	e88d 0006 	stmia.w	sp, {r1, r2}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4e4a:	6882      	ldr	r2, [r0, #8]
   d4e4c:	b90a      	cbnz	r2, d4e52 <_ZN10CloudClass25call_wiring_event_handlerEPKvPKcS3_+0xe>
	__throw_bad_function_call();
   d4e4e:	f001 f91c 	bl	d608a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4e52:	68c3      	ldr	r3, [r0, #12]
   d4e54:	aa01      	add	r2, sp, #4
   d4e56:	4669      	mov	r1, sp
   d4e58:	4798      	blx	r3
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}
   d4e5a:	b003      	add	sp, #12
   d4e5c:	f85d fb04 	ldr.w	pc, [sp], #4

000d4e60 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d4e60:	b513      	push	{r0, r1, r4, lr}
   d4e62:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d4e64:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d4e68:	2300      	movs	r3, #0
   d4e6a:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d4e6c:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d4e6e:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d4e70:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4e72:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d4e74:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d4e76:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4e78:	f7ff ff7c 	bl	d4d74 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4e7c:	4620      	mov	r0, r4
   d4e7e:	b002      	add	sp, #8
   d4e80:	bd10      	pop	{r4, pc}

000d4e82 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d4e82:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4e84:	460c      	mov	r4, r1
   d4e86:	ad02      	add	r5, sp, #8
   d4e88:	f854 3b04 	ldr.w	r3, [r4], #4
   d4e8c:	f845 3d08 	str.w	r3, [r5, #-8]!
   d4e90:	4606      	mov	r6, r0
   d4e92:	460f      	mov	r7, r1
   d4e94:	a801      	add	r0, sp, #4
   d4e96:	4621      	mov	r1, r4
   d4e98:	f7ff ff65 	bl	d4d66 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d4e9c:	4629      	mov	r1, r5
   d4e9e:	4630      	mov	r0, r6
   d4ea0:	f7ff ffde 	bl	d4e60 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4ea4:	a801      	add	r0, sp, #4
   d4ea6:	f7ff ff65 	bl	d4d74 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4eaa:	4620      	mov	r0, r4
   d4eac:	f7ff ff62 	bl	d4d74 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d4eb0:	4638      	mov	r0, r7
   d4eb2:	2108      	movs	r1, #8
   d4eb4:	f001 f8cd 	bl	d6052 <_ZdlPvj>
        return p;
    }
   d4eb8:	4630      	mov	r0, r6
   d4eba:	b003      	add	sp, #12
   d4ebc:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4ebe <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d4ebe:	b513      	push	{r0, r1, r4, lr}
   d4ec0:	460b      	mov	r3, r1
   d4ec2:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4ec4:	c803      	ldmia	r0, {r0, r1}
   d4ec6:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d4eca:	e893 0003 	ldmia.w	r3, {r0, r1}
   d4ece:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d4ed2:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d4ed6:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d4eda:	b002      	add	sp, #8
   d4edc:	bd10      	pop	{r4, pc}
	...

000d4ee0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d4ee0:	b538      	push	{r3, r4, r5, lr}
   d4ee2:	2300      	movs	r3, #0
   d4ee4:	4604      	mov	r4, r0
   d4ee6:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d4ee8:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d4eea:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d4eec:	f7ff f8d5 	bl	d409a <_Znwj>
   d4ef0:	b128      	cbz	r0, d4efe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d4ef2:	2301      	movs	r3, #1
   d4ef4:	6043      	str	r3, [r0, #4]
   d4ef6:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d4ef8:	4b02      	ldr	r3, [pc, #8]	; (d4f04 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d4efa:	6003      	str	r3, [r0, #0]
   d4efc:	60c5      	str	r5, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d4efe:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
   d4f00:	4620      	mov	r0, r4
   d4f02:	bd38      	pop	{r3, r4, r5, pc}
   d4f04:	000d9624 	.word	0x000d9624

000d4f08 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4f08:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d4f0a:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4f0c:	b90a      	cbnz	r2, d4f12 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d4f0e:	f001 f8bc 	bl	d608a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4f12:	68c3      	ldr	r3, [r0, #12]
    }
   d4f14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4f18:	4718      	bx	r3

000d4f1a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d4f1a:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d4f1c:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d4f1e:	f100 0110 	add.w	r1, r0, #16
   d4f22:	f7ff fff1 	bl	d4f08 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d4f26:	bd08      	pop	{r3, pc}

000d4f28 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4f28:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d4f2a:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4f2c:	b90a      	cbnz	r2, d4f32 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d4f2e:	f001 f8ac 	bl	d608a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4f32:	68c3      	ldr	r3, [r0, #12]
    }
   d4f34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4f38:	4718      	bx	r3

000d4f3a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d4f3a:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d4f3c:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d4f3e:	f100 0110 	add.w	r1, r0, #16
   d4f42:	f7ff fff1 	bl	d4f28 <_ZNKSt8functionIFvRKbEEclES1_>
   d4f46:	bd08      	pop	{r3, pc}

000d4f48 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d4f48:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4f4a:	2300      	movs	r3, #0
   d4f4c:	6083      	str	r3, [r0, #8]
   d4f4e:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d4f50:	4604      	mov	r4, r0
   d4f52:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d4f54:	b12b      	cbz	r3, d4f62 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d4f56:	2202      	movs	r2, #2
   d4f58:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d4f5a:	68eb      	ldr	r3, [r5, #12]
   d4f5c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d4f5e:	68ab      	ldr	r3, [r5, #8]
   d4f60:	60a3      	str	r3, [r4, #8]
	}
    }
   d4f62:	4620      	mov	r0, r4
   d4f64:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4f68 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d4f68:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4f6a:	b089      	sub	sp, #36	; 0x24
   d4f6c:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d4f6e:	4668      	mov	r0, sp
   d4f70:	f7ff ff2f 	bl	d4dd2 <_ZN8particle5ErrorC1EOS0_>
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d4f74:	2300      	movs	r3, #0
   d4f76:	f88d 3008 	strb.w	r3, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d4f7a:	f04f 0202 	mov.w	r2, #2
   d4f7e:	e8d4 3f4f 	ldrexb	r3, [r4]
   d4f82:	2b00      	cmp	r3, #0
   d4f84:	d103      	bne.n	d4f8e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
   d4f86:	e8c4 2f41 	strexb	r1, r2, [r4]
   d4f8a:	2900      	cmp	r1, #0
   d4f8c:	d1f7      	bne.n	d4f7e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
   d4f8e:	d002      	beq.n	d4f96 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
   d4f90:	f88d 3008 	strb.w	r3, [sp, #8]
   d4f94:	e063      	b.n	d505e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d4f96:	f114 050c 	adds.w	r5, r4, #12
   d4f9a:	d003      	beq.n	d4fa4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
   d4f9c:	4669      	mov	r1, sp
   d4f9e:	4628      	mov	r0, r5
   d4fa0:	f7ff ff17 	bl	d4dd2 <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d4fa4:	f3bf 8f5f 	dmb	sy
   d4fa8:	2301      	movs	r3, #1
   d4faa:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d4fac:	2000      	movs	r0, #0
   d4fae:	f104 0308 	add.w	r3, r4, #8
   d4fb2:	f3bf 8f5f 	dmb	sy
   d4fb6:	e853 6f00 	ldrex	r6, [r3]
   d4fba:	e843 0200 	strex	r2, r0, [r3]
   d4fbe:	2a00      	cmp	r2, #0
   d4fc0:	d1f9      	bne.n	d4fb6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
   d4fc2:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d4fc6:	2e00      	cmp	r6, #0
   d4fc8:	d049      	beq.n	d505e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d4fca:	f7ff fda9 	bl	d4b20 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d4fce:	b120      	cbz	r0, d4fda <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d4fd0:	4629      	mov	r1, r5
   d4fd2:	4630      	mov	r0, r6
   d4fd4:	f7ff ff98 	bl	d4f08 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d4fd8:	e03a      	b.n	d5050 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d4fda:	4631      	mov	r1, r6
   d4fdc:	a802      	add	r0, sp, #8
   d4fde:	f7ff ffb3 	bl	d4f48 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d4fe2:	68e0      	ldr	r0, [r4, #12]
   d4fe4:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d4fe8:	b108      	cbz	r0, d4fee <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
   d4fea:	f001 ffdf 	bl	d6fac <strdup>
   d4fee:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d4ff0:	2010      	movs	r0, #16
   d4ff2:	f8ad 501c 	strh.w	r5, [sp, #28]
   d4ff6:	f7ff f850 	bl	d409a <_Znwj>
   d4ffa:	4605      	mov	r5, r0
   d4ffc:	b1e8      	cbz	r0, d503a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4ffe:	2700      	movs	r7, #0
   d5000:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5002:	2018      	movs	r0, #24
   d5004:	f7ff f849 	bl	d409a <_Znwj>
   d5008:	4604      	mov	r4, r0
   d500a:	b188      	cbz	r0, d5030 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d500c:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d500e:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d5010:	a802      	add	r0, sp, #8
   d5012:	f7ff ff54 	bl	d4ebe <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5016:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d5018:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d501a:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d501c:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d501e:	9204      	str	r2, [sp, #16]
   d5020:	a906      	add	r1, sp, #24
   d5022:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d5024:	60e3      	str	r3, [r4, #12]
   d5026:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d502a:	9205      	str	r2, [sp, #20]
   d502c:	f7ff fed1 	bl	d4dd2 <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d5030:	4b0d      	ldr	r3, [pc, #52]	; (d5068 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
   d5032:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d5034:	4b0d      	ldr	r3, [pc, #52]	; (d506c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5036:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d5038:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
   d503a:	a806      	add	r0, sp, #24
   d503c:	f7ff fed8 	bl	d4df0 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5040:	a802      	add	r0, sp, #8
   d5042:	f7ff fadf 	bl	d4604 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d5046:	2200      	movs	r2, #0
   d5048:	4629      	mov	r1, r5
   d504a:	4809      	ldr	r0, [pc, #36]	; (d5070 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
   d504c:	f7ff fd70 	bl	d4b30 <application_thread_invoke>
   d5050:	4630      	mov	r0, r6
   d5052:	f7ff fad7 	bl	d4604 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d5056:	2110      	movs	r1, #16
   d5058:	4630      	mov	r0, r6
   d505a:	f000 fffa 	bl	d6052 <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
   d505e:	4668      	mov	r0, sp
   d5060:	f7ff fec6 	bl	d4df0 <_ZN8particle5ErrorD1Ev>
    }
   d5064:	b009      	add	sp, #36	; 0x24
   d5066:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5068:	000d4f1b 	.word	0x000d4f1b
   d506c:	000d5191 	.word	0x000d5191
   d5070:	000d4d0f 	.word	0x000d4d0f

000d5074 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d5074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5078:	b08b      	sub	sp, #44	; 0x2c
   d507a:	4606      	mov	r6, r0
   d507c:	460f      	mov	r7, r1
   d507e:	4690      	mov	r8, r2
   d5080:	4699      	mov	r9, r3
   d5082:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5086:	f7ff fd7f 	bl	d4b88 <spark_cloud_flag_connected>
   d508a:	ad07      	add	r5, sp, #28
    if (!connected()) {
   d508c:	4683      	mov	fp, r0
   d508e:	bb30      	cbnz	r0, d50de <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d5090:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d5094:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d5096:	a905      	add	r1, sp, #20
   d5098:	4628      	mov	r0, r5
   d509a:	f8ad 3018 	strh.w	r3, [sp, #24]
   d509e:	f7ff fe98 	bl	d4dd2 <_ZN8particle5ErrorC1EOS0_>
   d50a2:	2014      	movs	r0, #20
   d50a4:	f7fe fff9 	bl	d409a <_Znwj>
   d50a8:	4604      	mov	r4, r0
   d50aa:	b158      	cbz	r0, d50c4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d50ac:	2302      	movs	r3, #2
   d50ae:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d50b0:	2301      	movs	r3, #1
   d50b2:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d50b4:	f8c0 b004 	str.w	fp, [r0, #4]
   d50b8:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
   d50bc:	4629      	mov	r1, r5
   d50be:	300c      	adds	r0, #12
   d50c0:	f7ff fe87 	bl	d4dd2 <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d50c4:	4630      	mov	r0, r6
   d50c6:	4621      	mov	r1, r4
   d50c8:	f840 4b04 	str.w	r4, [r0], #4
   d50cc:	f7ff ff08 	bl	d4ee0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d50d0:	4628      	mov	r0, r5
   d50d2:	f7ff fe8d 	bl	d4df0 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d50d6:	a805      	add	r0, sp, #20
   d50d8:	f7ff fe8a 	bl	d4df0 <_ZN8particle5ErrorD1Ev>
   d50dc:	e052      	b.n	d5184 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d50de:	2400      	movs	r4, #0
   d50e0:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d50e2:	2014      	movs	r0, #20
   d50e4:	606c      	str	r4, [r5, #4]
   d50e6:	60ac      	str	r4, [r5, #8]
   d50e8:	9307      	str	r3, [sp, #28]
   d50ea:	f7fe ffd6 	bl	d409a <_Znwj>
   d50ee:	4601      	mov	r1, r0
   d50f0:	b118      	cbz	r0, d50fa <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
   d50f2:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d50f4:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d50f6:	6044      	str	r4, [r0, #4]
   d50f8:	6084      	str	r4, [r0, #8]
   d50fa:	a804      	add	r0, sp, #16
   d50fc:	9103      	str	r1, [sp, #12]
   d50fe:	f7ff feef 	bl	d4ee0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d5102:	4b22      	ldr	r3, [pc, #136]	; (d518c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
   d5104:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d5106:	2008      	movs	r0, #8
   d5108:	f7fe ffc7 	bl	d409a <_Znwj>
   d510c:	4604      	mov	r4, r0
   d510e:	b128      	cbz	r0, d511c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5110:	9b03      	ldr	r3, [sp, #12]
   d5112:	f840 3b04 	str.w	r3, [r0], #4
   d5116:	a904      	add	r1, sp, #16
   d5118:	f7ff fe25 	bl	d4d66 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d511c:	9500      	str	r5, [sp, #0]
   d511e:	fa5f f38a 	uxtb.w	r3, sl
   d5122:	464a      	mov	r2, r9
   d5124:	4641      	mov	r1, r8
   d5126:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d5128:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d512a:	f7ff fd3d 	bl	d4ba8 <spark_send_event>
   d512e:	b920      	cbnz	r0, d513a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d5130:	9b03      	ldr	r3, [sp, #12]
   d5132:	785b      	ldrb	r3, [r3, #1]
   d5134:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d5138:	b183      	cbz	r3, d515c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   d513a:	9b03      	ldr	r3, [sp, #12]
   d513c:	9305      	str	r3, [sp, #20]
   d513e:	a904      	add	r1, sp, #16
   d5140:	a806      	add	r0, sp, #24
   d5142:	f7ff fe10 	bl	d4d66 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d5146:	a905      	add	r1, sp, #20
   d5148:	4630      	mov	r0, r6
   d514a:	f7ff fe89 	bl	d4e60 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d514e:	a806      	add	r0, sp, #24
   d5150:	f7ff fe10 	bl	d4d74 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5154:	a804      	add	r0, sp, #16
   d5156:	f7ff fe0d 	bl	d4d74 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d515a:	e013      	b.n	d5184 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
   d515c:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d5160:	a905      	add	r1, sp, #20
   d5162:	a803      	add	r0, sp, #12
   d5164:	9205      	str	r2, [sp, #20]
   d5166:	f8ad 3018 	strh.w	r3, [sp, #24]
   d516a:	f7ff fefd 	bl	d4f68 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d516e:	a805      	add	r0, sp, #20
   d5170:	f7ff fe3e 	bl	d4df0 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d5174:	a805      	add	r0, sp, #20
   d5176:	9909      	ldr	r1, [sp, #36]	; 0x24
   d5178:	f7ff fe83 	bl	d4e82 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
   d517c:	a806      	add	r0, sp, #24
   d517e:	f7ff fdf9 	bl	d4d74 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5182:	e7da      	b.n	d513a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
    }

    return p.future();
}
   d5184:	4630      	mov	r0, r6
   d5186:	b00b      	add	sp, #44	; 0x2c
   d5188:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d518c:	000d5301 	.word	0x000d5301

000d5190 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d5190:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d5192:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5194:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d5196:	d006      	beq.n	d51a6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d5198:	2a03      	cmp	r2, #3
   d519a:	d017      	beq.n	d51cc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d519c:	2a01      	cmp	r2, #1
   d519e:	d122      	bne.n	d51e6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d51a0:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d51a2:	6003      	str	r3, [r0, #0]
	      break;
   d51a4:	e01f      	b.n	d51e6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d51a6:	2018      	movs	r0, #24
   d51a8:	680e      	ldr	r6, [r1, #0]
   d51aa:	f7fe ff76 	bl	d409a <_Znwj>
   d51ae:	4605      	mov	r5, r0
   d51b0:	b150      	cbz	r0, d51c8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d51b2:	4631      	mov	r1, r6
   d51b4:	f7ff fec8 	bl	d4f48 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d51b8:	6930      	ldr	r0, [r6, #16]
   d51ba:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d51be:	b108      	cbz	r0, d51c4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d51c0:	f001 fef4 	bl	d6fac <strdup>
   d51c4:	6128      	str	r0, [r5, #16]
   d51c6:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d51c8:	6025      	str	r5, [r4, #0]
   d51ca:	e00c      	b.n	d51e6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d51cc:	6804      	ldr	r4, [r0, #0]
   d51ce:	b154      	cbz	r4, d51e6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
   d51d0:	f104 0010 	add.w	r0, r4, #16
   d51d4:	f7ff fe0c 	bl	d4df0 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d51d8:	4620      	mov	r0, r4
   d51da:	f7ff fa13 	bl	d4604 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d51de:	2118      	movs	r1, #24
   d51e0:	4620      	mov	r0, r4
   d51e2:	f000 ff36 	bl	d6052 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d51e6:	2000      	movs	r0, #0
   d51e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d51ea <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d51ea:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d51ec:	2300      	movs	r3, #0
   d51ee:	6083      	str	r3, [r0, #8]
   d51f0:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d51f2:	4604      	mov	r4, r0
   d51f4:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d51f6:	b12b      	cbz	r3, d5204 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d51f8:	2202      	movs	r2, #2
   d51fa:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d51fc:	68eb      	ldr	r3, [r5, #12]
   d51fe:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d5200:	68ab      	ldr	r3, [r5, #8]
   d5202:	60a3      	str	r3, [r4, #8]
	}
    }
   d5204:	4620      	mov	r0, r4
   d5206:	bd38      	pop	{r3, r4, r5, pc}

000d5208 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d5208:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d520a:	b570      	push	{r4, r5, r6, lr}
   d520c:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d520e:	d006      	beq.n	d521e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d5210:	2a03      	cmp	r2, #3
   d5212:	d011      	beq.n	d5238 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d5214:	2a01      	cmp	r2, #1
   d5216:	d118      	bne.n	d524a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d5218:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d521a:	6003      	str	r3, [r0, #0]
	      break;
   d521c:	e015      	b.n	d524a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d521e:	2014      	movs	r0, #20
   d5220:	680e      	ldr	r6, [r1, #0]
   d5222:	f7fe ff3a 	bl	d409a <_Znwj>
   d5226:	4605      	mov	r5, r0
   d5228:	b120      	cbz	r0, d5234 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d522a:	4631      	mov	r1, r6
   d522c:	f7ff ffdd 	bl	d51ea <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d5230:	7c33      	ldrb	r3, [r6, #16]
   d5232:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d5234:	6025      	str	r5, [r4, #0]
   d5236:	e008      	b.n	d524a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d5238:	6804      	ldr	r4, [r0, #0]
   d523a:	b134      	cbz	r4, d524a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d523c:	4620      	mov	r0, r4
   d523e:	f7ff f9e1 	bl	d4604 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d5242:	2114      	movs	r1, #20
   d5244:	4620      	mov	r0, r4
   d5246:	f000 ff04 	bl	d6052 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d524a:	2000      	movs	r0, #0
   d524c:	bd70      	pop	{r4, r5, r6, pc}
	...

000d5250 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d5250:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d5252:	2300      	movs	r3, #0
   d5254:	b087      	sub	sp, #28
   d5256:	460c      	mov	r4, r1
   d5258:	f3bf 8f5f 	dmb	sy
   d525c:	e850 6f00 	ldrex	r6, [r0]
   d5260:	e840 3200 	strex	r2, r3, [r0]
   d5264:	2a00      	cmp	r2, #0
   d5266:	d1f9      	bne.n	d525c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d5268:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d526c:	2e00      	cmp	r6, #0
   d526e:	d03f      	beq.n	d52f0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d5270:	4618      	mov	r0, r3
   d5272:	f7ff fc55 	bl	d4b20 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d5276:	4607      	mov	r7, r0
   d5278:	b120      	cbz	r0, d5284 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d527a:	4621      	mov	r1, r4
   d527c:	4630      	mov	r0, r6
   d527e:	f7ff fe53 	bl	d4f28 <_ZNKSt8functionIFvRKbEEclES1_>
   d5282:	e02e      	b.n	d52e2 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d5284:	4631      	mov	r1, r6
   d5286:	a801      	add	r0, sp, #4
   d5288:	f7ff ffaf 	bl	d51ea <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d528c:	7823      	ldrb	r3, [r4, #0]
   d528e:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d5292:	2010      	movs	r0, #16
   d5294:	f7fe ff01 	bl	d409a <_Znwj>
   d5298:	4605      	mov	r5, r0
   d529a:	b1d0      	cbz	r0, d52d2 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d529c:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d529e:	2014      	movs	r0, #20
   d52a0:	f7fe fefb 	bl	d409a <_Znwj>
   d52a4:	4604      	mov	r4, r0
   d52a6:	b178      	cbz	r0, d52c8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d52a8:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d52aa:	4601      	mov	r1, r0
   d52ac:	a801      	add	r0, sp, #4
   d52ae:	f7ff fe06 	bl	d4ebe <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d52b2:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d52b4:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d52b6:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d52b8:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d52ba:	9203      	str	r2, [sp, #12]
   d52bc:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d52be:	60e3      	str	r3, [r4, #12]
   d52c0:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d52c4:	9204      	str	r2, [sp, #16]
   d52c6:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d52c8:	4b0a      	ldr	r3, [pc, #40]	; (d52f4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d52ca:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d52cc:	4b0a      	ldr	r3, [pc, #40]	; (d52f8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d52ce:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d52d0:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d52d2:	a801      	add	r0, sp, #4
   d52d4:	f7ff f996 	bl	d4604 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d52d8:	2200      	movs	r2, #0
   d52da:	4629      	mov	r1, r5
   d52dc:	4807      	ldr	r0, [pc, #28]	; (d52fc <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d52de:	f7ff fc27 	bl	d4b30 <application_thread_invoke>
   d52e2:	4630      	mov	r0, r6
   d52e4:	f7ff f98e 	bl	d4604 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d52e8:	2110      	movs	r1, #16
   d52ea:	4630      	mov	r0, r6
   d52ec:	f000 feb1 	bl	d6052 <_ZdlPvj>
        }
    }
   d52f0:	b007      	add	sp, #28
   d52f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d52f4:	000d4f3b 	.word	0x000d4f3b
   d52f8:	000d5209 	.word	0x000d5209
   d52fc:	000d4d0f 	.word	0x000d4d0f

000d5300 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:

namespace {

using namespace particle;

void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d5300:	b530      	push	{r4, r5, lr}
   d5302:	b085      	sub	sp, #20
   d5304:	4604      	mov	r4, r0
   d5306:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d5308:	4668      	mov	r0, sp
   d530a:	4611      	mov	r1, r2
   d530c:	f7ff fdb9 	bl	d4e82 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d5310:	b17c      	cbz	r4, d5332 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d5312:	b224      	sxth	r4, r4
   d5314:	4628      	mov	r0, r5
   d5316:	b10d      	cbz	r5, d531c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d5318:	f001 fe48 	bl	d6fac <strdup>
   d531c:	9002      	str	r0, [sp, #8]
   d531e:	a902      	add	r1, sp, #8
   d5320:	4668      	mov	r0, sp
   d5322:	f8ad 400c 	strh.w	r4, [sp, #12]
   d5326:	f7ff fe1f 	bl	d4f68 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d532a:	a802      	add	r0, sp, #8
   d532c:	f7ff fd60 	bl	d4df0 <_ZN8particle5ErrorD1Ev>
   d5330:	e01d      	b.n	d536e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d5332:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d5334:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d5338:	f04f 0201 	mov.w	r2, #1
   d533c:	e8d0 3f4f 	ldrexb	r3, [r0]
   d5340:	42a3      	cmp	r3, r4
   d5342:	d103      	bne.n	d534c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d5344:	e8c0 2f41 	strexb	r1, r2, [r0]
   d5348:	2900      	cmp	r1, #0
   d534a:	d1f7      	bne.n	d533c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d534c:	d002      	beq.n	d5354 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d534e:	f88d 3008 	strb.w	r3, [sp, #8]
   d5352:	e00c      	b.n	d536e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d5354:	f110 010c 	adds.w	r1, r0, #12
   d5358:	f04f 0301 	mov.w	r3, #1
   d535c:	bf18      	it	ne
   d535e:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d5360:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d5364:	3004      	adds	r0, #4
   d5366:	f800 3c03 	strb.w	r3, [r0, #-3]
   d536a:	f7ff ff71 	bl	d5250 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d536e:	a801      	add	r0, sp, #4
   d5370:	f7ff fd00 	bl	d4d74 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d5374:	b005      	add	sp, #20
   d5376:	bd30      	pop	{r4, r5, pc}

000d5378 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5378:	2200      	movs	r2, #0
   d537a:	4611      	mov	r1, r2
   d537c:	6840      	ldr	r0, [r0, #4]
   d537e:	f7ff bc6b 	b.w	d4c58 <network_listening>

000d5382 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5382:	2200      	movs	r2, #0
   d5384:	4611      	mov	r1, r2
   d5386:	6840      	ldr	r0, [r0, #4]
   d5388:	f7ff bc76 	b.w	d4c78 <network_get_listen_timeout>

000d538c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d538c:	2200      	movs	r2, #0
   d538e:	6840      	ldr	r0, [r0, #4]
   d5390:	f7ff bc6a 	b.w	d4c68 <network_set_listen_timeout>

000d5394 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5394:	2200      	movs	r2, #0
   d5396:	f081 0101 	eor.w	r1, r1, #1
   d539a:	6840      	ldr	r0, [r0, #4]
   d539c:	f7ff bc54 	b.w	d4c48 <network_listen>

000d53a0 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d53a0:	2300      	movs	r3, #0
   d53a2:	461a      	mov	r2, r3
   d53a4:	4619      	mov	r1, r3
   d53a6:	6840      	ldr	r0, [r0, #4]
   d53a8:	f7ff bc46 	b.w	d4c38 <network_off>

000d53ac <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d53ac:	2300      	movs	r3, #0
   d53ae:	461a      	mov	r2, r3
   d53b0:	4619      	mov	r1, r3
   d53b2:	6840      	ldr	r0, [r0, #4]
   d53b4:	f7ff bc38 	b.w	d4c28 <network_on>

000d53b8 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d53b8:	2200      	movs	r2, #0
   d53ba:	4611      	mov	r1, r2
   d53bc:	6840      	ldr	r0, [r0, #4]
   d53be:	f7ff bc2b 	b.w	d4c18 <network_ready>

000d53c2 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d53c2:	2200      	movs	r2, #0
   d53c4:	4611      	mov	r1, r2
   d53c6:	6840      	ldr	r0, [r0, #4]
   d53c8:	f7ff bc16 	b.w	d4bf8 <network_connecting>

000d53cc <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d53cc:	2200      	movs	r2, #0
   d53ce:	2102      	movs	r1, #2
   d53d0:	6840      	ldr	r0, [r0, #4]
   d53d2:	f7ff bc19 	b.w	d4c08 <network_disconnect>

000d53d6 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d53d6:	2300      	movs	r3, #0
   d53d8:	461a      	mov	r2, r3
   d53da:	6840      	ldr	r0, [r0, #4]
   d53dc:	f7ff bc04 	b.w	d4be8 <network_connect>

000d53e0 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d53e0:	4b02      	ldr	r3, [pc, #8]	; (d53ec <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d53e2:	2203      	movs	r2, #3
   d53e4:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d53e6:	4a02      	ldr	r2, [pc, #8]	; (d53f0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d53e8:	601a      	str	r2, [r3, #0]
   d53ea:	4770      	bx	lr
   d53ec:	2003e388 	.word	0x2003e388
   d53f0:	000d9640 	.word	0x000d9640

000d53f4 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d53f4:	4770      	bx	lr

000d53f6 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d53f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d53f8:	4606      	mov	r6, r0
   d53fa:	4615      	mov	r5, r2
   d53fc:	460c      	mov	r4, r1
   d53fe:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5400:	42bc      	cmp	r4, r7
   d5402:	d006      	beq.n	d5412 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d5404:	6833      	ldr	r3, [r6, #0]
   d5406:	f814 1b01 	ldrb.w	r1, [r4], #1
   d540a:	689b      	ldr	r3, [r3, #8]
   d540c:	4630      	mov	r0, r6
   d540e:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5410:	e7f6      	b.n	d5400 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d5412:	4628      	mov	r0, r5
   d5414:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5416 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d5416:	2200      	movs	r2, #0
   d5418:	7c00      	ldrb	r0, [r0, #16]
   d541a:	f7ff baa9 	b.w	d4970 <HAL_I2C_Write_Data>

000d541e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d541e:	2100      	movs	r1, #0
   d5420:	7c00      	ldrb	r0, [r0, #16]
   d5422:	f7ff baad 	b.w	d4980 <HAL_I2C_Available_Data>

000d5426 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d5426:	2100      	movs	r1, #0
   d5428:	7c00      	ldrb	r0, [r0, #16]
   d542a:	f7ff bab1 	b.w	d4990 <HAL_I2C_Read_Data>

000d542e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d542e:	2100      	movs	r1, #0
   d5430:	7c00      	ldrb	r0, [r0, #16]
   d5432:	f7ff bab5 	b.w	d49a0 <HAL_I2C_Peek_Data>

000d5436 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d5436:	2100      	movs	r1, #0
   d5438:	7c00      	ldrb	r0, [r0, #16]
   d543a:	f7ff bab9 	b.w	d49b0 <HAL_I2C_Flush_Data>

000d543e <_ZN7TwoWireD0Ev>:
   d543e:	b510      	push	{r4, lr}
   d5440:	2114      	movs	r1, #20
   d5442:	4604      	mov	r4, r0
   d5444:	f000 fe05 	bl	d6052 <_ZdlPvj>
   d5448:	4620      	mov	r0, r4
   d544a:	bd10      	pop	{r4, pc}

000d544c <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d544c:	b510      	push	{r4, lr}
   d544e:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d5450:	2300      	movs	r3, #0
   d5452:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d5454:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5458:	60a3      	str	r3, [r4, #8]
   d545a:	4b04      	ldr	r3, [pc, #16]	; (d546c <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d545c:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d545e:	4608      	mov	r0, r1
   d5460:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d5462:	4611      	mov	r1, r2
   d5464:	f7ff faac 	bl	d49c0 <HAL_I2C_Init>
}
   d5468:	4620      	mov	r0, r4
   d546a:	bd10      	pop	{r4, pc}
   d546c:	000d9674 	.word	0x000d9674

000d5470 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d5470:	2300      	movs	r3, #0
   d5472:	461a      	mov	r2, r3
   d5474:	4619      	mov	r1, r3
   d5476:	7c00      	ldrb	r0, [r0, #16]
   d5478:	f7ff ba62 	b.w	d4940 <HAL_I2C_Begin>

000d547c <_ZN7TwoWire17beginTransmissionEh>:
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d547c:	2200      	movs	r2, #0
   d547e:	7c00      	ldrb	r0, [r0, #16]
   d5480:	f7ff ba66 	b.w	d4950 <HAL_I2C_Begin_Transmission>

000d5484 <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
   d5484:	b2c9      	uxtb	r1, r1
   d5486:	f7ff bff9 	b.w	d547c <_ZN7TwoWire17beginTransmissionEh>

000d548a <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d548a:	2200      	movs	r2, #0
   d548c:	7c00      	ldrb	r0, [r0, #16]
   d548e:	f7ff ba67 	b.w	d4960 <HAL_I2C_End_Transmission>

000d5492 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
   d5492:	2101      	movs	r1, #1
   d5494:	f7ff bff9 	b.w	d548a <_ZN7TwoWire15endTransmissionEh>

000d5498 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d5498:	4770      	bx	lr

000d549a <_ZN9IPAddressD0Ev>:
   d549a:	b510      	push	{r4, lr}
   d549c:	2118      	movs	r1, #24
   d549e:	4604      	mov	r4, r0
   d54a0:	f000 fdd7 	bl	d6052 <_ZdlPvj>
   d54a4:	4620      	mov	r0, r4
   d54a6:	bd10      	pop	{r4, pc}

000d54a8 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d54a8:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d54aa:	7d03      	ldrb	r3, [r0, #20]
   d54ac:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d54ae:	b08d      	sub	sp, #52	; 0x34
   d54b0:	460e      	mov	r6, r1
   d54b2:	f100 0704 	add.w	r7, r0, #4
   d54b6:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d54ba:	d002      	beq.n	d54c2 <_ZNK9IPAddress7printToER5Print+0x1a>
   d54bc:	f100 0508 	add.w	r5, r0, #8
   d54c0:	e018      	b.n	d54f4 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d54c2:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d54c4:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d54c6:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d54ca:	232f      	movs	r3, #47	; 0x2f
   d54cc:	462a      	mov	r2, r5
   d54ce:	200a      	movs	r0, #10
   d54d0:	f7ff fa7e 	bl	d49d0 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d54d4:	4628      	mov	r0, r5
   d54d6:	f001 fd84 	bl	d6fe2 <strlen>
   d54da:	6833      	ldr	r3, [r6, #0]
   d54dc:	4602      	mov	r2, r0
   d54de:	68db      	ldr	r3, [r3, #12]
   d54e0:	4629      	mov	r1, r5
   d54e2:	4630      	mov	r0, r6
   d54e4:	4798      	blx	r3
   d54e6:	e00f      	b.n	d5508 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d54e8:	b124      	cbz	r4, d54f4 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d54ea:	212e      	movs	r1, #46	; 0x2e
   d54ec:	4630      	mov	r0, r6
   d54ee:	f000 f9d5 	bl	d589c <_ZN5Print5printEc>
   d54f2:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d54f4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d54f8:	220a      	movs	r2, #10
   d54fa:	4630      	mov	r0, r6
   d54fc:	f000 f9e7 	bl	d58ce <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5500:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5502:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5504:	d1f0      	bne.n	d54e8 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5506:	4620      	mov	r0, r4
    }
    return n;
}
   d5508:	b00d      	add	sp, #52	; 0x34
   d550a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d550c <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d550c:	b510      	push	{r4, lr}
   d550e:	4b05      	ldr	r3, [pc, #20]	; (d5524 <_ZN9IPAddressC1Ev+0x18>)
   d5510:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d5512:	2211      	movs	r2, #17
   d5514:	f840 3b04 	str.w	r3, [r0], #4
   d5518:	2100      	movs	r1, #0
   d551a:	f001 fd04 	bl	d6f26 <memset>
{
    clear();
}
   d551e:	4620      	mov	r0, r4
   d5520:	bd10      	pop	{r4, pc}
   d5522:	bf00      	nop
   d5524:	000d969c 	.word	0x000d969c

000d5528 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d5528:	4603      	mov	r3, r0
   d552a:	4a07      	ldr	r2, [pc, #28]	; (d5548 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d552c:	b510      	push	{r4, lr}
   d552e:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d5532:	f101 0210 	add.w	r2, r1, #16
   d5536:	f851 4b04 	ldr.w	r4, [r1], #4
   d553a:	f843 4b04 	str.w	r4, [r3], #4
   d553e:	4291      	cmp	r1, r2
   d5540:	d1f9      	bne.n	d5536 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d5542:	780a      	ldrb	r2, [r1, #0]
   d5544:	701a      	strb	r2, [r3, #0]
}
   d5546:	bd10      	pop	{r4, pc}
   d5548:	000d969c 	.word	0x000d969c

000d554c <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d554c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d554e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d5552:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d5556:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d555a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d555e:	2304      	movs	r3, #4
   d5560:	6041      	str	r1, [r0, #4]
   d5562:	7503      	strb	r3, [r0, #20]
   d5564:	bd10      	pop	{r4, pc}

000d5566 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d5566:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d5568:	780d      	ldrb	r5, [r1, #0]
   d556a:	788b      	ldrb	r3, [r1, #2]
   d556c:	784a      	ldrb	r2, [r1, #1]
   d556e:	78c9      	ldrb	r1, [r1, #3]
   d5570:	9100      	str	r1, [sp, #0]
   d5572:	4629      	mov	r1, r5
   d5574:	f7ff ffea 	bl	d554c <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d5578:	b003      	add	sp, #12
   d557a:	bd30      	pop	{r4, r5, pc}

000d557c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d557c:	4b01      	ldr	r3, [pc, #4]	; (d5584 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d557e:	4a02      	ldr	r2, [pc, #8]	; (d5588 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d5580:	601a      	str	r2, [r3, #0]
   d5582:	4770      	bx	lr
   d5584:	2003e390 	.word	0x2003e390
   d5588:	000d971b 	.word	0x000d971b

000d558c <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d558c:	2200      	movs	r2, #0
   d558e:	4611      	mov	r1, r2
   d5590:	6840      	ldr	r0, [r0, #4]
   d5592:	f7ff bb61 	b.w	d4c58 <network_listening>

000d5596 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5596:	2200      	movs	r2, #0
   d5598:	4611      	mov	r1, r2
   d559a:	6840      	ldr	r0, [r0, #4]
   d559c:	f7ff bb6c 	b.w	d4c78 <network_get_listen_timeout>

000d55a0 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d55a0:	2200      	movs	r2, #0
   d55a2:	6840      	ldr	r0, [r0, #4]
   d55a4:	f7ff bb60 	b.w	d4c68 <network_set_listen_timeout>

000d55a8 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d55a8:	2200      	movs	r2, #0
   d55aa:	f081 0101 	eor.w	r1, r1, #1
   d55ae:	6840      	ldr	r0, [r0, #4]
   d55b0:	f7ff bb4a 	b.w	d4c48 <network_listen>

000d55b4 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d55b4:	2300      	movs	r3, #0
   d55b6:	461a      	mov	r2, r3
   d55b8:	2101      	movs	r1, #1
   d55ba:	6840      	ldr	r0, [r0, #4]
   d55bc:	f7ff bb3c 	b.w	d4c38 <network_off>

000d55c0 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d55c0:	2300      	movs	r3, #0
   d55c2:	461a      	mov	r2, r3
   d55c4:	4619      	mov	r1, r3
   d55c6:	6840      	ldr	r0, [r0, #4]
   d55c8:	f7ff bb2e 	b.w	d4c28 <network_on>

000d55cc <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d55cc:	2200      	movs	r2, #0
   d55ce:	4611      	mov	r1, r2
   d55d0:	6840      	ldr	r0, [r0, #4]
   d55d2:	f7ff bb21 	b.w	d4c18 <network_ready>

000d55d6 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d55d6:	2200      	movs	r2, #0
   d55d8:	4611      	mov	r1, r2
   d55da:	6840      	ldr	r0, [r0, #4]
   d55dc:	f7ff bb0c 	b.w	d4bf8 <network_connecting>

000d55e0 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d55e0:	2200      	movs	r2, #0
   d55e2:	2102      	movs	r1, #2
   d55e4:	6840      	ldr	r0, [r0, #4]
   d55e6:	f7ff bb0f 	b.w	d4c08 <network_disconnect>

000d55ea <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d55ea:	2300      	movs	r3, #0
   d55ec:	461a      	mov	r2, r3
   d55ee:	6840      	ldr	r0, [r0, #4]
   d55f0:	f7ff bafa 	b.w	d4be8 <network_connect>

000d55f4 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d55f4:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d55f6:	4605      	mov	r5, r0
   d55f8:	b188      	cbz	r0, d561e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d55fa:	6804      	ldr	r4, [r0, #0]
   d55fc:	b14c      	cbz	r4, d5612 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d55fe:	68a3      	ldr	r3, [r4, #8]
   d5600:	b11b      	cbz	r3, d560a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5602:	2203      	movs	r2, #3
   d5604:	4621      	mov	r1, r4
   d5606:	4620      	mov	r0, r4
   d5608:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d560a:	2110      	movs	r1, #16
   d560c:	4620      	mov	r0, r4
   d560e:	f000 fd20 	bl	d6052 <_ZdlPvj>
   d5612:	4628      	mov	r0, r5
   d5614:	2114      	movs	r1, #20
      }
   d5616:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d561a:	f000 bd1a 	b.w	d6052 <_ZdlPvj>
   d561e:	bd38      	pop	{r3, r4, r5, pc}

000d5620 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d5620:	b110      	cbz	r0, d5628 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d5622:	6803      	ldr	r3, [r0, #0]
   d5624:	685b      	ldr	r3, [r3, #4]
   d5626:	4718      	bx	r3
   d5628:	4770      	bx	lr

000d562a <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d562a:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d562c:	6803      	ldr	r3, [r0, #0]
   d562e:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d5630:	b1bb      	cbz	r3, d5662 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d5632:	6858      	ldr	r0, [r3, #4]
   d5634:	f7ff f934 	bl	d48a0 <os_thread_is_current>
   d5638:	b978      	cbnz	r0, d565a <_ZN6ThreadD1Ev+0x30>
   d563a:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d563c:	7c5a      	ldrb	r2, [r3, #17]
   d563e:	b912      	cbnz	r2, d5646 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d5640:	6858      	ldr	r0, [r3, #4]
   d5642:	f7ff f935 	bl	d48b0 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d5646:	6823      	ldr	r3, [r4, #0]
   d5648:	6858      	ldr	r0, [r3, #4]
   d564a:	f7ff f939 	bl	d48c0 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d564e:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d5650:	2300      	movs	r3, #0
   d5652:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d5654:	b128      	cbz	r0, d5662 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d5656:	f7ff ffcd 	bl	d55f4 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d565a:	6820      	ldr	r0, [r4, #0]
   d565c:	b108      	cbz	r0, d5662 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d565e:	f7ff ffc9 	bl	d55f4 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d5662:	4620      	mov	r0, r4
   d5664:	bd10      	pop	{r4, pc}

000d5666 <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d5666:	b538      	push	{r3, r4, r5, lr}
   d5668:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d566a:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d566e:	b108      	cbz	r0, d5674 <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d5670:	f7fe fd17 	bl	d40a2 <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d5674:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d5678:	b108      	cbz	r0, d567e <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d567a:	f7ff f931 	bl	d48e0 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d567e:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d5682:	b135      	cbz	r5, d5692 <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5684:	4628      	mov	r0, r5
   d5686:	f7ff ffd0 	bl	d562a <_ZN6ThreadD1Ev>
   d568a:	2104      	movs	r1, #4
   d568c:	4628      	mov	r0, r5
   d568e:	f000 fce0 	bl	d6052 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5692:	6820      	ldr	r0, [r4, #0]
   d5694:	b108      	cbz	r0, d569a <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d5696:	f7ff ffc3 	bl	d5620 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d569a:	4620      	mov	r0, r4
   d569c:	bd38      	pop	{r3, r4, r5, pc}
	...

000d56a0 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d56a0:	b510      	push	{r4, lr}
   d56a2:	4b04      	ldr	r3, [pc, #16]	; (d56b4 <_ZN5spark9MeshClassD1Ev+0x14>)
   d56a4:	4604      	mov	r4, r0
   d56a6:	f840 3b08 	str.w	r3, [r0], #8
   d56aa:	f7ff ffdc 	bl	d5666 <_ZN5spark11MeshPublishD1Ev>
   d56ae:	4620      	mov	r0, r4
   d56b0:	bd10      	pop	{r4, pc}
   d56b2:	bf00      	nop
   d56b4:	000d9790 	.word	0x000d9790

000d56b8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d56b8:	b538      	push	{r3, r4, r5, lr}
   d56ba:	4c0e      	ldr	r4, [pc, #56]	; (d56f4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d56bc:	4b0e      	ldr	r3, [pc, #56]	; (d56f8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d56be:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d56c0:	2500      	movs	r5, #0
   d56c2:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d56c4:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d56c8:	6063      	str	r3, [r4, #4]
   d56ca:	60a5      	str	r5, [r4, #8]
   d56cc:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d56d0:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d56d4:	f7ff f8fc 	bl	d48d0 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d56d8:	4b08      	ldr	r3, [pc, #32]	; (d56fc <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d56da:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d56de:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d56e2:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d56e4:	4620      	mov	r0, r4
   d56e6:	4a06      	ldr	r2, [pc, #24]	; (d5700 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d56e8:	4906      	ldr	r1, [pc, #24]	; (d5704 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d56ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d56ee:	f000 bcab 	b.w	d6048 <__aeabi_atexit>
   d56f2:	bf00      	nop
   d56f4:	2003e394 	.word	0x2003e394
   d56f8:	000d97c4 	.word	0x000d97c4
   d56fc:	000d9790 	.word	0x000d9790
   d5700:	2003e224 	.word	0x2003e224
   d5704:	000d56a1 	.word	0x000d56a1

000d5708 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d5708:	2300      	movs	r3, #0
   d570a:	461a      	mov	r2, r3
   d570c:	6840      	ldr	r0, [r0, #4]
   d570e:	f7ff ba6b 	b.w	d4be8 <network_connect>

000d5712 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d5712:	2200      	movs	r2, #0
   d5714:	2102      	movs	r1, #2
   d5716:	6840      	ldr	r0, [r0, #4]
   d5718:	f7ff ba76 	b.w	d4c08 <network_disconnect>

000d571c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d571c:	2200      	movs	r2, #0
   d571e:	4611      	mov	r1, r2
   d5720:	6840      	ldr	r0, [r0, #4]
   d5722:	f7ff ba69 	b.w	d4bf8 <network_connecting>

000d5726 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d5726:	2200      	movs	r2, #0
   d5728:	4611      	mov	r1, r2
   d572a:	6840      	ldr	r0, [r0, #4]
   d572c:	f7ff ba74 	b.w	d4c18 <network_ready>

000d5730 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d5730:	2300      	movs	r3, #0
   d5732:	461a      	mov	r2, r3
   d5734:	4619      	mov	r1, r3
   d5736:	6840      	ldr	r0, [r0, #4]
   d5738:	f7ff ba76 	b.w	d4c28 <network_on>

000d573c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d573c:	2300      	movs	r3, #0
   d573e:	461a      	mov	r2, r3
   d5740:	4619      	mov	r1, r3
   d5742:	6840      	ldr	r0, [r0, #4]
   d5744:	f7ff ba78 	b.w	d4c38 <network_off>

000d5748 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d5748:	2200      	movs	r2, #0
   d574a:	f081 0101 	eor.w	r1, r1, #1
   d574e:	6840      	ldr	r0, [r0, #4]
   d5750:	f7ff ba7a 	b.w	d4c48 <network_listen>

000d5754 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d5754:	2200      	movs	r2, #0
   d5756:	6840      	ldr	r0, [r0, #4]
   d5758:	f7ff ba86 	b.w	d4c68 <network_set_listen_timeout>

000d575c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d575c:	2200      	movs	r2, #0
   d575e:	4611      	mov	r1, r2
   d5760:	6840      	ldr	r0, [r0, #4]
   d5762:	f7ff ba89 	b.w	d4c78 <network_get_listen_timeout>

000d5766 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d5766:	2200      	movs	r2, #0
   d5768:	4611      	mov	r1, r2
   d576a:	6840      	ldr	r0, [r0, #4]
   d576c:	f7ff ba74 	b.w	d4c58 <network_listening>

000d5770 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d5770:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5774:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d5776:	b095      	sub	sp, #84	; 0x54
   d5778:	4616      	mov	r6, r2
   d577a:	460d      	mov	r5, r1
   d577c:	4607      	mov	r7, r0
    IPAddress addr;
   d577e:	f7ff fec5 	bl	d550c <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d5782:	4621      	mov	r1, r4
   d5784:	2220      	movs	r2, #32
   d5786:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5788:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d578a:	f001 fbcc 	bl	d6f26 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d578e:	2340      	movs	r3, #64	; 0x40
   d5790:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d5792:	4621      	mov	r1, r4
   d5794:	466b      	mov	r3, sp
   d5796:	aa0c      	add	r2, sp, #48	; 0x30
   d5798:	4630      	mov	r0, r6
   d579a:	f7ff f929 	bl	d49f0 <netdb_getaddrinfo>
    if (!r) {
   d579e:	4604      	mov	r4, r0
   d57a0:	2800      	cmp	r0, #0
   d57a2:	d144      	bne.n	d582e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d57a4:	4602      	mov	r2, r0
   d57a6:	2101      	movs	r1, #1
   d57a8:	6868      	ldr	r0, [r5, #4]
   d57aa:	f7ff fa35 	bl	d4c18 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d57ae:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d57b0:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d57b2:	4622      	mov	r2, r4
   d57b4:	6868      	ldr	r0, [r5, #4]
   d57b6:	f7ff fa2f 	bl	d4c18 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d57ba:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d57bc:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d57be:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d57c0:	2e00      	cmp	r6, #0
   d57c2:	d034      	beq.n	d582e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d57c4:	2900      	cmp	r1, #0
   d57c6:	d132      	bne.n	d582e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d57c8:	6873      	ldr	r3, [r6, #4]
   d57ca:	2b02      	cmp	r3, #2
   d57cc:	d002      	beq.n	d57d4 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d57ce:	2b0a      	cmp	r3, #10
   d57d0:	d009      	beq.n	d57e6 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d57d2:	e02a      	b.n	d582a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d57d4:	f1b8 0f00 	cmp.w	r8, #0
   d57d8:	d027      	beq.n	d582a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d57da:	6971      	ldr	r1, [r6, #20]
   d57dc:	4638      	mov	r0, r7
   d57de:	3104      	adds	r1, #4
   d57e0:	f7ff fec1 	bl	d5566 <_ZN9IPAddressaSEPKh>
   d57e4:	e020      	b.n	d5828 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d57e6:	f1b9 0f00 	cmp.w	r9, #0
   d57ea:	d01e      	beq.n	d582a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d57ec:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d57ee:	2211      	movs	r2, #17
   d57f0:	a801      	add	r0, sp, #4
   d57f2:	f001 fb98 	bl	d6f26 <memset>
                    a.v = 6;
   d57f6:	2306      	movs	r3, #6
   d57f8:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d57fc:	ad01      	add	r5, sp, #4
   d57fe:	f104 0308 	add.w	r3, r4, #8
   d5802:	3418      	adds	r4, #24
   d5804:	6818      	ldr	r0, [r3, #0]
   d5806:	6859      	ldr	r1, [r3, #4]
   d5808:	462a      	mov	r2, r5
   d580a:	c203      	stmia	r2!, {r0, r1}
   d580c:	3308      	adds	r3, #8
   d580e:	42a3      	cmp	r3, r4
   d5810:	4615      	mov	r5, r2
   d5812:	d1f7      	bne.n	d5804 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d5814:	a901      	add	r1, sp, #4
   d5816:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d5818:	ad07      	add	r5, sp, #28
   d581a:	f7ff fe85 	bl	d5528 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d581e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5820:	1d3c      	adds	r4, r7, #4
   d5822:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5824:	682b      	ldr	r3, [r5, #0]
   d5826:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d5828:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d582a:	69f6      	ldr	r6, [r6, #28]
   d582c:	e7c8      	b.n	d57c0 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d582e:	9800      	ldr	r0, [sp, #0]
   d5830:	f7ff f8d6 	bl	d49e0 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d5834:	4638      	mov	r0, r7
   d5836:	b015      	add	sp, #84	; 0x54
   d5838:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d583c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d583c:	4b02      	ldr	r3, [pc, #8]	; (d5848 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d583e:	4a03      	ldr	r2, [pc, #12]	; (d584c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d5840:	601a      	str	r2, [r3, #0]
   d5842:	2200      	movs	r2, #0
   d5844:	605a      	str	r2, [r3, #4]
   d5846:	4770      	bx	lr
   d5848:	2003e568 	.word	0x2003e568
   d584c:	000d97c4 	.word	0x000d97c4

000d5850 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d5850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5852:	4606      	mov	r6, r0
   d5854:	460d      	mov	r5, r1
   d5856:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d5858:	2400      	movs	r4, #0
  while (size--) {
   d585a:	42bd      	cmp	r5, r7
   d585c:	d00c      	beq.n	d5878 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d585e:	6833      	ldr	r3, [r6, #0]
   d5860:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5864:	689b      	ldr	r3, [r3, #8]
   d5866:	4630      	mov	r0, r6
   d5868:	4798      	blx	r3
     if (chunk>=0)
   d586a:	2800      	cmp	r0, #0
   d586c:	db01      	blt.n	d5872 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d586e:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d5870:	e7f3      	b.n	d585a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d5872:	2c00      	cmp	r4, #0
   d5874:	bf08      	it	eq
   d5876:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d5878:	4620      	mov	r0, r4
   d587a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d587c <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d587c:	b570      	push	{r4, r5, r6, lr}
   d587e:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d5880:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d5882:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d5884:	b149      	cbz	r1, d589a <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d5886:	f001 fbac 	bl	d6fe2 <strlen>
   d588a:	682b      	ldr	r3, [r5, #0]
   d588c:	4602      	mov	r2, r0
   d588e:	4621      	mov	r1, r4
   d5890:	4628      	mov	r0, r5
   d5892:	68db      	ldr	r3, [r3, #12]
    }
   d5894:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5898:	4718      	bx	r3
    }
   d589a:	bd70      	pop	{r4, r5, r6, pc}

000d589c <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d589c:	6803      	ldr	r3, [r0, #0]
   d589e:	689b      	ldr	r3, [r3, #8]
   d58a0:	4718      	bx	r3

000d58a2 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d58a2:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d58a4:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d58a6:	4605      	mov	r5, r0
  size_t n = print('\r');
   d58a8:	f7ff fff8 	bl	d589c <_ZN5Print5printEc>
  n += print('\n');
   d58ac:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d58ae:	4604      	mov	r4, r0
  n += print('\n');
   d58b0:	4628      	mov	r0, r5
   d58b2:	f7ff fff3 	bl	d589c <_ZN5Print5printEc>
  return n;
}
   d58b6:	4420      	add	r0, r4
   d58b8:	bd38      	pop	{r3, r4, r5, pc}

000d58ba <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d58ba:	b538      	push	{r3, r4, r5, lr}
   d58bc:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d58be:	f7ff ffdd 	bl	d587c <_ZN5Print5writeEPKc>
   d58c2:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d58c4:	4628      	mov	r0, r5
   d58c6:	f7ff ffec 	bl	d58a2 <_ZN5Print7printlnEv>
  return n;
}
   d58ca:	4420      	add	r0, r4
   d58cc:	bd38      	pop	{r3, r4, r5, pc}

000d58ce <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d58ce:	b530      	push	{r4, r5, lr}
   d58d0:	b08b      	sub	sp, #44	; 0x2c
   d58d2:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d58d4:	2100      	movs	r1, #0
   d58d6:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d58da:	2a01      	cmp	r2, #1
   d58dc:	bf98      	it	ls
   d58de:	220a      	movls	r2, #10
   d58e0:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d58e4:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d58e8:	fb05 3312 	mls	r3, r5, r2, r3
   d58ec:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d58f0:	2b09      	cmp	r3, #9
   d58f2:	bf94      	ite	ls
   d58f4:	3330      	addls	r3, #48	; 0x30
   d58f6:	3337      	addhi	r3, #55	; 0x37
   d58f8:	b2db      	uxtb	r3, r3
   d58fa:	4621      	mov	r1, r4
   d58fc:	f804 3901 	strb.w	r3, [r4], #-1
   d5900:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d5902:	2d00      	cmp	r5, #0
   d5904:	d1ee      	bne.n	d58e4 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d5906:	f7ff ffb9 	bl	d587c <_ZN5Print5writeEPKc>
}
   d590a:	b00b      	add	sp, #44	; 0x2c
   d590c:	bd30      	pop	{r4, r5, pc}

000d590e <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d590e:	b40c      	push	{r2, r3}
   d5910:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5914:	b087      	sub	sp, #28
   d5916:	af00      	add	r7, sp, #0
   d5918:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d591c:	4605      	mov	r5, r0
   d591e:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d5922:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d5924:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d5926:	4623      	mov	r3, r4
   d5928:	464a      	mov	r2, r9
   d592a:	2114      	movs	r1, #20
   d592c:	1d38      	adds	r0, r7, #4
   d592e:	f7ff f9d3 	bl	d4cd8 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d5932:	2813      	cmp	r0, #19
   d5934:	d805      	bhi.n	d5942 <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d5936:	1d39      	adds	r1, r7, #4
   d5938:	4628      	mov	r0, r5
   d593a:	f7ff ff9f 	bl	d587c <_ZN5Print5writeEPKc>
   d593e:	4604      	mov	r4, r0
   d5940:	e013      	b.n	d596a <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d5942:	f100 0308 	add.w	r3, r0, #8
   d5946:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d594a:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d594c:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d5950:	1c41      	adds	r1, r0, #1
   d5952:	4623      	mov	r3, r4
   d5954:	464a      	mov	r2, r9
   d5956:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d5958:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d595a:	f7ff f9bd 	bl	d4cd8 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d595e:	4669      	mov	r1, sp
   d5960:	4628      	mov	r0, r5
   d5962:	f7ff ff8b 	bl	d587c <_ZN5Print5writeEPKc>
   d5966:	4604      	mov	r4, r0
   d5968:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d596a:	b11e      	cbz	r6, d5974 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d596c:	4628      	mov	r0, r5
   d596e:	f7ff ff98 	bl	d58a2 <_ZN5Print7printlnEv>
   d5972:	4404      	add	r4, r0
    return n;
}
   d5974:	4620      	mov	r0, r4
   d5976:	371c      	adds	r7, #28
   d5978:	46bd      	mov	sp, r7
   d597a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d597e:	b002      	add	sp, #8
   d5980:	4770      	bx	lr

000d5982 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d5982:	b510      	push	{r4, lr}
   d5984:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5986:	f7fe fe3d 	bl	d4604 <_ZNSt14_Function_baseD1Ev>
   d598a:	4620      	mov	r0, r4
   d598c:	bd10      	pop	{r4, pc}
	...

000d5990 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5990:	4803      	ldr	r0, [pc, #12]	; (d59a0 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d5992:	4a04      	ldr	r2, [pc, #16]	; (d59a4 <_GLOBAL__sub_I_RGB+0x14>)
   d5994:	4904      	ldr	r1, [pc, #16]	; (d59a8 <_GLOBAL__sub_I_RGB+0x18>)
   d5996:	2300      	movs	r3, #0
   d5998:	6083      	str	r3, [r0, #8]
   d599a:	f000 bb55 	b.w	d6048 <__aeabi_atexit>
   d599e:	bf00      	nop
   d59a0:	2003e570 	.word	0x2003e570
   d59a4:	2003e224 	.word	0x2003e224
   d59a8:	000d5983 	.word	0x000d5983

000d59ac <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d59ac:	b510      	push	{r4, lr}
   d59ae:	4604      	mov	r4, r0
{
	free(buffer);
   d59b0:	6800      	ldr	r0, [r0, #0]
   d59b2:	f7ff f971 	bl	d4c98 <free>
}
   d59b6:	4620      	mov	r0, r4
   d59b8:	bd10      	pop	{r4, pc}

000d59ba <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d59ba:	b510      	push	{r4, lr}
   d59bc:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d59be:	6800      	ldr	r0, [r0, #0]
   d59c0:	b108      	cbz	r0, d59c6 <_ZN6String10invalidateEv+0xc>
   d59c2:	f7ff f969 	bl	d4c98 <free>
	buffer = NULL;
   d59c6:	2300      	movs	r3, #0
   d59c8:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d59ca:	60a3      	str	r3, [r4, #8]
   d59cc:	6063      	str	r3, [r4, #4]
   d59ce:	bd10      	pop	{r4, pc}

000d59d0 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d59d0:	b538      	push	{r3, r4, r5, lr}
   d59d2:	4604      	mov	r4, r0
   d59d4:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d59d6:	6800      	ldr	r0, [r0, #0]
   d59d8:	3101      	adds	r1, #1
   d59da:	f7ff f965 	bl	d4ca8 <realloc>
	if (newbuffer) {
   d59de:	b110      	cbz	r0, d59e6 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d59e0:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d59e4:	2001      	movs	r0, #1
	}
	return 0;
}
   d59e6:	bd38      	pop	{r3, r4, r5, pc}

000d59e8 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d59e8:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d59ea:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d59ec:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d59ee:	b113      	cbz	r3, d59f6 <_ZN6String7reserveEj+0xe>
   d59f0:	6843      	ldr	r3, [r0, #4]
   d59f2:	428b      	cmp	r3, r1
   d59f4:	d207      	bcs.n	d5a06 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d59f6:	4620      	mov	r0, r4
   d59f8:	f7ff ffea 	bl	d59d0 <_ZN6String12changeBufferEj>
   d59fc:	b120      	cbz	r0, d5a08 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d59fe:	68a3      	ldr	r3, [r4, #8]
   d5a00:	b90b      	cbnz	r3, d5a06 <_ZN6String7reserveEj+0x1e>
   d5a02:	6822      	ldr	r2, [r4, #0]
   d5a04:	7013      	strb	r3, [r2, #0]
   d5a06:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d5a08:	bd10      	pop	{r4, pc}

000d5a0a <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d5a0a:	b570      	push	{r4, r5, r6, lr}
   d5a0c:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d5a0e:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d5a10:	4604      	mov	r4, r0
   d5a12:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d5a14:	f7ff ffe8 	bl	d59e8 <_ZN6String7reserveEj>
   d5a18:	b918      	cbnz	r0, d5a22 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d5a1a:	4620      	mov	r0, r4
   d5a1c:	f7ff ffcd 	bl	d59ba <_ZN6String10invalidateEv>
		return *this;
   d5a20:	e009      	b.n	d5a36 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d5a22:	462a      	mov	r2, r5
   d5a24:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d5a26:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d5a28:	6820      	ldr	r0, [r4, #0]
   d5a2a:	f001 fa71 	bl	d6f10 <memcpy>
	buffer[len] = 0;
   d5a2e:	6822      	ldr	r2, [r4, #0]
   d5a30:	68a3      	ldr	r3, [r4, #8]
   d5a32:	2100      	movs	r1, #0
   d5a34:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d5a36:	4620      	mov	r0, r4
   d5a38:	bd70      	pop	{r4, r5, r6, pc}

000d5a3a <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d5a3a:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5a3c:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d5a3e:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5a40:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d5a42:	6043      	str	r3, [r0, #4]
	len = 0;
   d5a44:	6083      	str	r3, [r0, #8]
	flags = 0;
   d5a46:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d5a48:	460d      	mov	r5, r1
   d5a4a:	b139      	cbz	r1, d5a5c <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d5a4c:	4608      	mov	r0, r1
   d5a4e:	f001 fac8 	bl	d6fe2 <strlen>
   d5a52:	4629      	mov	r1, r5
   d5a54:	4602      	mov	r2, r0
   d5a56:	4620      	mov	r0, r4
   d5a58:	f7ff ffd7 	bl	d5a0a <_ZN6String4copyEPKcj>
}
   d5a5c:	4620      	mov	r0, r4
   d5a5e:	bd38      	pop	{r3, r4, r5, pc}

000d5a60 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d5a60:	b538      	push	{r3, r4, r5, lr}
   d5a62:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   d5a64:	460c      	mov	r4, r1
   d5a66:	b141      	cbz	r1, d5a7a <_ZN6StringaSEPKc+0x1a>
   d5a68:	4608      	mov	r0, r1
   d5a6a:	f001 faba 	bl	d6fe2 <strlen>
   d5a6e:	4621      	mov	r1, r4
   d5a70:	4602      	mov	r2, r0
   d5a72:	4628      	mov	r0, r5
   d5a74:	f7ff ffc9 	bl	d5a0a <_ZN6String4copyEPKcj>
   d5a78:	e001      	b.n	d5a7e <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   d5a7a:	f7ff ff9e 	bl	d59ba <_ZN6String10invalidateEv>

	return *this;
}
   d5a7e:	4628      	mov	r0, r5
   d5a80:	bd38      	pop	{r3, r4, r5, pc}

000d5a82 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d5a82:	b510      	push	{r4, lr}
   d5a84:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d5a86:	6800      	ldr	r0, [r0, #0]
   d5a88:	b118      	cbz	r0, d5a92 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   d5a8a:	f7ff f905 	bl	d4c98 <free>
            wakeupSource_ = nullptr;
   d5a8e:	2300      	movs	r3, #0
   d5a90:	6023      	str	r3, [r4, #0]
   d5a92:	bd10      	pop	{r4, pc}

000d5a94 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d5a94:	b510      	push	{r4, lr}
   d5a96:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d5a98:	f7ff fff3 	bl	d5a82 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d5a9c:	4620      	mov	r0, r4
   d5a9e:	bd10      	pop	{r4, pc}

000d5aa0 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d5aa0:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d5aa2:	4c09      	ldr	r4, [pc, #36]	; (d5ac8 <_GLOBAL__sub_I_System+0x28>)
   d5aa4:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d5aa6:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d5aaa:	6020      	str	r0, [r4, #0]
   d5aac:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d5aae:	71a0      	strb	r0, [r4, #6]
   d5ab0:	8120      	strh	r0, [r4, #8]
   d5ab2:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d5ab4:	f7ff f824 	bl	d4b00 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d5ab8:	4620      	mov	r0, r4
   d5aba:	4a04      	ldr	r2, [pc, #16]	; (d5acc <_GLOBAL__sub_I_System+0x2c>)
   d5abc:	4904      	ldr	r1, [pc, #16]	; (d5ad0 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d5abe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d5ac2:	f000 bac1 	b.w	d6048 <__aeabi_atexit>
   d5ac6:	bf00      	nop
   d5ac8:	2003e580 	.word	0x2003e580
   d5acc:	2003e224 	.word	0x2003e224
   d5ad0:	000d5a95 	.word	0x000d5a95

000d5ad4 <_ZL22Refresh_UnixTime_Cachel>:
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d5ad4:	b5f0      	push	{r4, r5, r6, r7, lr}
    unix_time += time_zone_cache;
   d5ad6:	4b14      	ldr	r3, [pc, #80]	; (d5b28 <_ZL22Refresh_UnixTime_Cachel+0x54>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d5ad8:	4f14      	ldr	r7, [pc, #80]	; (d5b2c <_ZL22Refresh_UnixTime_Cachel+0x58>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   d5ada:	681e      	ldr	r6, [r3, #0]
    unix_time += dst_current_cache;
   d5adc:	4b14      	ldr	r3, [pc, #80]	; (d5b30 <_ZL22Refresh_UnixTime_Cachel+0x5c>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   d5ade:	4406      	add	r6, r0
    unix_time += dst_current_cache;
   d5ae0:	6818      	ldr	r0, [r3, #0]
    if(unix_time != unix_time_cache)
   d5ae2:	683b      	ldr	r3, [r7, #0]

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
   d5ae4:	4406      	add	r6, r0
    if(unix_time != unix_time_cache)
   d5ae6:	429e      	cmp	r6, r3
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d5ae8:	b08b      	sub	sp, #44	; 0x2c
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d5aea:	d01b      	beq.n	d5b24 <_ZL22Refresh_UnixTime_Cachel+0x50>
   d5aec:	a80a      	add	r0, sp, #40	; 0x28
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
	return *calendar_time;
   d5aee:	ad01      	add	r5, sp, #4
   d5af0:	f840 6d28 	str.w	r6, [r0, #-40]!

/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
   d5af4:	f001 f910 	bl	d6d18 <localtime>
	calendar_time->tm_year += 1900;
   d5af8:	6943      	ldr	r3, [r0, #20]
   d5afa:	f203 736c 	addw	r3, r3, #1900	; 0x76c
   d5afe:	6143      	str	r3, [r0, #20]
	return *calendar_time;
   d5b00:	4604      	mov	r4, r0
   d5b02:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d5b04:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d5b06:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d5b08:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d5b0a:	f8d4 e000 	ldr.w	lr, [r4]
   d5b0e:	f8c5 e000 	str.w	lr, [r5]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d5b12:	ad01      	add	r5, sp, #4
   d5b14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5b16:	4c07      	ldr	r4, [pc, #28]	; (d5b34 <_ZL22Refresh_UnixTime_Cachel+0x60>)
   d5b18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5b1a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5b1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   d5b1e:	603e      	str	r6, [r7, #0]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d5b20:	f8c4 e000 	str.w	lr, [r4]
            unix_time_cache = unix_time;
    }
}
   d5b24:	b00b      	add	sp, #44	; 0x2c
   d5b26:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5b28:	2003e5bc 	.word	0x2003e5bc
   d5b2c:	2003e5b8 	.word	0x2003e5b8
   d5b30:	2003e5b4 	.word	0x2003e5b4
   d5b34:	2003e58c 	.word	0x2003e58c

000d5b38 <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   d5b38:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d5b3a:	2000      	movs	r0, #0
   d5b3c:	f7ff f844 	bl	d4bc8 <spark_sync_time_pending>
   d5b40:	b128      	cbz	r0, d5b4e <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5b42:	f7ff f821 	bl	d4b88 <spark_cloud_flag_connected>
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d5b46:	f080 0001 	eor.w	r0, r0, #1
   d5b4a:	b2c0      	uxtb	r0, r0
   d5b4c:	bd08      	pop	{r3, pc}
   d5b4e:	2001      	movs	r0, #1
    }
   d5b50:	bd08      	pop	{r3, pc}
	...

000d5b54 <_ZN9TimeClass12hourFormat12El>:
	return hourFormat12(now());
}

/* the hour for the given time in 12 hour format */
int TimeClass::hourFormat12(time_t t)
{
   d5b54:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   d5b56:	f7ff ffbd 	bl	d5ad4 <_ZL22Refresh_UnixTime_Cachel>
	if(calendar_time_cache.tm_hour == 0)
   d5b5a:	4b04      	ldr	r3, [pc, #16]	; (d5b6c <_ZN9TimeClass12hourFormat12El+0x18>)
   d5b5c:	6898      	ldr	r0, [r3, #8]
   d5b5e:	b118      	cbz	r0, d5b68 <_ZN9TimeClass12hourFormat12El+0x14>
		return 12;	//midnight
	else if( calendar_time_cache.tm_hour > 12)
   d5b60:	280c      	cmp	r0, #12
   d5b62:	dd02      	ble.n	d5b6a <_ZN9TimeClass12hourFormat12El+0x16>
		return calendar_time_cache.tm_hour - 12 ;
   d5b64:	380c      	subs	r0, #12
   d5b66:	bd08      	pop	{r3, pc}
/* the hour for the given time in 12 hour format */
int TimeClass::hourFormat12(time_t t)
{
	Refresh_UnixTime_Cache(t);
	if(calendar_time_cache.tm_hour == 0)
		return 12;	//midnight
   d5b68:	200c      	movs	r0, #12
	else if( calendar_time_cache.tm_hour > 12)
		return calendar_time_cache.tm_hour - 12 ;
	else
		return calendar_time_cache.tm_hour ;
}
   d5b6a:	bd08      	pop	{r3, pc}
   d5b6c:	2003e58c 	.word	0x2003e58c

000d5b70 <_ZN9TimeClass4zoneEf>:
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
	if(GMT_Offset < -12 || GMT_Offset > 14)
   d5b70:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
   d5b74:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d5b78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d5b7c:	d40f      	bmi.n	d5b9e <_ZN9TimeClass4zoneEf+0x2e>
   d5b7e:	eef2 7a0c 	vmov.f32	s15, #44	; 0x41600000  14.0
   d5b82:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d5b86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d5b8a:	dc08      	bgt.n	d5b9e <_ZN9TimeClass4zoneEf+0x2e>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
   d5b8c:	eddf 7a04 	vldr	s15, [pc, #16]	; d5ba0 <_ZN9TimeClass4zoneEf+0x30>
   d5b90:	4b04      	ldr	r3, [pc, #16]	; (d5ba4 <_ZN9TimeClass4zoneEf+0x34>)
   d5b92:	ee20 0a27 	vmul.f32	s0, s0, s15
   d5b96:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   d5b9a:	ed83 0a00 	vstr	s0, [r3]
   d5b9e:	4770      	bx	lr
   d5ba0:	45610000 	.word	0x45610000
   d5ba4:	2003e5bc 	.word	0x2003e5bc

000d5ba8 <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d5ba8:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
   d5baa:	2000      	movs	r0, #0
   d5bac:	f7fe feb8 	bl	d4920 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
   d5bb0:	4604      	mov	r4, r0
   d5bb2:	b968      	cbnz	r0, d5bd0 <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d5bb4:	f7fe ff9c 	bl	d4af0 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d5bb8:	2801      	cmp	r0, #1
   d5bba:	d10b      	bne.n	d5bd4 <_ZN9TimeClass7isValidEv+0x2c>
   d5bbc:	4620      	mov	r0, r4
   d5bbe:	f7fe ffbf 	bl	d4b40 <system_thread_get_state>
   d5bc2:	b938      	cbnz	r0, d5bd4 <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
   d5bc4:	f7ff ffb8 	bl	d5b38 <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d5bc8:	b930      	cbnz	r0, d5bd8 <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
   d5bca:	f7fe ffd5 	bl	d4b78 <spark_process>
   d5bce:	e7f9      	b.n	d5bc4 <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
   d5bd0:	2001      	movs	r0, #1
   d5bd2:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
   d5bd4:	2000      	movs	r0, #0
   d5bd6:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
   d5bd8:	f7ff ffae 	bl	d5b38 <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
   d5bdc:	2000      	movs	r0, #0
   d5bde:	f7fe fe9f 	bl	d4920 <HAL_RTC_Time_Is_Valid>
   d5be2:	3000      	adds	r0, #0
   d5be4:	bf18      	it	ne
   d5be6:	2001      	movne	r0, #1
    }
    return rtcstate;
}
   d5be8:	bd10      	pop	{r4, pc}

000d5bea <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
   d5bea:	b508      	push	{r3, lr}
    (void)isValid();
   d5bec:	f7ff ffdc 	bl	d5ba8 <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
   d5bf0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
   d5bf4:	f7fe be8c 	b.w	d4910 <HAL_RTC_Get_UnixTime>

000d5bf8 <_ZN9TimeClass12hourFormat12Ev>:
	return calendar_time_cache.tm_hour;
}

/* current hour in 12 hour format */
int TimeClass::hourFormat12()
{
   d5bf8:	b508      	push	{r3, lr}
	return hourFormat12(now());
   d5bfa:	f7ff fff6 	bl	d5bea <_ZN9TimeClass3nowEv>
}
   d5bfe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
}

/* current hour in 12 hour format */
int TimeClass::hourFormat12()
{
	return hourFormat12(now());
   d5c02:	f7ff bfa7 	b.w	d5b54 <_ZN9TimeClass12hourFormat12El>
	...

000d5c08 <_ZN9TimeClass6minuteEv>:
	return (hour(t) >= 12);
}

/* current minute */
int TimeClass::minute()
{
   d5c08:	b508      	push	{r3, lr}
	return minute(now());
   d5c0a:	f7ff ffee 	bl	d5bea <_ZN9TimeClass3nowEv>
}

/* the minute for the given time */
int TimeClass::minute(time_t t)
{
	Refresh_UnixTime_Cache(t);
   d5c0e:	f7ff ff61 	bl	d5ad4 <_ZL22Refresh_UnixTime_Cachel>

/* current minute */
int TimeClass::minute()
{
	return minute(now());
}
   d5c12:	4b01      	ldr	r3, [pc, #4]	; (d5c18 <_ZN9TimeClass6minuteEv+0x10>)
   d5c14:	6858      	ldr	r0, [r3, #4]
   d5c16:	bd08      	pop	{r3, pc}
   d5c18:	2003e58c 	.word	0x2003e58c

000d5c1c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d5c1c:	4b02      	ldr	r3, [pc, #8]	; (d5c28 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d5c1e:	681a      	ldr	r2, [r3, #0]
   d5c20:	4b02      	ldr	r3, [pc, #8]	; (d5c2c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d5c22:	601a      	str	r2, [r3, #0]
   d5c24:	4770      	bx	lr
   d5c26:	bf00      	nop
   d5c28:	2003e134 	.word	0x2003e134
   d5c2c:	2003e5b0 	.word	0x2003e5b0

000d5c30 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d5c30:	4770      	bx	lr

000d5c32 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5c32:	7441      	strb	r1, [r0, #17]
   d5c34:	4770      	bx	lr

000d5c36 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d5c36:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d5c38:	7c00      	ldrb	r0, [r0, #16]
   d5c3a:	f7fe ff11 	bl	d4a60 <HAL_USART_Available_Data_For_Write>
}
   d5c3e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5c42:	bd08      	pop	{r3, pc}

000d5c44 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d5c44:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d5c46:	7c00      	ldrb	r0, [r0, #16]
   d5c48:	f7fe feea 	bl	d4a20 <HAL_USART_Available_Data>
}
   d5c4c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5c50:	bd08      	pop	{r3, pc}

000d5c52 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d5c52:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d5c54:	7c00      	ldrb	r0, [r0, #16]
   d5c56:	f7fe fef3 	bl	d4a40 <HAL_USART_Peek_Data>
}
   d5c5a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5c5e:	bf28      	it	cs
   d5c60:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d5c64:	bd08      	pop	{r3, pc}

000d5c66 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d5c66:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d5c68:	7c00      	ldrb	r0, [r0, #16]
   d5c6a:	f7fe fee1 	bl	d4a30 <HAL_USART_Read_Data>
}
   d5c6e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5c72:	bf28      	it	cs
   d5c74:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d5c78:	bd08      	pop	{r3, pc}

000d5c7a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d5c7a:	7c00      	ldrb	r0, [r0, #16]
   d5c7c:	f7fe bee8 	b.w	d4a50 <HAL_USART_Flush_Data>

000d5c80 <_ZN11USARTSerialD0Ev>:
   d5c80:	b510      	push	{r4, lr}
   d5c82:	2114      	movs	r1, #20
   d5c84:	4604      	mov	r4, r0
   d5c86:	f000 f9e4 	bl	d6052 <_ZdlPvj>
   d5c8a:	4620      	mov	r0, r4
   d5c8c:	bd10      	pop	{r4, pc}

000d5c8e <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d5c8e:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5c90:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d5c92:	4604      	mov	r4, r0
   d5c94:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5c96:	b925      	cbnz	r5, d5ca2 <_ZN11USARTSerial5writeEh+0x14>
   d5c98:	7c00      	ldrb	r0, [r0, #16]
   d5c9a:	f7fe fee1 	bl	d4a60 <HAL_USART_Available_Data_For_Write>
   d5c9e:	2800      	cmp	r0, #0
   d5ca0:	dd05      	ble.n	d5cae <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d5ca2:	4631      	mov	r1, r6
   d5ca4:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d5ca6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d5caa:	f7fe beb1 	b.w	d4a10 <HAL_USART_Write_Data>
  }
  return 0;
}
   d5cae:	4628      	mov	r0, r5
   d5cb0:	bd70      	pop	{r4, r5, r6, pc}
	...

000d5cb4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d5cb4:	b510      	push	{r4, lr}
   d5cb6:	4604      	mov	r4, r0
   d5cb8:	4608      	mov	r0, r1
   d5cba:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d5cbc:	2200      	movs	r2, #0
   d5cbe:	6062      	str	r2, [r4, #4]
   d5cc0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5cc4:	60a2      	str	r2, [r4, #8]
   d5cc6:	4a05      	ldr	r2, [pc, #20]	; (d5cdc <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d5cc8:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d5cca:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d5ccc:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d5cce:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d5cd0:	461a      	mov	r2, r3
   d5cd2:	f7fe fe95 	bl	d4a00 <HAL_USART_Init>
}
   d5cd6:	4620      	mov	r0, r4
   d5cd8:	bd10      	pop	{r4, pc}
   d5cda:	bf00      	nop
   d5cdc:	000d9820 	.word	0x000d9820

000d5ce0 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d5ce0:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d5ce2:	4d0c      	ldr	r5, [pc, #48]	; (d5d14 <_Z22__fetch_global_Serial1v+0x34>)
   d5ce4:	6829      	ldr	r1, [r5, #0]
   d5ce6:	f011 0401 	ands.w	r4, r1, #1
   d5cea:	d111      	bne.n	d5d10 <_Z22__fetch_global_Serial1v+0x30>
   d5cec:	4628      	mov	r0, r5
   d5cee:	f7fe f9da 	bl	d40a6 <__cxa_guard_acquire>
   d5cf2:	b168      	cbz	r0, d5d10 <_Z22__fetch_global_Serial1v+0x30>
   d5cf4:	4a08      	ldr	r2, [pc, #32]	; (d5d18 <_Z22__fetch_global_Serial1v+0x38>)
   d5cf6:	4b09      	ldr	r3, [pc, #36]	; (d5d1c <_Z22__fetch_global_Serial1v+0x3c>)
   d5cf8:	4809      	ldr	r0, [pc, #36]	; (d5d20 <_Z22__fetch_global_Serial1v+0x40>)
   d5cfa:	4621      	mov	r1, r4
   d5cfc:	f7ff ffda 	bl	d5cb4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d5d00:	4628      	mov	r0, r5
   d5d02:	f7fe f9d5 	bl	d40b0 <__cxa_guard_release>
   d5d06:	4a07      	ldr	r2, [pc, #28]	; (d5d24 <_Z22__fetch_global_Serial1v+0x44>)
   d5d08:	4907      	ldr	r1, [pc, #28]	; (d5d28 <_Z22__fetch_global_Serial1v+0x48>)
   d5d0a:	4805      	ldr	r0, [pc, #20]	; (d5d20 <_Z22__fetch_global_Serial1v+0x40>)
   d5d0c:	f000 f99c 	bl	d6048 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d5d10:	4803      	ldr	r0, [pc, #12]	; (d5d20 <_Z22__fetch_global_Serial1v+0x40>)
   d5d12:	bd38      	pop	{r3, r4, r5, pc}
   d5d14:	2003e658 	.word	0x2003e658
   d5d18:	2003e65c 	.word	0x2003e65c
   d5d1c:	2003e5d4 	.word	0x2003e5d4
   d5d20:	2003e5c0 	.word	0x2003e5c0
   d5d24:	2003e224 	.word	0x2003e224
   d5d28:	000d5c31 	.word	0x000d5c31

000d5d2c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5d2c:	7441      	strb	r1, [r0, #17]
   d5d2e:	4770      	bx	lr

000d5d30 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d5d30:	4770      	bx	lr

000d5d32 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d5d32:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d5d34:	2100      	movs	r1, #0
   d5d36:	7c00      	ldrb	r0, [r0, #16]
   d5d38:	f7fe feba 	bl	d4ab0 <HAL_USB_USART_Receive_Data>
}
   d5d3c:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5d40:	bf28      	it	cs
   d5d42:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d5d46:	bd08      	pop	{r3, pc}

000d5d48 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d5d48:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d5d4a:	2101      	movs	r1, #1
   d5d4c:	7c00      	ldrb	r0, [r0, #16]
   d5d4e:	f7fe feaf 	bl	d4ab0 <HAL_USB_USART_Receive_Data>
}
   d5d52:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5d56:	bf28      	it	cs
   d5d58:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d5d5c:	bd08      	pop	{r3, pc}

000d5d5e <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d5d5e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d5d60:	7c00      	ldrb	r0, [r0, #16]
   d5d62:	f7fe fe9d 	bl	d4aa0 <HAL_USB_USART_Available_Data_For_Write>
}
   d5d66:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5d6a:	bd08      	pop	{r3, pc}

000d5d6c <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d5d6c:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d5d6e:	7c00      	ldrb	r0, [r0, #16]
   d5d70:	f7fe fe8e 	bl	d4a90 <HAL_USB_USART_Available_Data>
}
   d5d74:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5d78:	bd08      	pop	{r3, pc}

000d5d7a <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d5d7a:	7c00      	ldrb	r0, [r0, #16]
   d5d7c:	f7fe bea8 	b.w	d4ad0 <HAL_USB_USART_Flush_Data>

000d5d80 <_ZN9USBSerialD0Ev>:
   d5d80:	b510      	push	{r4, lr}
   d5d82:	2114      	movs	r1, #20
   d5d84:	4604      	mov	r4, r0
   d5d86:	f000 f964 	bl	d6052 <_ZdlPvj>
   d5d8a:	4620      	mov	r0, r4
   d5d8c:	bd10      	pop	{r4, pc}

000d5d8e <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d5d8e:	b538      	push	{r3, r4, r5, lr}
   d5d90:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5d92:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d5d94:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5d96:	f7fe fe83 	bl	d4aa0 <HAL_USB_USART_Available_Data_For_Write>
   d5d9a:	2800      	cmp	r0, #0
   d5d9c:	dc01      	bgt.n	d5da2 <_ZN9USBSerial5writeEh+0x14>
   d5d9e:	7c60      	ldrb	r0, [r4, #17]
   d5da0:	b128      	cbz	r0, d5dae <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d5da2:	4629      	mov	r1, r5
   d5da4:	7c20      	ldrb	r0, [r4, #16]
   d5da6:	f7fe fe8b 	bl	d4ac0 <HAL_USB_USART_Send_Data>
   d5daa:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d5dae:	bd38      	pop	{r3, r4, r5, pc}

000d5db0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5db0:	b510      	push	{r4, lr}
   d5db2:	4604      	mov	r4, r0
   d5db4:	2300      	movs	r3, #0
   d5db6:	6063      	str	r3, [r4, #4]
   d5db8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5dbc:	60a3      	str	r3, [r4, #8]
   d5dbe:	4b05      	ldr	r3, [pc, #20]	; (d5dd4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d5dc0:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d5dc2:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5dc4:	4608      	mov	r0, r1
{
  _serial = serial;
   d5dc6:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d5dc8:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d5dca:	4611      	mov	r1, r2
   d5dcc:	f7fe fe50 	bl	d4a70 <HAL_USB_USART_Init>
}
   d5dd0:	4620      	mov	r0, r4
   d5dd2:	bd10      	pop	{r4, pc}
   d5dd4:	000d9850 	.word	0x000d9850

000d5dd8 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d5dd8:	2200      	movs	r2, #0
   d5dda:	7c00      	ldrb	r0, [r0, #16]
   d5ddc:	f7fe be50 	b.w	d4a80 <HAL_USB_USART_Begin>

000d5de0 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5de0:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d5de2:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5de4:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d5de6:	2100      	movs	r1, #0
   d5de8:	f001 f89d 	bl	d6f26 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d5dec:	4620      	mov	r0, r4
   d5dee:	bd10      	pop	{r4, pc}

000d5df0 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d5df0:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5df2:	4d0e      	ldr	r5, [pc, #56]	; (d5e2c <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d5df4:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d5df6:	a801      	add	r0, sp, #4
   d5df8:	f7ff fff2 	bl	d5de0 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5dfc:	6829      	ldr	r1, [r5, #0]
   d5dfe:	f011 0401 	ands.w	r4, r1, #1
   d5e02:	d110      	bne.n	d5e26 <_Z16_fetch_usbserialv+0x36>
   d5e04:	4628      	mov	r0, r5
   d5e06:	f7fe f94e 	bl	d40a6 <__cxa_guard_acquire>
   d5e0a:	b160      	cbz	r0, d5e26 <_Z16_fetch_usbserialv+0x36>
   d5e0c:	aa01      	add	r2, sp, #4
   d5e0e:	4621      	mov	r1, r4
   d5e10:	4807      	ldr	r0, [pc, #28]	; (d5e30 <_Z16_fetch_usbserialv+0x40>)
   d5e12:	f7ff ffcd 	bl	d5db0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d5e16:	4628      	mov	r0, r5
   d5e18:	f7fe f94a 	bl	d40b0 <__cxa_guard_release>
   d5e1c:	4a05      	ldr	r2, [pc, #20]	; (d5e34 <_Z16_fetch_usbserialv+0x44>)
   d5e1e:	4906      	ldr	r1, [pc, #24]	; (d5e38 <_Z16_fetch_usbserialv+0x48>)
   d5e20:	4803      	ldr	r0, [pc, #12]	; (d5e30 <_Z16_fetch_usbserialv+0x40>)
   d5e22:	f000 f911 	bl	d6048 <__aeabi_atexit>
	return _usbserial;
}
   d5e26:	4802      	ldr	r0, [pc, #8]	; (d5e30 <_Z16_fetch_usbserialv+0x40>)
   d5e28:	b007      	add	sp, #28
   d5e2a:	bd30      	pop	{r4, r5, pc}
   d5e2c:	2003e6e0 	.word	0x2003e6e0
   d5e30:	2003e6e4 	.word	0x2003e6e4
   d5e34:	2003e224 	.word	0x2003e224
   d5e38:	000d5d31 	.word	0x000d5d31

000d5e3c <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d5e3c:	2200      	movs	r2, #0
   d5e3e:	4611      	mov	r1, r2
   d5e40:	6840      	ldr	r0, [r0, #4]
   d5e42:	f7fe bee9 	b.w	d4c18 <network_ready>

000d5e46 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5e46:	2200      	movs	r2, #0
   d5e48:	4611      	mov	r1, r2
   d5e4a:	6840      	ldr	r0, [r0, #4]
   d5e4c:	f7fe bf04 	b.w	d4c58 <network_listening>

000d5e50 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5e50:	2200      	movs	r2, #0
   d5e52:	4611      	mov	r1, r2
   d5e54:	6840      	ldr	r0, [r0, #4]
   d5e56:	f7fe bf0f 	b.w	d4c78 <network_get_listen_timeout>

000d5e5a <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5e5a:	2200      	movs	r2, #0
   d5e5c:	6840      	ldr	r0, [r0, #4]
   d5e5e:	f7fe bf03 	b.w	d4c68 <network_set_listen_timeout>

000d5e62 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5e62:	2200      	movs	r2, #0
   d5e64:	f081 0101 	eor.w	r1, r1, #1
   d5e68:	6840      	ldr	r0, [r0, #4]
   d5e6a:	f7fe beed 	b.w	d4c48 <network_listen>

000d5e6e <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d5e6e:	2300      	movs	r3, #0
   d5e70:	461a      	mov	r2, r3
   d5e72:	4619      	mov	r1, r3
   d5e74:	6840      	ldr	r0, [r0, #4]
   d5e76:	f7fe bedf 	b.w	d4c38 <network_off>

000d5e7a <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d5e7a:	2300      	movs	r3, #0
   d5e7c:	461a      	mov	r2, r3
   d5e7e:	4619      	mov	r1, r3
   d5e80:	6840      	ldr	r0, [r0, #4]
   d5e82:	f7fe bed1 	b.w	d4c28 <network_on>

000d5e86 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5e86:	2200      	movs	r2, #0
   d5e88:	4611      	mov	r1, r2
   d5e8a:	6840      	ldr	r0, [r0, #4]
   d5e8c:	f7fe beb4 	b.w	d4bf8 <network_connecting>

000d5e90 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5e90:	2200      	movs	r2, #0
   d5e92:	2102      	movs	r1, #2
   d5e94:	6840      	ldr	r0, [r0, #4]
   d5e96:	f7fe beb7 	b.w	d4c08 <network_disconnect>

000d5e9a <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5e9a:	2300      	movs	r3, #0
   d5e9c:	461a      	mov	r2, r3
   d5e9e:	6840      	ldr	r0, [r0, #4]
   d5ea0:	f7fe bea2 	b.w	d4be8 <network_connect>

000d5ea4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d5ea4:	4b02      	ldr	r3, [pc, #8]	; (d5eb0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d5ea6:	2204      	movs	r2, #4
   d5ea8:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d5eaa:	4a02      	ldr	r2, [pc, #8]	; (d5eb4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d5eac:	601a      	str	r2, [r3, #0]
   d5eae:	4770      	bx	lr
   d5eb0:	2003e6f8 	.word	0x2003e6f8
   d5eb4:	000d9880 	.word	0x000d9880

000d5eb8 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d5eb8:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d5eba:	4b0c      	ldr	r3, [pc, #48]	; (d5eec <serialEventRun+0x34>)
   d5ebc:	b133      	cbz	r3, d5ecc <serialEventRun+0x14>
   d5ebe:	f7ff ff97 	bl	d5df0 <_Z16_fetch_usbserialv>
   d5ec2:	6803      	ldr	r3, [r0, #0]
   d5ec4:	691b      	ldr	r3, [r3, #16]
   d5ec6:	4798      	blx	r3
   d5ec8:	2800      	cmp	r0, #0
   d5eca:	dc09      	bgt.n	d5ee0 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d5ecc:	4b08      	ldr	r3, [pc, #32]	; (d5ef0 <serialEventRun+0x38>)
   d5ece:	b163      	cbz	r3, d5eea <serialEventRun+0x32>
   d5ed0:	f7ff ff06 	bl	d5ce0 <_Z22__fetch_global_Serial1v>
   d5ed4:	6803      	ldr	r3, [r0, #0]
   d5ed6:	691b      	ldr	r3, [r3, #16]
   d5ed8:	4798      	blx	r3
   d5eda:	2800      	cmp	r0, #0
   d5edc:	dc03      	bgt.n	d5ee6 <serialEventRun+0x2e>
   d5ede:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d5ee0:	f3af 8000 	nop.w
   d5ee4:	e7f2      	b.n	d5ecc <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d5ee6:	f3af 8000 	nop.w
   d5eea:	bd08      	pop	{r3, pc}
	...

000d5ef4 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d5ef4:	b508      	push	{r3, lr}
	serialEventRun();
   d5ef6:	f7ff ffdf 	bl	d5eb8 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d5efa:	f7fe fd01 	bl	d4900 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d5efe:	4b01      	ldr	r3, [pc, #4]	; (d5f04 <_post_loop+0x10>)
   d5f00:	6018      	str	r0, [r3, #0]
   d5f02:	bd08      	pop	{r3, pc}
   d5f04:	2003e708 	.word	0x2003e708

000d5f08 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d5f08:	4802      	ldr	r0, [pc, #8]	; (d5f14 <_Z33system_initialize_user_backup_ramv+0xc>)
   d5f0a:	4a03      	ldr	r2, [pc, #12]	; (d5f18 <_Z33system_initialize_user_backup_ramv+0x10>)
   d5f0c:	4903      	ldr	r1, [pc, #12]	; (d5f1c <_Z33system_initialize_user_backup_ramv+0x14>)
   d5f0e:	1a12      	subs	r2, r2, r0
   d5f10:	f000 bffe 	b.w	d6f10 <memcpy>
   d5f14:	2003f400 	.word	0x2003f400
   d5f18:	2003f404 	.word	0x2003f404
   d5f1c:	000d9c60 	.word	0x000d9c60

000d5f20 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d5f20:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5f22:	2300      	movs	r3, #0
   d5f24:	9300      	str	r3, [sp, #0]
   d5f26:	461a      	mov	r2, r3
   d5f28:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5f2c:	f7fe fe1a 	bl	d4b64 <system_ctrl_set_result>
}
   d5f30:	b003      	add	sp, #12
   d5f32:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d5f38 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d5f38:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d5f3a:	8843      	ldrh	r3, [r0, #2]
   d5f3c:	2b0a      	cmp	r3, #10
   d5f3e:	d008      	beq.n	d5f52 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d5f40:	2b50      	cmp	r3, #80	; 0x50
   d5f42:	d109      	bne.n	d5f58 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d5f44:	4b09      	ldr	r3, [pc, #36]	; (d5f6c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d5f46:	681b      	ldr	r3, [r3, #0]
   d5f48:	b13b      	cbz	r3, d5f5a <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d5f4a:	b003      	add	sp, #12
   d5f4c:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d5f50:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d5f52:	f7ff ffe5 	bl	d5f20 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d5f56:	e006      	b.n	d5f66 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5f58:	2300      	movs	r3, #0
   d5f5a:	9300      	str	r3, [sp, #0]
   d5f5c:	461a      	mov	r2, r3
   d5f5e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5f62:	f7fe fdff 	bl	d4b64 <system_ctrl_set_result>
        break;
    }
}
   d5f66:	b003      	add	sp, #12
   d5f68:	f85d fb04 	ldr.w	pc, [sp], #4
   d5f6c:	2003e700 	.word	0x2003e700

000d5f70 <module_user_init_hook>:

void module_user_init_hook()
{
   d5f70:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d5f72:	4c10      	ldr	r4, [pc, #64]	; (d5fb4 <module_user_init_hook+0x44>)
   d5f74:	4d10      	ldr	r5, [pc, #64]	; (d5fb8 <module_user_init_hook+0x48>)
   d5f76:	6823      	ldr	r3, [r4, #0]
   d5f78:	42ab      	cmp	r3, r5
   d5f7a:	4b10      	ldr	r3, [pc, #64]	; (d5fbc <module_user_init_hook+0x4c>)
   d5f7c:	bf0c      	ite	eq
   d5f7e:	2201      	moveq	r2, #1
   d5f80:	2200      	movne	r2, #0
   d5f82:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d5f84:	d002      	beq.n	d5f8c <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d5f86:	f7ff ffbf 	bl	d5f08 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d5f8a:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d5f8c:	f7fe fcb0 	bl	d48f0 <HAL_RNG_GetRandomNumber>
   d5f90:	4604      	mov	r4, r0
    srand(seed);
   d5f92:	f000 ffd1 	bl	d6f38 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d5f96:	4b0a      	ldr	r3, [pc, #40]	; (d5fc0 <module_user_init_hook+0x50>)
   d5f98:	b113      	cbz	r3, d5fa0 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d5f9a:	4620      	mov	r0, r4
   d5f9c:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d5fa0:	2100      	movs	r1, #0
   d5fa2:	4807      	ldr	r0, [pc, #28]	; (d5fc0 <module_user_init_hook+0x50>)
   d5fa4:	f7fe fe18 	bl	d4bd8 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5fa8:	2100      	movs	r1, #0
   d5faa:	4806      	ldr	r0, [pc, #24]	; (d5fc4 <module_user_init_hook+0x54>)
}
   d5fac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5fb0:	f7fe bdce 	b.w	d4b50 <system_ctrl_set_app_request_handler>
   d5fb4:	2003f400 	.word	0x2003f400
   d5fb8:	9a271c1e 	.word	0x9a271c1e
   d5fbc:	2003e704 	.word	0x2003e704
   d5fc0:	00000000 	.word	0x00000000
   d5fc4:	000d5f39 	.word	0x000d5f39

000d5fc8 <_Z17acquireWireBufferv>:
   d5fc8:	b570      	push	{r4, r5, r6, lr}
   d5fca:	4604      	mov	r4, r0
   d5fcc:	2514      	movs	r5, #20
   d5fce:	462a      	mov	r2, r5
   d5fd0:	4e09      	ldr	r6, [pc, #36]	; (d5ff8 <_Z17acquireWireBufferv+0x30>)
   d5fd2:	2100      	movs	r1, #0
   d5fd4:	f000 ffa7 	bl	d6f26 <memset>
   d5fd8:	8025      	strh	r5, [r4, #0]
   d5fda:	2520      	movs	r5, #32
   d5fdc:	4631      	mov	r1, r6
   d5fde:	60a5      	str	r5, [r4, #8]
   d5fe0:	6125      	str	r5, [r4, #16]
   d5fe2:	4628      	mov	r0, r5
   d5fe4:	f000 f84f 	bl	d6086 <_ZnajRKSt9nothrow_t>
   d5fe8:	4631      	mov	r1, r6
   d5fea:	6060      	str	r0, [r4, #4]
   d5fec:	4628      	mov	r0, r5
   d5fee:	f000 f84a 	bl	d6086 <_ZnajRKSt9nothrow_t>
   d5ff2:	60e0      	str	r0, [r4, #12]
   d5ff4:	4620      	mov	r0, r4
   d5ff6:	bd70      	pop	{r4, r5, r6, pc}
   d5ff8:	000d98ac 	.word	0x000d98ac

000d5ffc <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d5ffc:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d5ffe:	4d0e      	ldr	r5, [pc, #56]	; (d6038 <_Z19__fetch_global_Wirev+0x3c>)
   d6000:	6829      	ldr	r1, [r5, #0]
   d6002:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d6006:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d6008:	d113      	bne.n	d6032 <_Z19__fetch_global_Wirev+0x36>
   d600a:	4628      	mov	r0, r5
   d600c:	f7fe f84b 	bl	d40a6 <__cxa_guard_acquire>
   d6010:	b178      	cbz	r0, d6032 <_Z19__fetch_global_Wirev+0x36>
   d6012:	a801      	add	r0, sp, #4
   d6014:	f7ff ffd8 	bl	d5fc8 <_Z17acquireWireBufferv>
   d6018:	aa01      	add	r2, sp, #4
   d601a:	4621      	mov	r1, r4
   d601c:	4807      	ldr	r0, [pc, #28]	; (d603c <_Z19__fetch_global_Wirev+0x40>)
   d601e:	f7ff fa15 	bl	d544c <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d6022:	4628      	mov	r0, r5
   d6024:	f7fe f844 	bl	d40b0 <__cxa_guard_release>
   d6028:	4a05      	ldr	r2, [pc, #20]	; (d6040 <_Z19__fetch_global_Wirev+0x44>)
   d602a:	4906      	ldr	r1, [pc, #24]	; (d6044 <_Z19__fetch_global_Wirev+0x48>)
   d602c:	4803      	ldr	r0, [pc, #12]	; (d603c <_Z19__fetch_global_Wirev+0x40>)
   d602e:	f000 f80b 	bl	d6048 <__aeabi_atexit>
	return wire;
}
   d6032:	4802      	ldr	r0, [pc, #8]	; (d603c <_Z19__fetch_global_Wirev+0x40>)
   d6034:	b007      	add	sp, #28
   d6036:	bd30      	pop	{r4, r5, pc}
   d6038:	2003e70c 	.word	0x2003e70c
   d603c:	2003e710 	.word	0x2003e710
   d6040:	2003e224 	.word	0x2003e224
   d6044:	000d53f5 	.word	0x000d53f5

000d6048 <__aeabi_atexit>:
   d6048:	460b      	mov	r3, r1
   d604a:	4601      	mov	r1, r0
   d604c:	4618      	mov	r0, r3
   d604e:	f000 be55 	b.w	d6cfc <__cxa_atexit>

000d6052 <_ZdlPvj>:
   d6052:	f7fe b824 	b.w	d409e <_ZdlPv>
	...

000d6058 <_ZSt15get_new_handlerv>:
   d6058:	4b02      	ldr	r3, [pc, #8]	; (d6064 <_ZSt15get_new_handlerv+0xc>)
   d605a:	6818      	ldr	r0, [r3, #0]
   d605c:	f3bf 8f5f 	dmb	sy
   d6060:	4770      	bx	lr
   d6062:	bf00      	nop
   d6064:	2003e724 	.word	0x2003e724

000d6068 <_ZnwjRKSt9nothrow_t>:
   d6068:	b510      	push	{r4, lr}
   d606a:	2800      	cmp	r0, #0
   d606c:	bf14      	ite	ne
   d606e:	4604      	movne	r4, r0
   d6070:	2401      	moveq	r4, #1
   d6072:	4620      	mov	r0, r4
   d6074:	f7fe fe08 	bl	d4c88 <malloc>
   d6078:	b920      	cbnz	r0, d6084 <_ZnwjRKSt9nothrow_t+0x1c>
   d607a:	f7ff ffed 	bl	d6058 <_ZSt15get_new_handlerv>
   d607e:	b108      	cbz	r0, d6084 <_ZnwjRKSt9nothrow_t+0x1c>
   d6080:	4780      	blx	r0
   d6082:	e7f6      	b.n	d6072 <_ZnwjRKSt9nothrow_t+0xa>
   d6084:	bd10      	pop	{r4, pc}

000d6086 <_ZnajRKSt9nothrow_t>:
   d6086:	f7ff bfef 	b.w	d6068 <_ZnwjRKSt9nothrow_t>

000d608a <_ZSt25__throw_bad_function_callv>:
   d608a:	b508      	push	{r3, lr}
   d608c:	f7fe fe2c 	bl	d4ce8 <abort>

000d6090 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d6090:	4b24      	ldr	r3, [pc, #144]	; (d6124 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d6092:	681a      	ldr	r2, [r3, #0]
   d6094:	07d0      	lsls	r0, r2, #31
   d6096:	bf5c      	itt	pl
   d6098:	2201      	movpl	r2, #1
   d609a:	601a      	strpl	r2, [r3, #0]
   d609c:	4b22      	ldr	r3, [pc, #136]	; (d6128 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d609e:	681a      	ldr	r2, [r3, #0]
   d60a0:	07d1      	lsls	r1, r2, #31
   d60a2:	bf5c      	itt	pl
   d60a4:	2201      	movpl	r2, #1
   d60a6:	601a      	strpl	r2, [r3, #0]
   d60a8:	4b20      	ldr	r3, [pc, #128]	; (d612c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d60aa:	681a      	ldr	r2, [r3, #0]
   d60ac:	07d2      	lsls	r2, r2, #31
   d60ae:	bf5c      	itt	pl
   d60b0:	2201      	movpl	r2, #1
   d60b2:	601a      	strpl	r2, [r3, #0]
   d60b4:	4b1e      	ldr	r3, [pc, #120]	; (d6130 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d60b6:	681a      	ldr	r2, [r3, #0]
   d60b8:	07d0      	lsls	r0, r2, #31
   d60ba:	bf5c      	itt	pl
   d60bc:	2201      	movpl	r2, #1
   d60be:	601a      	strpl	r2, [r3, #0]
   d60c0:	4b1c      	ldr	r3, [pc, #112]	; (d6134 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d60c2:	681a      	ldr	r2, [r3, #0]
   d60c4:	07d1      	lsls	r1, r2, #31
   d60c6:	bf5c      	itt	pl
   d60c8:	2201      	movpl	r2, #1
   d60ca:	601a      	strpl	r2, [r3, #0]
   d60cc:	4b1a      	ldr	r3, [pc, #104]	; (d6138 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d60ce:	681a      	ldr	r2, [r3, #0]
   d60d0:	07d2      	lsls	r2, r2, #31
   d60d2:	bf5c      	itt	pl
   d60d4:	2201      	movpl	r2, #1
   d60d6:	601a      	strpl	r2, [r3, #0]
   d60d8:	4b18      	ldr	r3, [pc, #96]	; (d613c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d60da:	681a      	ldr	r2, [r3, #0]
   d60dc:	07d0      	lsls	r0, r2, #31
   d60de:	bf5c      	itt	pl
   d60e0:	2201      	movpl	r2, #1
   d60e2:	601a      	strpl	r2, [r3, #0]
   d60e4:	4b16      	ldr	r3, [pc, #88]	; (d6140 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d60e6:	681a      	ldr	r2, [r3, #0]
   d60e8:	07d1      	lsls	r1, r2, #31
   d60ea:	bf5c      	itt	pl
   d60ec:	2201      	movpl	r2, #1
   d60ee:	601a      	strpl	r2, [r3, #0]
   d60f0:	4b14      	ldr	r3, [pc, #80]	; (d6144 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d60f2:	681a      	ldr	r2, [r3, #0]
   d60f4:	07d2      	lsls	r2, r2, #31
   d60f6:	bf5c      	itt	pl
   d60f8:	2201      	movpl	r2, #1
   d60fa:	601a      	strpl	r2, [r3, #0]
   d60fc:	4b12      	ldr	r3, [pc, #72]	; (d6148 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d60fe:	681a      	ldr	r2, [r3, #0]
   d6100:	07d0      	lsls	r0, r2, #31
   d6102:	bf5c      	itt	pl
   d6104:	2201      	movpl	r2, #1
   d6106:	601a      	strpl	r2, [r3, #0]
   d6108:	4b10      	ldr	r3, [pc, #64]	; (d614c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d610a:	681a      	ldr	r2, [r3, #0]
   d610c:	07d1      	lsls	r1, r2, #31
   d610e:	bf5c      	itt	pl
   d6110:	2201      	movpl	r2, #1
   d6112:	601a      	strpl	r2, [r3, #0]
   d6114:	4b0e      	ldr	r3, [pc, #56]	; (d6150 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d6116:	681a      	ldr	r2, [r3, #0]
   d6118:	07d2      	lsls	r2, r2, #31
   d611a:	bf5c      	itt	pl
   d611c:	2201      	movpl	r2, #1
   d611e:	601a      	strpl	r2, [r3, #0]
   d6120:	4770      	bx	lr
   d6122:	bf00      	nop
   d6124:	2003e754 	.word	0x2003e754
   d6128:	2003e750 	.word	0x2003e750
   d612c:	2003e74c 	.word	0x2003e74c
   d6130:	2003e748 	.word	0x2003e748
   d6134:	2003e744 	.word	0x2003e744
   d6138:	2003e740 	.word	0x2003e740
   d613c:	2003e73c 	.word	0x2003e73c
   d6140:	2003e738 	.word	0x2003e738
   d6144:	2003e734 	.word	0x2003e734
   d6148:	2003e730 	.word	0x2003e730
   d614c:	2003e72c 	.word	0x2003e72c
   d6150:	2003e728 	.word	0x2003e728

000d6154 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d6154:	4b18      	ldr	r3, [pc, #96]	; (d61b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d6156:	681a      	ldr	r2, [r3, #0]
   d6158:	07d1      	lsls	r1, r2, #31
   d615a:	bf5c      	itt	pl
   d615c:	2201      	movpl	r2, #1
   d615e:	601a      	strpl	r2, [r3, #0]
   d6160:	4b16      	ldr	r3, [pc, #88]	; (d61bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d6162:	681a      	ldr	r2, [r3, #0]
   d6164:	07d2      	lsls	r2, r2, #31
   d6166:	bf5c      	itt	pl
   d6168:	2201      	movpl	r2, #1
   d616a:	601a      	strpl	r2, [r3, #0]
   d616c:	4b14      	ldr	r3, [pc, #80]	; (d61c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d616e:	681a      	ldr	r2, [r3, #0]
   d6170:	07d0      	lsls	r0, r2, #31
   d6172:	bf5c      	itt	pl
   d6174:	2201      	movpl	r2, #1
   d6176:	601a      	strpl	r2, [r3, #0]
   d6178:	4b12      	ldr	r3, [pc, #72]	; (d61c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d617a:	681a      	ldr	r2, [r3, #0]
   d617c:	07d1      	lsls	r1, r2, #31
   d617e:	bf5c      	itt	pl
   d6180:	2201      	movpl	r2, #1
   d6182:	601a      	strpl	r2, [r3, #0]
   d6184:	4b10      	ldr	r3, [pc, #64]	; (d61c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d6186:	681a      	ldr	r2, [r3, #0]
   d6188:	07d2      	lsls	r2, r2, #31
   d618a:	bf5c      	itt	pl
   d618c:	2201      	movpl	r2, #1
   d618e:	601a      	strpl	r2, [r3, #0]
   d6190:	4b0e      	ldr	r3, [pc, #56]	; (d61cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d6192:	681a      	ldr	r2, [r3, #0]
   d6194:	07d0      	lsls	r0, r2, #31
   d6196:	bf5c      	itt	pl
   d6198:	2201      	movpl	r2, #1
   d619a:	601a      	strpl	r2, [r3, #0]
   d619c:	4b0c      	ldr	r3, [pc, #48]	; (d61d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d619e:	681a      	ldr	r2, [r3, #0]
   d61a0:	07d1      	lsls	r1, r2, #31
   d61a2:	bf5c      	itt	pl
   d61a4:	2201      	movpl	r2, #1
   d61a6:	601a      	strpl	r2, [r3, #0]
   d61a8:	4b0a      	ldr	r3, [pc, #40]	; (d61d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d61aa:	681a      	ldr	r2, [r3, #0]
   d61ac:	07d2      	lsls	r2, r2, #31
   d61ae:	bf5c      	itt	pl
   d61b0:	2201      	movpl	r2, #1
   d61b2:	601a      	strpl	r2, [r3, #0]
   d61b4:	4770      	bx	lr
   d61b6:	bf00      	nop
   d61b8:	2003e774 	.word	0x2003e774
   d61bc:	2003e770 	.word	0x2003e770
   d61c0:	2003e76c 	.word	0x2003e76c
   d61c4:	2003e768 	.word	0x2003e768
   d61c8:	2003e764 	.word	0x2003e764
   d61cc:	2003e760 	.word	0x2003e760
   d61d0:	2003e75c 	.word	0x2003e75c
   d61d4:	2003e758 	.word	0x2003e758

000d61d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d61d8:	4b18      	ldr	r3, [pc, #96]	; (d623c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d61da:	681a      	ldr	r2, [r3, #0]
   d61dc:	07d1      	lsls	r1, r2, #31
   d61de:	bf5c      	itt	pl
   d61e0:	2201      	movpl	r2, #1
   d61e2:	601a      	strpl	r2, [r3, #0]
   d61e4:	4b16      	ldr	r3, [pc, #88]	; (d6240 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d61e6:	681a      	ldr	r2, [r3, #0]
   d61e8:	07d2      	lsls	r2, r2, #31
   d61ea:	bf5c      	itt	pl
   d61ec:	2201      	movpl	r2, #1
   d61ee:	601a      	strpl	r2, [r3, #0]
   d61f0:	4b14      	ldr	r3, [pc, #80]	; (d6244 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d61f2:	681a      	ldr	r2, [r3, #0]
   d61f4:	07d0      	lsls	r0, r2, #31
   d61f6:	bf5c      	itt	pl
   d61f8:	2201      	movpl	r2, #1
   d61fa:	601a      	strpl	r2, [r3, #0]
   d61fc:	4b12      	ldr	r3, [pc, #72]	; (d6248 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d61fe:	681a      	ldr	r2, [r3, #0]
   d6200:	07d1      	lsls	r1, r2, #31
   d6202:	bf5c      	itt	pl
   d6204:	2201      	movpl	r2, #1
   d6206:	601a      	strpl	r2, [r3, #0]
   d6208:	4b10      	ldr	r3, [pc, #64]	; (d624c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d620a:	681a      	ldr	r2, [r3, #0]
   d620c:	07d2      	lsls	r2, r2, #31
   d620e:	bf5c      	itt	pl
   d6210:	2201      	movpl	r2, #1
   d6212:	601a      	strpl	r2, [r3, #0]
   d6214:	4b0e      	ldr	r3, [pc, #56]	; (d6250 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d6216:	681a      	ldr	r2, [r3, #0]
   d6218:	07d0      	lsls	r0, r2, #31
   d621a:	bf5c      	itt	pl
   d621c:	2201      	movpl	r2, #1
   d621e:	601a      	strpl	r2, [r3, #0]
   d6220:	4b0c      	ldr	r3, [pc, #48]	; (d6254 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d6222:	681a      	ldr	r2, [r3, #0]
   d6224:	07d1      	lsls	r1, r2, #31
   d6226:	bf5c      	itt	pl
   d6228:	2201      	movpl	r2, #1
   d622a:	601a      	strpl	r2, [r3, #0]
   d622c:	4b0a      	ldr	r3, [pc, #40]	; (d6258 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d622e:	681a      	ldr	r2, [r3, #0]
   d6230:	07d2      	lsls	r2, r2, #31
   d6232:	bf5c      	itt	pl
   d6234:	2201      	movpl	r2, #1
   d6236:	601a      	strpl	r2, [r3, #0]
   d6238:	4770      	bx	lr
   d623a:	bf00      	nop
   d623c:	2003e794 	.word	0x2003e794
   d6240:	2003e790 	.word	0x2003e790
   d6244:	2003e78c 	.word	0x2003e78c
   d6248:	2003e788 	.word	0x2003e788
   d624c:	2003e784 	.word	0x2003e784
   d6250:	2003e780 	.word	0x2003e780
   d6254:	2003e77c 	.word	0x2003e77c
   d6258:	2003e778 	.word	0x2003e778

000d625c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d625c:	4b24      	ldr	r3, [pc, #144]	; (d62f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d625e:	681a      	ldr	r2, [r3, #0]
   d6260:	07d0      	lsls	r0, r2, #31
   d6262:	bf5c      	itt	pl
   d6264:	2201      	movpl	r2, #1
   d6266:	601a      	strpl	r2, [r3, #0]
   d6268:	4b22      	ldr	r3, [pc, #136]	; (d62f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d626a:	681a      	ldr	r2, [r3, #0]
   d626c:	07d1      	lsls	r1, r2, #31
   d626e:	bf5c      	itt	pl
   d6270:	2201      	movpl	r2, #1
   d6272:	601a      	strpl	r2, [r3, #0]
   d6274:	4b20      	ldr	r3, [pc, #128]	; (d62f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d6276:	681a      	ldr	r2, [r3, #0]
   d6278:	07d2      	lsls	r2, r2, #31
   d627a:	bf5c      	itt	pl
   d627c:	2201      	movpl	r2, #1
   d627e:	601a      	strpl	r2, [r3, #0]
   d6280:	4b1e      	ldr	r3, [pc, #120]	; (d62fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d6282:	681a      	ldr	r2, [r3, #0]
   d6284:	07d0      	lsls	r0, r2, #31
   d6286:	bf5c      	itt	pl
   d6288:	2201      	movpl	r2, #1
   d628a:	601a      	strpl	r2, [r3, #0]
   d628c:	4b1c      	ldr	r3, [pc, #112]	; (d6300 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d628e:	681a      	ldr	r2, [r3, #0]
   d6290:	07d1      	lsls	r1, r2, #31
   d6292:	bf5c      	itt	pl
   d6294:	2201      	movpl	r2, #1
   d6296:	601a      	strpl	r2, [r3, #0]
   d6298:	4b1a      	ldr	r3, [pc, #104]	; (d6304 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d629a:	681a      	ldr	r2, [r3, #0]
   d629c:	07d2      	lsls	r2, r2, #31
   d629e:	bf5c      	itt	pl
   d62a0:	2201      	movpl	r2, #1
   d62a2:	601a      	strpl	r2, [r3, #0]
   d62a4:	4b18      	ldr	r3, [pc, #96]	; (d6308 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d62a6:	681a      	ldr	r2, [r3, #0]
   d62a8:	07d0      	lsls	r0, r2, #31
   d62aa:	bf5c      	itt	pl
   d62ac:	2201      	movpl	r2, #1
   d62ae:	601a      	strpl	r2, [r3, #0]
   d62b0:	4b16      	ldr	r3, [pc, #88]	; (d630c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d62b2:	681a      	ldr	r2, [r3, #0]
   d62b4:	07d1      	lsls	r1, r2, #31
   d62b6:	bf5c      	itt	pl
   d62b8:	2201      	movpl	r2, #1
   d62ba:	601a      	strpl	r2, [r3, #0]
   d62bc:	4b14      	ldr	r3, [pc, #80]	; (d6310 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d62be:	681a      	ldr	r2, [r3, #0]
   d62c0:	07d2      	lsls	r2, r2, #31
   d62c2:	bf5c      	itt	pl
   d62c4:	2201      	movpl	r2, #1
   d62c6:	601a      	strpl	r2, [r3, #0]
   d62c8:	4b12      	ldr	r3, [pc, #72]	; (d6314 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d62ca:	681a      	ldr	r2, [r3, #0]
   d62cc:	07d0      	lsls	r0, r2, #31
   d62ce:	bf5c      	itt	pl
   d62d0:	2201      	movpl	r2, #1
   d62d2:	601a      	strpl	r2, [r3, #0]
   d62d4:	4b10      	ldr	r3, [pc, #64]	; (d6318 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d62d6:	681a      	ldr	r2, [r3, #0]
   d62d8:	07d1      	lsls	r1, r2, #31
   d62da:	bf5c      	itt	pl
   d62dc:	2201      	movpl	r2, #1
   d62de:	601a      	strpl	r2, [r3, #0]
   d62e0:	4b0e      	ldr	r3, [pc, #56]	; (d631c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d62e2:	681a      	ldr	r2, [r3, #0]
   d62e4:	07d2      	lsls	r2, r2, #31
   d62e6:	bf5c      	itt	pl
   d62e8:	2201      	movpl	r2, #1
   d62ea:	601a      	strpl	r2, [r3, #0]
   d62ec:	4770      	bx	lr
   d62ee:	bf00      	nop
   d62f0:	2003e7c4 	.word	0x2003e7c4
   d62f4:	2003e7c0 	.word	0x2003e7c0
   d62f8:	2003e7bc 	.word	0x2003e7bc
   d62fc:	2003e7b8 	.word	0x2003e7b8
   d6300:	2003e7b4 	.word	0x2003e7b4
   d6304:	2003e7b0 	.word	0x2003e7b0
   d6308:	2003e7ac 	.word	0x2003e7ac
   d630c:	2003e7a8 	.word	0x2003e7a8
   d6310:	2003e7a4 	.word	0x2003e7a4
   d6314:	2003e7a0 	.word	0x2003e7a0
   d6318:	2003e79c 	.word	0x2003e79c
   d631c:	2003e798 	.word	0x2003e798

000d6320 <__aeabi_drsub>:
   d6320:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d6324:	e002      	b.n	d632c <__adddf3>
   d6326:	bf00      	nop

000d6328 <__aeabi_dsub>:
   d6328:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d632c <__adddf3>:
   d632c:	b530      	push	{r4, r5, lr}
   d632e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d6332:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d6336:	ea94 0f05 	teq	r4, r5
   d633a:	bf08      	it	eq
   d633c:	ea90 0f02 	teqeq	r0, r2
   d6340:	bf1f      	itttt	ne
   d6342:	ea54 0c00 	orrsne.w	ip, r4, r0
   d6346:	ea55 0c02 	orrsne.w	ip, r5, r2
   d634a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d634e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d6352:	f000 80e2 	beq.w	d651a <__adddf3+0x1ee>
   d6356:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d635a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d635e:	bfb8      	it	lt
   d6360:	426d      	neglt	r5, r5
   d6362:	dd0c      	ble.n	d637e <__adddf3+0x52>
   d6364:	442c      	add	r4, r5
   d6366:	ea80 0202 	eor.w	r2, r0, r2
   d636a:	ea81 0303 	eor.w	r3, r1, r3
   d636e:	ea82 0000 	eor.w	r0, r2, r0
   d6372:	ea83 0101 	eor.w	r1, r3, r1
   d6376:	ea80 0202 	eor.w	r2, r0, r2
   d637a:	ea81 0303 	eor.w	r3, r1, r3
   d637e:	2d36      	cmp	r5, #54	; 0x36
   d6380:	bf88      	it	hi
   d6382:	bd30      	pophi	{r4, r5, pc}
   d6384:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d6388:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d638c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d6390:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d6394:	d002      	beq.n	d639c <__adddf3+0x70>
   d6396:	4240      	negs	r0, r0
   d6398:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d639c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d63a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d63a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d63a8:	d002      	beq.n	d63b0 <__adddf3+0x84>
   d63aa:	4252      	negs	r2, r2
   d63ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d63b0:	ea94 0f05 	teq	r4, r5
   d63b4:	f000 80a7 	beq.w	d6506 <__adddf3+0x1da>
   d63b8:	f1a4 0401 	sub.w	r4, r4, #1
   d63bc:	f1d5 0e20 	rsbs	lr, r5, #32
   d63c0:	db0d      	blt.n	d63de <__adddf3+0xb2>
   d63c2:	fa02 fc0e 	lsl.w	ip, r2, lr
   d63c6:	fa22 f205 	lsr.w	r2, r2, r5
   d63ca:	1880      	adds	r0, r0, r2
   d63cc:	f141 0100 	adc.w	r1, r1, #0
   d63d0:	fa03 f20e 	lsl.w	r2, r3, lr
   d63d4:	1880      	adds	r0, r0, r2
   d63d6:	fa43 f305 	asr.w	r3, r3, r5
   d63da:	4159      	adcs	r1, r3
   d63dc:	e00e      	b.n	d63fc <__adddf3+0xd0>
   d63de:	f1a5 0520 	sub.w	r5, r5, #32
   d63e2:	f10e 0e20 	add.w	lr, lr, #32
   d63e6:	2a01      	cmp	r2, #1
   d63e8:	fa03 fc0e 	lsl.w	ip, r3, lr
   d63ec:	bf28      	it	cs
   d63ee:	f04c 0c02 	orrcs.w	ip, ip, #2
   d63f2:	fa43 f305 	asr.w	r3, r3, r5
   d63f6:	18c0      	adds	r0, r0, r3
   d63f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d63fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6400:	d507      	bpl.n	d6412 <__adddf3+0xe6>
   d6402:	f04f 0e00 	mov.w	lr, #0
   d6406:	f1dc 0c00 	rsbs	ip, ip, #0
   d640a:	eb7e 0000 	sbcs.w	r0, lr, r0
   d640e:	eb6e 0101 	sbc.w	r1, lr, r1
   d6412:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d6416:	d31b      	bcc.n	d6450 <__adddf3+0x124>
   d6418:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d641c:	d30c      	bcc.n	d6438 <__adddf3+0x10c>
   d641e:	0849      	lsrs	r1, r1, #1
   d6420:	ea5f 0030 	movs.w	r0, r0, rrx
   d6424:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d6428:	f104 0401 	add.w	r4, r4, #1
   d642c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d6430:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d6434:	f080 809a 	bcs.w	d656c <__adddf3+0x240>
   d6438:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d643c:	bf08      	it	eq
   d643e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d6442:	f150 0000 	adcs.w	r0, r0, #0
   d6446:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d644a:	ea41 0105 	orr.w	r1, r1, r5
   d644e:	bd30      	pop	{r4, r5, pc}
   d6450:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d6454:	4140      	adcs	r0, r0
   d6456:	eb41 0101 	adc.w	r1, r1, r1
   d645a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d645e:	f1a4 0401 	sub.w	r4, r4, #1
   d6462:	d1e9      	bne.n	d6438 <__adddf3+0x10c>
   d6464:	f091 0f00 	teq	r1, #0
   d6468:	bf04      	itt	eq
   d646a:	4601      	moveq	r1, r0
   d646c:	2000      	moveq	r0, #0
   d646e:	fab1 f381 	clz	r3, r1
   d6472:	bf08      	it	eq
   d6474:	3320      	addeq	r3, #32
   d6476:	f1a3 030b 	sub.w	r3, r3, #11
   d647a:	f1b3 0220 	subs.w	r2, r3, #32
   d647e:	da0c      	bge.n	d649a <__adddf3+0x16e>
   d6480:	320c      	adds	r2, #12
   d6482:	dd08      	ble.n	d6496 <__adddf3+0x16a>
   d6484:	f102 0c14 	add.w	ip, r2, #20
   d6488:	f1c2 020c 	rsb	r2, r2, #12
   d648c:	fa01 f00c 	lsl.w	r0, r1, ip
   d6490:	fa21 f102 	lsr.w	r1, r1, r2
   d6494:	e00c      	b.n	d64b0 <__adddf3+0x184>
   d6496:	f102 0214 	add.w	r2, r2, #20
   d649a:	bfd8      	it	le
   d649c:	f1c2 0c20 	rsble	ip, r2, #32
   d64a0:	fa01 f102 	lsl.w	r1, r1, r2
   d64a4:	fa20 fc0c 	lsr.w	ip, r0, ip
   d64a8:	bfdc      	itt	le
   d64aa:	ea41 010c 	orrle.w	r1, r1, ip
   d64ae:	4090      	lslle	r0, r2
   d64b0:	1ae4      	subs	r4, r4, r3
   d64b2:	bfa2      	ittt	ge
   d64b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d64b8:	4329      	orrge	r1, r5
   d64ba:	bd30      	popge	{r4, r5, pc}
   d64bc:	ea6f 0404 	mvn.w	r4, r4
   d64c0:	3c1f      	subs	r4, #31
   d64c2:	da1c      	bge.n	d64fe <__adddf3+0x1d2>
   d64c4:	340c      	adds	r4, #12
   d64c6:	dc0e      	bgt.n	d64e6 <__adddf3+0x1ba>
   d64c8:	f104 0414 	add.w	r4, r4, #20
   d64cc:	f1c4 0220 	rsb	r2, r4, #32
   d64d0:	fa20 f004 	lsr.w	r0, r0, r4
   d64d4:	fa01 f302 	lsl.w	r3, r1, r2
   d64d8:	ea40 0003 	orr.w	r0, r0, r3
   d64dc:	fa21 f304 	lsr.w	r3, r1, r4
   d64e0:	ea45 0103 	orr.w	r1, r5, r3
   d64e4:	bd30      	pop	{r4, r5, pc}
   d64e6:	f1c4 040c 	rsb	r4, r4, #12
   d64ea:	f1c4 0220 	rsb	r2, r4, #32
   d64ee:	fa20 f002 	lsr.w	r0, r0, r2
   d64f2:	fa01 f304 	lsl.w	r3, r1, r4
   d64f6:	ea40 0003 	orr.w	r0, r0, r3
   d64fa:	4629      	mov	r1, r5
   d64fc:	bd30      	pop	{r4, r5, pc}
   d64fe:	fa21 f004 	lsr.w	r0, r1, r4
   d6502:	4629      	mov	r1, r5
   d6504:	bd30      	pop	{r4, r5, pc}
   d6506:	f094 0f00 	teq	r4, #0
   d650a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d650e:	bf06      	itte	eq
   d6510:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d6514:	3401      	addeq	r4, #1
   d6516:	3d01      	subne	r5, #1
   d6518:	e74e      	b.n	d63b8 <__adddf3+0x8c>
   d651a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d651e:	bf18      	it	ne
   d6520:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d6524:	d029      	beq.n	d657a <__adddf3+0x24e>
   d6526:	ea94 0f05 	teq	r4, r5
   d652a:	bf08      	it	eq
   d652c:	ea90 0f02 	teqeq	r0, r2
   d6530:	d005      	beq.n	d653e <__adddf3+0x212>
   d6532:	ea54 0c00 	orrs.w	ip, r4, r0
   d6536:	bf04      	itt	eq
   d6538:	4619      	moveq	r1, r3
   d653a:	4610      	moveq	r0, r2
   d653c:	bd30      	pop	{r4, r5, pc}
   d653e:	ea91 0f03 	teq	r1, r3
   d6542:	bf1e      	ittt	ne
   d6544:	2100      	movne	r1, #0
   d6546:	2000      	movne	r0, #0
   d6548:	bd30      	popne	{r4, r5, pc}
   d654a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d654e:	d105      	bne.n	d655c <__adddf3+0x230>
   d6550:	0040      	lsls	r0, r0, #1
   d6552:	4149      	adcs	r1, r1
   d6554:	bf28      	it	cs
   d6556:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d655a:	bd30      	pop	{r4, r5, pc}
   d655c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d6560:	bf3c      	itt	cc
   d6562:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d6566:	bd30      	popcc	{r4, r5, pc}
   d6568:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d656c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d6570:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d6574:	f04f 0000 	mov.w	r0, #0
   d6578:	bd30      	pop	{r4, r5, pc}
   d657a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d657e:	bf1a      	itte	ne
   d6580:	4619      	movne	r1, r3
   d6582:	4610      	movne	r0, r2
   d6584:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d6588:	bf1c      	itt	ne
   d658a:	460b      	movne	r3, r1
   d658c:	4602      	movne	r2, r0
   d658e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d6592:	bf06      	itte	eq
   d6594:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d6598:	ea91 0f03 	teqeq	r1, r3
   d659c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d65a0:	bd30      	pop	{r4, r5, pc}
   d65a2:	bf00      	nop

000d65a4 <__aeabi_ui2d>:
   d65a4:	f090 0f00 	teq	r0, #0
   d65a8:	bf04      	itt	eq
   d65aa:	2100      	moveq	r1, #0
   d65ac:	4770      	bxeq	lr
   d65ae:	b530      	push	{r4, r5, lr}
   d65b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d65b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d65b8:	f04f 0500 	mov.w	r5, #0
   d65bc:	f04f 0100 	mov.w	r1, #0
   d65c0:	e750      	b.n	d6464 <__adddf3+0x138>
   d65c2:	bf00      	nop

000d65c4 <__aeabi_i2d>:
   d65c4:	f090 0f00 	teq	r0, #0
   d65c8:	bf04      	itt	eq
   d65ca:	2100      	moveq	r1, #0
   d65cc:	4770      	bxeq	lr
   d65ce:	b530      	push	{r4, r5, lr}
   d65d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d65d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d65d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d65dc:	bf48      	it	mi
   d65de:	4240      	negmi	r0, r0
   d65e0:	f04f 0100 	mov.w	r1, #0
   d65e4:	e73e      	b.n	d6464 <__adddf3+0x138>
   d65e6:	bf00      	nop

000d65e8 <__aeabi_f2d>:
   d65e8:	0042      	lsls	r2, r0, #1
   d65ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d65ee:	ea4f 0131 	mov.w	r1, r1, rrx
   d65f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d65f6:	bf1f      	itttt	ne
   d65f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d65fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d6600:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d6604:	4770      	bxne	lr
   d6606:	f092 0f00 	teq	r2, #0
   d660a:	bf14      	ite	ne
   d660c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d6610:	4770      	bxeq	lr
   d6612:	b530      	push	{r4, r5, lr}
   d6614:	f44f 7460 	mov.w	r4, #896	; 0x380
   d6618:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d661c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d6620:	e720      	b.n	d6464 <__adddf3+0x138>
   d6622:	bf00      	nop

000d6624 <__aeabi_ul2d>:
   d6624:	ea50 0201 	orrs.w	r2, r0, r1
   d6628:	bf08      	it	eq
   d662a:	4770      	bxeq	lr
   d662c:	b530      	push	{r4, r5, lr}
   d662e:	f04f 0500 	mov.w	r5, #0
   d6632:	e00a      	b.n	d664a <__aeabi_l2d+0x16>

000d6634 <__aeabi_l2d>:
   d6634:	ea50 0201 	orrs.w	r2, r0, r1
   d6638:	bf08      	it	eq
   d663a:	4770      	bxeq	lr
   d663c:	b530      	push	{r4, r5, lr}
   d663e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d6642:	d502      	bpl.n	d664a <__aeabi_l2d+0x16>
   d6644:	4240      	negs	r0, r0
   d6646:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d664a:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d664e:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6652:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d6656:	f43f aedc 	beq.w	d6412 <__adddf3+0xe6>
   d665a:	f04f 0203 	mov.w	r2, #3
   d665e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d6662:	bf18      	it	ne
   d6664:	3203      	addne	r2, #3
   d6666:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d666a:	bf18      	it	ne
   d666c:	3203      	addne	r2, #3
   d666e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d6672:	f1c2 0320 	rsb	r3, r2, #32
   d6676:	fa00 fc03 	lsl.w	ip, r0, r3
   d667a:	fa20 f002 	lsr.w	r0, r0, r2
   d667e:	fa01 fe03 	lsl.w	lr, r1, r3
   d6682:	ea40 000e 	orr.w	r0, r0, lr
   d6686:	fa21 f102 	lsr.w	r1, r1, r2
   d668a:	4414      	add	r4, r2
   d668c:	e6c1      	b.n	d6412 <__adddf3+0xe6>
   d668e:	bf00      	nop

000d6690 <__aeabi_dmul>:
   d6690:	b570      	push	{r4, r5, r6, lr}
   d6692:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d6696:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d669a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d669e:	bf1d      	ittte	ne
   d66a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d66a4:	ea94 0f0c 	teqne	r4, ip
   d66a8:	ea95 0f0c 	teqne	r5, ip
   d66ac:	f000 f8de 	bleq	d686c <__aeabi_dmul+0x1dc>
   d66b0:	442c      	add	r4, r5
   d66b2:	ea81 0603 	eor.w	r6, r1, r3
   d66b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d66ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d66be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d66c2:	bf18      	it	ne
   d66c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d66c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d66cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d66d0:	d038      	beq.n	d6744 <__aeabi_dmul+0xb4>
   d66d2:	fba0 ce02 	umull	ip, lr, r0, r2
   d66d6:	f04f 0500 	mov.w	r5, #0
   d66da:	fbe1 e502 	umlal	lr, r5, r1, r2
   d66de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d66e2:	fbe0 e503 	umlal	lr, r5, r0, r3
   d66e6:	f04f 0600 	mov.w	r6, #0
   d66ea:	fbe1 5603 	umlal	r5, r6, r1, r3
   d66ee:	f09c 0f00 	teq	ip, #0
   d66f2:	bf18      	it	ne
   d66f4:	f04e 0e01 	orrne.w	lr, lr, #1
   d66f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d66fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d6700:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d6704:	d204      	bcs.n	d6710 <__aeabi_dmul+0x80>
   d6706:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d670a:	416d      	adcs	r5, r5
   d670c:	eb46 0606 	adc.w	r6, r6, r6
   d6710:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d6714:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d6718:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d671c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d6720:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d6724:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d6728:	bf88      	it	hi
   d672a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d672e:	d81e      	bhi.n	d676e <__aeabi_dmul+0xde>
   d6730:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d6734:	bf08      	it	eq
   d6736:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d673a:	f150 0000 	adcs.w	r0, r0, #0
   d673e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6742:	bd70      	pop	{r4, r5, r6, pc}
   d6744:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d6748:	ea46 0101 	orr.w	r1, r6, r1
   d674c:	ea40 0002 	orr.w	r0, r0, r2
   d6750:	ea81 0103 	eor.w	r1, r1, r3
   d6754:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d6758:	bfc2      	ittt	gt
   d675a:	ebd4 050c 	rsbsgt	r5, r4, ip
   d675e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d6762:	bd70      	popgt	{r4, r5, r6, pc}
   d6764:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6768:	f04f 0e00 	mov.w	lr, #0
   d676c:	3c01      	subs	r4, #1
   d676e:	f300 80ab 	bgt.w	d68c8 <__aeabi_dmul+0x238>
   d6772:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d6776:	bfde      	ittt	le
   d6778:	2000      	movle	r0, #0
   d677a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d677e:	bd70      	pople	{r4, r5, r6, pc}
   d6780:	f1c4 0400 	rsb	r4, r4, #0
   d6784:	3c20      	subs	r4, #32
   d6786:	da35      	bge.n	d67f4 <__aeabi_dmul+0x164>
   d6788:	340c      	adds	r4, #12
   d678a:	dc1b      	bgt.n	d67c4 <__aeabi_dmul+0x134>
   d678c:	f104 0414 	add.w	r4, r4, #20
   d6790:	f1c4 0520 	rsb	r5, r4, #32
   d6794:	fa00 f305 	lsl.w	r3, r0, r5
   d6798:	fa20 f004 	lsr.w	r0, r0, r4
   d679c:	fa01 f205 	lsl.w	r2, r1, r5
   d67a0:	ea40 0002 	orr.w	r0, r0, r2
   d67a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d67a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d67ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d67b0:	fa21 f604 	lsr.w	r6, r1, r4
   d67b4:	eb42 0106 	adc.w	r1, r2, r6
   d67b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d67bc:	bf08      	it	eq
   d67be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d67c2:	bd70      	pop	{r4, r5, r6, pc}
   d67c4:	f1c4 040c 	rsb	r4, r4, #12
   d67c8:	f1c4 0520 	rsb	r5, r4, #32
   d67cc:	fa00 f304 	lsl.w	r3, r0, r4
   d67d0:	fa20 f005 	lsr.w	r0, r0, r5
   d67d4:	fa01 f204 	lsl.w	r2, r1, r4
   d67d8:	ea40 0002 	orr.w	r0, r0, r2
   d67dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d67e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d67e4:	f141 0100 	adc.w	r1, r1, #0
   d67e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d67ec:	bf08      	it	eq
   d67ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d67f2:	bd70      	pop	{r4, r5, r6, pc}
   d67f4:	f1c4 0520 	rsb	r5, r4, #32
   d67f8:	fa00 f205 	lsl.w	r2, r0, r5
   d67fc:	ea4e 0e02 	orr.w	lr, lr, r2
   d6800:	fa20 f304 	lsr.w	r3, r0, r4
   d6804:	fa01 f205 	lsl.w	r2, r1, r5
   d6808:	ea43 0302 	orr.w	r3, r3, r2
   d680c:	fa21 f004 	lsr.w	r0, r1, r4
   d6810:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6814:	fa21 f204 	lsr.w	r2, r1, r4
   d6818:	ea20 0002 	bic.w	r0, r0, r2
   d681c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d6820:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6824:	bf08      	it	eq
   d6826:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d682a:	bd70      	pop	{r4, r5, r6, pc}
   d682c:	f094 0f00 	teq	r4, #0
   d6830:	d10f      	bne.n	d6852 <__aeabi_dmul+0x1c2>
   d6832:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d6836:	0040      	lsls	r0, r0, #1
   d6838:	eb41 0101 	adc.w	r1, r1, r1
   d683c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6840:	bf08      	it	eq
   d6842:	3c01      	subeq	r4, #1
   d6844:	d0f7      	beq.n	d6836 <__aeabi_dmul+0x1a6>
   d6846:	ea41 0106 	orr.w	r1, r1, r6
   d684a:	f095 0f00 	teq	r5, #0
   d684e:	bf18      	it	ne
   d6850:	4770      	bxne	lr
   d6852:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d6856:	0052      	lsls	r2, r2, #1
   d6858:	eb43 0303 	adc.w	r3, r3, r3
   d685c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d6860:	bf08      	it	eq
   d6862:	3d01      	subeq	r5, #1
   d6864:	d0f7      	beq.n	d6856 <__aeabi_dmul+0x1c6>
   d6866:	ea43 0306 	orr.w	r3, r3, r6
   d686a:	4770      	bx	lr
   d686c:	ea94 0f0c 	teq	r4, ip
   d6870:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d6874:	bf18      	it	ne
   d6876:	ea95 0f0c 	teqne	r5, ip
   d687a:	d00c      	beq.n	d6896 <__aeabi_dmul+0x206>
   d687c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6880:	bf18      	it	ne
   d6882:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6886:	d1d1      	bne.n	d682c <__aeabi_dmul+0x19c>
   d6888:	ea81 0103 	eor.w	r1, r1, r3
   d688c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6890:	f04f 0000 	mov.w	r0, #0
   d6894:	bd70      	pop	{r4, r5, r6, pc}
   d6896:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d689a:	bf06      	itte	eq
   d689c:	4610      	moveq	r0, r2
   d689e:	4619      	moveq	r1, r3
   d68a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d68a4:	d019      	beq.n	d68da <__aeabi_dmul+0x24a>
   d68a6:	ea94 0f0c 	teq	r4, ip
   d68aa:	d102      	bne.n	d68b2 <__aeabi_dmul+0x222>
   d68ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d68b0:	d113      	bne.n	d68da <__aeabi_dmul+0x24a>
   d68b2:	ea95 0f0c 	teq	r5, ip
   d68b6:	d105      	bne.n	d68c4 <__aeabi_dmul+0x234>
   d68b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d68bc:	bf1c      	itt	ne
   d68be:	4610      	movne	r0, r2
   d68c0:	4619      	movne	r1, r3
   d68c2:	d10a      	bne.n	d68da <__aeabi_dmul+0x24a>
   d68c4:	ea81 0103 	eor.w	r1, r1, r3
   d68c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d68cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d68d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d68d4:	f04f 0000 	mov.w	r0, #0
   d68d8:	bd70      	pop	{r4, r5, r6, pc}
   d68da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d68de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d68e2:	bd70      	pop	{r4, r5, r6, pc}

000d68e4 <__aeabi_ddiv>:
   d68e4:	b570      	push	{r4, r5, r6, lr}
   d68e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d68ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d68ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d68f2:	bf1d      	ittte	ne
   d68f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d68f8:	ea94 0f0c 	teqne	r4, ip
   d68fc:	ea95 0f0c 	teqne	r5, ip
   d6900:	f000 f8a7 	bleq	d6a52 <__aeabi_ddiv+0x16e>
   d6904:	eba4 0405 	sub.w	r4, r4, r5
   d6908:	ea81 0e03 	eor.w	lr, r1, r3
   d690c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d6910:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d6914:	f000 8088 	beq.w	d6a28 <__aeabi_ddiv+0x144>
   d6918:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d691c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d6920:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d6924:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d6928:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d692c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d6930:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d6934:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d6938:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d693c:	429d      	cmp	r5, r3
   d693e:	bf08      	it	eq
   d6940:	4296      	cmpeq	r6, r2
   d6942:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d6946:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d694a:	d202      	bcs.n	d6952 <__aeabi_ddiv+0x6e>
   d694c:	085b      	lsrs	r3, r3, #1
   d694e:	ea4f 0232 	mov.w	r2, r2, rrx
   d6952:	1ab6      	subs	r6, r6, r2
   d6954:	eb65 0503 	sbc.w	r5, r5, r3
   d6958:	085b      	lsrs	r3, r3, #1
   d695a:	ea4f 0232 	mov.w	r2, r2, rrx
   d695e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d6962:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d6966:	ebb6 0e02 	subs.w	lr, r6, r2
   d696a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d696e:	bf22      	ittt	cs
   d6970:	1ab6      	subcs	r6, r6, r2
   d6972:	4675      	movcs	r5, lr
   d6974:	ea40 000c 	orrcs.w	r0, r0, ip
   d6978:	085b      	lsrs	r3, r3, #1
   d697a:	ea4f 0232 	mov.w	r2, r2, rrx
   d697e:	ebb6 0e02 	subs.w	lr, r6, r2
   d6982:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6986:	bf22      	ittt	cs
   d6988:	1ab6      	subcs	r6, r6, r2
   d698a:	4675      	movcs	r5, lr
   d698c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d6990:	085b      	lsrs	r3, r3, #1
   d6992:	ea4f 0232 	mov.w	r2, r2, rrx
   d6996:	ebb6 0e02 	subs.w	lr, r6, r2
   d699a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d699e:	bf22      	ittt	cs
   d69a0:	1ab6      	subcs	r6, r6, r2
   d69a2:	4675      	movcs	r5, lr
   d69a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d69a8:	085b      	lsrs	r3, r3, #1
   d69aa:	ea4f 0232 	mov.w	r2, r2, rrx
   d69ae:	ebb6 0e02 	subs.w	lr, r6, r2
   d69b2:	eb75 0e03 	sbcs.w	lr, r5, r3
   d69b6:	bf22      	ittt	cs
   d69b8:	1ab6      	subcs	r6, r6, r2
   d69ba:	4675      	movcs	r5, lr
   d69bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d69c0:	ea55 0e06 	orrs.w	lr, r5, r6
   d69c4:	d018      	beq.n	d69f8 <__aeabi_ddiv+0x114>
   d69c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d69ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d69ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d69d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d69d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d69da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d69de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d69e2:	d1c0      	bne.n	d6966 <__aeabi_ddiv+0x82>
   d69e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d69e8:	d10b      	bne.n	d6a02 <__aeabi_ddiv+0x11e>
   d69ea:	ea41 0100 	orr.w	r1, r1, r0
   d69ee:	f04f 0000 	mov.w	r0, #0
   d69f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d69f6:	e7b6      	b.n	d6966 <__aeabi_ddiv+0x82>
   d69f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d69fc:	bf04      	itt	eq
   d69fe:	4301      	orreq	r1, r0
   d6a00:	2000      	moveq	r0, #0
   d6a02:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d6a06:	bf88      	it	hi
   d6a08:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d6a0c:	f63f aeaf 	bhi.w	d676e <__aeabi_dmul+0xde>
   d6a10:	ebb5 0c03 	subs.w	ip, r5, r3
   d6a14:	bf04      	itt	eq
   d6a16:	ebb6 0c02 	subseq.w	ip, r6, r2
   d6a1a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d6a1e:	f150 0000 	adcs.w	r0, r0, #0
   d6a22:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6a26:	bd70      	pop	{r4, r5, r6, pc}
   d6a28:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d6a2c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d6a30:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d6a34:	bfc2      	ittt	gt
   d6a36:	ebd4 050c 	rsbsgt	r5, r4, ip
   d6a3a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d6a3e:	bd70      	popgt	{r4, r5, r6, pc}
   d6a40:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6a44:	f04f 0e00 	mov.w	lr, #0
   d6a48:	3c01      	subs	r4, #1
   d6a4a:	e690      	b.n	d676e <__aeabi_dmul+0xde>
   d6a4c:	ea45 0e06 	orr.w	lr, r5, r6
   d6a50:	e68d      	b.n	d676e <__aeabi_dmul+0xde>
   d6a52:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d6a56:	ea94 0f0c 	teq	r4, ip
   d6a5a:	bf08      	it	eq
   d6a5c:	ea95 0f0c 	teqeq	r5, ip
   d6a60:	f43f af3b 	beq.w	d68da <__aeabi_dmul+0x24a>
   d6a64:	ea94 0f0c 	teq	r4, ip
   d6a68:	d10a      	bne.n	d6a80 <__aeabi_ddiv+0x19c>
   d6a6a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d6a6e:	f47f af34 	bne.w	d68da <__aeabi_dmul+0x24a>
   d6a72:	ea95 0f0c 	teq	r5, ip
   d6a76:	f47f af25 	bne.w	d68c4 <__aeabi_dmul+0x234>
   d6a7a:	4610      	mov	r0, r2
   d6a7c:	4619      	mov	r1, r3
   d6a7e:	e72c      	b.n	d68da <__aeabi_dmul+0x24a>
   d6a80:	ea95 0f0c 	teq	r5, ip
   d6a84:	d106      	bne.n	d6a94 <__aeabi_ddiv+0x1b0>
   d6a86:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d6a8a:	f43f aefd 	beq.w	d6888 <__aeabi_dmul+0x1f8>
   d6a8e:	4610      	mov	r0, r2
   d6a90:	4619      	mov	r1, r3
   d6a92:	e722      	b.n	d68da <__aeabi_dmul+0x24a>
   d6a94:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6a98:	bf18      	it	ne
   d6a9a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6a9e:	f47f aec5 	bne.w	d682c <__aeabi_dmul+0x19c>
   d6aa2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d6aa6:	f47f af0d 	bne.w	d68c4 <__aeabi_dmul+0x234>
   d6aaa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d6aae:	f47f aeeb 	bne.w	d6888 <__aeabi_dmul+0x1f8>
   d6ab2:	e712      	b.n	d68da <__aeabi_dmul+0x24a>

000d6ab4 <__gedf2>:
   d6ab4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   d6ab8:	e006      	b.n	d6ac8 <__cmpdf2+0x4>
   d6aba:	bf00      	nop

000d6abc <__ledf2>:
   d6abc:	f04f 0c01 	mov.w	ip, #1
   d6ac0:	e002      	b.n	d6ac8 <__cmpdf2+0x4>
   d6ac2:	bf00      	nop

000d6ac4 <__cmpdf2>:
   d6ac4:	f04f 0c01 	mov.w	ip, #1
   d6ac8:	f84d cd04 	str.w	ip, [sp, #-4]!
   d6acc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d6ad0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6ad4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d6ad8:	bf18      	it	ne
   d6ada:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d6ade:	d01b      	beq.n	d6b18 <__cmpdf2+0x54>
   d6ae0:	b001      	add	sp, #4
   d6ae2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d6ae6:	bf0c      	ite	eq
   d6ae8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d6aec:	ea91 0f03 	teqne	r1, r3
   d6af0:	bf02      	ittt	eq
   d6af2:	ea90 0f02 	teqeq	r0, r2
   d6af6:	2000      	moveq	r0, #0
   d6af8:	4770      	bxeq	lr
   d6afa:	f110 0f00 	cmn.w	r0, #0
   d6afe:	ea91 0f03 	teq	r1, r3
   d6b02:	bf58      	it	pl
   d6b04:	4299      	cmppl	r1, r3
   d6b06:	bf08      	it	eq
   d6b08:	4290      	cmpeq	r0, r2
   d6b0a:	bf2c      	ite	cs
   d6b0c:	17d8      	asrcs	r0, r3, #31
   d6b0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d6b12:	f040 0001 	orr.w	r0, r0, #1
   d6b16:	4770      	bx	lr
   d6b18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d6b1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6b20:	d102      	bne.n	d6b28 <__cmpdf2+0x64>
   d6b22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d6b26:	d107      	bne.n	d6b38 <__cmpdf2+0x74>
   d6b28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d6b2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6b30:	d1d6      	bne.n	d6ae0 <__cmpdf2+0x1c>
   d6b32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d6b36:	d0d3      	beq.n	d6ae0 <__cmpdf2+0x1c>
   d6b38:	f85d 0b04 	ldr.w	r0, [sp], #4
   d6b3c:	4770      	bx	lr
   d6b3e:	bf00      	nop

000d6b40 <__aeabi_cdrcmple>:
   d6b40:	4684      	mov	ip, r0
   d6b42:	4610      	mov	r0, r2
   d6b44:	4662      	mov	r2, ip
   d6b46:	468c      	mov	ip, r1
   d6b48:	4619      	mov	r1, r3
   d6b4a:	4663      	mov	r3, ip
   d6b4c:	e000      	b.n	d6b50 <__aeabi_cdcmpeq>
   d6b4e:	bf00      	nop

000d6b50 <__aeabi_cdcmpeq>:
   d6b50:	b501      	push	{r0, lr}
   d6b52:	f7ff ffb7 	bl	d6ac4 <__cmpdf2>
   d6b56:	2800      	cmp	r0, #0
   d6b58:	bf48      	it	mi
   d6b5a:	f110 0f00 	cmnmi.w	r0, #0
   d6b5e:	bd01      	pop	{r0, pc}

000d6b60 <__aeabi_dcmpeq>:
   d6b60:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6b64:	f7ff fff4 	bl	d6b50 <__aeabi_cdcmpeq>
   d6b68:	bf0c      	ite	eq
   d6b6a:	2001      	moveq	r0, #1
   d6b6c:	2000      	movne	r0, #0
   d6b6e:	f85d fb08 	ldr.w	pc, [sp], #8
   d6b72:	bf00      	nop

000d6b74 <__aeabi_dcmplt>:
   d6b74:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6b78:	f7ff ffea 	bl	d6b50 <__aeabi_cdcmpeq>
   d6b7c:	bf34      	ite	cc
   d6b7e:	2001      	movcc	r0, #1
   d6b80:	2000      	movcs	r0, #0
   d6b82:	f85d fb08 	ldr.w	pc, [sp], #8
   d6b86:	bf00      	nop

000d6b88 <__aeabi_dcmple>:
   d6b88:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6b8c:	f7ff ffe0 	bl	d6b50 <__aeabi_cdcmpeq>
   d6b90:	bf94      	ite	ls
   d6b92:	2001      	movls	r0, #1
   d6b94:	2000      	movhi	r0, #0
   d6b96:	f85d fb08 	ldr.w	pc, [sp], #8
   d6b9a:	bf00      	nop

000d6b9c <__aeabi_dcmpge>:
   d6b9c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6ba0:	f7ff ffce 	bl	d6b40 <__aeabi_cdrcmple>
   d6ba4:	bf94      	ite	ls
   d6ba6:	2001      	movls	r0, #1
   d6ba8:	2000      	movhi	r0, #0
   d6baa:	f85d fb08 	ldr.w	pc, [sp], #8
   d6bae:	bf00      	nop

000d6bb0 <__aeabi_dcmpgt>:
   d6bb0:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6bb4:	f7ff ffc4 	bl	d6b40 <__aeabi_cdrcmple>
   d6bb8:	bf34      	ite	cc
   d6bba:	2001      	movcc	r0, #1
   d6bbc:	2000      	movcs	r0, #0
   d6bbe:	f85d fb08 	ldr.w	pc, [sp], #8
   d6bc2:	bf00      	nop

000d6bc4 <__aeabi_d2iz>:
   d6bc4:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d6bc8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d6bcc:	d215      	bcs.n	d6bfa <__aeabi_d2iz+0x36>
   d6bce:	d511      	bpl.n	d6bf4 <__aeabi_d2iz+0x30>
   d6bd0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d6bd4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d6bd8:	d912      	bls.n	d6c00 <__aeabi_d2iz+0x3c>
   d6bda:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d6bde:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d6be2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d6be6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d6bea:	fa23 f002 	lsr.w	r0, r3, r2
   d6bee:	bf18      	it	ne
   d6bf0:	4240      	negne	r0, r0
   d6bf2:	4770      	bx	lr
   d6bf4:	f04f 0000 	mov.w	r0, #0
   d6bf8:	4770      	bx	lr
   d6bfa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d6bfe:	d105      	bne.n	d6c0c <__aeabi_d2iz+0x48>
   d6c00:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d6c04:	bf08      	it	eq
   d6c06:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d6c0a:	4770      	bx	lr
   d6c0c:	f04f 0000 	mov.w	r0, #0
   d6c10:	4770      	bx	lr
   d6c12:	bf00      	nop

000d6c14 <__aeabi_d2uiz>:
   d6c14:	004a      	lsls	r2, r1, #1
   d6c16:	d211      	bcs.n	d6c3c <__aeabi_d2uiz+0x28>
   d6c18:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d6c1c:	d211      	bcs.n	d6c42 <__aeabi_d2uiz+0x2e>
   d6c1e:	d50d      	bpl.n	d6c3c <__aeabi_d2uiz+0x28>
   d6c20:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d6c24:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d6c28:	d40e      	bmi.n	d6c48 <__aeabi_d2uiz+0x34>
   d6c2a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d6c2e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d6c32:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d6c36:	fa23 f002 	lsr.w	r0, r3, r2
   d6c3a:	4770      	bx	lr
   d6c3c:	f04f 0000 	mov.w	r0, #0
   d6c40:	4770      	bx	lr
   d6c42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d6c46:	d102      	bne.n	d6c4e <__aeabi_d2uiz+0x3a>
   d6c48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d6c4c:	4770      	bx	lr
   d6c4e:	f04f 0000 	mov.w	r0, #0
   d6c52:	4770      	bx	lr

000d6c54 <__aeabi_d2f>:
   d6c54:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d6c58:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d6c5c:	bf24      	itt	cs
   d6c5e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d6c62:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d6c66:	d90d      	bls.n	d6c84 <__aeabi_d2f+0x30>
   d6c68:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d6c6c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d6c70:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d6c74:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d6c78:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d6c7c:	bf08      	it	eq
   d6c7e:	f020 0001 	biceq.w	r0, r0, #1
   d6c82:	4770      	bx	lr
   d6c84:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d6c88:	d121      	bne.n	d6cce <__aeabi_d2f+0x7a>
   d6c8a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d6c8e:	bfbc      	itt	lt
   d6c90:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d6c94:	4770      	bxlt	lr
   d6c96:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6c9a:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d6c9e:	f1c2 0218 	rsb	r2, r2, #24
   d6ca2:	f1c2 0c20 	rsb	ip, r2, #32
   d6ca6:	fa10 f30c 	lsls.w	r3, r0, ip
   d6caa:	fa20 f002 	lsr.w	r0, r0, r2
   d6cae:	bf18      	it	ne
   d6cb0:	f040 0001 	orrne.w	r0, r0, #1
   d6cb4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d6cb8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d6cbc:	fa03 fc0c 	lsl.w	ip, r3, ip
   d6cc0:	ea40 000c 	orr.w	r0, r0, ip
   d6cc4:	fa23 f302 	lsr.w	r3, r3, r2
   d6cc8:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d6ccc:	e7cc      	b.n	d6c68 <__aeabi_d2f+0x14>
   d6cce:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d6cd2:	d107      	bne.n	d6ce4 <__aeabi_d2f+0x90>
   d6cd4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d6cd8:	bf1e      	ittt	ne
   d6cda:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d6cde:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d6ce2:	4770      	bxne	lr
   d6ce4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d6ce8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d6cec:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d6cf0:	4770      	bx	lr
   d6cf2:	bf00      	nop

000d6cf4 <atof>:
   d6cf4:	2100      	movs	r1, #0
   d6cf6:	f000 bfaf 	b.w	d7c58 <strtod>
	...

000d6cfc <__cxa_atexit>:
   d6cfc:	b510      	push	{r4, lr}
   d6cfe:	4c05      	ldr	r4, [pc, #20]	; (d6d14 <__cxa_atexit+0x18>)
   d6d00:	4613      	mov	r3, r2
   d6d02:	b12c      	cbz	r4, d6d10 <__cxa_atexit+0x14>
   d6d04:	460a      	mov	r2, r1
   d6d06:	4601      	mov	r1, r0
   d6d08:	2002      	movs	r0, #2
   d6d0a:	f3af 8000 	nop.w
   d6d0e:	bd10      	pop	{r4, pc}
   d6d10:	4620      	mov	r0, r4
   d6d12:	bd10      	pop	{r4, pc}
   d6d14:	00000000 	.word	0x00000000

000d6d18 <localtime>:
   d6d18:	b538      	push	{r3, r4, r5, lr}
   d6d1a:	4b07      	ldr	r3, [pc, #28]	; (d6d38 <localtime+0x20>)
   d6d1c:	681c      	ldr	r4, [r3, #0]
   d6d1e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d6d20:	4605      	mov	r5, r0
   d6d22:	b91b      	cbnz	r3, d6d2c <localtime+0x14>
   d6d24:	2024      	movs	r0, #36	; 0x24
   d6d26:	f7fd ffaf 	bl	d4c88 <malloc>
   d6d2a:	63e0      	str	r0, [r4, #60]	; 0x3c
   d6d2c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d6d2e:	4628      	mov	r0, r5
   d6d30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d6d34:	f000 b802 	b.w	d6d3c <localtime_r>
   d6d38:	2003e19c 	.word	0x2003e19c

000d6d3c <localtime_r>:
   d6d3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6d40:	460c      	mov	r4, r1
   d6d42:	4680      	mov	r8, r0
   d6d44:	f001 fdd8 	bl	d88f8 <__gettzinfo>
   d6d48:	4621      	mov	r1, r4
   d6d4a:	4607      	mov	r7, r0
   d6d4c:	4640      	mov	r0, r8
   d6d4e:	f001 fdd7 	bl	d8900 <gmtime_r>
   d6d52:	6946      	ldr	r6, [r0, #20]
   d6d54:	f206 766c 	addw	r6, r6, #1900	; 0x76c
   d6d58:	07b3      	lsls	r3, r6, #30
   d6d5a:	4604      	mov	r4, r0
   d6d5c:	d105      	bne.n	d6d6a <localtime_r+0x2e>
   d6d5e:	2264      	movs	r2, #100	; 0x64
   d6d60:	fb96 f3f2 	sdiv	r3, r6, r2
   d6d64:	fb02 6313 	mls	r3, r2, r3, r6
   d6d68:	b94b      	cbnz	r3, d6d7e <localtime_r+0x42>
   d6d6a:	f44f 75c8 	mov.w	r5, #400	; 0x190
   d6d6e:	fb96 f3f5 	sdiv	r3, r6, r5
   d6d72:	fb05 6513 	mls	r5, r5, r3, r6
   d6d76:	fab5 f385 	clz	r3, r5
   d6d7a:	095b      	lsrs	r3, r3, #5
   d6d7c:	e000      	b.n	d6d80 <localtime_r+0x44>
   d6d7e:	2301      	movs	r3, #1
   d6d80:	4a5f      	ldr	r2, [pc, #380]	; (d6f00 <localtime_r+0x1c4>)
   d6d82:	2530      	movs	r5, #48	; 0x30
   d6d84:	fb05 2503 	mla	r5, r5, r3, r2
   d6d88:	f001 f8cc 	bl	d7f24 <__tz_lock>
   d6d8c:	f001 f8cc 	bl	d7f28 <_tzset_unlocked>
   d6d90:	4b5c      	ldr	r3, [pc, #368]	; (d6f04 <localtime_r+0x1c8>)
   d6d92:	681b      	ldr	r3, [r3, #0]
   d6d94:	b1f3      	cbz	r3, d6dd4 <localtime_r+0x98>
   d6d96:	687b      	ldr	r3, [r7, #4]
   d6d98:	429e      	cmp	r6, r3
   d6d9a:	d105      	bne.n	d6da8 <localtime_r+0x6c>
   d6d9c:	6839      	ldr	r1, [r7, #0]
   d6d9e:	f8d8 3000 	ldr.w	r3, [r8]
   d6da2:	69fa      	ldr	r2, [r7, #28]
   d6da4:	b941      	cbnz	r1, d6db8 <localtime_r+0x7c>
   d6da6:	e00a      	b.n	d6dbe <localtime_r+0x82>
   d6da8:	4630      	mov	r0, r6
   d6daa:	f001 f813 	bl	d7dd4 <__tzcalc_limits>
   d6dae:	2800      	cmp	r0, #0
   d6db0:	d1f4      	bne.n	d6d9c <localtime_r+0x60>
   d6db2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d6db6:	e00d      	b.n	d6dd4 <localtime_r+0x98>
   d6db8:	4293      	cmp	r3, r2
   d6dba:	db08      	blt.n	d6dce <localtime_r+0x92>
   d6dbc:	e001      	b.n	d6dc2 <localtime_r+0x86>
   d6dbe:	4293      	cmp	r3, r2
   d6dc0:	da07      	bge.n	d6dd2 <localtime_r+0x96>
   d6dc2:	6bba      	ldr	r2, [r7, #56]	; 0x38
   d6dc4:	4293      	cmp	r3, r2
   d6dc6:	bfac      	ite	ge
   d6dc8:	2300      	movge	r3, #0
   d6dca:	2301      	movlt	r3, #1
   d6dcc:	e002      	b.n	d6dd4 <localtime_r+0x98>
   d6dce:	2300      	movs	r3, #0
   d6dd0:	e000      	b.n	d6dd4 <localtime_r+0x98>
   d6dd2:	2301      	movs	r3, #1
   d6dd4:	6223      	str	r3, [r4, #32]
   d6dd6:	6a23      	ldr	r3, [r4, #32]
   d6dd8:	2b01      	cmp	r3, #1
   d6dda:	bf0c      	ite	eq
   d6ddc:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
   d6dde:	6a39      	ldrne	r1, [r7, #32]
   d6de0:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   d6de4:	203c      	movs	r0, #60	; 0x3c
   d6de6:	fb91 f6f3 	sdiv	r6, r1, r3
   d6dea:	fb03 1316 	mls	r3, r3, r6, r1
   d6dee:	6861      	ldr	r1, [r4, #4]
   d6df0:	fb93 f2f0 	sdiv	r2, r3, r0
   d6df4:	fb00 3012 	mls	r0, r0, r2, r3
   d6df8:	6823      	ldr	r3, [r4, #0]
   d6dfa:	1a89      	subs	r1, r1, r2
   d6dfc:	68a2      	ldr	r2, [r4, #8]
   d6dfe:	6061      	str	r1, [r4, #4]
   d6e00:	1a1b      	subs	r3, r3, r0
   d6e02:	1b92      	subs	r2, r2, r6
   d6e04:	2b3b      	cmp	r3, #59	; 0x3b
   d6e06:	6023      	str	r3, [r4, #0]
   d6e08:	60a2      	str	r2, [r4, #8]
   d6e0a:	dd03      	ble.n	d6e14 <localtime_r+0xd8>
   d6e0c:	3101      	adds	r1, #1
   d6e0e:	6061      	str	r1, [r4, #4]
   d6e10:	3b3c      	subs	r3, #60	; 0x3c
   d6e12:	e004      	b.n	d6e1e <localtime_r+0xe2>
   d6e14:	2b00      	cmp	r3, #0
   d6e16:	da03      	bge.n	d6e20 <localtime_r+0xe4>
   d6e18:	3901      	subs	r1, #1
   d6e1a:	6061      	str	r1, [r4, #4]
   d6e1c:	333c      	adds	r3, #60	; 0x3c
   d6e1e:	6023      	str	r3, [r4, #0]
   d6e20:	6863      	ldr	r3, [r4, #4]
   d6e22:	2b3b      	cmp	r3, #59	; 0x3b
   d6e24:	dd03      	ble.n	d6e2e <localtime_r+0xf2>
   d6e26:	3201      	adds	r2, #1
   d6e28:	60a2      	str	r2, [r4, #8]
   d6e2a:	3b3c      	subs	r3, #60	; 0x3c
   d6e2c:	e004      	b.n	d6e38 <localtime_r+0xfc>
   d6e2e:	2b00      	cmp	r3, #0
   d6e30:	da03      	bge.n	d6e3a <localtime_r+0xfe>
   d6e32:	3a01      	subs	r2, #1
   d6e34:	60a2      	str	r2, [r4, #8]
   d6e36:	333c      	adds	r3, #60	; 0x3c
   d6e38:	6063      	str	r3, [r4, #4]
   d6e3a:	68a3      	ldr	r3, [r4, #8]
   d6e3c:	2b17      	cmp	r3, #23
   d6e3e:	dd22      	ble.n	d6e86 <localtime_r+0x14a>
   d6e40:	69e2      	ldr	r2, [r4, #28]
   d6e42:	3201      	adds	r2, #1
   d6e44:	61e2      	str	r2, [r4, #28]
   d6e46:	69a2      	ldr	r2, [r4, #24]
   d6e48:	3201      	adds	r2, #1
   d6e4a:	2a06      	cmp	r2, #6
   d6e4c:	bfc8      	it	gt
   d6e4e:	2200      	movgt	r2, #0
   d6e50:	61a2      	str	r2, [r4, #24]
   d6e52:	68e2      	ldr	r2, [r4, #12]
   d6e54:	3b18      	subs	r3, #24
   d6e56:	3201      	adds	r2, #1
   d6e58:	60a3      	str	r3, [r4, #8]
   d6e5a:	6923      	ldr	r3, [r4, #16]
   d6e5c:	60e2      	str	r2, [r4, #12]
   d6e5e:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   d6e62:	428a      	cmp	r2, r1
   d6e64:	dd46      	ble.n	d6ef4 <localtime_r+0x1b8>
   d6e66:	3301      	adds	r3, #1
   d6e68:	2b0c      	cmp	r3, #12
   d6e6a:	bf0c      	ite	eq
   d6e6c:	6963      	ldreq	r3, [r4, #20]
   d6e6e:	6123      	strne	r3, [r4, #16]
   d6e70:	eba2 0201 	sub.w	r2, r2, r1
   d6e74:	60e2      	str	r2, [r4, #12]
   d6e76:	bf01      	itttt	eq
   d6e78:	3301      	addeq	r3, #1
   d6e7a:	2200      	moveq	r2, #0
   d6e7c:	6122      	streq	r2, [r4, #16]
   d6e7e:	6163      	streq	r3, [r4, #20]
   d6e80:	bf08      	it	eq
   d6e82:	61e2      	streq	r2, [r4, #28]
   d6e84:	e036      	b.n	d6ef4 <localtime_r+0x1b8>
   d6e86:	2b00      	cmp	r3, #0
   d6e88:	da34      	bge.n	d6ef4 <localtime_r+0x1b8>
   d6e8a:	69e2      	ldr	r2, [r4, #28]
   d6e8c:	3a01      	subs	r2, #1
   d6e8e:	61e2      	str	r2, [r4, #28]
   d6e90:	69a2      	ldr	r2, [r4, #24]
   d6e92:	3a01      	subs	r2, #1
   d6e94:	bf48      	it	mi
   d6e96:	2206      	movmi	r2, #6
   d6e98:	61a2      	str	r2, [r4, #24]
   d6e9a:	68e2      	ldr	r2, [r4, #12]
   d6e9c:	3318      	adds	r3, #24
   d6e9e:	3a01      	subs	r2, #1
   d6ea0:	60e2      	str	r2, [r4, #12]
   d6ea2:	60a3      	str	r3, [r4, #8]
   d6ea4:	bb32      	cbnz	r2, d6ef4 <localtime_r+0x1b8>
   d6ea6:	6923      	ldr	r3, [r4, #16]
   d6ea8:	3b01      	subs	r3, #1
   d6eaa:	d401      	bmi.n	d6eb0 <localtime_r+0x174>
   d6eac:	6123      	str	r3, [r4, #16]
   d6eae:	e01d      	b.n	d6eec <localtime_r+0x1b0>
   d6eb0:	230b      	movs	r3, #11
   d6eb2:	6123      	str	r3, [r4, #16]
   d6eb4:	6963      	ldr	r3, [r4, #20]
   d6eb6:	1e5a      	subs	r2, r3, #1
   d6eb8:	f012 0f03 	tst.w	r2, #3
   d6ebc:	6162      	str	r2, [r4, #20]
   d6ebe:	f203 736b 	addw	r3, r3, #1899	; 0x76b
   d6ec2:	d105      	bne.n	d6ed0 <localtime_r+0x194>
   d6ec4:	2164      	movs	r1, #100	; 0x64
   d6ec6:	fb93 f2f1 	sdiv	r2, r3, r1
   d6eca:	fb01 3212 	mls	r2, r1, r2, r3
   d6ece:	b94a      	cbnz	r2, d6ee4 <localtime_r+0x1a8>
   d6ed0:	f44f 71c8 	mov.w	r1, #400	; 0x190
   d6ed4:	fb93 f2f1 	sdiv	r2, r3, r1
   d6ed8:	fb01 3312 	mls	r3, r1, r2, r3
   d6edc:	fab3 f383 	clz	r3, r3
   d6ee0:	095b      	lsrs	r3, r3, #5
   d6ee2:	e000      	b.n	d6ee6 <localtime_r+0x1aa>
   d6ee4:	2301      	movs	r3, #1
   d6ee6:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
   d6eea:	61e3      	str	r3, [r4, #28]
   d6eec:	6923      	ldr	r3, [r4, #16]
   d6eee:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
   d6ef2:	60e3      	str	r3, [r4, #12]
   d6ef4:	f001 f817 	bl	d7f26 <__tz_unlock>
   d6ef8:	4620      	mov	r0, r4
   d6efa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6efe:	bf00      	nop
   d6f00:	000d9a1c 	.word	0x000d9a1c
   d6f04:	2003e7e4 	.word	0x2003e7e4

000d6f08 <_localeconv_r>:
   d6f08:	4800      	ldr	r0, [pc, #0]	; (d6f0c <_localeconv_r+0x4>)
   d6f0a:	4770      	bx	lr
   d6f0c:	2003e1a0 	.word	0x2003e1a0

000d6f10 <memcpy>:
   d6f10:	b510      	push	{r4, lr}
   d6f12:	1e43      	subs	r3, r0, #1
   d6f14:	440a      	add	r2, r1
   d6f16:	4291      	cmp	r1, r2
   d6f18:	d004      	beq.n	d6f24 <memcpy+0x14>
   d6f1a:	f811 4b01 	ldrb.w	r4, [r1], #1
   d6f1e:	f803 4f01 	strb.w	r4, [r3, #1]!
   d6f22:	e7f8      	b.n	d6f16 <memcpy+0x6>
   d6f24:	bd10      	pop	{r4, pc}

000d6f26 <memset>:
   d6f26:	4402      	add	r2, r0
   d6f28:	4603      	mov	r3, r0
   d6f2a:	4293      	cmp	r3, r2
   d6f2c:	d002      	beq.n	d6f34 <memset+0xe>
   d6f2e:	f803 1b01 	strb.w	r1, [r3], #1
   d6f32:	e7fa      	b.n	d6f2a <memset+0x4>
   d6f34:	4770      	bx	lr
	...

000d6f38 <srand>:
   d6f38:	b538      	push	{r3, r4, r5, lr}
   d6f3a:	4b12      	ldr	r3, [pc, #72]	; (d6f84 <srand+0x4c>)
   d6f3c:	681c      	ldr	r4, [r3, #0]
   d6f3e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d6f40:	4605      	mov	r5, r0
   d6f42:	b9d3      	cbnz	r3, d6f7a <srand+0x42>
   d6f44:	2018      	movs	r0, #24
   d6f46:	f7fd fe9f 	bl	d4c88 <malloc>
   d6f4a:	f243 330e 	movw	r3, #13070	; 0x330e
   d6f4e:	63a0      	str	r0, [r4, #56]	; 0x38
   d6f50:	8003      	strh	r3, [r0, #0]
   d6f52:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d6f56:	8043      	strh	r3, [r0, #2]
   d6f58:	f241 2334 	movw	r3, #4660	; 0x1234
   d6f5c:	8083      	strh	r3, [r0, #4]
   d6f5e:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d6f62:	80c3      	strh	r3, [r0, #6]
   d6f64:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d6f68:	8103      	strh	r3, [r0, #8]
   d6f6a:	2305      	movs	r3, #5
   d6f6c:	8143      	strh	r3, [r0, #10]
   d6f6e:	230b      	movs	r3, #11
   d6f70:	8183      	strh	r3, [r0, #12]
   d6f72:	2201      	movs	r2, #1
   d6f74:	2300      	movs	r3, #0
   d6f76:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d6f7a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d6f7c:	2200      	movs	r2, #0
   d6f7e:	611d      	str	r5, [r3, #16]
   d6f80:	615a      	str	r2, [r3, #20]
   d6f82:	bd38      	pop	{r3, r4, r5, pc}
   d6f84:	2003e19c 	.word	0x2003e19c

000d6f88 <strcmp>:
   d6f88:	f810 2b01 	ldrb.w	r2, [r0], #1
   d6f8c:	f811 3b01 	ldrb.w	r3, [r1], #1
   d6f90:	2a01      	cmp	r2, #1
   d6f92:	bf28      	it	cs
   d6f94:	429a      	cmpcs	r2, r3
   d6f96:	d0f7      	beq.n	d6f88 <strcmp>
   d6f98:	1ad0      	subs	r0, r2, r3
   d6f9a:	4770      	bx	lr

000d6f9c <strcpy>:
   d6f9c:	4603      	mov	r3, r0
   d6f9e:	f811 2b01 	ldrb.w	r2, [r1], #1
   d6fa2:	f803 2b01 	strb.w	r2, [r3], #1
   d6fa6:	2a00      	cmp	r2, #0
   d6fa8:	d1f9      	bne.n	d6f9e <strcpy+0x2>
   d6faa:	4770      	bx	lr

000d6fac <strdup>:
   d6fac:	4b02      	ldr	r3, [pc, #8]	; (d6fb8 <strdup+0xc>)
   d6fae:	4601      	mov	r1, r0
   d6fb0:	6818      	ldr	r0, [r3, #0]
   d6fb2:	f000 b803 	b.w	d6fbc <_strdup_r>
   d6fb6:	bf00      	nop
   d6fb8:	2003e19c 	.word	0x2003e19c

000d6fbc <_strdup_r>:
   d6fbc:	b570      	push	{r4, r5, r6, lr}
   d6fbe:	4606      	mov	r6, r0
   d6fc0:	4608      	mov	r0, r1
   d6fc2:	460c      	mov	r4, r1
   d6fc4:	f000 f80d 	bl	d6fe2 <strlen>
   d6fc8:	1c45      	adds	r5, r0, #1
   d6fca:	4629      	mov	r1, r5
   d6fcc:	4630      	mov	r0, r6
   d6fce:	f7fd fe93 	bl	d4cf8 <_malloc_r>
   d6fd2:	4606      	mov	r6, r0
   d6fd4:	b118      	cbz	r0, d6fde <_strdup_r+0x22>
   d6fd6:	462a      	mov	r2, r5
   d6fd8:	4621      	mov	r1, r4
   d6fda:	f7ff ff99 	bl	d6f10 <memcpy>
   d6fde:	4630      	mov	r0, r6
   d6fe0:	bd70      	pop	{r4, r5, r6, pc}

000d6fe2 <strlen>:
   d6fe2:	4603      	mov	r3, r0
   d6fe4:	f813 2b01 	ldrb.w	r2, [r3], #1
   d6fe8:	2a00      	cmp	r2, #0
   d6fea:	d1fb      	bne.n	d6fe4 <strlen+0x2>
   d6fec:	1a18      	subs	r0, r3, r0
   d6fee:	3801      	subs	r0, #1
   d6ff0:	4770      	bx	lr

000d6ff2 <strncmp>:
   d6ff2:	b530      	push	{r4, r5, lr}
   d6ff4:	b182      	cbz	r2, d7018 <strncmp+0x26>
   d6ff6:	1e45      	subs	r5, r0, #1
   d6ff8:	3901      	subs	r1, #1
   d6ffa:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   d6ffe:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d7002:	42a3      	cmp	r3, r4
   d7004:	d106      	bne.n	d7014 <strncmp+0x22>
   d7006:	43ec      	mvns	r4, r5
   d7008:	4414      	add	r4, r2
   d700a:	42e0      	cmn	r0, r4
   d700c:	d001      	beq.n	d7012 <strncmp+0x20>
   d700e:	2b00      	cmp	r3, #0
   d7010:	d1f3      	bne.n	d6ffa <strncmp+0x8>
   d7012:	461c      	mov	r4, r3
   d7014:	1b18      	subs	r0, r3, r4
   d7016:	bd30      	pop	{r4, r5, pc}
   d7018:	4610      	mov	r0, r2
   d701a:	bd30      	pop	{r4, r5, pc}

000d701c <sulp>:
   d701c:	b570      	push	{r4, r5, r6, lr}
   d701e:	4604      	mov	r4, r0
   d7020:	460d      	mov	r5, r1
   d7022:	ec45 4b10 	vmov	d0, r4, r5
   d7026:	4616      	mov	r6, r2
   d7028:	f001 ffc8 	bl	d8fbc <__ulp>
   d702c:	ec51 0b10 	vmov	r0, r1, d0
   d7030:	b17e      	cbz	r6, d7052 <sulp+0x36>
   d7032:	f3c5 530a 	ubfx	r3, r5, #20, #11
   d7036:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   d703a:	2b00      	cmp	r3, #0
   d703c:	dd09      	ble.n	d7052 <sulp+0x36>
   d703e:	051b      	lsls	r3, r3, #20
   d7040:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   d7044:	2400      	movs	r4, #0
   d7046:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   d704a:	4622      	mov	r2, r4
   d704c:	462b      	mov	r3, r5
   d704e:	f7ff fb1f 	bl	d6690 <__aeabi_dmul>
   d7052:	bd70      	pop	{r4, r5, r6, pc}
   d7054:	0000      	movs	r0, r0
	...

000d7058 <_strtod_r>:
   d7058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d705c:	b09d      	sub	sp, #116	; 0x74
   d705e:	2300      	movs	r3, #0
   d7060:	9002      	str	r0, [sp, #8]
   d7062:	460c      	mov	r4, r1
   d7064:	9213      	str	r2, [sp, #76]	; 0x4c
   d7066:	9318      	str	r3, [sp, #96]	; 0x60
   d7068:	f04f 0a00 	mov.w	sl, #0
   d706c:	f04f 0b00 	mov.w	fp, #0
   d7070:	9117      	str	r1, [sp, #92]	; 0x5c
   d7072:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d7074:	781a      	ldrb	r2, [r3, #0]
   d7076:	2a0d      	cmp	r2, #13
   d7078:	d805      	bhi.n	d7086 <_strtod_r+0x2e>
   d707a:	2a09      	cmp	r2, #9
   d707c:	d213      	bcs.n	d70a6 <_strtod_r+0x4e>
   d707e:	2a00      	cmp	r2, #0
   d7080:	f000 81ac 	beq.w	d73dc <_strtod_r+0x384>
   d7084:	e012      	b.n	d70ac <_strtod_r+0x54>
   d7086:	2a2b      	cmp	r2, #43	; 0x2b
   d7088:	d004      	beq.n	d7094 <_strtod_r+0x3c>
   d708a:	2a2d      	cmp	r2, #45	; 0x2d
   d708c:	d004      	beq.n	d7098 <_strtod_r+0x40>
   d708e:	2a20      	cmp	r2, #32
   d7090:	d10c      	bne.n	d70ac <_strtod_r+0x54>
   d7092:	e008      	b.n	d70a6 <_strtod_r+0x4e>
   d7094:	2200      	movs	r2, #0
   d7096:	e000      	b.n	d709a <_strtod_r+0x42>
   d7098:	2201      	movs	r2, #1
   d709a:	920c      	str	r2, [sp, #48]	; 0x30
   d709c:	1c5a      	adds	r2, r3, #1
   d709e:	9217      	str	r2, [sp, #92]	; 0x5c
   d70a0:	785b      	ldrb	r3, [r3, #1]
   d70a2:	b92b      	cbnz	r3, d70b0 <_strtod_r+0x58>
   d70a4:	e19a      	b.n	d73dc <_strtod_r+0x384>
   d70a6:	3301      	adds	r3, #1
   d70a8:	9317      	str	r3, [sp, #92]	; 0x5c
   d70aa:	e7e2      	b.n	d7072 <_strtod_r+0x1a>
   d70ac:	2300      	movs	r3, #0
   d70ae:	930c      	str	r3, [sp, #48]	; 0x30
   d70b0:	9d17      	ldr	r5, [sp, #92]	; 0x5c
   d70b2:	782b      	ldrb	r3, [r5, #0]
   d70b4:	2b30      	cmp	r3, #48	; 0x30
   d70b6:	d15c      	bne.n	d7172 <_strtod_r+0x11a>
   d70b8:	786b      	ldrb	r3, [r5, #1]
   d70ba:	2b58      	cmp	r3, #88	; 0x58
   d70bc:	d001      	beq.n	d70c2 <_strtod_r+0x6a>
   d70be:	2b78      	cmp	r3, #120	; 0x78
   d70c0:	d14c      	bne.n	d715c <_strtod_r+0x104>
   d70c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d70c4:	9301      	str	r3, [sp, #4]
   d70c6:	ab18      	add	r3, sp, #96	; 0x60
   d70c8:	9300      	str	r3, [sp, #0]
   d70ca:	4aa9      	ldr	r2, [pc, #676]	; (d7370 <_strtod_r+0x318>)
   d70cc:	9802      	ldr	r0, [sp, #8]
   d70ce:	ab19      	add	r3, sp, #100	; 0x64
   d70d0:	a917      	add	r1, sp, #92	; 0x5c
   d70d2:	f001 f8fa 	bl	d82ca <__gethex>
   d70d6:	f010 0607 	ands.w	r6, r0, #7
   d70da:	4604      	mov	r4, r0
   d70dc:	f000 8587 	beq.w	d7bee <_strtod_r+0xb96>
   d70e0:	2e06      	cmp	r6, #6
   d70e2:	d105      	bne.n	d70f0 <_strtod_r+0x98>
   d70e4:	3501      	adds	r5, #1
   d70e6:	2300      	movs	r3, #0
   d70e8:	9517      	str	r5, [sp, #92]	; 0x5c
   d70ea:	930c      	str	r3, [sp, #48]	; 0x30
   d70ec:	f000 bd7f 	b.w	d7bee <_strtod_r+0xb96>
   d70f0:	9a18      	ldr	r2, [sp, #96]	; 0x60
   d70f2:	b13a      	cbz	r2, d7104 <_strtod_r+0xac>
   d70f4:	2135      	movs	r1, #53	; 0x35
   d70f6:	a81a      	add	r0, sp, #104	; 0x68
   d70f8:	f002 f84d 	bl	d9196 <__copybits>
   d70fc:	9918      	ldr	r1, [sp, #96]	; 0x60
   d70fe:	9802      	ldr	r0, [sp, #8]
   d7100:	f001 fccb 	bl	d8a9a <_Bfree>
   d7104:	2e06      	cmp	r6, #6
   d7106:	d822      	bhi.n	d714e <_strtod_r+0xf6>
   d7108:	e8df f006 	tbb	[pc, r6]
   d710c:	18080d04 	.word	0x18080d04
   d7110:	0d1d      	.short	0x0d1d
   d7112:	04          	.byte	0x04
   d7113:	00          	.byte	0x00
   d7114:	f04f 0b00 	mov.w	fp, #0
   d7118:	46da      	mov	sl, fp
   d711a:	e018      	b.n	d714e <_strtod_r+0xf6>
   d711c:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   d7120:	f8dd b06c 	ldr.w	fp, [sp, #108]	; 0x6c
   d7124:	e013      	b.n	d714e <_strtod_r+0xf6>
   d7126:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   d7128:	9a19      	ldr	r2, [sp, #100]	; 0x64
   d712a:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   d712e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   d7132:	f202 4233 	addw	r2, r2, #1075	; 0x433
   d7136:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   d713a:	e008      	b.n	d714e <_strtod_r+0xf6>
   d713c:	f8df b234 	ldr.w	fp, [pc, #564]	; d7374 <_strtod_r+0x31c>
   d7140:	f04f 0a00 	mov.w	sl, #0
   d7144:	e003      	b.n	d714e <_strtod_r+0xf6>
   d7146:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   d714a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   d714e:	0721      	lsls	r1, r4, #28
   d7150:	f140 854d 	bpl.w	d7bee <_strtod_r+0xb96>
   d7154:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   d7158:	f000 bd49 	b.w	d7bee <_strtod_r+0xb96>
   d715c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d715e:	1c5a      	adds	r2, r3, #1
   d7160:	9217      	str	r2, [sp, #92]	; 0x5c
   d7162:	785b      	ldrb	r3, [r3, #1]
   d7164:	2b30      	cmp	r3, #48	; 0x30
   d7166:	d0f9      	beq.n	d715c <_strtod_r+0x104>
   d7168:	2b00      	cmp	r3, #0
   d716a:	f000 8540 	beq.w	d7bee <_strtod_r+0xb96>
   d716e:	2301      	movs	r3, #1
   d7170:	e000      	b.n	d7174 <_strtod_r+0x11c>
   d7172:	2300      	movs	r3, #0
   d7174:	f04f 0800 	mov.w	r8, #0
   d7178:	9306      	str	r3, [sp, #24]
   d717a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d717c:	9307      	str	r3, [sp, #28]
   d717e:	f8cd 8014 	str.w	r8, [sp, #20]
   d7182:	f8cd 8010 	str.w	r8, [sp, #16]
   d7186:	220a      	movs	r2, #10
   d7188:	9d17      	ldr	r5, [sp, #92]	; 0x5c
   d718a:	782e      	ldrb	r6, [r5, #0]
   d718c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   d7190:	b2d9      	uxtb	r1, r3
   d7192:	2909      	cmp	r1, #9
   d7194:	d80e      	bhi.n	d71b4 <_strtod_r+0x15c>
   d7196:	9904      	ldr	r1, [sp, #16]
   d7198:	2908      	cmp	r1, #8
   d719a:	bfdd      	ittte	le
   d719c:	9905      	ldrle	r1, [sp, #20]
   d719e:	fb02 3301 	mlale	r3, r2, r1, r3
   d71a2:	9305      	strle	r3, [sp, #20]
   d71a4:	fb02 3808 	mlagt	r8, r2, r8, r3
   d71a8:	9b04      	ldr	r3, [sp, #16]
   d71aa:	3501      	adds	r5, #1
   d71ac:	3301      	adds	r3, #1
   d71ae:	9304      	str	r3, [sp, #16]
   d71b0:	9517      	str	r5, [sp, #92]	; 0x5c
   d71b2:	e7e9      	b.n	d7188 <_strtod_r+0x130>
   d71b4:	9802      	ldr	r0, [sp, #8]
   d71b6:	f7ff fea7 	bl	d6f08 <_localeconv_r>
   d71ba:	6807      	ldr	r7, [r0, #0]
   d71bc:	9802      	ldr	r0, [sp, #8]
   d71be:	f7ff fea3 	bl	d6f08 <_localeconv_r>
   d71c2:	6800      	ldr	r0, [r0, #0]
   d71c4:	f7ff ff0d 	bl	d6fe2 <strlen>
   d71c8:	4639      	mov	r1, r7
   d71ca:	4602      	mov	r2, r0
   d71cc:	4628      	mov	r0, r5
   d71ce:	f7ff ff10 	bl	d6ff2 <strncmp>
   d71d2:	4607      	mov	r7, r0
   d71d4:	b128      	cbz	r0, d71e2 <_strtod_r+0x18a>
   d71d6:	2000      	movs	r0, #0
   d71d8:	4633      	mov	r3, r6
   d71da:	9d04      	ldr	r5, [sp, #16]
   d71dc:	4602      	mov	r2, r0
   d71de:	4601      	mov	r1, r0
   d71e0:	e057      	b.n	d7292 <_strtod_r+0x23a>
   d71e2:	9802      	ldr	r0, [sp, #8]
   d71e4:	f7ff fe90 	bl	d6f08 <_localeconv_r>
   d71e8:	6800      	ldr	r0, [r0, #0]
   d71ea:	f7ff fefa 	bl	d6fe2 <strlen>
   d71ee:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d71f0:	181a      	adds	r2, r3, r0
   d71f2:	9217      	str	r2, [sp, #92]	; 0x5c
   d71f4:	9a04      	ldr	r2, [sp, #16]
   d71f6:	5c1b      	ldrb	r3, [r3, r0]
   d71f8:	2a00      	cmp	r2, #0
   d71fa:	d142      	bne.n	d7282 <_strtod_r+0x22a>
   d71fc:	4610      	mov	r0, r2
   d71fe:	2b30      	cmp	r3, #48	; 0x30
   d7200:	d105      	bne.n	d720e <_strtod_r+0x1b6>
   d7202:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d7204:	1c5a      	adds	r2, r3, #1
   d7206:	9217      	str	r2, [sp, #92]	; 0x5c
   d7208:	3001      	adds	r0, #1
   d720a:	785b      	ldrb	r3, [r3, #1]
   d720c:	e7f7      	b.n	d71fe <_strtod_r+0x1a6>
   d720e:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
   d7212:	2a08      	cmp	r2, #8
   d7214:	d843      	bhi.n	d729e <_strtod_r+0x246>
   d7216:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   d7218:	9207      	str	r2, [sp, #28]
   d721a:	4602      	mov	r2, r0
   d721c:	2000      	movs	r0, #0
   d721e:	4605      	mov	r5, r0
   d7220:	3b30      	subs	r3, #48	; 0x30
   d7222:	f100 0101 	add.w	r1, r0, #1
   d7226:	d026      	beq.n	d7276 <_strtod_r+0x21e>
   d7228:	440a      	add	r2, r1
   d722a:	eb05 0c00 	add.w	ip, r5, r0
   d722e:	4629      	mov	r1, r5
   d7230:	260a      	movs	r6, #10
   d7232:	4561      	cmp	r1, ip
   d7234:	d00e      	beq.n	d7254 <_strtod_r+0x1fc>
   d7236:	3101      	adds	r1, #1
   d7238:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
   d723c:	f1be 0f08 	cmp.w	lr, #8
   d7240:	dc03      	bgt.n	d724a <_strtod_r+0x1f2>
   d7242:	9f05      	ldr	r7, [sp, #20]
   d7244:	4377      	muls	r7, r6
   d7246:	9705      	str	r7, [sp, #20]
   d7248:	e7f3      	b.n	d7232 <_strtod_r+0x1da>
   d724a:	2910      	cmp	r1, #16
   d724c:	bfd8      	it	le
   d724e:	fb06 f808 	mulle.w	r8, r6, r8
   d7252:	e7ee      	b.n	d7232 <_strtod_r+0x1da>
   d7254:	4428      	add	r0, r5
   d7256:	2808      	cmp	r0, #8
   d7258:	f100 0501 	add.w	r5, r0, #1
   d725c:	dc05      	bgt.n	d726a <_strtod_r+0x212>
   d725e:	9805      	ldr	r0, [sp, #20]
   d7260:	210a      	movs	r1, #10
   d7262:	fb01 3300 	mla	r3, r1, r0, r3
   d7266:	9305      	str	r3, [sp, #20]
   d7268:	e004      	b.n	d7274 <_strtod_r+0x21c>
   d726a:	2d10      	cmp	r5, #16
   d726c:	bfdc      	itt	le
   d726e:	210a      	movle	r1, #10
   d7270:	fb01 3808 	mlale	r8, r1, r8, r3
   d7274:	2100      	movs	r1, #0
   d7276:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d7278:	1c58      	adds	r0, r3, #1
   d727a:	9017      	str	r0, [sp, #92]	; 0x5c
   d727c:	785b      	ldrb	r3, [r3, #1]
   d727e:	4608      	mov	r0, r1
   d7280:	e002      	b.n	d7288 <_strtod_r+0x230>
   d7282:	9d04      	ldr	r5, [sp, #16]
   d7284:	4638      	mov	r0, r7
   d7286:	463a      	mov	r2, r7
   d7288:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   d728c:	2909      	cmp	r1, #9
   d728e:	d9c7      	bls.n	d7220 <_strtod_r+0x1c8>
   d7290:	2101      	movs	r1, #1
   d7292:	2b65      	cmp	r3, #101	; 0x65
   d7294:	d001      	beq.n	d729a <_strtod_r+0x242>
   d7296:	2b45      	cmp	r3, #69	; 0x45
   d7298:	d151      	bne.n	d733e <_strtod_r+0x2e6>
   d729a:	b96d      	cbnz	r5, d72b8 <_strtod_r+0x260>
   d729c:	e004      	b.n	d72a8 <_strtod_r+0x250>
   d729e:	2b65      	cmp	r3, #101	; 0x65
   d72a0:	f040 84b3 	bne.w	d7c0a <_strtod_r+0xbb2>
   d72a4:	2200      	movs	r2, #0
   d72a6:	2101      	movs	r1, #1
   d72a8:	b928      	cbnz	r0, d72b6 <_strtod_r+0x25e>
   d72aa:	9b06      	ldr	r3, [sp, #24]
   d72ac:	2b00      	cmp	r3, #0
   d72ae:	f000 8095 	beq.w	d73dc <_strtod_r+0x384>
   d72b2:	4605      	mov	r5, r0
   d72b4:	e000      	b.n	d72b8 <_strtod_r+0x260>
   d72b6:	2500      	movs	r5, #0
   d72b8:	9c17      	ldr	r4, [sp, #92]	; 0x5c
   d72ba:	1c63      	adds	r3, r4, #1
   d72bc:	9317      	str	r3, [sp, #92]	; 0x5c
   d72be:	7863      	ldrb	r3, [r4, #1]
   d72c0:	2b2b      	cmp	r3, #43	; 0x2b
   d72c2:	d006      	beq.n	d72d2 <_strtod_r+0x27a>
   d72c4:	2b2d      	cmp	r3, #45	; 0x2d
   d72c6:	d002      	beq.n	d72ce <_strtod_r+0x276>
   d72c8:	2600      	movs	r6, #0
   d72ca:	9603      	str	r6, [sp, #12]
   d72cc:	e006      	b.n	d72dc <_strtod_r+0x284>
   d72ce:	2301      	movs	r3, #1
   d72d0:	e000      	b.n	d72d4 <_strtod_r+0x27c>
   d72d2:	2300      	movs	r3, #0
   d72d4:	9303      	str	r3, [sp, #12]
   d72d6:	1ca3      	adds	r3, r4, #2
   d72d8:	9317      	str	r3, [sp, #92]	; 0x5c
   d72da:	78a3      	ldrb	r3, [r4, #2]
   d72dc:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
   d72e0:	2e09      	cmp	r6, #9
   d72e2:	d82b      	bhi.n	d733c <_strtod_r+0x2e4>
   d72e4:	2b30      	cmp	r3, #48	; 0x30
   d72e6:	d104      	bne.n	d72f2 <_strtod_r+0x29a>
   d72e8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d72ea:	1c5e      	adds	r6, r3, #1
   d72ec:	9617      	str	r6, [sp, #92]	; 0x5c
   d72ee:	785b      	ldrb	r3, [r3, #1]
   d72f0:	e7f8      	b.n	d72e4 <_strtod_r+0x28c>
   d72f2:	f1a3 0631 	sub.w	r6, r3, #49	; 0x31
   d72f6:	2e08      	cmp	r6, #8
   d72f8:	d821      	bhi.n	d733e <_strtod_r+0x2e6>
   d72fa:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
   d72fe:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d7300:	f04f 0c0a 	mov.w	ip, #10
   d7304:	461f      	mov	r7, r3
   d7306:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d7308:	1c5e      	adds	r6, r3, #1
   d730a:	9617      	str	r6, [sp, #92]	; 0x5c
   d730c:	785b      	ldrb	r3, [r3, #1]
   d730e:	f1a3 0930 	sub.w	r9, r3, #48	; 0x30
   d7312:	f1b9 0f09 	cmp.w	r9, #9
   d7316:	d804      	bhi.n	d7322 <_strtod_r+0x2ca>
   d7318:	fb0c 3e0e 	mla	lr, ip, lr, r3
   d731c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   d7320:	e7f1      	b.n	d7306 <_strtod_r+0x2ae>
   d7322:	1bf6      	subs	r6, r6, r7
   d7324:	2e08      	cmp	r6, #8
   d7326:	f644 691f 	movw	r9, #19999	; 0x4e1f
   d732a:	dc02      	bgt.n	d7332 <_strtod_r+0x2da>
   d732c:	45f1      	cmp	r9, lr
   d732e:	bfa8      	it	ge
   d7330:	46f1      	movge	r9, lr
   d7332:	9e03      	ldr	r6, [sp, #12]
   d7334:	b12e      	cbz	r6, d7342 <_strtod_r+0x2ea>
   d7336:	f1c9 0900 	rsb	r9, r9, #0
   d733a:	e002      	b.n	d7342 <_strtod_r+0x2ea>
   d733c:	9417      	str	r4, [sp, #92]	; 0x5c
   d733e:	f04f 0900 	mov.w	r9, #0
   d7342:	2d00      	cmp	r5, #0
   d7344:	d153      	bne.n	d73ee <_strtod_r+0x396>
   d7346:	2800      	cmp	r0, #0
   d7348:	f040 8451 	bne.w	d7bee <_strtod_r+0xb96>
   d734c:	9a06      	ldr	r2, [sp, #24]
   d734e:	2a00      	cmp	r2, #0
   d7350:	f040 844d 	bne.w	d7bee <_strtod_r+0xb96>
   d7354:	2900      	cmp	r1, #0
   d7356:	d141      	bne.n	d73dc <_strtod_r+0x384>
   d7358:	2b4e      	cmp	r3, #78	; 0x4e
   d735a:	d020      	beq.n	d739e <_strtod_r+0x346>
   d735c:	dc02      	bgt.n	d7364 <_strtod_r+0x30c>
   d735e:	2b49      	cmp	r3, #73	; 0x49
   d7360:	d00a      	beq.n	d7378 <_strtod_r+0x320>
   d7362:	e03b      	b.n	d73dc <_strtod_r+0x384>
   d7364:	2b69      	cmp	r3, #105	; 0x69
   d7366:	d007      	beq.n	d7378 <_strtod_r+0x320>
   d7368:	2b6e      	cmp	r3, #110	; 0x6e
   d736a:	d018      	beq.n	d739e <_strtod_r+0x346>
   d736c:	e036      	b.n	d73dc <_strtod_r+0x384>
   d736e:	bf00      	nop
   d7370:	000d9a7c 	.word	0x000d9a7c
   d7374:	7ff00000 	.word	0x7ff00000
   d7378:	49a8      	ldr	r1, [pc, #672]	; (d761c <_strtod_r+0x5c4>)
   d737a:	a817      	add	r0, sp, #92	; 0x5c
   d737c:	f001 f9d6 	bl	d872c <__match>
   d7380:	b360      	cbz	r0, d73dc <_strtod_r+0x384>
   d7382:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d7384:	49a6      	ldr	r1, [pc, #664]	; (d7620 <_strtod_r+0x5c8>)
   d7386:	3b01      	subs	r3, #1
   d7388:	a817      	add	r0, sp, #92	; 0x5c
   d738a:	9317      	str	r3, [sp, #92]	; 0x5c
   d738c:	f001 f9ce 	bl	d872c <__match>
   d7390:	b910      	cbnz	r0, d7398 <_strtod_r+0x340>
   d7392:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d7394:	3301      	adds	r3, #1
   d7396:	9317      	str	r3, [sp, #92]	; 0x5c
   d7398:	f8df b2a0 	ldr.w	fp, [pc, #672]	; d763c <_strtod_r+0x5e4>
   d739c:	e01a      	b.n	d73d4 <_strtod_r+0x37c>
   d739e:	49a1      	ldr	r1, [pc, #644]	; (d7624 <_strtod_r+0x5cc>)
   d73a0:	a817      	add	r0, sp, #92	; 0x5c
   d73a2:	f001 f9c3 	bl	d872c <__match>
   d73a6:	b1c8      	cbz	r0, d73dc <_strtod_r+0x384>
   d73a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d73aa:	781b      	ldrb	r3, [r3, #0]
   d73ac:	2b28      	cmp	r3, #40	; 0x28
   d73ae:	d10f      	bne.n	d73d0 <_strtod_r+0x378>
   d73b0:	aa1a      	add	r2, sp, #104	; 0x68
   d73b2:	499d      	ldr	r1, [pc, #628]	; (d7628 <_strtod_r+0x5d0>)
   d73b4:	a817      	add	r0, sp, #92	; 0x5c
   d73b6:	f001 f9cc 	bl	d8752 <__hexnan>
   d73ba:	2805      	cmp	r0, #5
   d73bc:	d108      	bne.n	d73d0 <_strtod_r+0x378>
   d73be:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   d73c0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   d73c4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   d73c8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   d73cc:	f000 bc0f 	b.w	d7bee <_strtod_r+0xb96>
   d73d0:	f8df b26c 	ldr.w	fp, [pc, #620]	; d7640 <_strtod_r+0x5e8>
   d73d4:	f04f 0a00 	mov.w	sl, #0
   d73d8:	f000 bc09 	b.w	d7bee <_strtod_r+0xb96>
   d73dc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   d73de:	9417      	str	r4, [sp, #92]	; 0x5c
   d73e0:	2b00      	cmp	r3, #0
   d73e2:	f000 840f 	beq.w	d7c04 <_strtod_r+0xbac>
   d73e6:	2300      	movs	r3, #0
   d73e8:	930c      	str	r3, [sp, #48]	; 0x30
   d73ea:	f000 bc02 	b.w	d7bf2 <_strtod_r+0xb9a>
   d73ee:	9b04      	ldr	r3, [sp, #16]
   d73f0:	9805      	ldr	r0, [sp, #20]
   d73f2:	2b00      	cmp	r3, #0
   d73f4:	bf08      	it	eq
   d73f6:	462b      	moveq	r3, r5
   d73f8:	2d10      	cmp	r5, #16
   d73fa:	462c      	mov	r4, r5
   d73fc:	ebc2 0909 	rsb	r9, r2, r9
   d7400:	bfa8      	it	ge
   d7402:	2410      	movge	r4, #16
   d7404:	9304      	str	r3, [sp, #16]
   d7406:	f7ff f8cd 	bl	d65a4 <__aeabi_ui2d>
   d740a:	2c09      	cmp	r4, #9
   d740c:	4682      	mov	sl, r0
   d740e:	468b      	mov	fp, r1
   d7410:	dd13      	ble.n	d743a <_strtod_r+0x3e2>
   d7412:	4b86      	ldr	r3, [pc, #536]	; (d762c <_strtod_r+0x5d4>)
   d7414:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   d7418:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   d741c:	f7ff f938 	bl	d6690 <__aeabi_dmul>
   d7420:	4606      	mov	r6, r0
   d7422:	4640      	mov	r0, r8
   d7424:	460f      	mov	r7, r1
   d7426:	f7ff f8bd 	bl	d65a4 <__aeabi_ui2d>
   d742a:	4602      	mov	r2, r0
   d742c:	460b      	mov	r3, r1
   d742e:	4630      	mov	r0, r6
   d7430:	4639      	mov	r1, r7
   d7432:	f7fe ff7b 	bl	d632c <__adddf3>
   d7436:	4682      	mov	sl, r0
   d7438:	468b      	mov	fp, r1
   d743a:	2d0f      	cmp	r5, #15
   d743c:	dc36      	bgt.n	d74ac <_strtod_r+0x454>
   d743e:	f1b9 0f00 	cmp.w	r9, #0
   d7442:	f000 83d4 	beq.w	d7bee <_strtod_r+0xb96>
   d7446:	dd24      	ble.n	d7492 <_strtod_r+0x43a>
   d7448:	f1b9 0f16 	cmp.w	r9, #22
   d744c:	dc07      	bgt.n	d745e <_strtod_r+0x406>
   d744e:	4d77      	ldr	r5, [pc, #476]	; (d762c <_strtod_r+0x5d4>)
   d7450:	eb05 09c9 	add.w	r9, r5, r9, lsl #3
   d7454:	4652      	mov	r2, sl
   d7456:	465b      	mov	r3, fp
   d7458:	e9d9 0100 	ldrd	r0, r1, [r9]
   d745c:	e014      	b.n	d7488 <_strtod_r+0x430>
   d745e:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   d7462:	4599      	cmp	r9, r3
   d7464:	dc22      	bgt.n	d74ac <_strtod_r+0x454>
   d7466:	4c71      	ldr	r4, [pc, #452]	; (d762c <_strtod_r+0x5d4>)
   d7468:	f1c5 050f 	rsb	r5, r5, #15
   d746c:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   d7470:	ebc5 0509 	rsb	r5, r5, r9
   d7474:	4652      	mov	r2, sl
   d7476:	465b      	mov	r3, fp
   d7478:	e9d1 0100 	ldrd	r0, r1, [r1]
   d747c:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   d7480:	f7ff f906 	bl	d6690 <__aeabi_dmul>
   d7484:	e9d4 2300 	ldrd	r2, r3, [r4]
   d7488:	f7ff f902 	bl	d6690 <__aeabi_dmul>
   d748c:	4682      	mov	sl, r0
   d748e:	468b      	mov	fp, r1
   d7490:	e3ad      	b.n	d7bee <_strtod_r+0xb96>
   d7492:	f119 0f16 	cmn.w	r9, #22
   d7496:	db09      	blt.n	d74ac <_strtod_r+0x454>
   d7498:	4d64      	ldr	r5, [pc, #400]	; (d762c <_strtod_r+0x5d4>)
   d749a:	eba5 09c9 	sub.w	r9, r5, r9, lsl #3
   d749e:	e9d9 2300 	ldrd	r2, r3, [r9]
   d74a2:	4650      	mov	r0, sl
   d74a4:	4659      	mov	r1, fp
   d74a6:	f7ff fa1d 	bl	d68e4 <__aeabi_ddiv>
   d74aa:	e7ef      	b.n	d748c <_strtod_r+0x434>
   d74ac:	1b2c      	subs	r4, r5, r4
   d74ae:	444c      	add	r4, r9
   d74b0:	2c00      	cmp	r4, #0
   d74b2:	dd57      	ble.n	d7564 <_strtod_r+0x50c>
   d74b4:	f014 010f 	ands.w	r1, r4, #15
   d74b8:	d00a      	beq.n	d74d0 <_strtod_r+0x478>
   d74ba:	4b5c      	ldr	r3, [pc, #368]	; (d762c <_strtod_r+0x5d4>)
   d74bc:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   d74c0:	4652      	mov	r2, sl
   d74c2:	465b      	mov	r3, fp
   d74c4:	e9d1 0100 	ldrd	r0, r1, [r1]
   d74c8:	f7ff f8e2 	bl	d6690 <__aeabi_dmul>
   d74cc:	4682      	mov	sl, r0
   d74ce:	468b      	mov	fp, r1
   d74d0:	f034 040f 	bics.w	r4, r4, #15
   d74d4:	f000 80b8 	beq.w	d7648 <_strtod_r+0x5f0>
   d74d8:	f5b4 7f9a 	cmp.w	r4, #308	; 0x134
   d74dc:	dd0b      	ble.n	d74f6 <_strtod_r+0x49e>
   d74de:	2400      	movs	r4, #0
   d74e0:	4625      	mov	r5, r4
   d74e2:	9405      	str	r4, [sp, #20]
   d74e4:	9404      	str	r4, [sp, #16]
   d74e6:	9a02      	ldr	r2, [sp, #8]
   d74e8:	f8df b150 	ldr.w	fp, [pc, #336]	; d763c <_strtod_r+0x5e4>
   d74ec:	2322      	movs	r3, #34	; 0x22
   d74ee:	6013      	str	r3, [r2, #0]
   d74f0:	f04f 0a00 	mov.w	sl, #0
   d74f4:	e187      	b.n	d7806 <_strtod_r+0x7ae>
   d74f6:	4e4e      	ldr	r6, [pc, #312]	; (d7630 <_strtod_r+0x5d8>)
   d74f8:	2300      	movs	r3, #0
   d74fa:	1124      	asrs	r4, r4, #4
   d74fc:	4650      	mov	r0, sl
   d74fe:	4659      	mov	r1, fp
   d7500:	4698      	mov	r8, r3
   d7502:	4637      	mov	r7, r6
   d7504:	2c01      	cmp	r4, #1
   d7506:	dd0b      	ble.n	d7520 <_strtod_r+0x4c8>
   d7508:	07e2      	lsls	r2, r4, #31
   d750a:	d504      	bpl.n	d7516 <_strtod_r+0x4be>
   d750c:	e9d6 2300 	ldrd	r2, r3, [r6]
   d7510:	f7ff f8be 	bl	d6690 <__aeabi_dmul>
   d7514:	2301      	movs	r3, #1
   d7516:	f108 0801 	add.w	r8, r8, #1
   d751a:	1064      	asrs	r4, r4, #1
   d751c:	3608      	adds	r6, #8
   d751e:	e7f1      	b.n	d7504 <_strtod_r+0x4ac>
   d7520:	b10b      	cbz	r3, d7526 <_strtod_r+0x4ce>
   d7522:	4682      	mov	sl, r0
   d7524:	468b      	mov	fp, r1
   d7526:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   d752a:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
   d752e:	4652      	mov	r2, sl
   d7530:	465b      	mov	r3, fp
   d7532:	e9d7 0100 	ldrd	r0, r1, [r7]
   d7536:	f7ff f8ab 	bl	d6690 <__aeabi_dmul>
   d753a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   d753e:	468b      	mov	fp, r1
   d7540:	460a      	mov	r2, r1
   d7542:	0d1b      	lsrs	r3, r3, #20
   d7544:	493b      	ldr	r1, [pc, #236]	; (d7634 <_strtod_r+0x5dc>)
   d7546:	051b      	lsls	r3, r3, #20
   d7548:	428b      	cmp	r3, r1
   d754a:	4682      	mov	sl, r0
   d754c:	d8c7      	bhi.n	d74de <_strtod_r+0x486>
   d754e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   d7552:	428b      	cmp	r3, r1
   d7554:	bf86      	itte	hi
   d7556:	f8df b0ec 	ldrhi.w	fp, [pc, #236]	; d7644 <_strtod_r+0x5ec>
   d755a:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
   d755e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   d7562:	e071      	b.n	d7648 <_strtod_r+0x5f0>
   d7564:	d070      	beq.n	d7648 <_strtod_r+0x5f0>
   d7566:	4264      	negs	r4, r4
   d7568:	f014 020f 	ands.w	r2, r4, #15
   d756c:	d00a      	beq.n	d7584 <_strtod_r+0x52c>
   d756e:	4b2f      	ldr	r3, [pc, #188]	; (d762c <_strtod_r+0x5d4>)
   d7570:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   d7574:	4650      	mov	r0, sl
   d7576:	4659      	mov	r1, fp
   d7578:	e9d3 2300 	ldrd	r2, r3, [r3]
   d757c:	f7ff f9b2 	bl	d68e4 <__aeabi_ddiv>
   d7580:	4682      	mov	sl, r0
   d7582:	468b      	mov	fp, r1
   d7584:	1124      	asrs	r4, r4, #4
   d7586:	d05f      	beq.n	d7648 <_strtod_r+0x5f0>
   d7588:	2c1f      	cmp	r4, #31
   d758a:	dd04      	ble.n	d7596 <_strtod_r+0x53e>
   d758c:	2400      	movs	r4, #0
   d758e:	4625      	mov	r5, r4
   d7590:	9405      	str	r4, [sp, #20]
   d7592:	9404      	str	r4, [sp, #16]
   d7594:	e130      	b.n	d77f8 <_strtod_r+0x7a0>
   d7596:	f014 0f10 	tst.w	r4, #16
   d759a:	bf0c      	ite	eq
   d759c:	2300      	moveq	r3, #0
   d759e:	236a      	movne	r3, #106	; 0x6a
   d75a0:	4e25      	ldr	r6, [pc, #148]	; (d7638 <_strtod_r+0x5e0>)
   d75a2:	9303      	str	r3, [sp, #12]
   d75a4:	4650      	mov	r0, sl
   d75a6:	4659      	mov	r1, fp
   d75a8:	2300      	movs	r3, #0
   d75aa:	2c00      	cmp	r4, #0
   d75ac:	dd09      	ble.n	d75c2 <_strtod_r+0x56a>
   d75ae:	07e2      	lsls	r2, r4, #31
   d75b0:	d504      	bpl.n	d75bc <_strtod_r+0x564>
   d75b2:	e9d6 2300 	ldrd	r2, r3, [r6]
   d75b6:	f7ff f86b 	bl	d6690 <__aeabi_dmul>
   d75ba:	2301      	movs	r3, #1
   d75bc:	1064      	asrs	r4, r4, #1
   d75be:	3608      	adds	r6, #8
   d75c0:	e7f3      	b.n	d75aa <_strtod_r+0x552>
   d75c2:	b10b      	cbz	r3, d75c8 <_strtod_r+0x570>
   d75c4:	4682      	mov	sl, r0
   d75c6:	468b      	mov	fp, r1
   d75c8:	9b03      	ldr	r3, [sp, #12]
   d75ca:	b1eb      	cbz	r3, d7608 <_strtod_r+0x5b0>
   d75cc:	f3cb 530a 	ubfx	r3, fp, #20, #11
   d75d0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   d75d4:	2b00      	cmp	r3, #0
   d75d6:	4659      	mov	r1, fp
   d75d8:	dd16      	ble.n	d7608 <_strtod_r+0x5b0>
   d75da:	2b1f      	cmp	r3, #31
   d75dc:	dd0e      	ble.n	d75fc <_strtod_r+0x5a4>
   d75de:	2b34      	cmp	r3, #52	; 0x34
   d75e0:	bfde      	ittt	le
   d75e2:	3b20      	suble	r3, #32
   d75e4:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
   d75e8:	fa02 f303 	lslle.w	r3, r2, r3
   d75ec:	f04f 0a00 	mov.w	sl, #0
   d75f0:	bfcc      	ite	gt
   d75f2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   d75f6:	ea03 0b01 	andle.w	fp, r3, r1
   d75fa:	e005      	b.n	d7608 <_strtod_r+0x5b0>
   d75fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d7600:	fa02 f303 	lsl.w	r3, r2, r3
   d7604:	ea03 0a0a 	and.w	sl, r3, sl
   d7608:	2200      	movs	r2, #0
   d760a:	2300      	movs	r3, #0
   d760c:	4650      	mov	r0, sl
   d760e:	4659      	mov	r1, fp
   d7610:	f7ff faa6 	bl	d6b60 <__aeabi_dcmpeq>
   d7614:	2800      	cmp	r0, #0
   d7616:	d1b9      	bne.n	d758c <_strtod_r+0x534>
   d7618:	e018      	b.n	d764c <_strtod_r+0x5f4>
   d761a:	bf00      	nop
   d761c:	000d9aa4 	.word	0x000d9aa4
   d7620:	000d9aa7 	.word	0x000d9aa7
   d7624:	000d9aad 	.word	0x000d9aad
   d7628:	000d9a90 	.word	0x000d9a90
   d762c:	000d9b18 	.word	0x000d9b18
   d7630:	000d9be0 	.word	0x000d9be0
   d7634:	7ca00000 	.word	0x7ca00000
   d7638:	000d9ab0 	.word	0x000d9ab0
   d763c:	7ff00000 	.word	0x7ff00000
   d7640:	fff80000 	.word	0xfff80000
   d7644:	7fefffff 	.word	0x7fefffff
   d7648:	2300      	movs	r3, #0
   d764a:	9303      	str	r3, [sp, #12]
   d764c:	9b05      	ldr	r3, [sp, #20]
   d764e:	9300      	str	r3, [sp, #0]
   d7650:	9a04      	ldr	r2, [sp, #16]
   d7652:	9907      	ldr	r1, [sp, #28]
   d7654:	9802      	ldr	r0, [sp, #8]
   d7656:	462b      	mov	r3, r5
   d7658:	f001 fa71 	bl	d8b3e <__s2b>
   d765c:	9005      	str	r0, [sp, #20]
   d765e:	2800      	cmp	r0, #0
   d7660:	f43f af3d 	beq.w	d74de <_strtod_r+0x486>
   d7664:	f1b9 0f00 	cmp.w	r9, #0
   d7668:	f1c9 0300 	rsb	r3, r9, #0
   d766c:	bfa8      	it	ge
   d766e:	2300      	movge	r3, #0
   d7670:	930d      	str	r3, [sp, #52]	; 0x34
   d7672:	2400      	movs	r4, #0
   d7674:	ea29 73e9 	bic.w	r3, r9, r9, asr #31
   d7678:	9312      	str	r3, [sp, #72]	; 0x48
   d767a:	4625      	mov	r5, r4
   d767c:	9b05      	ldr	r3, [sp, #20]
   d767e:	9802      	ldr	r0, [sp, #8]
   d7680:	6859      	ldr	r1, [r3, #4]
   d7682:	f001 f9d5 	bl	d8a30 <_Balloc>
   d7686:	9004      	str	r0, [sp, #16]
   d7688:	2800      	cmp	r0, #0
   d768a:	f43f af2c 	beq.w	d74e6 <_strtod_r+0x48e>
   d768e:	9b05      	ldr	r3, [sp, #20]
   d7690:	691a      	ldr	r2, [r3, #16]
   d7692:	3202      	adds	r2, #2
   d7694:	f103 010c 	add.w	r1, r3, #12
   d7698:	0092      	lsls	r2, r2, #2
   d769a:	300c      	adds	r0, #12
   d769c:	f7ff fc38 	bl	d6f10 <memcpy>
   d76a0:	aa1a      	add	r2, sp, #104	; 0x68
   d76a2:	a919      	add	r1, sp, #100	; 0x64
   d76a4:	ec4b ab10 	vmov	d0, sl, fp
   d76a8:	9802      	ldr	r0, [sp, #8]
   d76aa:	e9cd ab08 	strd	sl, fp, [sp, #32]
   d76ae:	f001 fcfa 	bl	d90a6 <__d2b>
   d76b2:	9018      	str	r0, [sp, #96]	; 0x60
   d76b4:	2800      	cmp	r0, #0
   d76b6:	f43f af16 	beq.w	d74e6 <_strtod_r+0x48e>
   d76ba:	2101      	movs	r1, #1
   d76bc:	9802      	ldr	r0, [sp, #8]
   d76be:	f001 fac9 	bl	d8c54 <__i2b>
   d76c2:	4605      	mov	r5, r0
   d76c4:	2800      	cmp	r0, #0
   d76c6:	f43f af0e 	beq.w	d74e6 <_strtod_r+0x48e>
   d76ca:	9b19      	ldr	r3, [sp, #100]	; 0x64
   d76cc:	9903      	ldr	r1, [sp, #12]
   d76ce:	9e1a      	ldr	r6, [sp, #104]	; 0x68
   d76d0:	2b00      	cmp	r3, #0
   d76d2:	bfad      	iteet	ge
   d76d4:	9a0d      	ldrge	r2, [sp, #52]	; 0x34
   d76d6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   d76d8:	f8dd 8034 	ldrlt.w	r8, [sp, #52]	; 0x34
   d76dc:	eb02 0803 	addge.w	r8, r2, r3
   d76e0:	bfb8      	it	lt
   d76e2:	1ad2      	sublt	r2, r2, r3
   d76e4:	eba3 0301 	sub.w	r3, r3, r1
   d76e8:	4433      	add	r3, r6
   d76ea:	49b5      	ldr	r1, [pc, #724]	; (d79c0 <_strtod_r+0x968>)
   d76ec:	bfa8      	it	ge
   d76ee:	9a12      	ldrge	r2, [sp, #72]	; 0x48
   d76f0:	3b01      	subs	r3, #1
   d76f2:	428b      	cmp	r3, r1
   d76f4:	f1c6 0636 	rsb	r6, r6, #54	; 0x36
   d76f8:	f280 808a 	bge.w	d7810 <_strtod_r+0x7b8>
   d76fc:	1ac9      	subs	r1, r1, r3
   d76fe:	291f      	cmp	r1, #31
   d7700:	bfc8      	it	gt
   d7702:	4fb0      	ldrgt	r7, [pc, #704]	; (d79c4 <_strtod_r+0x96c>)
   d7704:	f04f 0901 	mov.w	r9, #1
   d7708:	bfd4      	ite	le
   d770a:	fa09 f301 	lslle.w	r3, r9, r1
   d770e:	1aff      	subgt	r7, r7, r3
   d7710:	eba6 0601 	sub.w	r6, r6, r1
   d7714:	bfd9      	ittee	le
   d7716:	9306      	strle	r3, [sp, #24]
   d7718:	2700      	movle	r7, #0
   d771a:	fa09 f707 	lslgt.w	r7, r9, r7
   d771e:	f8cd 9018 	strgt.w	r9, [sp, #24]
   d7722:	eb08 0906 	add.w	r9, r8, r6
   d7726:	9b03      	ldr	r3, [sp, #12]
   d7728:	45c8      	cmp	r8, r9
   d772a:	4416      	add	r6, r2
   d772c:	441e      	add	r6, r3
   d772e:	4643      	mov	r3, r8
   d7730:	bfa8      	it	ge
   d7732:	464b      	movge	r3, r9
   d7734:	42b3      	cmp	r3, r6
   d7736:	bfa8      	it	ge
   d7738:	4633      	movge	r3, r6
   d773a:	2b00      	cmp	r3, #0
   d773c:	bfc2      	ittt	gt
   d773e:	ebc3 0909 	rsbgt	r9, r3, r9
   d7742:	1af6      	subgt	r6, r6, r3
   d7744:	ebc3 0808 	rsbgt	r8, r3, r8
   d7748:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   d774a:	2b00      	cmp	r3, #0
   d774c:	d164      	bne.n	d7818 <_strtod_r+0x7c0>
   d774e:	f1b9 0f00 	cmp.w	r9, #0
   d7752:	dc7a      	bgt.n	d784a <_strtod_r+0x7f2>
   d7754:	9b12      	ldr	r3, [sp, #72]	; 0x48
   d7756:	2b00      	cmp	r3, #0
   d7758:	f040 8081 	bne.w	d785e <_strtod_r+0x806>
   d775c:	2e00      	cmp	r6, #0
   d775e:	f300 8088 	bgt.w	d7872 <_strtod_r+0x81a>
   d7762:	f1b8 0f00 	cmp.w	r8, #0
   d7766:	f300 808e 	bgt.w	d7886 <_strtod_r+0x82e>
   d776a:	9a04      	ldr	r2, [sp, #16]
   d776c:	9918      	ldr	r1, [sp, #96]	; 0x60
   d776e:	9802      	ldr	r0, [sp, #8]
   d7770:	f001 fbc5 	bl	d8efe <__mdiff>
   d7774:	4604      	mov	r4, r0
   d7776:	2800      	cmp	r0, #0
   d7778:	f43f aeb5 	beq.w	d74e6 <_strtod_r+0x48e>
   d777c:	68c3      	ldr	r3, [r0, #12]
   d777e:	9307      	str	r3, [sp, #28]
   d7780:	2300      	movs	r3, #0
   d7782:	60c3      	str	r3, [r0, #12]
   d7784:	4629      	mov	r1, r5
   d7786:	f001 fb9e 	bl	d8ec6 <__mcmp>
   d778a:	2800      	cmp	r0, #0
   d778c:	f280 8089 	bge.w	d78a2 <_strtod_r+0x84a>
   d7790:	9b07      	ldr	r3, [sp, #28]
   d7792:	2b00      	cmp	r3, #0
   d7794:	f040 8204 	bne.w	d7ba0 <_strtod_r+0xb48>
   d7798:	f1ba 0f00 	cmp.w	sl, #0
   d779c:	f040 8200 	bne.w	d7ba0 <_strtod_r+0xb48>
   d77a0:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d77a4:	2b00      	cmp	r3, #0
   d77a6:	f040 81fb 	bne.w	d7ba0 <_strtod_r+0xb48>
   d77aa:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   d77ae:	0d1b      	lsrs	r3, r3, #20
   d77b0:	051b      	lsls	r3, r3, #20
   d77b2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   d77b6:	f240 81f3 	bls.w	d7ba0 <_strtod_r+0xb48>
   d77ba:	6963      	ldr	r3, [r4, #20]
   d77bc:	2b00      	cmp	r3, #0
   d77be:	d06c      	beq.n	d789a <_strtod_r+0x842>
   d77c0:	4621      	mov	r1, r4
   d77c2:	2201      	movs	r2, #1
   d77c4:	9802      	ldr	r0, [sp, #8]
   d77c6:	f001 fb2d 	bl	d8e24 <__lshift>
   d77ca:	4629      	mov	r1, r5
   d77cc:	4604      	mov	r4, r0
   d77ce:	f001 fb7a 	bl	d8ec6 <__mcmp>
   d77d2:	2800      	cmp	r0, #0
   d77d4:	f340 81e4 	ble.w	d7ba0 <_strtod_r+0xb48>
   d77d8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   d77dc:	9a03      	ldr	r2, [sp, #12]
   d77de:	0d1b      	lsrs	r3, r3, #20
   d77e0:	051b      	lsls	r3, r3, #20
   d77e2:	2a00      	cmp	r2, #0
   d77e4:	f000 808c 	beq.w	d7900 <_strtod_r+0x8a8>
   d77e8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   d77ec:	f300 8088 	bgt.w	d7900 <_strtod_r+0x8a8>
   d77f0:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
   d77f4:	f300 81d6 	bgt.w	d7ba4 <_strtod_r+0xb4c>
   d77f8:	9a02      	ldr	r2, [sp, #8]
   d77fa:	2322      	movs	r3, #34	; 0x22
   d77fc:	f04f 0a00 	mov.w	sl, #0
   d7800:	f04f 0b00 	mov.w	fp, #0
   d7804:	6013      	str	r3, [r2, #0]
   d7806:	9b05      	ldr	r3, [sp, #20]
   d7808:	2b00      	cmp	r3, #0
   d780a:	f040 81dc 	bne.w	d7bc6 <_strtod_r+0xb6e>
   d780e:	e1ee      	b.n	d7bee <_strtod_r+0xb96>
   d7810:	2301      	movs	r3, #1
   d7812:	2700      	movs	r7, #0
   d7814:	9306      	str	r3, [sp, #24]
   d7816:	e784      	b.n	d7722 <_strtod_r+0x6ca>
   d7818:	4629      	mov	r1, r5
   d781a:	461a      	mov	r2, r3
   d781c:	9802      	ldr	r0, [sp, #8]
   d781e:	f001 fab3 	bl	d8d88 <__pow5mult>
   d7822:	4605      	mov	r5, r0
   d7824:	2800      	cmp	r0, #0
   d7826:	f43f ae5e 	beq.w	d74e6 <_strtod_r+0x48e>
   d782a:	4601      	mov	r1, r0
   d782c:	9a18      	ldr	r2, [sp, #96]	; 0x60
   d782e:	9802      	ldr	r0, [sp, #8]
   d7830:	f001 fa19 	bl	d8c66 <__multiply>
   d7834:	9007      	str	r0, [sp, #28]
   d7836:	2800      	cmp	r0, #0
   d7838:	f43f ae55 	beq.w	d74e6 <_strtod_r+0x48e>
   d783c:	9918      	ldr	r1, [sp, #96]	; 0x60
   d783e:	9802      	ldr	r0, [sp, #8]
   d7840:	f001 f92b 	bl	d8a9a <_Bfree>
   d7844:	9b07      	ldr	r3, [sp, #28]
   d7846:	9318      	str	r3, [sp, #96]	; 0x60
   d7848:	e781      	b.n	d774e <_strtod_r+0x6f6>
   d784a:	464a      	mov	r2, r9
   d784c:	9918      	ldr	r1, [sp, #96]	; 0x60
   d784e:	9802      	ldr	r0, [sp, #8]
   d7850:	f001 fae8 	bl	d8e24 <__lshift>
   d7854:	9018      	str	r0, [sp, #96]	; 0x60
   d7856:	2800      	cmp	r0, #0
   d7858:	f47f af7c 	bne.w	d7754 <_strtod_r+0x6fc>
   d785c:	e643      	b.n	d74e6 <_strtod_r+0x48e>
   d785e:	9a12      	ldr	r2, [sp, #72]	; 0x48
   d7860:	9904      	ldr	r1, [sp, #16]
   d7862:	9802      	ldr	r0, [sp, #8]
   d7864:	f001 fa90 	bl	d8d88 <__pow5mult>
   d7868:	9004      	str	r0, [sp, #16]
   d786a:	2800      	cmp	r0, #0
   d786c:	f47f af76 	bne.w	d775c <_strtod_r+0x704>
   d7870:	e639      	b.n	d74e6 <_strtod_r+0x48e>
   d7872:	4632      	mov	r2, r6
   d7874:	9904      	ldr	r1, [sp, #16]
   d7876:	9802      	ldr	r0, [sp, #8]
   d7878:	f001 fad4 	bl	d8e24 <__lshift>
   d787c:	9004      	str	r0, [sp, #16]
   d787e:	2800      	cmp	r0, #0
   d7880:	f47f af6f 	bne.w	d7762 <_strtod_r+0x70a>
   d7884:	e62f      	b.n	d74e6 <_strtod_r+0x48e>
   d7886:	4629      	mov	r1, r5
   d7888:	4642      	mov	r2, r8
   d788a:	9802      	ldr	r0, [sp, #8]
   d788c:	f001 faca 	bl	d8e24 <__lshift>
   d7890:	4605      	mov	r5, r0
   d7892:	2800      	cmp	r0, #0
   d7894:	f47f af69 	bne.w	d776a <_strtod_r+0x712>
   d7898:	e625      	b.n	d74e6 <_strtod_r+0x48e>
   d789a:	6923      	ldr	r3, [r4, #16]
   d789c:	2b01      	cmp	r3, #1
   d789e:	dc8f      	bgt.n	d77c0 <_strtod_r+0x768>
   d78a0:	e17e      	b.n	d7ba0 <_strtod_r+0xb48>
   d78a2:	d161      	bne.n	d7968 <_strtod_r+0x910>
   d78a4:	9a07      	ldr	r2, [sp, #28]
   d78a6:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d78aa:	b322      	cbz	r2, d78f6 <_strtod_r+0x89e>
   d78ac:	4946      	ldr	r1, [pc, #280]	; (d79c8 <_strtod_r+0x970>)
   d78ae:	428b      	cmp	r3, r1
   d78b0:	465a      	mov	r2, fp
   d78b2:	d12e      	bne.n	d7912 <_strtod_r+0x8ba>
   d78b4:	9b03      	ldr	r3, [sp, #12]
   d78b6:	4651      	mov	r1, sl
   d78b8:	b163      	cbz	r3, d78d4 <_strtod_r+0x87c>
   d78ba:	4b44      	ldr	r3, [pc, #272]	; (d79cc <_strtod_r+0x974>)
   d78bc:	4013      	ands	r3, r2
   d78be:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   d78c2:	d807      	bhi.n	d78d4 <_strtod_r+0x87c>
   d78c4:	0d1b      	lsrs	r3, r3, #20
   d78c6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   d78ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d78ce:	fa00 f303 	lsl.w	r3, r0, r3
   d78d2:	e001      	b.n	d78d8 <_strtod_r+0x880>
   d78d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d78d8:	428b      	cmp	r3, r1
   d78da:	d11a      	bne.n	d7912 <_strtod_r+0x8ba>
   d78dc:	493c      	ldr	r1, [pc, #240]	; (d79d0 <_strtod_r+0x978>)
   d78de:	428a      	cmp	r2, r1
   d78e0:	d102      	bne.n	d78e8 <_strtod_r+0x890>
   d78e2:	3301      	adds	r3, #1
   d78e4:	f43f adff 	beq.w	d74e6 <_strtod_r+0x48e>
   d78e8:	4b38      	ldr	r3, [pc, #224]	; (d79cc <_strtod_r+0x974>)
   d78ea:	4013      	ands	r3, r2
   d78ec:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   d78f0:	f04f 0a00 	mov.w	sl, #0
   d78f4:	e154      	b.n	d7ba0 <_strtod_r+0xb48>
   d78f6:	b963      	cbnz	r3, d7912 <_strtod_r+0x8ba>
   d78f8:	f1ba 0f00 	cmp.w	sl, #0
   d78fc:	d109      	bne.n	d7912 <_strtod_r+0x8ba>
   d78fe:	e76b      	b.n	d77d8 <_strtod_r+0x780>
   d7900:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   d7904:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   d7908:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   d790c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   d7910:	e146      	b.n	d7ba0 <_strtod_r+0xb48>
   d7912:	b117      	cbz	r7, d791a <_strtod_r+0x8c2>
   d7914:	ea17 0f0b 	tst.w	r7, fp
   d7918:	e002      	b.n	d7920 <_strtod_r+0x8c8>
   d791a:	9b06      	ldr	r3, [sp, #24]
   d791c:	ea13 0f0a 	tst.w	r3, sl
   d7920:	f000 813e 	beq.w	d7ba0 <_strtod_r+0xb48>
   d7924:	9b07      	ldr	r3, [sp, #28]
   d7926:	9a03      	ldr	r2, [sp, #12]
   d7928:	4650      	mov	r0, sl
   d792a:	4659      	mov	r1, fp
   d792c:	b153      	cbz	r3, d7944 <_strtod_r+0x8ec>
   d792e:	f7ff fb75 	bl	d701c <sulp>
   d7932:	4602      	mov	r2, r0
   d7934:	460b      	mov	r3, r1
   d7936:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   d793a:	f7fe fcf7 	bl	d632c <__adddf3>
   d793e:	4682      	mov	sl, r0
   d7940:	468b      	mov	fp, r1
   d7942:	e12d      	b.n	d7ba0 <_strtod_r+0xb48>
   d7944:	f7ff fb6a 	bl	d701c <sulp>
   d7948:	4602      	mov	r2, r0
   d794a:	460b      	mov	r3, r1
   d794c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   d7950:	f7fe fcea 	bl	d6328 <__aeabi_dsub>
   d7954:	2200      	movs	r2, #0
   d7956:	2300      	movs	r3, #0
   d7958:	4682      	mov	sl, r0
   d795a:	468b      	mov	fp, r1
   d795c:	f7ff f900 	bl	d6b60 <__aeabi_dcmpeq>
   d7960:	2800      	cmp	r0, #0
   d7962:	f47f af49 	bne.w	d77f8 <_strtod_r+0x7a0>
   d7966:	e11b      	b.n	d7ba0 <_strtod_r+0xb48>
   d7968:	4629      	mov	r1, r5
   d796a:	4620      	mov	r0, r4
   d796c:	f001 fbe9 	bl	d9142 <__ratio>
   d7970:	ec57 6b10 	vmov	r6, r7, d0
   d7974:	2200      	movs	r2, #0
   d7976:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   d797a:	ee10 0a10 	vmov	r0, s0
   d797e:	4639      	mov	r1, r7
   d7980:	f7ff f902 	bl	d6b88 <__aeabi_dcmple>
   d7984:	2800      	cmp	r0, #0
   d7986:	d042      	beq.n	d7a0e <_strtod_r+0x9b6>
   d7988:	9b07      	ldr	r3, [sp, #28]
   d798a:	b123      	cbz	r3, d7996 <_strtod_r+0x93e>
   d798c:	f04f 0800 	mov.w	r8, #0
   d7990:	f8df 9040 	ldr.w	r9, [pc, #64]	; d79d4 <_strtod_r+0x97c>
   d7994:	e011      	b.n	d79ba <_strtod_r+0x962>
   d7996:	f1ba 0f00 	cmp.w	sl, #0
   d799a:	d103      	bne.n	d79a4 <_strtod_r+0x94c>
   d799c:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d79a0:	b93b      	cbnz	r3, d79b2 <_strtod_r+0x95a>
   d79a2:	e01b      	b.n	d79dc <_strtod_r+0x984>
   d79a4:	f1ba 0f01 	cmp.w	sl, #1
   d79a8:	d103      	bne.n	d79b2 <_strtod_r+0x95a>
   d79aa:	f1bb 0f00 	cmp.w	fp, #0
   d79ae:	f43f af23 	beq.w	d77f8 <_strtod_r+0x7a0>
   d79b2:	f8df 9024 	ldr.w	r9, [pc, #36]	; d79d8 <_strtod_r+0x980>
   d79b6:	f04f 0800 	mov.w	r8, #0
   d79ba:	2600      	movs	r6, #0
   d79bc:	4f05      	ldr	r7, [pc, #20]	; (d79d4 <_strtod_r+0x97c>)
   d79be:	e039      	b.n	d7a34 <_strtod_r+0x9dc>
   d79c0:	fffffc02 	.word	0xfffffc02
   d79c4:	fffffbe2 	.word	0xfffffbe2
   d79c8:	000fffff 	.word	0x000fffff
   d79cc:	7ff00000 	.word	0x7ff00000
   d79d0:	7fefffff 	.word	0x7fefffff
   d79d4:	3ff00000 	.word	0x3ff00000
   d79d8:	bff00000 	.word	0xbff00000
   d79dc:	2200      	movs	r2, #0
   d79de:	4b98      	ldr	r3, [pc, #608]	; (d7c40 <_strtod_r+0xbe8>)
   d79e0:	4630      	mov	r0, r6
   d79e2:	4639      	mov	r1, r7
   d79e4:	f7ff f8c6 	bl	d6b74 <__aeabi_dcmplt>
   d79e8:	b940      	cbnz	r0, d79fc <_strtod_r+0x9a4>
   d79ea:	4630      	mov	r0, r6
   d79ec:	4639      	mov	r1, r7
   d79ee:	2200      	movs	r2, #0
   d79f0:	4b94      	ldr	r3, [pc, #592]	; (d7c44 <_strtod_r+0xbec>)
   d79f2:	f7fe fe4d 	bl	d6690 <__aeabi_dmul>
   d79f6:	4606      	mov	r6, r0
   d79f8:	460f      	mov	r7, r1
   d79fa:	e001      	b.n	d7a00 <_strtod_r+0x9a8>
   d79fc:	4f91      	ldr	r7, [pc, #580]	; (d7c44 <_strtod_r+0xbec>)
   d79fe:	2600      	movs	r6, #0
   d7a00:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   d7a04:	9614      	str	r6, [sp, #80]	; 0x50
   d7a06:	9315      	str	r3, [sp, #84]	; 0x54
   d7a08:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
   d7a0c:	e012      	b.n	d7a34 <_strtod_r+0x9dc>
   d7a0e:	4b8d      	ldr	r3, [pc, #564]	; (d7c44 <_strtod_r+0xbec>)
   d7a10:	4630      	mov	r0, r6
   d7a12:	4639      	mov	r1, r7
   d7a14:	2200      	movs	r2, #0
   d7a16:	f7fe fe3b 	bl	d6690 <__aeabi_dmul>
   d7a1a:	9b07      	ldr	r3, [sp, #28]
   d7a1c:	4606      	mov	r6, r0
   d7a1e:	460f      	mov	r7, r1
   d7a20:	b923      	cbnz	r3, d7a2c <_strtod_r+0x9d4>
   d7a22:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d7a26:	900e      	str	r0, [sp, #56]	; 0x38
   d7a28:	930f      	str	r3, [sp, #60]	; 0x3c
   d7a2a:	e001      	b.n	d7a30 <_strtod_r+0x9d8>
   d7a2c:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
   d7a30:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
   d7a34:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   d7a38:	0d1b      	lsrs	r3, r3, #20
   d7a3a:	051b      	lsls	r3, r3, #20
   d7a3c:	9306      	str	r3, [sp, #24]
   d7a3e:	9a06      	ldr	r2, [sp, #24]
   d7a40:	4b81      	ldr	r3, [pc, #516]	; (d7c48 <_strtod_r+0xbf0>)
   d7a42:	429a      	cmp	r2, r3
   d7a44:	d12b      	bne.n	d7a9e <_strtod_r+0xa46>
   d7a46:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   d7a4a:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   d7a4e:	ec4b ab10 	vmov	d0, sl, fp
   d7a52:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
   d7a56:	f001 fab1 	bl	d8fbc <__ulp>
   d7a5a:	4640      	mov	r0, r8
   d7a5c:	ec53 2b10 	vmov	r2, r3, d0
   d7a60:	4649      	mov	r1, r9
   d7a62:	f7fe fe15 	bl	d6690 <__aeabi_dmul>
   d7a66:	4652      	mov	r2, sl
   d7a68:	465b      	mov	r3, fp
   d7a6a:	f7fe fc5f 	bl	d632c <__adddf3>
   d7a6e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   d7a72:	0d1b      	lsrs	r3, r3, #20
   d7a74:	4a75      	ldr	r2, [pc, #468]	; (d7c4c <_strtod_r+0xbf4>)
   d7a76:	051b      	lsls	r3, r3, #20
   d7a78:	4293      	cmp	r3, r2
   d7a7a:	4682      	mov	sl, r0
   d7a7c:	d90c      	bls.n	d7a98 <_strtod_r+0xa40>
   d7a7e:	4b74      	ldr	r3, [pc, #464]	; (d7c50 <_strtod_r+0xbf8>)
   d7a80:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   d7a82:	429a      	cmp	r2, r3
   d7a84:	d103      	bne.n	d7a8e <_strtod_r+0xa36>
   d7a86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d7a88:	3301      	adds	r3, #1
   d7a8a:	f43f ad2c 	beq.w	d74e6 <_strtod_r+0x48e>
   d7a8e:	f8df b1c0 	ldr.w	fp, [pc, #448]	; d7c50 <_strtod_r+0xbf8>
   d7a92:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   d7a96:	e072      	b.n	d7b7e <_strtod_r+0xb26>
   d7a98:	f101 7b54 	add.w	fp, r1, #55574528	; 0x3500000
   d7a9c:	e038      	b.n	d7b10 <_strtod_r+0xab8>
   d7a9e:	9b03      	ldr	r3, [sp, #12]
   d7aa0:	b333      	cbz	r3, d7af0 <_strtod_r+0xa98>
   d7aa2:	9b06      	ldr	r3, [sp, #24]
   d7aa4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   d7aa8:	d822      	bhi.n	d7af0 <_strtod_r+0xa98>
   d7aaa:	a35d      	add	r3, pc, #372	; (adr r3, d7c20 <_strtod_r+0xbc8>)
   d7aac:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7ab0:	4630      	mov	r0, r6
   d7ab2:	4639      	mov	r1, r7
   d7ab4:	f7ff f868 	bl	d6b88 <__aeabi_dcmple>
   d7ab8:	b1a8      	cbz	r0, d7ae6 <_strtod_r+0xa8e>
   d7aba:	4639      	mov	r1, r7
   d7abc:	4630      	mov	r0, r6
   d7abe:	f7ff f8a9 	bl	d6c14 <__aeabi_d2uiz>
   d7ac2:	2800      	cmp	r0, #0
   d7ac4:	bf08      	it	eq
   d7ac6:	2001      	moveq	r0, #1
   d7ac8:	f7fe fd6c 	bl	d65a4 <__aeabi_ui2d>
   d7acc:	9b07      	ldr	r3, [sp, #28]
   d7ace:	4606      	mov	r6, r0
   d7ad0:	460f      	mov	r7, r1
   d7ad2:	b923      	cbnz	r3, d7ade <_strtod_r+0xa86>
   d7ad4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d7ad8:	9010      	str	r0, [sp, #64]	; 0x40
   d7ada:	9311      	str	r3, [sp, #68]	; 0x44
   d7adc:	e001      	b.n	d7ae2 <_strtod_r+0xa8a>
   d7ade:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
   d7ae2:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
   d7ae6:	9a06      	ldr	r2, [sp, #24]
   d7ae8:	f109 63d6 	add.w	r3, r9, #112197632	; 0x6b00000
   d7aec:	ebc2 0903 	rsb	r9, r2, r3
   d7af0:	ed9d 0b08 	vldr	d0, [sp, #32]
   d7af4:	f001 fa62 	bl	d8fbc <__ulp>
   d7af8:	4640      	mov	r0, r8
   d7afa:	ec53 2b10 	vmov	r2, r3, d0
   d7afe:	4649      	mov	r1, r9
   d7b00:	f7fe fdc6 	bl	d6690 <__aeabi_dmul>
   d7b04:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   d7b08:	f7fe fc10 	bl	d632c <__adddf3>
   d7b0c:	4682      	mov	sl, r0
   d7b0e:	468b      	mov	fp, r1
   d7b10:	9b03      	ldr	r3, [sp, #12]
   d7b12:	bba3      	cbnz	r3, d7b7e <_strtod_r+0xb26>
   d7b14:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   d7b18:	0d1b      	lsrs	r3, r3, #20
   d7b1a:	9a06      	ldr	r2, [sp, #24]
   d7b1c:	051b      	lsls	r3, r3, #20
   d7b1e:	429a      	cmp	r2, r3
   d7b20:	46d8      	mov	r8, fp
   d7b22:	d12c      	bne.n	d7b7e <_strtod_r+0xb26>
   d7b24:	4639      	mov	r1, r7
   d7b26:	4630      	mov	r0, r6
   d7b28:	f7ff f84c 	bl	d6bc4 <__aeabi_d2iz>
   d7b2c:	f7fe fd4a 	bl	d65c4 <__aeabi_i2d>
   d7b30:	460b      	mov	r3, r1
   d7b32:	4602      	mov	r2, r0
   d7b34:	4639      	mov	r1, r7
   d7b36:	4630      	mov	r0, r6
   d7b38:	f7fe fbf6 	bl	d6328 <__aeabi_dsub>
   d7b3c:	9b07      	ldr	r3, [sp, #28]
   d7b3e:	4606      	mov	r6, r0
   d7b40:	460f      	mov	r7, r1
   d7b42:	b92b      	cbnz	r3, d7b50 <_strtod_r+0xaf8>
   d7b44:	f1ba 0f00 	cmp.w	sl, #0
   d7b48:	d102      	bne.n	d7b50 <_strtod_r+0xaf8>
   d7b4a:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d7b4e:	b183      	cbz	r3, d7b72 <_strtod_r+0xb1a>
   d7b50:	a335      	add	r3, pc, #212	; (adr r3, d7c28 <_strtod_r+0xbd0>)
   d7b52:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7b56:	4630      	mov	r0, r6
   d7b58:	4639      	mov	r1, r7
   d7b5a:	f7ff f80b 	bl	d6b74 <__aeabi_dcmplt>
   d7b5e:	2800      	cmp	r0, #0
   d7b60:	d131      	bne.n	d7bc6 <_strtod_r+0xb6e>
   d7b62:	a333      	add	r3, pc, #204	; (adr r3, d7c30 <_strtod_r+0xbd8>)
   d7b64:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7b68:	4630      	mov	r0, r6
   d7b6a:	4639      	mov	r1, r7
   d7b6c:	f7ff f820 	bl	d6bb0 <__aeabi_dcmpgt>
   d7b70:	e004      	b.n	d7b7c <_strtod_r+0xb24>
   d7b72:	a331      	add	r3, pc, #196	; (adr r3, d7c38 <_strtod_r+0xbe0>)
   d7b74:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7b78:	f7fe fffc 	bl	d6b74 <__aeabi_dcmplt>
   d7b7c:	bb18      	cbnz	r0, d7bc6 <_strtod_r+0xb6e>
   d7b7e:	9918      	ldr	r1, [sp, #96]	; 0x60
   d7b80:	9802      	ldr	r0, [sp, #8]
   d7b82:	f000 ff8a 	bl	d8a9a <_Bfree>
   d7b86:	9904      	ldr	r1, [sp, #16]
   d7b88:	9802      	ldr	r0, [sp, #8]
   d7b8a:	f000 ff86 	bl	d8a9a <_Bfree>
   d7b8e:	4629      	mov	r1, r5
   d7b90:	9802      	ldr	r0, [sp, #8]
   d7b92:	f000 ff82 	bl	d8a9a <_Bfree>
   d7b96:	4621      	mov	r1, r4
   d7b98:	9802      	ldr	r0, [sp, #8]
   d7b9a:	f000 ff7e 	bl	d8a9a <_Bfree>
   d7b9e:	e56d      	b.n	d767c <_strtod_r+0x624>
   d7ba0:	9b03      	ldr	r3, [sp, #12]
   d7ba2:	b183      	cbz	r3, d7bc6 <_strtod_r+0xb6e>
   d7ba4:	4b2b      	ldr	r3, [pc, #172]	; (d7c54 <_strtod_r+0xbfc>)
   d7ba6:	930b      	str	r3, [sp, #44]	; 0x2c
   d7ba8:	2300      	movs	r3, #0
   d7baa:	930a      	str	r3, [sp, #40]	; 0x28
   d7bac:	4650      	mov	r0, sl
   d7bae:	4659      	mov	r1, fp
   d7bb0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   d7bb4:	f7fe fd6c 	bl	d6690 <__aeabi_dmul>
   d7bb8:	4682      	mov	sl, r0
   d7bba:	468b      	mov	fp, r1
   d7bbc:	b919      	cbnz	r1, d7bc6 <_strtod_r+0xb6e>
   d7bbe:	b910      	cbnz	r0, d7bc6 <_strtod_r+0xb6e>
   d7bc0:	9a02      	ldr	r2, [sp, #8]
   d7bc2:	2322      	movs	r3, #34	; 0x22
   d7bc4:	6013      	str	r3, [r2, #0]
   d7bc6:	9918      	ldr	r1, [sp, #96]	; 0x60
   d7bc8:	9802      	ldr	r0, [sp, #8]
   d7bca:	f000 ff66 	bl	d8a9a <_Bfree>
   d7bce:	9904      	ldr	r1, [sp, #16]
   d7bd0:	9802      	ldr	r0, [sp, #8]
   d7bd2:	f000 ff62 	bl	d8a9a <_Bfree>
   d7bd6:	4629      	mov	r1, r5
   d7bd8:	9802      	ldr	r0, [sp, #8]
   d7bda:	f000 ff5e 	bl	d8a9a <_Bfree>
   d7bde:	9905      	ldr	r1, [sp, #20]
   d7be0:	9802      	ldr	r0, [sp, #8]
   d7be2:	f000 ff5a 	bl	d8a9a <_Bfree>
   d7be6:	4621      	mov	r1, r4
   d7be8:	9802      	ldr	r0, [sp, #8]
   d7bea:	f000 ff56 	bl	d8a9a <_Bfree>
   d7bee:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   d7bf0:	b113      	cbz	r3, d7bf8 <_strtod_r+0xba0>
   d7bf2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   d7bf4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d7bf6:	6013      	str	r3, [r2, #0]
   d7bf8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d7bfa:	b11b      	cbz	r3, d7c04 <_strtod_r+0xbac>
   d7bfc:	4652      	mov	r2, sl
   d7bfe:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   d7c02:	e007      	b.n	d7c14 <_strtod_r+0xbbc>
   d7c04:	4652      	mov	r2, sl
   d7c06:	465b      	mov	r3, fp
   d7c08:	e004      	b.n	d7c14 <_strtod_r+0xbbc>
   d7c0a:	2500      	movs	r5, #0
   d7c0c:	462a      	mov	r2, r5
   d7c0e:	2101      	movs	r1, #1
   d7c10:	f7ff bb41 	b.w	d7296 <_strtod_r+0x23e>
   d7c14:	ec43 2b10 	vmov	d0, r2, r3
   d7c18:	b01d      	add	sp, #116	; 0x74
   d7c1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7c1e:	bf00      	nop
   d7c20:	ffc00000 	.word	0xffc00000
   d7c24:	41dfffff 	.word	0x41dfffff
   d7c28:	94a03595 	.word	0x94a03595
   d7c2c:	3fdfffff 	.word	0x3fdfffff
   d7c30:	35afe535 	.word	0x35afe535
   d7c34:	3fe00000 	.word	0x3fe00000
   d7c38:	94a03595 	.word	0x94a03595
   d7c3c:	3fcfffff 	.word	0x3fcfffff
   d7c40:	3ff00000 	.word	0x3ff00000
   d7c44:	3fe00000 	.word	0x3fe00000
   d7c48:	7fe00000 	.word	0x7fe00000
   d7c4c:	7c9fffff 	.word	0x7c9fffff
   d7c50:	7fefffff 	.word	0x7fefffff
   d7c54:	39500000 	.word	0x39500000

000d7c58 <strtod>:
   d7c58:	4b02      	ldr	r3, [pc, #8]	; (d7c64 <strtod+0xc>)
   d7c5a:	460a      	mov	r2, r1
   d7c5c:	4601      	mov	r1, r0
   d7c5e:	6818      	ldr	r0, [r3, #0]
   d7c60:	f7ff b9fa 	b.w	d7058 <_strtod_r>
   d7c64:	2003e19c 	.word	0x2003e19c

000d7c68 <__strtok_r>:
   d7c68:	b5f0      	push	{r4, r5, r6, r7, lr}
   d7c6a:	b948      	cbnz	r0, d7c80 <__strtok_r+0x18>
   d7c6c:	6810      	ldr	r0, [r2, #0]
   d7c6e:	b938      	cbnz	r0, d7c80 <__strtok_r+0x18>
   d7c70:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7c72:	f817 6b01 	ldrb.w	r6, [r7], #1
   d7c76:	b15e      	cbz	r6, d7c90 <__strtok_r+0x28>
   d7c78:	42b5      	cmp	r5, r6
   d7c7a:	d1fa      	bne.n	d7c72 <__strtok_r+0xa>
   d7c7c:	b12b      	cbz	r3, d7c8a <__strtok_r+0x22>
   d7c7e:	4620      	mov	r0, r4
   d7c80:	4604      	mov	r4, r0
   d7c82:	460f      	mov	r7, r1
   d7c84:	f814 5b01 	ldrb.w	r5, [r4], #1
   d7c88:	e7f3      	b.n	d7c72 <__strtok_r+0xa>
   d7c8a:	6014      	str	r4, [r2, #0]
   d7c8c:	7003      	strb	r3, [r0, #0]
   d7c8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7c90:	b94d      	cbnz	r5, d7ca6 <__strtok_r+0x3e>
   d7c92:	6015      	str	r5, [r2, #0]
   d7c94:	4628      	mov	r0, r5
   d7c96:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7c98:	f817 6b01 	ldrb.w	r6, [r7], #1
   d7c9c:	42b5      	cmp	r5, r6
   d7c9e:	d007      	beq.n	d7cb0 <__strtok_r+0x48>
   d7ca0:	2e00      	cmp	r6, #0
   d7ca2:	d1f9      	bne.n	d7c98 <__strtok_r+0x30>
   d7ca4:	461c      	mov	r4, r3
   d7ca6:	4623      	mov	r3, r4
   d7ca8:	460f      	mov	r7, r1
   d7caa:	f813 5b01 	ldrb.w	r5, [r3], #1
   d7cae:	e7f3      	b.n	d7c98 <__strtok_r+0x30>
   d7cb0:	b115      	cbz	r5, d7cb8 <__strtok_r+0x50>
   d7cb2:	2100      	movs	r1, #0
   d7cb4:	7021      	strb	r1, [r4, #0]
   d7cb6:	e000      	b.n	d7cba <__strtok_r+0x52>
   d7cb8:	462b      	mov	r3, r5
   d7cba:	6013      	str	r3, [r2, #0]
   d7cbc:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d7cbe <strtok_r>:
   d7cbe:	2301      	movs	r3, #1
   d7cc0:	f7ff bfd2 	b.w	d7c68 <__strtok_r>

000d7cc4 <_strtoul_r>:
   d7cc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d7cc8:	4680      	mov	r8, r0
   d7cca:	483c      	ldr	r0, [pc, #240]	; (d7dbc <_strtoul_r+0xf8>)
   d7ccc:	f8d0 9000 	ldr.w	r9, [r0]
   d7cd0:	460e      	mov	r6, r1
   d7cd2:	4635      	mov	r5, r6
   d7cd4:	f815 4b01 	ldrb.w	r4, [r5], #1
   d7cd8:	eb09 0004 	add.w	r0, r9, r4
   d7cdc:	7840      	ldrb	r0, [r0, #1]
   d7cde:	f000 0008 	and.w	r0, r0, #8
   d7ce2:	f000 07ff 	and.w	r7, r0, #255	; 0xff
   d7ce6:	b108      	cbz	r0, d7cec <_strtoul_r+0x28>
   d7ce8:	462e      	mov	r6, r5
   d7cea:	e7f2      	b.n	d7cd2 <_strtoul_r+0xe>
   d7cec:	2c2d      	cmp	r4, #45	; 0x2d
   d7cee:	d103      	bne.n	d7cf8 <_strtoul_r+0x34>
   d7cf0:	1cb5      	adds	r5, r6, #2
   d7cf2:	7874      	ldrb	r4, [r6, #1]
   d7cf4:	2701      	movs	r7, #1
   d7cf6:	e003      	b.n	d7d00 <_strtoul_r+0x3c>
   d7cf8:	2c2b      	cmp	r4, #43	; 0x2b
   d7cfa:	bf04      	itt	eq
   d7cfc:	7874      	ldrbeq	r4, [r6, #1]
   d7cfe:	1cb5      	addeq	r5, r6, #2
   d7d00:	b113      	cbz	r3, d7d08 <_strtoul_r+0x44>
   d7d02:	2b10      	cmp	r3, #16
   d7d04:	d10a      	bne.n	d7d1c <_strtoul_r+0x58>
   d7d06:	e053      	b.n	d7db0 <_strtoul_r+0xec>
   d7d08:	2c30      	cmp	r4, #48	; 0x30
   d7d0a:	d14f      	bne.n	d7dac <_strtoul_r+0xe8>
   d7d0c:	7828      	ldrb	r0, [r5, #0]
   d7d0e:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d7d12:	2858      	cmp	r0, #88	; 0x58
   d7d14:	d145      	bne.n	d7da2 <_strtoul_r+0xde>
   d7d16:	786c      	ldrb	r4, [r5, #1]
   d7d18:	2310      	movs	r3, #16
   d7d1a:	3502      	adds	r5, #2
   d7d1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   d7d20:	2600      	movs	r6, #0
   d7d22:	fbbc fcf3 	udiv	ip, ip, r3
   d7d26:	fb03 fa0c 	mul.w	sl, r3, ip
   d7d2a:	ea6f 0a0a 	mvn.w	sl, sl
   d7d2e:	4630      	mov	r0, r6
   d7d30:	eb09 0e04 	add.w	lr, r9, r4
   d7d34:	f89e e001 	ldrb.w	lr, [lr, #1]
   d7d38:	f01e 0f04 	tst.w	lr, #4
   d7d3c:	d001      	beq.n	d7d42 <_strtoul_r+0x7e>
   d7d3e:	3c30      	subs	r4, #48	; 0x30
   d7d40:	e00b      	b.n	d7d5a <_strtoul_r+0x96>
   d7d42:	f01e 0e03 	ands.w	lr, lr, #3
   d7d46:	d01a      	beq.n	d7d7e <_strtoul_r+0xba>
   d7d48:	f1be 0f01 	cmp.w	lr, #1
   d7d4c:	bf0c      	ite	eq
   d7d4e:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   d7d52:	f04f 0e57 	movne.w	lr, #87	; 0x57
   d7d56:	ebce 0404 	rsb	r4, lr, r4
   d7d5a:	42a3      	cmp	r3, r4
   d7d5c:	dd0f      	ble.n	d7d7e <_strtoul_r+0xba>
   d7d5e:	2e00      	cmp	r6, #0
   d7d60:	db08      	blt.n	d7d74 <_strtoul_r+0xb0>
   d7d62:	4560      	cmp	r0, ip
   d7d64:	d806      	bhi.n	d7d74 <_strtoul_r+0xb0>
   d7d66:	d101      	bne.n	d7d6c <_strtoul_r+0xa8>
   d7d68:	4554      	cmp	r4, sl
   d7d6a:	dc03      	bgt.n	d7d74 <_strtoul_r+0xb0>
   d7d6c:	fb03 4000 	mla	r0, r3, r0, r4
   d7d70:	2601      	movs	r6, #1
   d7d72:	e001      	b.n	d7d78 <_strtoul_r+0xb4>
   d7d74:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   d7d78:	f815 4b01 	ldrb.w	r4, [r5], #1
   d7d7c:	e7d8      	b.n	d7d30 <_strtoul_r+0x6c>
   d7d7e:	2e00      	cmp	r6, #0
   d7d80:	da07      	bge.n	d7d92 <_strtoul_r+0xce>
   d7d82:	2322      	movs	r3, #34	; 0x22
   d7d84:	f8c8 3000 	str.w	r3, [r8]
   d7d88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d7d8c:	b92a      	cbnz	r2, d7d9a <_strtoul_r+0xd6>
   d7d8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7d92:	b107      	cbz	r7, d7d96 <_strtoul_r+0xd2>
   d7d94:	4240      	negs	r0, r0
   d7d96:	b172      	cbz	r2, d7db6 <_strtoul_r+0xf2>
   d7d98:	b106      	cbz	r6, d7d9c <_strtoul_r+0xd8>
   d7d9a:	1e69      	subs	r1, r5, #1
   d7d9c:	6011      	str	r1, [r2, #0]
   d7d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7da2:	2430      	movs	r4, #48	; 0x30
   d7da4:	2b00      	cmp	r3, #0
   d7da6:	d1b9      	bne.n	d7d1c <_strtoul_r+0x58>
   d7da8:	2308      	movs	r3, #8
   d7daa:	e7b7      	b.n	d7d1c <_strtoul_r+0x58>
   d7dac:	230a      	movs	r3, #10
   d7dae:	e7b5      	b.n	d7d1c <_strtoul_r+0x58>
   d7db0:	2c30      	cmp	r4, #48	; 0x30
   d7db2:	d0ab      	beq.n	d7d0c <_strtoul_r+0x48>
   d7db4:	e7b2      	b.n	d7d1c <_strtoul_r+0x58>
   d7db6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7dba:	bf00      	nop
   d7dbc:	2003e138 	.word	0x2003e138

000d7dc0 <strtoul>:
   d7dc0:	4613      	mov	r3, r2
   d7dc2:	460a      	mov	r2, r1
   d7dc4:	4601      	mov	r1, r0
   d7dc6:	4802      	ldr	r0, [pc, #8]	; (d7dd0 <strtoul+0x10>)
   d7dc8:	6800      	ldr	r0, [r0, #0]
   d7dca:	f7ff bf7b 	b.w	d7cc4 <_strtoul_r>
   d7dce:	bf00      	nop
   d7dd0:	2003e19c 	.word	0x2003e19c

000d7dd4 <__tzcalc_limits>:
   d7dd4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7dd8:	4604      	mov	r4, r0
   d7dda:	f000 fd8d 	bl	d88f8 <__gettzinfo>
   d7dde:	f240 73b1 	movw	r3, #1969	; 0x7b1
   d7de2:	429c      	cmp	r4, r3
   d7de4:	f340 8096 	ble.w	d7f14 <__tzcalc_limits+0x140>
   d7de8:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
   d7dec:	18e3      	adds	r3, r4, r3
   d7dee:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
   d7df2:	109b      	asrs	r3, r3, #2
   d7df4:	f240 156d 	movw	r5, #365	; 0x16d
   d7df8:	fb05 3502 	mla	r5, r5, r2, r3
   d7dfc:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
   d7e00:	f06f 0363 	mvn.w	r3, #99	; 0x63
   d7e04:	fb92 f3f3 	sdiv	r3, r2, r3
   d7e08:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
   d7e0c:	442b      	add	r3, r5
   d7e0e:	18a5      	adds	r5, r4, r2
   d7e10:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d7e14:	fb95 f5f2 	sdiv	r5, r5, r2
   d7e18:	441d      	add	r5, r3
   d7e1a:	2364      	movs	r3, #100	; 0x64
   d7e1c:	fb94 f7f2 	sdiv	r7, r4, r2
   d7e20:	fb94 f6f3 	sdiv	r6, r4, r3
   d7e24:	fb02 4717 	mls	r7, r2, r7, r4
   d7e28:	fb03 4616 	mls	r6, r3, r6, r4
   d7e2c:	f100 0338 	add.w	r3, r0, #56	; 0x38
   d7e30:	fab7 fe87 	clz	lr, r7
   d7e34:	9301      	str	r3, [sp, #4]
   d7e36:	f004 0303 	and.w	r3, r4, #3
   d7e3a:	6044      	str	r4, [r0, #4]
   d7e3c:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
   d7e40:	4601      	mov	r1, r0
   d7e42:	9300      	str	r3, [sp, #0]
   d7e44:	f04f 0c07 	mov.w	ip, #7
   d7e48:	7a0b      	ldrb	r3, [r1, #8]
   d7e4a:	2b4a      	cmp	r3, #74	; 0x4a
   d7e4c:	d10e      	bne.n	d7e6c <__tzcalc_limits+0x98>
   d7e4e:	694b      	ldr	r3, [r1, #20]
   d7e50:	9a00      	ldr	r2, [sp, #0]
   d7e52:	18ec      	adds	r4, r5, r3
   d7e54:	b902      	cbnz	r2, d7e58 <__tzcalc_limits+0x84>
   d7e56:	b906      	cbnz	r6, d7e5a <__tzcalc_limits+0x86>
   d7e58:	b927      	cbnz	r7, d7e64 <__tzcalc_limits+0x90>
   d7e5a:	2b3b      	cmp	r3, #59	; 0x3b
   d7e5c:	bfd4      	ite	le
   d7e5e:	2300      	movle	r3, #0
   d7e60:	2301      	movgt	r3, #1
   d7e62:	e000      	b.n	d7e66 <__tzcalc_limits+0x92>
   d7e64:	2300      	movs	r3, #0
   d7e66:	4423      	add	r3, r4
   d7e68:	3b01      	subs	r3, #1
   d7e6a:	e03f      	b.n	d7eec <__tzcalc_limits+0x118>
   d7e6c:	2b44      	cmp	r3, #68	; 0x44
   d7e6e:	d102      	bne.n	d7e76 <__tzcalc_limits+0xa2>
   d7e70:	694b      	ldr	r3, [r1, #20]
   d7e72:	442b      	add	r3, r5
   d7e74:	e03a      	b.n	d7eec <__tzcalc_limits+0x118>
   d7e76:	9b00      	ldr	r3, [sp, #0]
   d7e78:	b92b      	cbnz	r3, d7e86 <__tzcalc_limits+0xb2>
   d7e7a:	2e00      	cmp	r6, #0
   d7e7c:	bf0c      	ite	eq
   d7e7e:	46f0      	moveq	r8, lr
   d7e80:	f04f 0801 	movne.w	r8, #1
   d7e84:	e000      	b.n	d7e88 <__tzcalc_limits+0xb4>
   d7e86:	46f0      	mov	r8, lr
   d7e88:	4b24      	ldr	r3, [pc, #144]	; (d7f1c <__tzcalc_limits+0x148>)
   d7e8a:	68cc      	ldr	r4, [r1, #12]
   d7e8c:	2230      	movs	r2, #48	; 0x30
   d7e8e:	fb02 3808 	mla	r8, r2, r8, r3
   d7e92:	f1a8 0a04 	sub.w	sl, r8, #4
   d7e96:	46a9      	mov	r9, r5
   d7e98:	2301      	movs	r3, #1
   d7e9a:	42a3      	cmp	r3, r4
   d7e9c:	da04      	bge.n	d7ea8 <__tzcalc_limits+0xd4>
   d7e9e:	f85a bf04 	ldr.w	fp, [sl, #4]!
   d7ea2:	3301      	adds	r3, #1
   d7ea4:	44d9      	add	r9, fp
   d7ea6:	e7f8      	b.n	d7e9a <__tzcalc_limits+0xc6>
   d7ea8:	f109 0304 	add.w	r3, r9, #4
   d7eac:	fb93 fbfc 	sdiv	fp, r3, ip
   d7eb0:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
   d7eb4:	2c01      	cmp	r4, #1
   d7eb6:	ebca 0a03 	rsb	sl, sl, r3
   d7eba:	694b      	ldr	r3, [r1, #20]
   d7ebc:	bfb8      	it	lt
   d7ebe:	2401      	movlt	r4, #1
   d7ec0:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   d7ec4:	ebb3 0a0a 	subs.w	sl, r3, sl
   d7ec8:	690b      	ldr	r3, [r1, #16]
   d7eca:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
   d7ece:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   d7ed2:	bf48      	it	mi
   d7ed4:	f10a 0a07 	addmi.w	sl, sl, #7
   d7ed8:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   d7edc:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
   d7ee0:	4453      	add	r3, sl
   d7ee2:	42a3      	cmp	r3, r4
   d7ee4:	db01      	blt.n	d7eea <__tzcalc_limits+0x116>
   d7ee6:	3b07      	subs	r3, #7
   d7ee8:	e7fb      	b.n	d7ee2 <__tzcalc_limits+0x10e>
   d7eea:	444b      	add	r3, r9
   d7eec:	698c      	ldr	r4, [r1, #24]
   d7eee:	4a0c      	ldr	r2, [pc, #48]	; (d7f20 <__tzcalc_limits+0x14c>)
   d7ef0:	fb02 4303 	mla	r3, r2, r3, r4
   d7ef4:	6a0c      	ldr	r4, [r1, #32]
   d7ef6:	4423      	add	r3, r4
   d7ef8:	f841 3f1c 	str.w	r3, [r1, #28]!
   d7efc:	9b01      	ldr	r3, [sp, #4]
   d7efe:	4299      	cmp	r1, r3
   d7f00:	d1a2      	bne.n	d7e48 <__tzcalc_limits+0x74>
   d7f02:	69c3      	ldr	r3, [r0, #28]
   d7f04:	6b82      	ldr	r2, [r0, #56]	; 0x38
   d7f06:	4293      	cmp	r3, r2
   d7f08:	bfac      	ite	ge
   d7f0a:	2300      	movge	r3, #0
   d7f0c:	2301      	movlt	r3, #1
   d7f0e:	6003      	str	r3, [r0, #0]
   d7f10:	2001      	movs	r0, #1
   d7f12:	e000      	b.n	d7f16 <__tzcalc_limits+0x142>
   d7f14:	2000      	movs	r0, #0
   d7f16:	b003      	add	sp, #12
   d7f18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7f1c:	000d9a1c 	.word	0x000d9a1c
   d7f20:	00015180 	.word	0x00015180

000d7f24 <__tz_lock>:
   d7f24:	4770      	bx	lr

000d7f26 <__tz_unlock>:
   d7f26:	4770      	bx	lr

000d7f28 <_tzset_unlocked>:
   d7f28:	4b01      	ldr	r3, [pc, #4]	; (d7f30 <_tzset_unlocked+0x8>)
   d7f2a:	6818      	ldr	r0, [r3, #0]
   d7f2c:	f000 b802 	b.w	d7f34 <_tzset_unlocked_r>
   d7f30:	2003e19c 	.word	0x2003e19c

000d7f34 <_tzset_unlocked_r>:
   d7f34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7f38:	b08d      	sub	sp, #52	; 0x34
   d7f3a:	4607      	mov	r7, r0
   d7f3c:	f000 fcdc 	bl	d88f8 <__gettzinfo>
   d7f40:	49b0      	ldr	r1, [pc, #704]	; (d8204 <_tzset_unlocked_r+0x2d0>)
   d7f42:	4eb1      	ldr	r6, [pc, #708]	; (d8208 <_tzset_unlocked_r+0x2d4>)
   d7f44:	4604      	mov	r4, r0
   d7f46:	4638      	mov	r0, r7
   d7f48:	f000 fcce 	bl	d88e8 <_getenv_r>
   d7f4c:	4605      	mov	r5, r0
   d7f4e:	b960      	cbnz	r0, d7f6a <_tzset_unlocked_r+0x36>
   d7f50:	4bae      	ldr	r3, [pc, #696]	; (d820c <_tzset_unlocked_r+0x2d8>)
   d7f52:	4aaf      	ldr	r2, [pc, #700]	; (d8210 <_tzset_unlocked_r+0x2dc>)
   d7f54:	6018      	str	r0, [r3, #0]
   d7f56:	4baf      	ldr	r3, [pc, #700]	; (d8214 <_tzset_unlocked_r+0x2e0>)
   d7f58:	6018      	str	r0, [r3, #0]
   d7f5a:	4baf      	ldr	r3, [pc, #700]	; (d8218 <_tzset_unlocked_r+0x2e4>)
   d7f5c:	6830      	ldr	r0, [r6, #0]
   d7f5e:	601a      	str	r2, [r3, #0]
   d7f60:	605a      	str	r2, [r3, #4]
   d7f62:	f7fc fe99 	bl	d4c98 <free>
   d7f66:	6035      	str	r5, [r6, #0]
   d7f68:	e148      	b.n	d81fc <_tzset_unlocked_r+0x2c8>
   d7f6a:	6831      	ldr	r1, [r6, #0]
   d7f6c:	b979      	cbnz	r1, d7f8e <_tzset_unlocked_r+0x5a>
   d7f6e:	6830      	ldr	r0, [r6, #0]
   d7f70:	f7fc fe92 	bl	d4c98 <free>
   d7f74:	4628      	mov	r0, r5
   d7f76:	f7ff f834 	bl	d6fe2 <strlen>
   d7f7a:	1c41      	adds	r1, r0, #1
   d7f7c:	4638      	mov	r0, r7
   d7f7e:	f7fc febb 	bl	d4cf8 <_malloc_r>
   d7f82:	6030      	str	r0, [r6, #0]
   d7f84:	b148      	cbz	r0, d7f9a <_tzset_unlocked_r+0x66>
   d7f86:	4629      	mov	r1, r5
   d7f88:	f7ff f808 	bl	d6f9c <strcpy>
   d7f8c:	e005      	b.n	d7f9a <_tzset_unlocked_r+0x66>
   d7f8e:	f7fe fffb 	bl	d6f88 <strcmp>
   d7f92:	2800      	cmp	r0, #0
   d7f94:	f000 8132 	beq.w	d81fc <_tzset_unlocked_r+0x2c8>
   d7f98:	e7e9      	b.n	d7f6e <_tzset_unlocked_r+0x3a>
   d7f9a:	782b      	ldrb	r3, [r5, #0]
   d7f9c:	4a9f      	ldr	r2, [pc, #636]	; (d821c <_tzset_unlocked_r+0x2e8>)
   d7f9e:	49a0      	ldr	r1, [pc, #640]	; (d8220 <_tzset_unlocked_r+0x2ec>)
   d7fa0:	2b3a      	cmp	r3, #58	; 0x3a
   d7fa2:	bf08      	it	eq
   d7fa4:	3501      	addeq	r5, #1
   d7fa6:	ae0a      	add	r6, sp, #40	; 0x28
   d7fa8:	4633      	mov	r3, r6
   d7faa:	4628      	mov	r0, r5
   d7fac:	f7fc fe84 	bl	d4cb8 <siscanf>
   d7fb0:	2800      	cmp	r0, #0
   d7fb2:	f340 8123 	ble.w	d81fc <_tzset_unlocked_r+0x2c8>
   d7fb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d7fb8:	18ef      	adds	r7, r5, r3
   d7fba:	5ceb      	ldrb	r3, [r5, r3]
   d7fbc:	2b2d      	cmp	r3, #45	; 0x2d
   d7fbe:	d103      	bne.n	d7fc8 <_tzset_unlocked_r+0x94>
   d7fc0:	3701      	adds	r7, #1
   d7fc2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   d7fc6:	e003      	b.n	d7fd0 <_tzset_unlocked_r+0x9c>
   d7fc8:	2b2b      	cmp	r3, #43	; 0x2b
   d7fca:	bf08      	it	eq
   d7fcc:	3701      	addeq	r7, #1
   d7fce:	2501      	movs	r5, #1
   d7fd0:	f10d 0a20 	add.w	sl, sp, #32
   d7fd4:	f10d 0b1e 	add.w	fp, sp, #30
   d7fd8:	f04f 0800 	mov.w	r8, #0
   d7fdc:	9603      	str	r6, [sp, #12]
   d7fde:	f8cd a008 	str.w	sl, [sp, #8]
   d7fe2:	9601      	str	r6, [sp, #4]
   d7fe4:	f8cd b000 	str.w	fp, [sp]
   d7fe8:	4633      	mov	r3, r6
   d7fea:	aa07      	add	r2, sp, #28
   d7fec:	498d      	ldr	r1, [pc, #564]	; (d8224 <_tzset_unlocked_r+0x2f0>)
   d7fee:	f8ad 801e 	strh.w	r8, [sp, #30]
   d7ff2:	4638      	mov	r0, r7
   d7ff4:	f8ad 8020 	strh.w	r8, [sp, #32]
   d7ff8:	f7fc fe5e 	bl	d4cb8 <siscanf>
   d7ffc:	4540      	cmp	r0, r8
   d7ffe:	f340 80fd 	ble.w	d81fc <_tzset_unlocked_r+0x2c8>
   d8002:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d8006:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d800a:	f8df 9224 	ldr.w	r9, [pc, #548]	; d8230 <_tzset_unlocked_r+0x2fc>
   d800e:	213c      	movs	r1, #60	; 0x3c
   d8010:	fb01 3302 	mla	r3, r1, r2, r3
   d8014:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d8018:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d801c:	fb01 3302 	mla	r3, r1, r2, r3
   d8020:	435d      	muls	r5, r3
   d8022:	6225      	str	r5, [r4, #32]
   d8024:	4d7c      	ldr	r5, [pc, #496]	; (d8218 <_tzset_unlocked_r+0x2e4>)
   d8026:	4b7d      	ldr	r3, [pc, #500]	; (d821c <_tzset_unlocked_r+0x2e8>)
   d8028:	602b      	str	r3, [r5, #0]
   d802a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d802c:	497c      	ldr	r1, [pc, #496]	; (d8220 <_tzset_unlocked_r+0x2ec>)
   d802e:	441f      	add	r7, r3
   d8030:	464a      	mov	r2, r9
   d8032:	4633      	mov	r3, r6
   d8034:	4638      	mov	r0, r7
   d8036:	f7fc fe3f 	bl	d4cb8 <siscanf>
   d803a:	4540      	cmp	r0, r8
   d803c:	dc08      	bgt.n	d8050 <_tzset_unlocked_r+0x11c>
   d803e:	682b      	ldr	r3, [r5, #0]
   d8040:	606b      	str	r3, [r5, #4]
   d8042:	4b72      	ldr	r3, [pc, #456]	; (d820c <_tzset_unlocked_r+0x2d8>)
   d8044:	6a22      	ldr	r2, [r4, #32]
   d8046:	601a      	str	r2, [r3, #0]
   d8048:	4b72      	ldr	r3, [pc, #456]	; (d8214 <_tzset_unlocked_r+0x2e0>)
   d804a:	f8c3 8000 	str.w	r8, [r3]
   d804e:	e0d5      	b.n	d81fc <_tzset_unlocked_r+0x2c8>
   d8050:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d8052:	f8c5 9004 	str.w	r9, [r5, #4]
   d8056:	18fd      	adds	r5, r7, r3
   d8058:	5cfb      	ldrb	r3, [r7, r3]
   d805a:	2b2d      	cmp	r3, #45	; 0x2d
   d805c:	d103      	bne.n	d8066 <_tzset_unlocked_r+0x132>
   d805e:	3501      	adds	r5, #1
   d8060:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   d8064:	e003      	b.n	d806e <_tzset_unlocked_r+0x13a>
   d8066:	2b2b      	cmp	r3, #43	; 0x2b
   d8068:	bf08      	it	eq
   d806a:	3501      	addeq	r5, #1
   d806c:	2701      	movs	r7, #1
   d806e:	2300      	movs	r3, #0
   d8070:	f8ad 301c 	strh.w	r3, [sp, #28]
   d8074:	f8ad 301e 	strh.w	r3, [sp, #30]
   d8078:	f8ad 3020 	strh.w	r3, [sp, #32]
   d807c:	930a      	str	r3, [sp, #40]	; 0x28
   d807e:	9603      	str	r6, [sp, #12]
   d8080:	f8cd a008 	str.w	sl, [sp, #8]
   d8084:	9601      	str	r6, [sp, #4]
   d8086:	f8cd b000 	str.w	fp, [sp]
   d808a:	4633      	mov	r3, r6
   d808c:	aa07      	add	r2, sp, #28
   d808e:	4965      	ldr	r1, [pc, #404]	; (d8224 <_tzset_unlocked_r+0x2f0>)
   d8090:	4628      	mov	r0, r5
   d8092:	f7fc fe11 	bl	d4cb8 <siscanf>
   d8096:	2800      	cmp	r0, #0
   d8098:	dc04      	bgt.n	d80a4 <_tzset_unlocked_r+0x170>
   d809a:	6a23      	ldr	r3, [r4, #32]
   d809c:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
   d80a0:	63e3      	str	r3, [r4, #60]	; 0x3c
   d80a2:	e00e      	b.n	d80c2 <_tzset_unlocked_r+0x18e>
   d80a4:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d80a8:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d80ac:	213c      	movs	r1, #60	; 0x3c
   d80ae:	fb01 3302 	mla	r3, r1, r2, r3
   d80b2:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d80b6:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d80ba:	fb01 3302 	mla	r3, r1, r2, r3
   d80be:	435f      	muls	r7, r3
   d80c0:	63e7      	str	r7, [r4, #60]	; 0x3c
   d80c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d80c4:	4627      	mov	r7, r4
   d80c6:	441d      	add	r5, r3
   d80c8:	f04f 0900 	mov.w	r9, #0
   d80cc:	782b      	ldrb	r3, [r5, #0]
   d80ce:	2b2c      	cmp	r3, #44	; 0x2c
   d80d0:	bf08      	it	eq
   d80d2:	3501      	addeq	r5, #1
   d80d4:	f895 8000 	ldrb.w	r8, [r5]
   d80d8:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
   d80dc:	d126      	bne.n	d812c <_tzset_unlocked_r+0x1f8>
   d80de:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   d80e2:	9302      	str	r3, [sp, #8]
   d80e4:	ab09      	add	r3, sp, #36	; 0x24
   d80e6:	9300      	str	r3, [sp, #0]
   d80e8:	9603      	str	r6, [sp, #12]
   d80ea:	9601      	str	r6, [sp, #4]
   d80ec:	4633      	mov	r3, r6
   d80ee:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   d80f2:	494d      	ldr	r1, [pc, #308]	; (d8228 <_tzset_unlocked_r+0x2f4>)
   d80f4:	4628      	mov	r0, r5
   d80f6:	f7fc fddf 	bl	d4cb8 <siscanf>
   d80fa:	2803      	cmp	r0, #3
   d80fc:	d17e      	bne.n	d81fc <_tzset_unlocked_r+0x2c8>
   d80fe:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
   d8102:	1e4b      	subs	r3, r1, #1
   d8104:	2b0b      	cmp	r3, #11
   d8106:	d879      	bhi.n	d81fc <_tzset_unlocked_r+0x2c8>
   d8108:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   d810c:	1e53      	subs	r3, r2, #1
   d810e:	2b04      	cmp	r3, #4
   d8110:	d874      	bhi.n	d81fc <_tzset_unlocked_r+0x2c8>
   d8112:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   d8116:	2b06      	cmp	r3, #6
   d8118:	d870      	bhi.n	d81fc <_tzset_unlocked_r+0x2c8>
   d811a:	f887 8008 	strb.w	r8, [r7, #8]
   d811e:	60f9      	str	r1, [r7, #12]
   d8120:	613a      	str	r2, [r7, #16]
   d8122:	617b      	str	r3, [r7, #20]
   d8124:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d8126:	eb05 0803 	add.w	r8, r5, r3
   d812a:	e02a      	b.n	d8182 <_tzset_unlocked_r+0x24e>
   d812c:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
   d8130:	bf06      	itte	eq
   d8132:	3501      	addeq	r5, #1
   d8134:	4643      	moveq	r3, r8
   d8136:	2344      	movne	r3, #68	; 0x44
   d8138:	220a      	movs	r2, #10
   d813a:	a90b      	add	r1, sp, #44	; 0x2c
   d813c:	4628      	mov	r0, r5
   d813e:	9305      	str	r3, [sp, #20]
   d8140:	f7ff fe3e 	bl	d7dc0 <strtoul>
   d8144:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   d8148:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
   d814c:	4545      	cmp	r5, r8
   d814e:	9b05      	ldr	r3, [sp, #20]
   d8150:	d114      	bne.n	d817c <_tzset_unlocked_r+0x248>
   d8152:	234d      	movs	r3, #77	; 0x4d
   d8154:	f1b9 0f00 	cmp.w	r9, #0
   d8158:	d107      	bne.n	d816a <_tzset_unlocked_r+0x236>
   d815a:	7223      	strb	r3, [r4, #8]
   d815c:	2303      	movs	r3, #3
   d815e:	60e3      	str	r3, [r4, #12]
   d8160:	2302      	movs	r3, #2
   d8162:	6123      	str	r3, [r4, #16]
   d8164:	f8c4 9014 	str.w	r9, [r4, #20]
   d8168:	e00b      	b.n	d8182 <_tzset_unlocked_r+0x24e>
   d816a:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
   d816e:	230b      	movs	r3, #11
   d8170:	62a3      	str	r3, [r4, #40]	; 0x28
   d8172:	2301      	movs	r3, #1
   d8174:	62e3      	str	r3, [r4, #44]	; 0x2c
   d8176:	2300      	movs	r3, #0
   d8178:	6323      	str	r3, [r4, #48]	; 0x30
   d817a:	e002      	b.n	d8182 <_tzset_unlocked_r+0x24e>
   d817c:	b280      	uxth	r0, r0
   d817e:	723b      	strb	r3, [r7, #8]
   d8180:	6178      	str	r0, [r7, #20]
   d8182:	2302      	movs	r3, #2
   d8184:	f8ad 301c 	strh.w	r3, [sp, #28]
   d8188:	2300      	movs	r3, #0
   d818a:	f8ad 301e 	strh.w	r3, [sp, #30]
   d818e:	f8ad 3020 	strh.w	r3, [sp, #32]
   d8192:	930a      	str	r3, [sp, #40]	; 0x28
   d8194:	f898 3000 	ldrb.w	r3, [r8]
   d8198:	2b2f      	cmp	r3, #47	; 0x2f
   d819a:	d10b      	bne.n	d81b4 <_tzset_unlocked_r+0x280>
   d819c:	9603      	str	r6, [sp, #12]
   d819e:	f8cd a008 	str.w	sl, [sp, #8]
   d81a2:	9601      	str	r6, [sp, #4]
   d81a4:	f8cd b000 	str.w	fp, [sp]
   d81a8:	4633      	mov	r3, r6
   d81aa:	aa07      	add	r2, sp, #28
   d81ac:	491f      	ldr	r1, [pc, #124]	; (d822c <_tzset_unlocked_r+0x2f8>)
   d81ae:	4640      	mov	r0, r8
   d81b0:	f7fc fd82 	bl	d4cb8 <siscanf>
   d81b4:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d81b8:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d81bc:	213c      	movs	r1, #60	; 0x3c
   d81be:	fb01 3302 	mla	r3, r1, r2, r3
   d81c2:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d81c6:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d81ca:	fb01 3302 	mla	r3, r1, r2, r3
   d81ce:	61bb      	str	r3, [r7, #24]
   d81d0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   d81d2:	f109 0901 	add.w	r9, r9, #1
   d81d6:	f1b9 0f02 	cmp.w	r9, #2
   d81da:	4445      	add	r5, r8
   d81dc:	f107 071c 	add.w	r7, r7, #28
   d81e0:	f47f af74 	bne.w	d80cc <_tzset_unlocked_r+0x198>
   d81e4:	6860      	ldr	r0, [r4, #4]
   d81e6:	f7ff fdf5 	bl	d7dd4 <__tzcalc_limits>
   d81ea:	4b08      	ldr	r3, [pc, #32]	; (d820c <_tzset_unlocked_r+0x2d8>)
   d81ec:	6a22      	ldr	r2, [r4, #32]
   d81ee:	601a      	str	r2, [r3, #0]
   d81f0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d81f2:	1a9b      	subs	r3, r3, r2
   d81f4:	4a07      	ldr	r2, [pc, #28]	; (d8214 <_tzset_unlocked_r+0x2e0>)
   d81f6:	bf18      	it	ne
   d81f8:	2301      	movne	r3, #1
   d81fa:	6013      	str	r3, [r2, #0]
   d81fc:	b00d      	add	sp, #52	; 0x34
   d81fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d8202:	bf00      	nop
   d8204:	000d9ad8 	.word	0x000d9ad8
   d8208:	2003e7e0 	.word	0x2003e7e0
   d820c:	2003e7e8 	.word	0x2003e7e8
   d8210:	000d9adb 	.word	0x000d9adb
   d8214:	2003e7e4 	.word	0x2003e7e4
   d8218:	2003e1d8 	.word	0x2003e1d8
   d821c:	2003e7d3 	.word	0x2003e7d3
   d8220:	000d9adf 	.word	0x000d9adf
   d8224:	000d9b02 	.word	0x000d9b02
   d8228:	000d9aee 	.word	0x000d9aee
   d822c:	000d9b01 	.word	0x000d9b01
   d8230:	2003e7c8 	.word	0x2003e7c8

000d8234 <rshift>:
   d8234:	b5f0      	push	{r4, r5, r6, r7, lr}
   d8236:	6906      	ldr	r6, [r0, #16]
   d8238:	114b      	asrs	r3, r1, #5
   d823a:	42b3      	cmp	r3, r6
   d823c:	f100 0514 	add.w	r5, r0, #20
   d8240:	da27      	bge.n	d8292 <rshift+0x5e>
   d8242:	f011 011f 	ands.w	r1, r1, #31
   d8246:	eb05 0686 	add.w	r6, r5, r6, lsl #2
   d824a:	eb05 0283 	add.w	r2, r5, r3, lsl #2
   d824e:	d101      	bne.n	d8254 <rshift+0x20>
   d8250:	4629      	mov	r1, r5
   d8252:	e016      	b.n	d8282 <rshift+0x4e>
   d8254:	1d14      	adds	r4, r2, #4
   d8256:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
   d825a:	f1c1 0e20 	rsb	lr, r1, #32
   d825e:	40ca      	lsrs	r2, r1
   d8260:	462b      	mov	r3, r5
   d8262:	42b4      	cmp	r4, r6
   d8264:	d209      	bcs.n	d827a <rshift+0x46>
   d8266:	6827      	ldr	r7, [r4, #0]
   d8268:	fa07 f70e 	lsl.w	r7, r7, lr
   d826c:	433a      	orrs	r2, r7
   d826e:	f843 2b04 	str.w	r2, [r3], #4
   d8272:	f854 2b04 	ldr.w	r2, [r4], #4
   d8276:	40ca      	lsrs	r2, r1
   d8278:	e7f3      	b.n	d8262 <rshift+0x2e>
   d827a:	601a      	str	r2, [r3, #0]
   d827c:	b152      	cbz	r2, d8294 <rshift+0x60>
   d827e:	3304      	adds	r3, #4
   d8280:	e008      	b.n	d8294 <rshift+0x60>
   d8282:	42b2      	cmp	r2, r6
   d8284:	460b      	mov	r3, r1
   d8286:	d205      	bcs.n	d8294 <rshift+0x60>
   d8288:	f852 3b04 	ldr.w	r3, [r2], #4
   d828c:	f841 3b04 	str.w	r3, [r1], #4
   d8290:	e7f7      	b.n	d8282 <rshift+0x4e>
   d8292:	462b      	mov	r3, r5
   d8294:	1b5b      	subs	r3, r3, r5
   d8296:	109b      	asrs	r3, r3, #2
   d8298:	6103      	str	r3, [r0, #16]
   d829a:	b903      	cbnz	r3, d829e <rshift+0x6a>
   d829c:	6143      	str	r3, [r0, #20]
   d829e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d82a0 <__hexdig_fun>:
   d82a0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d82a4:	2b09      	cmp	r3, #9
   d82a6:	d801      	bhi.n	d82ac <__hexdig_fun+0xc>
   d82a8:	3820      	subs	r0, #32
   d82aa:	e00a      	b.n	d82c2 <__hexdig_fun+0x22>
   d82ac:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   d82b0:	2b05      	cmp	r3, #5
   d82b2:	d801      	bhi.n	d82b8 <__hexdig_fun+0x18>
   d82b4:	3847      	subs	r0, #71	; 0x47
   d82b6:	e004      	b.n	d82c2 <__hexdig_fun+0x22>
   d82b8:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   d82bc:	2b05      	cmp	r3, #5
   d82be:	d802      	bhi.n	d82c6 <__hexdig_fun+0x26>
   d82c0:	3827      	subs	r0, #39	; 0x27
   d82c2:	b2c0      	uxtb	r0, r0
   d82c4:	4770      	bx	lr
   d82c6:	2000      	movs	r0, #0
   d82c8:	4770      	bx	lr

000d82ca <__gethex>:
   d82ca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d82ce:	b08b      	sub	sp, #44	; 0x2c
   d82d0:	468a      	mov	sl, r1
   d82d2:	4690      	mov	r8, r2
   d82d4:	9306      	str	r3, [sp, #24]
   d82d6:	9002      	str	r0, [sp, #8]
   d82d8:	f7fe fe16 	bl	d6f08 <_localeconv_r>
   d82dc:	6803      	ldr	r3, [r0, #0]
   d82de:	9303      	str	r3, [sp, #12]
   d82e0:	4618      	mov	r0, r3
   d82e2:	f7fe fe7e 	bl	d6fe2 <strlen>
   d82e6:	9b03      	ldr	r3, [sp, #12]
   d82e8:	9001      	str	r0, [sp, #4]
   d82ea:	4403      	add	r3, r0
   d82ec:	f04f 0b00 	mov.w	fp, #0
   d82f0:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   d82f4:	9307      	str	r3, [sp, #28]
   d82f6:	f8da 3000 	ldr.w	r3, [sl]
   d82fa:	3302      	adds	r3, #2
   d82fc:	461f      	mov	r7, r3
   d82fe:	f813 0b01 	ldrb.w	r0, [r3], #1
   d8302:	2830      	cmp	r0, #48	; 0x30
   d8304:	d102      	bne.n	d830c <__gethex+0x42>
   d8306:	f10b 0b01 	add.w	fp, fp, #1
   d830a:	e7f7      	b.n	d82fc <__gethex+0x32>
   d830c:	f7ff ffc8 	bl	d82a0 <__hexdig_fun>
   d8310:	4604      	mov	r4, r0
   d8312:	b9e0      	cbnz	r0, d834e <__gethex+0x84>
   d8314:	9a01      	ldr	r2, [sp, #4]
   d8316:	9903      	ldr	r1, [sp, #12]
   d8318:	4638      	mov	r0, r7
   d831a:	f7fe fe6a 	bl	d6ff2 <strncmp>
   d831e:	2800      	cmp	r0, #0
   d8320:	d134      	bne.n	d838c <__gethex+0xc2>
   d8322:	9b01      	ldr	r3, [sp, #4]
   d8324:	5cf8      	ldrb	r0, [r7, r3]
   d8326:	18fe      	adds	r6, r7, r3
   d8328:	f7ff ffba 	bl	d82a0 <__hexdig_fun>
   d832c:	b380      	cbz	r0, d8390 <__gethex+0xc6>
   d832e:	4633      	mov	r3, r6
   d8330:	7818      	ldrb	r0, [r3, #0]
   d8332:	2830      	cmp	r0, #48	; 0x30
   d8334:	461f      	mov	r7, r3
   d8336:	f103 0301 	add.w	r3, r3, #1
   d833a:	d0f9      	beq.n	d8330 <__gethex+0x66>
   d833c:	f7ff ffb0 	bl	d82a0 <__hexdig_fun>
   d8340:	fab0 f580 	clz	r5, r0
   d8344:	096d      	lsrs	r5, r5, #5
   d8346:	4634      	mov	r4, r6
   d8348:	f04f 0b01 	mov.w	fp, #1
   d834c:	e001      	b.n	d8352 <__gethex+0x88>
   d834e:	2500      	movs	r5, #0
   d8350:	462c      	mov	r4, r5
   d8352:	463a      	mov	r2, r7
   d8354:	4616      	mov	r6, r2
   d8356:	3201      	adds	r2, #1
   d8358:	7830      	ldrb	r0, [r6, #0]
   d835a:	f7ff ffa1 	bl	d82a0 <__hexdig_fun>
   d835e:	2800      	cmp	r0, #0
   d8360:	d1f8      	bne.n	d8354 <__gethex+0x8a>
   d8362:	9a01      	ldr	r2, [sp, #4]
   d8364:	9903      	ldr	r1, [sp, #12]
   d8366:	4630      	mov	r0, r6
   d8368:	f7fe fe43 	bl	d6ff2 <strncmp>
   d836c:	b950      	cbnz	r0, d8384 <__gethex+0xba>
   d836e:	b954      	cbnz	r4, d8386 <__gethex+0xbc>
   d8370:	9b01      	ldr	r3, [sp, #4]
   d8372:	18f4      	adds	r4, r6, r3
   d8374:	4622      	mov	r2, r4
   d8376:	4616      	mov	r6, r2
   d8378:	3201      	adds	r2, #1
   d837a:	7830      	ldrb	r0, [r6, #0]
   d837c:	f7ff ff90 	bl	d82a0 <__hexdig_fun>
   d8380:	2800      	cmp	r0, #0
   d8382:	d1f8      	bne.n	d8376 <__gethex+0xac>
   d8384:	b134      	cbz	r4, d8394 <__gethex+0xca>
   d8386:	1ba4      	subs	r4, r4, r6
   d8388:	00a4      	lsls	r4, r4, #2
   d838a:	e003      	b.n	d8394 <__gethex+0xca>
   d838c:	463e      	mov	r6, r7
   d838e:	e000      	b.n	d8392 <__gethex+0xc8>
   d8390:	4604      	mov	r4, r0
   d8392:	2501      	movs	r5, #1
   d8394:	7833      	ldrb	r3, [r6, #0]
   d8396:	2b50      	cmp	r3, #80	; 0x50
   d8398:	d001      	beq.n	d839e <__gethex+0xd4>
   d839a:	2b70      	cmp	r3, #112	; 0x70
   d839c:	d12a      	bne.n	d83f4 <__gethex+0x12a>
   d839e:	7873      	ldrb	r3, [r6, #1]
   d83a0:	2b2b      	cmp	r3, #43	; 0x2b
   d83a2:	d008      	beq.n	d83b6 <__gethex+0xec>
   d83a4:	2b2d      	cmp	r3, #45	; 0x2d
   d83a6:	d003      	beq.n	d83b0 <__gethex+0xe6>
   d83a8:	1c71      	adds	r1, r6, #1
   d83aa:	f04f 0900 	mov.w	r9, #0
   d83ae:	e005      	b.n	d83bc <__gethex+0xf2>
   d83b0:	f04f 0901 	mov.w	r9, #1
   d83b4:	e001      	b.n	d83ba <__gethex+0xf0>
   d83b6:	f04f 0900 	mov.w	r9, #0
   d83ba:	1cb1      	adds	r1, r6, #2
   d83bc:	7808      	ldrb	r0, [r1, #0]
   d83be:	f7ff ff6f 	bl	d82a0 <__hexdig_fun>
   d83c2:	1e43      	subs	r3, r0, #1
   d83c4:	b2db      	uxtb	r3, r3
   d83c6:	2b18      	cmp	r3, #24
   d83c8:	d814      	bhi.n	d83f4 <__gethex+0x12a>
   d83ca:	f1a0 0210 	sub.w	r2, r0, #16
   d83ce:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   d83d2:	f7ff ff65 	bl	d82a0 <__hexdig_fun>
   d83d6:	1e43      	subs	r3, r0, #1
   d83d8:	b2db      	uxtb	r3, r3
   d83da:	2b18      	cmp	r3, #24
   d83dc:	d804      	bhi.n	d83e8 <__gethex+0x11e>
   d83de:	230a      	movs	r3, #10
   d83e0:	fb03 0202 	mla	r2, r3, r2, r0
   d83e4:	3a10      	subs	r2, #16
   d83e6:	e7f2      	b.n	d83ce <__gethex+0x104>
   d83e8:	f1b9 0f00 	cmp.w	r9, #0
   d83ec:	d000      	beq.n	d83f0 <__gethex+0x126>
   d83ee:	4252      	negs	r2, r2
   d83f0:	4414      	add	r4, r2
   d83f2:	e000      	b.n	d83f6 <__gethex+0x12c>
   d83f4:	4631      	mov	r1, r6
   d83f6:	f8ca 1000 	str.w	r1, [sl]
   d83fa:	b12d      	cbz	r5, d8408 <__gethex+0x13e>
   d83fc:	f1bb 0f00 	cmp.w	fp, #0
   d8400:	bf14      	ite	ne
   d8402:	2000      	movne	r0, #0
   d8404:	2006      	moveq	r0, #6
   d8406:	e17c      	b.n	d8702 <__gethex+0x438>
   d8408:	1bf3      	subs	r3, r6, r7
   d840a:	3b01      	subs	r3, #1
   d840c:	4629      	mov	r1, r5
   d840e:	2b07      	cmp	r3, #7
   d8410:	dd02      	ble.n	d8418 <__gethex+0x14e>
   d8412:	3101      	adds	r1, #1
   d8414:	105b      	asrs	r3, r3, #1
   d8416:	e7fa      	b.n	d840e <__gethex+0x144>
   d8418:	9802      	ldr	r0, [sp, #8]
   d841a:	f000 fb09 	bl	d8a30 <_Balloc>
   d841e:	9b01      	ldr	r3, [sp, #4]
   d8420:	f100 0a14 	add.w	sl, r0, #20
   d8424:	f04f 0900 	mov.w	r9, #0
   d8428:	f1c3 0301 	rsb	r3, r3, #1
   d842c:	4605      	mov	r5, r0
   d842e:	f8cd a010 	str.w	sl, [sp, #16]
   d8432:	46cb      	mov	fp, r9
   d8434:	9308      	str	r3, [sp, #32]
   d8436:	42b7      	cmp	r7, r6
   d8438:	d22f      	bcs.n	d849a <__gethex+0x1d0>
   d843a:	1e73      	subs	r3, r6, #1
   d843c:	9305      	str	r3, [sp, #20]
   d843e:	9a07      	ldr	r2, [sp, #28]
   d8440:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   d8444:	4293      	cmp	r3, r2
   d8446:	d00b      	beq.n	d8460 <__gethex+0x196>
   d8448:	f1bb 0f20 	cmp.w	fp, #32
   d844c:	d116      	bne.n	d847c <__gethex+0x1b2>
   d844e:	9b04      	ldr	r3, [sp, #16]
   d8450:	f8c3 9000 	str.w	r9, [r3]
   d8454:	3304      	adds	r3, #4
   d8456:	f04f 0900 	mov.w	r9, #0
   d845a:	9304      	str	r3, [sp, #16]
   d845c:	46cb      	mov	fp, r9
   d845e:	e00d      	b.n	d847c <__gethex+0x1b2>
   d8460:	9b05      	ldr	r3, [sp, #20]
   d8462:	9a08      	ldr	r2, [sp, #32]
   d8464:	4413      	add	r3, r2
   d8466:	429f      	cmp	r7, r3
   d8468:	d8ee      	bhi.n	d8448 <__gethex+0x17e>
   d846a:	4618      	mov	r0, r3
   d846c:	9a01      	ldr	r2, [sp, #4]
   d846e:	9903      	ldr	r1, [sp, #12]
   d8470:	9309      	str	r3, [sp, #36]	; 0x24
   d8472:	f7fe fdbe 	bl	d6ff2 <strncmp>
   d8476:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d8478:	b168      	cbz	r0, d8496 <__gethex+0x1cc>
   d847a:	e7e5      	b.n	d8448 <__gethex+0x17e>
   d847c:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   d8480:	f7ff ff0e 	bl	d82a0 <__hexdig_fun>
   d8484:	f000 000f 	and.w	r0, r0, #15
   d8488:	fa00 f00b 	lsl.w	r0, r0, fp
   d848c:	9b05      	ldr	r3, [sp, #20]
   d848e:	ea49 0900 	orr.w	r9, r9, r0
   d8492:	f10b 0b04 	add.w	fp, fp, #4
   d8496:	461e      	mov	r6, r3
   d8498:	e7cd      	b.n	d8436 <__gethex+0x16c>
   d849a:	9804      	ldr	r0, [sp, #16]
   d849c:	f840 9b04 	str.w	r9, [r0], #4
   d84a0:	ebca 0000 	rsb	r0, sl, r0
   d84a4:	1080      	asrs	r0, r0, #2
   d84a6:	6128      	str	r0, [r5, #16]
   d84a8:	0147      	lsls	r7, r0, #5
   d84aa:	4648      	mov	r0, r9
   d84ac:	f000 fb85 	bl	d8bba <__hi0bits>
   d84b0:	f8d8 6000 	ldr.w	r6, [r8]
   d84b4:	1a38      	subs	r0, r7, r0
   d84b6:	42b0      	cmp	r0, r6
   d84b8:	dd26      	ble.n	d8508 <__gethex+0x23e>
   d84ba:	1b87      	subs	r7, r0, r6
   d84bc:	4639      	mov	r1, r7
   d84be:	4628      	mov	r0, r5
   d84c0:	f000 fe83 	bl	d91ca <__any_on>
   d84c4:	b1c8      	cbz	r0, d84fa <__gethex+0x230>
   d84c6:	1e7b      	subs	r3, r7, #1
   d84c8:	1159      	asrs	r1, r3, #5
   d84ca:	f003 021f 	and.w	r2, r3, #31
   d84ce:	f04f 0901 	mov.w	r9, #1
   d84d2:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
   d84d6:	fa09 f202 	lsl.w	r2, r9, r2
   d84da:	420a      	tst	r2, r1
   d84dc:	d00e      	beq.n	d84fc <__gethex+0x232>
   d84de:	454b      	cmp	r3, r9
   d84e0:	dc02      	bgt.n	d84e8 <__gethex+0x21e>
   d84e2:	f04f 0902 	mov.w	r9, #2
   d84e6:	e009      	b.n	d84fc <__gethex+0x232>
   d84e8:	1eb9      	subs	r1, r7, #2
   d84ea:	4628      	mov	r0, r5
   d84ec:	f000 fe6d 	bl	d91ca <__any_on>
   d84f0:	2800      	cmp	r0, #0
   d84f2:	d0f6      	beq.n	d84e2 <__gethex+0x218>
   d84f4:	f04f 0903 	mov.w	r9, #3
   d84f8:	e000      	b.n	d84fc <__gethex+0x232>
   d84fa:	4681      	mov	r9, r0
   d84fc:	4639      	mov	r1, r7
   d84fe:	4628      	mov	r0, r5
   d8500:	f7ff fe98 	bl	d8234 <rshift>
   d8504:	443c      	add	r4, r7
   d8506:	e00c      	b.n	d8522 <__gethex+0x258>
   d8508:	da09      	bge.n	d851e <__gethex+0x254>
   d850a:	1a37      	subs	r7, r6, r0
   d850c:	4629      	mov	r1, r5
   d850e:	463a      	mov	r2, r7
   d8510:	9802      	ldr	r0, [sp, #8]
   d8512:	f000 fc87 	bl	d8e24 <__lshift>
   d8516:	1be4      	subs	r4, r4, r7
   d8518:	4605      	mov	r5, r0
   d851a:	f100 0a14 	add.w	sl, r0, #20
   d851e:	f04f 0900 	mov.w	r9, #0
   d8522:	f8d8 3008 	ldr.w	r3, [r8, #8]
   d8526:	429c      	cmp	r4, r3
   d8528:	dd08      	ble.n	d853c <__gethex+0x272>
   d852a:	9802      	ldr	r0, [sp, #8]
   d852c:	4629      	mov	r1, r5
   d852e:	f000 fab4 	bl	d8a9a <_Bfree>
   d8532:	9a14      	ldr	r2, [sp, #80]	; 0x50
   d8534:	2300      	movs	r3, #0
   d8536:	6013      	str	r3, [r2, #0]
   d8538:	20a3      	movs	r0, #163	; 0xa3
   d853a:	e0e2      	b.n	d8702 <__gethex+0x438>
   d853c:	f8d8 0004 	ldr.w	r0, [r8, #4]
   d8540:	4284      	cmp	r4, r0
   d8542:	da53      	bge.n	d85ec <__gethex+0x322>
   d8544:	1b04      	subs	r4, r0, r4
   d8546:	42a6      	cmp	r6, r4
   d8548:	dc2e      	bgt.n	d85a8 <__gethex+0x2de>
   d854a:	f8d8 300c 	ldr.w	r3, [r8, #12]
   d854e:	2b02      	cmp	r3, #2
   d8550:	d01a      	beq.n	d8588 <__gethex+0x2be>
   d8552:	2b03      	cmp	r3, #3
   d8554:	d01c      	beq.n	d8590 <__gethex+0x2c6>
   d8556:	2b01      	cmp	r3, #1
   d8558:	d11d      	bne.n	d8596 <__gethex+0x2cc>
   d855a:	42a6      	cmp	r6, r4
   d855c:	d11b      	bne.n	d8596 <__gethex+0x2cc>
   d855e:	2e01      	cmp	r6, #1
   d8560:	dc0b      	bgt.n	d857a <__gethex+0x2b0>
   d8562:	9a06      	ldr	r2, [sp, #24]
   d8564:	f8d8 3004 	ldr.w	r3, [r8, #4]
   d8568:	6013      	str	r3, [r2, #0]
   d856a:	2301      	movs	r3, #1
   d856c:	612b      	str	r3, [r5, #16]
   d856e:	f8ca 3000 	str.w	r3, [sl]
   d8572:	9b14      	ldr	r3, [sp, #80]	; 0x50
   d8574:	2062      	movs	r0, #98	; 0x62
   d8576:	601d      	str	r5, [r3, #0]
   d8578:	e0c3      	b.n	d8702 <__gethex+0x438>
   d857a:	1e71      	subs	r1, r6, #1
   d857c:	4628      	mov	r0, r5
   d857e:	f000 fe24 	bl	d91ca <__any_on>
   d8582:	2800      	cmp	r0, #0
   d8584:	d1ed      	bne.n	d8562 <__gethex+0x298>
   d8586:	e006      	b.n	d8596 <__gethex+0x2cc>
   d8588:	9b15      	ldr	r3, [sp, #84]	; 0x54
   d858a:	2b00      	cmp	r3, #0
   d858c:	d0e9      	beq.n	d8562 <__gethex+0x298>
   d858e:	e002      	b.n	d8596 <__gethex+0x2cc>
   d8590:	9b15      	ldr	r3, [sp, #84]	; 0x54
   d8592:	2b00      	cmp	r3, #0
   d8594:	d1e5      	bne.n	d8562 <__gethex+0x298>
   d8596:	9802      	ldr	r0, [sp, #8]
   d8598:	4629      	mov	r1, r5
   d859a:	f000 fa7e 	bl	d8a9a <_Bfree>
   d859e:	9a14      	ldr	r2, [sp, #80]	; 0x50
   d85a0:	2300      	movs	r3, #0
   d85a2:	6013      	str	r3, [r2, #0]
   d85a4:	2050      	movs	r0, #80	; 0x50
   d85a6:	e0ac      	b.n	d8702 <__gethex+0x438>
   d85a8:	1e67      	subs	r7, r4, #1
   d85aa:	f1b9 0f00 	cmp.w	r9, #0
   d85ae:	d106      	bne.n	d85be <__gethex+0x2f4>
   d85b0:	b13f      	cbz	r7, d85c2 <__gethex+0x2f8>
   d85b2:	4639      	mov	r1, r7
   d85b4:	4628      	mov	r0, r5
   d85b6:	f000 fe08 	bl	d91ca <__any_on>
   d85ba:	4681      	mov	r9, r0
   d85bc:	e001      	b.n	d85c2 <__gethex+0x2f8>
   d85be:	f04f 0901 	mov.w	r9, #1
   d85c2:	117a      	asrs	r2, r7, #5
   d85c4:	2301      	movs	r3, #1
   d85c6:	f007 071f 	and.w	r7, r7, #31
   d85ca:	fa03 f707 	lsl.w	r7, r3, r7
   d85ce:	f85a 3022 	ldr.w	r3, [sl, r2, lsl #2]
   d85d2:	4621      	mov	r1, r4
   d85d4:	421f      	tst	r7, r3
   d85d6:	4628      	mov	r0, r5
   d85d8:	bf18      	it	ne
   d85da:	f049 0902 	orrne.w	r9, r9, #2
   d85de:	1b36      	subs	r6, r6, r4
   d85e0:	f7ff fe28 	bl	d8234 <rshift>
   d85e4:	2702      	movs	r7, #2
   d85e6:	f8d8 4004 	ldr.w	r4, [r8, #4]
   d85ea:	e000      	b.n	d85ee <__gethex+0x324>
   d85ec:	2701      	movs	r7, #1
   d85ee:	f1b9 0f00 	cmp.w	r9, #0
   d85f2:	f000 8081 	beq.w	d86f8 <__gethex+0x42e>
   d85f6:	f8d8 300c 	ldr.w	r3, [r8, #12]
   d85fa:	2b02      	cmp	r3, #2
   d85fc:	d00e      	beq.n	d861c <__gethex+0x352>
   d85fe:	2b03      	cmp	r3, #3
   d8600:	d010      	beq.n	d8624 <__gethex+0x35a>
   d8602:	2b01      	cmp	r3, #1
   d8604:	d176      	bne.n	d86f4 <__gethex+0x42a>
   d8606:	f019 0f02 	tst.w	r9, #2
   d860a:	d073      	beq.n	d86f4 <__gethex+0x42a>
   d860c:	f8da 0000 	ldr.w	r0, [sl]
   d8610:	ea49 0900 	orr.w	r9, r9, r0
   d8614:	f019 0f01 	tst.w	r9, #1
   d8618:	d107      	bne.n	d862a <__gethex+0x360>
   d861a:	e06b      	b.n	d86f4 <__gethex+0x42a>
   d861c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   d861e:	f1c3 0301 	rsb	r3, r3, #1
   d8622:	9315      	str	r3, [sp, #84]	; 0x54
   d8624:	9b15      	ldr	r3, [sp, #84]	; 0x54
   d8626:	2b00      	cmp	r3, #0
   d8628:	d064      	beq.n	d86f4 <__gethex+0x42a>
   d862a:	f8d5 a010 	ldr.w	sl, [r5, #16]
   d862e:	f105 0314 	add.w	r3, r5, #20
   d8632:	ea4f 098a 	mov.w	r9, sl, lsl #2
   d8636:	eb03 0109 	add.w	r1, r3, r9
   d863a:	2000      	movs	r0, #0
   d863c:	681a      	ldr	r2, [r3, #0]
   d863e:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   d8642:	d002      	beq.n	d864a <__gethex+0x380>
   d8644:	3201      	adds	r2, #1
   d8646:	601a      	str	r2, [r3, #0]
   d8648:	e020      	b.n	d868c <__gethex+0x3c2>
   d864a:	f843 0b04 	str.w	r0, [r3], #4
   d864e:	4299      	cmp	r1, r3
   d8650:	d8f4      	bhi.n	d863c <__gethex+0x372>
   d8652:	68ab      	ldr	r3, [r5, #8]
   d8654:	459a      	cmp	sl, r3
   d8656:	db12      	blt.n	d867e <__gethex+0x3b4>
   d8658:	6869      	ldr	r1, [r5, #4]
   d865a:	9802      	ldr	r0, [sp, #8]
   d865c:	3101      	adds	r1, #1
   d865e:	f000 f9e7 	bl	d8a30 <_Balloc>
   d8662:	692a      	ldr	r2, [r5, #16]
   d8664:	3202      	adds	r2, #2
   d8666:	f105 010c 	add.w	r1, r5, #12
   d866a:	4683      	mov	fp, r0
   d866c:	0092      	lsls	r2, r2, #2
   d866e:	300c      	adds	r0, #12
   d8670:	f7fe fc4e 	bl	d6f10 <memcpy>
   d8674:	4629      	mov	r1, r5
   d8676:	9802      	ldr	r0, [sp, #8]
   d8678:	f000 fa0f 	bl	d8a9a <_Bfree>
   d867c:	465d      	mov	r5, fp
   d867e:	692b      	ldr	r3, [r5, #16]
   d8680:	1c5a      	adds	r2, r3, #1
   d8682:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   d8686:	612a      	str	r2, [r5, #16]
   d8688:	2201      	movs	r2, #1
   d868a:	615a      	str	r2, [r3, #20]
   d868c:	2f02      	cmp	r7, #2
   d868e:	f105 0214 	add.w	r2, r5, #20
   d8692:	d111      	bne.n	d86b8 <__gethex+0x3ee>
   d8694:	f8d8 3000 	ldr.w	r3, [r8]
   d8698:	3b01      	subs	r3, #1
   d869a:	429e      	cmp	r6, r3
   d869c:	d127      	bne.n	d86ee <__gethex+0x424>
   d869e:	1171      	asrs	r1, r6, #5
   d86a0:	2301      	movs	r3, #1
   d86a2:	f006 061f 	and.w	r6, r6, #31
   d86a6:	fa03 f606 	lsl.w	r6, r3, r6
   d86aa:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   d86ae:	421e      	tst	r6, r3
   d86b0:	bf0c      	ite	eq
   d86b2:	2702      	moveq	r7, #2
   d86b4:	2701      	movne	r7, #1
   d86b6:	e01a      	b.n	d86ee <__gethex+0x424>
   d86b8:	692b      	ldr	r3, [r5, #16]
   d86ba:	459a      	cmp	sl, r3
   d86bc:	da0a      	bge.n	d86d4 <__gethex+0x40a>
   d86be:	2101      	movs	r1, #1
   d86c0:	4628      	mov	r0, r5
   d86c2:	f7ff fdb7 	bl	d8234 <rshift>
   d86c6:	f8d8 3008 	ldr.w	r3, [r8, #8]
   d86ca:	3401      	adds	r4, #1
   d86cc:	429c      	cmp	r4, r3
   d86ce:	f73f af2c 	bgt.w	d852a <__gethex+0x260>
   d86d2:	e00b      	b.n	d86ec <__gethex+0x422>
   d86d4:	f016 061f 	ands.w	r6, r6, #31
   d86d8:	d008      	beq.n	d86ec <__gethex+0x422>
   d86da:	4491      	add	r9, r2
   d86dc:	f1c6 0620 	rsb	r6, r6, #32
   d86e0:	f859 0c04 	ldr.w	r0, [r9, #-4]
   d86e4:	f000 fa69 	bl	d8bba <__hi0bits>
   d86e8:	42b0      	cmp	r0, r6
   d86ea:	dbe8      	blt.n	d86be <__gethex+0x3f4>
   d86ec:	2701      	movs	r7, #1
   d86ee:	f047 0720 	orr.w	r7, r7, #32
   d86f2:	e001      	b.n	d86f8 <__gethex+0x42e>
   d86f4:	f047 0710 	orr.w	r7, r7, #16
   d86f8:	9b14      	ldr	r3, [sp, #80]	; 0x50
   d86fa:	601d      	str	r5, [r3, #0]
   d86fc:	9b06      	ldr	r3, [sp, #24]
   d86fe:	4638      	mov	r0, r7
   d8700:	601c      	str	r4, [r3, #0]
   d8702:	b00b      	add	sp, #44	; 0x2c
   d8704:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d8708 <L_shift>:
   d8708:	f1c2 0208 	rsb	r2, r2, #8
   d870c:	0092      	lsls	r2, r2, #2
   d870e:	b570      	push	{r4, r5, r6, lr}
   d8710:	f1c2 0620 	rsb	r6, r2, #32
   d8714:	6843      	ldr	r3, [r0, #4]
   d8716:	6805      	ldr	r5, [r0, #0]
   d8718:	fa03 f406 	lsl.w	r4, r3, r6
   d871c:	432c      	orrs	r4, r5
   d871e:	40d3      	lsrs	r3, r2
   d8720:	6004      	str	r4, [r0, #0]
   d8722:	f840 3f04 	str.w	r3, [r0, #4]!
   d8726:	4288      	cmp	r0, r1
   d8728:	d3f4      	bcc.n	d8714 <L_shift+0xc>
   d872a:	bd70      	pop	{r4, r5, r6, pc}

000d872c <__match>:
   d872c:	b530      	push	{r4, r5, lr}
   d872e:	6803      	ldr	r3, [r0, #0]
   d8730:	f811 4b01 	ldrb.w	r4, [r1], #1
   d8734:	3301      	adds	r3, #1
   d8736:	b14c      	cbz	r4, d874c <__match+0x20>
   d8738:	781a      	ldrb	r2, [r3, #0]
   d873a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   d873e:	2d19      	cmp	r5, #25
   d8740:	bf98      	it	ls
   d8742:	3220      	addls	r2, #32
   d8744:	42a2      	cmp	r2, r4
   d8746:	d0f3      	beq.n	d8730 <__match+0x4>
   d8748:	2000      	movs	r0, #0
   d874a:	bd30      	pop	{r4, r5, pc}
   d874c:	6003      	str	r3, [r0, #0]
   d874e:	2001      	movs	r0, #1
   d8750:	bd30      	pop	{r4, r5, pc}

000d8752 <__hexnan>:
   d8752:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8756:	680b      	ldr	r3, [r1, #0]
   d8758:	f8d0 b000 	ldr.w	fp, [r0]
   d875c:	115e      	asrs	r6, r3, #5
   d875e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   d8762:	f013 031f 	ands.w	r3, r3, #31
   d8766:	b085      	sub	sp, #20
   d8768:	bf18      	it	ne
   d876a:	3604      	addne	r6, #4
   d876c:	1f35      	subs	r5, r6, #4
   d876e:	4617      	mov	r7, r2
   d8770:	2200      	movs	r2, #0
   d8772:	4682      	mov	sl, r0
   d8774:	9301      	str	r3, [sp, #4]
   d8776:	f846 2c04 	str.w	r2, [r6, #-4]
   d877a:	46a8      	mov	r8, r5
   d877c:	462c      	mov	r4, r5
   d877e:	9200      	str	r2, [sp, #0]
   d8780:	4691      	mov	r9, r2
   d8782:	f81b 1f01 	ldrb.w	r1, [fp, #1]!
   d8786:	2900      	cmp	r1, #0
   d8788:	d03c      	beq.n	d8804 <__hexnan+0xb2>
   d878a:	4608      	mov	r0, r1
   d878c:	9203      	str	r2, [sp, #12]
   d878e:	9102      	str	r1, [sp, #8]
   d8790:	f7ff fd86 	bl	d82a0 <__hexdig_fun>
   d8794:	9a03      	ldr	r2, [sp, #12]
   d8796:	bb00      	cbnz	r0, d87da <__hexnan+0x88>
   d8798:	9902      	ldr	r1, [sp, #8]
   d879a:	2920      	cmp	r1, #32
   d879c:	d816      	bhi.n	d87cc <__hexnan+0x7a>
   d879e:	9b00      	ldr	r3, [sp, #0]
   d87a0:	4599      	cmp	r9, r3
   d87a2:	ddee      	ble.n	d8782 <__hexnan+0x30>
   d87a4:	4544      	cmp	r4, r8
   d87a6:	d205      	bcs.n	d87b4 <__hexnan+0x62>
   d87a8:	2a07      	cmp	r2, #7
   d87aa:	dc03      	bgt.n	d87b4 <__hexnan+0x62>
   d87ac:	4641      	mov	r1, r8
   d87ae:	4620      	mov	r0, r4
   d87b0:	f7ff ffaa 	bl	d8708 <L_shift>
   d87b4:	42bc      	cmp	r4, r7
   d87b6:	d923      	bls.n	d8800 <__hexnan+0xae>
   d87b8:	2300      	movs	r3, #0
   d87ba:	f1a4 0804 	sub.w	r8, r4, #4
   d87be:	f844 3c04 	str.w	r3, [r4, #-4]
   d87c2:	f8cd 9000 	str.w	r9, [sp]
   d87c6:	4644      	mov	r4, r8
   d87c8:	461a      	mov	r2, r3
   d87ca:	e7da      	b.n	d8782 <__hexnan+0x30>
   d87cc:	2929      	cmp	r1, #41	; 0x29
   d87ce:	d148      	bne.n	d8862 <__hexnan+0x110>
   d87d0:	f10b 0301 	add.w	r3, fp, #1
   d87d4:	f8ca 3000 	str.w	r3, [sl]
   d87d8:	e014      	b.n	d8804 <__hexnan+0xb2>
   d87da:	3201      	adds	r2, #1
   d87dc:	2a08      	cmp	r2, #8
   d87de:	f109 0901 	add.w	r9, r9, #1
   d87e2:	dd06      	ble.n	d87f2 <__hexnan+0xa0>
   d87e4:	42bc      	cmp	r4, r7
   d87e6:	d9cc      	bls.n	d8782 <__hexnan+0x30>
   d87e8:	2300      	movs	r3, #0
   d87ea:	f844 3c04 	str.w	r3, [r4, #-4]
   d87ee:	2201      	movs	r2, #1
   d87f0:	3c04      	subs	r4, #4
   d87f2:	6821      	ldr	r1, [r4, #0]
   d87f4:	f000 000f 	and.w	r0, r0, #15
   d87f8:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
   d87fc:	6020      	str	r0, [r4, #0]
   d87fe:	e7c0      	b.n	d8782 <__hexnan+0x30>
   d8800:	2208      	movs	r2, #8
   d8802:	e7be      	b.n	d8782 <__hexnan+0x30>
   d8804:	f1b9 0f00 	cmp.w	r9, #0
   d8808:	d02b      	beq.n	d8862 <__hexnan+0x110>
   d880a:	4544      	cmp	r4, r8
   d880c:	d205      	bcs.n	d881a <__hexnan+0xc8>
   d880e:	2a07      	cmp	r2, #7
   d8810:	dc03      	bgt.n	d881a <__hexnan+0xc8>
   d8812:	4641      	mov	r1, r8
   d8814:	4620      	mov	r0, r4
   d8816:	f7ff ff77 	bl	d8708 <L_shift>
   d881a:	42bc      	cmp	r4, r7
   d881c:	d90c      	bls.n	d8838 <__hexnan+0xe6>
   d881e:	463b      	mov	r3, r7
   d8820:	f854 2b04 	ldr.w	r2, [r4], #4
   d8824:	f843 2b04 	str.w	r2, [r3], #4
   d8828:	42a5      	cmp	r5, r4
   d882a:	d2f9      	bcs.n	d8820 <__hexnan+0xce>
   d882c:	2200      	movs	r2, #0
   d882e:	f843 2b04 	str.w	r2, [r3], #4
   d8832:	429d      	cmp	r5, r3
   d8834:	d2fb      	bcs.n	d882e <__hexnan+0xdc>
   d8836:	e00b      	b.n	d8850 <__hexnan+0xfe>
   d8838:	9b01      	ldr	r3, [sp, #4]
   d883a:	b14b      	cbz	r3, d8850 <__hexnan+0xfe>
   d883c:	f1c3 0220 	rsb	r2, r3, #32
   d8840:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d8844:	40d3      	lsrs	r3, r2
   d8846:	f856 2c04 	ldr.w	r2, [r6, #-4]
   d884a:	4013      	ands	r3, r2
   d884c:	f846 3c04 	str.w	r3, [r6, #-4]
   d8850:	682b      	ldr	r3, [r5, #0]
   d8852:	b943      	cbnz	r3, d8866 <__hexnan+0x114>
   d8854:	42bd      	cmp	r5, r7
   d8856:	d102      	bne.n	d885e <__hexnan+0x10c>
   d8858:	2301      	movs	r3, #1
   d885a:	602b      	str	r3, [r5, #0]
   d885c:	e003      	b.n	d8866 <__hexnan+0x114>
   d885e:	3d04      	subs	r5, #4
   d8860:	e7f6      	b.n	d8850 <__hexnan+0xfe>
   d8862:	2004      	movs	r0, #4
   d8864:	e000      	b.n	d8868 <__hexnan+0x116>
   d8866:	2005      	movs	r0, #5
   d8868:	b005      	add	sp, #20
   d886a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

000d8870 <_findenv_r>:
   d8870:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8874:	4607      	mov	r7, r0
   d8876:	468b      	mov	fp, r1
   d8878:	4690      	mov	r8, r2
   d887a:	f000 fcd6 	bl	d922a <__env_lock>
   d887e:	4b19      	ldr	r3, [pc, #100]	; (d88e4 <_findenv_r+0x74>)
   d8880:	681d      	ldr	r5, [r3, #0]
   d8882:	469a      	mov	sl, r3
   d8884:	b13d      	cbz	r5, d8896 <_findenv_r+0x26>
   d8886:	465c      	mov	r4, fp
   d8888:	4623      	mov	r3, r4
   d888a:	f813 2b01 	ldrb.w	r2, [r3], #1
   d888e:	b142      	cbz	r2, d88a2 <_findenv_r+0x32>
   d8890:	2a3d      	cmp	r2, #61	; 0x3d
   d8892:	461c      	mov	r4, r3
   d8894:	d1f8      	bne.n	d8888 <_findenv_r+0x18>
   d8896:	4638      	mov	r0, r7
   d8898:	f000 fcc8 	bl	d922c <__env_unlock>
   d889c:	2000      	movs	r0, #0
   d889e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d88a2:	ebcb 0404 	rsb	r4, fp, r4
   d88a6:	46a9      	mov	r9, r5
   d88a8:	f859 0b04 	ldr.w	r0, [r9], #4
   d88ac:	2800      	cmp	r0, #0
   d88ae:	d0f2      	beq.n	d8896 <_findenv_r+0x26>
   d88b0:	4622      	mov	r2, r4
   d88b2:	4659      	mov	r1, fp
   d88b4:	f7fe fb9d 	bl	d6ff2 <strncmp>
   d88b8:	b988      	cbnz	r0, d88de <_findenv_r+0x6e>
   d88ba:	f859 3c04 	ldr.w	r3, [r9, #-4]
   d88be:	191e      	adds	r6, r3, r4
   d88c0:	5d1b      	ldrb	r3, [r3, r4]
   d88c2:	2b3d      	cmp	r3, #61	; 0x3d
   d88c4:	d10b      	bne.n	d88de <_findenv_r+0x6e>
   d88c6:	f8da 3000 	ldr.w	r3, [sl]
   d88ca:	1aed      	subs	r5, r5, r3
   d88cc:	10ad      	asrs	r5, r5, #2
   d88ce:	4638      	mov	r0, r7
   d88d0:	f8c8 5000 	str.w	r5, [r8]
   d88d4:	f000 fcaa 	bl	d922c <__env_unlock>
   d88d8:	1c70      	adds	r0, r6, #1
   d88da:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d88de:	464d      	mov	r5, r9
   d88e0:	e7e1      	b.n	d88a6 <_findenv_r+0x36>
   d88e2:	bf00      	nop
   d88e4:	2003e220 	.word	0x2003e220

000d88e8 <_getenv_r>:
   d88e8:	b507      	push	{r0, r1, r2, lr}
   d88ea:	aa01      	add	r2, sp, #4
   d88ec:	f7ff ffc0 	bl	d8870 <_findenv_r>
   d88f0:	b003      	add	sp, #12
   d88f2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d88f8 <__gettzinfo>:
   d88f8:	4800      	ldr	r0, [pc, #0]	; (d88fc <__gettzinfo+0x4>)
   d88fa:	4770      	bx	lr
   d88fc:	2003e1e0 	.word	0x2003e1e0

000d8900 <gmtime_r>:
   d8900:	6802      	ldr	r2, [r0, #0]
   d8902:	4b47      	ldr	r3, [pc, #284]	; (d8a20 <gmtime_r+0x120>)
   d8904:	b5f0      	push	{r4, r5, r6, r7, lr}
   d8906:	fb92 f4f3 	sdiv	r4, r2, r3
   d890a:	fb03 2214 	mls	r2, r3, r4, r2
   d890e:	2a00      	cmp	r2, #0
   d8910:	bfbc      	itt	lt
   d8912:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
   d8916:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
   d891a:	f44f 6061 	mov.w	r0, #3600	; 0xe10
   d891e:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
   d8922:	fb92 f3f0 	sdiv	r3, r2, r0
   d8926:	fb00 2213 	mls	r2, r0, r3, r2
   d892a:	f04f 003c 	mov.w	r0, #60	; 0x3c
   d892e:	bfac      	ite	ge
   d8930:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
   d8934:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
   d8938:	608b      	str	r3, [r1, #8]
   d893a:	fb92 f3f0 	sdiv	r3, r2, r0
   d893e:	fb00 2213 	mls	r2, r0, r3, r2
   d8942:	604b      	str	r3, [r1, #4]
   d8944:	600a      	str	r2, [r1, #0]
   d8946:	2307      	movs	r3, #7
   d8948:	1ce2      	adds	r2, r4, #3
   d894a:	fb92 f3f3 	sdiv	r3, r2, r3
   d894e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   d8952:	1ad3      	subs	r3, r2, r3
   d8954:	618b      	str	r3, [r1, #24]
   d8956:	4b33      	ldr	r3, [pc, #204]	; (d8a24 <gmtime_r+0x124>)
   d8958:	4d33      	ldr	r5, [pc, #204]	; (d8a28 <gmtime_r+0x128>)
   d895a:	fb94 f5f5 	sdiv	r5, r4, r5
   d895e:	fb03 4405 	mla	r4, r3, r5, r4
   d8962:	f648 62ac 	movw	r2, #36524	; 0x8eac
   d8966:	fbb4 f2f2 	udiv	r2, r4, r2
   d896a:	4422      	add	r2, r4
   d896c:	f240 57b4 	movw	r7, #1460	; 0x5b4
   d8970:	fbb4 f3f7 	udiv	r3, r4, r7
   d8974:	1ad2      	subs	r2, r2, r3
   d8976:	482d      	ldr	r0, [pc, #180]	; (d8a2c <gmtime_r+0x12c>)
   d8978:	fbb4 f0f0 	udiv	r0, r4, r0
   d897c:	f648 6694 	movw	r6, #36500	; 0x8e94
   d8980:	1a13      	subs	r3, r2, r0
   d8982:	fbb3 f6f6 	udiv	r6, r3, r6
   d8986:	4434      	add	r4, r6
   d8988:	f240 126d 	movw	r2, #365	; 0x16d
   d898c:	fbb3 f0f2 	udiv	r0, r3, r2
   d8990:	fbb3 f3f7 	udiv	r3, r3, r7
   d8994:	1ae3      	subs	r3, r4, r3
   d8996:	fb02 3310 	mls	r3, r2, r0, r3
   d899a:	2499      	movs	r4, #153	; 0x99
   d899c:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   d89a0:	3202      	adds	r2, #2
   d89a2:	fbb2 f2f4 	udiv	r2, r2, r4
   d89a6:	2a0a      	cmp	r2, #10
   d89a8:	fb04 f402 	mul.w	r4, r4, r2
   d89ac:	f104 0602 	add.w	r6, r4, #2
   d89b0:	f04f 0405 	mov.w	r4, #5
   d89b4:	fbb6 f4f4 	udiv	r4, r6, r4
   d89b8:	bf34      	ite	cc
   d89ba:	2602      	movcc	r6, #2
   d89bc:	f06f 0609 	mvncs.w	r6, #9
   d89c0:	4416      	add	r6, r2
   d89c2:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d89c6:	fb02 0505 	mla	r5, r2, r5, r0
   d89ca:	1c5f      	adds	r7, r3, #1
   d89cc:	2e01      	cmp	r6, #1
   d89ce:	bf98      	it	ls
   d89d0:	3501      	addls	r5, #1
   d89d2:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
   d89d6:	eba7 0704 	sub.w	r7, r7, r4
   d89da:	d302      	bcc.n	d89e2 <gmtime_r+0xe2>
   d89dc:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
   d89e0:	e014      	b.n	d8a0c <gmtime_r+0x10c>
   d89e2:	0782      	lsls	r2, r0, #30
   d89e4:	d105      	bne.n	d89f2 <gmtime_r+0xf2>
   d89e6:	2464      	movs	r4, #100	; 0x64
   d89e8:	fbb0 f2f4 	udiv	r2, r0, r4
   d89ec:	fb04 0212 	mls	r2, r4, r2, r0
   d89f0:	b94a      	cbnz	r2, d8a06 <gmtime_r+0x106>
   d89f2:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d89f6:	fbb0 f4f2 	udiv	r4, r0, r2
   d89fa:	fb02 0014 	mls	r0, r2, r4, r0
   d89fe:	fab0 f280 	clz	r2, r0
   d8a02:	0952      	lsrs	r2, r2, #5
   d8a04:	e000      	b.n	d8a08 <gmtime_r+0x108>
   d8a06:	2201      	movs	r2, #1
   d8a08:	333b      	adds	r3, #59	; 0x3b
   d8a0a:	441a      	add	r2, r3
   d8a0c:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
   d8a10:	2300      	movs	r3, #0
   d8a12:	61ca      	str	r2, [r1, #28]
   d8a14:	614d      	str	r5, [r1, #20]
   d8a16:	610e      	str	r6, [r1, #16]
   d8a18:	60cf      	str	r7, [r1, #12]
   d8a1a:	620b      	str	r3, [r1, #32]
   d8a1c:	4608      	mov	r0, r1
   d8a1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d8a20:	00015180 	.word	0x00015180
   d8a24:	fffdc54f 	.word	0xfffdc54f
   d8a28:	00023ab1 	.word	0x00023ab1
   d8a2c:	00023ab0 	.word	0x00023ab0

000d8a30 <_Balloc>:
   d8a30:	b570      	push	{r4, r5, r6, lr}
   d8a32:	6a45      	ldr	r5, [r0, #36]	; 0x24
   d8a34:	4604      	mov	r4, r0
   d8a36:	460e      	mov	r6, r1
   d8a38:	b93d      	cbnz	r5, d8a4a <_Balloc+0x1a>
   d8a3a:	2010      	movs	r0, #16
   d8a3c:	f7fc f924 	bl	d4c88 <malloc>
   d8a40:	6260      	str	r0, [r4, #36]	; 0x24
   d8a42:	6045      	str	r5, [r0, #4]
   d8a44:	6085      	str	r5, [r0, #8]
   d8a46:	6005      	str	r5, [r0, #0]
   d8a48:	60c5      	str	r5, [r0, #12]
   d8a4a:	6a65      	ldr	r5, [r4, #36]	; 0x24
   d8a4c:	68eb      	ldr	r3, [r5, #12]
   d8a4e:	b143      	cbz	r3, d8a62 <_Balloc+0x32>
   d8a50:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d8a52:	68db      	ldr	r3, [r3, #12]
   d8a54:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
   d8a58:	b178      	cbz	r0, d8a7a <_Balloc+0x4a>
   d8a5a:	6802      	ldr	r2, [r0, #0]
   d8a5c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
   d8a60:	e017      	b.n	d8a92 <_Balloc+0x62>
   d8a62:	2221      	movs	r2, #33	; 0x21
   d8a64:	2104      	movs	r1, #4
   d8a66:	4620      	mov	r0, r4
   d8a68:	f000 fbd1 	bl	d920e <_calloc_r>
   d8a6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d8a6e:	60e8      	str	r0, [r5, #12]
   d8a70:	68db      	ldr	r3, [r3, #12]
   d8a72:	2b00      	cmp	r3, #0
   d8a74:	d1ec      	bne.n	d8a50 <_Balloc+0x20>
   d8a76:	2000      	movs	r0, #0
   d8a78:	bd70      	pop	{r4, r5, r6, pc}
   d8a7a:	2101      	movs	r1, #1
   d8a7c:	fa01 f506 	lsl.w	r5, r1, r6
   d8a80:	1d6a      	adds	r2, r5, #5
   d8a82:	0092      	lsls	r2, r2, #2
   d8a84:	4620      	mov	r0, r4
   d8a86:	f000 fbc2 	bl	d920e <_calloc_r>
   d8a8a:	2800      	cmp	r0, #0
   d8a8c:	d0f3      	beq.n	d8a76 <_Balloc+0x46>
   d8a8e:	6046      	str	r6, [r0, #4]
   d8a90:	6085      	str	r5, [r0, #8]
   d8a92:	2300      	movs	r3, #0
   d8a94:	6103      	str	r3, [r0, #16]
   d8a96:	60c3      	str	r3, [r0, #12]
   d8a98:	bd70      	pop	{r4, r5, r6, pc}

000d8a9a <_Bfree>:
   d8a9a:	b570      	push	{r4, r5, r6, lr}
   d8a9c:	6a44      	ldr	r4, [r0, #36]	; 0x24
   d8a9e:	4606      	mov	r6, r0
   d8aa0:	460d      	mov	r5, r1
   d8aa2:	b93c      	cbnz	r4, d8ab4 <_Bfree+0x1a>
   d8aa4:	2010      	movs	r0, #16
   d8aa6:	f7fc f8ef 	bl	d4c88 <malloc>
   d8aaa:	6270      	str	r0, [r6, #36]	; 0x24
   d8aac:	6044      	str	r4, [r0, #4]
   d8aae:	6084      	str	r4, [r0, #8]
   d8ab0:	6004      	str	r4, [r0, #0]
   d8ab2:	60c4      	str	r4, [r0, #12]
   d8ab4:	b13d      	cbz	r5, d8ac6 <_Bfree+0x2c>
   d8ab6:	6a73      	ldr	r3, [r6, #36]	; 0x24
   d8ab8:	686a      	ldr	r2, [r5, #4]
   d8aba:	68db      	ldr	r3, [r3, #12]
   d8abc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   d8ac0:	6029      	str	r1, [r5, #0]
   d8ac2:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   d8ac6:	bd70      	pop	{r4, r5, r6, pc}

000d8ac8 <__multadd>:
   d8ac8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d8acc:	690d      	ldr	r5, [r1, #16]
   d8ace:	461f      	mov	r7, r3
   d8ad0:	4606      	mov	r6, r0
   d8ad2:	460c      	mov	r4, r1
   d8ad4:	f101 0e14 	add.w	lr, r1, #20
   d8ad8:	2300      	movs	r3, #0
   d8ada:	f8de 0000 	ldr.w	r0, [lr]
   d8ade:	b281      	uxth	r1, r0
   d8ae0:	fb02 7101 	mla	r1, r2, r1, r7
   d8ae4:	0c0f      	lsrs	r7, r1, #16
   d8ae6:	0c00      	lsrs	r0, r0, #16
   d8ae8:	fb02 7000 	mla	r0, r2, r0, r7
   d8aec:	b289      	uxth	r1, r1
   d8aee:	3301      	adds	r3, #1
   d8af0:	eb01 4100 	add.w	r1, r1, r0, lsl #16
   d8af4:	429d      	cmp	r5, r3
   d8af6:	ea4f 4710 	mov.w	r7, r0, lsr #16
   d8afa:	f84e 1b04 	str.w	r1, [lr], #4
   d8afe:	dcec      	bgt.n	d8ada <__multadd+0x12>
   d8b00:	b1d7      	cbz	r7, d8b38 <__multadd+0x70>
   d8b02:	68a3      	ldr	r3, [r4, #8]
   d8b04:	429d      	cmp	r5, r3
   d8b06:	db12      	blt.n	d8b2e <__multadd+0x66>
   d8b08:	6861      	ldr	r1, [r4, #4]
   d8b0a:	4630      	mov	r0, r6
   d8b0c:	3101      	adds	r1, #1
   d8b0e:	f7ff ff8f 	bl	d8a30 <_Balloc>
   d8b12:	6922      	ldr	r2, [r4, #16]
   d8b14:	3202      	adds	r2, #2
   d8b16:	f104 010c 	add.w	r1, r4, #12
   d8b1a:	4680      	mov	r8, r0
   d8b1c:	0092      	lsls	r2, r2, #2
   d8b1e:	300c      	adds	r0, #12
   d8b20:	f7fe f9f6 	bl	d6f10 <memcpy>
   d8b24:	4621      	mov	r1, r4
   d8b26:	4630      	mov	r0, r6
   d8b28:	f7ff ffb7 	bl	d8a9a <_Bfree>
   d8b2c:	4644      	mov	r4, r8
   d8b2e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   d8b32:	3501      	adds	r5, #1
   d8b34:	615f      	str	r7, [r3, #20]
   d8b36:	6125      	str	r5, [r4, #16]
   d8b38:	4620      	mov	r0, r4
   d8b3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d8b3e <__s2b>:
   d8b3e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d8b42:	460c      	mov	r4, r1
   d8b44:	4615      	mov	r5, r2
   d8b46:	461f      	mov	r7, r3
   d8b48:	2209      	movs	r2, #9
   d8b4a:	3308      	adds	r3, #8
   d8b4c:	4606      	mov	r6, r0
   d8b4e:	fb93 f3f2 	sdiv	r3, r3, r2
   d8b52:	2100      	movs	r1, #0
   d8b54:	2201      	movs	r2, #1
   d8b56:	429a      	cmp	r2, r3
   d8b58:	da02      	bge.n	d8b60 <__s2b+0x22>
   d8b5a:	0052      	lsls	r2, r2, #1
   d8b5c:	3101      	adds	r1, #1
   d8b5e:	e7fa      	b.n	d8b56 <__s2b+0x18>
   d8b60:	4630      	mov	r0, r6
   d8b62:	f7ff ff65 	bl	d8a30 <_Balloc>
   d8b66:	9b08      	ldr	r3, [sp, #32]
   d8b68:	6143      	str	r3, [r0, #20]
   d8b6a:	2d09      	cmp	r5, #9
   d8b6c:	f04f 0301 	mov.w	r3, #1
   d8b70:	6103      	str	r3, [r0, #16]
   d8b72:	dd11      	ble.n	d8b98 <__s2b+0x5a>
   d8b74:	f104 0809 	add.w	r8, r4, #9
   d8b78:	46c1      	mov	r9, r8
   d8b7a:	442c      	add	r4, r5
   d8b7c:	f819 3b01 	ldrb.w	r3, [r9], #1
   d8b80:	4601      	mov	r1, r0
   d8b82:	3b30      	subs	r3, #48	; 0x30
   d8b84:	220a      	movs	r2, #10
   d8b86:	4630      	mov	r0, r6
   d8b88:	f7ff ff9e 	bl	d8ac8 <__multadd>
   d8b8c:	45a1      	cmp	r9, r4
   d8b8e:	d1f5      	bne.n	d8b7c <__s2b+0x3e>
   d8b90:	eb08 0405 	add.w	r4, r8, r5
   d8b94:	3c08      	subs	r4, #8
   d8b96:	e001      	b.n	d8b9c <__s2b+0x5e>
   d8b98:	340a      	adds	r4, #10
   d8b9a:	2509      	movs	r5, #9
   d8b9c:	1b2d      	subs	r5, r5, r4
   d8b9e:	1963      	adds	r3, r4, r5
   d8ba0:	429f      	cmp	r7, r3
   d8ba2:	dd08      	ble.n	d8bb6 <__s2b+0x78>
   d8ba4:	f814 3b01 	ldrb.w	r3, [r4], #1
   d8ba8:	4601      	mov	r1, r0
   d8baa:	3b30      	subs	r3, #48	; 0x30
   d8bac:	220a      	movs	r2, #10
   d8bae:	4630      	mov	r0, r6
   d8bb0:	f7ff ff8a 	bl	d8ac8 <__multadd>
   d8bb4:	e7f3      	b.n	d8b9e <__s2b+0x60>
   d8bb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d8bba <__hi0bits>:
   d8bba:	0c03      	lsrs	r3, r0, #16
   d8bbc:	041b      	lsls	r3, r3, #16
   d8bbe:	b913      	cbnz	r3, d8bc6 <__hi0bits+0xc>
   d8bc0:	0400      	lsls	r0, r0, #16
   d8bc2:	2310      	movs	r3, #16
   d8bc4:	e000      	b.n	d8bc8 <__hi0bits+0xe>
   d8bc6:	2300      	movs	r3, #0
   d8bc8:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   d8bcc:	bf04      	itt	eq
   d8bce:	0200      	lsleq	r0, r0, #8
   d8bd0:	3308      	addeq	r3, #8
   d8bd2:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   d8bd6:	bf04      	itt	eq
   d8bd8:	0100      	lsleq	r0, r0, #4
   d8bda:	3304      	addeq	r3, #4
   d8bdc:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   d8be0:	bf04      	itt	eq
   d8be2:	0080      	lsleq	r0, r0, #2
   d8be4:	3302      	addeq	r3, #2
   d8be6:	2800      	cmp	r0, #0
   d8be8:	db03      	blt.n	d8bf2 <__hi0bits+0x38>
   d8bea:	0042      	lsls	r2, r0, #1
   d8bec:	d503      	bpl.n	d8bf6 <__hi0bits+0x3c>
   d8bee:	1c58      	adds	r0, r3, #1
   d8bf0:	4770      	bx	lr
   d8bf2:	4618      	mov	r0, r3
   d8bf4:	4770      	bx	lr
   d8bf6:	2020      	movs	r0, #32
   d8bf8:	4770      	bx	lr

000d8bfa <__lo0bits>:
   d8bfa:	6803      	ldr	r3, [r0, #0]
   d8bfc:	f013 0207 	ands.w	r2, r3, #7
   d8c00:	d00b      	beq.n	d8c1a <__lo0bits+0x20>
   d8c02:	07d9      	lsls	r1, r3, #31
   d8c04:	d422      	bmi.n	d8c4c <__lo0bits+0x52>
   d8c06:	079a      	lsls	r2, r3, #30
   d8c08:	bf4b      	itete	mi
   d8c0a:	085b      	lsrmi	r3, r3, #1
   d8c0c:	089b      	lsrpl	r3, r3, #2
   d8c0e:	6003      	strmi	r3, [r0, #0]
   d8c10:	6003      	strpl	r3, [r0, #0]
   d8c12:	bf4c      	ite	mi
   d8c14:	2001      	movmi	r0, #1
   d8c16:	2002      	movpl	r0, #2
   d8c18:	4770      	bx	lr
   d8c1a:	b299      	uxth	r1, r3
   d8c1c:	b909      	cbnz	r1, d8c22 <__lo0bits+0x28>
   d8c1e:	0c1b      	lsrs	r3, r3, #16
   d8c20:	2210      	movs	r2, #16
   d8c22:	f013 0fff 	tst.w	r3, #255	; 0xff
   d8c26:	bf04      	itt	eq
   d8c28:	0a1b      	lsreq	r3, r3, #8
   d8c2a:	3208      	addeq	r2, #8
   d8c2c:	0719      	lsls	r1, r3, #28
   d8c2e:	bf04      	itt	eq
   d8c30:	091b      	lsreq	r3, r3, #4
   d8c32:	3204      	addeq	r2, #4
   d8c34:	0799      	lsls	r1, r3, #30
   d8c36:	bf04      	itt	eq
   d8c38:	089b      	lsreq	r3, r3, #2
   d8c3a:	3202      	addeq	r2, #2
   d8c3c:	07d9      	lsls	r1, r3, #31
   d8c3e:	d402      	bmi.n	d8c46 <__lo0bits+0x4c>
   d8c40:	085b      	lsrs	r3, r3, #1
   d8c42:	d005      	beq.n	d8c50 <__lo0bits+0x56>
   d8c44:	3201      	adds	r2, #1
   d8c46:	6003      	str	r3, [r0, #0]
   d8c48:	4610      	mov	r0, r2
   d8c4a:	4770      	bx	lr
   d8c4c:	2000      	movs	r0, #0
   d8c4e:	4770      	bx	lr
   d8c50:	2020      	movs	r0, #32
   d8c52:	4770      	bx	lr

000d8c54 <__i2b>:
   d8c54:	b510      	push	{r4, lr}
   d8c56:	460c      	mov	r4, r1
   d8c58:	2101      	movs	r1, #1
   d8c5a:	f7ff fee9 	bl	d8a30 <_Balloc>
   d8c5e:	2201      	movs	r2, #1
   d8c60:	6144      	str	r4, [r0, #20]
   d8c62:	6102      	str	r2, [r0, #16]
   d8c64:	bd10      	pop	{r4, pc}

000d8c66 <__multiply>:
   d8c66:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8c6a:	4614      	mov	r4, r2
   d8c6c:	690a      	ldr	r2, [r1, #16]
   d8c6e:	6923      	ldr	r3, [r4, #16]
   d8c70:	429a      	cmp	r2, r3
   d8c72:	bfb8      	it	lt
   d8c74:	460b      	movlt	r3, r1
   d8c76:	4688      	mov	r8, r1
   d8c78:	bfbc      	itt	lt
   d8c7a:	46a0      	movlt	r8, r4
   d8c7c:	461c      	movlt	r4, r3
   d8c7e:	f8d8 7010 	ldr.w	r7, [r8, #16]
   d8c82:	f8d4 9010 	ldr.w	r9, [r4, #16]
   d8c86:	f8d8 3008 	ldr.w	r3, [r8, #8]
   d8c8a:	f8d8 1004 	ldr.w	r1, [r8, #4]
   d8c8e:	eb07 0609 	add.w	r6, r7, r9
   d8c92:	429e      	cmp	r6, r3
   d8c94:	bfc8      	it	gt
   d8c96:	3101      	addgt	r1, #1
   d8c98:	f7ff feca 	bl	d8a30 <_Balloc>
   d8c9c:	f100 0514 	add.w	r5, r0, #20
   d8ca0:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
   d8ca4:	462b      	mov	r3, r5
   d8ca6:	2200      	movs	r2, #0
   d8ca8:	4563      	cmp	r3, ip
   d8caa:	d202      	bcs.n	d8cb2 <__multiply+0x4c>
   d8cac:	f843 2b04 	str.w	r2, [r3], #4
   d8cb0:	e7fa      	b.n	d8ca8 <__multiply+0x42>
   d8cb2:	f104 0214 	add.w	r2, r4, #20
   d8cb6:	f108 0114 	add.w	r1, r8, #20
   d8cba:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   d8cbe:	eb01 0787 	add.w	r7, r1, r7, lsl #2
   d8cc2:	9300      	str	r3, [sp, #0]
   d8cc4:	9b00      	ldr	r3, [sp, #0]
   d8cc6:	9201      	str	r2, [sp, #4]
   d8cc8:	4293      	cmp	r3, r2
   d8cca:	d957      	bls.n	d8d7c <__multiply+0x116>
   d8ccc:	f8b2 b000 	ldrh.w	fp, [r2]
   d8cd0:	f1bb 0f00 	cmp.w	fp, #0
   d8cd4:	d023      	beq.n	d8d1e <__multiply+0xb8>
   d8cd6:	4689      	mov	r9, r1
   d8cd8:	46ae      	mov	lr, r5
   d8cda:	f04f 0800 	mov.w	r8, #0
   d8cde:	f859 4b04 	ldr.w	r4, [r9], #4
   d8ce2:	f8be a000 	ldrh.w	sl, [lr]
   d8ce6:	b2a3      	uxth	r3, r4
   d8ce8:	fb0b a303 	mla	r3, fp, r3, sl
   d8cec:	ea4f 4a14 	mov.w	sl, r4, lsr #16
   d8cf0:	f8de 4000 	ldr.w	r4, [lr]
   d8cf4:	4443      	add	r3, r8
   d8cf6:	ea4f 4814 	mov.w	r8, r4, lsr #16
   d8cfa:	fb0b 840a 	mla	r4, fp, sl, r8
   d8cfe:	eb04 4413 	add.w	r4, r4, r3, lsr #16
   d8d02:	46f2      	mov	sl, lr
   d8d04:	b29b      	uxth	r3, r3
   d8d06:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
   d8d0a:	454f      	cmp	r7, r9
   d8d0c:	ea4f 4814 	mov.w	r8, r4, lsr #16
   d8d10:	f84a 3b04 	str.w	r3, [sl], #4
   d8d14:	d901      	bls.n	d8d1a <__multiply+0xb4>
   d8d16:	46d6      	mov	lr, sl
   d8d18:	e7e1      	b.n	d8cde <__multiply+0x78>
   d8d1a:	f8ce 8004 	str.w	r8, [lr, #4]
   d8d1e:	9b01      	ldr	r3, [sp, #4]
   d8d20:	f8b3 a002 	ldrh.w	sl, [r3, #2]
   d8d24:	3204      	adds	r2, #4
   d8d26:	f1ba 0f00 	cmp.w	sl, #0
   d8d2a:	d021      	beq.n	d8d70 <__multiply+0x10a>
   d8d2c:	682b      	ldr	r3, [r5, #0]
   d8d2e:	462c      	mov	r4, r5
   d8d30:	4689      	mov	r9, r1
   d8d32:	f04f 0800 	mov.w	r8, #0
   d8d36:	f8b9 e000 	ldrh.w	lr, [r9]
   d8d3a:	f8b4 b002 	ldrh.w	fp, [r4, #2]
   d8d3e:	fb0a be0e 	mla	lr, sl, lr, fp
   d8d42:	44f0      	add	r8, lr
   d8d44:	46a3      	mov	fp, r4
   d8d46:	b29b      	uxth	r3, r3
   d8d48:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   d8d4c:	f84b 3b04 	str.w	r3, [fp], #4
   d8d50:	f859 3b04 	ldr.w	r3, [r9], #4
   d8d54:	f8b4 e004 	ldrh.w	lr, [r4, #4]
   d8d58:	0c1b      	lsrs	r3, r3, #16
   d8d5a:	fb0a e303 	mla	r3, sl, r3, lr
   d8d5e:	eb03 4318 	add.w	r3, r3, r8, lsr #16
   d8d62:	454f      	cmp	r7, r9
   d8d64:	ea4f 4813 	mov.w	r8, r3, lsr #16
   d8d68:	d901      	bls.n	d8d6e <__multiply+0x108>
   d8d6a:	465c      	mov	r4, fp
   d8d6c:	e7e3      	b.n	d8d36 <__multiply+0xd0>
   d8d6e:	6063      	str	r3, [r4, #4]
   d8d70:	3504      	adds	r5, #4
   d8d72:	e7a7      	b.n	d8cc4 <__multiply+0x5e>
   d8d74:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
   d8d78:	b913      	cbnz	r3, d8d80 <__multiply+0x11a>
   d8d7a:	3e01      	subs	r6, #1
   d8d7c:	2e00      	cmp	r6, #0
   d8d7e:	dcf9      	bgt.n	d8d74 <__multiply+0x10e>
   d8d80:	6106      	str	r6, [r0, #16]
   d8d82:	b003      	add	sp, #12
   d8d84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d8d88 <__pow5mult>:
   d8d88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d8d8c:	4615      	mov	r5, r2
   d8d8e:	f012 0203 	ands.w	r2, r2, #3
   d8d92:	4606      	mov	r6, r0
   d8d94:	460f      	mov	r7, r1
   d8d96:	d007      	beq.n	d8da8 <__pow5mult+0x20>
   d8d98:	3a01      	subs	r2, #1
   d8d9a:	4c21      	ldr	r4, [pc, #132]	; (d8e20 <__pow5mult+0x98>)
   d8d9c:	2300      	movs	r3, #0
   d8d9e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   d8da2:	f7ff fe91 	bl	d8ac8 <__multadd>
   d8da6:	4607      	mov	r7, r0
   d8da8:	10ad      	asrs	r5, r5, #2
   d8daa:	d036      	beq.n	d8e1a <__pow5mult+0x92>
   d8dac:	6a74      	ldr	r4, [r6, #36]	; 0x24
   d8dae:	b93c      	cbnz	r4, d8dc0 <__pow5mult+0x38>
   d8db0:	2010      	movs	r0, #16
   d8db2:	f7fb ff69 	bl	d4c88 <malloc>
   d8db6:	6270      	str	r0, [r6, #36]	; 0x24
   d8db8:	6044      	str	r4, [r0, #4]
   d8dba:	6084      	str	r4, [r0, #8]
   d8dbc:	6004      	str	r4, [r0, #0]
   d8dbe:	60c4      	str	r4, [r0, #12]
   d8dc0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   d8dc4:	f8d8 4008 	ldr.w	r4, [r8, #8]
   d8dc8:	b94c      	cbnz	r4, d8dde <__pow5mult+0x56>
   d8dca:	f240 2171 	movw	r1, #625	; 0x271
   d8dce:	4630      	mov	r0, r6
   d8dd0:	f7ff ff40 	bl	d8c54 <__i2b>
   d8dd4:	2300      	movs	r3, #0
   d8dd6:	f8c8 0008 	str.w	r0, [r8, #8]
   d8dda:	4604      	mov	r4, r0
   d8ddc:	6003      	str	r3, [r0, #0]
   d8dde:	f04f 0800 	mov.w	r8, #0
   d8de2:	07eb      	lsls	r3, r5, #31
   d8de4:	d50a      	bpl.n	d8dfc <__pow5mult+0x74>
   d8de6:	4639      	mov	r1, r7
   d8de8:	4622      	mov	r2, r4
   d8dea:	4630      	mov	r0, r6
   d8dec:	f7ff ff3b 	bl	d8c66 <__multiply>
   d8df0:	4639      	mov	r1, r7
   d8df2:	4681      	mov	r9, r0
   d8df4:	4630      	mov	r0, r6
   d8df6:	f7ff fe50 	bl	d8a9a <_Bfree>
   d8dfa:	464f      	mov	r7, r9
   d8dfc:	106d      	asrs	r5, r5, #1
   d8dfe:	d00c      	beq.n	d8e1a <__pow5mult+0x92>
   d8e00:	6820      	ldr	r0, [r4, #0]
   d8e02:	b108      	cbz	r0, d8e08 <__pow5mult+0x80>
   d8e04:	4604      	mov	r4, r0
   d8e06:	e7ec      	b.n	d8de2 <__pow5mult+0x5a>
   d8e08:	4622      	mov	r2, r4
   d8e0a:	4621      	mov	r1, r4
   d8e0c:	4630      	mov	r0, r6
   d8e0e:	f7ff ff2a 	bl	d8c66 <__multiply>
   d8e12:	6020      	str	r0, [r4, #0]
   d8e14:	f8c0 8000 	str.w	r8, [r0]
   d8e18:	e7f4      	b.n	d8e04 <__pow5mult+0x7c>
   d8e1a:	4638      	mov	r0, r7
   d8e1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d8e20:	000d9c08 	.word	0x000d9c08

000d8e24 <__lshift>:
   d8e24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d8e28:	460c      	mov	r4, r1
   d8e2a:	ea4f 1a62 	mov.w	sl, r2, asr #5
   d8e2e:	6926      	ldr	r6, [r4, #16]
   d8e30:	6849      	ldr	r1, [r1, #4]
   d8e32:	68a3      	ldr	r3, [r4, #8]
   d8e34:	4456      	add	r6, sl
   d8e36:	4607      	mov	r7, r0
   d8e38:	4691      	mov	r9, r2
   d8e3a:	1c75      	adds	r5, r6, #1
   d8e3c:	42ab      	cmp	r3, r5
   d8e3e:	da02      	bge.n	d8e46 <__lshift+0x22>
   d8e40:	3101      	adds	r1, #1
   d8e42:	005b      	lsls	r3, r3, #1
   d8e44:	e7fa      	b.n	d8e3c <__lshift+0x18>
   d8e46:	4638      	mov	r0, r7
   d8e48:	f7ff fdf2 	bl	d8a30 <_Balloc>
   d8e4c:	2300      	movs	r3, #0
   d8e4e:	4680      	mov	r8, r0
   d8e50:	f100 0114 	add.w	r1, r0, #20
   d8e54:	461a      	mov	r2, r3
   d8e56:	4553      	cmp	r3, sl
   d8e58:	da03      	bge.n	d8e62 <__lshift+0x3e>
   d8e5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   d8e5e:	3301      	adds	r3, #1
   d8e60:	e7f9      	b.n	d8e56 <__lshift+0x32>
   d8e62:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
   d8e66:	6920      	ldr	r0, [r4, #16]
   d8e68:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   d8e6c:	f019 091f 	ands.w	r9, r9, #31
   d8e70:	f104 0114 	add.w	r1, r4, #20
   d8e74:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
   d8e78:	d014      	beq.n	d8ea4 <__lshift+0x80>
   d8e7a:	f1c9 0c20 	rsb	ip, r9, #32
   d8e7e:	2200      	movs	r2, #0
   d8e80:	6808      	ldr	r0, [r1, #0]
   d8e82:	fa00 f009 	lsl.w	r0, r0, r9
   d8e86:	4302      	orrs	r2, r0
   d8e88:	469a      	mov	sl, r3
   d8e8a:	f843 2b04 	str.w	r2, [r3], #4
   d8e8e:	f851 2b04 	ldr.w	r2, [r1], #4
   d8e92:	458e      	cmp	lr, r1
   d8e94:	fa22 f20c 	lsr.w	r2, r2, ip
   d8e98:	d8f2      	bhi.n	d8e80 <__lshift+0x5c>
   d8e9a:	f8ca 2004 	str.w	r2, [sl, #4]
   d8e9e:	b142      	cbz	r2, d8eb2 <__lshift+0x8e>
   d8ea0:	1cb5      	adds	r5, r6, #2
   d8ea2:	e006      	b.n	d8eb2 <__lshift+0x8e>
   d8ea4:	3b04      	subs	r3, #4
   d8ea6:	f851 2b04 	ldr.w	r2, [r1], #4
   d8eaa:	f843 2f04 	str.w	r2, [r3, #4]!
   d8eae:	458e      	cmp	lr, r1
   d8eb0:	d8f9      	bhi.n	d8ea6 <__lshift+0x82>
   d8eb2:	3d01      	subs	r5, #1
   d8eb4:	4638      	mov	r0, r7
   d8eb6:	f8c8 5010 	str.w	r5, [r8, #16]
   d8eba:	4621      	mov	r1, r4
   d8ebc:	f7ff fded 	bl	d8a9a <_Bfree>
   d8ec0:	4640      	mov	r0, r8
   d8ec2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d8ec6 <__mcmp>:
   d8ec6:	6903      	ldr	r3, [r0, #16]
   d8ec8:	690a      	ldr	r2, [r1, #16]
   d8eca:	1a9b      	subs	r3, r3, r2
   d8ecc:	b510      	push	{r4, lr}
   d8ece:	d111      	bne.n	d8ef4 <__mcmp+0x2e>
   d8ed0:	0092      	lsls	r2, r2, #2
   d8ed2:	3014      	adds	r0, #20
   d8ed4:	3114      	adds	r1, #20
   d8ed6:	1883      	adds	r3, r0, r2
   d8ed8:	440a      	add	r2, r1
   d8eda:	f853 4d04 	ldr.w	r4, [r3, #-4]!
   d8ede:	f852 1d04 	ldr.w	r1, [r2, #-4]!
   d8ee2:	428c      	cmp	r4, r1
   d8ee4:	d002      	beq.n	d8eec <__mcmp+0x26>
   d8ee6:	d307      	bcc.n	d8ef8 <__mcmp+0x32>
   d8ee8:	2001      	movs	r0, #1
   d8eea:	bd10      	pop	{r4, pc}
   d8eec:	4298      	cmp	r0, r3
   d8eee:	d3f4      	bcc.n	d8eda <__mcmp+0x14>
   d8ef0:	2000      	movs	r0, #0
   d8ef2:	bd10      	pop	{r4, pc}
   d8ef4:	4618      	mov	r0, r3
   d8ef6:	bd10      	pop	{r4, pc}
   d8ef8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d8efc:	bd10      	pop	{r4, pc}

000d8efe <__mdiff>:
   d8efe:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d8f02:	460c      	mov	r4, r1
   d8f04:	4607      	mov	r7, r0
   d8f06:	4611      	mov	r1, r2
   d8f08:	4620      	mov	r0, r4
   d8f0a:	4615      	mov	r5, r2
   d8f0c:	f7ff ffdb 	bl	d8ec6 <__mcmp>
   d8f10:	1e06      	subs	r6, r0, #0
   d8f12:	d108      	bne.n	d8f26 <__mdiff+0x28>
   d8f14:	4631      	mov	r1, r6
   d8f16:	4638      	mov	r0, r7
   d8f18:	f7ff fd8a 	bl	d8a30 <_Balloc>
   d8f1c:	2301      	movs	r3, #1
   d8f1e:	6103      	str	r3, [r0, #16]
   d8f20:	6146      	str	r6, [r0, #20]
   d8f22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d8f26:	bfbc      	itt	lt
   d8f28:	4623      	movlt	r3, r4
   d8f2a:	462c      	movlt	r4, r5
   d8f2c:	4638      	mov	r0, r7
   d8f2e:	6861      	ldr	r1, [r4, #4]
   d8f30:	bfba      	itte	lt
   d8f32:	461d      	movlt	r5, r3
   d8f34:	2601      	movlt	r6, #1
   d8f36:	2600      	movge	r6, #0
   d8f38:	f7ff fd7a 	bl	d8a30 <_Balloc>
   d8f3c:	692b      	ldr	r3, [r5, #16]
   d8f3e:	60c6      	str	r6, [r0, #12]
   d8f40:	6926      	ldr	r6, [r4, #16]
   d8f42:	f105 0914 	add.w	r9, r5, #20
   d8f46:	3414      	adds	r4, #20
   d8f48:	eb04 0786 	add.w	r7, r4, r6, lsl #2
   d8f4c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
   d8f50:	f100 0514 	add.w	r5, r0, #20
   d8f54:	f04f 0c00 	mov.w	ip, #0
   d8f58:	f854 3b04 	ldr.w	r3, [r4], #4
   d8f5c:	f859 2b04 	ldr.w	r2, [r9], #4
   d8f60:	fa1c f183 	uxtah	r1, ip, r3
   d8f64:	fa1f fe82 	uxth.w	lr, r2
   d8f68:	0c12      	lsrs	r2, r2, #16
   d8f6a:	ebce 0101 	rsb	r1, lr, r1
   d8f6e:	ebc2 4313 	rsb	r3, r2, r3, lsr #16
   d8f72:	eb03 4321 	add.w	r3, r3, r1, asr #16
   d8f76:	b289      	uxth	r1, r1
   d8f78:	ea4f 4c23 	mov.w	ip, r3, asr #16
   d8f7c:	45c8      	cmp	r8, r9
   d8f7e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
   d8f82:	46a6      	mov	lr, r4
   d8f84:	f845 3b04 	str.w	r3, [r5], #4
   d8f88:	d8e6      	bhi.n	d8f58 <__mdiff+0x5a>
   d8f8a:	45be      	cmp	lr, r7
   d8f8c:	d20e      	bcs.n	d8fac <__mdiff+0xae>
   d8f8e:	f85e 1b04 	ldr.w	r1, [lr], #4
   d8f92:	fa1c f281 	uxtah	r2, ip, r1
   d8f96:	1413      	asrs	r3, r2, #16
   d8f98:	eb03 4311 	add.w	r3, r3, r1, lsr #16
   d8f9c:	b292      	uxth	r2, r2
   d8f9e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   d8fa2:	ea4f 4c23 	mov.w	ip, r3, asr #16
   d8fa6:	f845 2b04 	str.w	r2, [r5], #4
   d8faa:	e7ee      	b.n	d8f8a <__mdiff+0x8c>
   d8fac:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   d8fb0:	b90b      	cbnz	r3, d8fb6 <__mdiff+0xb8>
   d8fb2:	3e01      	subs	r6, #1
   d8fb4:	e7fa      	b.n	d8fac <__mdiff+0xae>
   d8fb6:	6106      	str	r6, [r0, #16]
   d8fb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d8fbc <__ulp>:
   d8fbc:	4b12      	ldr	r3, [pc, #72]	; (d9008 <__ulp+0x4c>)
   d8fbe:	ee10 2a90 	vmov	r2, s1
   d8fc2:	401a      	ands	r2, r3
   d8fc4:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
   d8fc8:	2b00      	cmp	r3, #0
   d8fca:	dd02      	ble.n	d8fd2 <__ulp+0x16>
   d8fcc:	2000      	movs	r0, #0
   d8fce:	4619      	mov	r1, r3
   d8fd0:	e017      	b.n	d9002 <__ulp+0x46>
   d8fd2:	425b      	negs	r3, r3
   d8fd4:	151b      	asrs	r3, r3, #20
   d8fd6:	2b13      	cmp	r3, #19
   d8fd8:	f04f 0000 	mov.w	r0, #0
   d8fdc:	f04f 0100 	mov.w	r1, #0
   d8fe0:	dc04      	bgt.n	d8fec <__ulp+0x30>
   d8fe2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   d8fe6:	fa42 f103 	asr.w	r1, r2, r3
   d8fea:	e00a      	b.n	d9002 <__ulp+0x46>
   d8fec:	3b14      	subs	r3, #20
   d8fee:	2b1e      	cmp	r3, #30
   d8ff0:	f04f 0201 	mov.w	r2, #1
   d8ff4:	bfda      	itte	le
   d8ff6:	f1c3 031f 	rsble	r3, r3, #31
   d8ffa:	fa02 f303 	lslle.w	r3, r2, r3
   d8ffe:	4613      	movgt	r3, r2
   d9000:	4618      	mov	r0, r3
   d9002:	ec41 0b10 	vmov	d0, r0, r1
   d9006:	4770      	bx	lr
   d9008:	7ff00000 	.word	0x7ff00000

000d900c <__b2d>:
   d900c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d900e:	6905      	ldr	r5, [r0, #16]
   d9010:	f100 0614 	add.w	r6, r0, #20
   d9014:	eb06 0585 	add.w	r5, r6, r5, lsl #2
   d9018:	1f2f      	subs	r7, r5, #4
   d901a:	f855 4c04 	ldr.w	r4, [r5, #-4]
   d901e:	4620      	mov	r0, r4
   d9020:	f7ff fdcb 	bl	d8bba <__hi0bits>
   d9024:	f1c0 0320 	rsb	r3, r0, #32
   d9028:	280a      	cmp	r0, #10
   d902a:	600b      	str	r3, [r1, #0]
   d902c:	dc14      	bgt.n	d9058 <__b2d+0x4c>
   d902e:	f1c0 0e0b 	rsb	lr, r0, #11
   d9032:	fa24 f10e 	lsr.w	r1, r4, lr
   d9036:	42be      	cmp	r6, r7
   d9038:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
   d903c:	bf34      	ite	cc
   d903e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   d9042:	2100      	movcs	r1, #0
   d9044:	3015      	adds	r0, #21
   d9046:	fa04 f000 	lsl.w	r0, r4, r0
   d904a:	fa21 f10e 	lsr.w	r1, r1, lr
   d904e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   d9052:	ea40 0201 	orr.w	r2, r0, r1
   d9056:	e023      	b.n	d90a0 <__b2d+0x94>
   d9058:	42be      	cmp	r6, r7
   d905a:	bf3a      	itte	cc
   d905c:	f1a5 0708 	subcc.w	r7, r5, #8
   d9060:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   d9064:	2100      	movcs	r1, #0
   d9066:	380b      	subs	r0, #11
   d9068:	d015      	beq.n	d9096 <__b2d+0x8a>
   d906a:	4084      	lsls	r4, r0
   d906c:	f1c0 0520 	rsb	r5, r0, #32
   d9070:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
   d9074:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
   d9078:	42b7      	cmp	r7, r6
   d907a:	fa21 fe05 	lsr.w	lr, r1, r5
   d907e:	ea44 030e 	orr.w	r3, r4, lr
   d9082:	bf8c      	ite	hi
   d9084:	f857 4c04 	ldrhi.w	r4, [r7, #-4]
   d9088:	2400      	movls	r4, #0
   d908a:	fa01 f000 	lsl.w	r0, r1, r0
   d908e:	40ec      	lsrs	r4, r5
   d9090:	ea40 0204 	orr.w	r2, r0, r4
   d9094:	e004      	b.n	d90a0 <__b2d+0x94>
   d9096:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
   d909a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   d909e:	460a      	mov	r2, r1
   d90a0:	ec43 2b10 	vmov	d0, r2, r3
   d90a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d90a6 <__d2b>:
   d90a6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d90aa:	460e      	mov	r6, r1
   d90ac:	2101      	movs	r1, #1
   d90ae:	ec59 8b10 	vmov	r8, r9, d0
   d90b2:	4615      	mov	r5, r2
   d90b4:	f7ff fcbc 	bl	d8a30 <_Balloc>
   d90b8:	f3c9 540a 	ubfx	r4, r9, #20, #11
   d90bc:	4607      	mov	r7, r0
   d90be:	f3c9 0313 	ubfx	r3, r9, #0, #20
   d90c2:	b10c      	cbz	r4, d90c8 <__d2b+0x22>
   d90c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d90c8:	9301      	str	r3, [sp, #4]
   d90ca:	f1b8 0f00 	cmp.w	r8, #0
   d90ce:	d019      	beq.n	d9104 <__d2b+0x5e>
   d90d0:	a802      	add	r0, sp, #8
   d90d2:	f840 8d08 	str.w	r8, [r0, #-8]!
   d90d6:	f7ff fd90 	bl	d8bfa <__lo0bits>
   d90da:	9b00      	ldr	r3, [sp, #0]
   d90dc:	b148      	cbz	r0, d90f2 <__d2b+0x4c>
   d90de:	9a01      	ldr	r2, [sp, #4]
   d90e0:	f1c0 0120 	rsb	r1, r0, #32
   d90e4:	fa02 f101 	lsl.w	r1, r2, r1
   d90e8:	430b      	orrs	r3, r1
   d90ea:	40c2      	lsrs	r2, r0
   d90ec:	617b      	str	r3, [r7, #20]
   d90ee:	9201      	str	r2, [sp, #4]
   d90f0:	e000      	b.n	d90f4 <__d2b+0x4e>
   d90f2:	617b      	str	r3, [r7, #20]
   d90f4:	9b01      	ldr	r3, [sp, #4]
   d90f6:	61bb      	str	r3, [r7, #24]
   d90f8:	2b00      	cmp	r3, #0
   d90fa:	bf14      	ite	ne
   d90fc:	2102      	movne	r1, #2
   d90fe:	2101      	moveq	r1, #1
   d9100:	6139      	str	r1, [r7, #16]
   d9102:	e007      	b.n	d9114 <__d2b+0x6e>
   d9104:	a801      	add	r0, sp, #4
   d9106:	f7ff fd78 	bl	d8bfa <__lo0bits>
   d910a:	9b01      	ldr	r3, [sp, #4]
   d910c:	617b      	str	r3, [r7, #20]
   d910e:	2101      	movs	r1, #1
   d9110:	6139      	str	r1, [r7, #16]
   d9112:	3020      	adds	r0, #32
   d9114:	b134      	cbz	r4, d9124 <__d2b+0x7e>
   d9116:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
   d911a:	4404      	add	r4, r0
   d911c:	6034      	str	r4, [r6, #0]
   d911e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   d9122:	e009      	b.n	d9138 <__d2b+0x92>
   d9124:	eb07 0381 	add.w	r3, r7, r1, lsl #2
   d9128:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   d912c:	6030      	str	r0, [r6, #0]
   d912e:	6918      	ldr	r0, [r3, #16]
   d9130:	f7ff fd43 	bl	d8bba <__hi0bits>
   d9134:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
   d9138:	6028      	str	r0, [r5, #0]
   d913a:	4638      	mov	r0, r7
   d913c:	b003      	add	sp, #12
   d913e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d9142 <__ratio>:
   d9142:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d9146:	4688      	mov	r8, r1
   d9148:	4669      	mov	r1, sp
   d914a:	4681      	mov	r9, r0
   d914c:	f7ff ff5e 	bl	d900c <__b2d>
   d9150:	a901      	add	r1, sp, #4
   d9152:	4640      	mov	r0, r8
   d9154:	ec55 4b10 	vmov	r4, r5, d0
   d9158:	f7ff ff58 	bl	d900c <__b2d>
   d915c:	f8d9 3010 	ldr.w	r3, [r9, #16]
   d9160:	f8d8 2010 	ldr.w	r2, [r8, #16]
   d9164:	1a9a      	subs	r2, r3, r2
   d9166:	e89d 000a 	ldmia.w	sp, {r1, r3}
   d916a:	1ac9      	subs	r1, r1, r3
   d916c:	ec57 6b10 	vmov	r6, r7, d0
   d9170:	eb01 1342 	add.w	r3, r1, r2, lsl #5
   d9174:	2b00      	cmp	r3, #0
   d9176:	bfcc      	ite	gt
   d9178:	eb05 5503 	addgt.w	r5, r5, r3, lsl #20
   d917c:	eba7 5703 	suble.w	r7, r7, r3, lsl #20
   d9180:	4632      	mov	r2, r6
   d9182:	463b      	mov	r3, r7
   d9184:	4620      	mov	r0, r4
   d9186:	4629      	mov	r1, r5
   d9188:	f7fd fbac 	bl	d68e4 <__aeabi_ddiv>
   d918c:	ec41 0b10 	vmov	d0, r0, r1
   d9190:	b003      	add	sp, #12
   d9192:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d9196 <__copybits>:
   d9196:	3901      	subs	r1, #1
   d9198:	b510      	push	{r4, lr}
   d919a:	1149      	asrs	r1, r1, #5
   d919c:	6914      	ldr	r4, [r2, #16]
   d919e:	3101      	adds	r1, #1
   d91a0:	f102 0314 	add.w	r3, r2, #20
   d91a4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   d91a8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   d91ac:	42a3      	cmp	r3, r4
   d91ae:	4602      	mov	r2, r0
   d91b0:	d204      	bcs.n	d91bc <__copybits+0x26>
   d91b2:	f853 2b04 	ldr.w	r2, [r3], #4
   d91b6:	f840 2b04 	str.w	r2, [r0], #4
   d91ba:	e7f7      	b.n	d91ac <__copybits+0x16>
   d91bc:	2300      	movs	r3, #0
   d91be:	428a      	cmp	r2, r1
   d91c0:	d202      	bcs.n	d91c8 <__copybits+0x32>
   d91c2:	f842 3b04 	str.w	r3, [r2], #4
   d91c6:	e7fa      	b.n	d91be <__copybits+0x28>
   d91c8:	bd10      	pop	{r4, pc}

000d91ca <__any_on>:
   d91ca:	f100 0214 	add.w	r2, r0, #20
   d91ce:	6900      	ldr	r0, [r0, #16]
   d91d0:	114b      	asrs	r3, r1, #5
   d91d2:	4298      	cmp	r0, r3
   d91d4:	b510      	push	{r4, lr}
   d91d6:	db0c      	blt.n	d91f2 <__any_on+0x28>
   d91d8:	dd0c      	ble.n	d91f4 <__any_on+0x2a>
   d91da:	f011 011f 	ands.w	r1, r1, #31
   d91de:	d009      	beq.n	d91f4 <__any_on+0x2a>
   d91e0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   d91e4:	fa24 f001 	lsr.w	r0, r4, r1
   d91e8:	fa00 f101 	lsl.w	r1, r0, r1
   d91ec:	428c      	cmp	r4, r1
   d91ee:	d10c      	bne.n	d920a <__any_on+0x40>
   d91f0:	e000      	b.n	d91f4 <__any_on+0x2a>
   d91f2:	4603      	mov	r3, r0
   d91f4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   d91f8:	4293      	cmp	r3, r2
   d91fa:	d904      	bls.n	d9206 <__any_on+0x3c>
   d91fc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   d9200:	2900      	cmp	r1, #0
   d9202:	d0f9      	beq.n	d91f8 <__any_on+0x2e>
   d9204:	e001      	b.n	d920a <__any_on+0x40>
   d9206:	2000      	movs	r0, #0
   d9208:	bd10      	pop	{r4, pc}
   d920a:	2001      	movs	r0, #1
   d920c:	bd10      	pop	{r4, pc}

000d920e <_calloc_r>:
   d920e:	b538      	push	{r3, r4, r5, lr}
   d9210:	fb02 f401 	mul.w	r4, r2, r1
   d9214:	4621      	mov	r1, r4
   d9216:	f7fb fd6f 	bl	d4cf8 <_malloc_r>
   d921a:	4605      	mov	r5, r0
   d921c:	b118      	cbz	r0, d9226 <_calloc_r+0x18>
   d921e:	4622      	mov	r2, r4
   d9220:	2100      	movs	r1, #0
   d9222:	f7fd fe80 	bl	d6f26 <memset>
   d9226:	4628      	mov	r0, r5
   d9228:	bd38      	pop	{r3, r4, r5, pc}

000d922a <__env_lock>:
   d922a:	4770      	bx	lr

000d922c <__env_unlock>:
   d922c:	4770      	bx	lr

000d922e <link_code_end>:
	...

000d9230 <dynalib_user>:
   d9230:	4021 000d 405d 000d 4089 000d 408d 000d     !@..]@...@...@..
   d9240:	0000 0000 6f4c 6163 6974 6e6f 6143 6c6c     ....LocationCall
   d9250:	6162 6b63 2928 6c00 7461 253d 2066 6f6c     back().lat=%f lo
   d9260:	3d6e 6625 6120 6363 7275 6361 3d79 6625     n=%f accuracy=%f
   d9270:	2500 362e 0066 2e25 6631 4700 5350 7620     .%.6f.%.1f.GPS v
   d9280:	2e33 0031 6564 6976 6563 6f4c 6163 6f74     3.1.deviceLocato
   d9290:	0072                                        r.

000d9292 <_ZL9BasicFont>:
	...
   d929a:	0000 005f 0000 0000 0000 0007 0007 0000     .._.............
   d92aa:	1400 147f 147f 0000 2400 7f2a 122a 0000     .........$*.*...
   d92ba:	2300 0813 6264 0000 3600 5549 5022 0000     .#..db...6IU"P..
   d92ca:	0000 0305 0000 0000 1c00 4122 0000 0000     .........."A....
   d92da:	4100 1c22 0000 0000 0800 1c2a 082a 0000     .A".......*.*...
   d92ea:	0800 3e08 0808 0000 a000 0060 0000 0000     ...>......`.....
   d92fa:	0800 0808 0808 0000 6000 0060 0000 0000     .........``.....
   d930a:	2000 0810 0204 0000 3e00 4951 3e45 0000     . .......>QIE>..
   d931a:	0000 7f42 0040 0000 6200 4951 4649 0000     ..B.@....bQIIF..
   d932a:	2200 4941 3649 0000 1800 1214 107f 0000     ."AII6..........
   d933a:	2700 4545 3945 0000 3c00 494a 3049 0000     .'EEE9...<JII0..
   d934a:	0100 0971 0305 0000 3600 4949 3649 0000     ..q......6III6..
   d935a:	0600 4949 1e29 0000 0000 3636 0000 0000     ..II).....66....
   d936a:	0000 6cac 0000 0000 0800 2214 0041 0000     ...l......."A...
   d937a:	1400 1414 1414 0000 4100 1422 0008 0000     .........A".....
   d938a:	0200 5101 0609 0000 3200 7949 3e41 0000     ...Q.....2IyA>..
   d939a:	7e00 0909 7e09 0000 7f00 4949 3649 0000     .~...~....III6..
   d93aa:	3e00 4141 2241 0000 7f00 4141 1c22 0000     .>AAA"....AA"...
   d93ba:	7f00 4949 4149 0000 7f00 0909 0109 0000     ..IIIA..........
   d93ca:	3e00 4141 7251 0000 7f00 0808 7f08 0000     .>AAQr..........
   d93da:	4100 417f 0000 0000 2000 4140 013f 0000     .A.A..... @A?...
   d93ea:	7f00 1408 4122 0000 7f00 4040 4040 0000     ...."A....@@@@..
   d93fa:	7f00 0c02 7f02 0000 7f00 0804 7f10 0000     ................
   d940a:	3e00 4141 3e41 0000 7f00 0909 0609 0000     .>AAA>..........
   d941a:	3e00 5141 5e21 0000 7f00 1909 4629 0000     .>AQ!^......)F..
   d942a:	2600 4949 3249 0000 0100 7f01 0101 0000     .&III2..........
   d943a:	3f00 4040 3f40 0000 1f00 4020 1f20 0000     .?@@@?.... @ ...
   d944a:	3f00 3840 3f40 0000 6300 0814 6314 0000     .?@8@?...c...c..
   d945a:	0300 7804 0304 0000 6100 4951 4345 0000     ...x.....aQIEC..
   d946a:	7f00 4141 0000 0000 0200 0804 2010 0000     ..AA......... ..
   d947a:	4100 7f41 0000 0000 0400 0102 0402 0000     .AA.............
   d948a:	8000 8080 8080 0000 0100 0402 0000 0000     ................
   d949a:	2000 5454 7854 0000 7f00 4448 3844 0000     . TTTx....HDD8..
   d94aa:	3800 4444 0028 0000 3800 4444 7f48 0000     .8DD(....8DDH...
   d94ba:	3800 5454 1854 0000 0800 097e 0002 0000     .8TTT.....~.....
   d94ca:	1800 a4a4 7ca4 0000 7f00 0408 7804 0000     .....|.......x..
   d94da:	0000 007d 0000 0000 8000 7d84 0000 0000     ..}........}....
   d94ea:	7f00 2810 0044 0000 4100 407f 0000 0000     ...(D....A.@....
   d94fa:	7c00 1804 7804 0000 7c00 0408 007c 0000     .|...x...|..|...
   d950a:	3800 4444 0038 0000 fc00 2424 0018 0000     .8DD8.....$$....
   d951a:	1800 2424 00fc 0000 0000 087c 0004 0000     ..$$......|.....
   d952a:	4800 5454 0024 0000 0400 447f 0000 0000     .HTT$......D....
   d953a:	3c00 4040 007c 0000 1c00 4020 1c20 0000     .<@@|..... @ ...
   d954a:	3c00 3040 3c40 0000 4400 1028 4428 0000     .<@0@<...D(.(D..
   d955a:	1c00 a0a0 007c 0000 4400 5464 444c 0000     ....|....DdTLD..
   d956a:	0800 4136 0000 0000 0000 007f 0000 0000     ..6A............
   d957a:	4100 0836 0000 0000 0200 0101 0102 0000     .A6.............
   d958a:	0200 0505 0002 0000 0000                    ..........

000d9594 <_ZTV23GoogleMapsDeviceLocator>:
	...
   d959c:	4491 000d 44b1 000d 002c 7325 227b 226d     .D...D..,.%s{"m"
   d95ac:	223a 3025 7832 253a 3230 3a78 3025 7832     :"%02x:%02x:%02x
   d95bc:	253a 3230 3a78 3025 7832 253a 3230 2278     :%02x:%02x:%02x"
   d95cc:	222c 2273 253a 2c64 6322 3a22 6425 007d     ,"s":%d,"c":%d}.
   d95dc:	5441 5426 7b00 7722 3a22 227b 2261 003a     AT&T.{"w":{"a":.
   d95ec:	7570 6c62 7369 4c68 636f 7461 6f69 006e     publishLocation.
   d95fc:	6373 6e61 6144 6174 253d 0073 6f68 6b6f     scanData=%s.hook
   d960c:	722d 7365 6f70 736e 2f65 7325 252f 0073     -response/%s/%s.

000d961c <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d9624:	4db5 000d 4dbb 000d 4dff 000d 4dc9 000d     .M...M...M...M..
   d9634:	4db7 000d                                   .M..

000d9638 <_ZTVN5spark13EthernetClassE>:
	...
   d9640:	53d7 000d 53cd 000d 53c3 000d 53b9 000d     .S...S...S...S..
   d9650:	53ad 000d 53a1 000d 5395 000d 538d 000d     .S...S...S...S..
   d9660:	5383 000d 5379 000d 5771 000d               .S..yS..qW..

000d966c <_ZTV7TwoWire>:
	...
   d9674:	53f5 000d 543f 000d 5417 000d 53f7 000d     .S..?T...T...S..
   d9684:	541f 000d 5427 000d 542f 000d 5437 000d     .T..'T../T..7T..

000d9694 <_ZTV9IPAddress>:
	...
   d969c:	54a9 000d 5499 000d 549b 000d 6162 6475     .T...T...T..baud
   d96ac:	5300 7265 6169 006c 6553 6972 6c61 0031     .Serial.Serial1.
   d96bc:	7974 6570 7000 7261 6d61 6300 646d 6900     type.param.cmd.i
   d96cc:	0064 6e68 0064 7473 6d72 6600 6c69 0074     d.hnd.strm.filt.
   d96dc:	766c 006c 6461 4864 6e61 6c64 7265 7200     lvl.addHandler.r
   d96ec:	6d65 766f 4865 6e61 6c64 7265 6500 756e     emoveHandler.enu
   d96fc:	486d 6e61 6c64 7265 0073 534a 4e4f 7453     mHandlers.JSONSt
   d970c:	6572 6d61 6f4c 4867 6e61 6c64 7265 6100     reamLogHandler.a
   d971c:	7070 2500 3130 7530 0020 205d 2500 0064     pp.%010u .] .%d.
   d972c:	202c 2800 3a29 0020 5b20 6300 646f 2065     , .(): . [.code 
   d973c:	203d 2500 0069 6564 6174 6c69 2073 203d     = .%i.details = 
   d974c:	0d00 000a 6e6c 6600 006e 6f63 6564 6400     ....ln.fn.code.d
   d975c:	7465 6961 006c 6f6e 656e 7400 6172 6563     etail.none.trace
   d976c:	6900 666e 006f 6177 6e72 6500 7272 726f     .info.warn.error
   d977c:	7000 6e61 6369 6100 6c6c 0000               .panic.all..

000d9788 <_ZTVN5spark9MeshClassE>:
	...
   d9790:	55eb 000d 55e1 000d 55d7 000d 55cd 000d     .U...U...U...U..
   d97a0:	55c1 000d 55b5 000d 55a9 000d 55a1 000d     .U...U...U...U..
   d97b0:	5597 000d 558d 000d 5771 000d               .U...U..qW..

000d97bc <_ZTVN5spark12NetworkClassE>:
	...
   d97c4:	5709 000d 5713 000d 571d 000d 5727 000d     .W...W...W..'W..
   d97d4:	5731 000d 573d 000d 5749 000d 5755 000d     1W..=W..IW..UW..
   d97e4:	575d 000d 5767 000d 5771 000d 2b25 3330     ]W..gW..qW..%+03
   d97f4:	3a64 3025 7532 2500 2d59 6d25 252d 5464     d:%02u.%Y-%m-%dT
   d9804:	4825 253a 3a4d 5325 7a25 6100 6373 6974     %H:%M:%S%z.ascti
   d9814:	656d 0000                                   me..

000d9818 <_ZTV11USARTSerial>:
	...
   d9820:	5c31 000d 5c81 000d 5c8f 000d 5851 000d     1\...\...\..QX..
   d9830:	5c45 000d 5c67 000d 5c53 000d 5c7b 000d     E\..g\..S\..{\..
   d9840:	5c33 000d 5c37 000d                         3\..7\..

000d9848 <_ZTV9USBSerial>:
	...
   d9850:	5d31 000d 5d81 000d 5d8f 000d 5851 000d     1]...]...]..QX..
   d9860:	5d6d 000d 5d33 000d 5d49 000d 5d7b 000d     m]..3]..I]..{]..
   d9870:	5d5f 000d 5d2d 000d                         _]..-]..

000d9878 <_ZTVN5spark9WiFiClassE>:
	...
   d9880:	5e9b 000d 5e91 000d 5e87 000d 5e3d 000d     .^...^...^..=^..
   d9890:	5e7b 000d 5e6f 000d 5e63 000d 5e5b 000d     {^..o^..c^..[^..
   d98a0:	5e51 000d 5e47 000d 5771 000d               Q^..G^..qW..

000d98ac <_ZSt7nothrow>:
	...

000d98ad <_ctype_>:
   d98ad:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   d98bd:	2020 2020 2020 2020 2020 2020 2020 2020                     
   d98cd:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   d98dd:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   d98ed:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   d98fd:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   d990d:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   d991d:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   d992d:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000d99b0 <__sf_fake_stdin>:
	...

000d99d0 <__sf_fake_stdout>:
	...

000d99f0 <__sf_fake_stderr>:
	...
   d9a10:	0043 4f50 4953 0058 002e 0000               C.POSIX.....

000d9a1c <__month_lengths>:
   d9a1c:	001f 0000 001c 0000 001f 0000 001e 0000     ................
   d9a2c:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   d9a3c:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   d9a4c:	001f 0000 001d 0000 001f 0000 001e 0000     ................
   d9a5c:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   d9a6c:	001e 0000 001f 0000 001e 0000 001f 0000     ................

000d9a7c <fpi.5344>:
   d9a7c:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   d9a8c:	0000 0000                                   ....

000d9a90 <fpinan.5380>:
   d9a90:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
   d9aa0:	0000 0000 666e 6900 696e 7974 6100 006e     ....nf.inity.an.

000d9ab0 <tinytens>:
   d9ab0:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   d9ac0:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   d9ad0:	6f43 64ac 0628 1168 5a54 4700 544d 2500     Co.d(.h.TZ.GMT.%
   d9ae0:	3031 5e5b 2d30 2c39 2d2b 255d 006e 254d     10[^0-9,+-]%n.M%
   d9af0:	7568 6e25 252e 7568 6e25 252e 7568 6e25     hu%n.%hu%n.%hu%n
   d9b00:	2f00 6825 2575 3a6e 6825 2575 3a6e 6825     ./%hu%n:%hu%n:%h
   d9b10:	2575 006e 0000 0000                         u%n.....

000d9b18 <__mprec_tens>:
   d9b18:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   d9b28:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   d9b38:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   d9b48:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   d9b58:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   d9b68:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   d9b78:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   d9b88:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   d9b98:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   d9ba8:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   d9bb8:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   d9bc8:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   d9bd8:	9db4 79d9 7843 44ea                         ...yCx.D

000d9be0 <__mprec_bigtens>:
   d9be0:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   d9bf0:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   d9c00:	bf3c 7f73 4fdd 7515                         <.s..O.u

000d9c08 <p05.5387>:
   d9c08:	0005 0000 0019 0000 007d 0000               ........}...

000d9c14 <link_const_variable_data_end>:
   d9c14:	000d425d 	.word	0x000d425d
   d9c18:	000d4469 	.word	0x000d4469
   d9c1c:	000d4891 	.word	0x000d4891
   d9c20:	000d4d8d 	.word	0x000d4d8d
   d9c24:	000d53e1 	.word	0x000d53e1
   d9c28:	000d557d 	.word	0x000d557d
   d9c2c:	000d56b9 	.word	0x000d56b9
   d9c30:	000d583d 	.word	0x000d583d
   d9c34:	000d5991 	.word	0x000d5991
   d9c38:	000d5aa1 	.word	0x000d5aa1
   d9c3c:	000d5c1d 	.word	0x000d5c1d
   d9c40:	000d5ea5 	.word	0x000d5ea5
   d9c44:	000d6091 	.word	0x000d6091
   d9c48:	000d6155 	.word	0x000d6155
   d9c4c:	000d61d9 	.word	0x000d61d9
   d9c50:	000d625d 	.word	0x000d625d

000d9c54 <link_constructors_end>:
	...
