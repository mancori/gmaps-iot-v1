
/Users/manuel/IoT_maps/gmaps-iot-v1/target/1.5.1/boron/gmaps-iot-v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00006ef0  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000daf10  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         000000f0  2003e108  000daf14  0001e108  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000005f8  2003e1f8  2003e1f8  0002e1f8  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000db004  000db004  0002b004  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000db02c  000db02c  0002b02c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000ef6f0  00000000  00000000  0002b030  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00012065  00000000  00000000  0011a720  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0002177d  00000000  00000000  0012c785  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000028c8  00000000  00000000  0014df02  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00004d60  00000000  00000000  001507ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00036207  00000000  00000000  0015552a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002c39a  00000000  00000000  0018b731  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0010c801  00000000  00000000  001b7acb  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000e27c  00000000  00000000  002c42cc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f003 fdf9 	bl	d7c28 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f003 fdfe 	bl	d7c3e <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e108 	.word	0x2003e108
   d404c:	000daf14 	.word	0x000daf14
   d4050:	2003e1f8 	.word	0x2003e1f8
   d4054:	2003e1f8 	.word	0x2003e1f8
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405e:	f002 fe0f 	bl	d6c80 <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000daf08 	.word	0x000daf08
   d4084:	000daec4 	.word	0x000daec4

000d4088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4088:	f000 b816 	b.w	d40b8 <setup>

000d408c <module_user_loop>:
}

void module_user_loop() {
   d408c:	b508      	push	{r3, lr}
    loop();
   d408e:	f000 f87f 	bl	d4190 <loop>
    _post_loop();
}
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4096:	f002 bdb5 	b.w	d6c04 <_post_loop>

000d409a <_Znwj>:
   d409a:	f001 bb99 	b.w	d57d0 <malloc>

000d409e <_ZdlPv>:
   d409e:	f001 bb9f 	b.w	d57e0 <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f001 bb9d 	b.w	d57e0 <free>

000d40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a6:	7800      	ldrb	r0, [r0, #0]
   d40a8:	fab0 f080 	clz	r0, r0
   d40ac:	0940      	lsrs	r0, r0, #5
   d40ae:	4770      	bx	lr

000d40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40b0:	2301      	movs	r3, #1
   d40b2:	7003      	strb	r3, [r0, #0]
   d40b4:	4770      	bx	lr

000d40b6 <_Z16locationCallbackfff>:
SeeedOled.putString(":");
SeeedOled.putNumber(minutes);

}

void locationCallback(float lat, float lon, float accuracy) {
   d40b6:	4770      	bx	lr

000d40b8 <setup>:
GoogleMapsDeviceLocator locator;
int hour=0;
int minutes=0;
int lastMinute=-1;

void setup() {
   d40b8:	b510      	push	{r4, lr}
    Serial.begin(9600);
   d40ba:	f002 fd5f 	bl	d6b7c <_Z16_fetch_usbserialv>
	  Wire.begin();
    SeeedOled.init();  	
   d40be:	4c18      	ldr	r4, [pc, #96]	; (d4120 <setup+0x68>)
int hour=0;
int minutes=0;
int lastMinute=-1;

void setup() {
    Serial.begin(9600);
   d40c0:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d40c4:	f002 fd4e 	bl	d6b64 <_ZN9USBSerial5beginEl>
	  Wire.begin();
   d40c8:	f002 fe20 	bl	d6d0c <_Z19__fetch_global_Wirev>
   d40cc:	f001 ffd0 	bl	d6070 <_ZN7TwoWire5beginEv>
    SeeedOled.init();  	
   d40d0:	4620      	mov	r0, r4
   d40d2:	f000 fd2b 	bl	d4b2c <_ZN9SeeedOLED4initEv>
 	  SeeedOled.clearDisplay();
   d40d6:	4620      	mov	r0, r4
   d40d8:	f000 fd94 	bl	d4c04 <_ZN9SeeedOLED12clearDisplayEv>
    SeeedOled.setNormalDisplay();
   d40dc:	4620      	mov	r0, r4
   d40de:	f000 fdf8 	bl	d4cd2 <_ZN9SeeedOLED16setNormalDisplayEv>
    SeeedOled.setPageMode(); 
   d40e2:	4620      	mov	r0, r4
   d40e4:	f000 fd37 	bl	d4b56 <_ZN9SeeedOLED11setPageModeEv>
    SeeedOled.setTextXY(2, 0);
   d40e8:	2200      	movs	r2, #0
   d40ea:	4620      	mov	r0, r4
   d40ec:	2102      	movs	r1, #2
   d40ee:	f000 fd3f 	bl	d4b70 <_ZN9SeeedOLED9setTextXYEhh>
    SeeedOled.putString("GPS v1.2");
   d40f2:	4620      	mov	r0, r4
    locator.withEventName("deviceLocator");
   d40f4:	4c0b      	ldr	r4, [pc, #44]	; (d4124 <setup+0x6c>)
    SeeedOled.init();  	
 	  SeeedOled.clearDisplay();
    SeeedOled.setNormalDisplay();
    SeeedOled.setPageMode(); 
    SeeedOled.setTextXY(2, 0);
    SeeedOled.putString("GPS v1.2");
   d40f6:	490c      	ldr	r1, [pc, #48]	; (d4128 <setup+0x70>)
   d40f8:	f000 fda6 	bl	d4c48 <_ZN9SeeedOLED9putStringEPKc>
    locator.withEventName("deviceLocator");
   d40fc:	490b      	ldr	r1, [pc, #44]	; (d412c <setup+0x74>)
   d40fe:	4620      	mov	r0, r4
   d4100:	f000 feee 	bl	d4ee0 <_ZN23GoogleMapsDeviceLocator13withEventNameEPKc>
    locator.withSubscribe(locationCallback).withLocatePeriodic(30);
   d4104:	490a      	ldr	r1, [pc, #40]	; (d4130 <setup+0x78>)
   d4106:	4620      	mov	r0, r4
   d4108:	f001 f906 	bl	d5318 <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE>
   d410c:	211e      	movs	r1, #30
   d410e:	f000 fedd 	bl	d4ecc <_ZN23GoogleMapsDeviceLocator18withLocatePeriodicEm>
    Time.zone(+7);
   d4112:	eeb1 0a0c 	vmov.f32	s0, #28	; 0x40e00000  7.0
}
   d4116:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    SeeedOled.setPageMode(); 
    SeeedOled.setTextXY(2, 0);
    SeeedOled.putString("GPS v1.2");
    locator.withEventName("deviceLocator");
    locator.withSubscribe(locationCallback).withLocatePeriodic(30);
    Time.zone(+7);
   d411a:	f002 bbef 	b.w	d68fc <_ZN9TimeClass4zoneEf>
   d411e:	bf00      	nop
   d4120:	2003e249 	.word	0x2003e249
   d4124:	2003e1fc 	.word	0x2003e1fc
   d4128:	000da10c 	.word	0x000da10c
   d412c:	000da115 	.word	0x000da115
   d4130:	000d40b7 	.word	0x000d40b7

000d4134 <_Z10updateTimev>:
}

void updateTime()
{
   d4134:	b570      	push	{r4, r5, r6, lr}
Time.now();    
   d4136:	f002 fc1e 	bl	d6976 <_ZN9TimeClass3nowEv>
hour = Time.hourFormat12();
   d413a:	f002 fc23 	bl	d6984 <_ZN9TimeClass12hourFormat12Ev>
   d413e:	4e10      	ldr	r6, [pc, #64]	; (d4180 <_Z10updateTimev+0x4c>)
minutes = Time.minute();
SeeedOled.setNormalDisplay();
   d4140:	4c10      	ldr	r4, [pc, #64]	; (d4184 <_Z10updateTimev+0x50>)
}

void updateTime()
{
Time.now();    
hour = Time.hourFormat12();
   d4142:	6030      	str	r0, [r6, #0]
minutes = Time.minute();
   d4144:	f002 fc26 	bl	d6994 <_ZN9TimeClass6minuteEv>
   d4148:	4d0f      	ldr	r5, [pc, #60]	; (d4188 <_Z10updateTimev+0x54>)
   d414a:	6028      	str	r0, [r5, #0]
SeeedOled.setNormalDisplay();
   d414c:	4620      	mov	r0, r4
   d414e:	f000 fdc0 	bl	d4cd2 <_ZN9SeeedOLED16setNormalDisplayEv>
SeeedOled.setPageMode();
   d4152:	4620      	mov	r0, r4
   d4154:	f000 fcff 	bl	d4b56 <_ZN9SeeedOLED11setPageModeEv>
SeeedOled.setTextXY(4,5);
   d4158:	2205      	movs	r2, #5
   d415a:	4620      	mov	r0, r4
   d415c:	2104      	movs	r1, #4
   d415e:	f000 fd07 	bl	d4b70 <_ZN9SeeedOLED9setTextXYEhh>
SeeedOled.putNumber(hour);
   d4162:	6831      	ldr	r1, [r6, #0]
   d4164:	4620      	mov	r0, r4
   d4166:	f000 fd7c 	bl	d4c62 <_ZN9SeeedOLED9putNumberEl>
SeeedOled.putString(":");
   d416a:	4620      	mov	r0, r4
   d416c:	4907      	ldr	r1, [pc, #28]	; (d418c <_Z10updateTimev+0x58>)
   d416e:	f000 fd6b 	bl	d4c48 <_ZN9SeeedOLED9putStringEPKc>
SeeedOled.putNumber(minutes);
   d4172:	6829      	ldr	r1, [r5, #0]
   d4174:	4620      	mov	r0, r4

}
   d4176:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
SeeedOled.setNormalDisplay();
SeeedOled.setPageMode();
SeeedOled.setTextXY(4,5);
SeeedOled.putNumber(hour);
SeeedOled.putString(":");
SeeedOled.putNumber(minutes);
   d417a:	f000 bd72 	b.w	d4c62 <_ZN9SeeedOLED9putNumberEl>
   d417e:	bf00      	nop
   d4180:	2003e244 	.word	0x2003e244
   d4184:	2003e249 	.word	0x2003e249
   d4188:	2003e240 	.word	0x2003e240
   d418c:	000da290 	.word	0x000da290

000d4190 <loop>:
  // - Latitude
  // - Longitude
  // - Accuracy of estimated location (in meters)
}

void loop() {
   d4190:	b508      	push	{r3, lr}
  locator.loop();
   d4192:	4803      	ldr	r0, [pc, #12]	; (d41a0 <loop+0x10>)
   d4194:	f001 f872 	bl	d527c <_ZN23GoogleMapsDeviceLocator4loopEv>
  updateTime();
}
   d4198:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  // - Accuracy of estimated location (in meters)
}

void loop() {
  locator.loop();
  updateTime();
   d419c:	f7ff bfca 	b.w	d4134 <_Z10updateTimev>
   d41a0:	2003e1fc 	.word	0x2003e1fc

000d41a4 <_GLOBAL__sub_I_locator>:
}
   d41a4:	b510      	push	{r4, lr}
#include <google-maps-device-locator.h>
#include "SeeedOLED.h"

GoogleMapsDeviceLocator locator;
   d41a6:	4c06      	ldr	r4, [pc, #24]	; (d41c0 <_GLOBAL__sub_I_locator+0x1c>)

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d41a8:	f001 f966 	bl	d5478 <HAL_Pin_Map>
   d41ac:	4620      	mov	r0, r4
   d41ae:	f000 fe67 	bl	d4e80 <_ZN23GoogleMapsDeviceLocatorC1Ev>
   d41b2:	4620      	mov	r0, r4
   d41b4:	4a03      	ldr	r2, [pc, #12]	; (d41c4 <_GLOBAL__sub_I_locator+0x20>)
   d41b6:	4904      	ldr	r1, [pc, #16]	; (d41c8 <_GLOBAL__sub_I_locator+0x24>)
}

void loop() {
  locator.loop();
  updateTime();
}
   d41b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include <google-maps-device-locator.h>
#include "SeeedOLED.h"

GoogleMapsDeviceLocator locator;
   d41bc:	f002 bdcc 	b.w	d6d58 <__aeabi_atexit>
   d41c0:	2003e1fc 	.word	0x2003e1fc
   d41c4:	2003e1f8 	.word	0x2003e1f8
   d41c8:	000d4d01 	.word	0x000d4d01

000d41cc <_ZN19CellularHelperClass16responseCallbackEiPKciPv>:
	}
	return bars;
}

// static
int CellularHelperClass::responseCallback(int type, const char* buf, int len, void *param) {
   d41cc:	b430      	push	{r4, r5}
   d41ce:	461c      	mov	r4, r3
	CellularHelperCommonResponse *presp = (CellularHelperCommonResponse *)param;

	return presp->parse(type, buf, len);
   d41d0:	681b      	ldr	r3, [r3, #0]
   d41d2:	681d      	ldr	r5, [r3, #0]
   d41d4:	4613      	mov	r3, r2
   d41d6:	46ac      	mov	ip, r5
   d41d8:	460a      	mov	r2, r1
   d41da:	4601      	mov	r1, r0
   d41dc:	4620      	mov	r0, r4
}
   d41de:	bc30      	pop	{r4, r5}

// static
int CellularHelperClass::responseCallback(int type, const char* buf, int len, void *param) {
	CellularHelperCommonResponse *presp = (CellularHelperCommonResponse *)param;

	return presp->parse(type, buf, len);
   d41e0:	4760      	bx	ip

000d41e2 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   d41e2:	b40e      	push	{r1, r2, r3}
   d41e4:	b500      	push	{lr}
   d41e6:	b08c      	sub	sp, #48	; 0x30
   d41e8:	aa0d      	add	r2, sp, #52	; 0x34
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
   d41ea:	2320      	movs	r3, #32
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   d41ec:	f852 1b04 	ldr.w	r1, [r2], #4
    va_list args;
    va_start(args, fmt);
   d41f0:	9203      	str	r2, [sp, #12]

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d41f2:	e88d 0006 	stmia.w	sp, {r1, r2}
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
   d41f6:	9304      	str	r3, [sp, #16]
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d41f8:	6801      	ldr	r1, [r0, #0]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d41fa:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d41fc:	aa04      	add	r2, sp, #16
   d41fe:	201e      	movs	r0, #30
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d4200:	9305      	str	r3, [sp, #20]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d4202:	f001 fa11 	bl	d5628 <log_message_v>
inline void spark::Logger::info(const char *fmt, ...) const {
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_INFO, fmt, args);
    va_end(args);
}
   d4206:	b00c      	add	sp, #48	; 0x30
   d4208:	f85d eb04 	ldr.w	lr, [sp], #4
   d420c:	b003      	add	sp, #12
   d420e:	4770      	bx	lr

000d4210 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci>:
static LogClass Log;
#endif

CellularHelperClass CellularHelper;

void CellularHelperCommonResponse::logCellularDebug(int type, const char *buf, int len) const {
   d4210:	b570      	push	{r4, r5, r6, lr}
   d4212:	b08c      	sub	sp, #48	; 0x30
   d4214:	460c      	mov	r4, r1
	String typeStr;
   d4216:	a804      	add	r0, sp, #16
   d4218:	494b      	ldr	r1, [pc, #300]	; (d4348 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x138>)
static LogClass Log;
#endif

CellularHelperClass CellularHelper;

void CellularHelperCommonResponse::logCellularDebug(int type, const char *buf, int len) const {
   d421a:	4615      	mov	r5, r2
   d421c:	461e      	mov	r6, r3
	String typeStr;
   d421e:	f002 fa0c 	bl	d663a <_ZN6StringC1EPK19__FlashStringHelper>
	switch(type) {
   d4222:	f5b4 1f10 	cmp.w	r4, #2359296	; 0x240000
   d4226:	d035      	beq.n	d4294 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x84>
   d4228:	dc13      	bgt.n	d4252 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x42>
   d422a:	f5b4 1f90 	cmp.w	r4, #1179648	; 0x120000
   d422e:	d028      	beq.n	d4282 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x72>
   d4230:	dc05      	bgt.n	d423e <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x2e>
   d4232:	b324      	cbz	r4, d427e <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x6e>
   d4234:	f5b4 1f88 	cmp.w	r4, #1114112	; 0x110000
   d4238:	d136      	bne.n	d42a8 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x98>
	case TYPE_UNKNOWN:
		typeStr = "TYPE_UNKNOWN";
		break;

	case TYPE_OK:
		typeStr = "TYPE_OK";
   d423a:	4944      	ldr	r1, [pc, #272]	; (d434c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x13c>)
   d423c:	e022      	b.n	d4284 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x74>

CellularHelperClass CellularHelper;

void CellularHelperCommonResponse::logCellularDebug(int type, const char *buf, int len) const {
	String typeStr;
	switch(type) {
   d423e:	f5b4 1f08 	cmp.w	r4, #2228224	; 0x220000
   d4242:	d023      	beq.n	d428c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x7c>
   d4244:	f5b4 1f0c 	cmp.w	r4, #2293760	; 0x230000
   d4248:	d022      	beq.n	d4290 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x80>
   d424a:	f5b4 1f04 	cmp.w	r4, #2162688	; 0x210000
   d424e:	d12b      	bne.n	d42a8 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x98>
   d4250:	e017      	b.n	d4282 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x72>
   d4252:	f5b4 1f40 	cmp.w	r4, #3145728	; 0x300000
   d4256:	d021      	beq.n	d429c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x8c>
   d4258:	dc07      	bgt.n	d426a <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x5a>
   d425a:	f5b4 1f14 	cmp.w	r4, #2424832	; 0x250000
   d425e:	d01b      	beq.n	d4298 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x88>
   d4260:	f5b4 1f18 	cmp.w	r4, #2490368	; 0x260000
   d4264:	d120      	bne.n	d42a8 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x98>
	case TYPE_BUSY:
		typeStr = "TYPE_BUSY";
		break;

	case TYPE_NOANSWER:
		typeStr = "TYPE_NOANSWER";
   d4266:	493a      	ldr	r1, [pc, #232]	; (d4350 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x140>)
   d4268:	e00c      	b.n	d4284 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x74>

CellularHelperClass CellularHelper;

void CellularHelperCommonResponse::logCellularDebug(int type, const char *buf, int len) const {
	String typeStr;
	switch(type) {
   d426a:	f5b4 0fa0 	cmp.w	r4, #5242880	; 0x500000
   d426e:	d017      	beq.n	d42a0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x90>
   d4270:	f5b4 0fc0 	cmp.w	r4, #6291456	; 0x600000
   d4274:	d016      	beq.n	d42a4 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x94>
   d4276:	f5b4 0f80 	cmp.w	r4, #4194304	; 0x400000
   d427a:	d115      	bne.n	d42a8 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x98>
   d427c:	e010      	b.n	d42a0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x90>
	case TYPE_UNKNOWN:
		typeStr = "TYPE_UNKNOWN";
   d427e:	4935      	ldr	r1, [pc, #212]	; (d4354 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x144>)
   d4280:	e000      	b.n	d4284 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x74>
	case TYPE_ERROR:
		typeStr = "TYPE_ERROR";
		break;

	case TYPE_RING:
		typeStr = "TYPE_ERROR";
   d4282:	4935      	ldr	r1, [pc, #212]	; (d4358 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x148>)
	case TYPE_UNKNOWN:
		typeStr = "TYPE_UNKNOWN";
		break;

	case TYPE_OK:
		typeStr = "TYPE_OK";
   d4284:	a804      	add	r0, sp, #16
   d4286:	f002 fa2a 	bl	d66de <_ZN6StringaSEPKc>
		break;
   d428a:	e019      	b.n	d42c0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xb0>
	case TYPE_RING:
		typeStr = "TYPE_ERROR";
		break;

	case TYPE_CONNECT:
		typeStr = "TYPE_CONNECT";
   d428c:	4933      	ldr	r1, [pc, #204]	; (d435c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x14c>)
   d428e:	e7f9      	b.n	d4284 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x74>
		break;

	case TYPE_NOCARRIER:
		typeStr = "TYPE_NOCARRIER";
   d4290:	4933      	ldr	r1, [pc, #204]	; (d4360 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x150>)
   d4292:	e7f7      	b.n	d4284 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x74>
		break;

	case TYPE_NODIALTONE:
		typeStr = "TYPE_NODIALTONE";
   d4294:	4933      	ldr	r1, [pc, #204]	; (d4364 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x154>)
   d4296:	e7f5      	b.n	d4284 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x74>
		break;

	case TYPE_BUSY:
		typeStr = "TYPE_BUSY";
   d4298:	4933      	ldr	r1, [pc, #204]	; (d4368 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x158>)
   d429a:	e7f3      	b.n	d4284 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x74>
	case TYPE_NOANSWER:
		typeStr = "TYPE_NOANSWER";
		break;

	case TYPE_PROMPT:
		typeStr = "TYPE_PROMPT";
   d429c:	4933      	ldr	r1, [pc, #204]	; (d436c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x15c>)
   d429e:	e7f1      	b.n	d4284 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x74>
	case TYPE_PLUS:
		typeStr = "TYPE_PLUS";
		break;

	case TYPE_TEXT:
		typeStr = "TYPE_PLUS";
   d42a0:	4933      	ldr	r1, [pc, #204]	; (d4370 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x160>)
   d42a2:	e7ef      	b.n	d4284 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x74>
		break;

	case TYPE_ABORTED:
		typeStr = "TYPE_ABORTED";
   d42a4:	4933      	ldr	r1, [pc, #204]	; (d4374 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x164>)
   d42a6:	e7ed      	b.n	d4284 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x74>
		break;

	default:
		typeStr = String::format("type=0x%x", type);
   d42a8:	4622      	mov	r2, r4
   d42aa:	4933      	ldr	r1, [pc, #204]	; (d4378 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x168>)
   d42ac:	a808      	add	r0, sp, #32
   d42ae:	f002 fa85 	bl	d67bc <_ZN6String6formatEPKcz>
   d42b2:	a908      	add	r1, sp, #32
   d42b4:	a804      	add	r0, sp, #16
   d42b6:	f002 fa0a 	bl	d66ce <_ZN6StringaSEOS_>
   d42ba:	a808      	add	r0, sp, #32
   d42bc:	f002 f976 	bl	d65ac <_ZN6StringD1Ev>
		break;
	}

	Log.info("cellular response type=%s len=%d", typeStr.c_str(), len);
   d42c0:	4633      	mov	r3, r6
   d42c2:	9a04      	ldr	r2, [sp, #16]
   d42c4:	492d      	ldr	r1, [pc, #180]	; (d437c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x16c>)
   d42c6:	482e      	ldr	r0, [pc, #184]	; (d4380 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x170>)
   d42c8:	f7ff ff8b 	bl	d41e2 <_ZNK5spark6Logger4infoEPKcz>
	String out;
   d42cc:	491e      	ldr	r1, [pc, #120]	; (d4348 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x138>)
   d42ce:	a808      	add	r0, sp, #32
   d42d0:	f002 f9b3 	bl	d663a <_ZN6StringC1EPK19__FlashStringHelper>
   d42d4:	462c      	mov	r4, r5
	for(int ii = 0; ii < len; ii++) {
   d42d6:	1b63      	subs	r3, r4, r5
   d42d8:	429e      	cmp	r6, r3
   d42da:	dd27      	ble.n	d432c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x11c>
		if (buf[ii] == '\n') {
   d42dc:	f814 3b01 	ldrb.w	r3, [r4], #1
   d42e0:	2b0a      	cmp	r3, #10
   d42e2:	d10c      	bne.n	d42fe <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xee>
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
   d42e4:	4927      	ldr	r1, [pc, #156]	; (d4384 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x174>)
   d42e6:	a808      	add	r0, sp, #32
   d42e8:	f002 fa21 	bl	d672e <_ZN6String6concatEPKc>
			out += "\\n";
			Log.info(out);
   d42ec:	9908      	ldr	r1, [sp, #32]
   d42ee:	4824      	ldr	r0, [pc, #144]	; (d4380 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x170>)
   d42f0:	f7ff ff77 	bl	d41e2 <_ZNK5spark6Logger4infoEPKcz>
			out = "";
   d42f4:	4914      	ldr	r1, [pc, #80]	; (d4348 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x138>)
   d42f6:	a808      	add	r0, sp, #32
   d42f8:	f002 f9f1 	bl	d66de <_ZN6StringaSEPKc>
   d42fc:	e7eb      	b.n	d42d6 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xc6>
		}
		else
		if (buf[ii] == '\r') {
   d42fe:	2b0d      	cmp	r3, #13
   d4300:	d101      	bne.n	d4306 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xf6>
   d4302:	4921      	ldr	r1, [pc, #132]	; (d4388 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x178>)
   d4304:	e009      	b.n	d431a <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x10a>
			out += "\\r";
		}
		else
		if (buf[ii] < ' ' || buf[ii] >= 127) {
   d4306:	f1a3 0220 	sub.w	r2, r3, #32
   d430a:	2a5e      	cmp	r2, #94	; 0x5e
   d430c:	d909      	bls.n	d4322 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x112>
			char hex[10];
			snprintf(hex, sizeof(hex), "0x%02x", buf[ii]);
   d430e:	210a      	movs	r1, #10
   d4310:	4a1e      	ldr	r2, [pc, #120]	; (d438c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x17c>)
   d4312:	a801      	add	r0, sp, #4
   d4314:	f001 fa8c 	bl	d5830 <snprintf>
			out.concat(hex);
   d4318:	a901      	add	r1, sp, #4
   d431a:	a808      	add	r0, sp, #32
   d431c:	f002 fa07 	bl	d672e <_ZN6String6concatEPKc>
   d4320:	e7d9      	b.n	d42d6 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xc6>
		}
		else {
			out.concat(buf[ii]);
   d4322:	4619      	mov	r1, r3
   d4324:	a808      	add	r0, sp, #32
   d4326:	f002 fa11 	bl	d674c <_ZN6String6concatEc>
		break;
	}

	Log.info("cellular response type=%s len=%d", typeStr.c_str(), len);
	String out;
	for(int ii = 0; ii < len; ii++) {
   d432a:	e7d4      	b.n	d42d6 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xc6>
		}
		else {
			out.concat(buf[ii]);
		}
	}
	if (out.length() > 0) {
   d432c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d432e:	b11b      	cbz	r3, d4338 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x128>
		Log.info(out);
   d4330:	9908      	ldr	r1, [sp, #32]
   d4332:	4813      	ldr	r0, [pc, #76]	; (d4380 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x170>)
   d4334:	f7ff ff55 	bl	d41e2 <_ZNK5spark6Logger4infoEPKcz>
		typeStr = String::format("type=0x%x", type);
		break;
	}

	Log.info("cellular response type=%s len=%d", typeStr.c_str(), len);
	String out;
   d4338:	a808      	add	r0, sp, #32
   d433a:	f002 f937 	bl	d65ac <_ZN6StringD1Ev>
#endif

CellularHelperClass CellularHelper;

void CellularHelperCommonResponse::logCellularDebug(int type, const char *buf, int len) const {
	String typeStr;
   d433e:	a804      	add	r0, sp, #16
   d4340:	f002 f934 	bl	d65ac <_ZN6StringD1Ev>
		}
	}
	if (out.length() > 0) {
		Log.info(out);
	}
}
   d4344:	b00c      	add	sp, #48	; 0x30
   d4346:	bd70      	pop	{r4, r5, r6, pc}
   d4348:	000da504 	.word	0x000da504
   d434c:	000da13d 	.word	0x000da13d
   d4350:	000da186 	.word	0x000da186
   d4354:	000da130 	.word	0x000da130
   d4358:	000da145 	.word	0x000da145
   d435c:	000da150 	.word	0x000da150
   d4360:	000da15d 	.word	0x000da15d
   d4364:	000da16c 	.word	0x000da16c
   d4368:	000da17c 	.word	0x000da17c
   d436c:	000da194 	.word	0x000da194
   d4370:	000da1a0 	.word	0x000da1a0
   d4374:	000da1aa 	.word	0x000da1aa
   d4378:	000da1b7 	.word	0x000da1b7
   d437c:	000da1c1 	.word	0x000da1c1
   d4380:	2003e398 	.word	0x2003e398
   d4384:	000da1e2 	.word	0x000da1e2
   d4388:	000da1e5 	.word	0x000da1e5
   d438c:	000da1e8 	.word	0x000da1e8

000d4390 <_ZNK32CellularHelperPlusStringResponse19getDoubleQuotedPartEb>:
		}
	}
	return WAIT;
}

String CellularHelperPlusStringResponse::getDoubleQuotedPart(bool onlyFirst) const {
   d4390:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d4394:	460f      	mov	r7, r1
   d4396:	4606      	mov	r6, r0
	String result;
   d4398:	4914      	ldr	r1, [pc, #80]	; (d43ec <_ZNK32CellularHelperPlusStringResponse19getDoubleQuotedPartEb+0x5c>)
		}
	}
	return WAIT;
}

String CellularHelperPlusStringResponse::getDoubleQuotedPart(bool onlyFirst) const {
   d439a:	4690      	mov	r8, r2
	String result;
   d439c:	f002 f94d 	bl	d663a <_ZN6StringC1EPK19__FlashStringHelper>
	bool inQuoted = false;

	result.reserve(string.length());
   d43a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
   d43a2:	4630      	mov	r0, r6
   d43a4:	f002 f920 	bl	d65e8 <_ZN6String7reserveEj>

	for(size_t ii = 0; ii < string.length(); ii++) {
   d43a8:	2500      	movs	r5, #0
	return WAIT;
}

String CellularHelperPlusStringResponse::getDoubleQuotedPart(bool onlyFirst) const {
	String result;
	bool inQuoted = false;
   d43aa:	462c      	mov	r4, r5

	result.reserve(string.length());

	for(size_t ii = 0; ii < string.length(); ii++) {
		char ch = string.charAt(ii);
   d43ac:	f107 091c 	add.w	r9, r7, #28
	String result;
	bool inQuoted = false;

	result.reserve(string.length());

	for(size_t ii = 0; ii < string.length(); ii++) {
   d43b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   d43b2:	429d      	cmp	r5, r3
   d43b4:	d216      	bcs.n	d43e4 <_ZNK32CellularHelperPlusStringResponse19getDoubleQuotedPartEb+0x54>
		char ch = string.charAt(ii);
   d43b6:	4629      	mov	r1, r5
   d43b8:	4648      	mov	r0, r9
   d43ba:	f002 f9fc 	bl	d67b6 <_ZNK6String6charAtEj>
		if (ch == '"') {
   d43be:	2822      	cmp	r0, #34	; 0x22
	bool inQuoted = false;

	result.reserve(string.length());

	for(size_t ii = 0; ii < string.length(); ii++) {
		char ch = string.charAt(ii);
   d43c0:	4601      	mov	r1, r0
		if (ch == '"') {
   d43c2:	d107      	bne.n	d43d4 <_ZNK32CellularHelperPlusStringResponse19getDoubleQuotedPartEb+0x44>
			inQuoted = !inQuoted;
   d43c4:	f084 0301 	eor.w	r3, r4, #1
   d43c8:	b2db      	uxtb	r3, r3
			if (!inQuoted && onlyFirst) {
   d43ca:	b144      	cbz	r4, d43de <_ZNK32CellularHelperPlusStringResponse19getDoubleQuotedPartEb+0x4e>
   d43cc:	f1b8 0f00 	cmp.w	r8, #0
   d43d0:	d005      	beq.n	d43de <_ZNK32CellularHelperPlusStringResponse19getDoubleQuotedPartEb+0x4e>
   d43d2:	e007      	b.n	d43e4 <_ZNK32CellularHelperPlusStringResponse19getDoubleQuotedPartEb+0x54>
				break;
			}
		}
		else {
			if (inQuoted) {
   d43d4:	b114      	cbz	r4, d43dc <_ZNK32CellularHelperPlusStringResponse19getDoubleQuotedPartEb+0x4c>
				result.concat(ch);
   d43d6:	4630      	mov	r0, r6
   d43d8:	f002 f9b8 	bl	d674c <_ZN6String6concatEc>
   d43dc:	4623      	mov	r3, r4
	String result;
	bool inQuoted = false;

	result.reserve(string.length());

	for(size_t ii = 0; ii < string.length(); ii++) {
   d43de:	3501      	adds	r5, #1
   d43e0:	461c      	mov	r4, r3
   d43e2:	e7e5      	b.n	d43b0 <_ZNK32CellularHelperPlusStringResponse19getDoubleQuotedPartEb+0x20>
			}
		}
	}

	return result;
}
   d43e4:	4630      	mov	r0, r6
   d43e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d43ea:	bf00      	nop
   d43ec:	000da504 	.word	0x000da504

000d43f0 <_ZN32CellularHelperPlusStringResponseC1Ev>:
 * Things that return a + response and a string use this.
 *
 * Since it inherits from CellularHelperPlusStringResponse and CellularHelperCommonResponse you
 * can check resp == RESP_OK to make sure the call succeeded.
 */
class CellularHelperPlusStringResponse : public CellularHelperCommonResponse {
   d43f0:	b538      	push	{r3, r4, r5, lr}

/**
 * All response objects inherit from this, so the parse() method can be called
 * in the subclass, and also the resp and enableDebug members are always available.
 */
class CellularHelperCommonResponse {
   d43f2:	f06f 0302 	mvn.w	r3, #2
   d43f6:	6043      	str	r3, [r0, #4]
 * Things that return a + response and a string use this.
 *
 * Since it inherits from CellularHelperPlusStringResponse and CellularHelperCommonResponse you
 * can check resp == RESP_OK to make sure the call succeeded.
 */
class CellularHelperPlusStringResponse : public CellularHelperCommonResponse {
   d43f8:	4d08      	ldr	r5, [pc, #32]	; (d441c <_ZN32CellularHelperPlusStringResponseC1Ev+0x2c>)

/**
 * All response objects inherit from this, so the parse() method can be called
 * in the subclass, and also the resp and enableDebug members are always available.
 */
class CellularHelperCommonResponse {
   d43fa:	2300      	movs	r3, #0
   d43fc:	7203      	strb	r3, [r0, #8]
 * Things that return a + response and a string use this.
 *
 * Since it inherits from CellularHelperPlusStringResponse and CellularHelperCommonResponse you
 * can check resp == RESP_OK to make sure the call succeeded.
 */
class CellularHelperPlusStringResponse : public CellularHelperCommonResponse {
   d43fe:	4b08      	ldr	r3, [pc, #32]	; (d4420 <_ZN32CellularHelperPlusStringResponseC1Ev+0x30>)
   d4400:	4604      	mov	r4, r0
   d4402:	4629      	mov	r1, r5
   d4404:	f840 3b0c 	str.w	r3, [r0], #12
   d4408:	f002 f917 	bl	d663a <_ZN6StringC1EPK19__FlashStringHelper>
   d440c:	4629      	mov	r1, r5
   d440e:	f104 001c 	add.w	r0, r4, #28
   d4412:	f002 f912 	bl	d663a <_ZN6StringC1EPK19__FlashStringHelper>
   d4416:	4620      	mov	r0, r4
   d4418:	bd38      	pop	{r3, r4, r5, pc}
   d441a:	bf00      	nop
   d441c:	000da504 	.word	0x000da504
   d4420:	000da52c 	.word	0x000da52c

000d4424 <_ZN32CellularHelperPlusStringResponseD1Ev>:
   d4424:	b510      	push	{r4, lr}
   d4426:	4b06      	ldr	r3, [pc, #24]	; (d4440 <_ZN32CellularHelperPlusStringResponseD1Ev+0x1c>)
   d4428:	4604      	mov	r4, r0
   d442a:	f840 3b1c 	str.w	r3, [r0], #28
   d442e:	f002 f8bd 	bl	d65ac <_ZN6StringD1Ev>
   d4432:	f104 000c 	add.w	r0, r4, #12
   d4436:	f002 f8b9 	bl	d65ac <_ZN6StringD1Ev>
   d443a:	4620      	mov	r0, r4
   d443c:	bd10      	pop	{r4, pc}
   d443e:	bf00      	nop
   d4440:	000da52c 	.word	0x000da52c

000d4444 <_ZN33CellularHelperEnvironmentResponseC1EP33CellularHelperEnvironmentCellDataj>:
		resp = RESP_ERROR;
	}
}


CellularHelperEnvironmentResponse::CellularHelperEnvironmentResponse(CellularHelperEnvironmentCellData *neighbors, size_t numNeighbors) :
   d4444:	b570      	push	{r4, r5, r6, lr}
   d4446:	4604      	mov	r4, r0
   d4448:	4615      	mov	r5, r2
   d444a:	460e      	mov	r6, r1
	neighbors(neighbors), numNeighbors(numNeighbors) {
   d444c:	f7ff ffd0 	bl	d43f0 <_ZN32CellularHelperPlusStringResponseC1Ev>
   d4450:	4b08      	ldr	r3, [pc, #32]	; (d4474 <_ZN33CellularHelperEnvironmentResponseC1EP33CellularHelperEnvironmentCellDataj+0x30>)
   d4452:	6023      	str	r3, [r4, #0]
};

/**
 * Used to hold the results for one cell (service or neighbor) from the AT+CGED command
 */
class CellularHelperEnvironmentCellData { // 44 bytes
   d4454:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d4458:	62e3      	str	r3, [r4, #44]	; 0x2c
   d445a:	23ff      	movs	r3, #255	; 0xff
   d445c:	6323      	str	r3, [r4, #48]	; 0x30
   d445e:	2200      	movs	r2, #0
   d4460:	6563      	str	r3, [r4, #84]	; 0x54
   d4462:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d4466:	f884 2048 	strb.w	r2, [r4, #72]	; 0x48
   d446a:	65a6      	str	r6, [r4, #88]	; 0x58
   d446c:	65e5      	str	r5, [r4, #92]	; 0x5c
   d446e:	6623      	str	r3, [r4, #96]	; 0x60


}
   d4470:	4620      	mov	r0, r4
   d4472:	bd70      	pop	{r4, r5, r6, pc}
   d4474:	000da520 	.word	0x000da520

000d4478 <_ZNK33CellularHelperEnvironmentCellData7isValidEb>:
	free(mutableCopy);
}

bool CellularHelperEnvironmentCellData::isValid(bool ignoreCI) const {

	if (mcc > 999) {
   d4478:	6803      	ldr	r3, [r0, #0]
   d447a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   d447e:	da0c      	bge.n	d449a <_ZNK33CellularHelperEnvironmentCellData7isValidEb+0x22>
		return false;
	}

	if (!ignoreCI) {
   d4480:	b969      	cbnz	r1, d449e <_ZNK33CellularHelperEnvironmentCellData7isValidEb+0x26>
		if (isUMTS) {
   d4482:	7f03      	ldrb	r3, [r0, #28]
   d4484:	68c0      	ldr	r0, [r0, #12]
   d4486:	b10b      	cbz	r3, d448c <_ZNK33CellularHelperEnvironmentCellData7isValidEb+0x14>
			if (ci >= 0xfffffff) {
   d4488:	4b06      	ldr	r3, [pc, #24]	; (d44a4 <_ZNK33CellularHelperEnvironmentCellData7isValidEb+0x2c>)
   d448a:	e001      	b.n	d4490 <_ZNK33CellularHelperEnvironmentCellData7isValidEb+0x18>
				return false;
			}
		}
		else {
			if (ci >= 0xffff) {
   d448c:	f64f 73fe 	movw	r3, #65534	; 0xfffe
   d4490:	4298      	cmp	r0, r3
   d4492:	bfcc      	ite	gt
   d4494:	2000      	movgt	r0, #0
   d4496:	2001      	movle	r0, #1
   d4498:	4770      	bx	lr
}

bool CellularHelperEnvironmentCellData::isValid(bool ignoreCI) const {

	if (mcc > 999) {
		return false;
   d449a:	2000      	movs	r0, #0
   d449c:	4770      	bx	lr
			if (ci >= 0xffff) {
				return false;
			}
		}
	}
	return true;
   d449e:	2001      	movs	r0, #1
}
   d44a0:	4770      	bx	lr
   d44a2:	bf00      	nop
   d44a4:	0ffffffe 	.word	0x0ffffffe

000d44a8 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_>:


void CellularHelperEnvironmentCellData::addKeyValue(const char *key, const char *value) {
   d44a8:	b5f0      	push	{r4, r5, r6, r7, lr}
   d44aa:	4605      	mov	r5, r0
   d44ac:	b085      	sub	sp, #20
	char ucCopy[16];
	if (strlen(key) > (sizeof(ucCopy) - 1)) {
   d44ae:	4608      	mov	r0, r1
	}
	return true;
}


void CellularHelperEnvironmentCellData::addKeyValue(const char *key, const char *value) {
   d44b0:	460f      	mov	r7, r1
   d44b2:	4614      	mov	r4, r2
	char ucCopy[16];
	if (strlen(key) > (sizeof(ucCopy) - 1)) {
   d44b4:	f003 fc2f 	bl	d7d16 <strlen>
   d44b8:	280f      	cmp	r0, #15
   d44ba:	d801      	bhi.n	d44c0 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x18>
   d44bc:	2600      	movs	r6, #0
   d44be:	e003      	b.n	d44c8 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x20>
		Log.info("key too long key=%s value=%s", key, value);
   d44c0:	4623      	mov	r3, r4
   d44c2:	463a      	mov	r2, r7
   d44c4:	4959      	ldr	r1, [pc, #356]	; (d462c <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x184>)
   d44c6:	e0ab      	b.n	d4620 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x178>
		return;
	}
	size_t ii = 0;
	for(; key[ii]; ii++) {
   d44c8:	5db8      	ldrb	r0, [r7, r6]
   d44ca:	b128      	cbz	r0, d44d8 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x30>
		ucCopy[ii] = toupper(key[ii]);
   d44cc:	f004 fbda 	bl	d8c84 <toupper>
   d44d0:	f80d 0006 	strb.w	r0, [sp, r6]
	if (strlen(key) > (sizeof(ucCopy) - 1)) {
		Log.info("key too long key=%s value=%s", key, value);
		return;
	}
	size_t ii = 0;
	for(; key[ii]; ii++) {
   d44d4:	3601      	adds	r6, #1
   d44d6:	e7f7      	b.n	d44c8 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x20>
		ucCopy[ii] = toupper(key[ii]);
	}
	ucCopy[ii] = 0;
   d44d8:	ab04      	add	r3, sp, #16
   d44da:	441e      	add	r6, r3

	if (strcmp(ucCopy, "RAT") == 0) {
   d44dc:	4954      	ldr	r1, [pc, #336]	; (d4630 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x188>)
	}
	size_t ii = 0;
	for(; key[ii]; ii++) {
		ucCopy[ii] = toupper(key[ii]);
	}
	ucCopy[ii] = 0;
   d44de:	f806 0c10 	strb.w	r0, [r6, #-16]

	if (strcmp(ucCopy, "RAT") == 0) {
   d44e2:	4668      	mov	r0, sp
   d44e4:	f003 fbea 	bl	d7cbc <strcmp>
   d44e8:	b940      	cbnz	r0, d44fc <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x54>
		isUMTS = (strstr(value, "UMTS") != NULL);
   d44ea:	4952      	ldr	r1, [pc, #328]	; (d4634 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x18c>)
   d44ec:	4620      	mov	r0, r4
   d44ee:	f003 fc42 	bl	d7d76 <strstr>
   d44f2:	3000      	adds	r0, #0
   d44f4:	bf18      	it	ne
   d44f6:	2001      	movne	r0, #1
   d44f8:	7728      	strb	r0, [r5, #28]
   d44fa:	e094      	b.n	d4626 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x17e>
	}
	else
	if (strcmp(ucCopy, "MCC") == 0) {
   d44fc:	494e      	ldr	r1, [pc, #312]	; (d4638 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x190>)
   d44fe:	4668      	mov	r0, sp
   d4500:	f003 fbdc 	bl	d7cbc <strcmp>
   d4504:	b920      	cbnz	r0, d4510 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x68>
		mcc = atoi(value);
   d4506:	4620      	mov	r0, r4
   d4508:	f003 fa7f 	bl	d7a0a <atoi>
   d450c:	6028      	str	r0, [r5, #0]
   d450e:	e08a      	b.n	d4626 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x17e>
	}
	else
	if (strcmp(ucCopy, "MNC") == 0) {
   d4510:	494a      	ldr	r1, [pc, #296]	; (d463c <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x194>)
   d4512:	4668      	mov	r0, sp
   d4514:	f003 fbd2 	bl	d7cbc <strcmp>
   d4518:	b920      	cbnz	r0, d4524 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x7c>
		mnc = atoi(value);
   d451a:	4620      	mov	r0, r4
   d451c:	f003 fa75 	bl	d7a0a <atoi>
   d4520:	6068      	str	r0, [r5, #4]
   d4522:	e080      	b.n	d4626 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x17e>
	}
	else
	if (strcmp(ucCopy, "LAC") == 0) {
   d4524:	4946      	ldr	r1, [pc, #280]	; (d4640 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x198>)
   d4526:	4668      	mov	r0, sp
   d4528:	f003 fbc8 	bl	d7cbc <strcmp>
   d452c:	4601      	mov	r1, r0
   d452e:	b928      	cbnz	r0, d453c <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x94>
		lac = (int) strtol(value, NULL, 16); // hex
   d4530:	2210      	movs	r2, #16
   d4532:	4620      	mov	r0, r4
   d4534:	f004 fb14 	bl	d8b60 <strtol>
   d4538:	60a8      	str	r0, [r5, #8]
   d453a:	e074      	b.n	d4626 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x17e>
	}
	else
	if (strcmp(ucCopy, "CI") == 0) {
   d453c:	4941      	ldr	r1, [pc, #260]	; (d4644 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x19c>)
   d453e:	4668      	mov	r0, sp
   d4540:	f003 fbbc 	bl	d7cbc <strcmp>
   d4544:	4601      	mov	r1, r0
   d4546:	b928      	cbnz	r0, d4554 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0xac>
		ci = (int) strtol(value, NULL, 16); // hex
   d4548:	2210      	movs	r2, #16
   d454a:	4620      	mov	r0, r4
   d454c:	f004 fb08 	bl	d8b60 <strtol>
   d4550:	60e8      	str	r0, [r5, #12]
   d4552:	e068      	b.n	d4626 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x17e>
	}
	else
	if (strcmp(ucCopy, "BSIC") == 0) {
   d4554:	493c      	ldr	r1, [pc, #240]	; (d4648 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x1a0>)
   d4556:	4668      	mov	r0, sp
   d4558:	f003 fbb0 	bl	d7cbc <strcmp>
   d455c:	4601      	mov	r1, r0
   d455e:	b928      	cbnz	r0, d456c <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0xc4>
		bsic = (int) strtol(value, NULL, 16); // hex
   d4560:	2210      	movs	r2, #16
   d4562:	4620      	mov	r0, r4
   d4564:	f004 fafc 	bl	d8b60 <strtol>
   d4568:	6128      	str	r0, [r5, #16]
   d456a:	e05c      	b.n	d4626 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x17e>
	}
	else
	if (strcmp(ucCopy, "ARFCN") == 0) { // Usually "Arfcn"
   d456c:	4937      	ldr	r1, [pc, #220]	; (d464c <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x1a4>)
   d456e:	4668      	mov	r0, sp
   d4570:	f003 fba4 	bl	d7cbc <strcmp>
   d4574:	b920      	cbnz	r0, d4580 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0xd8>
		// Documentation says this is hex, but this does not appear to be the case!
		// arfcn = (int) strtol(value, NULL, 16); // hex
		arfcn = atoi(value);
   d4576:	4620      	mov	r0, r4
   d4578:	f003 fa47 	bl	d7a0a <atoi>
   d457c:	6168      	str	r0, [r5, #20]
   d457e:	e052      	b.n	d4626 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x17e>
	}
	else
	if (strcmp(ucCopy, "ARFCN_DED") == 0 || strcmp(ucCopy, "RXLEVSUB") == 0 || strcmp(ucCopy, "T_ADV") == 0) {
   d4580:	4933      	ldr	r1, [pc, #204]	; (d4650 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x1a8>)
   d4582:	4668      	mov	r0, sp
   d4584:	f003 fb9a 	bl	d7cbc <strcmp>
   d4588:	2800      	cmp	r0, #0
   d458a:	d04c      	beq.n	d4626 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x17e>
   d458c:	4931      	ldr	r1, [pc, #196]	; (d4654 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x1ac>)
   d458e:	4668      	mov	r0, sp
   d4590:	f003 fb94 	bl	d7cbc <strcmp>
   d4594:	2800      	cmp	r0, #0
   d4596:	d046      	beq.n	d4626 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x17e>
   d4598:	492f      	ldr	r1, [pc, #188]	; (d4658 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x1b0>)
   d459a:	4668      	mov	r0, sp
   d459c:	f003 fb8e 	bl	d7cbc <strcmp>
   d45a0:	2800      	cmp	r0, #0
   d45a2:	d040      	beq.n	d4626 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x17e>
		// Ignored 2G fields: Arfcn_ded, RxLevSub, t_adv
	}
	else
	if (strcmp(ucCopy, "RXLEV") == 0) { // Sometimes RxLev
   d45a4:	492d      	ldr	r1, [pc, #180]	; (d465c <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x1b4>)
   d45a6:	4668      	mov	r0, sp
   d45a8:	f003 fb88 	bl	d7cbc <strcmp>
   d45ac:	4601      	mov	r1, r0
   d45ae:	b928      	cbnz	r0, d45bc <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x114>
		rxlev = (int) strtol(value, NULL, 16); // hex
   d45b0:	2210      	movs	r2, #16
   d45b2:	4620      	mov	r0, r4
   d45b4:	f004 fad4 	bl	d8b60 <strtol>
   d45b8:	61a8      	str	r0, [r5, #24]
   d45ba:	e034      	b.n	d4626 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x17e>
	}
	else
	if (strcmp(ucCopy, "DLF") == 0) {
   d45bc:	4928      	ldr	r1, [pc, #160]	; (d4660 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x1b8>)
   d45be:	4668      	mov	r0, sp
   d45c0:	f003 fb7c 	bl	d7cbc <strcmp>
   d45c4:	b920      	cbnz	r0, d45d0 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x128>
		dlf = atoi(value);
   d45c6:	4620      	mov	r0, r4
   d45c8:	f003 fa1f 	bl	d7a0a <atoi>
   d45cc:	6228      	str	r0, [r5, #32]
   d45ce:	e02a      	b.n	d4626 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x17e>
	}
	else
	if (strcmp(ucCopy, "ULF") == 0) {
   d45d0:	4924      	ldr	r1, [pc, #144]	; (d4664 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x1bc>)
   d45d2:	4668      	mov	r0, sp
   d45d4:	f003 fb72 	bl	d7cbc <strcmp>
   d45d8:	b930      	cbnz	r0, d45e8 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x140>
		ulf = atoi(value);
   d45da:	4620      	mov	r0, r4
   d45dc:	f003 fa15 	bl	d7a0a <atoi>

		// For AT+COPS=5, we don't get a RAT, but if ULF is present it's 3G
		isUMTS = true;
   d45e0:	2301      	movs	r3, #1
	if (strcmp(ucCopy, "DLF") == 0) {
		dlf = atoi(value);
	}
	else
	if (strcmp(ucCopy, "ULF") == 0) {
		ulf = atoi(value);
   d45e2:	6268      	str	r0, [r5, #36]	; 0x24

		// For AT+COPS=5, we don't get a RAT, but if ULF is present it's 3G
		isUMTS = true;
   d45e4:	772b      	strb	r3, [r5, #28]
   d45e6:	e01e      	b.n	d4626 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x17e>
	}
	else
	if (strcmp(ucCopy, "RSCP LEV") == 0) {
   d45e8:	491f      	ldr	r1, [pc, #124]	; (d4668 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x1c0>)
   d45ea:	4668      	mov	r0, sp
   d45ec:	f003 fb66 	bl	d7cbc <strcmp>
   d45f0:	b920      	cbnz	r0, d45fc <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x154>
		rscpLev = atoi(value);
   d45f2:	4620      	mov	r0, r4
   d45f4:	f003 fa09 	bl	d7a0a <atoi>
   d45f8:	62a8      	str	r0, [r5, #40]	; 0x28
   d45fa:	e014      	b.n	d4626 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x17e>
	}
	else
	if (strcmp(ucCopy, "RAC") == 0 || strcmp(ucCopy, "SC") == 0 || strcmp(ucCopy, "ECN0 LEV") == 0) {
   d45fc:	491b      	ldr	r1, [pc, #108]	; (d466c <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x1c4>)
   d45fe:	4668      	mov	r0, sp
   d4600:	f003 fb5c 	bl	d7cbc <strcmp>
   d4604:	b178      	cbz	r0, d4626 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x17e>
   d4606:	491a      	ldr	r1, [pc, #104]	; (d4670 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x1c8>)
   d4608:	4668      	mov	r0, sp
   d460a:	f003 fb57 	bl	d7cbc <strcmp>
   d460e:	b150      	cbz	r0, d4626 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x17e>
   d4610:	4918      	ldr	r1, [pc, #96]	; (d4674 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x1cc>)
   d4612:	4668      	mov	r0, sp
   d4614:	f003 fb52 	bl	d7cbc <strcmp>
   d4618:	b128      	cbz	r0, d4626 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x17e>
		// We get these with AT+COPS=5, but we don't need the values
	}
	else {
		Log.info("unknown key=%s value=%s", key, value);
   d461a:	4917      	ldr	r1, [pc, #92]	; (d4678 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x1d0>)
   d461c:	4623      	mov	r3, r4
   d461e:	463a      	mov	r2, r7
   d4620:	4816      	ldr	r0, [pc, #88]	; (d467c <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x1d4>)
   d4622:	f7ff fdde 	bl	d41e2 <_ZNK5spark6Logger4infoEPKcz>
	}

}
   d4626:	b005      	add	sp, #20
   d4628:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d462a:	bf00      	nop
   d462c:	000da1f5 	.word	0x000da1f5
   d4630:	000da212 	.word	0x000da212
   d4634:	000da216 	.word	0x000da216
   d4638:	000da21b 	.word	0x000da21b
   d463c:	000da21f 	.word	0x000da21f
   d4640:	000da223 	.word	0x000da223
   d4644:	000da227 	.word	0x000da227
   d4648:	000da22a 	.word	0x000da22a
   d464c:	000da22f 	.word	0x000da22f
   d4650:	000da235 	.word	0x000da235
   d4654:	000da23f 	.word	0x000da23f
   d4658:	000da248 	.word	0x000da248
   d465c:	000da24e 	.word	0x000da24e
   d4660:	000da254 	.word	0x000da254
   d4664:	000da258 	.word	0x000da258
   d4668:	000da25c 	.word	0x000da25c
   d466c:	000da265 	.word	0x000da265
   d4670:	000da269 	.word	0x000da269
   d4674:	000da26c 	.word	0x000da26c
   d4678:	000da275 	.word	0x000da275
   d467c:	2003e398 	.word	0x2003e398

000d4680 <_ZN33CellularHelperEnvironmentCellData5parseEPKc>:
		}
	}
	return WAIT;
}

void CellularHelperEnvironmentCellData::parse(const char *str) {
   d4680:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d4682:	4606      	mov	r6, r0
	char *mutableCopy = strdup(str);
   d4684:	4608      	mov	r0, r1
   d4686:	f003 fb2b 	bl	d7ce0 <strdup>

	char *endStr;

	char *pair = strtok_r(mutableCopy, ",", &endStr);
   d468a:	aa01      	add	r2, sp, #4
   d468c:	4910      	ldr	r1, [pc, #64]	; (d46d0 <_ZN33CellularHelperEnvironmentCellData5parseEPKc+0x50>)
	}
	return WAIT;
}

void CellularHelperEnvironmentCellData::parse(const char *str) {
	char *mutableCopy = strdup(str);
   d468e:	4605      	mov	r5, r0

	char *endStr;

	char *pair = strtok_r(mutableCopy, ",", &endStr);
   d4690:	f004 f9dd 	bl	d8a4e <strtok_r>
			pair++;
		}

		char *colon = strchr(pair, ':');
		if (colon != NULL) {
			*colon = 0;
   d4694:	2700      	movs	r7, #0
	char *mutableCopy = strdup(str);

	char *endStr;

	char *pair = strtok_r(mutableCopy, ",", &endStr);
	while(pair) {
   d4696:	b1b0      	cbz	r0, d46c6 <_ZN33CellularHelperEnvironmentCellData5parseEPKc+0x46>
   d4698:	4604      	mov	r4, r0
   d469a:	3001      	adds	r0, #1
		// Remove leading spaces caused by ", " combination
		while(*pair == ' ') {
   d469c:	7823      	ldrb	r3, [r4, #0]
   d469e:	2b20      	cmp	r3, #32
   d46a0:	d0fa      	beq.n	d4698 <_ZN33CellularHelperEnvironmentCellData5parseEPKc+0x18>
			pair++;
		}

		char *colon = strchr(pair, ':');
   d46a2:	213a      	movs	r1, #58	; 0x3a
   d46a4:	4620      	mov	r0, r4
   d46a6:	f003 fafb 	bl	d7ca0 <strchr>
		if (colon != NULL) {
   d46aa:	b130      	cbz	r0, d46ba <_ZN33CellularHelperEnvironmentCellData5parseEPKc+0x3a>
			*colon = 0;
   d46ac:	4602      	mov	r2, r0
			const char *key = pair;
			const char *value = ++colon;

			addKeyValue(key, value);
   d46ae:	4621      	mov	r1, r4
			pair++;
		}

		char *colon = strchr(pair, ':');
		if (colon != NULL) {
			*colon = 0;
   d46b0:	f802 7b01 	strb.w	r7, [r2], #1
			const char *key = pair;
			const char *value = ++colon;

			addKeyValue(key, value);
   d46b4:	4630      	mov	r0, r6
   d46b6:	f7ff fef7 	bl	d44a8 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_>
		}

		pair = strtok_r(NULL, ",", &endStr);
   d46ba:	aa01      	add	r2, sp, #4
   d46bc:	4904      	ldr	r1, [pc, #16]	; (d46d0 <_ZN33CellularHelperEnvironmentCellData5parseEPKc+0x50>)
   d46be:	2000      	movs	r0, #0
   d46c0:	f004 f9c5 	bl	d8a4e <strtok_r>
	char *mutableCopy = strdup(str);

	char *endStr;

	char *pair = strtok_r(mutableCopy, ",", &endStr);
	while(pair) {
   d46c4:	e7e7      	b.n	d4696 <_ZN33CellularHelperEnvironmentCellData5parseEPKc+0x16>

		pair = strtok_r(NULL, ",", &endStr);
	}


	free(mutableCopy);
   d46c6:	4628      	mov	r0, r5
   d46c8:	f001 f88a 	bl	d57e0 <free>
}
   d46cc:	b003      	add	sp, #12
   d46ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d46d0:	000da88b 	.word	0x000da88b

000d46d4 <_ZN33CellularHelperEnvironmentResponse5parseEiPKci>:
	neighbors(neighbors), numNeighbors(numNeighbors) {


}

int CellularHelperEnvironmentResponse::parse(int type, const char *buf, int len) {
   d46d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (enableDebug) {
   d46d8:	7a06      	ldrb	r6, [r0, #8]
	neighbors(neighbors), numNeighbors(numNeighbors) {


}

int CellularHelperEnvironmentResponse::parse(int type, const char *buf, int len) {
   d46da:	b08b      	sub	sp, #44	; 0x2c
   d46dc:	4605      	mov	r5, r0
   d46de:	460f      	mov	r7, r1
   d46e0:	4691      	mov	r9, r2
   d46e2:	461c      	mov	r4, r3
	if (enableDebug) {
   d46e4:	b10e      	cbz	r6, d46ea <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0x16>
		logCellularDebug(type, buf, len);
   d46e6:	f7ff fd93 	bl	d4210 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci>
	}

	if (type == TYPE_UNKNOWN || type == TYPE_PLUS) {
   d46ea:	f437 0880 	bics.w	r8, r7, #4194304	; 0x400000
   d46ee:	d155      	bne.n	d479c <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0xc8>
		// We get this for AT+CGED=5
		// Copy to temporary string to make processing easier
		char *copy = (char *) malloc(len + 1);
   d46f0:	1c60      	adds	r0, r4, #1
   d46f2:	f001 f86d 	bl	d57d0 <malloc>
		if (copy) {
   d46f6:	4606      	mov	r6, r0
   d46f8:	2800      	cmp	r0, #0
   d46fa:	d04f      	beq.n	d479c <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0xc8>
			strncpy(copy, buf, len);
   d46fc:	4622      	mov	r2, r4
   d46fe:	4649      	mov	r1, r9
   d4700:	f003 fb26 	bl	d7d50 <strncpy>
			copy[len] = 0;
   d4704:	f806 8004 	strb.w	r8, [r6, r4]

			// This is used for skipping over the +CGED: part of the response
			char searchFor[32];
			size_t searchForLen = snprintf(searchFor, sizeof(searchFor), "+%s: ", command.c_str());
   d4708:	4a27      	ldr	r2, [pc, #156]	; (d47a8 <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0xd4>)
   d470a:	68eb      	ldr	r3, [r5, #12]
   d470c:	2120      	movs	r1, #32
   d470e:	a802      	add	r0, sp, #8
   d4710:	f001 f88e 	bl	d5830 <snprintf>

			char *endStr;

			char *line = strtok_r(copy, "\r\n", &endStr);
   d4714:	4925      	ldr	r1, [pc, #148]	; (d47ac <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0xd8>)
			strncpy(copy, buf, len);
			copy[len] = 0;

			// This is used for skipping over the +CGED: part of the response
			char searchFor[32];
			size_t searchForLen = snprintf(searchFor, sizeof(searchFor), "+%s: ", command.c_str());
   d4716:	4680      	mov	r8, r0

			char *endStr;

			char *line = strtok_r(copy, "\r\n", &endStr);
   d4718:	aa01      	add	r2, sp, #4
   d471a:	4630      	mov	r0, r6
   d471c:	f004 f997 	bl	d8a4e <strtok_r>
   d4720:	4604      	mov	r4, r0
			while(line) {
   d4722:	2800      	cmp	r0, #0
   d4724:	d037      	beq.n	d4796 <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0xc2>
				if (line[0]) {
   d4726:	7803      	ldrb	r3, [r0, #0]
   d4728:	b38b      	cbz	r3, d478e <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0xba>
					// Not an empty line

					if (type == TYPE_PLUS && strncmp(line, searchFor, searchForLen) == 0) {
   d472a:	f5b7 0f80 	cmp.w	r7, #4194304	; 0x400000
   d472e:	d105      	bne.n	d473c <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0x68>
   d4730:	4642      	mov	r2, r8
   d4732:	a902      	add	r1, sp, #8
   d4734:	f003 faf7 	bl	d7d26 <strncmp>
   d4738:	b900      	cbnz	r0, d473c <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0x68>
						line += searchForLen;
   d473a:	4444      	add	r4, r8
					}

					if (strncmp(line, "MCC:", 4) == 0) {
   d473c:	2204      	movs	r2, #4
   d473e:	491c      	ldr	r1, [pc, #112]	; (d47b0 <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0xdc>)
   d4740:	4620      	mov	r0, r4
   d4742:	f003 faf0 	bl	d7d26 <strncmp>
   d4746:	b9b8      	cbnz	r0, d4778 <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0xa4>
						// Line begins with MCC:
						// This happens for 2G and 3G
						if (curDataIndex < 0) {
   d4748:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   d474a:	2b00      	cmp	r3, #0
   d474c:	da08      	bge.n	d4760 <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0x8c>
							service.parse(line);
   d474e:	4621      	mov	r1, r4
   d4750:	f105 002c 	add.w	r0, r5, #44	; 0x2c
   d4754:	f7ff ff94 	bl	d4680 <_ZN33CellularHelperEnvironmentCellData5parseEPKc>
							curDataIndex++;
   d4758:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   d475a:	3301      	adds	r3, #1
   d475c:	662b      	str	r3, [r5, #96]	; 0x60
   d475e:	e016      	b.n	d478e <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0xba>
						}
						else
						if (neighbors && (size_t)curDataIndex < numNeighbors) {
   d4760:	6daa      	ldr	r2, [r5, #88]	; 0x58
   d4762:	b1a2      	cbz	r2, d478e <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0xba>
   d4764:	6de9      	ldr	r1, [r5, #92]	; 0x5c
   d4766:	428b      	cmp	r3, r1
   d4768:	d211      	bcs.n	d478e <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0xba>
							neighbors[curDataIndex++].parse(line);
   d476a:	1c59      	adds	r1, r3, #1
   d476c:	202c      	movs	r0, #44	; 0x2c
   d476e:	6629      	str	r1, [r5, #96]	; 0x60
   d4770:	fb00 2003 	mla	r0, r0, r3, r2
   d4774:	4621      	mov	r1, r4
   d4776:	e008      	b.n	d478a <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0xb6>
						}
					}
					else
					if (strncmp(line, "RAT:", 4) == 0) {
   d4778:	2204      	movs	r2, #4
   d477a:	490e      	ldr	r1, [pc, #56]	; (d47b4 <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0xe0>)
   d477c:	4620      	mov	r0, r4
   d477e:	f003 fad2 	bl	d7d26 <strncmp>
   d4782:	b920      	cbnz	r0, d478e <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0xba>
						// Line begins with RAT:
						// This happens for 3G in the + response so you know whether
						// the response is for a 2G or 3G tower
						service.parse(line);
   d4784:	4621      	mov	r1, r4
   d4786:	f105 002c 	add.w	r0, r5, #44	; 0x2c
   d478a:	f7ff ff79 	bl	d4680 <_ZN33CellularHelperEnvironmentCellData5parseEPKc>
					}
				}
				line = strtok_r(NULL, "\r\n", &endStr);
   d478e:	aa01      	add	r2, sp, #4
   d4790:	4906      	ldr	r1, [pc, #24]	; (d47ac <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0xd8>)
   d4792:	2000      	movs	r0, #0
   d4794:	e7c2      	b.n	d471c <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0x48>
			}

			free(copy);
   d4796:	4630      	mov	r0, r6
   d4798:	f001 f822 	bl	d57e0 <free>
		}
	}
	return WAIT;
}
   d479c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d47a0:	b00b      	add	sp, #44	; 0x2c
   d47a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d47a6:	bf00      	nop
   d47a8:	000da512 	.word	0x000da512
   d47ac:	000da502 	.word	0x000da502
   d47b0:	000da28d 	.word	0x000da28d
   d47b4:	000da292 	.word	0x000da292

000d47b8 <_ZNK33CellularHelperEnvironmentResponse15getNumNeighborsEv>:
			}
		}
	}
}

size_t CellularHelperEnvironmentResponse::getNumNeighbors() const {
   d47b8:	b570      	push	{r4, r5, r6, lr}
	if (curDataIndex < 0) {
   d47ba:	6e04      	ldr	r4, [r0, #96]	; 0x60
   d47bc:	2c00      	cmp	r4, #0
   d47be:	db0f      	blt.n	d47e0 <_ZNK33CellularHelperEnvironmentResponse15getNumNeighborsEv+0x28>
		return 0;
	}
	else {
		if (neighbors) {
   d47c0:	6d85      	ldr	r5, [r0, #88]	; 0x58
   d47c2:	b15d      	cbz	r5, d47dc <_ZNK33CellularHelperEnvironmentResponse15getNumNeighborsEv+0x24>
   d47c4:	2200      	movs	r2, #0
			for(size_t ii = 0; ii < (size_t)curDataIndex; ii++) {
				if (!neighbors[ii].isValid()) {
   d47c6:	262c      	movs	r6, #44	; 0x2c
	if (curDataIndex < 0) {
		return 0;
	}
	else {
		if (neighbors) {
			for(size_t ii = 0; ii < (size_t)curDataIndex; ii++) {
   d47c8:	42a2      	cmp	r2, r4
   d47ca:	d007      	beq.n	d47dc <_ZNK33CellularHelperEnvironmentResponse15getNumNeighborsEv+0x24>
				if (!neighbors[ii].isValid()) {
   d47cc:	2100      	movs	r1, #0
   d47ce:	fb06 5002 	mla	r0, r6, r2, r5
   d47d2:	f7ff fe51 	bl	d4478 <_ZNK33CellularHelperEnvironmentCellData7isValidEb>
   d47d6:	b128      	cbz	r0, d47e4 <_ZNK33CellularHelperEnvironmentResponse15getNumNeighborsEv+0x2c>
	if (curDataIndex < 0) {
		return 0;
	}
	else {
		if (neighbors) {
			for(size_t ii = 0; ii < (size_t)curDataIndex; ii++) {
   d47d8:	3201      	adds	r2, #1
   d47da:	e7f5      	b.n	d47c8 <_ZNK33CellularHelperEnvironmentResponse15getNumNeighborsEv+0x10>
				if (!neighbors[ii].isValid()) {
					return ii;
				}
			}
		}
		return curDataIndex;
   d47dc:	4620      	mov	r0, r4
   d47de:	bd70      	pop	{r4, r5, r6, pc}
	}
}

size_t CellularHelperEnvironmentResponse::getNumNeighbors() const {
	if (curDataIndex < 0) {
		return 0;
   d47e0:	2000      	movs	r0, #0
   d47e2:	bd70      	pop	{r4, r5, r6, pc}
   d47e4:	4610      	mov	r0, r2
				}
			}
		}
		return curDataIndex;
	}
}
   d47e6:	bd70      	pop	{r4, r5, r6, pc}

000d47e8 <_ZN26CellularHelperCREGResponse11postProcessEv>:
	else {
		return "valid=false";
	}
}

void CellularHelperCREGResponse::postProcess() {
   d47e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	// "\r\n+CREG: 2,1,\"FFFE\",\"C45C010\",8\r\n"
	int n;

	if (sscanf(string.c_str(), "%d,%d,\"%x\",\"%x\",%d", &n, &stat, &lac, &ci, &rat) == 5) {
   d47ec:	f100 0634 	add.w	r6, r0, #52	; 0x34
	else {
		return "valid=false";
	}
}

void CellularHelperCREGResponse::postProcess() {
   d47f0:	b086      	sub	sp, #24
	// "\r\n+CREG: 2,1,\"FFFE\",\"C45C010\",8\r\n"
	int n;

	if (sscanf(string.c_str(), "%d,%d,\"%x\",\"%x\",%d", &n, &stat, &lac, &ci, &rat) == 5) {
   d47f2:	f100 0738 	add.w	r7, r0, #56	; 0x38
   d47f6:	f100 083c 	add.w	r8, r0, #60	; 0x3c
   d47fa:	e88d 01c0 	stmia.w	sp, {r6, r7, r8}
   d47fe:	f100 0530 	add.w	r5, r0, #48	; 0x30
	else {
		return "valid=false";
	}
}

void CellularHelperCREGResponse::postProcess() {
   d4802:	4604      	mov	r4, r0
	// "\r\n+CREG: 2,1,\"FFFE\",\"C45C010\",8\r\n"
	int n;

	if (sscanf(string.c_str(), "%d,%d,\"%x\",\"%x\",%d", &n, &stat, &lac, &ci, &rat) == 5) {
   d4804:	462b      	mov	r3, r5
   d4806:	aa05      	add	r2, sp, #20
   d4808:	490b      	ldr	r1, [pc, #44]	; (d4838 <_ZN26CellularHelperCREGResponse11postProcessEv+0x50>)
   d480a:	69c0      	ldr	r0, [r0, #28]
   d480c:	f001 f800 	bl	d5810 <sscanf>
   d4810:	2805      	cmp	r0, #5
   d4812:	d103      	bne.n	d481c <_ZN26CellularHelperCREGResponse11postProcessEv+0x34>
		// SARA-R4 does include the n (5 parameters)
		valid = true;
   d4814:	2301      	movs	r3, #1
   d4816:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
   d481a:	e009      	b.n	d4830 <_ZN26CellularHelperCREGResponse11postProcessEv+0x48>
	}
	else
	if (sscanf(string.c_str(), "%d,\"%x\",\"%x\",%d", &stat, &lac, &ci, &rat) == 4) {
   d481c:	e88d 0180 	stmia.w	sp, {r7, r8}
   d4820:	4633      	mov	r3, r6
   d4822:	462a      	mov	r2, r5
   d4824:	4905      	ldr	r1, [pc, #20]	; (d483c <_ZN26CellularHelperCREGResponse11postProcessEv+0x54>)
   d4826:	69e0      	ldr	r0, [r4, #28]
   d4828:	f000 fff2 	bl	d5810 <sscanf>
   d482c:	2804      	cmp	r0, #4
   d482e:	d0f1      	beq.n	d4814 <_ZN26CellularHelperCREGResponse11postProcessEv+0x2c>
		// SARA-U and SARA-G don't include the n (4 parameters)
		valid = true;
	}

}
   d4830:	b006      	add	sp, #24
   d4832:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4836:	bf00      	nop
   d4838:	000da39a 	.word	0x000da39a
   d483c:	000da39d 	.word	0x000da39d

000d4840 <_ZN28CellularHelperStringResponseC1Ev>:
 * Things that return a simple string, like the manufacturer string, use this
 *
 * Since it inherits from CellularHelperPlusStringResponse and CellularHelperCommonResponse you
 * can check resp == RESP_OK to make sure the call succeeded.
 */
class CellularHelperStringResponse : public CellularHelperCommonResponse {
   d4840:	b510      	push	{r4, lr}

/**
 * All response objects inherit from this, so the parse() method can be called
 * in the subclass, and also the resp and enableDebug members are always available.
 */
class CellularHelperCommonResponse {
   d4842:	f06f 0302 	mvn.w	r3, #2
   d4846:	6043      	str	r3, [r0, #4]
   d4848:	2300      	movs	r3, #0
   d484a:	7203      	strb	r3, [r0, #8]
 * Things that return a simple string, like the manufacturer string, use this
 *
 * Since it inherits from CellularHelperPlusStringResponse and CellularHelperCommonResponse you
 * can check resp == RESP_OK to make sure the call succeeded.
 */
class CellularHelperStringResponse : public CellularHelperCommonResponse {
   d484c:	4b04      	ldr	r3, [pc, #16]	; (d4860 <_ZN28CellularHelperStringResponseC1Ev+0x20>)
   d484e:	4905      	ldr	r1, [pc, #20]	; (d4864 <_ZN28CellularHelperStringResponseC1Ev+0x24>)
   d4850:	4604      	mov	r4, r0
   d4852:	f840 3b0c 	str.w	r3, [r0], #12
   d4856:	f001 fef0 	bl	d663a <_ZN6StringC1EPK19__FlashStringHelper>
   d485a:	4620      	mov	r0, r4
   d485c:	bd10      	pop	{r4, pc}
   d485e:	bf00      	nop
   d4860:	000da12c 	.word	0x000da12c
   d4864:	000da504 	.word	0x000da504

000d4868 <_ZN28CellularHelperStringResponseD1Ev>:
   d4868:	b510      	push	{r4, lr}
   d486a:	4b04      	ldr	r3, [pc, #16]	; (d487c <_ZN28CellularHelperStringResponseD1Ev+0x14>)
   d486c:	4604      	mov	r4, r0
   d486e:	f840 3b0c 	str.w	r3, [r0], #12
   d4872:	f001 fe9b 	bl	d65ac <_ZN6StringD1Ev>
   d4876:	4620      	mov	r0, r4
   d4878:	bd10      	pop	{r4, pc}
   d487a:	bf00      	nop
   d487c:	000da12c 	.word	0x000da12c

000d4880 <_ZNK19CellularHelperClass8getModelEv>:
	Cellular.command(responseCallback, (void *)&resp, DEFAULT_TIMEOUT, "AT+CGMI\r\n");

	return resp.string;
}

String CellularHelperClass::getModel() const {
   d4880:	b510      	push	{r4, lr}
   d4882:	b088      	sub	sp, #32
   d4884:	4604      	mov	r4, r0
	CellularHelperStringResponse resp;
   d4886:	a801      	add	r0, sp, #4
   d4888:	f7ff ffda 	bl	d4840 <_ZN28CellularHelperStringResponseC1Ev>

    template<typename T, typename... Targs>
    inline int command(int (*cb)(int type, const char* buf, int len, T* param),
            T* param, system_tick_t timeout_ms, const char* format, Targs... Fargs)
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
   d488c:	4b08      	ldr	r3, [pc, #32]	; (d48b0 <_ZNK19CellularHelperClass8getModelEv+0x30>)
   d488e:	4809      	ldr	r0, [pc, #36]	; (d48b4 <_ZNK19CellularHelperClass8getModelEv+0x34>)
   d4890:	f242 7210 	movw	r2, #10000	; 0x2710
   d4894:	a901      	add	r1, sp, #4
   d4896:	f000 fd95 	bl	d53c4 <cellular_command>

	Cellular.command(responseCallback, (void *)&resp, DEFAULT_TIMEOUT, "AT+CGMM\r\n");

	return resp.string;
   d489a:	a904      	add	r1, sp, #16
   d489c:	4620      	mov	r0, r4
   d489e:	f001 ff0b 	bl	d66b8 <_ZN6StringC1ERKS_>

	return resp.string;
}

String CellularHelperClass::getModel() const {
	CellularHelperStringResponse resp;
   d48a2:	a801      	add	r0, sp, #4
   d48a4:	f7ff ffe0 	bl	d4868 <_ZN28CellularHelperStringResponseD1Ev>

	Cellular.command(responseCallback, (void *)&resp, DEFAULT_TIMEOUT, "AT+CGMM\r\n");

	return resp.string;
}
   d48a8:	4620      	mov	r0, r4
   d48aa:	b008      	add	sp, #32
   d48ac:	bd10      	pop	{r4, pc}
   d48ae:	bf00      	nop
   d48b0:	000da3cd 	.word	0x000da3cd
   d48b4:	000d41cd 	.word	0x000d41cd

000d48b8 <_ZNK19CellularHelperClass5isLTEEv>:
	Cellular.command(responseCallback, (void *)&resp, DEFAULT_TIMEOUT, "AT+CCID\r\n");

	return resp.string;
}

bool CellularHelperClass::isLTE() const {
   d48b8:	b510      	push	{r4, lr}
   d48ba:	b088      	sub	sp, #32
	return getModel().startsWith("SARA-R4");
   d48bc:	4601      	mov	r1, r0
   d48be:	4668      	mov	r0, sp
   d48c0:	f7ff ffde 	bl	d4880 <_ZNK19CellularHelperClass8getModelEv>
   d48c4:	4909      	ldr	r1, [pc, #36]	; (d48ec <_ZNK19CellularHelperClass5isLTEEv+0x34>)
   d48c6:	a804      	add	r0, sp, #16
   d48c8:	f001 feb7 	bl	d663a <_ZN6StringC1EPK19__FlashStringHelper>
   d48cc:	a904      	add	r1, sp, #16
   d48ce:	4668      	mov	r0, sp
   d48d0:	f001 ff5f 	bl	d6792 <_ZNK6String10startsWithERKS_>
   d48d4:	4604      	mov	r4, r0
   d48d6:	a804      	add	r0, sp, #16
   d48d8:	f001 fe68 	bl	d65ac <_ZN6StringD1Ev>
   d48dc:	4668      	mov	r0, sp
   d48de:	f001 fe65 	bl	d65ac <_ZN6StringD1Ev>
}
   d48e2:	1c20      	adds	r0, r4, #0
   d48e4:	bf18      	it	ne
   d48e6:	2001      	movne	r0, #1
   d48e8:	b008      	add	sp, #32
   d48ea:	bd10      	pop	{r4, pc}
   d48ec:	000da40b 	.word	0x000da40b

000d48f0 <_ZNK19CellularHelperClass15getOperatorNameEi>:


String CellularHelperClass::getOperatorName(int operatorNameType) const {
   d48f0:	b530      	push	{r4, r5, lr}
	String result;
   d48f2:	4914      	ldr	r1, [pc, #80]	; (d4944 <_ZNK19CellularHelperClass15getOperatorNameEi+0x54>)
bool CellularHelperClass::isLTE() const {
	return getModel().startsWith("SARA-R4");
}


String CellularHelperClass::getOperatorName(int operatorNameType) const {
   d48f4:	b093      	sub	sp, #76	; 0x4c
   d48f6:	4615      	mov	r5, r2
   d48f8:	4604      	mov	r4, r0
	String result;
   d48fa:	f001 fe9e 	bl	d663a <_ZN6StringC1EPK19__FlashStringHelper>
	// The default is OPERATOR_NAME_LONG_EONS (9).
	// If the EONS name is not available, then the other things tried in order are:
	// NITZ, CPHS, ROM
	// So basically, something will be returned

	CellularHelperPlusStringResponse resp;
   d48fe:	a807      	add	r0, sp, #28
   d4900:	f7ff fd76 	bl	d43f0 <_ZN32CellularHelperPlusStringResponseC1Ev>
	resp.command = "UDOPN";
   d4904:	4910      	ldr	r1, [pc, #64]	; (d4948 <_ZNK19CellularHelperClass15getOperatorNameEi+0x58>)
   d4906:	a80a      	add	r0, sp, #40	; 0x28
   d4908:	f001 fee9 	bl	d66de <_ZN6StringaSEPKc>
   d490c:	9500      	str	r5, [sp, #0]
   d490e:	4b0f      	ldr	r3, [pc, #60]	; (d494c <_ZNK19CellularHelperClass15getOperatorNameEi+0x5c>)
   d4910:	480f      	ldr	r0, [pc, #60]	; (d4950 <_ZNK19CellularHelperClass15getOperatorNameEi+0x60>)
   d4912:	f242 7210 	movw	r2, #10000	; 0x2710
   d4916:	a907      	add	r1, sp, #28
   d4918:	f000 fd54 	bl	d53c4 <cellular_command>

	int respCode = Cellular.command(responseCallback, (void *)&resp, DEFAULT_TIMEOUT, "AT+UDOPN=%d\r\n", operatorNameType);

	if (respCode == RESP_OK) {
   d491c:	3002      	adds	r0, #2
   d491e:	d10b      	bne.n	d4938 <_ZNK19CellularHelperClass15getOperatorNameEi+0x48>
		result = resp.getDoubleQuotedPart();
   d4920:	2201      	movs	r2, #1
   d4922:	a907      	add	r1, sp, #28
   d4924:	a803      	add	r0, sp, #12
   d4926:	f7ff fd33 	bl	d4390 <_ZNK32CellularHelperPlusStringResponse19getDoubleQuotedPartEb>
   d492a:	a903      	add	r1, sp, #12
   d492c:	4620      	mov	r0, r4
   d492e:	f001 fece 	bl	d66ce <_ZN6StringaSEOS_>
   d4932:	a803      	add	r0, sp, #12
   d4934:	f001 fe3a 	bl	d65ac <_ZN6StringD1Ev>
	// The default is OPERATOR_NAME_LONG_EONS (9).
	// If the EONS name is not available, then the other things tried in order are:
	// NITZ, CPHS, ROM
	// So basically, something will be returned

	CellularHelperPlusStringResponse resp;
   d4938:	a807      	add	r0, sp, #28
   d493a:	f7ff fd73 	bl	d4424 <_ZN32CellularHelperPlusStringResponseD1Ev>
	if (respCode == RESP_OK) {
		result = resp.getDoubleQuotedPart();
	}

	return result;
}
   d493e:	4620      	mov	r0, r4
   d4940:	b013      	add	sp, #76	; 0x4c
   d4942:	bd30      	pop	{r4, r5, pc}
   d4944:	000da504 	.word	0x000da504
   d4948:	000da413 	.word	0x000da413
   d494c:	000da419 	.word	0x000da419
   d4950:	000d41cd 	.word	0x000d41cd

000d4954 <_ZNK19CellularHelperClass14getEnvironmentEiR33CellularHelperEnvironmentResponse>:

	return (respCode == RESP_OK);
}


void CellularHelperClass::getEnvironment(int mode, CellularHelperEnvironmentResponse &resp) const {
   d4954:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d4956:	4614      	mov	r4, r2
   d4958:	460d      	mov	r5, r1
	resp.command = "CGED";
   d495a:	f102 000c 	add.w	r0, r2, #12
   d495e:	4907      	ldr	r1, [pc, #28]	; (d497c <_ZNK19CellularHelperClass14getEnvironmentEiR33CellularHelperEnvironmentResponse+0x28>)
   d4960:	f001 febd 	bl	d66de <_ZN6StringaSEPKc>
   d4964:	9500      	str	r5, [sp, #0]
   d4966:	4b06      	ldr	r3, [pc, #24]	; (d4980 <_ZNK19CellularHelperClass14getEnvironmentEiR33CellularHelperEnvironmentResponse+0x2c>)
   d4968:	4806      	ldr	r0, [pc, #24]	; (d4984 <_ZNK19CellularHelperClass14getEnvironmentEiR33CellularHelperEnvironmentResponse+0x30>)
   d496a:	f242 7210 	movw	r2, #10000	; 0x2710
   d496e:	4621      	mov	r1, r4
   d4970:	f000 fd28 	bl	d53c4 <cellular_command>
	// resp.enableDebug = true;

	resp.resp = Cellular.command(responseCallback, (void *)&resp, DEFAULT_TIMEOUT, "AT+CGED=%d\r\n", mode);
   d4974:	6060      	str	r0, [r4, #4]
	if (resp.resp == RESP_OK) {
		resp.postProcess();
	}
}
   d4976:	b003      	add	sp, #12
   d4978:	bd30      	pop	{r4, r5, pc}
   d497a:	bf00      	nop
   d497c:	000da473 	.word	0x000da473
   d4980:	000da478 	.word	0x000da478
   d4984:	000d41cd 	.word	0x000d41cd

000d4988 <_ZNK19CellularHelperClass7getCREGER26CellularHelperCREGResponse>:
	}

	return resp;
}

void CellularHelperClass::getCREG(CellularHelperCREGResponse &resp) const {
   d4988:	b510      	push	{r4, lr}
   d498a:	460c      	mov	r4, r1
    }

    template<typename... Targs>
    inline int command(system_tick_t timeout_ms, const char* format, Targs... Fargs)
    {
        return cellular_command(NULL, NULL, timeout_ms, format, Fargs...);
   d498c:	2100      	movs	r1, #0
   d498e:	4b12      	ldr	r3, [pc, #72]	; (d49d8 <_ZNK19CellularHelperClass7getCREGER26CellularHelperCREGResponse+0x50>)
   d4990:	f242 7210 	movw	r2, #10000	; 0x2710
   d4994:	4608      	mov	r0, r1
   d4996:	f000 fd15 	bl	d53c4 <cellular_command>
	int tempResp;

	tempResp = Cellular.command(DEFAULT_TIMEOUT, "AT+CREG=2\r\n");
	if (tempResp == RESP_OK) {
   d499a:	3002      	adds	r0, #2
   d499c:	d11a      	bne.n	d49d4 <_ZNK19CellularHelperClass7getCREGER26CellularHelperCREGResponse+0x4c>
		resp.command = "CREG";
   d499e:	490f      	ldr	r1, [pc, #60]	; (d49dc <_ZNK19CellularHelperClass7getCREGER26CellularHelperCREGResponse+0x54>)
   d49a0:	f104 000c 	add.w	r0, r4, #12
   d49a4:	f001 fe9b 	bl	d66de <_ZN6StringaSEPKc>

    template<typename T, typename... Targs>
    inline int command(int (*cb)(int type, const char* buf, int len, T* param),
            T* param, system_tick_t timeout_ms, const char* format, Targs... Fargs)
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
   d49a8:	4b0d      	ldr	r3, [pc, #52]	; (d49e0 <_ZNK19CellularHelperClass7getCREGER26CellularHelperCREGResponse+0x58>)
   d49aa:	480e      	ldr	r0, [pc, #56]	; (d49e4 <_ZNK19CellularHelperClass7getCREGER26CellularHelperCREGResponse+0x5c>)
   d49ac:	f242 7210 	movw	r2, #10000	; 0x2710
   d49b0:	4621      	mov	r1, r4
   d49b2:	f000 fd07 	bl	d53c4 <cellular_command>
		resp.resp = Cellular.command(responseCallback, (void *)&resp, DEFAULT_TIMEOUT, "AT+CREG?\r\n");
   d49b6:	6060      	str	r0, [r4, #4]
		if (resp.resp == RESP_OK) {
   d49b8:	3002      	adds	r0, #2
   d49ba:	d10b      	bne.n	d49d4 <_ZNK19CellularHelperClass7getCREGER26CellularHelperCREGResponse+0x4c>
			resp.postProcess();
   d49bc:	4620      	mov	r0, r4
   d49be:	f7ff ff13 	bl	d47e8 <_ZN26CellularHelperCREGResponse11postProcessEv>
    }

    template<typename... Targs>
    inline int command(system_tick_t timeout_ms, const char* format, Targs... Fargs)
    {
        return cellular_command(NULL, NULL, timeout_ms, format, Fargs...);
   d49c2:	2100      	movs	r1, #0
   d49c4:	4b08      	ldr	r3, [pc, #32]	; (d49e8 <_ZNK19CellularHelperClass7getCREGER26CellularHelperCREGResponse+0x60>)
   d49c6:	f242 7210 	movw	r2, #10000	; 0x2710
   d49ca:	4608      	mov	r0, r1

			// Set back to default
			tempResp = Cellular.command(DEFAULT_TIMEOUT, "AT+CREG=0\r\n");
		}
	}
}
   d49cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d49d0:	f000 bcf8 	b.w	d53c4 <cellular_command>
   d49d4:	bd10      	pop	{r4, pc}
   d49d6:	bf00      	nop
   d49d8:	000da4b3 	.word	0x000da4b3
   d49dc:	000da4bf 	.word	0x000da4bf
   d49e0:	000da4c4 	.word	0x000da4c4
   d49e4:	000d41cd 	.word	0x000d41cd
   d49e8:	000da4cf 	.word	0x000da4cf

000d49ec <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib>:



// There isn't an overload of String that takes a buffer and length, but that's what comes back from
// the Cellular.command callback, so that's why this method exists.
void CellularHelperClass::appendBufferToString(String &str, const char *buf, int len, bool noEOL) const {
   d49ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d49f0:	460d      	mov	r5, r1
   d49f2:	461f      	mov	r7, r3
	str.reserve(str.length() + (size_t)len + 1);
   d49f4:	1c59      	adds	r1, r3, #1
   d49f6:	68ab      	ldr	r3, [r5, #8]



// There isn't an overload of String that takes a buffer and length, but that's what comes back from
// the Cellular.command callback, so that's why this method exists.
void CellularHelperClass::appendBufferToString(String &str, const char *buf, int len, bool noEOL) const {
   d49f8:	f89d 8018 	ldrb.w	r8, [sp, #24]
	str.reserve(str.length() + (size_t)len + 1);
   d49fc:	4419      	add	r1, r3
   d49fe:	4628      	mov	r0, r5



// There isn't an overload of String that takes a buffer and length, but that's what comes back from
// the Cellular.command callback, so that's why this method exists.
void CellularHelperClass::appendBufferToString(String &str, const char *buf, int len, bool noEOL) const {
   d4a00:	4616      	mov	r6, r2
	str.reserve(str.length() + (size_t)len + 1);
   d4a02:	f001 fdf1 	bl	d65e8 <_ZN6String7reserveEj>
   d4a06:	4634      	mov	r4, r6
	for(int ii = 0; ii < len; ii++) {
   d4a08:	1ba3      	subs	r3, r4, r6
   d4a0a:	429f      	cmp	r7, r3
   d4a0c:	dd0d      	ble.n	d4a2a <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib+0x3e>
		if (!noEOL || (buf[ii] != '\r' && buf[ii] != '\n')) {
   d4a0e:	f1b8 0f00 	cmp.w	r8, #0
   d4a12:	d004      	beq.n	d4a1e <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib+0x32>
   d4a14:	7823      	ldrb	r3, [r4, #0]
   d4a16:	2b0d      	cmp	r3, #13
   d4a18:	d005      	beq.n	d4a26 <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib+0x3a>
   d4a1a:	2b0a      	cmp	r3, #10
   d4a1c:	d003      	beq.n	d4a26 <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib+0x3a>
			str.concat(buf[ii]);
   d4a1e:	7821      	ldrb	r1, [r4, #0]
   d4a20:	4628      	mov	r0, r5
   d4a22:	f001 fe93 	bl	d674c <_ZN6String6concatEc>
   d4a26:	3401      	adds	r4, #1

// There isn't an overload of String that takes a buffer and length, but that's what comes back from
// the Cellular.command callback, so that's why this method exists.
void CellularHelperClass::appendBufferToString(String &str, const char *buf, int len, bool noEOL) const {
	str.reserve(str.length() + (size_t)len + 1);
	for(int ii = 0; ii < len; ii++) {
   d4a28:	e7ee      	b.n	d4a08 <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib+0x1c>
   d4a2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d4a30 <_ZN28CellularHelperStringResponse5parseEiPKci>:
}




int CellularHelperStringResponse::parse(int type, const char *buf, int len) {
   d4a30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (enableDebug) {
   d4a32:	f890 e008 	ldrb.w	lr, [r0, #8]
}




int CellularHelperStringResponse::parse(int type, const char *buf, int len) {
   d4a36:	4604      	mov	r4, r0
   d4a38:	460f      	mov	r7, r1
   d4a3a:	4615      	mov	r5, r2
   d4a3c:	461e      	mov	r6, r3
	if (enableDebug) {
   d4a3e:	f1be 0f00 	cmp.w	lr, #0
   d4a42:	d001      	beq.n	d4a48 <_ZN28CellularHelperStringResponse5parseEiPKci+0x18>
		logCellularDebug(type, buf, len);
   d4a44:	f7ff fbe4 	bl	d4210 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci>
	}
	if (type == TYPE_UNKNOWN) {
   d4a48:	b947      	cbnz	r7, d4a5c <_ZN28CellularHelperStringResponse5parseEiPKci+0x2c>
		CellularHelper.appendBufferToString(string, buf, len, true);
   d4a4a:	2301      	movs	r3, #1
   d4a4c:	9300      	str	r3, [sp, #0]
   d4a4e:	462a      	mov	r2, r5
   d4a50:	4633      	mov	r3, r6
   d4a52:	f104 010c 	add.w	r1, r4, #12
   d4a56:	4803      	ldr	r0, [pc, #12]	; (d4a64 <_ZN28CellularHelperStringResponse5parseEiPKci+0x34>)
   d4a58:	f7ff ffc8 	bl	d49ec <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib>
	}
	return WAIT;
}
   d4a5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d4a60:	b003      	add	sp, #12
   d4a62:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4a64:	2003e248 	.word	0x2003e248

000d4a68 <_ZN32CellularHelperPlusStringResponse5parseEiPKci>:


int CellularHelperPlusStringResponse::parse(int type, const char *buf, int len) {
   d4a68:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (enableDebug) {
   d4a6a:	f890 e008 	ldrb.w	lr, [r0, #8]
	}
	return WAIT;
}


int CellularHelperPlusStringResponse::parse(int type, const char *buf, int len) {
   d4a6e:	b08b      	sub	sp, #44	; 0x2c
   d4a70:	4606      	mov	r6, r0
   d4a72:	460d      	mov	r5, r1
   d4a74:	4617      	mov	r7, r2
   d4a76:	461c      	mov	r4, r3
	if (enableDebug) {
   d4a78:	f1be 0f00 	cmp.w	lr, #0
   d4a7c:	d001      	beq.n	d4a82 <_ZN32CellularHelperPlusStringResponse5parseEiPKci+0x1a>
		logCellularDebug(type, buf, len);
   d4a7e:	f7ff fbc7 	bl	d4210 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci>
	}
	if (type == TYPE_PLUS) {
   d4a82:	f5b5 0f80 	cmp.w	r5, #4194304	; 0x400000
   d4a86:	d12a      	bne.n	d4ade <_ZN32CellularHelperPlusStringResponse5parseEiPKci+0x76>
		// Copy to temporary string to make processing easier
		char *copy = (char *) malloc(len + 1);
   d4a88:	1c60      	adds	r0, r4, #1
   d4a8a:	f000 fea1 	bl	d57d0 <malloc>
		if (copy) {
   d4a8e:	4605      	mov	r5, r0
   d4a90:	b328      	cbz	r0, d4ade <_ZN32CellularHelperPlusStringResponse5parseEiPKci+0x76>
			strncpy(copy, buf, len);
   d4a92:	4622      	mov	r2, r4
   d4a94:	4639      	mov	r1, r7
   d4a96:	f003 f95b 	bl	d7d50 <strncpy>
			copy[len] = 0;
   d4a9a:	2300      	movs	r3, #0
   d4a9c:	552b      	strb	r3, [r5, r4]

			// We return the parts of the + response corresponding to the command we requested
			char searchFor[32];
			snprintf(searchFor, sizeof(searchFor), "\n+%s: ", command.c_str());
   d4a9e:	4a12      	ldr	r2, [pc, #72]	; (d4ae8 <_ZN32CellularHelperPlusStringResponse5parseEiPKci+0x80>)
   d4aa0:	68f3      	ldr	r3, [r6, #12]
   d4aa2:	2120      	movs	r1, #32
   d4aa4:	a802      	add	r0, sp, #8
   d4aa6:	f000 fec3 	bl	d5830 <snprintf>

			//Log.info("searching for: +%s:", command.c_str());

			char *start = strstr(copy, searchFor);
   d4aaa:	a902      	add	r1, sp, #8
   d4aac:	4628      	mov	r0, r5
   d4aae:	f003 f962 	bl	d7d76 <strstr>
			if (start) {
   d4ab2:	4604      	mov	r4, r0
   d4ab4:	b180      	cbz	r0, d4ad8 <_ZN32CellularHelperPlusStringResponse5parseEiPKci+0x70>
				start += strlen(searchFor);
   d4ab6:	a802      	add	r0, sp, #8
   d4ab8:	f003 f92d 	bl	d7d16 <strlen>
   d4abc:	4404      	add	r4, r0

				char *end = strchr(start, '\r');
   d4abe:	210d      	movs	r1, #13
   d4ac0:	4620      	mov	r0, r4
   d4ac2:	f003 f8ed 	bl	d7ca0 <strchr>
				CellularHelper.appendBufferToString(string, start, end - start);
   d4ac6:	2301      	movs	r3, #1
   d4ac8:	9300      	str	r3, [sp, #0]
   d4aca:	4622      	mov	r2, r4
   d4acc:	1b03      	subs	r3, r0, r4
   d4ace:	f106 011c 	add.w	r1, r6, #28
   d4ad2:	4806      	ldr	r0, [pc, #24]	; (d4aec <_ZN32CellularHelperPlusStringResponse5parseEiPKci+0x84>)
   d4ad4:	f7ff ff8a 	bl	d49ec <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib>
			}
			else {
				//Log.info("not found");
			}

			free(copy);
   d4ad8:	4628      	mov	r0, r5
   d4ada:	f000 fe81 	bl	d57e0 <free>
		}
	}
	return WAIT;
}
   d4ade:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d4ae2:	b00b      	add	sp, #44	; 0x2c
   d4ae4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4ae6:	bf00      	nop
   d4ae8:	000da511 	.word	0x000da511
   d4aec:	2003e248 	.word	0x2003e248

000d4af0 <_GLOBAL__sub_I_CellularHelper>:
   d4af0:	f000 bcc2 	b.w	d5478 <HAL_Pin_Map>

000d4af4 <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d4af4:	6803      	ldr	r3, [r0, #0]
   d4af6:	b2c9      	uxtb	r1, r1
   d4af8:	689b      	ldr	r3, [r3, #8]
   d4afa:	4718      	bx	r3

000d4afc <_ZN9SeeedOLED11sendCommandEh>:
  delay(5);
  sendCommand(SeeedOLED_Normal_Display_Cmd); //Set Normal Display (default)
}

void SeeedOLED::sendCommand(unsigned char command)
{
   d4afc:	b510      	push	{r4, lr}
   d4afe:	460c      	mov	r4, r1
  Wire.beginTransmission(SeeedOLED_Address); // begin I2C communication
   d4b00:	f002 f904 	bl	d6d0c <_Z19__fetch_global_Wirev>
   d4b04:	213c      	movs	r1, #60	; 0x3c
   d4b06:	f001 fabd 	bl	d6084 <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(SeeedOLED_Command_Mode);        // Set OLED Command mode
   d4b0a:	f002 f8ff 	bl	d6d0c <_Z19__fetch_global_Wirev>
   d4b0e:	2180      	movs	r1, #128	; 0x80
   d4b10:	f7ff fff0 	bl	d4af4 <_ZN7TwoWire5writeEi>
  Wire.write(command);
   d4b14:	f002 f8fa 	bl	d6d0c <_Z19__fetch_global_Wirev>
   d4b18:	6803      	ldr	r3, [r0, #0]
   d4b1a:	4621      	mov	r1, r4
   d4b1c:	689b      	ldr	r3, [r3, #8]
   d4b1e:	4798      	blx	r3
  Wire.endTransmission(); // End I2C communication
   d4b20:	f002 f8f4 	bl	d6d0c <_Z19__fetch_global_Wirev>
}
   d4b24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void SeeedOLED::sendCommand(unsigned char command)
{
  Wire.beginTransmission(SeeedOLED_Address); // begin I2C communication
  Wire.write(SeeedOLED_Command_Mode);        // Set OLED Command mode
  Wire.write(command);
  Wire.endTransmission(); // End I2C communication
   d4b28:	f001 bab3 	b.w	d6092 <_ZN7TwoWire15endTransmissionEv>

000d4b2c <_ZN9SeeedOLED4initEv>:
        {0x00, 0x41, 0x36, 0x08, 0x00, 0x00, 0x00, 0x00},
        {0x00, 0x02, 0x01, 0x01, 0x02, 0x01, 0x00, 0x00},
        {0x00, 0x02, 0x05, 0x05, 0x02, 0x00, 0x00, 0x00}};

void SeeedOLED::init(void)
{
   d4b2c:	b510      	push	{r4, lr}
  sendCommand(SeeedOLED_Display_Off_Cmd); //display off
   d4b2e:	21ae      	movs	r1, #174	; 0xae
        {0x00, 0x41, 0x36, 0x08, 0x00, 0x00, 0x00, 0x00},
        {0x00, 0x02, 0x01, 0x01, 0x02, 0x01, 0x00, 0x00},
        {0x00, 0x02, 0x05, 0x05, 0x02, 0x00, 0x00, 0x00}};

void SeeedOLED::init(void)
{
   d4b30:	4604      	mov	r4, r0
  sendCommand(SeeedOLED_Display_Off_Cmd); //display off
   d4b32:	f7ff ffe3 	bl	d4afc <_ZN9SeeedOLED11sendCommandEh>
  delay(5);
   d4b36:	2005      	movs	r0, #5
   d4b38:	f000 fe9a 	bl	d5870 <delay>
  sendCommand(SeeedOLED_Display_On_Cmd); //display on
   d4b3c:	21af      	movs	r1, #175	; 0xaf
   d4b3e:	4620      	mov	r0, r4
   d4b40:	f7ff ffdc 	bl	d4afc <_ZN9SeeedOLED11sendCommandEh>
  delay(5);
   d4b44:	2005      	movs	r0, #5
   d4b46:	f000 fe93 	bl	d5870 <delay>
  sendCommand(SeeedOLED_Normal_Display_Cmd); //Set Normal Display (default)
   d4b4a:	4620      	mov	r0, r4
   d4b4c:	21a6      	movs	r1, #166	; 0xa6
}
   d4b4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
{
  sendCommand(SeeedOLED_Display_Off_Cmd); //display off
  delay(5);
  sendCommand(SeeedOLED_Display_On_Cmd); //display on
  delay(5);
  sendCommand(SeeedOLED_Normal_Display_Cmd); //Set Normal Display (default)
   d4b52:	f7ff bfd3 	b.w	d4afc <_ZN9SeeedOLED11sendCommandEh>

000d4b56 <_ZN9SeeedOLED11setPageModeEv>:
  sendCommand(0x20); //set addressing mode
  sendCommand(0x00); //set horizontal addressing mode
}

void SeeedOLED::setPageMode()
{
   d4b56:	b510      	push	{r4, lr}
  addressingMode = PAGE_MODE;
   d4b58:	2301      	movs	r3, #1
  sendCommand(0x20); //set addressing mode
  sendCommand(0x00); //set horizontal addressing mode
}

void SeeedOLED::setPageMode()
{
   d4b5a:	4604      	mov	r4, r0
  addressingMode = PAGE_MODE;
   d4b5c:	7003      	strb	r3, [r0, #0]
  sendCommand(0x20); //set addressing mode
   d4b5e:	2120      	movs	r1, #32
   d4b60:	f7ff ffcc 	bl	d4afc <_ZN9SeeedOLED11sendCommandEh>
  sendCommand(0x02); //set page addressing mode
   d4b64:	4620      	mov	r0, r4
   d4b66:	2102      	movs	r1, #2
}
   d4b68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

void SeeedOLED::setPageMode()
{
  addressingMode = PAGE_MODE;
  sendCommand(0x20); //set addressing mode
  sendCommand(0x02); //set page addressing mode
   d4b6c:	f7ff bfc6 	b.w	d4afc <_ZN9SeeedOLED11sendCommandEh>

000d4b70 <_ZN9SeeedOLED9setTextXYEhh>:
}

void SeeedOLED::setTextXY(unsigned char Row, unsigned char Column)
{
   d4b70:	b538      	push	{r3, r4, r5, lr}
  sendCommand(0xB0 + Row);                        //set page address
   d4b72:	3950      	subs	r1, #80	; 0x50
  sendCommand(0x20); //set addressing mode
  sendCommand(0x02); //set page addressing mode
}

void SeeedOLED::setTextXY(unsigned char Row, unsigned char Column)
{
   d4b74:	4614      	mov	r4, r2
  sendCommand(0xB0 + Row);                        //set page address
   d4b76:	b2c9      	uxtb	r1, r1
  sendCommand(0x20); //set addressing mode
  sendCommand(0x02); //set page addressing mode
}

void SeeedOLED::setTextXY(unsigned char Row, unsigned char Column)
{
   d4b78:	4605      	mov	r5, r0
  sendCommand(0xB0 + Row);                        //set page address
   d4b7a:	f7ff ffbf 	bl	d4afc <_ZN9SeeedOLED11sendCommandEh>
  sendCommand(0x00 + (8 * Column & 0x0F));        //set column lower address
   d4b7e:	00e1      	lsls	r1, r4, #3
   d4b80:	4628      	mov	r0, r5
   d4b82:	f001 0108 	and.w	r1, r1, #8
   d4b86:	f7ff ffb9 	bl	d4afc <_ZN9SeeedOLED11sendCommandEh>
  sendCommand(0x10 + ((8 * Column >> 4) & 0x0F)); //set column higher address
   d4b8a:	f3c4 0143 	ubfx	r1, r4, #1, #4
   d4b8e:	4628      	mov	r0, r5
   d4b90:	3110      	adds	r1, #16
}
   d4b92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

void SeeedOLED::setTextXY(unsigned char Row, unsigned char Column)
{
  sendCommand(0xB0 + Row);                        //set page address
  sendCommand(0x00 + (8 * Column & 0x0F));        //set column lower address
  sendCommand(0x10 + ((8 * Column >> 4) & 0x0F)); //set column higher address
   d4b96:	f7ff bfb1 	b.w	d4afc <_ZN9SeeedOLED11sendCommandEh>

000d4b9a <_ZN9SeeedOLED8sendDataEh>:
  sendCommand(SeeedOLED_Display_On_Cmd); //display on
  setTextXY(0, 0);
}

void SeeedOLED::sendData(unsigned char Data)
{
   d4b9a:	b510      	push	{r4, lr}
   d4b9c:	460c      	mov	r4, r1
  Wire.beginTransmission(SeeedOLED_Address); // begin I2C transmission
   d4b9e:	f002 f8b5 	bl	d6d0c <_Z19__fetch_global_Wirev>
   d4ba2:	213c      	movs	r1, #60	; 0x3c
   d4ba4:	f001 fa6e 	bl	d6084 <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(SeeedOLED_Data_Mode);           // data mode
   d4ba8:	f002 f8b0 	bl	d6d0c <_Z19__fetch_global_Wirev>
   d4bac:	2140      	movs	r1, #64	; 0x40
   d4bae:	f7ff ffa1 	bl	d4af4 <_ZN7TwoWire5writeEi>
  Wire.write(Data);
   d4bb2:	f002 f8ab 	bl	d6d0c <_Z19__fetch_global_Wirev>
   d4bb6:	6803      	ldr	r3, [r0, #0]
   d4bb8:	4621      	mov	r1, r4
   d4bba:	689b      	ldr	r3, [r3, #8]
   d4bbc:	4798      	blx	r3
  Wire.endTransmission(); // stop I2C transmission
   d4bbe:	f002 f8a5 	bl	d6d0c <_Z19__fetch_global_Wirev>
}
   d4bc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void SeeedOLED::sendData(unsigned char Data)
{
  Wire.beginTransmission(SeeedOLED_Address); // begin I2C transmission
  Wire.write(SeeedOLED_Data_Mode);           // data mode
  Wire.write(Data);
  Wire.endTransmission(); // stop I2C transmission
   d4bc6:	f001 ba64 	b.w	d6092 <_ZN7TwoWire15endTransmissionEv>
	...

000d4bcc <_ZN9SeeedOLED7putCharEh>:
}

void SeeedOLED::putChar(unsigned char C)
{
  if (C < 32 || C > 127) //Ignore non-printable ASCII characters. This can be modified for multilingual font.
   d4bcc:	f1a1 0320 	sub.w	r3, r1, #32
  {
    C = ' '; //Space
   d4bd0:	2b5f      	cmp	r3, #95	; 0x5f
   d4bd2:	4b0b      	ldr	r3, [pc, #44]	; (d4c00 <_ZN9SeeedOLED7putCharEh+0x34>)
   d4bd4:	bf88      	it	hi
   d4bd6:	2120      	movhi	r1, #32
  Wire.write(Data);
  Wire.endTransmission(); // stop I2C transmission
}

void SeeedOLED::putChar(unsigned char C)
{
   d4bd8:	b570      	push	{r4, r5, r6, lr}
   d4bda:	f46f 7280 	mvn.w	r2, #256	; 0x100
   d4bde:	eb03 05c1 	add.w	r5, r3, r1, lsl #3
   d4be2:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   d4be6:	4606      	mov	r6, r0
   d4be8:	4415      	add	r5, r2
   d4bea:	f1a3 04f9 	sub.w	r4, r3, #249	; 0xf9
  }
  unsigned char i = 0;
  for (i = 0; i < 8; i++)
  {
    //read bytes from code memory
    sendData(pgm_read_byte(&BasicFont[C - 32][i])); //font array starts at 0, ASCII starts at 32. Hence the translation
   d4bee:	f815 1f01 	ldrb.w	r1, [r5, #1]!
   d4bf2:	4630      	mov	r0, r6
   d4bf4:	f7ff ffd1 	bl	d4b9a <_ZN9SeeedOLED8sendDataEh>
  if (C < 32 || C > 127) //Ignore non-printable ASCII characters. This can be modified for multilingual font.
  {
    C = ' '; //Space
  }
  unsigned char i = 0;
  for (i = 0; i < 8; i++)
   d4bf8:	42a5      	cmp	r5, r4
   d4bfa:	d1f8      	bne.n	d4bee <_ZN9SeeedOLED7putCharEh+0x22>
  {
    //read bytes from code memory
    sendData(pgm_read_byte(&BasicFont[C - 32][i])); //font array starts at 0, ASCII starts at 32. Hence the translation
  }
}
   d4bfc:	bd70      	pop	{r4, r5, r6, pc}
   d4bfe:	bf00      	nop
   d4c00:	000da530 	.word	0x000da530

000d4c04 <_ZN9SeeedOLED12clearDisplayEv>:
  sendCommand(0x00 + (8 * Column & 0x0F));        //set column lower address
  sendCommand(0x10 + ((8 * Column >> 4) & 0x0F)); //set column higher address
}

void SeeedOLED::clearDisplay()
{
   d4c04:	b570      	push	{r4, r5, r6, lr}
  unsigned char i, j;
  sendCommand(SeeedOLED_Display_Off_Cmd); //display off
   d4c06:	21ae      	movs	r1, #174	; 0xae
  sendCommand(0x00 + (8 * Column & 0x0F));        //set column lower address
  sendCommand(0x10 + ((8 * Column >> 4) & 0x0F)); //set column higher address
}

void SeeedOLED::clearDisplay()
{
   d4c08:	4605      	mov	r5, r0
  unsigned char i, j;
  sendCommand(SeeedOLED_Display_Off_Cmd); //display off
   d4c0a:	f7ff ff77 	bl	d4afc <_ZN9SeeedOLED11sendCommandEh>
   d4c0e:	2600      	movs	r6, #0
  for (j = 0; j < 8; j++)
  {
    setTextXY(j, 0);
   d4c10:	2200      	movs	r2, #0
   d4c12:	b2f1      	uxtb	r1, r6
   d4c14:	4628      	mov	r0, r5
   d4c16:	f7ff ffab 	bl	d4b70 <_ZN9SeeedOLED9setTextXYEhh>
   d4c1a:	2410      	movs	r4, #16
    {
      for (i = 0; i < 16; i++) //clear all columns
      {
        putChar(' ');
   d4c1c:	2120      	movs	r1, #32
   d4c1e:	4628      	mov	r0, r5
   d4c20:	3c01      	subs	r4, #1
   d4c22:	f7ff ffd3 	bl	d4bcc <_ZN9SeeedOLED7putCharEh>
  sendCommand(SeeedOLED_Display_Off_Cmd); //display off
  for (j = 0; j < 8; j++)
  {
    setTextXY(j, 0);
    {
      for (i = 0; i < 16; i++) //clear all columns
   d4c26:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   d4c2a:	d1f7      	bne.n	d4c1c <_ZN9SeeedOLED12clearDisplayEv+0x18>
   d4c2c:	3601      	adds	r6, #1

void SeeedOLED::clearDisplay()
{
  unsigned char i, j;
  sendCommand(SeeedOLED_Display_Off_Cmd); //display off
  for (j = 0; j < 8; j++)
   d4c2e:	2e08      	cmp	r6, #8
   d4c30:	d1ee      	bne.n	d4c10 <_ZN9SeeedOLED12clearDisplayEv+0xc>
      {
        putChar(' ');
      }
    }
  }
  sendCommand(SeeedOLED_Display_On_Cmd); //display on
   d4c32:	4628      	mov	r0, r5
   d4c34:	21af      	movs	r1, #175	; 0xaf
   d4c36:	f7ff ff61 	bl	d4afc <_ZN9SeeedOLED11sendCommandEh>
  setTextXY(0, 0);
   d4c3a:	4622      	mov	r2, r4
   d4c3c:	4621      	mov	r1, r4
   d4c3e:	4628      	mov	r0, r5
}
   d4c40:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        putChar(' ');
      }
    }
  }
  sendCommand(SeeedOLED_Display_On_Cmd); //display on
  setTextXY(0, 0);
   d4c44:	f7ff bf94 	b.w	d4b70 <_ZN9SeeedOLED9setTextXYEhh>

000d4c48 <_ZN9SeeedOLED9putStringEPKc>:
    sendData(pgm_read_byte(&BasicFont[C - 32][i])); //font array starts at 0, ASCII starts at 32. Hence the translation
  }
}

void SeeedOLED::putString(const char *String)
{
   d4c48:	b570      	push	{r4, r5, r6, lr}
   d4c4a:	4605      	mov	r5, r0
   d4c4c:	460e      	mov	r6, r1
   d4c4e:	2400      	movs	r4, #0
  unsigned char i = 0;
  while (String[i])
   d4c50:	b2e3      	uxtb	r3, r4
   d4c52:	3401      	adds	r4, #1
   d4c54:	5cf1      	ldrb	r1, [r6, r3]
   d4c56:	b119      	cbz	r1, d4c60 <_ZN9SeeedOLED9putStringEPKc+0x18>
  {
    putChar(String[i]);
   d4c58:	4628      	mov	r0, r5
   d4c5a:	f7ff ffb7 	bl	d4bcc <_ZN9SeeedOLED7putCharEh>
}

void SeeedOLED::putString(const char *String)
{
  unsigned char i = 0;
  while (String[i])
   d4c5e:	e7f7      	b.n	d4c50 <_ZN9SeeedOLED9putStringEPKc+0x8>
   d4c60:	bd70      	pop	{r4, r5, r6, pc}

000d4c62 <_ZN9SeeedOLED9putNumberEl>:
    i++;
  }
}

unsigned char SeeedOLED::putNumber(long long_num)
{
   d4c62:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4c64:	b085      	sub	sp, #20
  unsigned char char_buffer[10] = "";
   d4c66:	2300      	movs	r3, #0
  unsigned char i = 0;
  unsigned char f = 0;

  if (long_num < 0)
   d4c68:	1e0e      	subs	r6, r1, #0
    i++;
  }
}

unsigned char SeeedOLED::putNumber(long long_num)
{
   d4c6a:	4607      	mov	r7, r0
  unsigned char char_buffer[10] = "";
   d4c6c:	9301      	str	r3, [sp, #4]
   d4c6e:	9302      	str	r3, [sp, #8]
   d4c70:	f8ad 300c 	strh.w	r3, [sp, #12]
  unsigned char i = 0;
  unsigned char f = 0;

  if (long_num < 0)
   d4c74:	da07      	bge.n	d4c86 <_ZN9SeeedOLED9putNumberEl+0x24>
  {
    f = 1;
    putChar('-');
   d4c76:	212d      	movs	r1, #45	; 0x2d
   d4c78:	f7ff ffa8 	bl	d4bcc <_ZN9SeeedOLED7putCharEh>
    long_num = -long_num;
   d4c7c:	4276      	negs	r6, r6
  unsigned char i = 0;
  unsigned char f = 0;

  if (long_num < 0)
  {
    f = 1;
   d4c7e:	2301      	movs	r3, #1

unsigned char SeeedOLED::putNumber(long long_num)
{
  unsigned char char_buffer[10] = "";
  unsigned char i = 0;
  unsigned char f = 0;
   d4c80:	2400      	movs	r4, #0
    return f;
  }

  while (long_num > 0)
  {
    char_buffer[i++] = long_num % 10;
   d4c82:	210a      	movs	r1, #10
   d4c84:	e005      	b.n	d4c92 <_ZN9SeeedOLED9putNumberEl+0x30>
  {
    f = 1;
    putChar('-');
    long_num = -long_num;
  }
  else if (long_num == 0)
   d4c86:	d1fb      	bne.n	d4c80 <_ZN9SeeedOLED9putNumberEl+0x1e>
  {
    f = 1;
    putChar('0');
   d4c88:	2130      	movs	r1, #48	; 0x30
   d4c8a:	f7ff ff9f 	bl	d4bcc <_ZN9SeeedOLED7putCharEh>
    return f;
   d4c8e:	2001      	movs	r0, #1
   d4c90:	e01d      	b.n	d4cce <_ZN9SeeedOLED9putNumberEl+0x6c>
  }

  while (long_num > 0)
  {
    char_buffer[i++] = long_num % 10;
   d4c92:	aa04      	add	r2, sp, #16
   d4c94:	1c65      	adds	r5, r4, #1
   d4c96:	4414      	add	r4, r2
   d4c98:	b2ed      	uxtb	r5, r5
   d4c9a:	fb96 f2f1 	sdiv	r2, r6, r1
   d4c9e:	fb01 6612 	mls	r6, r1, r2, r6
   d4ca2:	f804 6c0c 	strb.w	r6, [r4, #-12]
   d4ca6:	462c      	mov	r4, r5
    f = 1;
    putChar('0');
    return f;
  }

  while (long_num > 0)
   d4ca8:	4616      	mov	r6, r2
   d4caa:	2a00      	cmp	r2, #0
   d4cac:	d1f1      	bne.n	d4c92 <_ZN9SeeedOLED9putNumberEl+0x30>
  {
    char_buffer[i++] = long_num % 10;
    long_num /= 10;
  }

  f = f + i;
   d4cae:	442b      	add	r3, r5
   d4cb0:	b2dc      	uxtb	r4, r3
  for (; i > 0; i--)
   d4cb2:	b15d      	cbz	r5, d4ccc <_ZN9SeeedOLED9putNumberEl+0x6a>
  {
    putChar('0' + char_buffer[i - 1]);
   d4cb4:	ab04      	add	r3, sp, #16
   d4cb6:	442b      	add	r3, r5
   d4cb8:	4638      	mov	r0, r7
   d4cba:	f813 1c0d 	ldrb.w	r1, [r3, #-13]
   d4cbe:	3130      	adds	r1, #48	; 0x30
   d4cc0:	b2c9      	uxtb	r1, r1
    char_buffer[i++] = long_num % 10;
    long_num /= 10;
  }

  f = f + i;
  for (; i > 0; i--)
   d4cc2:	3d01      	subs	r5, #1
  {
    putChar('0' + char_buffer[i - 1]);
   d4cc4:	f7ff ff82 	bl	d4bcc <_ZN9SeeedOLED7putCharEh>
    char_buffer[i++] = long_num % 10;
    long_num /= 10;
  }

  f = f + i;
  for (; i > 0; i--)
   d4cc8:	b2ed      	uxtb	r5, r5
   d4cca:	e7f2      	b.n	d4cb2 <_ZN9SeeedOLED9putNumberEl+0x50>
  {
    putChar('0' + char_buffer[i - 1]);
  }
  return f;
   d4ccc:	4620      	mov	r0, r4
}
   d4cce:	b005      	add	sp, #20
   d4cd0:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4cd2 <_ZN9SeeedOLED16setNormalDisplayEv>:
  sendCommand(SeeedOLED_Dectivate_Scroll_Cmd);
}

void SeeedOLED::setNormalDisplay()
{
  sendCommand(SeeedOLED_Normal_Display_Cmd);
   d4cd2:	21a6      	movs	r1, #166	; 0xa6
   d4cd4:	f7ff bf12 	b.w	d4afc <_ZN9SeeedOLED11sendCommandEh>

000d4cd8 <_GLOBAL__sub_I__ZN9SeeedOLED4initEv>:
   d4cd8:	f000 bbce 	b.w	d5478 <HAL_Pin_Map>

000d4cdc <_ZNSt17_Function_handlerIFvPKcS1_ESt5_BindIFSt7_Mem_fnIM23GoogleMapsDeviceLocatorFvS1_S1_EEPS5_St12_PlaceholderILi1EESA_ILi2EEEEE9_M_invokeERKSt9_Any_dataOS1_SJ_>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d4cdc:	b430      	push	{r4, r5}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d4cde:	6803      	ldr	r3, [r0, #0]
      template<typename... _Args, typename _Req
               = _Require<typename _Traits::__lvalue,
                          _CheckArgs<_Pack<_Args...>>>>
	result_type
	operator()(_Class* __object, _Args&&... __args) const
	{ return (__object->*_M_pmf)(std::forward<_Args>(__args)...); }
   d4ce0:	6812      	ldr	r2, [r2, #0]
   d4ce2:	6858      	ldr	r0, [r3, #4]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d4ce4:	689c      	ldr	r4, [r3, #8]
   d4ce6:	681b      	ldr	r3, [r3, #0]
      template<typename... _Args, typename _Req
               = _Require<typename _Traits::__lvalue,
                          _CheckArgs<_Pack<_Args...>>>>
	result_type
	operator()(_Class* __object, _Args&&... __args) const
	{ return (__object->*_M_pmf)(std::forward<_Args>(__args)...); }
   d4ce8:	6809      	ldr	r1, [r1, #0]
   d4cea:	f010 0f01 	tst.w	r0, #1
   d4cee:	ea4f 0060 	mov.w	r0, r0, asr #1
   d4cf2:	bf18      	it	ne
   d4cf4:	5825      	ldrne	r5, [r4, r0]
   d4cf6:	4420      	add	r0, r4
   d4cf8:	bf18      	it	ne
   d4cfa:	58eb      	ldrne	r3, [r5, r3]
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	(*_Base::_M_get_pointer(__functor))(
	    std::forward<_ArgTypes>(__args)...);
      }
   d4cfc:	bc30      	pop	{r4, r5}
      template<typename... _Args, typename _Req
               = _Require<typename _Traits::__lvalue,
                          _CheckArgs<_Pack<_Args...>>>>
	result_type
	operator()(_Class* __object, _Args&&... __args) const
	{ return (__object->*_M_pmf)(std::forward<_Args>(__args)...); }
   d4cfe:	4718      	bx	r3

000d4d00 <_ZN23GoogleMapsDeviceLocatorD1Ev>:
GoogleMapsDeviceLocator::GoogleMapsDeviceLocator() : locatorMode(LOCATOR_MODE_MANUAL), periodMs(10000), eventName("deviceLocator"),
	stateTime(0), state(CONNECT_WAIT_STATE), callback(NULL), waitAfterConnect(8000) {

}

GoogleMapsDeviceLocator::~GoogleMapsDeviceLocator() {
   d4d00:	b510      	push	{r4, lr}
   d4d02:	4b06      	ldr	r3, [pc, #24]	; (d4d1c <_ZN23GoogleMapsDeviceLocatorD1Ev+0x1c>)
   d4d04:	4604      	mov	r4, r0
   d4d06:	f840 3b2c 	str.w	r3, [r0], #44
   d4d0a:	f001 fc4f 	bl	d65ac <_ZN6StringD1Ev>
   d4d0e:	f104 000c 	add.w	r0, r4, #12
   d4d12:	f001 fc4b 	bl	d65ac <_ZN6StringD1Ev>

}
   d4d16:	4620      	mov	r0, r4
   d4d18:	bd10      	pop	{r4, pc}
   d4d1a:	bf00      	nop
   d4d1c:	000da850 	.word	0x000da850

000d4d20 <_ZN23GoogleMapsDeviceLocatorD0Ev>:
GoogleMapsDeviceLocator::GoogleMapsDeviceLocator() : locatorMode(LOCATOR_MODE_MANUAL), periodMs(10000), eventName("deviceLocator"),
	stateTime(0), state(CONNECT_WAIT_STATE), callback(NULL), waitAfterConnect(8000) {

}

GoogleMapsDeviceLocator::~GoogleMapsDeviceLocator() {
   d4d20:	b510      	push	{r4, lr}
   d4d22:	4604      	mov	r4, r0

}
   d4d24:	f7ff ffec 	bl	d4d00 <_ZN23GoogleMapsDeviceLocatorD1Ev>
   d4d28:	4620      	mov	r0, r4
   d4d2a:	2144      	movs	r1, #68	; 0x44
   d4d2c:	f002 f819 	bl	d6d62 <_ZdlPvj>
   d4d30:	4620      	mov	r0, r4
   d4d32:	bd10      	pop	{r4, pc}

000d4d34 <_ZL16cellularAddTowerPK33CellularHelperEnvironmentCellData>:
#endif /* Wiring_WiFi */


#if Wiring_Cellular

static void cellularAddTower(const CellularHelperEnvironmentCellData *cellData) {
   d4d34:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	// The - 4 factor here to leave room for the closing JSON array ], object }}, and the trailing null
	size_t spaceLeft = &requestBuf[sizeof(requestBuf) - 4] - requestCur;
   d4d36:	4e17      	ldr	r6, [pc, #92]	; (d4d94 <_ZL16cellularAddTowerPK33CellularHelperEnvironmentCellData+0x60>)
   d4d38:	4d17      	ldr	r5, [pc, #92]	; (d4d98 <_ZL16cellularAddTowerPK33CellularHelperEnvironmentCellData+0x64>)

	size_t sizeNeeded = snprintf(requestCur, spaceLeft,
   d4d3a:	4a18      	ldr	r2, [pc, #96]	; (d4d9c <_ZL16cellularAddTowerPK33CellularHelperEnvironmentCellData+0x68>)
#endif /* Wiring_WiFi */


#if Wiring_Cellular

static void cellularAddTower(const CellularHelperEnvironmentCellData *cellData) {
   d4d3c:	4604      	mov	r4, r0
	// The - 4 factor here to leave room for the closing JSON array ], object }}, and the trailing null
	size_t spaceLeft = &requestBuf[sizeof(requestBuf) - 4] - requestCur;
   d4d3e:	6830      	ldr	r0, [r6, #0]

	size_t sizeNeeded = snprintf(requestCur, spaceLeft,
   d4d40:	6863      	ldr	r3, [r4, #4]
   d4d42:	f810 1c01 	ldrb.w	r1, [r0, #-1]
   d4d46:	9303      	str	r3, [sp, #12]
   d4d48:	6823      	ldr	r3, [r4, #0]
   d4d4a:	9302      	str	r3, [sp, #8]
   d4d4c:	68a3      	ldr	r3, [r4, #8]
   d4d4e:	9301      	str	r3, [sp, #4]
   d4d50:	68e3      	ldr	r3, [r4, #12]
   d4d52:	9300      	str	r3, [sp, #0]
   d4d54:	4b12      	ldr	r3, [pc, #72]	; (d4da0 <_ZL16cellularAddTowerPK33CellularHelperEnvironmentCellData+0x6c>)

#if Wiring_Cellular

static void cellularAddTower(const CellularHelperEnvironmentCellData *cellData) {
	// The - 4 factor here to leave room for the closing JSON array ], object }}, and the trailing null
	size_t spaceLeft = &requestBuf[sizeof(requestBuf) - 4] - requestCur;
   d4d56:	1a2d      	subs	r5, r5, r0

	size_t sizeNeeded = snprintf(requestCur, spaceLeft,
   d4d58:	295b      	cmp	r1, #91	; 0x5b
   d4d5a:	bf18      	it	ne
   d4d5c:	4613      	movne	r3, r2
   d4d5e:	4a11      	ldr	r2, [pc, #68]	; (d4da4 <_ZL16cellularAddTowerPK33CellularHelperEnvironmentCellData+0x70>)
   d4d60:	4629      	mov	r1, r5
   d4d62:	f000 fd65 	bl	d5830 <snprintf>
			"%s{\"i\":%d,\"l\":%u,\"c\":%d,\"n\":%d}",
			(requestCur[-1] == '[' ? "" : ","),
			cellData->ci, cellData->lac, cellData->mcc, cellData->mnc);

	if (sizeNeeded <= spaceLeft && cellData->lac != 0 && cellData->lac != 65535 && cellData->mcc != 65535 && cellData->mnc != 65535) {
   d4d66:	4285      	cmp	r5, r0
   d4d68:	d312      	bcc.n	d4d90 <_ZL16cellularAddTowerPK33CellularHelperEnvironmentCellData+0x5c>
   d4d6a:	68a2      	ldr	r2, [r4, #8]
   d4d6c:	b182      	cbz	r2, d4d90 <_ZL16cellularAddTowerPK33CellularHelperEnvironmentCellData+0x5c>
   d4d6e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d4d72:	429a      	cmp	r2, r3
   d4d74:	d00c      	beq.n	d4d90 <_ZL16cellularAddTowerPK33CellularHelperEnvironmentCellData+0x5c>
   d4d76:	6822      	ldr	r2, [r4, #0]
   d4d78:	429a      	cmp	r2, r3
   d4d7a:	d009      	beq.n	d4d90 <_ZL16cellularAddTowerPK33CellularHelperEnvironmentCellData+0x5c>
   d4d7c:	6862      	ldr	r2, [r4, #4]
   d4d7e:	429a      	cmp	r2, r3
   d4d80:	d006      	beq.n	d4d90 <_ZL16cellularAddTowerPK33CellularHelperEnvironmentCellData+0x5c>
		// There is enough space to store the whole entry, so save it
		requestCur += sizeNeeded;
   d4d82:	6833      	ldr	r3, [r6, #0]
		numAdded++;
   d4d84:	4a08      	ldr	r2, [pc, #32]	; (d4da8 <_ZL16cellularAddTowerPK33CellularHelperEnvironmentCellData+0x74>)
			(requestCur[-1] == '[' ? "" : ","),
			cellData->ci, cellData->lac, cellData->mcc, cellData->mnc);

	if (sizeNeeded <= spaceLeft && cellData->lac != 0 && cellData->lac != 65535 && cellData->mcc != 65535 && cellData->mnc != 65535) {
		// There is enough space to store the whole entry, so save it
		requestCur += sizeNeeded;
   d4d86:	4418      	add	r0, r3
		numAdded++;
   d4d88:	6813      	ldr	r3, [r2, #0]
			(requestCur[-1] == '[' ? "" : ","),
			cellData->ci, cellData->lac, cellData->mcc, cellData->mnc);

	if (sizeNeeded <= spaceLeft && cellData->lac != 0 && cellData->lac != 65535 && cellData->mcc != 65535 && cellData->mnc != 65535) {
		// There is enough space to store the whole entry, so save it
		requestCur += sizeNeeded;
   d4d8a:	6030      	str	r0, [r6, #0]
		numAdded++;
   d4d8c:	3301      	adds	r3, #1
   d4d8e:	6013      	str	r3, [r2, #0]
	}

}
   d4d90:	b004      	add	sp, #16
   d4d92:	bd70      	pop	{r4, r5, r6, pc}
   d4d94:	2003e354 	.word	0x2003e354
   d4d98:	2003e34d 	.word	0x2003e34d
   d4d9c:	000da88b 	.word	0x000da88b
   d4da0:	000da504 	.word	0x000da504
   d4da4:	000da858 	.word	0x000da858
   d4da8:	2003e24c 	.word	0x2003e24c

000d4dac <_ZN23GoogleMapsDeviceLocator19subscriptionHandlerEPKcS1_>:
			Particle.publish(eventName, scanData, PRIVATE);
		}
	}
}

void GoogleMapsDeviceLocator::subscriptionHandler(const char *event, const char *data) {
   d4dac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	// event: hook-response/deviceLocator/<deviceid>/0

	if (callback) {
   d4db0:	6a43      	ldr	r3, [r0, #36]	; 0x24
			Particle.publish(eventName, scanData, PRIVATE);
		}
	}
}

void GoogleMapsDeviceLocator::subscriptionHandler(const char *event, const char *data) {
   d4db2:	b085      	sub	sp, #20
   d4db4:	4604      	mov	r4, r0
	// event: hook-response/deviceLocator/<deviceid>/0

	if (callback) {
   d4db6:	2b00      	cmp	r3, #0
   d4db8:	d037      	beq.n	d4e2a <_ZN23GoogleMapsDeviceLocator19subscriptionHandlerEPKcS1_+0x7e>
		// float lat, float lon, float accuracy
		char *mutableCopy = strdup(data);
   d4dba:	4610      	mov	r0, r2
   d4dbc:	f002 ff90 	bl	d7ce0 <strdup>
		char *part, *end;
		float lat, lon, accuracy;

		part = strtok_r(mutableCopy, ",", &end);
   d4dc0:	aa03      	add	r2, sp, #12
   d4dc2:	491b      	ldr	r1, [pc, #108]	; (d4e30 <_ZN23GoogleMapsDeviceLocator19subscriptionHandlerEPKcS1_+0x84>)
void GoogleMapsDeviceLocator::subscriptionHandler(const char *event, const char *data) {
	// event: hook-response/deviceLocator/<deviceid>/0

	if (callback) {
		// float lat, float lon, float accuracy
		char *mutableCopy = strdup(data);
   d4dc4:	4605      	mov	r5, r0
		char *part, *end;
		float lat, lon, accuracy;

		part = strtok_r(mutableCopy, ",", &end);
   d4dc6:	f003 fe42 	bl	d8a4e <strtok_r>
		if (part) {
   d4dca:	b358      	cbz	r0, d4e24 <_ZN23GoogleMapsDeviceLocator19subscriptionHandlerEPKcS1_+0x78>
			lat = atof(part);
   d4dcc:	f002 fe1a 	bl	d7a04 <atof>
			part = strtok_r(NULL, ",", &end);
   d4dd0:	aa03      	add	r2, sp, #12
   d4dd2:	4917      	ldr	r1, [pc, #92]	; (d4e30 <_ZN23GoogleMapsDeviceLocator19subscriptionHandlerEPKcS1_+0x84>)
   d4dd4:	2000      	movs	r0, #0
		char *part, *end;
		float lat, lon, accuracy;

		part = strtok_r(mutableCopy, ",", &end);
		if (part) {
			lat = atof(part);
   d4dd6:	ec57 6b10 	vmov	r6, r7, d0
			part = strtok_r(NULL, ",", &end);
   d4dda:	f003 fe38 	bl	d8a4e <strtok_r>
			if (part) {
   d4dde:	b308      	cbz	r0, d4e24 <_ZN23GoogleMapsDeviceLocator19subscriptionHandlerEPKcS1_+0x78>
				lon = atof(part);
   d4de0:	f002 fe10 	bl	d7a04 <atof>
				part = strtok_r(NULL, ",", &end);
   d4de4:	aa03      	add	r2, sp, #12
   d4de6:	4912      	ldr	r1, [pc, #72]	; (d4e30 <_ZN23GoogleMapsDeviceLocator19subscriptionHandlerEPKcS1_+0x84>)
   d4de8:	2000      	movs	r0, #0
		part = strtok_r(mutableCopy, ",", &end);
		if (part) {
			lat = atof(part);
			part = strtok_r(NULL, ",", &end);
			if (part) {
				lon = atof(part);
   d4dea:	ec59 8b10 	vmov	r8, r9, d0
				part = strtok_r(NULL, ",", &end);
   d4dee:	f003 fe2e 	bl	d8a4e <strtok_r>
				if (part) {
   d4df2:	b1b8      	cbz	r0, d4e24 <_ZN23GoogleMapsDeviceLocator19subscriptionHandlerEPKcS1_+0x78>
					accuracy = atof(part);
   d4df4:	f002 fe06 	bl	d7a04 <atof>

					(*callback)(lat, lon, accuracy);
   d4df8:	ec51 0b10 	vmov	r0, r1, d0
   d4dfc:	f002 fdb2 	bl	d7964 <__aeabi_d2f>
   d4e00:	4649      	mov	r1, r9
   d4e02:	9001      	str	r0, [sp, #4]
   d4e04:	4640      	mov	r0, r8
   d4e06:	f002 fdad 	bl	d7964 <__aeabi_d2f>
   d4e0a:	4639      	mov	r1, r7
   d4e0c:	9000      	str	r0, [sp, #0]
   d4e0e:	4630      	mov	r0, r6
   d4e10:	f002 fda8 	bl	d7964 <__aeabi_d2f>
   d4e14:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d4e16:	ed9d 1a01 	vldr	s2, [sp, #4]
   d4e1a:	eddd 0a00 	vldr	s1, [sp]
   d4e1e:	ee00 0a10 	vmov	s0, r0
   d4e22:	4798      	blx	r3
				}
			}
		}

		free(mutableCopy);
   d4e24:	4628      	mov	r0, r5
   d4e26:	f000 fcdb 	bl	d57e0 <free>
	}
}
   d4e2a:	b005      	add	sp, #20
   d4e2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d4e30:	000da88b 	.word	0x000da88b

000d4e34 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM23GoogleMapsDeviceLocatorFvPKcS5_EEPS3_St12_PlaceholderILi1EESA_ILi2EEEEE10_M_managerERSt9_Any_dataRKSG_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d4e34:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d4e36:	b538      	push	{r3, r4, r5, lr}
   d4e38:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d4e3a:	d005      	beq.n	d4e48 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM23GoogleMapsDeviceLocatorFvPKcS5_EEPS3_St12_PlaceholderILi1EESA_ILi2EEEEE10_M_managerERSt9_Any_dataRKSG_St18_Manager_operation+0x14>
   d4e3c:	2a03      	cmp	r2, #3
   d4e3e:	d00f      	beq.n	d4e60 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM23GoogleMapsDeviceLocatorFvPKcS5_EEPS3_St12_PlaceholderILi1EESA_ILi2EEEEE10_M_managerERSt9_Any_dataRKSG_St18_Manager_operation+0x2c>
   d4e40:	2a01      	cmp	r2, #1
   d4e42:	d111      	bne.n	d4e68 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM23GoogleMapsDeviceLocatorFvPKcS5_EEPS3_St12_PlaceholderILi1EESA_ILi2EEEEE10_M_managerERSt9_Any_dataRKSG_St18_Manager_operation+0x34>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d4e44:	680b      	ldr	r3, [r1, #0]
   d4e46:	e009      	b.n	d4e5c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM23GoogleMapsDeviceLocatorFvPKcS5_EEPS3_St12_PlaceholderILi1EESA_ILi2EEEEE10_M_managerERSt9_Any_dataRKSG_St18_Manager_operation+0x28>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d4e48:	200c      	movs	r0, #12
   d4e4a:	680d      	ldr	r5, [r1, #0]
   d4e4c:	f7ff f925 	bl	d409a <_Znwj>
   d4e50:	4603      	mov	r3, r0
   d4e52:	b118      	cbz	r0, d4e5c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM23GoogleMapsDeviceLocatorFvPKcS5_EEPS3_St12_PlaceholderILi1EESA_ILi2EEEEE10_M_managerERSt9_Any_dataRKSG_St18_Manager_operation+0x28>
   d4e54:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   d4e58:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   d4e5c:	6023      	str	r3, [r4, #0]
   d4e5e:	e003      	b.n	d4e68 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM23GoogleMapsDeviceLocatorFvPKcS5_EEPS3_St12_PlaceholderILi1EESA_ILi2EEEEE10_M_managerERSt9_Any_dataRKSG_St18_Manager_operation+0x34>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d4e60:	210c      	movs	r1, #12
   d4e62:	6800      	ldr	r0, [r0, #0]
   d4e64:	f001 ff7d 	bl	d6d62 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d4e68:	2000      	movs	r0, #0
   d4e6a:	bd38      	pop	{r3, r4, r5, pc}

000d4e6c <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4e6c:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d4e6e:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4e70:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d4e72:	b113      	cbz	r3, d4e7a <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4e74:	2203      	movs	r2, #3
   d4e76:	4601      	mov	r1, r0
   d4e78:	4798      	blx	r3
    }
   d4e7a:	4620      	mov	r0, r4
   d4e7c:	bd10      	pop	{r4, pc}
	...

000d4e80 <_ZN23GoogleMapsDeviceLocatorC1Ev>:

static char requestBuf[256];
static char *requestCur;
static int numAdded = 0;

GoogleMapsDeviceLocator::GoogleMapsDeviceLocator() : locatorMode(LOCATOR_MODE_MANUAL), periodMs(10000), eventName("deviceLocator"),
   d4e80:	b538      	push	{r3, r4, r5, lr}
	stateTime(0), state(CONNECT_WAIT_STATE), callback(NULL), waitAfterConnect(8000) {
   d4e82:	4b0f      	ldr	r3, [pc, #60]	; (d4ec0 <_ZN23GoogleMapsDeviceLocatorC1Ev+0x40>)
   d4e84:	6003      	str	r3, [r0, #0]
   d4e86:	2500      	movs	r5, #0
   d4e88:	f242 7310 	movw	r3, #10000	; 0x2710

static char requestBuf[256];
static char *requestCur;
static int numAdded = 0;

GoogleMapsDeviceLocator::GoogleMapsDeviceLocator() : locatorMode(LOCATOR_MODE_MANUAL), periodMs(10000), eventName("deviceLocator"),
   d4e8c:	4604      	mov	r4, r0
	stateTime(0), state(CONNECT_WAIT_STATE), callback(NULL), waitAfterConnect(8000) {
   d4e8e:	6045      	str	r5, [r0, #4]
   d4e90:	6083      	str	r3, [r0, #8]
   d4e92:	490c      	ldr	r1, [pc, #48]	; (d4ec4 <_ZN23GoogleMapsDeviceLocatorC1Ev+0x44>)
   d4e94:	300c      	adds	r0, #12
   d4e96:	f001 fbd0 	bl	d663a <_ZN6StringC1EPK19__FlashStringHelper>
   d4e9a:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
   d4e9e:	62a3      	str	r3, [r4, #40]	; 0x28
   d4ea0:	61e5      	str	r5, [r4, #28]
   d4ea2:	6225      	str	r5, [r4, #32]
   d4ea4:	6265      	str	r5, [r4, #36]	; 0x24
   d4ea6:	4908      	ldr	r1, [pc, #32]	; (d4ec8 <_ZN23GoogleMapsDeviceLocatorC1Ev+0x48>)
   d4ea8:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   d4eac:	f001 fbc5 	bl	d663a <_ZN6StringC1EPK19__FlashStringHelper>
   d4eb0:	f44f 739b 	mov.w	r3, #310	; 0x136
   d4eb4:	63e3      	str	r3, [r4, #60]	; 0x3c
   d4eb6:	f44f 73cd 	mov.w	r3, #410	; 0x19a
   d4eba:	6423      	str	r3, [r4, #64]	; 0x40

}
   d4ebc:	4620      	mov	r0, r4
   d4ebe:	bd38      	pop	{r3, r4, r5, pc}
   d4ec0:	000da850 	.word	0x000da850
   d4ec4:	000da115 	.word	0x000da115
   d4ec8:	000da878 	.word	0x000da878

000d4ecc <_ZN23GoogleMapsDeviceLocator18withLocatePeriodicEm>:
	locatorMode = LOCATOR_MODE_ONCE;
	return *this;
}

GoogleMapsDeviceLocator &GoogleMapsDeviceLocator::withLocatePeriodic(unsigned long secondsPeriodic) {
	locatorMode = LOCATOR_MODE_PERIODIC;
   d4ecc:	2302      	movs	r3, #2
   d4ece:	6043      	str	r3, [r0, #4]
	if (secondsPeriodic < 5) {
		secondsPeriodic = 5;
   d4ed0:	2904      	cmp	r1, #4
   d4ed2:	bf98      	it	ls
   d4ed4:	2105      	movls	r1, #5
	}
	periodMs = secondsPeriodic * 1000;
   d4ed6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4eda:	4359      	muls	r1, r3
   d4edc:	6081      	str	r1, [r0, #8]
	return *this;
}
   d4ede:	4770      	bx	lr

000d4ee0 <_ZN23GoogleMapsDeviceLocator13withEventNameEPKc>:

GoogleMapsDeviceLocator &GoogleMapsDeviceLocator::withEventName(const char *name) {
   d4ee0:	b510      	push	{r4, lr}
   d4ee2:	4604      	mov	r4, r0
	this->eventName = name;
   d4ee4:	300c      	adds	r0, #12
   d4ee6:	f001 fbfa 	bl	d66de <_ZN6StringaSEPKc>
	return *this;
}
   d4eea:	4620      	mov	r0, r4
   d4eec:	bd10      	pop	{r4, pc}
	...

000d4ef0 <_ZN23GoogleMapsDeviceLocator15cellularScanCGIEv>:
	}

}

#if HAS_CELLULAR_GLOBAL_IDENTITY
const char *GoogleMapsDeviceLocator::cellularScanCGI() {
   d4ef0:	b570      	push	{r4, r5, r6, lr}

	*requestCur = 0;
   d4ef2:	4c22      	ldr	r4, [pc, #136]	; (d4f7c <_ZN23GoogleMapsDeviceLocator15cellularScanCGIEv+0x8c>)

	// getOperatorName (AT+UDOPN) is not supported on LTE (SARA-R410M-02-B) but the function
	// will return an empty string which is fine.
	String oper = CellularHelper.getOperatorName();
   d4ef4:	4922      	ldr	r1, [pc, #136]	; (d4f80 <_ZN23GoogleMapsDeviceLocator15cellularScanCGIEv+0x90>)
}

#if HAS_CELLULAR_GLOBAL_IDENTITY
const char *GoogleMapsDeviceLocator::cellularScanCGI() {

	*requestCur = 0;
   d4ef6:	6823      	ldr	r3, [r4, #0]
	}

}

#if HAS_CELLULAR_GLOBAL_IDENTITY
const char *GoogleMapsDeviceLocator::cellularScanCGI() {
   d4ef8:	b08a      	sub	sp, #40	; 0x28

	*requestCur = 0;
   d4efa:	2500      	movs	r5, #0
   d4efc:	701d      	strb	r5, [r3, #0]

	// getOperatorName (AT+UDOPN) is not supported on LTE (SARA-R410M-02-B) but the function
	// will return an empty string which is fine.
	String oper = CellularHelper.getOperatorName();
   d4efe:	2209      	movs	r2, #9
   d4f00:	a802      	add	r0, sp, #8

	CellularGlobalIdentity cgi = {0};
   d4f02:	2610      	movs	r6, #16

	*requestCur = 0;

	// getOperatorName (AT+UDOPN) is not supported on LTE (SARA-R410M-02-B) but the function
	// will return an empty string which is fine.
	String oper = CellularHelper.getOperatorName();
   d4f04:	f7ff fcf4 	bl	d48f0 <_ZNK19CellularHelperClass15getOperatorNameEi>

	CellularGlobalIdentity cgi = {0};
   d4f08:	4629      	mov	r1, r5
   d4f0a:	4632      	mov	r2, r6
   d4f0c:	a806      	add	r0, sp, #24
   d4f0e:	f002 fe96 	bl	d7c3e <memset>
	cgi.size = sizeof(CellularGlobalIdentity);
	cgi.version = CGI_VERSION_LATEST;

	cellular_result_t res = cellular_global_identity(&cgi, NULL);
   d4f12:	4629      	mov	r1, r5
   d4f14:	a806      	add	r0, sp, #24
	// getOperatorName (AT+UDOPN) is not supported on LTE (SARA-R410M-02-B) but the function
	// will return an empty string which is fine.
	String oper = CellularHelper.getOperatorName();

	CellularGlobalIdentity cgi = {0};
	cgi.size = sizeof(CellularGlobalIdentity);
   d4f16:	f8ad 6018 	strh.w	r6, [sp, #24]
	cgi.version = CGI_VERSION_LATEST;

	cellular_result_t res = cellular_global_identity(&cgi, NULL);
   d4f1a:	f000 fa5b 	bl	d53d4 <cellular_global_identity>
	if (res == SYSTEM_ERROR_NONE) {
   d4f1e:	4605      	mov	r5, r0
   d4f20:	bb30      	cbnz	r0, d4f70 <_ZN23GoogleMapsDeviceLocator15cellularScanCGIEv+0x80>
		// We know these things fit, so just using sprintf instead of snprintf here
		requestCur += sprintf(requestCur, "{\"c\":{\"o\":\"%s\",", oper.c_str());
   d4f22:	9a02      	ldr	r2, [sp, #8]
   d4f24:	4917      	ldr	r1, [pc, #92]	; (d4f84 <_ZN23GoogleMapsDeviceLocator15cellularScanCGIEv+0x94>)
   d4f26:	6820      	ldr	r0, [r4, #0]

		requestCur += sprintf(requestCur,
					"{\"i\":%d,\"l\":%u,\"c\":%d,\"n\":%d}",
					cgi.cell_id, cgi.location_area_code, cgi.mobile_country_code, cgi.mobile_network_code);

		numAdded++;
   d4f28:	4e17      	ldr	r6, [pc, #92]	; (d4f88 <_ZN23GoogleMapsDeviceLocator15cellularScanCGIEv+0x98>)
	cgi.version = CGI_VERSION_LATEST;

	cellular_result_t res = cellular_global_identity(&cgi, NULL);
	if (res == SYSTEM_ERROR_NONE) {
		// We know these things fit, so just using sprintf instead of snprintf here
		requestCur += sprintf(requestCur, "{\"c\":{\"o\":\"%s\",", oper.c_str());
   d4f2a:	f000 fc69 	bl	d5800 <sprintf>
   d4f2e:	6823      	ldr	r3, [r4, #0]

		requestCur += sprintf(requestCur, "\"a\":[");
   d4f30:	4916      	ldr	r1, [pc, #88]	; (d4f8c <_ZN23GoogleMapsDeviceLocator15cellularScanCGIEv+0x9c>)
	cgi.version = CGI_VERSION_LATEST;

	cellular_result_t res = cellular_global_identity(&cgi, NULL);
	if (res == SYSTEM_ERROR_NONE) {
		// We know these things fit, so just using sprintf instead of snprintf here
		requestCur += sprintf(requestCur, "{\"c\":{\"o\":\"%s\",", oper.c_str());
   d4f32:	4403      	add	r3, r0

		requestCur += sprintf(requestCur, "\"a\":[");
   d4f34:	4618      	mov	r0, r3
   d4f36:	f002 fecb 	bl	d7cd0 <strcpy>

		requestCur += sprintf(requestCur,
					"{\"i\":%d,\"l\":%u,\"c\":%d,\"n\":%d}",
					cgi.cell_id, cgi.location_area_code, cgi.mobile_country_code, cgi.mobile_network_code);
   d4f3a:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d4f3e:	9201      	str	r2, [sp, #4]
   d4f40:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d4f44:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
   d4f48:	9200      	str	r2, [sp, #0]
	cellular_result_t res = cellular_global_identity(&cgi, NULL);
	if (res == SYSTEM_ERROR_NONE) {
		// We know these things fit, so just using sprintf instead of snprintf here
		requestCur += sprintf(requestCur, "{\"c\":{\"o\":\"%s\",", oper.c_str());

		requestCur += sprintf(requestCur, "\"a\":[");
   d4f4a:	3005      	adds	r0, #5

		requestCur += sprintf(requestCur,
					"{\"i\":%d,\"l\":%u,\"c\":%d,\"n\":%d}",
					cgi.cell_id, cgi.location_area_code, cgi.mobile_country_code, cgi.mobile_network_code);
   d4f4c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   d4f4e:	4910      	ldr	r1, [pc, #64]	; (d4f90 <_ZN23GoogleMapsDeviceLocator15cellularScanCGIEv+0xa0>)
	cellular_result_t res = cellular_global_identity(&cgi, NULL);
	if (res == SYSTEM_ERROR_NONE) {
		// We know these things fit, so just using sprintf instead of snprintf here
		requestCur += sprintf(requestCur, "{\"c\":{\"o\":\"%s\",", oper.c_str());

		requestCur += sprintf(requestCur, "\"a\":[");
   d4f50:	6020      	str	r0, [r4, #0]

		requestCur += sprintf(requestCur,
					"{\"i\":%d,\"l\":%u,\"c\":%d,\"n\":%d}",
					cgi.cell_id, cgi.location_area_code, cgi.mobile_country_code, cgi.mobile_network_code);
   d4f52:	f000 fc55 	bl	d5800 <sprintf>

		numAdded++;
   d4f56:	6832      	ldr	r2, [r6, #0]
		// We know these things fit, so just using sprintf instead of snprintf here
		requestCur += sprintf(requestCur, "{\"c\":{\"o\":\"%s\",", oper.c_str());

		requestCur += sprintf(requestCur, "\"a\":[");

		requestCur += sprintf(requestCur,
   d4f58:	6821      	ldr	r1, [r4, #0]
					"{\"i\":%d,\"l\":%u,\"c\":%d,\"n\":%d}",
					cgi.cell_id, cgi.location_area_code, cgi.mobile_country_code, cgi.mobile_network_code);

		numAdded++;
   d4f5a:	3201      	adds	r2, #1
		// We know these things fit, so just using sprintf instead of snprintf here
		requestCur += sprintf(requestCur, "{\"c\":{\"o\":\"%s\",", oper.c_str());

		requestCur += sprintf(requestCur, "\"a\":[");

		requestCur += sprintf(requestCur,
   d4f5c:	180b      	adds	r3, r1, r0
					"{\"i\":%d,\"l\":%u,\"c\":%d,\"n\":%d}",
					cgi.cell_id, cgi.location_area_code, cgi.mobile_country_code, cgi.mobile_network_code);

		numAdded++;
   d4f5e:	6032      	str	r2, [r6, #0]

		*requestCur++ = ']';
   d4f60:	225d      	movs	r2, #93	; 0x5d
   d4f62:	540a      	strb	r2, [r1, r0]
		*requestCur++ = '}';
   d4f64:	227d      	movs	r2, #125	; 0x7d
   d4f66:	705a      	strb	r2, [r3, #1]
		*requestCur++ = '}';
   d4f68:	709a      	strb	r2, [r3, #2]
		*requestCur++ = 0;
   d4f6a:	1d1a      	adds	r2, r3, #4
   d4f6c:	6022      	str	r2, [r4, #0]
   d4f6e:	70dd      	strb	r5, [r3, #3]

	*requestCur = 0;

	// getOperatorName (AT+UDOPN) is not supported on LTE (SARA-R410M-02-B) but the function
	// will return an empty string which is fine.
	String oper = CellularHelper.getOperatorName();
   d4f70:	a802      	add	r0, sp, #8
   d4f72:	f001 fb1b 	bl	d65ac <_ZN6StringD1Ev>
	else {
		// Serial.printlnf("cellular_global_identity failed %d", res);
	}

	return requestBuf;
}
   d4f76:	4807      	ldr	r0, [pc, #28]	; (d4f94 <_ZN23GoogleMapsDeviceLocator15cellularScanCGIEv+0xa4>)
   d4f78:	b00a      	add	sp, #40	; 0x28
   d4f7a:	bd70      	pop	{r4, r5, r6, pc}
   d4f7c:	2003e354 	.word	0x2003e354
   d4f80:	2003e248 	.word	0x2003e248
   d4f84:	000da87d 	.word	0x000da87d
   d4f88:	2003e24c 	.word	0x2003e24c
   d4f8c:	000da88d 	.word	0x000da88d
   d4f90:	000da85a 	.word	0x000da85a
   d4f94:	2003e251 	.word	0x2003e251

000d4f98 <_ZN23GoogleMapsDeviceLocator15cellularScanLTEEv>:
#endif /* HAS_CELLULAR_GLOBAL_IDENTITY */

// This is only useful on the Electron and E Series LTE before Device OS 1.2.1.
// It does not work on the Boron LTE. The cellular global identity (CGI) version
// is better, and this will eventually be deprecated.
const char *GoogleMapsDeviceLocator::cellularScanLTE() {
   d4f98:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4f9a:	b093      	sub	sp, #76	; 0x4c
 * Things that return a + response and a string use this.
 *
 * Since it inherits from CellularHelperPlusStringResponse and CellularHelperCommonResponse you
 * can check resp == RESP_OK to make sure the call succeeded.
 */
class CellularHelperPlusStringResponse : public CellularHelperCommonResponse {
   d4f9c:	ae12      	add	r6, sp, #72	; 0x48
   d4f9e:	4d2d      	ldr	r5, [pc, #180]	; (d5054 <_ZN23GoogleMapsDeviceLocator15cellularScanLTEEv+0xbc>)
   d4fa0:	f846 5d40 	str.w	r5, [r6, #-64]!

/**
 * All response objects inherit from this, so the parse() method can be called
 * in the subclass, and also the resp and enableDebug members are always available.
 */
class CellularHelperCommonResponse {
   d4fa4:	2400      	movs	r4, #0
   d4fa6:	f06f 0302 	mvn.w	r3, #2
   d4faa:	4607      	mov	r7, r0
 * Things that return a + response and a string use this.
 *
 * Since it inherits from CellularHelperPlusStringResponse and CellularHelperCommonResponse you
 * can check resp == RESP_OK to make sure the call succeeded.
 */
class CellularHelperPlusStringResponse : public CellularHelperCommonResponse {
   d4fac:	492a      	ldr	r1, [pc, #168]	; (d5058 <_ZN23GoogleMapsDeviceLocator15cellularScanLTEEv+0xc0>)

/**
 * All response objects inherit from this, so the parse() method can be called
 * in the subclass, and also the resp and enableDebug members are always available.
 */
class CellularHelperCommonResponse {
   d4fae:	9303      	str	r3, [sp, #12]
 * Things that return a + response and a string use this.
 *
 * Since it inherits from CellularHelperPlusStringResponse and CellularHelperCommonResponse you
 * can check resp == RESP_OK to make sure the call succeeded.
 */
class CellularHelperPlusStringResponse : public CellularHelperCommonResponse {
   d4fb0:	a805      	add	r0, sp, #20

/**
 * All response objects inherit from this, so the parse() method can be called
 * in the subclass, and also the resp and enableDebug members are always available.
 */
class CellularHelperCommonResponse {
   d4fb2:	f88d 4010 	strb.w	r4, [sp, #16]
 * Things that return a + response and a string use this.
 *
 * Since it inherits from CellularHelperPlusStringResponse and CellularHelperCommonResponse you
 * can check resp == RESP_OK to make sure the call succeeded.
 */
class CellularHelperPlusStringResponse : public CellularHelperCommonResponse {
   d4fb6:	f001 fb40 	bl	d663a <_ZN6StringC1EPK19__FlashStringHelper>
   d4fba:	4927      	ldr	r1, [pc, #156]	; (d5058 <_ZN23GoogleMapsDeviceLocator15cellularScanLTEEv+0xc0>)
   d4fbc:	a809      	add	r0, sp, #36	; 0x24
   d4fbe:	f001 fb3c 	bl	d663a <_ZN6StringC1EPK19__FlashStringHelper>

	void postProcess();
	String toString() const;
};

class CellularHelperCREGResponse :  public CellularHelperPlusStringResponse {
   d4fc2:	4b26      	ldr	r3, [pc, #152]	; (d505c <_ZN23GoogleMapsDeviceLocator15cellularScanLTEEv+0xc4>)
   d4fc4:	9302      	str	r3, [sp, #8]
   d4fc6:	f88d 4034 	strb.w	r4, [sp, #52]	; 0x34
   d4fca:	940e      	str	r4, [sp, #56]	; 0x38
   d4fcc:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d4fd0:	9411      	str	r4, [sp, #68]	; 0x44
	CellularHelper.getCREG(resp);

	// Serial.println(resp.toString().c_str());

	// We know these things fit, so just using sprintf instead of snprintf here
	requestCur += sprintf(requestCur, "{\"c\":{\"o\":\"%s\",", oper.c_str());
   d4fd2:	4c23      	ldr	r4, [pc, #140]	; (d5060 <_ZN23GoogleMapsDeviceLocator15cellularScanLTEEv+0xc8>)
   d4fd4:	930f      	str	r3, [sp, #60]	; 0x3c
// It does not work on the Boron LTE. The cellular global identity (CGI) version
// is better, and this will eventually be deprecated.
const char *GoogleMapsDeviceLocator::cellularScanLTE() {

	CellularHelperCREGResponse resp;
	CellularHelper.getCREG(resp);
   d4fd6:	4631      	mov	r1, r6
   d4fd8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d4fdc:	4821      	ldr	r0, [pc, #132]	; (d5064 <_ZN23GoogleMapsDeviceLocator15cellularScanLTEEv+0xcc>)
   d4fde:	9310      	str	r3, [sp, #64]	; 0x40
   d4fe0:	f7ff fcd2 	bl	d4988 <_ZNK19CellularHelperClass7getCREGER26CellularHelperCREGResponse>

	// Serial.println(resp.toString().c_str());

	// We know these things fit, so just using sprintf instead of snprintf here
	requestCur += sprintf(requestCur, "{\"c\":{\"o\":\"%s\",", oper.c_str());
   d4fe4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   d4fe6:	4920      	ldr	r1, [pc, #128]	; (d5068 <_ZN23GoogleMapsDeviceLocator15cellularScanLTEEv+0xd0>)
   d4fe8:	6820      	ldr	r0, [r4, #0]
   d4fea:	4e20      	ldr	r6, [pc, #128]	; (d506c <_ZN23GoogleMapsDeviceLocator15cellularScanLTEEv+0xd4>)
   d4fec:	f000 fc08 	bl	d5800 <sprintf>
   d4ff0:	6823      	ldr	r3, [r4, #0]

	requestCur += sprintf(requestCur, "\"a\":[");
   d4ff2:	491f      	ldr	r1, [pc, #124]	; (d5070 <_ZN23GoogleMapsDeviceLocator15cellularScanLTEEv+0xd8>)
	CellularHelper.getCREG(resp);

	// Serial.println(resp.toString().c_str());

	// We know these things fit, so just using sprintf instead of snprintf here
	requestCur += sprintf(requestCur, "{\"c\":{\"o\":\"%s\",", oper.c_str());
   d4ff4:	4403      	add	r3, r0

	requestCur += sprintf(requestCur, "\"a\":[");
   d4ff6:	4618      	mov	r0, r3
   d4ff8:	f002 fe6a 	bl	d7cd0 <strcpy>

	if (resp.valid) {
   d4ffc:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
	// Serial.println(resp.toString().c_str());

	// We know these things fit, so just using sprintf instead of snprintf here
	requestCur += sprintf(requestCur, "{\"c\":{\"o\":\"%s\",", oper.c_str());

	requestCur += sprintf(requestCur, "\"a\":[");
   d5000:	3005      	adds	r0, #5
   d5002:	6020      	str	r0, [r4, #0]

	if (resp.valid) {
   d5004:	b173      	cbz	r3, d5024 <_ZN23GoogleMapsDeviceLocator15cellularScanLTEEv+0x8c>
		requestCur += sprintf(requestCur,
					"{\"i\":%d,\"l\":%u,\"c\":%d,\"n\":%d}",
					resp.ci, resp.lac, mcc, mnc);
   d5006:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   d5008:	9301      	str	r3, [sp, #4]
   d500a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   d500c:	9300      	str	r3, [sp, #0]
   d500e:	9a10      	ldr	r2, [sp, #64]	; 0x40
   d5010:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d5012:	4918      	ldr	r1, [pc, #96]	; (d5074 <_ZN23GoogleMapsDeviceLocator15cellularScanLTEEv+0xdc>)
   d5014:	f000 fbf4 	bl	d5800 <sprintf>
   d5018:	6823      	ldr	r3, [r4, #0]
   d501a:	4418      	add	r0, r3

		numAdded++;
   d501c:	6833      	ldr	r3, [r6, #0]
	requestCur += sprintf(requestCur, "\"a\":[");

	if (resp.valid) {
		requestCur += sprintf(requestCur,
					"{\"i\":%d,\"l\":%u,\"c\":%d,\"n\":%d}",
					resp.ci, resp.lac, mcc, mnc);
   d501e:	6020      	str	r0, [r4, #0]

		numAdded++;
   d5020:	3301      	adds	r3, #1
   d5022:	6033      	str	r3, [r6, #0]
	}

	*requestCur++ = ']';
   d5024:	6823      	ldr	r3, [r4, #0]
   d5026:	225d      	movs	r2, #93	; 0x5d
   d5028:	701a      	strb	r2, [r3, #0]
	*requestCur++ = '}';
   d502a:	227d      	movs	r2, #125	; 0x7d
   d502c:	705a      	strb	r2, [r3, #1]
	*requestCur++ = '}';
   d502e:	709a      	strb	r2, [r3, #2]
	*requestCur++ = 0;
   d5030:	1d1a      	adds	r2, r3, #4
   d5032:	6022      	str	r2, [r4, #0]
   d5034:	2200      	movs	r2, #0
   d5036:	70da      	strb	r2, [r3, #3]



	if (numAdded == 0) {
   d5038:	6833      	ldr	r3, [r6, #0]
   d503a:	b90b      	cbnz	r3, d5040 <_ZN23GoogleMapsDeviceLocator15cellularScanLTEEv+0xa8>
		requestBuf[0] = 0;
   d503c:	4a0e      	ldr	r2, [pc, #56]	; (d5078 <_ZN23GoogleMapsDeviceLocator15cellularScanLTEEv+0xe0>)
   d503e:	7013      	strb	r3, [r2, #0]
 * Things that return a + response and a string use this.
 *
 * Since it inherits from CellularHelperPlusStringResponse and CellularHelperCommonResponse you
 * can check resp == RESP_OK to make sure the call succeeded.
 */
class CellularHelperPlusStringResponse : public CellularHelperCommonResponse {
   d5040:	a809      	add	r0, sp, #36	; 0x24
   d5042:	9502      	str	r5, [sp, #8]
   d5044:	f001 fab2 	bl	d65ac <_ZN6StringD1Ev>
   d5048:	a805      	add	r0, sp, #20
   d504a:	f001 faaf 	bl	d65ac <_ZN6StringD1Ev>
	}

	return requestBuf;
}
   d504e:	480a      	ldr	r0, [pc, #40]	; (d5078 <_ZN23GoogleMapsDeviceLocator15cellularScanLTEEv+0xe0>)
   d5050:	b013      	add	sp, #76	; 0x4c
   d5052:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5054:	000da52c 	.word	0x000da52c
   d5058:	000da504 	.word	0x000da504
   d505c:	000da838 	.word	0x000da838
   d5060:	2003e354 	.word	0x2003e354
   d5064:	2003e248 	.word	0x2003e248
   d5068:	000da87d 	.word	0x000da87d
   d506c:	2003e24c 	.word	0x2003e24c
   d5070:	000da88d 	.word	0x000da88d
   d5074:	000da85a 	.word	0x000da85a
   d5078:	2003e251 	.word	0x2003e251

000d507c <_ZN23GoogleMapsDeviceLocator12cellularScanEv.part.5.constprop.14>:


const char *GoogleMapsDeviceLocator::cellularScan() {
   d507c:	b570      	push	{r4, r5, r6, lr}
   d507e:	4605      	mov	r5, r0
   d5080:	b0ca      	sub	sp, #296	; 0x128
			return cellularScanCGI();
		}
	}
#endif

	if (CellularHelper.isLTE()) {
   d5082:	4839      	ldr	r0, [pc, #228]	; (d5168 <_ZN23GoogleMapsDeviceLocator12cellularScanEv.part.5.constprop.14+0xec>)
   d5084:	f7ff fc18 	bl	d48b8 <_ZNK19CellularHelperClass5isLTEEv>
   d5088:	4604      	mov	r4, r0
   d508a:	b118      	cbz	r0, d5094 <_ZN23GoogleMapsDeviceLocator12cellularScanEv.part.5.constprop.14+0x18>
		return cellularScanLTE();
   d508c:	4628      	mov	r0, r5
   d508e:	f7ff ff83 	bl	d4f98 <_ZN23GoogleMapsDeviceLocator15cellularScanLTEEv>
   d5092:	e066      	b.n	d5162 <_ZN23GoogleMapsDeviceLocator12cellularScanEv.part.5.constprop.14+0xe6>
};

template <size_t MAX_NEIGHBOR_CELLS>
class CellularHelperEnvironmentResponseStatic : public CellularHelperEnvironmentResponse {
public:
	explicit CellularHelperEnvironmentResponseStatic() : CellularHelperEnvironmentResponse(staticNeighbors, MAX_NEIGHBOR_CELLS) {
   d5094:	2204      	movs	r2, #4
   d5096:	a91e      	add	r1, sp, #120	; 0x78
   d5098:	a805      	add	r0, sp, #20
   d509a:	f7ff f9d3 	bl	d4444 <_ZN33CellularHelperEnvironmentResponseC1EP33CellularHelperEnvironmentCellDataj>
   d509e:	4b33      	ldr	r3, [pc, #204]	; (d516c <_ZN23GoogleMapsDeviceLocator12cellularScanEv.part.5.constprop.14+0xf0>)
   d50a0:	9305      	str	r3, [sp, #20]
   d50a2:	a955      	add	r1, sp, #340	; 0x154
   d50a4:	ab29      	add	r3, sp, #164	; 0xa4
};

/**
 * Used to hold the results for one cell (service or neighbor) from the AT+CGED command
 */
class CellularHelperEnvironmentCellData { // 44 bytes
   d50a6:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d50aa:	22ff      	movs	r2, #255	; 0xff
   d50ac:	f843 0c2c 	str.w	r0, [r3, #-44]
   d50b0:	f843 2c28 	str.w	r2, [r3, #-40]
   d50b4:	f803 4c10 	strb.w	r4, [r3, #-16]
   d50b8:	f843 2c04 	str.w	r2, [r3, #-4]
   d50bc:	332c      	adds	r3, #44	; 0x2c
};

template <size_t MAX_NEIGHBOR_CELLS>
class CellularHelperEnvironmentResponseStatic : public CellularHelperEnvironmentResponse {
public:
	explicit CellularHelperEnvironmentResponseStatic() : CellularHelperEnvironmentResponse(staticNeighbors, MAX_NEIGHBOR_CELLS) {
   d50be:	428b      	cmp	r3, r1
   d50c0:	d1f4      	bne.n	d50ac <_ZN23GoogleMapsDeviceLocator12cellularScanEv.part.5.constprop.14+0x30>
	}

	// First try to get info on neighboring cells. This doesn't work for me using the U260
	CellularHelperEnvironmentResponseStatic<4> envResp;

	CellularHelper.getEnvironment(5, envResp);
   d50c2:	aa05      	add	r2, sp, #20
   d50c4:	2105      	movs	r1, #5
   d50c6:	4828      	ldr	r0, [pc, #160]	; (d5168 <_ZN23GoogleMapsDeviceLocator12cellularScanEv.part.5.constprop.14+0xec>)
   d50c8:	f7ff fc44 	bl	d4954 <_ZNK19CellularHelperClass14getEnvironmentEiR33CellularHelperEnvironmentResponse>

	if (envResp.resp != RESP_OK) {
   d50cc:	9b06      	ldr	r3, [sp, #24]
   d50ce:	3302      	adds	r3, #2
   d50d0:	d004      	beq.n	d50dc <_ZN23GoogleMapsDeviceLocator12cellularScanEv.part.5.constprop.14+0x60>
		// We couldn't get neighboring cells, so try just the receiving cell
		CellularHelper.getEnvironment(3, envResp);
   d50d2:	aa05      	add	r2, sp, #20
   d50d4:	2103      	movs	r1, #3
   d50d6:	4824      	ldr	r0, [pc, #144]	; (d5168 <_ZN23GoogleMapsDeviceLocator12cellularScanEv.part.5.constprop.14+0xec>)
   d50d8:	f7ff fc3c 	bl	d4954 <_ZNK19CellularHelperClass14getEnvironmentEiR33CellularHelperEnvironmentResponse>
	}
	// envResp.serialDebug();


	// We know these things fit, so just using sprintf instead of snprintf here
	requestCur += sprintf(requestCur, "{\"c\":{\"o\":\"%s\",",
   d50dc:	4c24      	ldr	r4, [pc, #144]	; (d5170 <_ZN23GoogleMapsDeviceLocator12cellularScanEv.part.5.constprop.14+0xf4>)
			CellularHelper.getOperatorName().c_str());
   d50de:	4922      	ldr	r1, [pc, #136]	; (d5168 <_ZN23GoogleMapsDeviceLocator12cellularScanEv.part.5.constprop.14+0xec>)
	}
	// envResp.serialDebug();


	// We know these things fit, so just using sprintf instead of snprintf here
	requestCur += sprintf(requestCur, "{\"c\":{\"o\":\"%s\",",
   d50e0:	6825      	ldr	r5, [r4, #0]
			CellularHelper.getOperatorName().c_str());
   d50e2:	2209      	movs	r2, #9
   d50e4:	a801      	add	r0, sp, #4
   d50e6:	f7ff fc03 	bl	d48f0 <_ZNK19CellularHelperClass15getOperatorNameEi>
   d50ea:	9a01      	ldr	r2, [sp, #4]
   d50ec:	4921      	ldr	r1, [pc, #132]	; (d5174 <_ZN23GoogleMapsDeviceLocator12cellularScanEv.part.5.constprop.14+0xf8>)
   d50ee:	4628      	mov	r0, r5
   d50f0:	f000 fb86 	bl	d5800 <sprintf>
   d50f4:	6823      	ldr	r3, [r4, #0]
   d50f6:	4418      	add	r0, r3
   d50f8:	6020      	str	r0, [r4, #0]
   d50fa:	a801      	add	r0, sp, #4
   d50fc:	f001 fa56 	bl	d65ac <_ZN6StringD1Ev>

	requestCur += sprintf(requestCur, "\"a\":[");
   d5100:	6823      	ldr	r3, [r4, #0]
   d5102:	491d      	ldr	r1, [pc, #116]	; (d5178 <_ZN23GoogleMapsDeviceLocator12cellularScanEv.part.5.constprop.14+0xfc>)
   d5104:	4618      	mov	r0, r3
   d5106:	f002 fde3 	bl	d7cd0 <strcpy>
   d510a:	4603      	mov	r3, r0
   d510c:	3305      	adds	r3, #5

	cellularAddTower(&envResp.service);
   d510e:	a810      	add	r0, sp, #64	; 0x40

	// We know these things fit, so just using sprintf instead of snprintf here
	requestCur += sprintf(requestCur, "{\"c\":{\"o\":\"%s\",",
			CellularHelper.getOperatorName().c_str());

	requestCur += sprintf(requestCur, "\"a\":[");
   d5110:	6023      	str	r3, [r4, #0]

	cellularAddTower(&envResp.service);
   d5112:	f7ff fe0f 	bl	d4d34 <_ZL16cellularAddTowerPK33CellularHelperEnvironmentCellData>

	for(size_t ii = 0; ii < envResp.getNumNeighbors(); ii++) {
   d5116:	2500      	movs	r5, #0
		cellularAddTower(&envResp.neighbors[ii]);
   d5118:	262c      	movs	r6, #44	; 0x2c

	requestCur += sprintf(requestCur, "\"a\":[");

	cellularAddTower(&envResp.service);

	for(size_t ii = 0; ii < envResp.getNumNeighbors(); ii++) {
   d511a:	a805      	add	r0, sp, #20
   d511c:	f7ff fb4c 	bl	d47b8 <_ZNK33CellularHelperEnvironmentResponse15getNumNeighborsEv>
   d5120:	42a8      	cmp	r0, r5
   d5122:	d906      	bls.n	d5132 <_ZN23GoogleMapsDeviceLocator12cellularScanEv.part.5.constprop.14+0xb6>
		cellularAddTower(&envResp.neighbors[ii]);
   d5124:	981b      	ldr	r0, [sp, #108]	; 0x6c
   d5126:	fb06 0005 	mla	r0, r6, r5, r0
   d512a:	f7ff fe03 	bl	d4d34 <_ZL16cellularAddTowerPK33CellularHelperEnvironmentCellData>

	requestCur += sprintf(requestCur, "\"a\":[");

	cellularAddTower(&envResp.service);

	for(size_t ii = 0; ii < envResp.getNumNeighbors(); ii++) {
   d512e:	3501      	adds	r5, #1
   d5130:	e7f3      	b.n	d511a <_ZN23GoogleMapsDeviceLocator12cellularScanEv.part.5.constprop.14+0x9e>
		cellularAddTower(&envResp.neighbors[ii]);
	}

	*requestCur++ = ']';
   d5132:	6823      	ldr	r3, [r4, #0]
   d5134:	225d      	movs	r2, #93	; 0x5d
   d5136:	701a      	strb	r2, [r3, #0]
	*requestCur++ = '}';
   d5138:	227d      	movs	r2, #125	; 0x7d
   d513a:	705a      	strb	r2, [r3, #1]
	*requestCur++ = '}';
   d513c:	709a      	strb	r2, [r3, #2]
	*requestCur++ = 0;
   d513e:	1d1a      	adds	r2, r3, #4
   d5140:	6022      	str	r2, [r4, #0]
   d5142:	2200      	movs	r2, #0
   d5144:	70da      	strb	r2, [r3, #3]

	if (numAdded == 0) {
   d5146:	4b0d      	ldr	r3, [pc, #52]	; (d517c <_ZN23GoogleMapsDeviceLocator12cellularScanEv.part.5.constprop.14+0x100>)
   d5148:	681b      	ldr	r3, [r3, #0]
   d514a:	b90b      	cbnz	r3, d5150 <_ZN23GoogleMapsDeviceLocator12cellularScanEv.part.5.constprop.14+0xd4>
		requestBuf[0] = 0;
   d514c:	4a0c      	ldr	r2, [pc, #48]	; (d5180 <_ZN23GoogleMapsDeviceLocator12cellularScanEv.part.5.constprop.14+0x104>)
   d514e:	7013      	strb	r3, [r2, #0]
 * Things that return a + response and a string use this.
 *
 * Since it inherits from CellularHelperPlusStringResponse and CellularHelperCommonResponse you
 * can check resp == RESP_OK to make sure the call succeeded.
 */
class CellularHelperPlusStringResponse : public CellularHelperCommonResponse {
   d5150:	4b0c      	ldr	r3, [pc, #48]	; (d5184 <_ZN23GoogleMapsDeviceLocator12cellularScanEv.part.5.constprop.14+0x108>)
   d5152:	9305      	str	r3, [sp, #20]
   d5154:	a80c      	add	r0, sp, #48	; 0x30
   d5156:	f001 fa29 	bl	d65ac <_ZN6StringD1Ev>
   d515a:	a808      	add	r0, sp, #32
   d515c:	f001 fa26 	bl	d65ac <_ZN6StringD1Ev>
	}

	return requestBuf;
   d5160:	4807      	ldr	r0, [pc, #28]	; (d5180 <_ZN23GoogleMapsDeviceLocator12cellularScanEv.part.5.constprop.14+0x104>)
}
   d5162:	b04a      	add	sp, #296	; 0x128
   d5164:	bd70      	pop	{r4, r5, r6, pc}
   d5166:	bf00      	nop
   d5168:	2003e248 	.word	0x2003e248
   d516c:	000da844 	.word	0x000da844
   d5170:	2003e354 	.word	0x2003e354
   d5174:	000da87d 	.word	0x000da87d
   d5178:	000da88d 	.word	0x000da88d
   d517c:	2003e24c 	.word	0x2003e24c
   d5180:	2003e251 	.word	0x2003e251
   d5184:	000da52c 	.word	0x000da52c

000d5188 <_ZN23GoogleMapsDeviceLocator12cellularScanEv>:
}


const char *GoogleMapsDeviceLocator::cellularScan() {

	requestCur = requestBuf;
   d5188:	4b17      	ldr	r3, [pc, #92]	; (d51e8 <_ZN23GoogleMapsDeviceLocator12cellularScanEv+0x60>)
   d518a:	4a18      	ldr	r2, [pc, #96]	; (d51ec <_ZN23GoogleMapsDeviceLocator12cellularScanEv+0x64>)

	return requestBuf;
}


const char *GoogleMapsDeviceLocator::cellularScan() {
   d518c:	b530      	push	{r4, r5, lr}

	requestCur = requestBuf;
   d518e:	601a      	str	r2, [r3, #0]
	numAdded = 0;
   d5190:	4b17      	ldr	r3, [pc, #92]	; (d51f0 <_ZN23GoogleMapsDeviceLocator12cellularScanEv+0x68>)
   d5192:	4d18      	ldr	r5, [pc, #96]	; (d51f4 <_ZN23GoogleMapsDeviceLocator12cellularScanEv+0x6c>)
   d5194:	2200      	movs	r2, #0
   d5196:	601a      	str	r2, [r3, #0]
#if HAS_CELLULAR_GLOBAL_IDENTITY
	{
		static bool modelChecked = false;
		static bool useCGI = false;

		if (!modelChecked) {
   d5198:	4b17      	ldr	r3, [pc, #92]	; (d51f8 <_ZN23GoogleMapsDeviceLocator12cellularScanEv+0x70>)
   d519a:	781a      	ldrb	r2, [r3, #0]

	return requestBuf;
}


const char *GoogleMapsDeviceLocator::cellularScan() {
   d519c:	b089      	sub	sp, #36	; 0x24
   d519e:	4604      	mov	r4, r0
#if HAS_CELLULAR_GLOBAL_IDENTITY
	{
		static bool modelChecked = false;
		static bool useCGI = false;

		if (!modelChecked) {
   d51a0:	b9ba      	cbnz	r2, d51d2 <_ZN23GoogleMapsDeviceLocator12cellularScanEv+0x4a>
			modelChecked = true;
   d51a2:	2201      	movs	r2, #1

			// Use Cellular Global Identity (CGI) on Device OS 1.2.1 and later
			// if the modem is not a global 2G (G350). On the G350, AT+CGEG=5
			// works so a better multi-tower result can be returned.
			useCGI = !CellularHelper.getModel().startsWith("SARA-G350");
   d51a4:	4915      	ldr	r1, [pc, #84]	; (d51fc <_ZN23GoogleMapsDeviceLocator12cellularScanEv+0x74>)
	{
		static bool modelChecked = false;
		static bool useCGI = false;

		if (!modelChecked) {
			modelChecked = true;
   d51a6:	701a      	strb	r2, [r3, #0]

			// Use Cellular Global Identity (CGI) on Device OS 1.2.1 and later
			// if the modem is not a global 2G (G350). On the G350, AT+CGEG=5
			// works so a better multi-tower result can be returned.
			useCGI = !CellularHelper.getModel().startsWith("SARA-G350");
   d51a8:	4668      	mov	r0, sp
   d51aa:	f7ff fb69 	bl	d4880 <_ZNK19CellularHelperClass8getModelEv>
   d51ae:	4914      	ldr	r1, [pc, #80]	; (d5200 <_ZN23GoogleMapsDeviceLocator12cellularScanEv+0x78>)
   d51b0:	a804      	add	r0, sp, #16
   d51b2:	f001 fa42 	bl	d663a <_ZN6StringC1EPK19__FlashStringHelper>
   d51b6:	a904      	add	r1, sp, #16
   d51b8:	4668      	mov	r0, sp
   d51ba:	f001 faea 	bl	d6792 <_ZNK6String10startsWithERKS_>
   d51be:	fab0 f080 	clz	r0, r0
   d51c2:	0940      	lsrs	r0, r0, #5
   d51c4:	7028      	strb	r0, [r5, #0]
   d51c6:	a804      	add	r0, sp, #16
   d51c8:	f001 f9f0 	bl	d65ac <_ZN6StringD1Ev>
   d51cc:	4668      	mov	r0, sp
   d51ce:	f001 f9ed 	bl	d65ac <_ZN6StringD1Ev>
		}
		if (useCGI) {
   d51d2:	782b      	ldrb	r3, [r5, #0]
			return cellularScanCGI();
   d51d4:	4620      	mov	r0, r4
			// Use Cellular Global Identity (CGI) on Device OS 1.2.1 and later
			// if the modem is not a global 2G (G350). On the G350, AT+CGEG=5
			// works so a better multi-tower result can be returned.
			useCGI = !CellularHelper.getModel().startsWith("SARA-G350");
		}
		if (useCGI) {
   d51d6:	b113      	cbz	r3, d51de <_ZN23GoogleMapsDeviceLocator12cellularScanEv+0x56>
			return cellularScanCGI();
   d51d8:	f7ff fe8a 	bl	d4ef0 <_ZN23GoogleMapsDeviceLocator15cellularScanCGIEv>
   d51dc:	e001      	b.n	d51e2 <_ZN23GoogleMapsDeviceLocator12cellularScanEv+0x5a>
   d51de:	f7ff ff4d 	bl	d507c <_ZN23GoogleMapsDeviceLocator12cellularScanEv.part.5.constprop.14>
	if (numAdded == 0) {
		requestBuf[0] = 0;
	}

	return requestBuf;
}
   d51e2:	b009      	add	sp, #36	; 0x24
   d51e4:	bd30      	pop	{r4, r5, pc}
   d51e6:	bf00      	nop
   d51e8:	2003e354 	.word	0x2003e354
   d51ec:	2003e251 	.word	0x2003e251
   d51f0:	2003e24c 	.word	0x2003e24c
   d51f4:	2003e351 	.word	0x2003e351
   d51f8:	2003e358 	.word	0x2003e358
   d51fc:	2003e248 	.word	0x2003e248
   d5200:	000da893 	.word	0x000da893

000d5204 <_ZN23GoogleMapsDeviceLocator15publishLocationEv>:
	return cellularScan();
#endif
}


void GoogleMapsDeviceLocator::publishLocation() {
   d5204:	b530      	push	{r4, r5, lr}
   d5206:	b085      	sub	sp, #20
   d5208:	4605      	mov	r5, r0

	Serial.println("publishLocation");
   d520a:	f001 fcb7 	bl	d6b7c <_Z16_fetch_usbserialv>
   d520e:	4918      	ldr	r1, [pc, #96]	; (d5270 <_ZN23GoogleMapsDeviceLocator15publishLocationEv+0x6c>)
   d5210:	f001 f953 	bl	d64ba <_ZN5Print7printlnEPKc>
const char *GoogleMapsDeviceLocator::scan() {
#if Wiring_WiFi
	return wifiScan();
#endif
#if Wiring_Cellular
	return cellularScan();
   d5214:	4628      	mov	r0, r5
   d5216:	f7ff ffb7 	bl	d5188 <_ZN23GoogleMapsDeviceLocator12cellularScanEv>
   d521a:	4604      	mov	r4, r0

	Serial.println("publishLocation");

	const char *scanData = scan();

	Serial.printlnf("scanData=%s", scanData);
   d521c:	f001 fcae 	bl	d6b7c <_Z16_fetch_usbserialv>
    }

    template <typename... Args>
    inline size_t printlnf(const char* format, Args... args)
    {
        return this->printf_impl(true, format, args...);
   d5220:	4623      	mov	r3, r4
   d5222:	4a14      	ldr	r2, [pc, #80]	; (d5274 <_ZN23GoogleMapsDeviceLocator15publishLocationEv+0x70>)
   d5224:	2101      	movs	r1, #1
   d5226:	f001 f972 	bl	d650e <_ZN5Print11printf_implEbPKcz>

	if (scanData[0]) {
   d522a:	7823      	ldrb	r3, [r4, #0]
   d522c:	b1f3      	cbz	r3, d526c <_ZN23GoogleMapsDeviceLocator15publishLocationEv+0x68>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d522e:	f000 fa4f 	bl	d56d0 <spark_cloud_flag_connected>

		if (Particle.connected()) {
   d5232:	b1d8      	cbz	r0, d526c <_ZN23GoogleMapsDeviceLocator15publishLocationEv+0x68>
   d5234:	4b10      	ldr	r3, [pc, #64]	; (d5278 <_ZN23GoogleMapsDeviceLocator15publishLocationEv+0x74>)
   d5236:	68e9      	ldr	r1, [r5, #12]
   d5238:	781b      	ldrb	r3, [r3, #0]
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d523a:	f88d 3000 	strb.w	r3, [sp]
   d523e:	4622      	mov	r2, r4
   d5240:	233c      	movs	r3, #60	; 0x3c
   d5242:	a802      	add	r0, sp, #8
   d5244:	f000 fd16 	bl	d5c74 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d5248:	9c03      	ldr	r4, [sp, #12]
   d524a:	b17c      	cbz	r4, d526c <_ZN23GoogleMapsDeviceLocator15publishLocationEv+0x68>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d524c:	6863      	ldr	r3, [r4, #4]
   d524e:	3b01      	subs	r3, #1
   d5250:	6063      	str	r3, [r4, #4]
   d5252:	b95b      	cbnz	r3, d526c <_ZN23GoogleMapsDeviceLocator15publishLocationEv+0x68>
        {
          _M_dispose();
   d5254:	6823      	ldr	r3, [r4, #0]
   d5256:	4620      	mov	r0, r4
   d5258:	689b      	ldr	r3, [r3, #8]
   d525a:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d525c:	68a3      	ldr	r3, [r4, #8]
   d525e:	3b01      	subs	r3, #1
   d5260:	60a3      	str	r3, [r4, #8]
   d5262:	b91b      	cbnz	r3, d526c <_ZN23GoogleMapsDeviceLocator15publishLocationEv+0x68>
            _M_destroy();
   d5264:	6823      	ldr	r3, [r4, #0]
   d5266:	4620      	mov	r0, r4
   d5268:	68db      	ldr	r3, [r3, #12]
   d526a:	4798      	blx	r3
			Particle.publish(eventName, scanData, PRIVATE);
		}
	}
}
   d526c:	b005      	add	sp, #20
   d526e:	bd30      	pop	{r4, r5, pc}
   d5270:	000da89d 	.word	0x000da89d
   d5274:	000da8ad 	.word	0x000da8ad
   d5278:	2003e250 	.word	0x2003e250

000d527c <_ZN23GoogleMapsDeviceLocator4loopEv>:
	return *this;
}



void GoogleMapsDeviceLocator::loop() {
   d527c:	b510      	push	{r4, lr}
	switch(state) {
   d527e:	6a03      	ldr	r3, [r0, #32]
   d5280:	2b02      	cmp	r3, #2
	return *this;
}



void GoogleMapsDeviceLocator::loop() {
   d5282:	4604      	mov	r4, r0
	switch(state) {
   d5284:	d00b      	beq.n	d529e <_ZN23GoogleMapsDeviceLocator4loopEv+0x22>
   d5286:	2b03      	cmp	r3, #3
   d5288:	d023      	beq.n	d52d2 <_ZN23GoogleMapsDeviceLocator4loopEv+0x56>
   d528a:	2b00      	cmp	r3, #0
   d528c:	d134      	bne.n	d52f8 <_ZN23GoogleMapsDeviceLocator4loopEv+0x7c>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d528e:	f000 fa1f 	bl	d56d0 <spark_cloud_flag_connected>
	case CONNECT_WAIT_STATE:
		if (Particle.connected()) {
   d5292:	b388      	cbz	r0, d52f8 <_ZN23GoogleMapsDeviceLocator4loopEv+0x7c>
			state = CONNECTED_WAIT_STATE;
   d5294:	2302      	movs	r3, #2
   d5296:	6223      	str	r3, [r4, #32]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d5298:	f000 f8d6 	bl	d5448 <HAL_Timer_Get_Milli_Seconds>
   d529c:	e017      	b.n	d52ce <_ZN23GoogleMapsDeviceLocator4loopEv+0x52>
   d529e:	f000 f8d3 	bl	d5448 <HAL_Timer_Get_Milli_Seconds>
			stateTime = millis();
		}
		break;

	case CONNECTED_WAIT_STATE:
		if (millis() - stateTime >= waitAfterConnect) {
   d52a2:	69e3      	ldr	r3, [r4, #28]
   d52a4:	1ac0      	subs	r0, r0, r3
   d52a6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   d52a8:	4298      	cmp	r0, r3
   d52aa:	d325      	bcc.n	d52f8 <_ZN23GoogleMapsDeviceLocator4loopEv+0x7c>
			// Wait several seconds after connecting before doing the location
			if (locatorMode == LOCATOR_MODE_ONCE) {
   d52ac:	6863      	ldr	r3, [r4, #4]
   d52ae:	2b01      	cmp	r3, #1
   d52b0:	d103      	bne.n	d52ba <_ZN23GoogleMapsDeviceLocator4loopEv+0x3e>
				publishLocation();
   d52b2:	4620      	mov	r0, r4
   d52b4:	f7ff ffa6 	bl	d5204 <_ZN23GoogleMapsDeviceLocator15publishLocationEv>
   d52b8:	e000      	b.n	d52bc <_ZN23GoogleMapsDeviceLocator4loopEv+0x40>

				state = IDLE_STATE;
			}
			else
			if (locatorMode == LOCATOR_MODE_MANUAL) {
   d52ba:	b913      	cbnz	r3, d52c2 <_ZN23GoogleMapsDeviceLocator4loopEv+0x46>
				state = IDLE_STATE;
   d52bc:	2304      	movs	r3, #4
   d52be:	6223      	str	r3, [r4, #32]
   d52c0:	bd10      	pop	{r4, pc}
			}
			else {
				state = CONNECTED_STATE;
   d52c2:	2303      	movs	r3, #3
   d52c4:	6223      	str	r3, [r4, #32]
   d52c6:	f000 f8bf 	bl	d5448 <HAL_Timer_Get_Milli_Seconds>
				stateTime = millis() - periodMs;
   d52ca:	68a3      	ldr	r3, [r4, #8]
   d52cc:	1ac0      	subs	r0, r0, r3
   d52ce:	61e0      	str	r0, [r4, #28]
   d52d0:	bd10      	pop	{r4, pc}
   d52d2:	f000 f9fd 	bl	d56d0 <spark_cloud_flag_connected>
			}
		}
		break;

	case CONNECTED_STATE:
		if (Particle.connected()) {
   d52d6:	b170      	cbz	r0, d52f6 <_ZN23GoogleMapsDeviceLocator4loopEv+0x7a>
   d52d8:	f000 f8b6 	bl	d5448 <HAL_Timer_Get_Milli_Seconds>
			if (millis() - stateTime >= periodMs) {
   d52dc:	69e3      	ldr	r3, [r4, #28]
   d52de:	1ac0      	subs	r0, r0, r3
   d52e0:	68a3      	ldr	r3, [r4, #8]
   d52e2:	4298      	cmp	r0, r3
   d52e4:	d308      	bcc.n	d52f8 <_ZN23GoogleMapsDeviceLocator4loopEv+0x7c>
   d52e6:	f000 f8af 	bl	d5448 <HAL_Timer_Get_Milli_Seconds>
				stateTime = millis();
   d52ea:	61e0      	str	r0, [r4, #28]
				publishLocation();
   d52ec:	4620      	mov	r0, r4
	case IDLE_STATE:
		// Just hang out here forever (entered only on LOCATOR_MODE_ONCE)
		break;
	}

}
   d52ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

	case CONNECTED_STATE:
		if (Particle.connected()) {
			if (millis() - stateTime >= periodMs) {
				stateTime = millis();
				publishLocation();
   d52f2:	f7ff bf87 	b.w	d5204 <_ZN23GoogleMapsDeviceLocator15publishLocationEv>
			}
		}
		else {
			// We have disconnected, rec
			state = CONNECT_WAIT_STATE;
   d52f6:	6220      	str	r0, [r4, #32]
   d52f8:	bd10      	pop	{r4, pc}

000d52fa <_ZNSt8functionIFvPKcS1_EEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d52fa:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d52fc:	2300      	movs	r3, #0
   d52fe:	6083      	str	r3, [r0, #8]
   d5300:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d5302:	4604      	mov	r4, r0
   d5304:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d5306:	b12b      	cbz	r3, d5314 <_ZNSt8functionIFvPKcS1_EEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d5308:	2202      	movs	r2, #2
   d530a:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d530c:	68eb      	ldr	r3, [r5, #12]
   d530e:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d5310:	68ab      	ldr	r3, [r5, #8]
   d5312:	60a3      	str	r3, [r4, #8]
	}
    }
   d5314:	4620      	mov	r0, r4
   d5316:	bd38      	pop	{r3, r4, r5, pc}

000d5318 <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE>:
GoogleMapsDeviceLocator &GoogleMapsDeviceLocator::withEventName(const char *name) {
	this->eventName = name;
	return *this;
}

GoogleMapsDeviceLocator &GoogleMapsDeviceLocator::withSubscribe(GoogleMapsDeviceLocatorSubscriptionCallback callback) {
   d5318:	b530      	push	{r4, r5, lr}
   d531a:	b08b      	sub	sp, #44	; 0x2c
   d531c:	68c5      	ldr	r5, [r0, #12]
	this->callback = callback;
   d531e:	6241      	str	r1, [r0, #36]	; 0x24
GoogleMapsDeviceLocator &GoogleMapsDeviceLocator::withEventName(const char *name) {
	this->eventName = name;
	return *this;
}

GoogleMapsDeviceLocator &GoogleMapsDeviceLocator::withSubscribe(GoogleMapsDeviceLocatorSubscriptionCallback callback) {
   d5320:	4604      	mov	r4, r0
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, long seconds = 0, SleepOptionFlags flag = SLEEP_NETWORK_OFF) { return sleepPinImpl(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, std::chrono::seconds s, SleepOptionFlags flag = SLEEP_NETWORK_OFF) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, s.count(), flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, long seconds = 0) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, std::chrono::seconds s) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, flag, s.count()); }

    static String deviceID(void) { return spark_deviceID(); }
   d5322:	a806      	add	r0, sp, #24
   d5324:	f000 f9dc 	bl	d56e0 <spark_deviceID>
	this->callback = callback;

	snprintf(requestBuf, sizeof(requestBuf), "hook-response/%s/%s", eventName.c_str(), System.deviceID().c_str());
   d5328:	9b06      	ldr	r3, [sp, #24]
   d532a:	9300      	str	r3, [sp, #0]
   d532c:	4a1b      	ldr	r2, [pc, #108]	; (d539c <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE+0x84>)
   d532e:	481c      	ldr	r0, [pc, #112]	; (d53a0 <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE+0x88>)
   d5330:	462b      	mov	r3, r5
   d5332:	f44f 7180 	mov.w	r1, #256	; 0x100
   d5336:	f000 fa7b 	bl	d5830 <snprintf>
   d533a:	a806      	add	r0, sp, #24
   d533c:	f001 f936 	bl	d65ac <_ZN6StringD1Ev>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5340:	2500      	movs	r5, #0
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5342:	200c      	movs	r0, #12
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5344:	9504      	str	r5, [sp, #16]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5346:	f7fe fea8 	bl	d409a <_Znwj>
   d534a:	b118      	cbz	r0, d5354 <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE+0x3c>
	{ }

      _Bind(const _Bind&) = default;

      _Bind(_Bind&& __b)
      : _M_f(std::move(__b._M_f)), _M_bound_args(std::move(__b._M_bound_args))
   d534c:	4b15      	ldr	r3, [pc, #84]	; (d53a4 <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE+0x8c>)
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d534e:	6084      	str	r4, [r0, #8]
   d5350:	e880 0028 	stmia.w	r0, {r3, r5}
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d5354:	4b14      	ldr	r3, [pc, #80]	; (d53a8 <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE+0x90>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5356:	9002      	str	r0, [sp, #8]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d5358:	9305      	str	r3, [sp, #20]
        return spark_subscribe(eventName, handler, NULL, MY_DEVICES, deviceID, NULL);
    }

    bool subscribe(const char *eventName, wiring_event_handler_t handler, Spark_Subscription_Scope_TypeDef scope)
    {
        return subscribe_wiring(eventName, handler, scope);
   d535a:	a902      	add	r1, sp, #8
	    _M_manager = &_My_handler::_M_manager;
   d535c:	4b13      	ldr	r3, [pc, #76]	; (d53ac <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE+0x94>)
   d535e:	9304      	str	r3, [sp, #16]
   d5360:	a806      	add	r0, sp, #24
   d5362:	f7ff ffca 	bl	d52fa <_ZNSt8functionIFvPKcS1_EEC1ERKS3_>
    }

    bool subscribe_wiring(const char *eventName, wiring_event_handler_t handler, Spark_Subscription_Scope_TypeDef scope, const char *deviceID = NULL)
    {
        bool success = false;
        if (handler) // if the call-wrapper has wrapped a callable object
   d5366:	9b08      	ldr	r3, [sp, #32]
   d5368:	b17b      	cbz	r3, d538a <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE+0x72>
        {
            auto wrapper = new wiring_event_handler_t(handler);
   d536a:	2010      	movs	r0, #16
   d536c:	f7fe fe95 	bl	d409a <_Znwj>
   d5370:	4605      	mov	r5, r0
   d5372:	b150      	cbz	r0, d538a <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE+0x72>
   d5374:	a906      	add	r1, sp, #24
   d5376:	f7ff ffc0 	bl	d52fa <_ZNSt8functionIFvPKcS1_EEC1ERKS3_>
            if (wrapper) {
                success = spark_subscribe(eventName, (EventHandler)call_wiring_event_handler, wrapper, scope, deviceID, NULL);
   d537a:	2300      	movs	r3, #0
   d537c:	9301      	str	r3, [sp, #4]
   d537e:	9300      	str	r3, [sp, #0]
   d5380:	462a      	mov	r2, r5
   d5382:	490b      	ldr	r1, [pc, #44]	; (d53b0 <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE+0x98>)
   d5384:	4806      	ldr	r0, [pc, #24]	; (d53a0 <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE+0x88>)
   d5386:	f000 f9bb 	bl	d5700 <spark_subscribe>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d538a:	a806      	add	r0, sp, #24
   d538c:	f7ff fd6e 	bl	d4e6c <_ZNSt14_Function_baseD1Ev>
   d5390:	a802      	add	r0, sp, #8
   d5392:	f7ff fd6b 	bl	d4e6c <_ZNSt14_Function_baseD1Ev>

	Particle.subscribe(requestBuf, &GoogleMapsDeviceLocator::subscriptionHandler, this, MY_DEVICES);

	return *this;
}
   d5396:	4620      	mov	r0, r4
   d5398:	b00b      	add	sp, #44	; 0x2c
   d539a:	bd30      	pop	{r4, r5, pc}
   d539c:	000da8b9 	.word	0x000da8b9
   d53a0:	2003e251 	.word	0x2003e251
   d53a4:	000d4dad 	.word	0x000d4dad
   d53a8:	000d4cdd 	.word	0x000d4cdd
   d53ac:	000d4e35 	.word	0x000d4e35
   d53b0:	000d5a45 	.word	0x000d5a45

000d53b4 <_GLOBAL__sub_I__ZN23GoogleMapsDeviceLocatorC2Ev>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d53b4:	4b02      	ldr	r3, [pc, #8]	; (d53c0 <_GLOBAL__sub_I__ZN23GoogleMapsDeviceLocatorC2Ev+0xc>)
   d53b6:	2201      	movs	r2, #1
   d53b8:	701a      	strb	r2, [r3, #0]
   d53ba:	f000 b85d 	b.w	d5478 <HAL_Pin_Map>
   d53be:	bf00      	nop
   d53c0:	2003e250 	.word	0x2003e250

000d53c4 <cellular_command>:
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(CellularSignalHal*, cellular_signal_t*))
DYNALIB_FN(18, hal_cellular, cellular_command, cellular_result_t(_CALLBACKPTR_MDM, void*, system_tick_t, const char*, ...))
   d53c4:	b508      	push	{r3, lr}
   d53c6:	4b02      	ldr	r3, [pc, #8]	; (d53d0 <cellular_command+0xc>)
   d53c8:	681b      	ldr	r3, [r3, #0]
   d53ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d53cc:	9301      	str	r3, [sp, #4]
   d53ce:	bd08      	pop	{r3, pc}
   d53d0:	00030274 	.word	0x00030274

000d53d4 <cellular_global_identity>:
DYNALIB_FN(35, hal_cellular, cellular_get_active_sim, cellular_result_t(int*, void*))
DYNALIB_FN(36, hal_cellular, cellular_credentials_clear, int(void*))
#define BASE_CELL_IDX 37 // Base index for all subsequent functions
#endif // !HAL_PLATFORM_MESH

DYNALIB_FN(BASE_CELL_IDX + 0, hal_cellular, cellular_global_identity, cellular_result_t(CellularGlobalIdentity*, void*))
   d53d4:	b508      	push	{r3, lr}
   d53d6:	4b03      	ldr	r3, [pc, #12]	; (d53e4 <cellular_global_identity+0x10>)
   d53d8:	681b      	ldr	r3, [r3, #0]
   d53da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d53de:	9301      	str	r3, [sp, #4]
   d53e0:	bd08      	pop	{r3, pc}
   d53e2:	0000      	.short	0x0000
   d53e4:	00030274 	.word	0x00030274

000d53e8 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d53e8:	b508      	push	{r3, lr}
   d53ea:	4b02      	ldr	r3, [pc, #8]	; (d53f4 <os_thread_is_current+0xc>)
   d53ec:	681b      	ldr	r3, [r3, #0]
   d53ee:	689b      	ldr	r3, [r3, #8]
   d53f0:	9301      	str	r3, [sp, #4]
   d53f2:	bd08      	pop	{r3, pc}
   d53f4:	00030248 	.word	0x00030248

000d53f8 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d53f8:	b508      	push	{r3, lr}
   d53fa:	4b02      	ldr	r3, [pc, #8]	; (d5404 <os_thread_join+0xc>)
   d53fc:	681b      	ldr	r3, [r3, #0]
   d53fe:	691b      	ldr	r3, [r3, #16]
   d5400:	9301      	str	r3, [sp, #4]
   d5402:	bd08      	pop	{r3, pc}
   d5404:	00030248 	.word	0x00030248

000d5408 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d5408:	b508      	push	{r3, lr}
   d540a:	4b02      	ldr	r3, [pc, #8]	; (d5414 <os_thread_cleanup+0xc>)
   d540c:	681b      	ldr	r3, [r3, #0]
   d540e:	695b      	ldr	r3, [r3, #20]
   d5410:	9301      	str	r3, [sp, #4]
   d5412:	bd08      	pop	{r3, pc}
   d5414:	00030248 	.word	0x00030248

000d5418 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d5418:	b508      	push	{r3, lr}
   d541a:	4b02      	ldr	r3, [pc, #8]	; (d5424 <os_mutex_recursive_create+0xc>)
   d541c:	681b      	ldr	r3, [r3, #0]
   d541e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5420:	9301      	str	r3, [sp, #4]
   d5422:	bd08      	pop	{r3, pc}
   d5424:	00030248 	.word	0x00030248

000d5428 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d5428:	b508      	push	{r3, lr}
   d542a:	4b02      	ldr	r3, [pc, #8]	; (d5434 <os_mutex_recursive_destroy+0xc>)
   d542c:	681b      	ldr	r3, [r3, #0]
   d542e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d5430:	9301      	str	r3, [sp, #4]
   d5432:	bd08      	pop	{r3, pc}
   d5434:	00030248 	.word	0x00030248

000d5438 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d5438:	b508      	push	{r3, lr}
   d543a:	4b02      	ldr	r3, [pc, #8]	; (d5444 <HAL_RNG_GetRandomNumber+0xc>)
   d543c:	681b      	ldr	r3, [r3, #0]
   d543e:	685b      	ldr	r3, [r3, #4]
   d5440:	9301      	str	r3, [sp, #4]
   d5442:	bd08      	pop	{r3, pc}
   d5444:	00030218 	.word	0x00030218

000d5448 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d5448:	b508      	push	{r3, lr}
   d544a:	4b02      	ldr	r3, [pc, #8]	; (d5454 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d544c:	681b      	ldr	r3, [r3, #0]
   d544e:	695b      	ldr	r3, [r3, #20]
   d5450:	9301      	str	r3, [sp, #4]
   d5452:	bd08      	pop	{r3, pc}
   d5454:	00030218 	.word	0x00030218

000d5458 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
   d5458:	b508      	push	{r3, lr}
   d545a:	4b02      	ldr	r3, [pc, #8]	; (d5464 <HAL_RTC_Get_UnixTime+0xc>)
   d545c:	681b      	ldr	r3, [r3, #0]
   d545e:	69db      	ldr	r3, [r3, #28]
   d5460:	9301      	str	r3, [sp, #4]
   d5462:	bd08      	pop	{r3, pc}
   d5464:	00030218 	.word	0x00030218

000d5468 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
   d5468:	b508      	push	{r3, lr}
   d546a:	4b02      	ldr	r3, [pc, #8]	; (d5474 <HAL_RTC_Time_Is_Valid+0xc>)
   d546c:	681b      	ldr	r3, [r3, #0]
   d546e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d5470:	9301      	str	r3, [sp, #4]
   d5472:	bd08      	pop	{r3, pc}
   d5474:	00030218 	.word	0x00030218

000d5478 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d5478:	b508      	push	{r3, lr}
   d547a:	4b02      	ldr	r3, [pc, #8]	; (d5484 <HAL_Pin_Map+0xc>)
   d547c:	681b      	ldr	r3, [r3, #0]
   d547e:	681b      	ldr	r3, [r3, #0]
   d5480:	9301      	str	r3, [sp, #4]
   d5482:	bd08      	pop	{r3, pc}
   d5484:	0003022c 	.word	0x0003022c

000d5488 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d5488:	b508      	push	{r3, lr}
   d548a:	4b02      	ldr	r3, [pc, #8]	; (d5494 <HAL_I2C_Begin+0xc>)
   d548c:	681b      	ldr	r3, [r3, #0]
   d548e:	68db      	ldr	r3, [r3, #12]
   d5490:	9301      	str	r3, [sp, #4]
   d5492:	bd08      	pop	{r3, pc}
   d5494:	00030228 	.word	0x00030228

000d5498 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
   d5498:	b508      	push	{r3, lr}
   d549a:	4b02      	ldr	r3, [pc, #8]	; (d54a4 <HAL_I2C_Begin_Transmission+0xc>)
   d549c:	681b      	ldr	r3, [r3, #0]
   d549e:	699b      	ldr	r3, [r3, #24]
   d54a0:	9301      	str	r3, [sp, #4]
   d54a2:	bd08      	pop	{r3, pc}
   d54a4:	00030228 	.word	0x00030228

000d54a8 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d54a8:	b508      	push	{r3, lr}
   d54aa:	4b02      	ldr	r3, [pc, #8]	; (d54b4 <HAL_I2C_End_Transmission+0xc>)
   d54ac:	681b      	ldr	r3, [r3, #0]
   d54ae:	69db      	ldr	r3, [r3, #28]
   d54b0:	9301      	str	r3, [sp, #4]
   d54b2:	bd08      	pop	{r3, pc}
   d54b4:	00030228 	.word	0x00030228

000d54b8 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d54b8:	b508      	push	{r3, lr}
   d54ba:	4b02      	ldr	r3, [pc, #8]	; (d54c4 <HAL_I2C_Write_Data+0xc>)
   d54bc:	681b      	ldr	r3, [r3, #0]
   d54be:	6a1b      	ldr	r3, [r3, #32]
   d54c0:	9301      	str	r3, [sp, #4]
   d54c2:	bd08      	pop	{r3, pc}
   d54c4:	00030228 	.word	0x00030228

000d54c8 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d54c8:	b508      	push	{r3, lr}
   d54ca:	4b02      	ldr	r3, [pc, #8]	; (d54d4 <HAL_I2C_Available_Data+0xc>)
   d54cc:	681b      	ldr	r3, [r3, #0]
   d54ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d54d0:	9301      	str	r3, [sp, #4]
   d54d2:	bd08      	pop	{r3, pc}
   d54d4:	00030228 	.word	0x00030228

000d54d8 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d54d8:	b508      	push	{r3, lr}
   d54da:	4b02      	ldr	r3, [pc, #8]	; (d54e4 <HAL_I2C_Read_Data+0xc>)
   d54dc:	681b      	ldr	r3, [r3, #0]
   d54de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d54e0:	9301      	str	r3, [sp, #4]
   d54e2:	bd08      	pop	{r3, pc}
   d54e4:	00030228 	.word	0x00030228

000d54e8 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d54e8:	b508      	push	{r3, lr}
   d54ea:	4b02      	ldr	r3, [pc, #8]	; (d54f4 <HAL_I2C_Peek_Data+0xc>)
   d54ec:	681b      	ldr	r3, [r3, #0]
   d54ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d54f0:	9301      	str	r3, [sp, #4]
   d54f2:	bd08      	pop	{r3, pc}
   d54f4:	00030228 	.word	0x00030228

000d54f8 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d54f8:	b508      	push	{r3, lr}
   d54fa:	4b02      	ldr	r3, [pc, #8]	; (d5504 <HAL_I2C_Flush_Data+0xc>)
   d54fc:	681b      	ldr	r3, [r3, #0]
   d54fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5500:	9301      	str	r3, [sp, #4]
   d5502:	bd08      	pop	{r3, pc}
   d5504:	00030228 	.word	0x00030228

000d5508 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d5508:	b508      	push	{r3, lr}
   d550a:	4b02      	ldr	r3, [pc, #8]	; (d5514 <HAL_I2C_Init+0xc>)
   d550c:	681b      	ldr	r3, [r3, #0]
   d550e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5510:	9301      	str	r3, [sp, #4]
   d5512:	bd08      	pop	{r3, pc}
   d5514:	00030228 	.word	0x00030228

000d5518 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d5518:	b508      	push	{r3, lr}
   d551a:	4b02      	ldr	r3, [pc, #8]	; (d5524 <inet_inet_ntop+0xc>)
   d551c:	681b      	ldr	r3, [r3, #0]
   d551e:	695b      	ldr	r3, [r3, #20]
   d5520:	9301      	str	r3, [sp, #4]
   d5522:	bd08      	pop	{r3, pc}
   d5524:	00030264 	.word	0x00030264

000d5528 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d5528:	b508      	push	{r3, lr}
   d552a:	4b02      	ldr	r3, [pc, #8]	; (d5534 <netdb_freeaddrinfo+0xc>)
   d552c:	681b      	ldr	r3, [r3, #0]
   d552e:	689b      	ldr	r3, [r3, #8]
   d5530:	9301      	str	r3, [sp, #4]
   d5532:	bd08      	pop	{r3, pc}
   d5534:	00030268 	.word	0x00030268

000d5538 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d5538:	b508      	push	{r3, lr}
   d553a:	4b02      	ldr	r3, [pc, #8]	; (d5544 <netdb_getaddrinfo+0xc>)
   d553c:	681b      	ldr	r3, [r3, #0]
   d553e:	68db      	ldr	r3, [r3, #12]
   d5540:	9301      	str	r3, [sp, #4]
   d5542:	bd08      	pop	{r3, pc}
   d5544:	00030268 	.word	0x00030268

000d5548 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d5548:	b508      	push	{r3, lr}
   d554a:	4b02      	ldr	r3, [pc, #8]	; (d5554 <HAL_USART_Init+0xc>)
   d554c:	681b      	ldr	r3, [r3, #0]
   d554e:	681b      	ldr	r3, [r3, #0]
   d5550:	9301      	str	r3, [sp, #4]
   d5552:	bd08      	pop	{r3, pc}
   d5554:	0003023c 	.word	0x0003023c

000d5558 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d5558:	b508      	push	{r3, lr}
   d555a:	4b02      	ldr	r3, [pc, #8]	; (d5564 <HAL_USART_Write_Data+0xc>)
   d555c:	681b      	ldr	r3, [r3, #0]
   d555e:	68db      	ldr	r3, [r3, #12]
   d5560:	9301      	str	r3, [sp, #4]
   d5562:	bd08      	pop	{r3, pc}
   d5564:	0003023c 	.word	0x0003023c

000d5568 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d5568:	b508      	push	{r3, lr}
   d556a:	4b02      	ldr	r3, [pc, #8]	; (d5574 <HAL_USART_Available_Data+0xc>)
   d556c:	681b      	ldr	r3, [r3, #0]
   d556e:	691b      	ldr	r3, [r3, #16]
   d5570:	9301      	str	r3, [sp, #4]
   d5572:	bd08      	pop	{r3, pc}
   d5574:	0003023c 	.word	0x0003023c

000d5578 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d5578:	b508      	push	{r3, lr}
   d557a:	4b02      	ldr	r3, [pc, #8]	; (d5584 <HAL_USART_Read_Data+0xc>)
   d557c:	681b      	ldr	r3, [r3, #0]
   d557e:	695b      	ldr	r3, [r3, #20]
   d5580:	9301      	str	r3, [sp, #4]
   d5582:	bd08      	pop	{r3, pc}
   d5584:	0003023c 	.word	0x0003023c

000d5588 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d5588:	b508      	push	{r3, lr}
   d558a:	4b02      	ldr	r3, [pc, #8]	; (d5594 <HAL_USART_Peek_Data+0xc>)
   d558c:	681b      	ldr	r3, [r3, #0]
   d558e:	699b      	ldr	r3, [r3, #24]
   d5590:	9301      	str	r3, [sp, #4]
   d5592:	bd08      	pop	{r3, pc}
   d5594:	0003023c 	.word	0x0003023c

000d5598 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d5598:	b508      	push	{r3, lr}
   d559a:	4b02      	ldr	r3, [pc, #8]	; (d55a4 <HAL_USART_Flush_Data+0xc>)
   d559c:	681b      	ldr	r3, [r3, #0]
   d559e:	69db      	ldr	r3, [r3, #28]
   d55a0:	9301      	str	r3, [sp, #4]
   d55a2:	bd08      	pop	{r3, pc}
   d55a4:	0003023c 	.word	0x0003023c

000d55a8 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d55a8:	b508      	push	{r3, lr}
   d55aa:	4b02      	ldr	r3, [pc, #8]	; (d55b4 <HAL_USART_Available_Data_For_Write+0xc>)
   d55ac:	681b      	ldr	r3, [r3, #0]
   d55ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d55b0:	9301      	str	r3, [sp, #4]
   d55b2:	bd08      	pop	{r3, pc}
   d55b4:	0003023c 	.word	0x0003023c

000d55b8 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d55b8:	b508      	push	{r3, lr}
   d55ba:	4b02      	ldr	r3, [pc, #8]	; (d55c4 <HAL_USB_USART_Init+0xc>)
   d55bc:	681b      	ldr	r3, [r3, #0]
   d55be:	681b      	ldr	r3, [r3, #0]
   d55c0:	9301      	str	r3, [sp, #4]
   d55c2:	bd08      	pop	{r3, pc}
   d55c4:	0003024c 	.word	0x0003024c

000d55c8 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d55c8:	b508      	push	{r3, lr}
   d55ca:	4b02      	ldr	r3, [pc, #8]	; (d55d4 <HAL_USB_USART_Begin+0xc>)
   d55cc:	681b      	ldr	r3, [r3, #0]
   d55ce:	685b      	ldr	r3, [r3, #4]
   d55d0:	9301      	str	r3, [sp, #4]
   d55d2:	bd08      	pop	{r3, pc}
   d55d4:	0003024c 	.word	0x0003024c

000d55d8 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d55d8:	b508      	push	{r3, lr}
   d55da:	4b02      	ldr	r3, [pc, #8]	; (d55e4 <HAL_USB_USART_Available_Data+0xc>)
   d55dc:	681b      	ldr	r3, [r3, #0]
   d55de:	691b      	ldr	r3, [r3, #16]
   d55e0:	9301      	str	r3, [sp, #4]
   d55e2:	bd08      	pop	{r3, pc}
   d55e4:	0003024c 	.word	0x0003024c

000d55e8 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d55e8:	b508      	push	{r3, lr}
   d55ea:	4b02      	ldr	r3, [pc, #8]	; (d55f4 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d55ec:	681b      	ldr	r3, [r3, #0]
   d55ee:	695b      	ldr	r3, [r3, #20]
   d55f0:	9301      	str	r3, [sp, #4]
   d55f2:	bd08      	pop	{r3, pc}
   d55f4:	0003024c 	.word	0x0003024c

000d55f8 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d55f8:	b508      	push	{r3, lr}
   d55fa:	4b02      	ldr	r3, [pc, #8]	; (d5604 <HAL_USB_USART_Receive_Data+0xc>)
   d55fc:	681b      	ldr	r3, [r3, #0]
   d55fe:	699b      	ldr	r3, [r3, #24]
   d5600:	9301      	str	r3, [sp, #4]
   d5602:	bd08      	pop	{r3, pc}
   d5604:	0003024c 	.word	0x0003024c

000d5608 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5608:	b508      	push	{r3, lr}
   d560a:	4b02      	ldr	r3, [pc, #8]	; (d5614 <HAL_USB_USART_Send_Data+0xc>)
   d560c:	681b      	ldr	r3, [r3, #0]
   d560e:	69db      	ldr	r3, [r3, #28]
   d5610:	9301      	str	r3, [sp, #4]
   d5612:	bd08      	pop	{r3, pc}
   d5614:	0003024c 	.word	0x0003024c

000d5618 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d5618:	b508      	push	{r3, lr}
   d561a:	4b02      	ldr	r3, [pc, #8]	; (d5624 <HAL_USB_USART_Flush_Data+0xc>)
   d561c:	681b      	ldr	r3, [r3, #0]
   d561e:	6a1b      	ldr	r3, [r3, #32]
   d5620:	9301      	str	r3, [sp, #4]
   d5622:	bd08      	pop	{r3, pc}
   d5624:	0003024c 	.word	0x0003024c

000d5628 <log_message_v>:
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   d5628:	b508      	push	{r3, lr}
   d562a:	4b02      	ldr	r3, [pc, #8]	; (d5634 <log_message_v+0xc>)
   d562c:	681b      	ldr	r3, [r3, #0]
   d562e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d5630:	9301      	str	r3, [sp, #4]
   d5632:	bd08      	pop	{r3, pc}
   d5634:	00030260 	.word	0x00030260

000d5638 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d5638:	b508      	push	{r3, lr}
   d563a:	4b02      	ldr	r3, [pc, #8]	; (d5644 <system_mode+0xc>)
   d563c:	681b      	ldr	r3, [r3, #0]
   d563e:	681b      	ldr	r3, [r3, #0]
   d5640:	9301      	str	r3, [sp, #4]
   d5642:	bd08      	pop	{r3, pc}
   d5644:	00030220 	.word	0x00030220

000d5648 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d5648:	b508      	push	{r3, lr}
   d564a:	4b02      	ldr	r3, [pc, #8]	; (d5654 <set_system_mode+0xc>)
   d564c:	681b      	ldr	r3, [r3, #0]
   d564e:	685b      	ldr	r3, [r3, #4]
   d5650:	9301      	str	r3, [sp, #4]
   d5652:	bd08      	pop	{r3, pc}
   d5654:	00030220 	.word	0x00030220

000d5658 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d5658:	b508      	push	{r3, lr}
   d565a:	4b02      	ldr	r3, [pc, #8]	; (d5664 <system_delay_ms+0xc>)
   d565c:	681b      	ldr	r3, [r3, #0]
   d565e:	695b      	ldr	r3, [r3, #20]
   d5660:	9301      	str	r3, [sp, #4]
   d5662:	bd08      	pop	{r3, pc}
   d5664:	00030220 	.word	0x00030220

000d5668 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d5668:	b508      	push	{r3, lr}
   d566a:	4b02      	ldr	r3, [pc, #8]	; (d5674 <application_thread_current+0xc>)
   d566c:	681b      	ldr	r3, [r3, #0]
   d566e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d5670:	9301      	str	r3, [sp, #4]
   d5672:	bd08      	pop	{r3, pc}
   d5674:	00030220 	.word	0x00030220

000d5678 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d5678:	b508      	push	{r3, lr}
   d567a:	4b02      	ldr	r3, [pc, #8]	; (d5684 <application_thread_invoke+0xc>)
   d567c:	681b      	ldr	r3, [r3, #0]
   d567e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d5680:	9301      	str	r3, [sp, #4]
   d5682:	bd08      	pop	{r3, pc}
   d5684:	00030220 	.word	0x00030220

000d5688 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d5688:	b508      	push	{r3, lr}
   d568a:	4b02      	ldr	r3, [pc, #8]	; (d5694 <system_thread_get_state+0xc>)
   d568c:	681b      	ldr	r3, [r3, #0]
   d568e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d5690:	9301      	str	r3, [sp, #4]
   d5692:	bd08      	pop	{r3, pc}
   d5694:	00030220 	.word	0x00030220

000d5698 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d5698:	b508      	push	{r3, lr}
   d569a:	4b03      	ldr	r3, [pc, #12]	; (d56a8 <system_ctrl_set_app_request_handler+0x10>)
   d569c:	681b      	ldr	r3, [r3, #0]
   d569e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d56a2:	9301      	str	r3, [sp, #4]
   d56a4:	bd08      	pop	{r3, pc}
   d56a6:	0000      	.short	0x0000
   d56a8:	00030220 	.word	0x00030220

000d56ac <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d56ac:	b508      	push	{r3, lr}
   d56ae:	4b03      	ldr	r3, [pc, #12]	; (d56bc <system_ctrl_set_result+0x10>)
   d56b0:	681b      	ldr	r3, [r3, #0]
   d56b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d56b6:	9301      	str	r3, [sp, #4]
   d56b8:	bd08      	pop	{r3, pc}
   d56ba:	0000      	.short	0x0000
   d56bc:	00030220 	.word	0x00030220

000d56c0 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d56c0:	b508      	push	{r3, lr}
   d56c2:	4b02      	ldr	r3, [pc, #8]	; (d56cc <spark_process+0xc>)
   d56c4:	681b      	ldr	r3, [r3, #0]
   d56c6:	689b      	ldr	r3, [r3, #8]
   d56c8:	9301      	str	r3, [sp, #4]
   d56ca:	bd08      	pop	{r3, pc}
   d56cc:	00030244 	.word	0x00030244

000d56d0 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d56d0:	b508      	push	{r3, lr}
   d56d2:	4b02      	ldr	r3, [pc, #8]	; (d56dc <spark_cloud_flag_connected+0xc>)
   d56d4:	681b      	ldr	r3, [r3, #0]
   d56d6:	695b      	ldr	r3, [r3, #20]
   d56d8:	9301      	str	r3, [sp, #4]
   d56da:	bd08      	pop	{r3, pc}
   d56dc:	00030244 	.word	0x00030244

000d56e0 <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   d56e0:	b508      	push	{r3, lr}
   d56e2:	4b02      	ldr	r3, [pc, #8]	; (d56ec <spark_deviceID+0xc>)
   d56e4:	681b      	ldr	r3, [r3, #0]
   d56e6:	69db      	ldr	r3, [r3, #28]
   d56e8:	9301      	str	r3, [sp, #4]
   d56ea:	bd08      	pop	{r3, pc}
   d56ec:	00030244 	.word	0x00030244

000d56f0 <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d56f0:	b508      	push	{r3, lr}
   d56f2:	4b02      	ldr	r3, [pc, #8]	; (d56fc <spark_send_event+0xc>)
   d56f4:	681b      	ldr	r3, [r3, #0]
   d56f6:	6a1b      	ldr	r3, [r3, #32]
   d56f8:	9301      	str	r3, [sp, #4]
   d56fa:	bd08      	pop	{r3, pc}
   d56fc:	00030244 	.word	0x00030244

000d5700 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   d5700:	b508      	push	{r3, lr}
   d5702:	4b02      	ldr	r3, [pc, #8]	; (d570c <spark_subscribe+0xc>)
   d5704:	681b      	ldr	r3, [r3, #0]
   d5706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5708:	9301      	str	r3, [sp, #4]
   d570a:	bd08      	pop	{r3, pc}
   d570c:	00030244 	.word	0x00030244

000d5710 <spark_sync_time_pending>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d5710:	b508      	push	{r3, lr}
   d5712:	4b02      	ldr	r3, [pc, #8]	; (d571c <spark_sync_time_pending+0xc>)
   d5714:	681b      	ldr	r3, [r3, #0]
   d5716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5718:	9301      	str	r3, [sp, #4]
   d571a:	bd08      	pop	{r3, pc}
   d571c:	00030244 	.word	0x00030244

000d5720 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d5720:	b508      	push	{r3, lr}
   d5722:	4b02      	ldr	r3, [pc, #8]	; (d572c <spark_set_random_seed_from_cloud_handler+0xc>)
   d5724:	681b      	ldr	r3, [r3, #0]
   d5726:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5728:	9301      	str	r3, [sp, #4]
   d572a:	bd08      	pop	{r3, pc}
   d572c:	00030244 	.word	0x00030244

000d5730 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d5730:	b508      	push	{r3, lr}
   d5732:	4b02      	ldr	r3, [pc, #8]	; (d573c <network_connect+0xc>)
   d5734:	681b      	ldr	r3, [r3, #0]
   d5736:	685b      	ldr	r3, [r3, #4]
   d5738:	9301      	str	r3, [sp, #4]
   d573a:	bd08      	pop	{r3, pc}
   d573c:	00030240 	.word	0x00030240

000d5740 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d5740:	b508      	push	{r3, lr}
   d5742:	4b02      	ldr	r3, [pc, #8]	; (d574c <network_connecting+0xc>)
   d5744:	681b      	ldr	r3, [r3, #0]
   d5746:	689b      	ldr	r3, [r3, #8]
   d5748:	9301      	str	r3, [sp, #4]
   d574a:	bd08      	pop	{r3, pc}
   d574c:	00030240 	.word	0x00030240

000d5750 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d5750:	b508      	push	{r3, lr}
   d5752:	4b02      	ldr	r3, [pc, #8]	; (d575c <network_disconnect+0xc>)
   d5754:	681b      	ldr	r3, [r3, #0]
   d5756:	68db      	ldr	r3, [r3, #12]
   d5758:	9301      	str	r3, [sp, #4]
   d575a:	bd08      	pop	{r3, pc}
   d575c:	00030240 	.word	0x00030240

000d5760 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d5760:	b508      	push	{r3, lr}
   d5762:	4b02      	ldr	r3, [pc, #8]	; (d576c <network_ready+0xc>)
   d5764:	681b      	ldr	r3, [r3, #0]
   d5766:	691b      	ldr	r3, [r3, #16]
   d5768:	9301      	str	r3, [sp, #4]
   d576a:	bd08      	pop	{r3, pc}
   d576c:	00030240 	.word	0x00030240

000d5770 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d5770:	b508      	push	{r3, lr}
   d5772:	4b02      	ldr	r3, [pc, #8]	; (d577c <network_on+0xc>)
   d5774:	681b      	ldr	r3, [r3, #0]
   d5776:	695b      	ldr	r3, [r3, #20]
   d5778:	9301      	str	r3, [sp, #4]
   d577a:	bd08      	pop	{r3, pc}
   d577c:	00030240 	.word	0x00030240

000d5780 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d5780:	b508      	push	{r3, lr}
   d5782:	4b02      	ldr	r3, [pc, #8]	; (d578c <network_off+0xc>)
   d5784:	681b      	ldr	r3, [r3, #0]
   d5786:	699b      	ldr	r3, [r3, #24]
   d5788:	9301      	str	r3, [sp, #4]
   d578a:	bd08      	pop	{r3, pc}
   d578c:	00030240 	.word	0x00030240

000d5790 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d5790:	b508      	push	{r3, lr}
   d5792:	4b02      	ldr	r3, [pc, #8]	; (d579c <network_listen+0xc>)
   d5794:	681b      	ldr	r3, [r3, #0]
   d5796:	69db      	ldr	r3, [r3, #28]
   d5798:	9301      	str	r3, [sp, #4]
   d579a:	bd08      	pop	{r3, pc}
   d579c:	00030240 	.word	0x00030240

000d57a0 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d57a0:	b508      	push	{r3, lr}
   d57a2:	4b02      	ldr	r3, [pc, #8]	; (d57ac <network_listening+0xc>)
   d57a4:	681b      	ldr	r3, [r3, #0]
   d57a6:	6a1b      	ldr	r3, [r3, #32]
   d57a8:	9301      	str	r3, [sp, #4]
   d57aa:	bd08      	pop	{r3, pc}
   d57ac:	00030240 	.word	0x00030240

000d57b0 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d57b0:	b508      	push	{r3, lr}
   d57b2:	4b02      	ldr	r3, [pc, #8]	; (d57bc <network_set_listen_timeout+0xc>)
   d57b4:	681b      	ldr	r3, [r3, #0]
   d57b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d57b8:	9301      	str	r3, [sp, #4]
   d57ba:	bd08      	pop	{r3, pc}
   d57bc:	00030240 	.word	0x00030240

000d57c0 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d57c0:	b508      	push	{r3, lr}
   d57c2:	4b02      	ldr	r3, [pc, #8]	; (d57cc <network_get_listen_timeout+0xc>)
   d57c4:	681b      	ldr	r3, [r3, #0]
   d57c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d57c8:	9301      	str	r3, [sp, #4]
   d57ca:	bd08      	pop	{r3, pc}
   d57cc:	00030240 	.word	0x00030240

000d57d0 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d57d0:	b508      	push	{r3, lr}
   d57d2:	4b02      	ldr	r3, [pc, #8]	; (d57dc <malloc+0xc>)
   d57d4:	681b      	ldr	r3, [r3, #0]
   d57d6:	681b      	ldr	r3, [r3, #0]
   d57d8:	9301      	str	r3, [sp, #4]
   d57da:	bd08      	pop	{r3, pc}
   d57dc:	0003021c 	.word	0x0003021c

000d57e0 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d57e0:	b508      	push	{r3, lr}
   d57e2:	4b02      	ldr	r3, [pc, #8]	; (d57ec <free+0xc>)
   d57e4:	681b      	ldr	r3, [r3, #0]
   d57e6:	685b      	ldr	r3, [r3, #4]
   d57e8:	9301      	str	r3, [sp, #4]
   d57ea:	bd08      	pop	{r3, pc}
   d57ec:	0003021c 	.word	0x0003021c

000d57f0 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d57f0:	b508      	push	{r3, lr}
   d57f2:	4b02      	ldr	r3, [pc, #8]	; (d57fc <realloc+0xc>)
   d57f4:	681b      	ldr	r3, [r3, #0]
   d57f6:	689b      	ldr	r3, [r3, #8]
   d57f8:	9301      	str	r3, [sp, #4]
   d57fa:	bd08      	pop	{r3, pc}
   d57fc:	0003021c 	.word	0x0003021c

000d5800 <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   d5800:	b508      	push	{r3, lr}
   d5802:	4b02      	ldr	r3, [pc, #8]	; (d580c <sprintf+0xc>)
   d5804:	681b      	ldr	r3, [r3, #0]
   d5806:	68db      	ldr	r3, [r3, #12]
   d5808:	9301      	str	r3, [sp, #4]
   d580a:	bd08      	pop	{r3, pc}
   d580c:	0003021c 	.word	0x0003021c

000d5810 <sscanf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
   d5810:	b508      	push	{r3, lr}
   d5812:	4b02      	ldr	r3, [pc, #8]	; (d581c <sscanf+0xc>)
   d5814:	681b      	ldr	r3, [r3, #0]
   d5816:	695b      	ldr	r3, [r3, #20]
   d5818:	9301      	str	r3, [sp, #4]
   d581a:	bd08      	pop	{r3, pc}
   d581c:	0003021c 	.word	0x0003021c

000d5820 <siscanf>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
   d5820:	b508      	push	{r3, lr}
   d5822:	4b02      	ldr	r3, [pc, #8]	; (d582c <siscanf+0xc>)
   d5824:	681b      	ldr	r3, [r3, #0]
   d5826:	699b      	ldr	r3, [r3, #24]
   d5828:	9301      	str	r3, [sp, #4]
   d582a:	bd08      	pop	{r3, pc}
   d582c:	0003021c 	.word	0x0003021c

000d5830 <snprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d5830:	b508      	push	{r3, lr}
   d5832:	4b02      	ldr	r3, [pc, #8]	; (d583c <snprintf+0xc>)
   d5834:	681b      	ldr	r3, [r3, #0]
   d5836:	69db      	ldr	r3, [r3, #28]
   d5838:	9301      	str	r3, [sp, #4]
   d583a:	bd08      	pop	{r3, pc}
   d583c:	0003021c 	.word	0x0003021c

000d5840 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d5840:	b508      	push	{r3, lr}
   d5842:	4b02      	ldr	r3, [pc, #8]	; (d584c <vsnprintf+0xc>)
   d5844:	681b      	ldr	r3, [r3, #0]
   d5846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5848:	9301      	str	r3, [sp, #4]
   d584a:	bd08      	pop	{r3, pc}
   d584c:	0003021c 	.word	0x0003021c

000d5850 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d5850:	b508      	push	{r3, lr}
   d5852:	4b02      	ldr	r3, [pc, #8]	; (d585c <abort+0xc>)
   d5854:	681b      	ldr	r3, [r3, #0]
   d5856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5858:	9301      	str	r3, [sp, #4]
   d585a:	bd08      	pop	{r3, pc}
   d585c:	0003021c 	.word	0x0003021c

000d5860 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d5860:	b508      	push	{r3, lr}
   d5862:	4b02      	ldr	r3, [pc, #8]	; (d586c <_malloc_r+0xc>)
   d5864:	681b      	ldr	r3, [r3, #0]
   d5866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5868:	9301      	str	r3, [sp, #4]
   d586a:	bd08      	pop	{r3, pc}
   d586c:	0003021c 	.word	0x0003021c

000d5870 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d5870:	2100      	movs	r1, #0
   d5872:	f7ff bef1 	b.w	d5658 <system_delay_ms>

000d5876 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d5876:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5878:	6883      	ldr	r3, [r0, #8]
   d587a:	4604      	mov	r4, r0
   d587c:	b90b      	cbnz	r3, d5882 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d587e:	f001 fa8c 	bl	d6d9a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5882:	68c3      	ldr	r3, [r0, #12]
   d5884:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d5886:	68a3      	ldr	r3, [r4, #8]
   d5888:	b11b      	cbz	r3, d5892 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d588a:	2203      	movs	r2, #3
   d588c:	4621      	mov	r1, r4
   d588e:	4620      	mov	r0, r4
   d5890:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d5892:	4620      	mov	r0, r4
   d5894:	2110      	movs	r1, #16
}
   d5896:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d589a:	f001 ba62 	b.w	d6d62 <_ZdlPvj>

000d589e <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d589e:	b510      	push	{r4, lr}
   d58a0:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d58a2:	6800      	ldr	r0, [r0, #0]
   d58a4:	b108      	cbz	r0, d58aa <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d58a6:	f7ff fdbf 	bl	d5428 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d58aa:	4620      	mov	r0, r4
   d58ac:	bd10      	pop	{r4, pc}

000d58ae <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d58ae:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d58b0:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d58b2:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d58b4:	689b      	ldr	r3, [r3, #8]
   d58b6:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d58b8:	68a3      	ldr	r3, [r4, #8]
   d58ba:	3b01      	subs	r3, #1
   d58bc:	60a3      	str	r3, [r4, #8]
   d58be:	b92b      	cbnz	r3, d58cc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112+0x1e>
            _M_destroy();
   d58c0:	6823      	ldr	r3, [r4, #0]
   d58c2:	4620      	mov	r0, r4
   d58c4:	68db      	ldr	r3, [r3, #12]
        }
    }
   d58c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d58ca:	4718      	bx	r3
   d58cc:	bd10      	pop	{r4, pc}

000d58ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d58ce:	680b      	ldr	r3, [r1, #0]
   d58d0:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d58d2:	b113      	cbz	r3, d58da <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d58d4:	685a      	ldr	r2, [r3, #4]
   d58d6:	3201      	adds	r2, #1
   d58d8:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d58da:	4770      	bx	lr

000d58dc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d58dc:	b510      	push	{r4, lr}
   d58de:	4604      	mov	r4, r0
      {
	if (_M_pi != nullptr)
   d58e0:	6800      	ldr	r0, [r0, #0]
   d58e2:	b128      	cbz	r0, d58f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d58e4:	6843      	ldr	r3, [r0, #4]
   d58e6:	3b01      	subs	r3, #1
   d58e8:	6043      	str	r3, [r0, #4]
   d58ea:	b90b      	cbnz	r3, d58f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d58ec:	f7ff ffdf 	bl	d58ae <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d58f0:	4620      	mov	r0, r4
   d58f2:	bd10      	pop	{r4, pc}

000d58f4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d58f4:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d58f6:	4c06      	ldr	r4, [pc, #24]	; (d5910 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d58f8:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d58fa:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d58fc:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d58fe:	f7ff fd8b 	bl	d5418 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d5902:	4620      	mov	r0, r4
   d5904:	4a03      	ldr	r2, [pc, #12]	; (d5914 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d5906:	4904      	ldr	r1, [pc, #16]	; (d5918 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d5908:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d590c:	f001 ba24 	b.w	d6d58 <__aeabi_atexit>
   d5910:	2003e35c 	.word	0x2003e35c
   d5914:	2003e1f8 	.word	0x2003e1f8
   d5918:	000d589f 	.word	0x000d589f

000d591c <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d591c:	2200      	movs	r2, #0
   d591e:	4611      	mov	r1, r2
   d5920:	6840      	ldr	r0, [r0, #4]
   d5922:	f7ff bf1d 	b.w	d5760 <network_ready>

000d5926 <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5926:	2200      	movs	r2, #0
   d5928:	4611      	mov	r1, r2
   d592a:	6840      	ldr	r0, [r0, #4]
   d592c:	f7ff bf38 	b.w	d57a0 <network_listening>

000d5930 <_ZN5spark13CellularClass16getListenTimeoutEv>:
    }

    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5930:	2200      	movs	r2, #0
   d5932:	4611      	mov	r1, r2
   d5934:	6840      	ldr	r0, [r0, #4]
   d5936:	f7ff bf43 	b.w	d57c0 <network_get_listen_timeout>

000d593a <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    inline void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d593a:	2200      	movs	r2, #0
   d593c:	6840      	ldr	r0, [r0, #4]
   d593e:	f7ff bf37 	b.w	d57b0 <network_set_listen_timeout>

000d5942 <_ZN5spark13CellularClass6listenEb>:
        cellular_credentials_clear(nullptr);
    }
#endif // HAL_PLATFORM_MESH

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5942:	2200      	movs	r2, #0
   d5944:	f081 0101 	eor.w	r1, r1, #1
   d5948:	6840      	ldr	r0, [r0, #4]
   d594a:	f7ff bf21 	b.w	d5790 <network_listen>

000d594e <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d594e:	2300      	movs	r3, #0
   d5950:	461a      	mov	r2, r3
   d5952:	4619      	mov	r1, r3
   d5954:	6840      	ldr	r0, [r0, #4]
   d5956:	f7ff bf13 	b.w	d5780 <network_off>

000d595a <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d595a:	2300      	movs	r3, #0
   d595c:	461a      	mov	r2, r3
   d595e:	4619      	mov	r1, r3
   d5960:	6840      	ldr	r0, [r0, #4]
   d5962:	f7ff bf05 	b.w	d5770 <network_on>

000d5966 <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5966:	2200      	movs	r2, #0
   d5968:	4611      	mov	r1, r2
   d596a:	6840      	ldr	r0, [r0, #4]
   d596c:	f7ff bee8 	b.w	d5740 <network_connecting>

000d5970 <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5970:	2200      	movs	r2, #0
   d5972:	2102      	movs	r1, #2
   d5974:	6840      	ldr	r0, [r0, #4]
   d5976:	f7ff beeb 	b.w	d5750 <network_disconnect>

000d597a <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d597a:	2300      	movs	r3, #0
   d597c:	461a      	mov	r2, r3
   d597e:	6840      	ldr	r0, [r0, #4]
   d5980:	f7ff bed6 	b.w	d5730 <network_connect>

000d5984 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d5984:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d5986:	4c08      	ldr	r4, [pc, #32]	; (d59a8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
   d5988:	2528      	movs	r5, #40	; 0x28
   d598a:	462a      	mov	r2, r5
   d598c:	2100      	movs	r1, #0
   d598e:	4620      	mov	r0, r4
   d5990:	f002 f955 	bl	d7c3e <memset>
        cid = -1;
   d5994:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d5998:	6063      	str	r3, [r4, #4]
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d599a:	4b04      	ldr	r3, [pc, #16]	; (d59ac <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        size = sizeof(*this);
   d599c:	8025      	strh	r5, [r4, #0]
   d599e:	2204      	movs	r2, #4
   d59a0:	605a      	str	r2, [r3, #4]

class CellularClass : public NetworkClass
{
public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d59a2:	4a03      	ldr	r2, [pc, #12]	; (d59b0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d59a4:	601a      	str	r2, [r3, #0]
   d59a6:	bd38      	pop	{r3, r4, r5, pc}
   d59a8:	2003e368 	.word	0x2003e368
   d59ac:	2003e360 	.word	0x2003e360
   d59b0:	000da8d8 	.word	0x000da8d8

000d59b4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d59b4:	4770      	bx	lr

000d59b6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d59b6:	2000      	movs	r0, #0
   d59b8:	4770      	bx	lr

000d59ba <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d59ba:	b510      	push	{r4, lr}
   d59bc:	2110      	movs	r1, #16
   d59be:	4604      	mov	r4, r0
   d59c0:	f001 f9cf 	bl	d6d62 <_ZdlPvj>
   d59c4:	4620      	mov	r0, r4
   d59c6:	bd10      	pop	{r4, pc}

000d59c8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d59c8:	b508      	push	{r3, lr}
      { delete this; }
   d59ca:	b108      	cbz	r0, d59d0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d59cc:	f7ff fff5 	bl	d59ba <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d59d0:	bd08      	pop	{r3, pc}

000d59d2 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d59d2:	2200      	movs	r2, #0
   d59d4:	6002      	str	r2, [r0, #0]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d59d6:	b510      	push	{r4, lr}

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d59d8:	f64f 729c 	movw	r2, #65436	; 0xff9c
   d59dc:	8082      	strh	r2, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d59de:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
   d59e2:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d59e4:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d59e6:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d59e8:	680c      	ldr	r4, [r1, #0]
   d59ea:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d59ec:	600a      	str	r2, [r1, #0]
}

inline particle::Error::Error(Error&& error) :
        Error() {
    swap(*this, error);
}
   d59ee:	bd10      	pop	{r4, pc}

000d59f0 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d59f0:	b510      	push	{r4, lr}
   d59f2:	4604      	mov	r4, r0
    free((void*)msg_);
   d59f4:	6800      	ldr	r0, [r0, #0]
   d59f6:	f7ff fef3 	bl	d57e0 <free>
}
   d59fa:	4620      	mov	r0, r4
   d59fc:	bd10      	pop	{r4, pc}

000d59fe <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d59fe:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d5a00:	68c4      	ldr	r4, [r0, #12]
   d5a02:	b1f4      	cbz	r4, d5a42 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d5a04:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d5a06:	2b02      	cmp	r3, #2
   d5a08:	d103      	bne.n	d5a12 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d5a0a:	f104 000c 	add.w	r0, r4, #12
   d5a0e:	f7ff ffef 	bl	d59f0 <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d5a12:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d5a14:	b135      	cbz	r5, d5a24 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5a16:	4628      	mov	r0, r5
   d5a18:	f7ff fa28 	bl	d4e6c <_ZNSt14_Function_baseD1Ev>
   d5a1c:	2110      	movs	r1, #16
   d5a1e:	4628      	mov	r0, r5
   d5a20:	f001 f99f 	bl	d6d62 <_ZdlPvj>
   d5a24:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d5a26:	b135      	cbz	r5, d5a36 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d5a28:	4628      	mov	r0, r5
   d5a2a:	f7ff fa1f 	bl	d4e6c <_ZNSt14_Function_baseD1Ev>
   d5a2e:	2110      	movs	r1, #16
   d5a30:	4628      	mov	r0, r5
   d5a32:	f001 f996 	bl	d6d62 <_ZdlPvj>
   d5a36:	4620      	mov	r0, r4
   d5a38:	2114      	movs	r1, #20
   d5a3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d5a3e:	f001 b990 	b.w	d6d62 <_ZdlPvj>
   d5a42:	bd38      	pop	{r3, r4, r5, pc}

000d5a44 <_ZN10CloudClass25call_wiring_event_handlerEPKvPKcS3_>:
    user_std_function_int_str_t* fn = (user_std_function_int_str_t*)(data);
    return (*fn)(String(param));
}

void CloudClass::call_wiring_event_handler(const void* handler_data, const char *event_name, const char *data)
{
   d5a44:	b507      	push	{r0, r1, r2, lr}
   d5a46:	e88d 0006 	stmia.w	sp, {r1, r2}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5a4a:	6882      	ldr	r2, [r0, #8]
   d5a4c:	b90a      	cbnz	r2, d5a52 <_ZN10CloudClass25call_wiring_event_handlerEPKvPKcS3_+0xe>
	__throw_bad_function_call();
   d5a4e:	f001 f9a4 	bl	d6d9a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5a52:	68c3      	ldr	r3, [r0, #12]
   d5a54:	aa01      	add	r2, sp, #4
   d5a56:	4669      	mov	r1, sp
   d5a58:	4798      	blx	r3
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}
   d5a5a:	b003      	add	sp, #12
   d5a5c:	f85d fb04 	ldr.w	pc, [sp], #4

000d5a60 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d5a60:	b513      	push	{r0, r1, r4, lr}
   d5a62:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d5a64:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d5a68:	2300      	movs	r3, #0
   d5a6a:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d5a6c:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d5a6e:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d5a70:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5a72:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d5a74:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d5a76:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5a78:	f7ff ff30 	bl	d58dc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5a7c:	4620      	mov	r0, r4
   d5a7e:	b002      	add	sp, #8
   d5a80:	bd10      	pop	{r4, pc}

000d5a82 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d5a82:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5a84:	460c      	mov	r4, r1
   d5a86:	ad02      	add	r5, sp, #8
   d5a88:	f854 3b04 	ldr.w	r3, [r4], #4
   d5a8c:	f845 3d08 	str.w	r3, [r5, #-8]!
   d5a90:	4606      	mov	r6, r0
   d5a92:	460f      	mov	r7, r1
   d5a94:	a801      	add	r0, sp, #4
   d5a96:	4621      	mov	r1, r4
   d5a98:	f7ff ff19 	bl	d58ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d5a9c:	4629      	mov	r1, r5
   d5a9e:	4630      	mov	r0, r6
   d5aa0:	f7ff ffde 	bl	d5a60 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5aa4:	a801      	add	r0, sp, #4
   d5aa6:	f7ff ff19 	bl	d58dc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5aaa:	4620      	mov	r0, r4
   d5aac:	f7ff ff16 	bl	d58dc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d5ab0:	4638      	mov	r0, r7
   d5ab2:	2108      	movs	r1, #8
   d5ab4:	f001 f955 	bl	d6d62 <_ZdlPvj>
        return p;
    }
   d5ab8:	4630      	mov	r0, r6
   d5aba:	b003      	add	sp, #12
   d5abc:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5abe <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d5abe:	b513      	push	{r0, r1, r4, lr}
   d5ac0:	460b      	mov	r3, r1
   d5ac2:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5ac4:	c803      	ldmia	r0, {r0, r1}
   d5ac6:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d5aca:	e893 0003 	ldmia.w	r3, {r0, r1}
   d5ace:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d5ad2:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d5ad6:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d5ada:	b002      	add	sp, #8
   d5adc:	bd10      	pop	{r4, pc}
	...

000d5ae0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d5ae0:	b538      	push	{r3, r4, r5, lr}
   d5ae2:	2300      	movs	r3, #0
   d5ae4:	4604      	mov	r4, r0
   d5ae6:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5ae8:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d5aea:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5aec:	f7fe fad5 	bl	d409a <_Znwj>
   d5af0:	b128      	cbz	r0, d5afe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d5af2:	2301      	movs	r3, #1
   d5af4:	6043      	str	r3, [r0, #4]
   d5af6:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d5af8:	4b02      	ldr	r3, [pc, #8]	; (d5b04 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d5afa:	6003      	str	r3, [r0, #0]
   d5afc:	60c5      	str	r5, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5afe:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
   d5b00:	4620      	mov	r0, r4
   d5b02:	bd38      	pop	{r3, r4, r5, pc}
   d5b04:	000da90c 	.word	0x000da90c

000d5b08 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5b08:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d5b0a:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5b0c:	b90a      	cbnz	r2, d5b12 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d5b0e:	f001 f944 	bl	d6d9a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5b12:	68c3      	ldr	r3, [r0, #12]
    }
   d5b14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5b18:	4718      	bx	r3

000d5b1a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d5b1a:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d5b1c:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d5b1e:	f100 0110 	add.w	r1, r0, #16
   d5b22:	f7ff fff1 	bl	d5b08 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d5b26:	bd08      	pop	{r3, pc}

000d5b28 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5b28:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d5b2a:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5b2c:	b90a      	cbnz	r2, d5b32 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d5b2e:	f001 f934 	bl	d6d9a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5b32:	68c3      	ldr	r3, [r0, #12]
    }
   d5b34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5b38:	4718      	bx	r3

000d5b3a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d5b3a:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d5b3c:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d5b3e:	f100 0110 	add.w	r1, r0, #16
   d5b42:	f7ff fff1 	bl	d5b28 <_ZNKSt8functionIFvRKbEEclES1_>
   d5b46:	bd08      	pop	{r3, pc}

000d5b48 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d5b48:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5b4a:	2300      	movs	r3, #0
   d5b4c:	6083      	str	r3, [r0, #8]
   d5b4e:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d5b50:	4604      	mov	r4, r0
   d5b52:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d5b54:	b12b      	cbz	r3, d5b62 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d5b56:	2202      	movs	r2, #2
   d5b58:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d5b5a:	68eb      	ldr	r3, [r5, #12]
   d5b5c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d5b5e:	68ab      	ldr	r3, [r5, #8]
   d5b60:	60a3      	str	r3, [r4, #8]
	}
    }
   d5b62:	4620      	mov	r0, r4
   d5b64:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5b68 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d5b68:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5b6a:	b089      	sub	sp, #36	; 0x24
   d5b6c:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d5b6e:	4668      	mov	r0, sp
   d5b70:	f7ff ff2f 	bl	d59d2 <_ZN8particle5ErrorC1EOS0_>
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d5b74:	2300      	movs	r3, #0
   d5b76:	f88d 3008 	strb.w	r3, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d5b7a:	f04f 0202 	mov.w	r2, #2
   d5b7e:	e8d4 3f4f 	ldrexb	r3, [r4]
   d5b82:	2b00      	cmp	r3, #0
   d5b84:	d103      	bne.n	d5b8e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
   d5b86:	e8c4 2f41 	strexb	r1, r2, [r4]
   d5b8a:	2900      	cmp	r1, #0
   d5b8c:	d1f7      	bne.n	d5b7e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
   d5b8e:	d002      	beq.n	d5b96 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
   d5b90:	f88d 3008 	strb.w	r3, [sp, #8]
   d5b94:	e063      	b.n	d5c5e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d5b96:	f114 050c 	adds.w	r5, r4, #12
   d5b9a:	d003      	beq.n	d5ba4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
   d5b9c:	4669      	mov	r1, sp
   d5b9e:	4628      	mov	r0, r5
   d5ba0:	f7ff ff17 	bl	d59d2 <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d5ba4:	f3bf 8f5f 	dmb	sy
   d5ba8:	2301      	movs	r3, #1
   d5baa:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d5bac:	2000      	movs	r0, #0
   d5bae:	f104 0308 	add.w	r3, r4, #8
   d5bb2:	f3bf 8f5f 	dmb	sy
   d5bb6:	e853 6f00 	ldrex	r6, [r3]
   d5bba:	e843 0200 	strex	r2, r0, [r3]
   d5bbe:	2a00      	cmp	r2, #0
   d5bc0:	d1f9      	bne.n	d5bb6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
   d5bc2:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d5bc6:	2e00      	cmp	r6, #0
   d5bc8:	d049      	beq.n	d5c5e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d5bca:	f7ff fd4d 	bl	d5668 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d5bce:	b120      	cbz	r0, d5bda <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d5bd0:	4629      	mov	r1, r5
   d5bd2:	4630      	mov	r0, r6
   d5bd4:	f7ff ff98 	bl	d5b08 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d5bd8:	e03a      	b.n	d5c50 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d5bda:	4631      	mov	r1, r6
   d5bdc:	a802      	add	r0, sp, #8
   d5bde:	f7ff ffb3 	bl	d5b48 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d5be2:	68e0      	ldr	r0, [r4, #12]
   d5be4:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d5be8:	b108      	cbz	r0, d5bee <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
   d5bea:	f002 f879 	bl	d7ce0 <strdup>
   d5bee:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d5bf0:	2010      	movs	r0, #16
   d5bf2:	f8ad 501c 	strh.w	r5, [sp, #28]
   d5bf6:	f7fe fa50 	bl	d409a <_Znwj>
   d5bfa:	4605      	mov	r5, r0
   d5bfc:	b1e8      	cbz	r0, d5c3a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5bfe:	2700      	movs	r7, #0
   d5c00:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5c02:	2018      	movs	r0, #24
   d5c04:	f7fe fa49 	bl	d409a <_Znwj>
   d5c08:	4604      	mov	r4, r0
   d5c0a:	b188      	cbz	r0, d5c30 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d5c0c:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5c0e:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d5c10:	a802      	add	r0, sp, #8
   d5c12:	f7ff ff54 	bl	d5abe <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5c16:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d5c18:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d5c1a:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5c1c:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d5c1e:	9204      	str	r2, [sp, #16]
   d5c20:	a906      	add	r1, sp, #24
   d5c22:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d5c24:	60e3      	str	r3, [r4, #12]
   d5c26:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5c2a:	9205      	str	r2, [sp, #20]
   d5c2c:	f7ff fed1 	bl	d59d2 <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d5c30:	4b0d      	ldr	r3, [pc, #52]	; (d5c68 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
   d5c32:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d5c34:	4b0d      	ldr	r3, [pc, #52]	; (d5c6c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5c36:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d5c38:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
   d5c3a:	a806      	add	r0, sp, #24
   d5c3c:	f7ff fed8 	bl	d59f0 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5c40:	a802      	add	r0, sp, #8
   d5c42:	f7ff f913 	bl	d4e6c <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d5c46:	2200      	movs	r2, #0
   d5c48:	4629      	mov	r1, r5
   d5c4a:	4809      	ldr	r0, [pc, #36]	; (d5c70 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
   d5c4c:	f7ff fd14 	bl	d5678 <application_thread_invoke>
   d5c50:	4630      	mov	r0, r6
   d5c52:	f7ff f90b 	bl	d4e6c <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d5c56:	2110      	movs	r1, #16
   d5c58:	4630      	mov	r0, r6
   d5c5a:	f001 f882 	bl	d6d62 <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
   d5c5e:	4668      	mov	r0, sp
   d5c60:	f7ff fec6 	bl	d59f0 <_ZN8particle5ErrorD1Ev>
    }
   d5c64:	b009      	add	sp, #36	; 0x24
   d5c66:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5c68:	000d5b1b 	.word	0x000d5b1b
   d5c6c:	000d5d91 	.word	0x000d5d91
   d5c70:	000d5877 	.word	0x000d5877

000d5c74 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d5c74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5c78:	b08b      	sub	sp, #44	; 0x2c
   d5c7a:	4606      	mov	r6, r0
   d5c7c:	460f      	mov	r7, r1
   d5c7e:	4690      	mov	r8, r2
   d5c80:	4699      	mov	r9, r3
   d5c82:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5c86:	f7ff fd23 	bl	d56d0 <spark_cloud_flag_connected>
   d5c8a:	ad07      	add	r5, sp, #28
    if (!connected()) {
   d5c8c:	4683      	mov	fp, r0
   d5c8e:	bb30      	cbnz	r0, d5cde <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d5c90:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d5c94:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d5c96:	a905      	add	r1, sp, #20
   d5c98:	4628      	mov	r0, r5
   d5c9a:	f8ad 3018 	strh.w	r3, [sp, #24]
   d5c9e:	f7ff fe98 	bl	d59d2 <_ZN8particle5ErrorC1EOS0_>
   d5ca2:	2014      	movs	r0, #20
   d5ca4:	f7fe f9f9 	bl	d409a <_Znwj>
   d5ca8:	4604      	mov	r4, r0
   d5caa:	b158      	cbz	r0, d5cc4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d5cac:	2302      	movs	r3, #2
   d5cae:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5cb0:	2301      	movs	r3, #1
   d5cb2:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d5cb4:	f8c0 b004 	str.w	fp, [r0, #4]
   d5cb8:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
   d5cbc:	4629      	mov	r1, r5
   d5cbe:	300c      	adds	r0, #12
   d5cc0:	f7ff fe87 	bl	d59d2 <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d5cc4:	4630      	mov	r0, r6
   d5cc6:	4621      	mov	r1, r4
   d5cc8:	f840 4b04 	str.w	r4, [r0], #4
   d5ccc:	f7ff ff08 	bl	d5ae0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d5cd0:	4628      	mov	r0, r5
   d5cd2:	f7ff fe8d 	bl	d59f0 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d5cd6:	a805      	add	r0, sp, #20
   d5cd8:	f7ff fe8a 	bl	d59f0 <_ZN8particle5ErrorD1Ev>
   d5cdc:	e052      	b.n	d5d84 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d5cde:	2400      	movs	r4, #0
   d5ce0:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d5ce2:	2014      	movs	r0, #20
   d5ce4:	606c      	str	r4, [r5, #4]
   d5ce6:	60ac      	str	r4, [r5, #8]
   d5ce8:	9307      	str	r3, [sp, #28]
   d5cea:	f7fe f9d6 	bl	d409a <_Znwj>
   d5cee:	4601      	mov	r1, r0
   d5cf0:	b118      	cbz	r0, d5cfa <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
   d5cf2:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5cf4:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d5cf6:	6044      	str	r4, [r0, #4]
   d5cf8:	6084      	str	r4, [r0, #8]
   d5cfa:	a804      	add	r0, sp, #16
   d5cfc:	9103      	str	r1, [sp, #12]
   d5cfe:	f7ff feef 	bl	d5ae0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d5d02:	4b22      	ldr	r3, [pc, #136]	; (d5d8c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
   d5d04:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d5d06:	2008      	movs	r0, #8
   d5d08:	f7fe f9c7 	bl	d409a <_Znwj>
   d5d0c:	4604      	mov	r4, r0
   d5d0e:	b128      	cbz	r0, d5d1c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5d10:	9b03      	ldr	r3, [sp, #12]
   d5d12:	f840 3b04 	str.w	r3, [r0], #4
   d5d16:	a904      	add	r1, sp, #16
   d5d18:	f7ff fdd9 	bl	d58ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d5d1c:	9500      	str	r5, [sp, #0]
   d5d1e:	fa5f f38a 	uxtb.w	r3, sl
   d5d22:	464a      	mov	r2, r9
   d5d24:	4641      	mov	r1, r8
   d5d26:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d5d28:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d5d2a:	f7ff fce1 	bl	d56f0 <spark_send_event>
   d5d2e:	b920      	cbnz	r0, d5d3a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d5d30:	9b03      	ldr	r3, [sp, #12]
   d5d32:	785b      	ldrb	r3, [r3, #1]
   d5d34:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d5d38:	b183      	cbz	r3, d5d5c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   d5d3a:	9b03      	ldr	r3, [sp, #12]
   d5d3c:	9305      	str	r3, [sp, #20]
   d5d3e:	a904      	add	r1, sp, #16
   d5d40:	a806      	add	r0, sp, #24
   d5d42:	f7ff fdc4 	bl	d58ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d5d46:	a905      	add	r1, sp, #20
   d5d48:	4630      	mov	r0, r6
   d5d4a:	f7ff fe89 	bl	d5a60 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5d4e:	a806      	add	r0, sp, #24
   d5d50:	f7ff fdc4 	bl	d58dc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5d54:	a804      	add	r0, sp, #16
   d5d56:	f7ff fdc1 	bl	d58dc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5d5a:	e013      	b.n	d5d84 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
   d5d5c:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d5d60:	a905      	add	r1, sp, #20
   d5d62:	a803      	add	r0, sp, #12
   d5d64:	9205      	str	r2, [sp, #20]
   d5d66:	f8ad 3018 	strh.w	r3, [sp, #24]
   d5d6a:	f7ff fefd 	bl	d5b68 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d5d6e:	a805      	add	r0, sp, #20
   d5d70:	f7ff fe3e 	bl	d59f0 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d5d74:	a805      	add	r0, sp, #20
   d5d76:	9909      	ldr	r1, [sp, #36]	; 0x24
   d5d78:	f7ff fe83 	bl	d5a82 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
   d5d7c:	a806      	add	r0, sp, #24
   d5d7e:	f7ff fdad 	bl	d58dc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5d82:	e7da      	b.n	d5d3a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
    }

    return p.future();
}
   d5d84:	4630      	mov	r0, r6
   d5d86:	b00b      	add	sp, #44	; 0x2c
   d5d88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5d8c:	000d5f01 	.word	0x000d5f01

000d5d90 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d5d90:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d5d92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5d94:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d5d96:	d006      	beq.n	d5da6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d5d98:	2a03      	cmp	r2, #3
   d5d9a:	d017      	beq.n	d5dcc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d5d9c:	2a01      	cmp	r2, #1
   d5d9e:	d122      	bne.n	d5de6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d5da0:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d5da2:	6003      	str	r3, [r0, #0]
	      break;
   d5da4:	e01f      	b.n	d5de6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d5da6:	2018      	movs	r0, #24
   d5da8:	680e      	ldr	r6, [r1, #0]
   d5daa:	f7fe f976 	bl	d409a <_Znwj>
   d5dae:	4605      	mov	r5, r0
   d5db0:	b150      	cbz	r0, d5dc8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d5db2:	4631      	mov	r1, r6
   d5db4:	f7ff fec8 	bl	d5b48 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d5db8:	6930      	ldr	r0, [r6, #16]
   d5dba:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d5dbe:	b108      	cbz	r0, d5dc4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d5dc0:	f001 ff8e 	bl	d7ce0 <strdup>
   d5dc4:	6128      	str	r0, [r5, #16]
   d5dc6:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d5dc8:	6025      	str	r5, [r4, #0]
   d5dca:	e00c      	b.n	d5de6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d5dcc:	6804      	ldr	r4, [r0, #0]
   d5dce:	b154      	cbz	r4, d5de6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
   d5dd0:	f104 0010 	add.w	r0, r4, #16
   d5dd4:	f7ff fe0c 	bl	d59f0 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5dd8:	4620      	mov	r0, r4
   d5dda:	f7ff f847 	bl	d4e6c <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d5dde:	2118      	movs	r1, #24
   d5de0:	4620      	mov	r0, r4
   d5de2:	f000 ffbe 	bl	d6d62 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d5de6:	2000      	movs	r0, #0
   d5de8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5dea <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d5dea:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5dec:	2300      	movs	r3, #0
   d5dee:	6083      	str	r3, [r0, #8]
   d5df0:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d5df2:	4604      	mov	r4, r0
   d5df4:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d5df6:	b12b      	cbz	r3, d5e04 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d5df8:	2202      	movs	r2, #2
   d5dfa:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d5dfc:	68eb      	ldr	r3, [r5, #12]
   d5dfe:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d5e00:	68ab      	ldr	r3, [r5, #8]
   d5e02:	60a3      	str	r3, [r4, #8]
	}
    }
   d5e04:	4620      	mov	r0, r4
   d5e06:	bd38      	pop	{r3, r4, r5, pc}

000d5e08 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d5e08:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d5e0a:	b570      	push	{r4, r5, r6, lr}
   d5e0c:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d5e0e:	d006      	beq.n	d5e1e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d5e10:	2a03      	cmp	r2, #3
   d5e12:	d011      	beq.n	d5e38 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d5e14:	2a01      	cmp	r2, #1
   d5e16:	d118      	bne.n	d5e4a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d5e18:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d5e1a:	6003      	str	r3, [r0, #0]
	      break;
   d5e1c:	e015      	b.n	d5e4a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d5e1e:	2014      	movs	r0, #20
   d5e20:	680e      	ldr	r6, [r1, #0]
   d5e22:	f7fe f93a 	bl	d409a <_Znwj>
   d5e26:	4605      	mov	r5, r0
   d5e28:	b120      	cbz	r0, d5e34 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d5e2a:	4631      	mov	r1, r6
   d5e2c:	f7ff ffdd 	bl	d5dea <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d5e30:	7c33      	ldrb	r3, [r6, #16]
   d5e32:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d5e34:	6025      	str	r5, [r4, #0]
   d5e36:	e008      	b.n	d5e4a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d5e38:	6804      	ldr	r4, [r0, #0]
   d5e3a:	b134      	cbz	r4, d5e4a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5e3c:	4620      	mov	r0, r4
   d5e3e:	f7ff f815 	bl	d4e6c <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d5e42:	2114      	movs	r1, #20
   d5e44:	4620      	mov	r0, r4
   d5e46:	f000 ff8c 	bl	d6d62 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d5e4a:	2000      	movs	r0, #0
   d5e4c:	bd70      	pop	{r4, r5, r6, pc}
	...

000d5e50 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d5e50:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d5e52:	2300      	movs	r3, #0
   d5e54:	b087      	sub	sp, #28
   d5e56:	460c      	mov	r4, r1
   d5e58:	f3bf 8f5f 	dmb	sy
   d5e5c:	e850 6f00 	ldrex	r6, [r0]
   d5e60:	e840 3200 	strex	r2, r3, [r0]
   d5e64:	2a00      	cmp	r2, #0
   d5e66:	d1f9      	bne.n	d5e5c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d5e68:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d5e6c:	2e00      	cmp	r6, #0
   d5e6e:	d03f      	beq.n	d5ef0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d5e70:	4618      	mov	r0, r3
   d5e72:	f7ff fbf9 	bl	d5668 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d5e76:	4607      	mov	r7, r0
   d5e78:	b120      	cbz	r0, d5e84 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d5e7a:	4621      	mov	r1, r4
   d5e7c:	4630      	mov	r0, r6
   d5e7e:	f7ff fe53 	bl	d5b28 <_ZNKSt8functionIFvRKbEEclES1_>
   d5e82:	e02e      	b.n	d5ee2 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d5e84:	4631      	mov	r1, r6
   d5e86:	a801      	add	r0, sp, #4
   d5e88:	f7ff ffaf 	bl	d5dea <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d5e8c:	7823      	ldrb	r3, [r4, #0]
   d5e8e:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d5e92:	2010      	movs	r0, #16
   d5e94:	f7fe f901 	bl	d409a <_Znwj>
   d5e98:	4605      	mov	r5, r0
   d5e9a:	b1d0      	cbz	r0, d5ed2 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5e9c:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5e9e:	2014      	movs	r0, #20
   d5ea0:	f7fe f8fb 	bl	d409a <_Znwj>
   d5ea4:	4604      	mov	r4, r0
   d5ea6:	b178      	cbz	r0, d5ec8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5ea8:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d5eaa:	4601      	mov	r1, r0
   d5eac:	a801      	add	r0, sp, #4
   d5eae:	f7ff fe06 	bl	d5abe <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5eb2:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d5eb4:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d5eb6:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5eb8:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d5eba:	9203      	str	r2, [sp, #12]
   d5ebc:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d5ebe:	60e3      	str	r3, [r4, #12]
   d5ec0:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5ec4:	9204      	str	r2, [sp, #16]
   d5ec6:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d5ec8:	4b0a      	ldr	r3, [pc, #40]	; (d5ef4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d5eca:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d5ecc:	4b0a      	ldr	r3, [pc, #40]	; (d5ef8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5ece:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d5ed0:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5ed2:	a801      	add	r0, sp, #4
   d5ed4:	f7fe ffca 	bl	d4e6c <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d5ed8:	2200      	movs	r2, #0
   d5eda:	4629      	mov	r1, r5
   d5edc:	4807      	ldr	r0, [pc, #28]	; (d5efc <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d5ede:	f7ff fbcb 	bl	d5678 <application_thread_invoke>
   d5ee2:	4630      	mov	r0, r6
   d5ee4:	f7fe ffc2 	bl	d4e6c <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d5ee8:	2110      	movs	r1, #16
   d5eea:	4630      	mov	r0, r6
   d5eec:	f000 ff39 	bl	d6d62 <_ZdlPvj>
        }
    }
   d5ef0:	b007      	add	sp, #28
   d5ef2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5ef4:	000d5b3b 	.word	0x000d5b3b
   d5ef8:	000d5e09 	.word	0x000d5e09
   d5efc:	000d5877 	.word	0x000d5877

000d5f00 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:

namespace {

using namespace particle;

void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d5f00:	b530      	push	{r4, r5, lr}
   d5f02:	b085      	sub	sp, #20
   d5f04:	4604      	mov	r4, r0
   d5f06:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d5f08:	4668      	mov	r0, sp
   d5f0a:	4611      	mov	r1, r2
   d5f0c:	f7ff fdb9 	bl	d5a82 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d5f10:	b17c      	cbz	r4, d5f32 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d5f12:	b224      	sxth	r4, r4
   d5f14:	4628      	mov	r0, r5
   d5f16:	b10d      	cbz	r5, d5f1c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d5f18:	f001 fee2 	bl	d7ce0 <strdup>
   d5f1c:	9002      	str	r0, [sp, #8]
   d5f1e:	a902      	add	r1, sp, #8
   d5f20:	4668      	mov	r0, sp
   d5f22:	f8ad 400c 	strh.w	r4, [sp, #12]
   d5f26:	f7ff fe1f 	bl	d5b68 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d5f2a:	a802      	add	r0, sp, #8
   d5f2c:	f7ff fd60 	bl	d59f0 <_ZN8particle5ErrorD1Ev>
   d5f30:	e01d      	b.n	d5f6e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d5f32:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d5f34:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d5f38:	f04f 0201 	mov.w	r2, #1
   d5f3c:	e8d0 3f4f 	ldrexb	r3, [r0]
   d5f40:	42a3      	cmp	r3, r4
   d5f42:	d103      	bne.n	d5f4c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d5f44:	e8c0 2f41 	strexb	r1, r2, [r0]
   d5f48:	2900      	cmp	r1, #0
   d5f4a:	d1f7      	bne.n	d5f3c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d5f4c:	d002      	beq.n	d5f54 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d5f4e:	f88d 3008 	strb.w	r3, [sp, #8]
   d5f52:	e00c      	b.n	d5f6e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d5f54:	f110 010c 	adds.w	r1, r0, #12
   d5f58:	f04f 0301 	mov.w	r3, #1
   d5f5c:	bf18      	it	ne
   d5f5e:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d5f60:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d5f64:	3004      	adds	r0, #4
   d5f66:	f800 3c03 	strb.w	r3, [r0, #-3]
   d5f6a:	f7ff ff71 	bl	d5e50 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d5f6e:	a801      	add	r0, sp, #4
   d5f70:	f7ff fcb4 	bl	d58dc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d5f74:	b005      	add	sp, #20
   d5f76:	bd30      	pop	{r4, r5, pc}

000d5f78 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5f78:	2200      	movs	r2, #0
   d5f7a:	4611      	mov	r1, r2
   d5f7c:	6840      	ldr	r0, [r0, #4]
   d5f7e:	f7ff bc0f 	b.w	d57a0 <network_listening>

000d5f82 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5f82:	2200      	movs	r2, #0
   d5f84:	4611      	mov	r1, r2
   d5f86:	6840      	ldr	r0, [r0, #4]
   d5f88:	f7ff bc1a 	b.w	d57c0 <network_get_listen_timeout>

000d5f8c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5f8c:	2200      	movs	r2, #0
   d5f8e:	6840      	ldr	r0, [r0, #4]
   d5f90:	f7ff bc0e 	b.w	d57b0 <network_set_listen_timeout>

000d5f94 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5f94:	2200      	movs	r2, #0
   d5f96:	f081 0101 	eor.w	r1, r1, #1
   d5f9a:	6840      	ldr	r0, [r0, #4]
   d5f9c:	f7ff bbf8 	b.w	d5790 <network_listen>

000d5fa0 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d5fa0:	2300      	movs	r3, #0
   d5fa2:	461a      	mov	r2, r3
   d5fa4:	4619      	mov	r1, r3
   d5fa6:	6840      	ldr	r0, [r0, #4]
   d5fa8:	f7ff bbea 	b.w	d5780 <network_off>

000d5fac <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5fac:	2300      	movs	r3, #0
   d5fae:	461a      	mov	r2, r3
   d5fb0:	4619      	mov	r1, r3
   d5fb2:	6840      	ldr	r0, [r0, #4]
   d5fb4:	f7ff bbdc 	b.w	d5770 <network_on>

000d5fb8 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5fb8:	2200      	movs	r2, #0
   d5fba:	4611      	mov	r1, r2
   d5fbc:	6840      	ldr	r0, [r0, #4]
   d5fbe:	f7ff bbcf 	b.w	d5760 <network_ready>

000d5fc2 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5fc2:	2200      	movs	r2, #0
   d5fc4:	4611      	mov	r1, r2
   d5fc6:	6840      	ldr	r0, [r0, #4]
   d5fc8:	f7ff bbba 	b.w	d5740 <network_connecting>

000d5fcc <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5fcc:	2200      	movs	r2, #0
   d5fce:	2102      	movs	r1, #2
   d5fd0:	6840      	ldr	r0, [r0, #4]
   d5fd2:	f7ff bbbd 	b.w	d5750 <network_disconnect>

000d5fd6 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5fd6:	2300      	movs	r3, #0
   d5fd8:	461a      	mov	r2, r3
   d5fda:	6840      	ldr	r0, [r0, #4]
   d5fdc:	f7ff bba8 	b.w	d5730 <network_connect>

000d5fe0 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d5fe0:	4b02      	ldr	r3, [pc, #8]	; (d5fec <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d5fe2:	2203      	movs	r2, #3
   d5fe4:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d5fe6:	4a02      	ldr	r2, [pc, #8]	; (d5ff0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d5fe8:	601a      	str	r2, [r3, #0]
   d5fea:	4770      	bx	lr
   d5fec:	2003e390 	.word	0x2003e390
   d5ff0:	000da928 	.word	0x000da928

000d5ff4 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d5ff4:	4770      	bx	lr

000d5ff6 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d5ff6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5ff8:	4606      	mov	r6, r0
   d5ffa:	4615      	mov	r5, r2
   d5ffc:	460c      	mov	r4, r1
   d5ffe:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d6000:	42bc      	cmp	r4, r7
   d6002:	d006      	beq.n	d6012 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d6004:	6833      	ldr	r3, [r6, #0]
   d6006:	f814 1b01 	ldrb.w	r1, [r4], #1
   d600a:	689b      	ldr	r3, [r3, #8]
   d600c:	4630      	mov	r0, r6
   d600e:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d6010:	e7f6      	b.n	d6000 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d6012:	4628      	mov	r0, r5
   d6014:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6016 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d6016:	2200      	movs	r2, #0
   d6018:	7c00      	ldrb	r0, [r0, #16]
   d601a:	f7ff ba4d 	b.w	d54b8 <HAL_I2C_Write_Data>

000d601e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d601e:	2100      	movs	r1, #0
   d6020:	7c00      	ldrb	r0, [r0, #16]
   d6022:	f7ff ba51 	b.w	d54c8 <HAL_I2C_Available_Data>

000d6026 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d6026:	2100      	movs	r1, #0
   d6028:	7c00      	ldrb	r0, [r0, #16]
   d602a:	f7ff ba55 	b.w	d54d8 <HAL_I2C_Read_Data>

000d602e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d602e:	2100      	movs	r1, #0
   d6030:	7c00      	ldrb	r0, [r0, #16]
   d6032:	f7ff ba59 	b.w	d54e8 <HAL_I2C_Peek_Data>

000d6036 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d6036:	2100      	movs	r1, #0
   d6038:	7c00      	ldrb	r0, [r0, #16]
   d603a:	f7ff ba5d 	b.w	d54f8 <HAL_I2C_Flush_Data>

000d603e <_ZN7TwoWireD0Ev>:
   d603e:	b510      	push	{r4, lr}
   d6040:	2114      	movs	r1, #20
   d6042:	4604      	mov	r4, r0
   d6044:	f000 fe8d 	bl	d6d62 <_ZdlPvj>
   d6048:	4620      	mov	r0, r4
   d604a:	bd10      	pop	{r4, pc}

000d604c <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d604c:	b510      	push	{r4, lr}
   d604e:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d6050:	2300      	movs	r3, #0
   d6052:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d6054:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6058:	60a3      	str	r3, [r4, #8]
   d605a:	4b04      	ldr	r3, [pc, #16]	; (d606c <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d605c:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d605e:	4608      	mov	r0, r1
   d6060:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d6062:	4611      	mov	r1, r2
   d6064:	f7ff fa50 	bl	d5508 <HAL_I2C_Init>
}
   d6068:	4620      	mov	r0, r4
   d606a:	bd10      	pop	{r4, pc}
   d606c:	000da95c 	.word	0x000da95c

000d6070 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d6070:	2300      	movs	r3, #0
   d6072:	461a      	mov	r2, r3
   d6074:	4619      	mov	r1, r3
   d6076:	7c00      	ldrb	r0, [r0, #16]
   d6078:	f7ff ba06 	b.w	d5488 <HAL_I2C_Begin>

000d607c <_ZN7TwoWire17beginTransmissionEh>:
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d607c:	2200      	movs	r2, #0
   d607e:	7c00      	ldrb	r0, [r0, #16]
   d6080:	f7ff ba0a 	b.w	d5498 <HAL_I2C_Begin_Transmission>

000d6084 <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
   d6084:	b2c9      	uxtb	r1, r1
   d6086:	f7ff bff9 	b.w	d607c <_ZN7TwoWire17beginTransmissionEh>

000d608a <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d608a:	2200      	movs	r2, #0
   d608c:	7c00      	ldrb	r0, [r0, #16]
   d608e:	f7ff ba0b 	b.w	d54a8 <HAL_I2C_End_Transmission>

000d6092 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
   d6092:	2101      	movs	r1, #1
   d6094:	f7ff bff9 	b.w	d608a <_ZN7TwoWire15endTransmissionEh>

000d6098 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d6098:	4770      	bx	lr

000d609a <_ZN9IPAddressD0Ev>:
   d609a:	b510      	push	{r4, lr}
   d609c:	2118      	movs	r1, #24
   d609e:	4604      	mov	r4, r0
   d60a0:	f000 fe5f 	bl	d6d62 <_ZdlPvj>
   d60a4:	4620      	mov	r0, r4
   d60a6:	bd10      	pop	{r4, pc}

000d60a8 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d60a8:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d60aa:	7d03      	ldrb	r3, [r0, #20]
   d60ac:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d60ae:	b08d      	sub	sp, #52	; 0x34
   d60b0:	460e      	mov	r6, r1
   d60b2:	f100 0704 	add.w	r7, r0, #4
   d60b6:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d60ba:	d002      	beq.n	d60c2 <_ZNK9IPAddress7printToER5Print+0x1a>
   d60bc:	f100 0508 	add.w	r5, r0, #8
   d60c0:	e018      	b.n	d60f4 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d60c2:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d60c4:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d60c6:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d60ca:	232f      	movs	r3, #47	; 0x2f
   d60cc:	462a      	mov	r2, r5
   d60ce:	200a      	movs	r0, #10
   d60d0:	f7ff fa22 	bl	d5518 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d60d4:	4628      	mov	r0, r5
   d60d6:	f001 fe1e 	bl	d7d16 <strlen>
   d60da:	6833      	ldr	r3, [r6, #0]
   d60dc:	4602      	mov	r2, r0
   d60de:	68db      	ldr	r3, [r3, #12]
   d60e0:	4629      	mov	r1, r5
   d60e2:	4630      	mov	r0, r6
   d60e4:	4798      	blx	r3
   d60e6:	e00f      	b.n	d6108 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d60e8:	b124      	cbz	r4, d60f4 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d60ea:	212e      	movs	r1, #46	; 0x2e
   d60ec:	4630      	mov	r0, r6
   d60ee:	f000 f9d5 	bl	d649c <_ZN5Print5printEc>
   d60f2:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d60f4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d60f8:	220a      	movs	r2, #10
   d60fa:	4630      	mov	r0, r6
   d60fc:	f000 f9e7 	bl	d64ce <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d6100:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d6102:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d6104:	d1f0      	bne.n	d60e8 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d6106:	4620      	mov	r0, r4
    }
    return n;
}
   d6108:	b00d      	add	sp, #52	; 0x34
   d610a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d610c <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d610c:	b510      	push	{r4, lr}
   d610e:	4b05      	ldr	r3, [pc, #20]	; (d6124 <_ZN9IPAddressC1Ev+0x18>)
   d6110:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d6112:	2211      	movs	r2, #17
   d6114:	f840 3b04 	str.w	r3, [r0], #4
   d6118:	2100      	movs	r1, #0
   d611a:	f001 fd90 	bl	d7c3e <memset>
{
    clear();
}
   d611e:	4620      	mov	r0, r4
   d6120:	bd10      	pop	{r4, pc}
   d6122:	bf00      	nop
   d6124:	000da984 	.word	0x000da984

000d6128 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d6128:	4603      	mov	r3, r0
   d612a:	4a07      	ldr	r2, [pc, #28]	; (d6148 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d612c:	b510      	push	{r4, lr}
   d612e:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d6132:	f101 0210 	add.w	r2, r1, #16
   d6136:	f851 4b04 	ldr.w	r4, [r1], #4
   d613a:	f843 4b04 	str.w	r4, [r3], #4
   d613e:	4291      	cmp	r1, r2
   d6140:	d1f9      	bne.n	d6136 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d6142:	780a      	ldrb	r2, [r1, #0]
   d6144:	701a      	strb	r2, [r3, #0]
}
   d6146:	bd10      	pop	{r4, pc}
   d6148:	000da984 	.word	0x000da984

000d614c <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d614c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d614e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d6152:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d6156:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d615a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d615e:	2304      	movs	r3, #4
   d6160:	6041      	str	r1, [r0, #4]
   d6162:	7503      	strb	r3, [r0, #20]
   d6164:	bd10      	pop	{r4, pc}

000d6166 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d6166:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d6168:	780d      	ldrb	r5, [r1, #0]
   d616a:	788b      	ldrb	r3, [r1, #2]
   d616c:	784a      	ldrb	r2, [r1, #1]
   d616e:	78c9      	ldrb	r1, [r1, #3]
   d6170:	9100      	str	r1, [sp, #0]
   d6172:	4629      	mov	r1, r5
   d6174:	f7ff ffea 	bl	d614c <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d6178:	b003      	add	sp, #12
   d617a:	bd30      	pop	{r4, r5, pc}

000d617c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d617c:	4b01      	ldr	r3, [pc, #4]	; (d6184 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d617e:	4a02      	ldr	r2, [pc, #8]	; (d6188 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d6180:	601a      	str	r2, [r3, #0]
   d6182:	4770      	bx	lr
   d6184:	2003e398 	.word	0x2003e398
   d6188:	000daa03 	.word	0x000daa03

000d618c <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d618c:	2200      	movs	r2, #0
   d618e:	4611      	mov	r1, r2
   d6190:	6840      	ldr	r0, [r0, #4]
   d6192:	f7ff bb05 	b.w	d57a0 <network_listening>

000d6196 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d6196:	2200      	movs	r2, #0
   d6198:	4611      	mov	r1, r2
   d619a:	6840      	ldr	r0, [r0, #4]
   d619c:	f7ff bb10 	b.w	d57c0 <network_get_listen_timeout>

000d61a0 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d61a0:	2200      	movs	r2, #0
   d61a2:	6840      	ldr	r0, [r0, #4]
   d61a4:	f7ff bb04 	b.w	d57b0 <network_set_listen_timeout>

000d61a8 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d61a8:	2200      	movs	r2, #0
   d61aa:	f081 0101 	eor.w	r1, r1, #1
   d61ae:	6840      	ldr	r0, [r0, #4]
   d61b0:	f7ff baee 	b.w	d5790 <network_listen>

000d61b4 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d61b4:	2300      	movs	r3, #0
   d61b6:	461a      	mov	r2, r3
   d61b8:	2101      	movs	r1, #1
   d61ba:	6840      	ldr	r0, [r0, #4]
   d61bc:	f7ff bae0 	b.w	d5780 <network_off>

000d61c0 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d61c0:	2300      	movs	r3, #0
   d61c2:	461a      	mov	r2, r3
   d61c4:	4619      	mov	r1, r3
   d61c6:	6840      	ldr	r0, [r0, #4]
   d61c8:	f7ff bad2 	b.w	d5770 <network_on>

000d61cc <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d61cc:	2200      	movs	r2, #0
   d61ce:	4611      	mov	r1, r2
   d61d0:	6840      	ldr	r0, [r0, #4]
   d61d2:	f7ff bac5 	b.w	d5760 <network_ready>

000d61d6 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d61d6:	2200      	movs	r2, #0
   d61d8:	4611      	mov	r1, r2
   d61da:	6840      	ldr	r0, [r0, #4]
   d61dc:	f7ff bab0 	b.w	d5740 <network_connecting>

000d61e0 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d61e0:	2200      	movs	r2, #0
   d61e2:	2102      	movs	r1, #2
   d61e4:	6840      	ldr	r0, [r0, #4]
   d61e6:	f7ff bab3 	b.w	d5750 <network_disconnect>

000d61ea <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d61ea:	2300      	movs	r3, #0
   d61ec:	461a      	mov	r2, r3
   d61ee:	6840      	ldr	r0, [r0, #4]
   d61f0:	f7ff ba9e 	b.w	d5730 <network_connect>

000d61f4 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d61f4:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d61f6:	4605      	mov	r5, r0
   d61f8:	b188      	cbz	r0, d621e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d61fa:	6804      	ldr	r4, [r0, #0]
   d61fc:	b14c      	cbz	r4, d6212 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d61fe:	68a3      	ldr	r3, [r4, #8]
   d6200:	b11b      	cbz	r3, d620a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d6202:	2203      	movs	r2, #3
   d6204:	4621      	mov	r1, r4
   d6206:	4620      	mov	r0, r4
   d6208:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d620a:	2110      	movs	r1, #16
   d620c:	4620      	mov	r0, r4
   d620e:	f000 fda8 	bl	d6d62 <_ZdlPvj>
   d6212:	4628      	mov	r0, r5
   d6214:	2114      	movs	r1, #20
      }
   d6216:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d621a:	f000 bda2 	b.w	d6d62 <_ZdlPvj>
   d621e:	bd38      	pop	{r3, r4, r5, pc}

000d6220 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d6220:	b110      	cbz	r0, d6228 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d6222:	6803      	ldr	r3, [r0, #0]
   d6224:	685b      	ldr	r3, [r3, #4]
   d6226:	4718      	bx	r3
   d6228:	4770      	bx	lr

000d622a <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d622a:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d622c:	6803      	ldr	r3, [r0, #0]
   d622e:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d6230:	b1bb      	cbz	r3, d6262 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d6232:	6858      	ldr	r0, [r3, #4]
   d6234:	f7ff f8d8 	bl	d53e8 <os_thread_is_current>
   d6238:	b978      	cbnz	r0, d625a <_ZN6ThreadD1Ev+0x30>
   d623a:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d623c:	7c5a      	ldrb	r2, [r3, #17]
   d623e:	b912      	cbnz	r2, d6246 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d6240:	6858      	ldr	r0, [r3, #4]
   d6242:	f7ff f8d9 	bl	d53f8 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d6246:	6823      	ldr	r3, [r4, #0]
   d6248:	6858      	ldr	r0, [r3, #4]
   d624a:	f7ff f8dd 	bl	d5408 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d624e:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d6250:	2300      	movs	r3, #0
   d6252:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d6254:	b128      	cbz	r0, d6262 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d6256:	f7ff ffcd 	bl	d61f4 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d625a:	6820      	ldr	r0, [r4, #0]
   d625c:	b108      	cbz	r0, d6262 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d625e:	f7ff ffc9 	bl	d61f4 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d6262:	4620      	mov	r0, r4
   d6264:	bd10      	pop	{r4, pc}

000d6266 <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d6266:	b538      	push	{r3, r4, r5, lr}
   d6268:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d626a:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d626e:	b108      	cbz	r0, d6274 <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d6270:	f7fd ff17 	bl	d40a2 <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d6274:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d6278:	b108      	cbz	r0, d627e <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d627a:	f7ff f8d5 	bl	d5428 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d627e:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d6282:	b135      	cbz	r5, d6292 <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6284:	4628      	mov	r0, r5
   d6286:	f7ff ffd0 	bl	d622a <_ZN6ThreadD1Ev>
   d628a:	2104      	movs	r1, #4
   d628c:	4628      	mov	r0, r5
   d628e:	f000 fd68 	bl	d6d62 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6292:	6820      	ldr	r0, [r4, #0]
   d6294:	b108      	cbz	r0, d629a <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d6296:	f7ff ffc3 	bl	d6220 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d629a:	4620      	mov	r0, r4
   d629c:	bd38      	pop	{r3, r4, r5, pc}
	...

000d62a0 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d62a0:	b510      	push	{r4, lr}
   d62a2:	4b04      	ldr	r3, [pc, #16]	; (d62b4 <_ZN5spark9MeshClassD1Ev+0x14>)
   d62a4:	4604      	mov	r4, r0
   d62a6:	f840 3b08 	str.w	r3, [r0], #8
   d62aa:	f7ff ffdc 	bl	d6266 <_ZN5spark11MeshPublishD1Ev>
   d62ae:	4620      	mov	r0, r4
   d62b0:	bd10      	pop	{r4, pc}
   d62b2:	bf00      	nop
   d62b4:	000daa74 	.word	0x000daa74

000d62b8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d62b8:	b538      	push	{r3, r4, r5, lr}
   d62ba:	4c0e      	ldr	r4, [pc, #56]	; (d62f4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d62bc:	4b0e      	ldr	r3, [pc, #56]	; (d62f8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d62be:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d62c0:	2500      	movs	r5, #0
   d62c2:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d62c4:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d62c8:	6063      	str	r3, [r4, #4]
   d62ca:	60a5      	str	r5, [r4, #8]
   d62cc:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d62d0:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d62d4:	f7ff f8a0 	bl	d5418 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d62d8:	4b08      	ldr	r3, [pc, #32]	; (d62fc <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d62da:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d62de:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d62e2:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d62e4:	4620      	mov	r0, r4
   d62e6:	4a06      	ldr	r2, [pc, #24]	; (d6300 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d62e8:	4906      	ldr	r1, [pc, #24]	; (d6304 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d62ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d62ee:	f000 bd33 	b.w	d6d58 <__aeabi_atexit>
   d62f2:	bf00      	nop
   d62f4:	2003e39c 	.word	0x2003e39c
   d62f8:	000daaa8 	.word	0x000daaa8
   d62fc:	000daa74 	.word	0x000daa74
   d6300:	2003e1f8 	.word	0x2003e1f8
   d6304:	000d62a1 	.word	0x000d62a1

000d6308 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d6308:	2300      	movs	r3, #0
   d630a:	461a      	mov	r2, r3
   d630c:	6840      	ldr	r0, [r0, #4]
   d630e:	f7ff ba0f 	b.w	d5730 <network_connect>

000d6312 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d6312:	2200      	movs	r2, #0
   d6314:	2102      	movs	r1, #2
   d6316:	6840      	ldr	r0, [r0, #4]
   d6318:	f7ff ba1a 	b.w	d5750 <network_disconnect>

000d631c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d631c:	2200      	movs	r2, #0
   d631e:	4611      	mov	r1, r2
   d6320:	6840      	ldr	r0, [r0, #4]
   d6322:	f7ff ba0d 	b.w	d5740 <network_connecting>

000d6326 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d6326:	2200      	movs	r2, #0
   d6328:	4611      	mov	r1, r2
   d632a:	6840      	ldr	r0, [r0, #4]
   d632c:	f7ff ba18 	b.w	d5760 <network_ready>

000d6330 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d6330:	2300      	movs	r3, #0
   d6332:	461a      	mov	r2, r3
   d6334:	4619      	mov	r1, r3
   d6336:	6840      	ldr	r0, [r0, #4]
   d6338:	f7ff ba1a 	b.w	d5770 <network_on>

000d633c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d633c:	2300      	movs	r3, #0
   d633e:	461a      	mov	r2, r3
   d6340:	4619      	mov	r1, r3
   d6342:	6840      	ldr	r0, [r0, #4]
   d6344:	f7ff ba1c 	b.w	d5780 <network_off>

000d6348 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d6348:	2200      	movs	r2, #0
   d634a:	f081 0101 	eor.w	r1, r1, #1
   d634e:	6840      	ldr	r0, [r0, #4]
   d6350:	f7ff ba1e 	b.w	d5790 <network_listen>

000d6354 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d6354:	2200      	movs	r2, #0
   d6356:	6840      	ldr	r0, [r0, #4]
   d6358:	f7ff ba2a 	b.w	d57b0 <network_set_listen_timeout>

000d635c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d635c:	2200      	movs	r2, #0
   d635e:	4611      	mov	r1, r2
   d6360:	6840      	ldr	r0, [r0, #4]
   d6362:	f7ff ba2d 	b.w	d57c0 <network_get_listen_timeout>

000d6366 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d6366:	2200      	movs	r2, #0
   d6368:	4611      	mov	r1, r2
   d636a:	6840      	ldr	r0, [r0, #4]
   d636c:	f7ff ba18 	b.w	d57a0 <network_listening>

000d6370 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d6370:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d6374:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d6376:	b095      	sub	sp, #84	; 0x54
   d6378:	4616      	mov	r6, r2
   d637a:	460d      	mov	r5, r1
   d637c:	4607      	mov	r7, r0
    IPAddress addr;
   d637e:	f7ff fec5 	bl	d610c <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d6382:	4621      	mov	r1, r4
   d6384:	2220      	movs	r2, #32
   d6386:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d6388:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d638a:	f001 fc58 	bl	d7c3e <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d638e:	2340      	movs	r3, #64	; 0x40
   d6390:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d6392:	4621      	mov	r1, r4
   d6394:	466b      	mov	r3, sp
   d6396:	aa0c      	add	r2, sp, #48	; 0x30
   d6398:	4630      	mov	r0, r6
   d639a:	f7ff f8cd 	bl	d5538 <netdb_getaddrinfo>
    if (!r) {
   d639e:	4604      	mov	r4, r0
   d63a0:	2800      	cmp	r0, #0
   d63a2:	d144      	bne.n	d642e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d63a4:	4602      	mov	r2, r0
   d63a6:	2101      	movs	r1, #1
   d63a8:	6868      	ldr	r0, [r5, #4]
   d63aa:	f7ff f9d9 	bl	d5760 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d63ae:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d63b0:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d63b2:	4622      	mov	r2, r4
   d63b4:	6868      	ldr	r0, [r5, #4]
   d63b6:	f7ff f9d3 	bl	d5760 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d63ba:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d63bc:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d63be:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d63c0:	2e00      	cmp	r6, #0
   d63c2:	d034      	beq.n	d642e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d63c4:	2900      	cmp	r1, #0
   d63c6:	d132      	bne.n	d642e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d63c8:	6873      	ldr	r3, [r6, #4]
   d63ca:	2b02      	cmp	r3, #2
   d63cc:	d002      	beq.n	d63d4 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d63ce:	2b0a      	cmp	r3, #10
   d63d0:	d009      	beq.n	d63e6 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d63d2:	e02a      	b.n	d642a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d63d4:	f1b8 0f00 	cmp.w	r8, #0
   d63d8:	d027      	beq.n	d642a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d63da:	6971      	ldr	r1, [r6, #20]
   d63dc:	4638      	mov	r0, r7
   d63de:	3104      	adds	r1, #4
   d63e0:	f7ff fec1 	bl	d6166 <_ZN9IPAddressaSEPKh>
   d63e4:	e020      	b.n	d6428 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d63e6:	f1b9 0f00 	cmp.w	r9, #0
   d63ea:	d01e      	beq.n	d642a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d63ec:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d63ee:	2211      	movs	r2, #17
   d63f0:	a801      	add	r0, sp, #4
   d63f2:	f001 fc24 	bl	d7c3e <memset>
                    a.v = 6;
   d63f6:	2306      	movs	r3, #6
   d63f8:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d63fc:	ad01      	add	r5, sp, #4
   d63fe:	f104 0308 	add.w	r3, r4, #8
   d6402:	3418      	adds	r4, #24
   d6404:	6818      	ldr	r0, [r3, #0]
   d6406:	6859      	ldr	r1, [r3, #4]
   d6408:	462a      	mov	r2, r5
   d640a:	c203      	stmia	r2!, {r0, r1}
   d640c:	3308      	adds	r3, #8
   d640e:	42a3      	cmp	r3, r4
   d6410:	4615      	mov	r5, r2
   d6412:	d1f7      	bne.n	d6404 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d6414:	a901      	add	r1, sp, #4
   d6416:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d6418:	ad07      	add	r5, sp, #28
   d641a:	f7ff fe85 	bl	d6128 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d641e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6420:	1d3c      	adds	r4, r7, #4
   d6422:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6424:	682b      	ldr	r3, [r5, #0]
   d6426:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d6428:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d642a:	69f6      	ldr	r6, [r6, #28]
   d642c:	e7c8      	b.n	d63c0 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d642e:	9800      	ldr	r0, [sp, #0]
   d6430:	f7ff f87a 	bl	d5528 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d6434:	4638      	mov	r0, r7
   d6436:	b015      	add	sp, #84	; 0x54
   d6438:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d643c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d643c:	4b02      	ldr	r3, [pc, #8]	; (d6448 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d643e:	4a03      	ldr	r2, [pc, #12]	; (d644c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d6440:	601a      	str	r2, [r3, #0]
   d6442:	2200      	movs	r2, #0
   d6444:	605a      	str	r2, [r3, #4]
   d6446:	4770      	bx	lr
   d6448:	2003e570 	.word	0x2003e570
   d644c:	000daaa8 	.word	0x000daaa8

000d6450 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d6450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6452:	4606      	mov	r6, r0
   d6454:	460d      	mov	r5, r1
   d6456:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d6458:	2400      	movs	r4, #0
  while (size--) {
   d645a:	42bd      	cmp	r5, r7
   d645c:	d00c      	beq.n	d6478 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d645e:	6833      	ldr	r3, [r6, #0]
   d6460:	f815 1b01 	ldrb.w	r1, [r5], #1
   d6464:	689b      	ldr	r3, [r3, #8]
   d6466:	4630      	mov	r0, r6
   d6468:	4798      	blx	r3
     if (chunk>=0)
   d646a:	2800      	cmp	r0, #0
   d646c:	db01      	blt.n	d6472 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d646e:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d6470:	e7f3      	b.n	d645a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d6472:	2c00      	cmp	r4, #0
   d6474:	bf08      	it	eq
   d6476:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d6478:	4620      	mov	r0, r4
   d647a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d647c <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d647c:	b570      	push	{r4, r5, r6, lr}
   d647e:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d6480:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d6482:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d6484:	b149      	cbz	r1, d649a <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d6486:	f001 fc46 	bl	d7d16 <strlen>
   d648a:	682b      	ldr	r3, [r5, #0]
   d648c:	4602      	mov	r2, r0
   d648e:	4621      	mov	r1, r4
   d6490:	4628      	mov	r0, r5
   d6492:	68db      	ldr	r3, [r3, #12]
    }
   d6494:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d6498:	4718      	bx	r3
    }
   d649a:	bd70      	pop	{r4, r5, r6, pc}

000d649c <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d649c:	6803      	ldr	r3, [r0, #0]
   d649e:	689b      	ldr	r3, [r3, #8]
   d64a0:	4718      	bx	r3

000d64a2 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d64a2:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d64a4:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d64a6:	4605      	mov	r5, r0
  size_t n = print('\r');
   d64a8:	f7ff fff8 	bl	d649c <_ZN5Print5printEc>
  n += print('\n');
   d64ac:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d64ae:	4604      	mov	r4, r0
  n += print('\n');
   d64b0:	4628      	mov	r0, r5
   d64b2:	f7ff fff3 	bl	d649c <_ZN5Print5printEc>
  return n;
}
   d64b6:	4420      	add	r0, r4
   d64b8:	bd38      	pop	{r3, r4, r5, pc}

000d64ba <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d64ba:	b538      	push	{r3, r4, r5, lr}
   d64bc:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d64be:	f7ff ffdd 	bl	d647c <_ZN5Print5writeEPKc>
   d64c2:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d64c4:	4628      	mov	r0, r5
   d64c6:	f7ff ffec 	bl	d64a2 <_ZN5Print7printlnEv>
  return n;
}
   d64ca:	4420      	add	r0, r4
   d64cc:	bd38      	pop	{r3, r4, r5, pc}

000d64ce <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d64ce:	b530      	push	{r4, r5, lr}
   d64d0:	b08b      	sub	sp, #44	; 0x2c
   d64d2:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d64d4:	2100      	movs	r1, #0
   d64d6:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d64da:	2a01      	cmp	r2, #1
   d64dc:	bf98      	it	ls
   d64de:	220a      	movls	r2, #10
   d64e0:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d64e4:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d64e8:	fb05 3312 	mls	r3, r5, r2, r3
   d64ec:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d64f0:	2b09      	cmp	r3, #9
   d64f2:	bf94      	ite	ls
   d64f4:	3330      	addls	r3, #48	; 0x30
   d64f6:	3337      	addhi	r3, #55	; 0x37
   d64f8:	b2db      	uxtb	r3, r3
   d64fa:	4621      	mov	r1, r4
   d64fc:	f804 3901 	strb.w	r3, [r4], #-1
   d6500:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d6502:	2d00      	cmp	r5, #0
   d6504:	d1ee      	bne.n	d64e4 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d6506:	f7ff ffb9 	bl	d647c <_ZN5Print5writeEPKc>
}
   d650a:	b00b      	add	sp, #44	; 0x2c
   d650c:	bd30      	pop	{r4, r5, pc}

000d650e <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d650e:	b40c      	push	{r2, r3}
   d6510:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6514:	b087      	sub	sp, #28
   d6516:	af00      	add	r7, sp, #0
   d6518:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d651c:	4605      	mov	r5, r0
   d651e:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d6522:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d6524:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d6526:	4623      	mov	r3, r4
   d6528:	464a      	mov	r2, r9
   d652a:	2114      	movs	r1, #20
   d652c:	1d38      	adds	r0, r7, #4
   d652e:	f7ff f987 	bl	d5840 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d6532:	2813      	cmp	r0, #19
   d6534:	d805      	bhi.n	d6542 <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d6536:	1d39      	adds	r1, r7, #4
   d6538:	4628      	mov	r0, r5
   d653a:	f7ff ff9f 	bl	d647c <_ZN5Print5writeEPKc>
   d653e:	4604      	mov	r4, r0
   d6540:	e013      	b.n	d656a <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d6542:	f100 0308 	add.w	r3, r0, #8
   d6546:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d654a:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d654c:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d6550:	1c41      	adds	r1, r0, #1
   d6552:	4623      	mov	r3, r4
   d6554:	464a      	mov	r2, r9
   d6556:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d6558:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d655a:	f7ff f971 	bl	d5840 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d655e:	4669      	mov	r1, sp
   d6560:	4628      	mov	r0, r5
   d6562:	f7ff ff8b 	bl	d647c <_ZN5Print5writeEPKc>
   d6566:	4604      	mov	r4, r0
   d6568:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d656a:	b11e      	cbz	r6, d6574 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d656c:	4628      	mov	r0, r5
   d656e:	f7ff ff98 	bl	d64a2 <_ZN5Print7printlnEv>
   d6572:	4404      	add	r4, r0
    return n;
}
   d6574:	4620      	mov	r0, r4
   d6576:	371c      	adds	r7, #28
   d6578:	46bd      	mov	sp, r7
   d657a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d657e:	b002      	add	sp, #8
   d6580:	4770      	bx	lr

000d6582 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d6582:	b510      	push	{r4, lr}
   d6584:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6586:	f7fe fc71 	bl	d4e6c <_ZNSt14_Function_baseD1Ev>
   d658a:	4620      	mov	r0, r4
   d658c:	bd10      	pop	{r4, pc}
	...

000d6590 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6590:	4803      	ldr	r0, [pc, #12]	; (d65a0 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d6592:	4a04      	ldr	r2, [pc, #16]	; (d65a4 <_GLOBAL__sub_I_RGB+0x14>)
   d6594:	4904      	ldr	r1, [pc, #16]	; (d65a8 <_GLOBAL__sub_I_RGB+0x18>)
   d6596:	2300      	movs	r3, #0
   d6598:	6083      	str	r3, [r0, #8]
   d659a:	f000 bbdd 	b.w	d6d58 <__aeabi_atexit>
   d659e:	bf00      	nop
   d65a0:	2003e578 	.word	0x2003e578
   d65a4:	2003e1f8 	.word	0x2003e1f8
   d65a8:	000d6583 	.word	0x000d6583

000d65ac <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d65ac:	b510      	push	{r4, lr}
   d65ae:	4604      	mov	r4, r0
{
	free(buffer);
   d65b0:	6800      	ldr	r0, [r0, #0]
   d65b2:	f7ff f915 	bl	d57e0 <free>
}
   d65b6:	4620      	mov	r0, r4
   d65b8:	bd10      	pop	{r4, pc}

000d65ba <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d65ba:	b510      	push	{r4, lr}
   d65bc:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d65be:	6800      	ldr	r0, [r0, #0]
   d65c0:	b108      	cbz	r0, d65c6 <_ZN6String10invalidateEv+0xc>
   d65c2:	f7ff f90d 	bl	d57e0 <free>
	buffer = NULL;
   d65c6:	2300      	movs	r3, #0
   d65c8:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d65ca:	60a3      	str	r3, [r4, #8]
   d65cc:	6063      	str	r3, [r4, #4]
   d65ce:	bd10      	pop	{r4, pc}

000d65d0 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d65d0:	b538      	push	{r3, r4, r5, lr}
   d65d2:	4604      	mov	r4, r0
   d65d4:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d65d6:	6800      	ldr	r0, [r0, #0]
   d65d8:	3101      	adds	r1, #1
   d65da:	f7ff f909 	bl	d57f0 <realloc>
	if (newbuffer) {
   d65de:	b110      	cbz	r0, d65e6 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d65e0:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d65e4:	2001      	movs	r0, #1
	}
	return 0;
}
   d65e6:	bd38      	pop	{r3, r4, r5, pc}

000d65e8 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d65e8:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d65ea:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d65ec:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d65ee:	b113      	cbz	r3, d65f6 <_ZN6String7reserveEj+0xe>
   d65f0:	6843      	ldr	r3, [r0, #4]
   d65f2:	428b      	cmp	r3, r1
   d65f4:	d207      	bcs.n	d6606 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d65f6:	4620      	mov	r0, r4
   d65f8:	f7ff ffea 	bl	d65d0 <_ZN6String12changeBufferEj>
   d65fc:	b120      	cbz	r0, d6608 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d65fe:	68a3      	ldr	r3, [r4, #8]
   d6600:	b90b      	cbnz	r3, d6606 <_ZN6String7reserveEj+0x1e>
   d6602:	6822      	ldr	r2, [r4, #0]
   d6604:	7013      	strb	r3, [r2, #0]
   d6606:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d6608:	bd10      	pop	{r4, pc}

000d660a <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d660a:	b570      	push	{r4, r5, r6, lr}
   d660c:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d660e:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d6610:	4604      	mov	r4, r0
   d6612:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d6614:	f7ff ffe8 	bl	d65e8 <_ZN6String7reserveEj>
   d6618:	b918      	cbnz	r0, d6622 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d661a:	4620      	mov	r0, r4
   d661c:	f7ff ffcd 	bl	d65ba <_ZN6String10invalidateEv>
		return *this;
   d6620:	e009      	b.n	d6636 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d6622:	462a      	mov	r2, r5
   d6624:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d6626:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d6628:	6820      	ldr	r0, [r4, #0]
   d662a:	f001 fafd 	bl	d7c28 <memcpy>
	buffer[len] = 0;
   d662e:	6822      	ldr	r2, [r4, #0]
   d6630:	68a3      	ldr	r3, [r4, #8]
   d6632:	2100      	movs	r1, #0
   d6634:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d6636:	4620      	mov	r0, r4
   d6638:	bd70      	pop	{r4, r5, r6, pc}

000d663a <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d663a:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d663c:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d663e:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d6640:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d6642:	6043      	str	r3, [r0, #4]
	len = 0;
   d6644:	6083      	str	r3, [r0, #8]
	flags = 0;
   d6646:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d6648:	460d      	mov	r5, r1
   d664a:	b139      	cbz	r1, d665c <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d664c:	4608      	mov	r0, r1
   d664e:	f001 fb62 	bl	d7d16 <strlen>
   d6652:	4629      	mov	r1, r5
   d6654:	4602      	mov	r2, r0
   d6656:	4620      	mov	r0, r4
   d6658:	f7ff ffd7 	bl	d660a <_ZN6String4copyEPKcj>
}
   d665c:	4620      	mov	r0, r4
   d665e:	bd38      	pop	{r3, r4, r5, pc}

000d6660 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d6660:	b538      	push	{r3, r4, r5, lr}
   d6662:	4605      	mov	r5, r0
	if (buffer) {
   d6664:	6800      	ldr	r0, [r0, #0]
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d6666:	460c      	mov	r4, r1
	if (buffer) {
   d6668:	b160      	cbz	r0, d6684 <_ZN6String4moveERS_+0x24>
		if (capacity >= rhs.len) {
   d666a:	686a      	ldr	r2, [r5, #4]
   d666c:	688b      	ldr	r3, [r1, #8]
   d666e:	429a      	cmp	r2, r3
   d6670:	d306      	bcc.n	d6680 <_ZN6String4moveERS_+0x20>
			strcpy(buffer, rhs.buffer);
   d6672:	6809      	ldr	r1, [r1, #0]
   d6674:	f001 fb2c 	bl	d7cd0 <strcpy>
			len = rhs.len;
   d6678:	68a3      	ldr	r3, [r4, #8]
   d667a:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   d667c:	2300      	movs	r3, #0
   d667e:	e00a      	b.n	d6696 <_ZN6String4moveERS_+0x36>
			return;
		} else {
			free(buffer);
   d6680:	f7ff f8ae 	bl	d57e0 <free>
		}
	}
	buffer = rhs.buffer;
   d6684:	6823      	ldr	r3, [r4, #0]
   d6686:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   d6688:	6863      	ldr	r3, [r4, #4]
   d668a:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   d668c:	68a3      	ldr	r3, [r4, #8]
   d668e:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   d6690:	2300      	movs	r3, #0
   d6692:	6023      	str	r3, [r4, #0]
	rhs.capacity = 0;
   d6694:	6063      	str	r3, [r4, #4]
	rhs.len = 0;
   d6696:	60a3      	str	r3, [r4, #8]
   d6698:	bd38      	pop	{r3, r4, r5, pc}

000d669a <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d669a:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   d669c:	b510      	push	{r4, lr}
   d669e:	460b      	mov	r3, r1
   d66a0:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d66a2:	d007      	beq.n	d66b4 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d66a4:	6809      	ldr	r1, [r1, #0]
   d66a6:	b119      	cbz	r1, d66b0 <_ZN6StringaSERKS_+0x16>
   d66a8:	689a      	ldr	r2, [r3, #8]
   d66aa:	f7ff ffae 	bl	d660a <_ZN6String4copyEPKcj>
   d66ae:	e001      	b.n	d66b4 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   d66b0:	f7ff ff83 	bl	d65ba <_ZN6String10invalidateEv>

	return *this;
}
   d66b4:	4620      	mov	r0, r4
   d66b6:	bd10      	pop	{r4, pc}

000d66b8 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d66b8:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d66ba:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d66bc:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d66be:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d66c0:	6043      	str	r3, [r0, #4]
	len = 0;
   d66c2:	6083      	str	r3, [r0, #8]
	flags = 0;
   d66c4:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
   d66c6:	f7ff ffe8 	bl	d669a <_ZN6StringaSERKS_>
}
   d66ca:	4620      	mov	r0, r4
   d66cc:	bd10      	pop	{r4, pc}

000d66ce <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   d66ce:	4288      	cmp	r0, r1
    return *this;
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
   d66d0:	b510      	push	{r4, lr}
   d66d2:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   d66d4:	d001      	beq.n	d66da <_ZN6StringaSEOS_+0xc>
   d66d6:	f7ff ffc3 	bl	d6660 <_ZN6String4moveERS_>
	return *this;
}
   d66da:	4620      	mov	r0, r4
   d66dc:	bd10      	pop	{r4, pc}

000d66de <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d66de:	b538      	push	{r3, r4, r5, lr}
   d66e0:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   d66e2:	460c      	mov	r4, r1
   d66e4:	b141      	cbz	r1, d66f8 <_ZN6StringaSEPKc+0x1a>
   d66e6:	4608      	mov	r0, r1
   d66e8:	f001 fb15 	bl	d7d16 <strlen>
   d66ec:	4621      	mov	r1, r4
   d66ee:	4602      	mov	r2, r0
   d66f0:	4628      	mov	r0, r5
   d66f2:	f7ff ff8a 	bl	d660a <_ZN6String4copyEPKcj>
   d66f6:	e001      	b.n	d66fc <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   d66f8:	f7ff ff5f 	bl	d65ba <_ZN6String10invalidateEv>

	return *this;
}
   d66fc:	4628      	mov	r0, r5
   d66fe:	bd38      	pop	{r3, r4, r5, pc}

000d6700 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d6700:	b570      	push	{r4, r5, r6, lr}
   d6702:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d6704:	460e      	mov	r6, r1
   d6706:	b909      	cbnz	r1, d670c <_ZN6String6concatEPKcj+0xc>
   d6708:	2000      	movs	r0, #0
   d670a:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d670c:	b16a      	cbz	r2, d672a <_ZN6String6concatEPKcj+0x2a>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
   d670e:	6883      	ldr	r3, [r0, #8]
   d6710:	18d5      	adds	r5, r2, r3
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
   d6712:	4629      	mov	r1, r5
   d6714:	f7ff ff68 	bl	d65e8 <_ZN6String7reserveEj>
   d6718:	2800      	cmp	r0, #0
   d671a:	d0f5      	beq.n	d6708 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d671c:	6820      	ldr	r0, [r4, #0]
   d671e:	68a3      	ldr	r3, [r4, #8]
   d6720:	4631      	mov	r1, r6
   d6722:	4418      	add	r0, r3
   d6724:	f001 fad4 	bl	d7cd0 <strcpy>
	len = newlen;
   d6728:	60a5      	str	r5, [r4, #8]

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
   d672a:	2001      	movs	r0, #1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d672c:	bd70      	pop	{r4, r5, r6, pc}

000d672e <_ZN6String6concatEPKc>:

unsigned char String::concat(const char *cstr)
{
   d672e:	b538      	push	{r3, r4, r5, lr}
   d6730:	4605      	mov	r5, r0
	if (!cstr) return 0;
   d6732:	460c      	mov	r4, r1
	return concat(cstr, strlen(cstr));
}
   d6734:	4608      	mov	r0, r1
	return 1;
}

unsigned char String::concat(const char *cstr)
{
	if (!cstr) return 0;
   d6736:	b141      	cbz	r1, d674a <_ZN6String6concatEPKc+0x1c>
	return concat(cstr, strlen(cstr));
   d6738:	f001 faed 	bl	d7d16 <strlen>
   d673c:	4621      	mov	r1, r4
   d673e:	4602      	mov	r2, r0
   d6740:	4628      	mov	r0, r5
}
   d6742:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
}

unsigned char String::concat(const char *cstr)
{
	if (!cstr) return 0;
	return concat(cstr, strlen(cstr));
   d6746:	f7ff bfdb 	b.w	d6700 <_ZN6String6concatEPKcj>
}
   d674a:	bd38      	pop	{r3, r4, r5, pc}

000d674c <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   d674c:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   d674e:	2300      	movs	r3, #0
}

unsigned char String::concat(char c)
{
	char buf[2];
	buf[0] = c;
   d6750:	f88d 1004 	strb.w	r1, [sp, #4]
	buf[1] = 0;
	return concat(buf, 1);
   d6754:	2201      	movs	r2, #1
   d6756:	a901      	add	r1, sp, #4

unsigned char String::concat(char c)
{
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   d6758:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   d675c:	f7ff ffd0 	bl	d6700 <_ZN6String6concatEPKcj>
}
   d6760:	b003      	add	sp, #12
   d6762:	f85d fb04 	ldr.w	pc, [sp], #4

000d6766 <_ZNK6String10startsWithERKS_j>:
	if (len < s2.len) return 0;
	return startsWith(s2, 0);
}

unsigned char String::startsWith( const String &s2, unsigned int offset ) const
{
   d6766:	b510      	push	{r4, lr}
   d6768:	4614      	mov	r4, r2
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
   d676a:	6883      	ldr	r3, [r0, #8]
   d676c:	688a      	ldr	r2, [r1, #8]
   d676e:	1a9b      	subs	r3, r3, r2
   d6770:	42a3      	cmp	r3, r4
   d6772:	d30a      	bcc.n	d678a <_ZNK6String10startsWithERKS_j+0x24>
   d6774:	6800      	ldr	r0, [r0, #0]
   d6776:	b158      	cbz	r0, d6790 <_ZNK6String10startsWithERKS_j+0x2a>
   d6778:	6809      	ldr	r1, [r1, #0]
   d677a:	b141      	cbz	r1, d678e <_ZNK6String10startsWithERKS_j+0x28>
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
   d677c:	4420      	add	r0, r4
   d677e:	f001 fad2 	bl	d7d26 <strncmp>
   d6782:	fab0 f080 	clz	r0, r0
   d6786:	0940      	lsrs	r0, r0, #5
   d6788:	bd10      	pop	{r4, pc}
	return startsWith(s2, 0);
}

unsigned char String::startsWith( const String &s2, unsigned int offset ) const
{
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
   d678a:	2000      	movs	r0, #0
   d678c:	bd10      	pop	{r4, pc}
   d678e:	4608      	mov	r0, r1
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
}
   d6790:	bd10      	pop	{r4, pc}

000d6792 <_ZNK6String10startsWithERKS_>:
	return 1;
}

unsigned char String::startsWith( const String &s2 ) const
{
	if (len < s2.len) return 0;
   d6792:	6882      	ldr	r2, [r0, #8]
   d6794:	688b      	ldr	r3, [r1, #8]
   d6796:	429a      	cmp	r2, r3
   d6798:	d302      	bcc.n	d67a0 <_ZNK6String10startsWithERKS_+0xe>
	return startsWith(s2, 0);
   d679a:	2200      	movs	r2, #0
   d679c:	f7ff bfe3 	b.w	d6766 <_ZNK6String10startsWithERKS_j>
}
   d67a0:	2000      	movs	r0, #0
   d67a2:	4770      	bx	lr

000d67a4 <_ZNK6StringixEj>:
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
   d67a4:	6883      	ldr	r3, [r0, #8]
   d67a6:	428b      	cmp	r3, r1
   d67a8:	d903      	bls.n	d67b2 <_ZNK6StringixEj+0xe>
   d67aa:	6800      	ldr	r0, [r0, #0]
   d67ac:	b110      	cbz	r0, d67b4 <_ZNK6StringixEj+0x10>
	return buffer[index];
   d67ae:	5c40      	ldrb	r0, [r0, r1]
   d67b0:	4770      	bx	lr
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
   d67b2:	2000      	movs	r0, #0
	return buffer[index];
}
   d67b4:	4770      	bx	lr

000d67b6 <_ZNK6String6charAtEj>:
/*  Character Access                         */
/*********************************************/

char String::charAt(unsigned int loc) const
{
	return operator[](loc);
   d67b6:	f7ff bff5 	b.w	d67a4 <_ZNK6StringixEj>
	...

000d67bc <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   d67bc:	b40e      	push	{r1, r2, r3}
   d67be:	b5ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7, lr}
   d67c0:	ac09      	add	r4, sp, #36	; 0x24
   d67c2:	4605      	mov	r5, r0
   d67c4:	f854 7b04 	ldr.w	r7, [r4], #4
    va_list marker;
    va_start(marker, fmt);
   d67c8:	9401      	str	r4, [sp, #4]
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   d67ca:	4623      	mov	r3, r4
   d67cc:	463a      	mov	r2, r7
   d67ce:	2105      	movs	r1, #5
   d67d0:	a802      	add	r0, sp, #8
   d67d2:	f7ff f835 	bl	d5840 <vsnprintf>
    va_end(marker);

    String result;
   d67d6:	490c      	ldr	r1, [pc, #48]	; (d6808 <_ZN6String6formatEPKcz+0x4c>)
{
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   d67d8:	4606      	mov	r6, r0
    va_end(marker);

    String result;
   d67da:	4628      	mov	r0, r5
   d67dc:	f7ff ff2d 	bl	d663a <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(n);  // internally adds +1 for null terminator
   d67e0:	4631      	mov	r1, r6
   d67e2:	4628      	mov	r0, r5
   d67e4:	f7ff ff00 	bl	d65e8 <_ZN6String7reserveEj>
    if (result.buffer) {
   d67e8:	6828      	ldr	r0, [r5, #0]
   d67ea:	b130      	cbz	r0, d67fa <_ZN6String6formatEPKcz+0x3e>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   d67ec:	4623      	mov	r3, r4
   d67ee:	463a      	mov	r2, r7
   d67f0:	1c71      	adds	r1, r6, #1
    va_end(marker);

    String result;
    result.reserve(n);  // internally adds +1 for null terminator
    if (result.buffer) {
        va_start(marker, fmt);
   d67f2:	9401      	str	r4, [sp, #4]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   d67f4:	f7ff f824 	bl	d5840 <vsnprintf>
        va_end(marker);
        result.len = n;
   d67f8:	60a8      	str	r0, [r5, #8]
    }
    return result;
}
   d67fa:	4628      	mov	r0, r5
   d67fc:	b004      	add	sp, #16
   d67fe:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   d6802:	b003      	add	sp, #12
   d6804:	4770      	bx	lr
   d6806:	bf00      	nop
   d6808:	000da504 	.word	0x000da504

000d680c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d680c:	b510      	push	{r4, lr}
   d680e:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d6810:	6800      	ldr	r0, [r0, #0]
   d6812:	b118      	cbz	r0, d681c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   d6814:	f7fe ffe4 	bl	d57e0 <free>
            wakeupSource_ = nullptr;
   d6818:	2300      	movs	r3, #0
   d681a:	6023      	str	r3, [r4, #0]
   d681c:	bd10      	pop	{r4, pc}

000d681e <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d681e:	b510      	push	{r4, lr}
   d6820:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d6822:	f7ff fff3 	bl	d680c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d6826:	4620      	mov	r0, r4
   d6828:	bd10      	pop	{r4, pc}
	...

000d682c <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d682c:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d682e:	4c09      	ldr	r4, [pc, #36]	; (d6854 <_GLOBAL__sub_I_System+0x28>)
   d6830:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d6832:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d6836:	6020      	str	r0, [r4, #0]
   d6838:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d683a:	71a0      	strb	r0, [r4, #6]
   d683c:	8120      	strh	r0, [r4, #8]
   d683e:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d6840:	f7fe ff02 	bl	d5648 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d6844:	4620      	mov	r0, r4
   d6846:	4a04      	ldr	r2, [pc, #16]	; (d6858 <_GLOBAL__sub_I_System+0x2c>)
   d6848:	4904      	ldr	r1, [pc, #16]	; (d685c <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d684a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d684e:	f000 ba83 	b.w	d6d58 <__aeabi_atexit>
   d6852:	bf00      	nop
   d6854:	2003e588 	.word	0x2003e588
   d6858:	2003e1f8 	.word	0x2003e1f8
   d685c:	000d681f 	.word	0x000d681f

000d6860 <_ZL22Refresh_UnixTime_Cachel>:
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d6860:	b5f0      	push	{r4, r5, r6, r7, lr}
    unix_time += time_zone_cache;
   d6862:	4b14      	ldr	r3, [pc, #80]	; (d68b4 <_ZL22Refresh_UnixTime_Cachel+0x54>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d6864:	4f14      	ldr	r7, [pc, #80]	; (d68b8 <_ZL22Refresh_UnixTime_Cachel+0x58>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   d6866:	681e      	ldr	r6, [r3, #0]
    unix_time += dst_current_cache;
   d6868:	4b14      	ldr	r3, [pc, #80]	; (d68bc <_ZL22Refresh_UnixTime_Cachel+0x5c>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   d686a:	4406      	add	r6, r0
    unix_time += dst_current_cache;
   d686c:	6818      	ldr	r0, [r3, #0]
    if(unix_time != unix_time_cache)
   d686e:	683b      	ldr	r3, [r7, #0]

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
   d6870:	4406      	add	r6, r0
    if(unix_time != unix_time_cache)
   d6872:	429e      	cmp	r6, r3
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d6874:	b08b      	sub	sp, #44	; 0x2c
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d6876:	d01b      	beq.n	d68b0 <_ZL22Refresh_UnixTime_Cachel+0x50>
   d6878:	a80a      	add	r0, sp, #40	; 0x28
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
	return *calendar_time;
   d687a:	ad01      	add	r5, sp, #4
   d687c:	f840 6d28 	str.w	r6, [r0, #-40]!

/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
   d6880:	f001 f8d6 	bl	d7a30 <localtime>
	calendar_time->tm_year += 1900;
   d6884:	6943      	ldr	r3, [r0, #20]
   d6886:	f203 736c 	addw	r3, r3, #1900	; 0x76c
   d688a:	6143      	str	r3, [r0, #20]
	return *calendar_time;
   d688c:	4604      	mov	r4, r0
   d688e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d6890:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d6892:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d6894:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d6896:	f8d4 e000 	ldr.w	lr, [r4]
   d689a:	f8c5 e000 	str.w	lr, [r5]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d689e:	ad01      	add	r5, sp, #4
   d68a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d68a2:	4c07      	ldr	r4, [pc, #28]	; (d68c0 <_ZL22Refresh_UnixTime_Cachel+0x60>)
   d68a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d68a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d68a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   d68aa:	603e      	str	r6, [r7, #0]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d68ac:	f8c4 e000 	str.w	lr, [r4]
            unix_time_cache = unix_time;
    }
}
   d68b0:	b00b      	add	sp, #44	; 0x2c
   d68b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d68b4:	2003e5c4 	.word	0x2003e5c4
   d68b8:	2003e5c0 	.word	0x2003e5c0
   d68bc:	2003e5bc 	.word	0x2003e5bc
   d68c0:	2003e594 	.word	0x2003e594

000d68c4 <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   d68c4:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d68c6:	2000      	movs	r0, #0
   d68c8:	f7fe ff22 	bl	d5710 <spark_sync_time_pending>
   d68cc:	b128      	cbz	r0, d68da <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d68ce:	f7fe feff 	bl	d56d0 <spark_cloud_flag_connected>
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d68d2:	f080 0001 	eor.w	r0, r0, #1
   d68d6:	b2c0      	uxtb	r0, r0
   d68d8:	bd08      	pop	{r3, pc}
   d68da:	2001      	movs	r0, #1
    }
   d68dc:	bd08      	pop	{r3, pc}
	...

000d68e0 <_ZN9TimeClass12hourFormat12El>:
	return hourFormat12(now());
}

/* the hour for the given time in 12 hour format */
int TimeClass::hourFormat12(time_t t)
{
   d68e0:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   d68e2:	f7ff ffbd 	bl	d6860 <_ZL22Refresh_UnixTime_Cachel>
	if(calendar_time_cache.tm_hour == 0)
   d68e6:	4b04      	ldr	r3, [pc, #16]	; (d68f8 <_ZN9TimeClass12hourFormat12El+0x18>)
   d68e8:	6898      	ldr	r0, [r3, #8]
   d68ea:	b118      	cbz	r0, d68f4 <_ZN9TimeClass12hourFormat12El+0x14>
		return 12;	//midnight
	else if( calendar_time_cache.tm_hour > 12)
   d68ec:	280c      	cmp	r0, #12
   d68ee:	dd02      	ble.n	d68f6 <_ZN9TimeClass12hourFormat12El+0x16>
		return calendar_time_cache.tm_hour - 12 ;
   d68f0:	380c      	subs	r0, #12
   d68f2:	bd08      	pop	{r3, pc}
/* the hour for the given time in 12 hour format */
int TimeClass::hourFormat12(time_t t)
{
	Refresh_UnixTime_Cache(t);
	if(calendar_time_cache.tm_hour == 0)
		return 12;	//midnight
   d68f4:	200c      	movs	r0, #12
	else if( calendar_time_cache.tm_hour > 12)
		return calendar_time_cache.tm_hour - 12 ;
	else
		return calendar_time_cache.tm_hour ;
}
   d68f6:	bd08      	pop	{r3, pc}
   d68f8:	2003e594 	.word	0x2003e594

000d68fc <_ZN9TimeClass4zoneEf>:
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
	if(GMT_Offset < -12 || GMT_Offset > 14)
   d68fc:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
   d6900:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d6904:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d6908:	d40f      	bmi.n	d692a <_ZN9TimeClass4zoneEf+0x2e>
   d690a:	eef2 7a0c 	vmov.f32	s15, #44	; 0x41600000  14.0
   d690e:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d6912:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d6916:	dc08      	bgt.n	d692a <_ZN9TimeClass4zoneEf+0x2e>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
   d6918:	eddf 7a04 	vldr	s15, [pc, #16]	; d692c <_ZN9TimeClass4zoneEf+0x30>
   d691c:	4b04      	ldr	r3, [pc, #16]	; (d6930 <_ZN9TimeClass4zoneEf+0x34>)
   d691e:	ee20 0a27 	vmul.f32	s0, s0, s15
   d6922:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   d6926:	ed83 0a00 	vstr	s0, [r3]
   d692a:	4770      	bx	lr
   d692c:	45610000 	.word	0x45610000
   d6930:	2003e5c4 	.word	0x2003e5c4

000d6934 <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d6934:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
   d6936:	2000      	movs	r0, #0
   d6938:	f7fe fd96 	bl	d5468 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
   d693c:	4604      	mov	r4, r0
   d693e:	b968      	cbnz	r0, d695c <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d6940:	f7fe fe7a 	bl	d5638 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d6944:	2801      	cmp	r0, #1
   d6946:	d10b      	bne.n	d6960 <_ZN9TimeClass7isValidEv+0x2c>
   d6948:	4620      	mov	r0, r4
   d694a:	f7fe fe9d 	bl	d5688 <system_thread_get_state>
   d694e:	b938      	cbnz	r0, d6960 <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
   d6950:	f7ff ffb8 	bl	d68c4 <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d6954:	b930      	cbnz	r0, d6964 <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
   d6956:	f7fe feb3 	bl	d56c0 <spark_process>
   d695a:	e7f9      	b.n	d6950 <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
   d695c:	2001      	movs	r0, #1
   d695e:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
   d6960:	2000      	movs	r0, #0
   d6962:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
   d6964:	f7ff ffae 	bl	d68c4 <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
   d6968:	2000      	movs	r0, #0
   d696a:	f7fe fd7d 	bl	d5468 <HAL_RTC_Time_Is_Valid>
   d696e:	3000      	adds	r0, #0
   d6970:	bf18      	it	ne
   d6972:	2001      	movne	r0, #1
    }
    return rtcstate;
}
   d6974:	bd10      	pop	{r4, pc}

000d6976 <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
   d6976:	b508      	push	{r3, lr}
    (void)isValid();
   d6978:	f7ff ffdc 	bl	d6934 <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
   d697c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
   d6980:	f7fe bd6a 	b.w	d5458 <HAL_RTC_Get_UnixTime>

000d6984 <_ZN9TimeClass12hourFormat12Ev>:
	return calendar_time_cache.tm_hour;
}

/* current hour in 12 hour format */
int TimeClass::hourFormat12()
{
   d6984:	b508      	push	{r3, lr}
	return hourFormat12(now());
   d6986:	f7ff fff6 	bl	d6976 <_ZN9TimeClass3nowEv>
}
   d698a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
}

/* current hour in 12 hour format */
int TimeClass::hourFormat12()
{
	return hourFormat12(now());
   d698e:	f7ff bfa7 	b.w	d68e0 <_ZN9TimeClass12hourFormat12El>
	...

000d6994 <_ZN9TimeClass6minuteEv>:
	return (hour(t) >= 12);
}

/* current minute */
int TimeClass::minute()
{
   d6994:	b508      	push	{r3, lr}
	return minute(now());
   d6996:	f7ff ffee 	bl	d6976 <_ZN9TimeClass3nowEv>
}

/* the minute for the given time */
int TimeClass::minute(time_t t)
{
	Refresh_UnixTime_Cache(t);
   d699a:	f7ff ff61 	bl	d6860 <_ZL22Refresh_UnixTime_Cachel>

/* current minute */
int TimeClass::minute()
{
	return minute(now());
}
   d699e:	4b01      	ldr	r3, [pc, #4]	; (d69a4 <_ZN9TimeClass6minuteEv+0x10>)
   d69a0:	6858      	ldr	r0, [r3, #4]
   d69a2:	bd08      	pop	{r3, pc}
   d69a4:	2003e594 	.word	0x2003e594

000d69a8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d69a8:	4b02      	ldr	r3, [pc, #8]	; (d69b4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d69aa:	681a      	ldr	r2, [r3, #0]
   d69ac:	4b02      	ldr	r3, [pc, #8]	; (d69b8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d69ae:	601a      	str	r2, [r3, #0]
   d69b0:	4770      	bx	lr
   d69b2:	bf00      	nop
   d69b4:	2003e108 	.word	0x2003e108
   d69b8:	2003e5b8 	.word	0x2003e5b8

000d69bc <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d69bc:	4770      	bx	lr

000d69be <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d69be:	7441      	strb	r1, [r0, #17]
   d69c0:	4770      	bx	lr

000d69c2 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d69c2:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d69c4:	7c00      	ldrb	r0, [r0, #16]
   d69c6:	f7fe fdef 	bl	d55a8 <HAL_USART_Available_Data_For_Write>
}
   d69ca:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d69ce:	bd08      	pop	{r3, pc}

000d69d0 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d69d0:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d69d2:	7c00      	ldrb	r0, [r0, #16]
   d69d4:	f7fe fdc8 	bl	d5568 <HAL_USART_Available_Data>
}
   d69d8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d69dc:	bd08      	pop	{r3, pc}

000d69de <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d69de:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d69e0:	7c00      	ldrb	r0, [r0, #16]
   d69e2:	f7fe fdd1 	bl	d5588 <HAL_USART_Peek_Data>
}
   d69e6:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d69ea:	bf28      	it	cs
   d69ec:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d69f0:	bd08      	pop	{r3, pc}

000d69f2 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d69f2:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d69f4:	7c00      	ldrb	r0, [r0, #16]
   d69f6:	f7fe fdbf 	bl	d5578 <HAL_USART_Read_Data>
}
   d69fa:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d69fe:	bf28      	it	cs
   d6a00:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d6a04:	bd08      	pop	{r3, pc}

000d6a06 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d6a06:	7c00      	ldrb	r0, [r0, #16]
   d6a08:	f7fe bdc6 	b.w	d5598 <HAL_USART_Flush_Data>

000d6a0c <_ZN11USARTSerialD0Ev>:
   d6a0c:	b510      	push	{r4, lr}
   d6a0e:	2114      	movs	r1, #20
   d6a10:	4604      	mov	r4, r0
   d6a12:	f000 f9a6 	bl	d6d62 <_ZdlPvj>
   d6a16:	4620      	mov	r0, r4
   d6a18:	bd10      	pop	{r4, pc}

000d6a1a <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d6a1a:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d6a1c:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d6a1e:	4604      	mov	r4, r0
   d6a20:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d6a22:	b925      	cbnz	r5, d6a2e <_ZN11USARTSerial5writeEh+0x14>
   d6a24:	7c00      	ldrb	r0, [r0, #16]
   d6a26:	f7fe fdbf 	bl	d55a8 <HAL_USART_Available_Data_For_Write>
   d6a2a:	2800      	cmp	r0, #0
   d6a2c:	dd05      	ble.n	d6a3a <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d6a2e:	4631      	mov	r1, r6
   d6a30:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d6a32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d6a36:	f7fe bd8f 	b.w	d5558 <HAL_USART_Write_Data>
  }
  return 0;
}
   d6a3a:	4628      	mov	r0, r5
   d6a3c:	bd70      	pop	{r4, r5, r6, pc}
	...

000d6a40 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d6a40:	b510      	push	{r4, lr}
   d6a42:	4604      	mov	r4, r0
   d6a44:	4608      	mov	r0, r1
   d6a46:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d6a48:	2200      	movs	r2, #0
   d6a4a:	6062      	str	r2, [r4, #4]
   d6a4c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d6a50:	60a2      	str	r2, [r4, #8]
   d6a52:	4a05      	ldr	r2, [pc, #20]	; (d6a68 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d6a54:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d6a56:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d6a58:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d6a5a:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d6a5c:	461a      	mov	r2, r3
   d6a5e:	f7fe fd73 	bl	d5548 <HAL_USART_Init>
}
   d6a62:	4620      	mov	r0, r4
   d6a64:	bd10      	pop	{r4, pc}
   d6a66:	bf00      	nop
   d6a68:	000dab04 	.word	0x000dab04

000d6a6c <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d6a6c:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d6a6e:	4d0c      	ldr	r5, [pc, #48]	; (d6aa0 <_Z22__fetch_global_Serial1v+0x34>)
   d6a70:	6829      	ldr	r1, [r5, #0]
   d6a72:	f011 0401 	ands.w	r4, r1, #1
   d6a76:	d111      	bne.n	d6a9c <_Z22__fetch_global_Serial1v+0x30>
   d6a78:	4628      	mov	r0, r5
   d6a7a:	f7fd fb14 	bl	d40a6 <__cxa_guard_acquire>
   d6a7e:	b168      	cbz	r0, d6a9c <_Z22__fetch_global_Serial1v+0x30>
   d6a80:	4a08      	ldr	r2, [pc, #32]	; (d6aa4 <_Z22__fetch_global_Serial1v+0x38>)
   d6a82:	4b09      	ldr	r3, [pc, #36]	; (d6aa8 <_Z22__fetch_global_Serial1v+0x3c>)
   d6a84:	4809      	ldr	r0, [pc, #36]	; (d6aac <_Z22__fetch_global_Serial1v+0x40>)
   d6a86:	4621      	mov	r1, r4
   d6a88:	f7ff ffda 	bl	d6a40 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d6a8c:	4628      	mov	r0, r5
   d6a8e:	f7fd fb0f 	bl	d40b0 <__cxa_guard_release>
   d6a92:	4a07      	ldr	r2, [pc, #28]	; (d6ab0 <_Z22__fetch_global_Serial1v+0x44>)
   d6a94:	4907      	ldr	r1, [pc, #28]	; (d6ab4 <_Z22__fetch_global_Serial1v+0x48>)
   d6a96:	4805      	ldr	r0, [pc, #20]	; (d6aac <_Z22__fetch_global_Serial1v+0x40>)
   d6a98:	f000 f95e 	bl	d6d58 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d6a9c:	4803      	ldr	r0, [pc, #12]	; (d6aac <_Z22__fetch_global_Serial1v+0x40>)
   d6a9e:	bd38      	pop	{r3, r4, r5, pc}
   d6aa0:	2003e660 	.word	0x2003e660
   d6aa4:	2003e664 	.word	0x2003e664
   d6aa8:	2003e5dc 	.word	0x2003e5dc
   d6aac:	2003e5c8 	.word	0x2003e5c8
   d6ab0:	2003e1f8 	.word	0x2003e1f8
   d6ab4:	000d69bd 	.word	0x000d69bd

000d6ab8 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d6ab8:	7441      	strb	r1, [r0, #17]
   d6aba:	4770      	bx	lr

000d6abc <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d6abc:	4770      	bx	lr

000d6abe <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d6abe:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d6ac0:	2100      	movs	r1, #0
   d6ac2:	7c00      	ldrb	r0, [r0, #16]
   d6ac4:	f7fe fd98 	bl	d55f8 <HAL_USB_USART_Receive_Data>
}
   d6ac8:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6acc:	bf28      	it	cs
   d6ace:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d6ad2:	bd08      	pop	{r3, pc}

000d6ad4 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d6ad4:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d6ad6:	2101      	movs	r1, #1
   d6ad8:	7c00      	ldrb	r0, [r0, #16]
   d6ada:	f7fe fd8d 	bl	d55f8 <HAL_USB_USART_Receive_Data>
}
   d6ade:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6ae2:	bf28      	it	cs
   d6ae4:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d6ae8:	bd08      	pop	{r3, pc}

000d6aea <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d6aea:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d6aec:	7c00      	ldrb	r0, [r0, #16]
   d6aee:	f7fe fd7b 	bl	d55e8 <HAL_USB_USART_Available_Data_For_Write>
}
   d6af2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6af6:	bd08      	pop	{r3, pc}

000d6af8 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d6af8:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d6afa:	7c00      	ldrb	r0, [r0, #16]
   d6afc:	f7fe fd6c 	bl	d55d8 <HAL_USB_USART_Available_Data>
}
   d6b00:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6b04:	bd08      	pop	{r3, pc}

000d6b06 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d6b06:	7c00      	ldrb	r0, [r0, #16]
   d6b08:	f7fe bd86 	b.w	d5618 <HAL_USB_USART_Flush_Data>

000d6b0c <_ZN9USBSerialD0Ev>:
   d6b0c:	b510      	push	{r4, lr}
   d6b0e:	2114      	movs	r1, #20
   d6b10:	4604      	mov	r4, r0
   d6b12:	f000 f926 	bl	d6d62 <_ZdlPvj>
   d6b16:	4620      	mov	r0, r4
   d6b18:	bd10      	pop	{r4, pc}

000d6b1a <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d6b1a:	b538      	push	{r3, r4, r5, lr}
   d6b1c:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6b1e:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d6b20:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6b22:	f7fe fd61 	bl	d55e8 <HAL_USB_USART_Available_Data_For_Write>
   d6b26:	2800      	cmp	r0, #0
   d6b28:	dc01      	bgt.n	d6b2e <_ZN9USBSerial5writeEh+0x14>
   d6b2a:	7c60      	ldrb	r0, [r4, #17]
   d6b2c:	b128      	cbz	r0, d6b3a <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d6b2e:	4629      	mov	r1, r5
   d6b30:	7c20      	ldrb	r0, [r4, #16]
   d6b32:	f7fe fd69 	bl	d5608 <HAL_USB_USART_Send_Data>
   d6b36:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d6b3a:	bd38      	pop	{r3, r4, r5, pc}

000d6b3c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6b3c:	b510      	push	{r4, lr}
   d6b3e:	4604      	mov	r4, r0
   d6b40:	2300      	movs	r3, #0
   d6b42:	6063      	str	r3, [r4, #4]
   d6b44:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6b48:	60a3      	str	r3, [r4, #8]
   d6b4a:	4b05      	ldr	r3, [pc, #20]	; (d6b60 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d6b4c:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d6b4e:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6b50:	4608      	mov	r0, r1
{
  _serial = serial;
   d6b52:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d6b54:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d6b56:	4611      	mov	r1, r2
   d6b58:	f7fe fd2e 	bl	d55b8 <HAL_USB_USART_Init>
}
   d6b5c:	4620      	mov	r0, r4
   d6b5e:	bd10      	pop	{r4, pc}
   d6b60:	000dab34 	.word	0x000dab34

000d6b64 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d6b64:	2200      	movs	r2, #0
   d6b66:	7c00      	ldrb	r0, [r0, #16]
   d6b68:	f7fe bd2e 	b.w	d55c8 <HAL_USB_USART_Begin>

000d6b6c <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d6b6c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d6b6e:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d6b70:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d6b72:	2100      	movs	r1, #0
   d6b74:	f001 f863 	bl	d7c3e <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d6b78:	4620      	mov	r0, r4
   d6b7a:	bd10      	pop	{r4, pc}

000d6b7c <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d6b7c:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6b7e:	4d0e      	ldr	r5, [pc, #56]	; (d6bb8 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d6b80:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d6b82:	a801      	add	r0, sp, #4
   d6b84:	f7ff fff2 	bl	d6b6c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6b88:	6829      	ldr	r1, [r5, #0]
   d6b8a:	f011 0401 	ands.w	r4, r1, #1
   d6b8e:	d110      	bne.n	d6bb2 <_Z16_fetch_usbserialv+0x36>
   d6b90:	4628      	mov	r0, r5
   d6b92:	f7fd fa88 	bl	d40a6 <__cxa_guard_acquire>
   d6b96:	b160      	cbz	r0, d6bb2 <_Z16_fetch_usbserialv+0x36>
   d6b98:	aa01      	add	r2, sp, #4
   d6b9a:	4621      	mov	r1, r4
   d6b9c:	4807      	ldr	r0, [pc, #28]	; (d6bbc <_Z16_fetch_usbserialv+0x40>)
   d6b9e:	f7ff ffcd 	bl	d6b3c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d6ba2:	4628      	mov	r0, r5
   d6ba4:	f7fd fa84 	bl	d40b0 <__cxa_guard_release>
   d6ba8:	4a05      	ldr	r2, [pc, #20]	; (d6bc0 <_Z16_fetch_usbserialv+0x44>)
   d6baa:	4906      	ldr	r1, [pc, #24]	; (d6bc4 <_Z16_fetch_usbserialv+0x48>)
   d6bac:	4803      	ldr	r0, [pc, #12]	; (d6bbc <_Z16_fetch_usbserialv+0x40>)
   d6bae:	f000 f8d3 	bl	d6d58 <__aeabi_atexit>
	return _usbserial;
}
   d6bb2:	4802      	ldr	r0, [pc, #8]	; (d6bbc <_Z16_fetch_usbserialv+0x40>)
   d6bb4:	b007      	add	sp, #28
   d6bb6:	bd30      	pop	{r4, r5, pc}
   d6bb8:	2003e6e8 	.word	0x2003e6e8
   d6bbc:	2003e6ec 	.word	0x2003e6ec
   d6bc0:	2003e1f8 	.word	0x2003e1f8
   d6bc4:	000d6abd 	.word	0x000d6abd

000d6bc8 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d6bc8:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d6bca:	4b0c      	ldr	r3, [pc, #48]	; (d6bfc <serialEventRun+0x34>)
   d6bcc:	b133      	cbz	r3, d6bdc <serialEventRun+0x14>
   d6bce:	f7ff ffd5 	bl	d6b7c <_Z16_fetch_usbserialv>
   d6bd2:	6803      	ldr	r3, [r0, #0]
   d6bd4:	691b      	ldr	r3, [r3, #16]
   d6bd6:	4798      	blx	r3
   d6bd8:	2800      	cmp	r0, #0
   d6bda:	dc09      	bgt.n	d6bf0 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d6bdc:	4b08      	ldr	r3, [pc, #32]	; (d6c00 <serialEventRun+0x38>)
   d6bde:	b163      	cbz	r3, d6bfa <serialEventRun+0x32>
   d6be0:	f7ff ff44 	bl	d6a6c <_Z22__fetch_global_Serial1v>
   d6be4:	6803      	ldr	r3, [r0, #0]
   d6be6:	691b      	ldr	r3, [r3, #16]
   d6be8:	4798      	blx	r3
   d6bea:	2800      	cmp	r0, #0
   d6bec:	dc03      	bgt.n	d6bf6 <serialEventRun+0x2e>
   d6bee:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d6bf0:	f3af 8000 	nop.w
   d6bf4:	e7f2      	b.n	d6bdc <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d6bf6:	f3af 8000 	nop.w
   d6bfa:	bd08      	pop	{r3, pc}
	...

000d6c04 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d6c04:	b508      	push	{r3, lr}
	serialEventRun();
   d6c06:	f7ff ffdf 	bl	d6bc8 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d6c0a:	f7fe fc1d 	bl	d5448 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d6c0e:	4b01      	ldr	r3, [pc, #4]	; (d6c14 <_post_loop+0x10>)
   d6c10:	6018      	str	r0, [r3, #0]
   d6c12:	bd08      	pop	{r3, pc}
   d6c14:	2003e708 	.word	0x2003e708

000d6c18 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d6c18:	4802      	ldr	r0, [pc, #8]	; (d6c24 <_Z33system_initialize_user_backup_ramv+0xc>)
   d6c1a:	4a03      	ldr	r2, [pc, #12]	; (d6c28 <_Z33system_initialize_user_backup_ramv+0x10>)
   d6c1c:	4903      	ldr	r1, [pc, #12]	; (d6c2c <_Z33system_initialize_user_backup_ramv+0x14>)
   d6c1e:	1a12      	subs	r2, r2, r0
   d6c20:	f001 b802 	b.w	d7c28 <memcpy>
   d6c24:	2003f400 	.word	0x2003f400
   d6c28:	2003f404 	.word	0x2003f404
   d6c2c:	000daf10 	.word	0x000daf10

000d6c30 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d6c30:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6c32:	2300      	movs	r3, #0
   d6c34:	9300      	str	r3, [sp, #0]
   d6c36:	461a      	mov	r2, r3
   d6c38:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6c3c:	f7fe fd36 	bl	d56ac <system_ctrl_set_result>
}
   d6c40:	b003      	add	sp, #12
   d6c42:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d6c48 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d6c48:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d6c4a:	8843      	ldrh	r3, [r0, #2]
   d6c4c:	2b0a      	cmp	r3, #10
   d6c4e:	d008      	beq.n	d6c62 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d6c50:	2b50      	cmp	r3, #80	; 0x50
   d6c52:	d109      	bne.n	d6c68 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d6c54:	4b09      	ldr	r3, [pc, #36]	; (d6c7c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d6c56:	681b      	ldr	r3, [r3, #0]
   d6c58:	b13b      	cbz	r3, d6c6a <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d6c5a:	b003      	add	sp, #12
   d6c5c:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d6c60:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d6c62:	f7ff ffe5 	bl	d6c30 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d6c66:	e006      	b.n	d6c76 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6c68:	2300      	movs	r3, #0
   d6c6a:	9300      	str	r3, [sp, #0]
   d6c6c:	461a      	mov	r2, r3
   d6c6e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6c72:	f7fe fd1b 	bl	d56ac <system_ctrl_set_result>
        break;
    }
}
   d6c76:	b003      	add	sp, #12
   d6c78:	f85d fb04 	ldr.w	pc, [sp], #4
   d6c7c:	2003e700 	.word	0x2003e700

000d6c80 <module_user_init_hook>:

void module_user_init_hook()
{
   d6c80:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d6c82:	4c10      	ldr	r4, [pc, #64]	; (d6cc4 <module_user_init_hook+0x44>)
   d6c84:	4d10      	ldr	r5, [pc, #64]	; (d6cc8 <module_user_init_hook+0x48>)
   d6c86:	6823      	ldr	r3, [r4, #0]
   d6c88:	42ab      	cmp	r3, r5
   d6c8a:	4b10      	ldr	r3, [pc, #64]	; (d6ccc <module_user_init_hook+0x4c>)
   d6c8c:	bf0c      	ite	eq
   d6c8e:	2201      	moveq	r2, #1
   d6c90:	2200      	movne	r2, #0
   d6c92:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d6c94:	d002      	beq.n	d6c9c <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d6c96:	f7ff ffbf 	bl	d6c18 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d6c9a:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d6c9c:	f7fe fbcc 	bl	d5438 <HAL_RNG_GetRandomNumber>
   d6ca0:	4604      	mov	r4, r0
    srand(seed);
   d6ca2:	f000 ffd5 	bl	d7c50 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d6ca6:	4b0a      	ldr	r3, [pc, #40]	; (d6cd0 <module_user_init_hook+0x50>)
   d6ca8:	b113      	cbz	r3, d6cb0 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d6caa:	4620      	mov	r0, r4
   d6cac:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d6cb0:	2100      	movs	r1, #0
   d6cb2:	4807      	ldr	r0, [pc, #28]	; (d6cd0 <module_user_init_hook+0x50>)
   d6cb4:	f7fe fd34 	bl	d5720 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d6cb8:	2100      	movs	r1, #0
   d6cba:	4806      	ldr	r0, [pc, #24]	; (d6cd4 <module_user_init_hook+0x54>)
}
   d6cbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d6cc0:	f7fe bcea 	b.w	d5698 <system_ctrl_set_app_request_handler>
   d6cc4:	2003f400 	.word	0x2003f400
   d6cc8:	9a271c1e 	.word	0x9a271c1e
   d6ccc:	2003e704 	.word	0x2003e704
   d6cd0:	00000000 	.word	0x00000000
   d6cd4:	000d6c49 	.word	0x000d6c49

000d6cd8 <_Z17acquireWireBufferv>:
   d6cd8:	b570      	push	{r4, r5, r6, lr}
   d6cda:	4604      	mov	r4, r0
   d6cdc:	2514      	movs	r5, #20
   d6cde:	462a      	mov	r2, r5
   d6ce0:	4e09      	ldr	r6, [pc, #36]	; (d6d08 <_Z17acquireWireBufferv+0x30>)
   d6ce2:	2100      	movs	r1, #0
   d6ce4:	f000 ffab 	bl	d7c3e <memset>
   d6ce8:	8025      	strh	r5, [r4, #0]
   d6cea:	2520      	movs	r5, #32
   d6cec:	4631      	mov	r1, r6
   d6cee:	60a5      	str	r5, [r4, #8]
   d6cf0:	6125      	str	r5, [r4, #16]
   d6cf2:	4628      	mov	r0, r5
   d6cf4:	f000 f84f 	bl	d6d96 <_ZnajRKSt9nothrow_t>
   d6cf8:	4631      	mov	r1, r6
   d6cfa:	6060      	str	r0, [r4, #4]
   d6cfc:	4628      	mov	r0, r5
   d6cfe:	f000 f84a 	bl	d6d96 <_ZnajRKSt9nothrow_t>
   d6d02:	60e0      	str	r0, [r4, #12]
   d6d04:	4620      	mov	r0, r4
   d6d06:	bd70      	pop	{r4, r5, r6, pc}
   d6d08:	000dab5c 	.word	0x000dab5c

000d6d0c <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d6d0c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d6d0e:	4d0e      	ldr	r5, [pc, #56]	; (d6d48 <_Z19__fetch_global_Wirev+0x3c>)
   d6d10:	6829      	ldr	r1, [r5, #0]
   d6d12:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d6d16:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d6d18:	d113      	bne.n	d6d42 <_Z19__fetch_global_Wirev+0x36>
   d6d1a:	4628      	mov	r0, r5
   d6d1c:	f7fd f9c3 	bl	d40a6 <__cxa_guard_acquire>
   d6d20:	b178      	cbz	r0, d6d42 <_Z19__fetch_global_Wirev+0x36>
   d6d22:	a801      	add	r0, sp, #4
   d6d24:	f7ff ffd8 	bl	d6cd8 <_Z17acquireWireBufferv>
   d6d28:	aa01      	add	r2, sp, #4
   d6d2a:	4621      	mov	r1, r4
   d6d2c:	4807      	ldr	r0, [pc, #28]	; (d6d4c <_Z19__fetch_global_Wirev+0x40>)
   d6d2e:	f7ff f98d 	bl	d604c <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d6d32:	4628      	mov	r0, r5
   d6d34:	f7fd f9bc 	bl	d40b0 <__cxa_guard_release>
   d6d38:	4a05      	ldr	r2, [pc, #20]	; (d6d50 <_Z19__fetch_global_Wirev+0x44>)
   d6d3a:	4906      	ldr	r1, [pc, #24]	; (d6d54 <_Z19__fetch_global_Wirev+0x48>)
   d6d3c:	4803      	ldr	r0, [pc, #12]	; (d6d4c <_Z19__fetch_global_Wirev+0x40>)
   d6d3e:	f000 f80b 	bl	d6d58 <__aeabi_atexit>
	return wire;
}
   d6d42:	4802      	ldr	r0, [pc, #8]	; (d6d4c <_Z19__fetch_global_Wirev+0x40>)
   d6d44:	b007      	add	sp, #28
   d6d46:	bd30      	pop	{r4, r5, pc}
   d6d48:	2003e70c 	.word	0x2003e70c
   d6d4c:	2003e710 	.word	0x2003e710
   d6d50:	2003e1f8 	.word	0x2003e1f8
   d6d54:	000d5ff5 	.word	0x000d5ff5

000d6d58 <__aeabi_atexit>:
   d6d58:	460b      	mov	r3, r1
   d6d5a:	4601      	mov	r1, r0
   d6d5c:	4618      	mov	r0, r3
   d6d5e:	f000 be59 	b.w	d7a14 <__cxa_atexit>

000d6d62 <_ZdlPvj>:
   d6d62:	f7fd b99c 	b.w	d409e <_ZdlPv>
	...

000d6d68 <_ZSt15get_new_handlerv>:
   d6d68:	4b02      	ldr	r3, [pc, #8]	; (d6d74 <_ZSt15get_new_handlerv+0xc>)
   d6d6a:	6818      	ldr	r0, [r3, #0]
   d6d6c:	f3bf 8f5f 	dmb	sy
   d6d70:	4770      	bx	lr
   d6d72:	bf00      	nop
   d6d74:	2003e724 	.word	0x2003e724

000d6d78 <_ZnwjRKSt9nothrow_t>:
   d6d78:	b510      	push	{r4, lr}
   d6d7a:	2800      	cmp	r0, #0
   d6d7c:	bf14      	ite	ne
   d6d7e:	4604      	movne	r4, r0
   d6d80:	2401      	moveq	r4, #1
   d6d82:	4620      	mov	r0, r4
   d6d84:	f7fe fd24 	bl	d57d0 <malloc>
   d6d88:	b920      	cbnz	r0, d6d94 <_ZnwjRKSt9nothrow_t+0x1c>
   d6d8a:	f7ff ffed 	bl	d6d68 <_ZSt15get_new_handlerv>
   d6d8e:	b108      	cbz	r0, d6d94 <_ZnwjRKSt9nothrow_t+0x1c>
   d6d90:	4780      	blx	r0
   d6d92:	e7f6      	b.n	d6d82 <_ZnwjRKSt9nothrow_t+0xa>
   d6d94:	bd10      	pop	{r4, pc}

000d6d96 <_ZnajRKSt9nothrow_t>:
   d6d96:	f7ff bfef 	b.w	d6d78 <_ZnwjRKSt9nothrow_t>

000d6d9a <_ZSt25__throw_bad_function_callv>:
   d6d9a:	b508      	push	{r3, lr}
   d6d9c:	f7fe fd58 	bl	d5850 <abort>

000d6da0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d6da0:	4b24      	ldr	r3, [pc, #144]	; (d6e34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d6da2:	681a      	ldr	r2, [r3, #0]
   d6da4:	07d0      	lsls	r0, r2, #31
   d6da6:	bf5c      	itt	pl
   d6da8:	2201      	movpl	r2, #1
   d6daa:	601a      	strpl	r2, [r3, #0]
   d6dac:	4b22      	ldr	r3, [pc, #136]	; (d6e38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d6dae:	681a      	ldr	r2, [r3, #0]
   d6db0:	07d1      	lsls	r1, r2, #31
   d6db2:	bf5c      	itt	pl
   d6db4:	2201      	movpl	r2, #1
   d6db6:	601a      	strpl	r2, [r3, #0]
   d6db8:	4b20      	ldr	r3, [pc, #128]	; (d6e3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d6dba:	681a      	ldr	r2, [r3, #0]
   d6dbc:	07d2      	lsls	r2, r2, #31
   d6dbe:	bf5c      	itt	pl
   d6dc0:	2201      	movpl	r2, #1
   d6dc2:	601a      	strpl	r2, [r3, #0]
   d6dc4:	4b1e      	ldr	r3, [pc, #120]	; (d6e40 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d6dc6:	681a      	ldr	r2, [r3, #0]
   d6dc8:	07d0      	lsls	r0, r2, #31
   d6dca:	bf5c      	itt	pl
   d6dcc:	2201      	movpl	r2, #1
   d6dce:	601a      	strpl	r2, [r3, #0]
   d6dd0:	4b1c      	ldr	r3, [pc, #112]	; (d6e44 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d6dd2:	681a      	ldr	r2, [r3, #0]
   d6dd4:	07d1      	lsls	r1, r2, #31
   d6dd6:	bf5c      	itt	pl
   d6dd8:	2201      	movpl	r2, #1
   d6dda:	601a      	strpl	r2, [r3, #0]
   d6ddc:	4b1a      	ldr	r3, [pc, #104]	; (d6e48 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d6dde:	681a      	ldr	r2, [r3, #0]
   d6de0:	07d2      	lsls	r2, r2, #31
   d6de2:	bf5c      	itt	pl
   d6de4:	2201      	movpl	r2, #1
   d6de6:	601a      	strpl	r2, [r3, #0]
   d6de8:	4b18      	ldr	r3, [pc, #96]	; (d6e4c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d6dea:	681a      	ldr	r2, [r3, #0]
   d6dec:	07d0      	lsls	r0, r2, #31
   d6dee:	bf5c      	itt	pl
   d6df0:	2201      	movpl	r2, #1
   d6df2:	601a      	strpl	r2, [r3, #0]
   d6df4:	4b16      	ldr	r3, [pc, #88]	; (d6e50 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d6df6:	681a      	ldr	r2, [r3, #0]
   d6df8:	07d1      	lsls	r1, r2, #31
   d6dfa:	bf5c      	itt	pl
   d6dfc:	2201      	movpl	r2, #1
   d6dfe:	601a      	strpl	r2, [r3, #0]
   d6e00:	4b14      	ldr	r3, [pc, #80]	; (d6e54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d6e02:	681a      	ldr	r2, [r3, #0]
   d6e04:	07d2      	lsls	r2, r2, #31
   d6e06:	bf5c      	itt	pl
   d6e08:	2201      	movpl	r2, #1
   d6e0a:	601a      	strpl	r2, [r3, #0]
   d6e0c:	4b12      	ldr	r3, [pc, #72]	; (d6e58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d6e0e:	681a      	ldr	r2, [r3, #0]
   d6e10:	07d0      	lsls	r0, r2, #31
   d6e12:	bf5c      	itt	pl
   d6e14:	2201      	movpl	r2, #1
   d6e16:	601a      	strpl	r2, [r3, #0]
   d6e18:	4b10      	ldr	r3, [pc, #64]	; (d6e5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d6e1a:	681a      	ldr	r2, [r3, #0]
   d6e1c:	07d1      	lsls	r1, r2, #31
   d6e1e:	bf5c      	itt	pl
   d6e20:	2201      	movpl	r2, #1
   d6e22:	601a      	strpl	r2, [r3, #0]
   d6e24:	4b0e      	ldr	r3, [pc, #56]	; (d6e60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d6e26:	681a      	ldr	r2, [r3, #0]
   d6e28:	07d2      	lsls	r2, r2, #31
   d6e2a:	bf5c      	itt	pl
   d6e2c:	2201      	movpl	r2, #1
   d6e2e:	601a      	strpl	r2, [r3, #0]
   d6e30:	4770      	bx	lr
   d6e32:	bf00      	nop
   d6e34:	2003e754 	.word	0x2003e754
   d6e38:	2003e750 	.word	0x2003e750
   d6e3c:	2003e74c 	.word	0x2003e74c
   d6e40:	2003e748 	.word	0x2003e748
   d6e44:	2003e744 	.word	0x2003e744
   d6e48:	2003e740 	.word	0x2003e740
   d6e4c:	2003e73c 	.word	0x2003e73c
   d6e50:	2003e738 	.word	0x2003e738
   d6e54:	2003e734 	.word	0x2003e734
   d6e58:	2003e730 	.word	0x2003e730
   d6e5c:	2003e72c 	.word	0x2003e72c
   d6e60:	2003e728 	.word	0x2003e728

000d6e64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d6e64:	4b18      	ldr	r3, [pc, #96]	; (d6ec8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d6e66:	681a      	ldr	r2, [r3, #0]
   d6e68:	07d1      	lsls	r1, r2, #31
   d6e6a:	bf5c      	itt	pl
   d6e6c:	2201      	movpl	r2, #1
   d6e6e:	601a      	strpl	r2, [r3, #0]
   d6e70:	4b16      	ldr	r3, [pc, #88]	; (d6ecc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d6e72:	681a      	ldr	r2, [r3, #0]
   d6e74:	07d2      	lsls	r2, r2, #31
   d6e76:	bf5c      	itt	pl
   d6e78:	2201      	movpl	r2, #1
   d6e7a:	601a      	strpl	r2, [r3, #0]
   d6e7c:	4b14      	ldr	r3, [pc, #80]	; (d6ed0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d6e7e:	681a      	ldr	r2, [r3, #0]
   d6e80:	07d0      	lsls	r0, r2, #31
   d6e82:	bf5c      	itt	pl
   d6e84:	2201      	movpl	r2, #1
   d6e86:	601a      	strpl	r2, [r3, #0]
   d6e88:	4b12      	ldr	r3, [pc, #72]	; (d6ed4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d6e8a:	681a      	ldr	r2, [r3, #0]
   d6e8c:	07d1      	lsls	r1, r2, #31
   d6e8e:	bf5c      	itt	pl
   d6e90:	2201      	movpl	r2, #1
   d6e92:	601a      	strpl	r2, [r3, #0]
   d6e94:	4b10      	ldr	r3, [pc, #64]	; (d6ed8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d6e96:	681a      	ldr	r2, [r3, #0]
   d6e98:	07d2      	lsls	r2, r2, #31
   d6e9a:	bf5c      	itt	pl
   d6e9c:	2201      	movpl	r2, #1
   d6e9e:	601a      	strpl	r2, [r3, #0]
   d6ea0:	4b0e      	ldr	r3, [pc, #56]	; (d6edc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d6ea2:	681a      	ldr	r2, [r3, #0]
   d6ea4:	07d0      	lsls	r0, r2, #31
   d6ea6:	bf5c      	itt	pl
   d6ea8:	2201      	movpl	r2, #1
   d6eaa:	601a      	strpl	r2, [r3, #0]
   d6eac:	4b0c      	ldr	r3, [pc, #48]	; (d6ee0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d6eae:	681a      	ldr	r2, [r3, #0]
   d6eb0:	07d1      	lsls	r1, r2, #31
   d6eb2:	bf5c      	itt	pl
   d6eb4:	2201      	movpl	r2, #1
   d6eb6:	601a      	strpl	r2, [r3, #0]
   d6eb8:	4b0a      	ldr	r3, [pc, #40]	; (d6ee4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d6eba:	681a      	ldr	r2, [r3, #0]
   d6ebc:	07d2      	lsls	r2, r2, #31
   d6ebe:	bf5c      	itt	pl
   d6ec0:	2201      	movpl	r2, #1
   d6ec2:	601a      	strpl	r2, [r3, #0]
   d6ec4:	4770      	bx	lr
   d6ec6:	bf00      	nop
   d6ec8:	2003e774 	.word	0x2003e774
   d6ecc:	2003e770 	.word	0x2003e770
   d6ed0:	2003e76c 	.word	0x2003e76c
   d6ed4:	2003e768 	.word	0x2003e768
   d6ed8:	2003e764 	.word	0x2003e764
   d6edc:	2003e760 	.word	0x2003e760
   d6ee0:	2003e75c 	.word	0x2003e75c
   d6ee4:	2003e758 	.word	0x2003e758

000d6ee8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d6ee8:	4b18      	ldr	r3, [pc, #96]	; (d6f4c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d6eea:	681a      	ldr	r2, [r3, #0]
   d6eec:	07d1      	lsls	r1, r2, #31
   d6eee:	bf5c      	itt	pl
   d6ef0:	2201      	movpl	r2, #1
   d6ef2:	601a      	strpl	r2, [r3, #0]
   d6ef4:	4b16      	ldr	r3, [pc, #88]	; (d6f50 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d6ef6:	681a      	ldr	r2, [r3, #0]
   d6ef8:	07d2      	lsls	r2, r2, #31
   d6efa:	bf5c      	itt	pl
   d6efc:	2201      	movpl	r2, #1
   d6efe:	601a      	strpl	r2, [r3, #0]
   d6f00:	4b14      	ldr	r3, [pc, #80]	; (d6f54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d6f02:	681a      	ldr	r2, [r3, #0]
   d6f04:	07d0      	lsls	r0, r2, #31
   d6f06:	bf5c      	itt	pl
   d6f08:	2201      	movpl	r2, #1
   d6f0a:	601a      	strpl	r2, [r3, #0]
   d6f0c:	4b12      	ldr	r3, [pc, #72]	; (d6f58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d6f0e:	681a      	ldr	r2, [r3, #0]
   d6f10:	07d1      	lsls	r1, r2, #31
   d6f12:	bf5c      	itt	pl
   d6f14:	2201      	movpl	r2, #1
   d6f16:	601a      	strpl	r2, [r3, #0]
   d6f18:	4b10      	ldr	r3, [pc, #64]	; (d6f5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d6f1a:	681a      	ldr	r2, [r3, #0]
   d6f1c:	07d2      	lsls	r2, r2, #31
   d6f1e:	bf5c      	itt	pl
   d6f20:	2201      	movpl	r2, #1
   d6f22:	601a      	strpl	r2, [r3, #0]
   d6f24:	4b0e      	ldr	r3, [pc, #56]	; (d6f60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d6f26:	681a      	ldr	r2, [r3, #0]
   d6f28:	07d0      	lsls	r0, r2, #31
   d6f2a:	bf5c      	itt	pl
   d6f2c:	2201      	movpl	r2, #1
   d6f2e:	601a      	strpl	r2, [r3, #0]
   d6f30:	4b0c      	ldr	r3, [pc, #48]	; (d6f64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d6f32:	681a      	ldr	r2, [r3, #0]
   d6f34:	07d1      	lsls	r1, r2, #31
   d6f36:	bf5c      	itt	pl
   d6f38:	2201      	movpl	r2, #1
   d6f3a:	601a      	strpl	r2, [r3, #0]
   d6f3c:	4b0a      	ldr	r3, [pc, #40]	; (d6f68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d6f3e:	681a      	ldr	r2, [r3, #0]
   d6f40:	07d2      	lsls	r2, r2, #31
   d6f42:	bf5c      	itt	pl
   d6f44:	2201      	movpl	r2, #1
   d6f46:	601a      	strpl	r2, [r3, #0]
   d6f48:	4770      	bx	lr
   d6f4a:	bf00      	nop
   d6f4c:	2003e794 	.word	0x2003e794
   d6f50:	2003e790 	.word	0x2003e790
   d6f54:	2003e78c 	.word	0x2003e78c
   d6f58:	2003e788 	.word	0x2003e788
   d6f5c:	2003e784 	.word	0x2003e784
   d6f60:	2003e780 	.word	0x2003e780
   d6f64:	2003e77c 	.word	0x2003e77c
   d6f68:	2003e778 	.word	0x2003e778

000d6f6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d6f6c:	4b24      	ldr	r3, [pc, #144]	; (d7000 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d6f6e:	681a      	ldr	r2, [r3, #0]
   d6f70:	07d0      	lsls	r0, r2, #31
   d6f72:	bf5c      	itt	pl
   d6f74:	2201      	movpl	r2, #1
   d6f76:	601a      	strpl	r2, [r3, #0]
   d6f78:	4b22      	ldr	r3, [pc, #136]	; (d7004 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d6f7a:	681a      	ldr	r2, [r3, #0]
   d6f7c:	07d1      	lsls	r1, r2, #31
   d6f7e:	bf5c      	itt	pl
   d6f80:	2201      	movpl	r2, #1
   d6f82:	601a      	strpl	r2, [r3, #0]
   d6f84:	4b20      	ldr	r3, [pc, #128]	; (d7008 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d6f86:	681a      	ldr	r2, [r3, #0]
   d6f88:	07d2      	lsls	r2, r2, #31
   d6f8a:	bf5c      	itt	pl
   d6f8c:	2201      	movpl	r2, #1
   d6f8e:	601a      	strpl	r2, [r3, #0]
   d6f90:	4b1e      	ldr	r3, [pc, #120]	; (d700c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d6f92:	681a      	ldr	r2, [r3, #0]
   d6f94:	07d0      	lsls	r0, r2, #31
   d6f96:	bf5c      	itt	pl
   d6f98:	2201      	movpl	r2, #1
   d6f9a:	601a      	strpl	r2, [r3, #0]
   d6f9c:	4b1c      	ldr	r3, [pc, #112]	; (d7010 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d6f9e:	681a      	ldr	r2, [r3, #0]
   d6fa0:	07d1      	lsls	r1, r2, #31
   d6fa2:	bf5c      	itt	pl
   d6fa4:	2201      	movpl	r2, #1
   d6fa6:	601a      	strpl	r2, [r3, #0]
   d6fa8:	4b1a      	ldr	r3, [pc, #104]	; (d7014 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d6faa:	681a      	ldr	r2, [r3, #0]
   d6fac:	07d2      	lsls	r2, r2, #31
   d6fae:	bf5c      	itt	pl
   d6fb0:	2201      	movpl	r2, #1
   d6fb2:	601a      	strpl	r2, [r3, #0]
   d6fb4:	4b18      	ldr	r3, [pc, #96]	; (d7018 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d6fb6:	681a      	ldr	r2, [r3, #0]
   d6fb8:	07d0      	lsls	r0, r2, #31
   d6fba:	bf5c      	itt	pl
   d6fbc:	2201      	movpl	r2, #1
   d6fbe:	601a      	strpl	r2, [r3, #0]
   d6fc0:	4b16      	ldr	r3, [pc, #88]	; (d701c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d6fc2:	681a      	ldr	r2, [r3, #0]
   d6fc4:	07d1      	lsls	r1, r2, #31
   d6fc6:	bf5c      	itt	pl
   d6fc8:	2201      	movpl	r2, #1
   d6fca:	601a      	strpl	r2, [r3, #0]
   d6fcc:	4b14      	ldr	r3, [pc, #80]	; (d7020 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d6fce:	681a      	ldr	r2, [r3, #0]
   d6fd0:	07d2      	lsls	r2, r2, #31
   d6fd2:	bf5c      	itt	pl
   d6fd4:	2201      	movpl	r2, #1
   d6fd6:	601a      	strpl	r2, [r3, #0]
   d6fd8:	4b12      	ldr	r3, [pc, #72]	; (d7024 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d6fda:	681a      	ldr	r2, [r3, #0]
   d6fdc:	07d0      	lsls	r0, r2, #31
   d6fde:	bf5c      	itt	pl
   d6fe0:	2201      	movpl	r2, #1
   d6fe2:	601a      	strpl	r2, [r3, #0]
   d6fe4:	4b10      	ldr	r3, [pc, #64]	; (d7028 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d6fe6:	681a      	ldr	r2, [r3, #0]
   d6fe8:	07d1      	lsls	r1, r2, #31
   d6fea:	bf5c      	itt	pl
   d6fec:	2201      	movpl	r2, #1
   d6fee:	601a      	strpl	r2, [r3, #0]
   d6ff0:	4b0e      	ldr	r3, [pc, #56]	; (d702c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d6ff2:	681a      	ldr	r2, [r3, #0]
   d6ff4:	07d2      	lsls	r2, r2, #31
   d6ff6:	bf5c      	itt	pl
   d6ff8:	2201      	movpl	r2, #1
   d6ffa:	601a      	strpl	r2, [r3, #0]
   d6ffc:	4770      	bx	lr
   d6ffe:	bf00      	nop
   d7000:	2003e7c4 	.word	0x2003e7c4
   d7004:	2003e7c0 	.word	0x2003e7c0
   d7008:	2003e7bc 	.word	0x2003e7bc
   d700c:	2003e7b8 	.word	0x2003e7b8
   d7010:	2003e7b4 	.word	0x2003e7b4
   d7014:	2003e7b0 	.word	0x2003e7b0
   d7018:	2003e7ac 	.word	0x2003e7ac
   d701c:	2003e7a8 	.word	0x2003e7a8
   d7020:	2003e7a4 	.word	0x2003e7a4
   d7024:	2003e7a0 	.word	0x2003e7a0
   d7028:	2003e79c 	.word	0x2003e79c
   d702c:	2003e798 	.word	0x2003e798

000d7030 <__aeabi_drsub>:
   d7030:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d7034:	e002      	b.n	d703c <__adddf3>
   d7036:	bf00      	nop

000d7038 <__aeabi_dsub>:
   d7038:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d703c <__adddf3>:
   d703c:	b530      	push	{r4, r5, lr}
   d703e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d7042:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d7046:	ea94 0f05 	teq	r4, r5
   d704a:	bf08      	it	eq
   d704c:	ea90 0f02 	teqeq	r0, r2
   d7050:	bf1f      	itttt	ne
   d7052:	ea54 0c00 	orrsne.w	ip, r4, r0
   d7056:	ea55 0c02 	orrsne.w	ip, r5, r2
   d705a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d705e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d7062:	f000 80e2 	beq.w	d722a <__adddf3+0x1ee>
   d7066:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d706a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d706e:	bfb8      	it	lt
   d7070:	426d      	neglt	r5, r5
   d7072:	dd0c      	ble.n	d708e <__adddf3+0x52>
   d7074:	442c      	add	r4, r5
   d7076:	ea80 0202 	eor.w	r2, r0, r2
   d707a:	ea81 0303 	eor.w	r3, r1, r3
   d707e:	ea82 0000 	eor.w	r0, r2, r0
   d7082:	ea83 0101 	eor.w	r1, r3, r1
   d7086:	ea80 0202 	eor.w	r2, r0, r2
   d708a:	ea81 0303 	eor.w	r3, r1, r3
   d708e:	2d36      	cmp	r5, #54	; 0x36
   d7090:	bf88      	it	hi
   d7092:	bd30      	pophi	{r4, r5, pc}
   d7094:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d7098:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d709c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d70a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d70a4:	d002      	beq.n	d70ac <__adddf3+0x70>
   d70a6:	4240      	negs	r0, r0
   d70a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d70ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d70b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d70b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d70b8:	d002      	beq.n	d70c0 <__adddf3+0x84>
   d70ba:	4252      	negs	r2, r2
   d70bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d70c0:	ea94 0f05 	teq	r4, r5
   d70c4:	f000 80a7 	beq.w	d7216 <__adddf3+0x1da>
   d70c8:	f1a4 0401 	sub.w	r4, r4, #1
   d70cc:	f1d5 0e20 	rsbs	lr, r5, #32
   d70d0:	db0d      	blt.n	d70ee <__adddf3+0xb2>
   d70d2:	fa02 fc0e 	lsl.w	ip, r2, lr
   d70d6:	fa22 f205 	lsr.w	r2, r2, r5
   d70da:	1880      	adds	r0, r0, r2
   d70dc:	f141 0100 	adc.w	r1, r1, #0
   d70e0:	fa03 f20e 	lsl.w	r2, r3, lr
   d70e4:	1880      	adds	r0, r0, r2
   d70e6:	fa43 f305 	asr.w	r3, r3, r5
   d70ea:	4159      	adcs	r1, r3
   d70ec:	e00e      	b.n	d710c <__adddf3+0xd0>
   d70ee:	f1a5 0520 	sub.w	r5, r5, #32
   d70f2:	f10e 0e20 	add.w	lr, lr, #32
   d70f6:	2a01      	cmp	r2, #1
   d70f8:	fa03 fc0e 	lsl.w	ip, r3, lr
   d70fc:	bf28      	it	cs
   d70fe:	f04c 0c02 	orrcs.w	ip, ip, #2
   d7102:	fa43 f305 	asr.w	r3, r3, r5
   d7106:	18c0      	adds	r0, r0, r3
   d7108:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d710c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d7110:	d507      	bpl.n	d7122 <__adddf3+0xe6>
   d7112:	f04f 0e00 	mov.w	lr, #0
   d7116:	f1dc 0c00 	rsbs	ip, ip, #0
   d711a:	eb7e 0000 	sbcs.w	r0, lr, r0
   d711e:	eb6e 0101 	sbc.w	r1, lr, r1
   d7122:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d7126:	d31b      	bcc.n	d7160 <__adddf3+0x124>
   d7128:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d712c:	d30c      	bcc.n	d7148 <__adddf3+0x10c>
   d712e:	0849      	lsrs	r1, r1, #1
   d7130:	ea5f 0030 	movs.w	r0, r0, rrx
   d7134:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d7138:	f104 0401 	add.w	r4, r4, #1
   d713c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d7140:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d7144:	f080 809a 	bcs.w	d727c <__adddf3+0x240>
   d7148:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d714c:	bf08      	it	eq
   d714e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d7152:	f150 0000 	adcs.w	r0, r0, #0
   d7156:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d715a:	ea41 0105 	orr.w	r1, r1, r5
   d715e:	bd30      	pop	{r4, r5, pc}
   d7160:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d7164:	4140      	adcs	r0, r0
   d7166:	eb41 0101 	adc.w	r1, r1, r1
   d716a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d716e:	f1a4 0401 	sub.w	r4, r4, #1
   d7172:	d1e9      	bne.n	d7148 <__adddf3+0x10c>
   d7174:	f091 0f00 	teq	r1, #0
   d7178:	bf04      	itt	eq
   d717a:	4601      	moveq	r1, r0
   d717c:	2000      	moveq	r0, #0
   d717e:	fab1 f381 	clz	r3, r1
   d7182:	bf08      	it	eq
   d7184:	3320      	addeq	r3, #32
   d7186:	f1a3 030b 	sub.w	r3, r3, #11
   d718a:	f1b3 0220 	subs.w	r2, r3, #32
   d718e:	da0c      	bge.n	d71aa <__adddf3+0x16e>
   d7190:	320c      	adds	r2, #12
   d7192:	dd08      	ble.n	d71a6 <__adddf3+0x16a>
   d7194:	f102 0c14 	add.w	ip, r2, #20
   d7198:	f1c2 020c 	rsb	r2, r2, #12
   d719c:	fa01 f00c 	lsl.w	r0, r1, ip
   d71a0:	fa21 f102 	lsr.w	r1, r1, r2
   d71a4:	e00c      	b.n	d71c0 <__adddf3+0x184>
   d71a6:	f102 0214 	add.w	r2, r2, #20
   d71aa:	bfd8      	it	le
   d71ac:	f1c2 0c20 	rsble	ip, r2, #32
   d71b0:	fa01 f102 	lsl.w	r1, r1, r2
   d71b4:	fa20 fc0c 	lsr.w	ip, r0, ip
   d71b8:	bfdc      	itt	le
   d71ba:	ea41 010c 	orrle.w	r1, r1, ip
   d71be:	4090      	lslle	r0, r2
   d71c0:	1ae4      	subs	r4, r4, r3
   d71c2:	bfa2      	ittt	ge
   d71c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d71c8:	4329      	orrge	r1, r5
   d71ca:	bd30      	popge	{r4, r5, pc}
   d71cc:	ea6f 0404 	mvn.w	r4, r4
   d71d0:	3c1f      	subs	r4, #31
   d71d2:	da1c      	bge.n	d720e <__adddf3+0x1d2>
   d71d4:	340c      	adds	r4, #12
   d71d6:	dc0e      	bgt.n	d71f6 <__adddf3+0x1ba>
   d71d8:	f104 0414 	add.w	r4, r4, #20
   d71dc:	f1c4 0220 	rsb	r2, r4, #32
   d71e0:	fa20 f004 	lsr.w	r0, r0, r4
   d71e4:	fa01 f302 	lsl.w	r3, r1, r2
   d71e8:	ea40 0003 	orr.w	r0, r0, r3
   d71ec:	fa21 f304 	lsr.w	r3, r1, r4
   d71f0:	ea45 0103 	orr.w	r1, r5, r3
   d71f4:	bd30      	pop	{r4, r5, pc}
   d71f6:	f1c4 040c 	rsb	r4, r4, #12
   d71fa:	f1c4 0220 	rsb	r2, r4, #32
   d71fe:	fa20 f002 	lsr.w	r0, r0, r2
   d7202:	fa01 f304 	lsl.w	r3, r1, r4
   d7206:	ea40 0003 	orr.w	r0, r0, r3
   d720a:	4629      	mov	r1, r5
   d720c:	bd30      	pop	{r4, r5, pc}
   d720e:	fa21 f004 	lsr.w	r0, r1, r4
   d7212:	4629      	mov	r1, r5
   d7214:	bd30      	pop	{r4, r5, pc}
   d7216:	f094 0f00 	teq	r4, #0
   d721a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d721e:	bf06      	itte	eq
   d7220:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d7224:	3401      	addeq	r4, #1
   d7226:	3d01      	subne	r5, #1
   d7228:	e74e      	b.n	d70c8 <__adddf3+0x8c>
   d722a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d722e:	bf18      	it	ne
   d7230:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d7234:	d029      	beq.n	d728a <__adddf3+0x24e>
   d7236:	ea94 0f05 	teq	r4, r5
   d723a:	bf08      	it	eq
   d723c:	ea90 0f02 	teqeq	r0, r2
   d7240:	d005      	beq.n	d724e <__adddf3+0x212>
   d7242:	ea54 0c00 	orrs.w	ip, r4, r0
   d7246:	bf04      	itt	eq
   d7248:	4619      	moveq	r1, r3
   d724a:	4610      	moveq	r0, r2
   d724c:	bd30      	pop	{r4, r5, pc}
   d724e:	ea91 0f03 	teq	r1, r3
   d7252:	bf1e      	ittt	ne
   d7254:	2100      	movne	r1, #0
   d7256:	2000      	movne	r0, #0
   d7258:	bd30      	popne	{r4, r5, pc}
   d725a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d725e:	d105      	bne.n	d726c <__adddf3+0x230>
   d7260:	0040      	lsls	r0, r0, #1
   d7262:	4149      	adcs	r1, r1
   d7264:	bf28      	it	cs
   d7266:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d726a:	bd30      	pop	{r4, r5, pc}
   d726c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d7270:	bf3c      	itt	cc
   d7272:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d7276:	bd30      	popcc	{r4, r5, pc}
   d7278:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d727c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d7280:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d7284:	f04f 0000 	mov.w	r0, #0
   d7288:	bd30      	pop	{r4, r5, pc}
   d728a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d728e:	bf1a      	itte	ne
   d7290:	4619      	movne	r1, r3
   d7292:	4610      	movne	r0, r2
   d7294:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d7298:	bf1c      	itt	ne
   d729a:	460b      	movne	r3, r1
   d729c:	4602      	movne	r2, r0
   d729e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d72a2:	bf06      	itte	eq
   d72a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d72a8:	ea91 0f03 	teqeq	r1, r3
   d72ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d72b0:	bd30      	pop	{r4, r5, pc}
   d72b2:	bf00      	nop

000d72b4 <__aeabi_ui2d>:
   d72b4:	f090 0f00 	teq	r0, #0
   d72b8:	bf04      	itt	eq
   d72ba:	2100      	moveq	r1, #0
   d72bc:	4770      	bxeq	lr
   d72be:	b530      	push	{r4, r5, lr}
   d72c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d72c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d72c8:	f04f 0500 	mov.w	r5, #0
   d72cc:	f04f 0100 	mov.w	r1, #0
   d72d0:	e750      	b.n	d7174 <__adddf3+0x138>
   d72d2:	bf00      	nop

000d72d4 <__aeabi_i2d>:
   d72d4:	f090 0f00 	teq	r0, #0
   d72d8:	bf04      	itt	eq
   d72da:	2100      	moveq	r1, #0
   d72dc:	4770      	bxeq	lr
   d72de:	b530      	push	{r4, r5, lr}
   d72e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d72e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d72e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d72ec:	bf48      	it	mi
   d72ee:	4240      	negmi	r0, r0
   d72f0:	f04f 0100 	mov.w	r1, #0
   d72f4:	e73e      	b.n	d7174 <__adddf3+0x138>
   d72f6:	bf00      	nop

000d72f8 <__aeabi_f2d>:
   d72f8:	0042      	lsls	r2, r0, #1
   d72fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d72fe:	ea4f 0131 	mov.w	r1, r1, rrx
   d7302:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d7306:	bf1f      	itttt	ne
   d7308:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d730c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d7310:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d7314:	4770      	bxne	lr
   d7316:	f092 0f00 	teq	r2, #0
   d731a:	bf14      	ite	ne
   d731c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d7320:	4770      	bxeq	lr
   d7322:	b530      	push	{r4, r5, lr}
   d7324:	f44f 7460 	mov.w	r4, #896	; 0x380
   d7328:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d732c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d7330:	e720      	b.n	d7174 <__adddf3+0x138>
   d7332:	bf00      	nop

000d7334 <__aeabi_ul2d>:
   d7334:	ea50 0201 	orrs.w	r2, r0, r1
   d7338:	bf08      	it	eq
   d733a:	4770      	bxeq	lr
   d733c:	b530      	push	{r4, r5, lr}
   d733e:	f04f 0500 	mov.w	r5, #0
   d7342:	e00a      	b.n	d735a <__aeabi_l2d+0x16>

000d7344 <__aeabi_l2d>:
   d7344:	ea50 0201 	orrs.w	r2, r0, r1
   d7348:	bf08      	it	eq
   d734a:	4770      	bxeq	lr
   d734c:	b530      	push	{r4, r5, lr}
   d734e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d7352:	d502      	bpl.n	d735a <__aeabi_l2d+0x16>
   d7354:	4240      	negs	r0, r0
   d7356:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d735a:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d735e:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d7362:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d7366:	f43f aedc 	beq.w	d7122 <__adddf3+0xe6>
   d736a:	f04f 0203 	mov.w	r2, #3
   d736e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d7372:	bf18      	it	ne
   d7374:	3203      	addne	r2, #3
   d7376:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d737a:	bf18      	it	ne
   d737c:	3203      	addne	r2, #3
   d737e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d7382:	f1c2 0320 	rsb	r3, r2, #32
   d7386:	fa00 fc03 	lsl.w	ip, r0, r3
   d738a:	fa20 f002 	lsr.w	r0, r0, r2
   d738e:	fa01 fe03 	lsl.w	lr, r1, r3
   d7392:	ea40 000e 	orr.w	r0, r0, lr
   d7396:	fa21 f102 	lsr.w	r1, r1, r2
   d739a:	4414      	add	r4, r2
   d739c:	e6c1      	b.n	d7122 <__adddf3+0xe6>
   d739e:	bf00      	nop

000d73a0 <__aeabi_dmul>:
   d73a0:	b570      	push	{r4, r5, r6, lr}
   d73a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d73a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d73aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d73ae:	bf1d      	ittte	ne
   d73b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d73b4:	ea94 0f0c 	teqne	r4, ip
   d73b8:	ea95 0f0c 	teqne	r5, ip
   d73bc:	f000 f8de 	bleq	d757c <__aeabi_dmul+0x1dc>
   d73c0:	442c      	add	r4, r5
   d73c2:	ea81 0603 	eor.w	r6, r1, r3
   d73c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d73ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d73ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d73d2:	bf18      	it	ne
   d73d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d73d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d73dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d73e0:	d038      	beq.n	d7454 <__aeabi_dmul+0xb4>
   d73e2:	fba0 ce02 	umull	ip, lr, r0, r2
   d73e6:	f04f 0500 	mov.w	r5, #0
   d73ea:	fbe1 e502 	umlal	lr, r5, r1, r2
   d73ee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d73f2:	fbe0 e503 	umlal	lr, r5, r0, r3
   d73f6:	f04f 0600 	mov.w	r6, #0
   d73fa:	fbe1 5603 	umlal	r5, r6, r1, r3
   d73fe:	f09c 0f00 	teq	ip, #0
   d7402:	bf18      	it	ne
   d7404:	f04e 0e01 	orrne.w	lr, lr, #1
   d7408:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d740c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d7410:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d7414:	d204      	bcs.n	d7420 <__aeabi_dmul+0x80>
   d7416:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d741a:	416d      	adcs	r5, r5
   d741c:	eb46 0606 	adc.w	r6, r6, r6
   d7420:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d7424:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d7428:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d742c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d7430:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d7434:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d7438:	bf88      	it	hi
   d743a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d743e:	d81e      	bhi.n	d747e <__aeabi_dmul+0xde>
   d7440:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d7444:	bf08      	it	eq
   d7446:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d744a:	f150 0000 	adcs.w	r0, r0, #0
   d744e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d7452:	bd70      	pop	{r4, r5, r6, pc}
   d7454:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d7458:	ea46 0101 	orr.w	r1, r6, r1
   d745c:	ea40 0002 	orr.w	r0, r0, r2
   d7460:	ea81 0103 	eor.w	r1, r1, r3
   d7464:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d7468:	bfc2      	ittt	gt
   d746a:	ebd4 050c 	rsbsgt	r5, r4, ip
   d746e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d7472:	bd70      	popgt	{r4, r5, r6, pc}
   d7474:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7478:	f04f 0e00 	mov.w	lr, #0
   d747c:	3c01      	subs	r4, #1
   d747e:	f300 80ab 	bgt.w	d75d8 <__aeabi_dmul+0x238>
   d7482:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d7486:	bfde      	ittt	le
   d7488:	2000      	movle	r0, #0
   d748a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d748e:	bd70      	pople	{r4, r5, r6, pc}
   d7490:	f1c4 0400 	rsb	r4, r4, #0
   d7494:	3c20      	subs	r4, #32
   d7496:	da35      	bge.n	d7504 <__aeabi_dmul+0x164>
   d7498:	340c      	adds	r4, #12
   d749a:	dc1b      	bgt.n	d74d4 <__aeabi_dmul+0x134>
   d749c:	f104 0414 	add.w	r4, r4, #20
   d74a0:	f1c4 0520 	rsb	r5, r4, #32
   d74a4:	fa00 f305 	lsl.w	r3, r0, r5
   d74a8:	fa20 f004 	lsr.w	r0, r0, r4
   d74ac:	fa01 f205 	lsl.w	r2, r1, r5
   d74b0:	ea40 0002 	orr.w	r0, r0, r2
   d74b4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d74b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d74bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d74c0:	fa21 f604 	lsr.w	r6, r1, r4
   d74c4:	eb42 0106 	adc.w	r1, r2, r6
   d74c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d74cc:	bf08      	it	eq
   d74ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d74d2:	bd70      	pop	{r4, r5, r6, pc}
   d74d4:	f1c4 040c 	rsb	r4, r4, #12
   d74d8:	f1c4 0520 	rsb	r5, r4, #32
   d74dc:	fa00 f304 	lsl.w	r3, r0, r4
   d74e0:	fa20 f005 	lsr.w	r0, r0, r5
   d74e4:	fa01 f204 	lsl.w	r2, r1, r4
   d74e8:	ea40 0002 	orr.w	r0, r0, r2
   d74ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d74f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d74f4:	f141 0100 	adc.w	r1, r1, #0
   d74f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d74fc:	bf08      	it	eq
   d74fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d7502:	bd70      	pop	{r4, r5, r6, pc}
   d7504:	f1c4 0520 	rsb	r5, r4, #32
   d7508:	fa00 f205 	lsl.w	r2, r0, r5
   d750c:	ea4e 0e02 	orr.w	lr, lr, r2
   d7510:	fa20 f304 	lsr.w	r3, r0, r4
   d7514:	fa01 f205 	lsl.w	r2, r1, r5
   d7518:	ea43 0302 	orr.w	r3, r3, r2
   d751c:	fa21 f004 	lsr.w	r0, r1, r4
   d7520:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7524:	fa21 f204 	lsr.w	r2, r1, r4
   d7528:	ea20 0002 	bic.w	r0, r0, r2
   d752c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d7530:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d7534:	bf08      	it	eq
   d7536:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d753a:	bd70      	pop	{r4, r5, r6, pc}
   d753c:	f094 0f00 	teq	r4, #0
   d7540:	d10f      	bne.n	d7562 <__aeabi_dmul+0x1c2>
   d7542:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d7546:	0040      	lsls	r0, r0, #1
   d7548:	eb41 0101 	adc.w	r1, r1, r1
   d754c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7550:	bf08      	it	eq
   d7552:	3c01      	subeq	r4, #1
   d7554:	d0f7      	beq.n	d7546 <__aeabi_dmul+0x1a6>
   d7556:	ea41 0106 	orr.w	r1, r1, r6
   d755a:	f095 0f00 	teq	r5, #0
   d755e:	bf18      	it	ne
   d7560:	4770      	bxne	lr
   d7562:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d7566:	0052      	lsls	r2, r2, #1
   d7568:	eb43 0303 	adc.w	r3, r3, r3
   d756c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d7570:	bf08      	it	eq
   d7572:	3d01      	subeq	r5, #1
   d7574:	d0f7      	beq.n	d7566 <__aeabi_dmul+0x1c6>
   d7576:	ea43 0306 	orr.w	r3, r3, r6
   d757a:	4770      	bx	lr
   d757c:	ea94 0f0c 	teq	r4, ip
   d7580:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d7584:	bf18      	it	ne
   d7586:	ea95 0f0c 	teqne	r5, ip
   d758a:	d00c      	beq.n	d75a6 <__aeabi_dmul+0x206>
   d758c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d7590:	bf18      	it	ne
   d7592:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d7596:	d1d1      	bne.n	d753c <__aeabi_dmul+0x19c>
   d7598:	ea81 0103 	eor.w	r1, r1, r3
   d759c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d75a0:	f04f 0000 	mov.w	r0, #0
   d75a4:	bd70      	pop	{r4, r5, r6, pc}
   d75a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d75aa:	bf06      	itte	eq
   d75ac:	4610      	moveq	r0, r2
   d75ae:	4619      	moveq	r1, r3
   d75b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d75b4:	d019      	beq.n	d75ea <__aeabi_dmul+0x24a>
   d75b6:	ea94 0f0c 	teq	r4, ip
   d75ba:	d102      	bne.n	d75c2 <__aeabi_dmul+0x222>
   d75bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d75c0:	d113      	bne.n	d75ea <__aeabi_dmul+0x24a>
   d75c2:	ea95 0f0c 	teq	r5, ip
   d75c6:	d105      	bne.n	d75d4 <__aeabi_dmul+0x234>
   d75c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d75cc:	bf1c      	itt	ne
   d75ce:	4610      	movne	r0, r2
   d75d0:	4619      	movne	r1, r3
   d75d2:	d10a      	bne.n	d75ea <__aeabi_dmul+0x24a>
   d75d4:	ea81 0103 	eor.w	r1, r1, r3
   d75d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d75dc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d75e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d75e4:	f04f 0000 	mov.w	r0, #0
   d75e8:	bd70      	pop	{r4, r5, r6, pc}
   d75ea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d75ee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d75f2:	bd70      	pop	{r4, r5, r6, pc}

000d75f4 <__aeabi_ddiv>:
   d75f4:	b570      	push	{r4, r5, r6, lr}
   d75f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d75fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d75fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d7602:	bf1d      	ittte	ne
   d7604:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d7608:	ea94 0f0c 	teqne	r4, ip
   d760c:	ea95 0f0c 	teqne	r5, ip
   d7610:	f000 f8a7 	bleq	d7762 <__aeabi_ddiv+0x16e>
   d7614:	eba4 0405 	sub.w	r4, r4, r5
   d7618:	ea81 0e03 	eor.w	lr, r1, r3
   d761c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d7620:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d7624:	f000 8088 	beq.w	d7738 <__aeabi_ddiv+0x144>
   d7628:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d762c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d7630:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d7634:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d7638:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d763c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d7640:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d7644:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d7648:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d764c:	429d      	cmp	r5, r3
   d764e:	bf08      	it	eq
   d7650:	4296      	cmpeq	r6, r2
   d7652:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d7656:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d765a:	d202      	bcs.n	d7662 <__aeabi_ddiv+0x6e>
   d765c:	085b      	lsrs	r3, r3, #1
   d765e:	ea4f 0232 	mov.w	r2, r2, rrx
   d7662:	1ab6      	subs	r6, r6, r2
   d7664:	eb65 0503 	sbc.w	r5, r5, r3
   d7668:	085b      	lsrs	r3, r3, #1
   d766a:	ea4f 0232 	mov.w	r2, r2, rrx
   d766e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d7672:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d7676:	ebb6 0e02 	subs.w	lr, r6, r2
   d767a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d767e:	bf22      	ittt	cs
   d7680:	1ab6      	subcs	r6, r6, r2
   d7682:	4675      	movcs	r5, lr
   d7684:	ea40 000c 	orrcs.w	r0, r0, ip
   d7688:	085b      	lsrs	r3, r3, #1
   d768a:	ea4f 0232 	mov.w	r2, r2, rrx
   d768e:	ebb6 0e02 	subs.w	lr, r6, r2
   d7692:	eb75 0e03 	sbcs.w	lr, r5, r3
   d7696:	bf22      	ittt	cs
   d7698:	1ab6      	subcs	r6, r6, r2
   d769a:	4675      	movcs	r5, lr
   d769c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d76a0:	085b      	lsrs	r3, r3, #1
   d76a2:	ea4f 0232 	mov.w	r2, r2, rrx
   d76a6:	ebb6 0e02 	subs.w	lr, r6, r2
   d76aa:	eb75 0e03 	sbcs.w	lr, r5, r3
   d76ae:	bf22      	ittt	cs
   d76b0:	1ab6      	subcs	r6, r6, r2
   d76b2:	4675      	movcs	r5, lr
   d76b4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d76b8:	085b      	lsrs	r3, r3, #1
   d76ba:	ea4f 0232 	mov.w	r2, r2, rrx
   d76be:	ebb6 0e02 	subs.w	lr, r6, r2
   d76c2:	eb75 0e03 	sbcs.w	lr, r5, r3
   d76c6:	bf22      	ittt	cs
   d76c8:	1ab6      	subcs	r6, r6, r2
   d76ca:	4675      	movcs	r5, lr
   d76cc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d76d0:	ea55 0e06 	orrs.w	lr, r5, r6
   d76d4:	d018      	beq.n	d7708 <__aeabi_ddiv+0x114>
   d76d6:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d76da:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d76de:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d76e2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d76e6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d76ea:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d76ee:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d76f2:	d1c0      	bne.n	d7676 <__aeabi_ddiv+0x82>
   d76f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d76f8:	d10b      	bne.n	d7712 <__aeabi_ddiv+0x11e>
   d76fa:	ea41 0100 	orr.w	r1, r1, r0
   d76fe:	f04f 0000 	mov.w	r0, #0
   d7702:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d7706:	e7b6      	b.n	d7676 <__aeabi_ddiv+0x82>
   d7708:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d770c:	bf04      	itt	eq
   d770e:	4301      	orreq	r1, r0
   d7710:	2000      	moveq	r0, #0
   d7712:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d7716:	bf88      	it	hi
   d7718:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d771c:	f63f aeaf 	bhi.w	d747e <__aeabi_dmul+0xde>
   d7720:	ebb5 0c03 	subs.w	ip, r5, r3
   d7724:	bf04      	itt	eq
   d7726:	ebb6 0c02 	subseq.w	ip, r6, r2
   d772a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d772e:	f150 0000 	adcs.w	r0, r0, #0
   d7732:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d7736:	bd70      	pop	{r4, r5, r6, pc}
   d7738:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d773c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d7740:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d7744:	bfc2      	ittt	gt
   d7746:	ebd4 050c 	rsbsgt	r5, r4, ip
   d774a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d774e:	bd70      	popgt	{r4, r5, r6, pc}
   d7750:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7754:	f04f 0e00 	mov.w	lr, #0
   d7758:	3c01      	subs	r4, #1
   d775a:	e690      	b.n	d747e <__aeabi_dmul+0xde>
   d775c:	ea45 0e06 	orr.w	lr, r5, r6
   d7760:	e68d      	b.n	d747e <__aeabi_dmul+0xde>
   d7762:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d7766:	ea94 0f0c 	teq	r4, ip
   d776a:	bf08      	it	eq
   d776c:	ea95 0f0c 	teqeq	r5, ip
   d7770:	f43f af3b 	beq.w	d75ea <__aeabi_dmul+0x24a>
   d7774:	ea94 0f0c 	teq	r4, ip
   d7778:	d10a      	bne.n	d7790 <__aeabi_ddiv+0x19c>
   d777a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d777e:	f47f af34 	bne.w	d75ea <__aeabi_dmul+0x24a>
   d7782:	ea95 0f0c 	teq	r5, ip
   d7786:	f47f af25 	bne.w	d75d4 <__aeabi_dmul+0x234>
   d778a:	4610      	mov	r0, r2
   d778c:	4619      	mov	r1, r3
   d778e:	e72c      	b.n	d75ea <__aeabi_dmul+0x24a>
   d7790:	ea95 0f0c 	teq	r5, ip
   d7794:	d106      	bne.n	d77a4 <__aeabi_ddiv+0x1b0>
   d7796:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d779a:	f43f aefd 	beq.w	d7598 <__aeabi_dmul+0x1f8>
   d779e:	4610      	mov	r0, r2
   d77a0:	4619      	mov	r1, r3
   d77a2:	e722      	b.n	d75ea <__aeabi_dmul+0x24a>
   d77a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d77a8:	bf18      	it	ne
   d77aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d77ae:	f47f aec5 	bne.w	d753c <__aeabi_dmul+0x19c>
   d77b2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d77b6:	f47f af0d 	bne.w	d75d4 <__aeabi_dmul+0x234>
   d77ba:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d77be:	f47f aeeb 	bne.w	d7598 <__aeabi_dmul+0x1f8>
   d77c2:	e712      	b.n	d75ea <__aeabi_dmul+0x24a>

000d77c4 <__gedf2>:
   d77c4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   d77c8:	e006      	b.n	d77d8 <__cmpdf2+0x4>
   d77ca:	bf00      	nop

000d77cc <__ledf2>:
   d77cc:	f04f 0c01 	mov.w	ip, #1
   d77d0:	e002      	b.n	d77d8 <__cmpdf2+0x4>
   d77d2:	bf00      	nop

000d77d4 <__cmpdf2>:
   d77d4:	f04f 0c01 	mov.w	ip, #1
   d77d8:	f84d cd04 	str.w	ip, [sp, #-4]!
   d77dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d77e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d77e4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d77e8:	bf18      	it	ne
   d77ea:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d77ee:	d01b      	beq.n	d7828 <__cmpdf2+0x54>
   d77f0:	b001      	add	sp, #4
   d77f2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d77f6:	bf0c      	ite	eq
   d77f8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d77fc:	ea91 0f03 	teqne	r1, r3
   d7800:	bf02      	ittt	eq
   d7802:	ea90 0f02 	teqeq	r0, r2
   d7806:	2000      	moveq	r0, #0
   d7808:	4770      	bxeq	lr
   d780a:	f110 0f00 	cmn.w	r0, #0
   d780e:	ea91 0f03 	teq	r1, r3
   d7812:	bf58      	it	pl
   d7814:	4299      	cmppl	r1, r3
   d7816:	bf08      	it	eq
   d7818:	4290      	cmpeq	r0, r2
   d781a:	bf2c      	ite	cs
   d781c:	17d8      	asrcs	r0, r3, #31
   d781e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d7822:	f040 0001 	orr.w	r0, r0, #1
   d7826:	4770      	bx	lr
   d7828:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d782c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d7830:	d102      	bne.n	d7838 <__cmpdf2+0x64>
   d7832:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d7836:	d107      	bne.n	d7848 <__cmpdf2+0x74>
   d7838:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d783c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d7840:	d1d6      	bne.n	d77f0 <__cmpdf2+0x1c>
   d7842:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d7846:	d0d3      	beq.n	d77f0 <__cmpdf2+0x1c>
   d7848:	f85d 0b04 	ldr.w	r0, [sp], #4
   d784c:	4770      	bx	lr
   d784e:	bf00      	nop

000d7850 <__aeabi_cdrcmple>:
   d7850:	4684      	mov	ip, r0
   d7852:	4610      	mov	r0, r2
   d7854:	4662      	mov	r2, ip
   d7856:	468c      	mov	ip, r1
   d7858:	4619      	mov	r1, r3
   d785a:	4663      	mov	r3, ip
   d785c:	e000      	b.n	d7860 <__aeabi_cdcmpeq>
   d785e:	bf00      	nop

000d7860 <__aeabi_cdcmpeq>:
   d7860:	b501      	push	{r0, lr}
   d7862:	f7ff ffb7 	bl	d77d4 <__cmpdf2>
   d7866:	2800      	cmp	r0, #0
   d7868:	bf48      	it	mi
   d786a:	f110 0f00 	cmnmi.w	r0, #0
   d786e:	bd01      	pop	{r0, pc}

000d7870 <__aeabi_dcmpeq>:
   d7870:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7874:	f7ff fff4 	bl	d7860 <__aeabi_cdcmpeq>
   d7878:	bf0c      	ite	eq
   d787a:	2001      	moveq	r0, #1
   d787c:	2000      	movne	r0, #0
   d787e:	f85d fb08 	ldr.w	pc, [sp], #8
   d7882:	bf00      	nop

000d7884 <__aeabi_dcmplt>:
   d7884:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7888:	f7ff ffea 	bl	d7860 <__aeabi_cdcmpeq>
   d788c:	bf34      	ite	cc
   d788e:	2001      	movcc	r0, #1
   d7890:	2000      	movcs	r0, #0
   d7892:	f85d fb08 	ldr.w	pc, [sp], #8
   d7896:	bf00      	nop

000d7898 <__aeabi_dcmple>:
   d7898:	f84d ed08 	str.w	lr, [sp, #-8]!
   d789c:	f7ff ffe0 	bl	d7860 <__aeabi_cdcmpeq>
   d78a0:	bf94      	ite	ls
   d78a2:	2001      	movls	r0, #1
   d78a4:	2000      	movhi	r0, #0
   d78a6:	f85d fb08 	ldr.w	pc, [sp], #8
   d78aa:	bf00      	nop

000d78ac <__aeabi_dcmpge>:
   d78ac:	f84d ed08 	str.w	lr, [sp, #-8]!
   d78b0:	f7ff ffce 	bl	d7850 <__aeabi_cdrcmple>
   d78b4:	bf94      	ite	ls
   d78b6:	2001      	movls	r0, #1
   d78b8:	2000      	movhi	r0, #0
   d78ba:	f85d fb08 	ldr.w	pc, [sp], #8
   d78be:	bf00      	nop

000d78c0 <__aeabi_dcmpgt>:
   d78c0:	f84d ed08 	str.w	lr, [sp, #-8]!
   d78c4:	f7ff ffc4 	bl	d7850 <__aeabi_cdrcmple>
   d78c8:	bf34      	ite	cc
   d78ca:	2001      	movcc	r0, #1
   d78cc:	2000      	movcs	r0, #0
   d78ce:	f85d fb08 	ldr.w	pc, [sp], #8
   d78d2:	bf00      	nop

000d78d4 <__aeabi_d2iz>:
   d78d4:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d78d8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d78dc:	d215      	bcs.n	d790a <__aeabi_d2iz+0x36>
   d78de:	d511      	bpl.n	d7904 <__aeabi_d2iz+0x30>
   d78e0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d78e4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d78e8:	d912      	bls.n	d7910 <__aeabi_d2iz+0x3c>
   d78ea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d78ee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d78f2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d78f6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d78fa:	fa23 f002 	lsr.w	r0, r3, r2
   d78fe:	bf18      	it	ne
   d7900:	4240      	negne	r0, r0
   d7902:	4770      	bx	lr
   d7904:	f04f 0000 	mov.w	r0, #0
   d7908:	4770      	bx	lr
   d790a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d790e:	d105      	bne.n	d791c <__aeabi_d2iz+0x48>
   d7910:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d7914:	bf08      	it	eq
   d7916:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d791a:	4770      	bx	lr
   d791c:	f04f 0000 	mov.w	r0, #0
   d7920:	4770      	bx	lr
   d7922:	bf00      	nop

000d7924 <__aeabi_d2uiz>:
   d7924:	004a      	lsls	r2, r1, #1
   d7926:	d211      	bcs.n	d794c <__aeabi_d2uiz+0x28>
   d7928:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d792c:	d211      	bcs.n	d7952 <__aeabi_d2uiz+0x2e>
   d792e:	d50d      	bpl.n	d794c <__aeabi_d2uiz+0x28>
   d7930:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d7934:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d7938:	d40e      	bmi.n	d7958 <__aeabi_d2uiz+0x34>
   d793a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d793e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d7942:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d7946:	fa23 f002 	lsr.w	r0, r3, r2
   d794a:	4770      	bx	lr
   d794c:	f04f 0000 	mov.w	r0, #0
   d7950:	4770      	bx	lr
   d7952:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d7956:	d102      	bne.n	d795e <__aeabi_d2uiz+0x3a>
   d7958:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d795c:	4770      	bx	lr
   d795e:	f04f 0000 	mov.w	r0, #0
   d7962:	4770      	bx	lr

000d7964 <__aeabi_d2f>:
   d7964:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d7968:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d796c:	bf24      	itt	cs
   d796e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d7972:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d7976:	d90d      	bls.n	d7994 <__aeabi_d2f+0x30>
   d7978:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d797c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d7980:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d7984:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d7988:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d798c:	bf08      	it	eq
   d798e:	f020 0001 	biceq.w	r0, r0, #1
   d7992:	4770      	bx	lr
   d7994:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d7998:	d121      	bne.n	d79de <__aeabi_d2f+0x7a>
   d799a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d799e:	bfbc      	itt	lt
   d79a0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d79a4:	4770      	bxlt	lr
   d79a6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d79aa:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d79ae:	f1c2 0218 	rsb	r2, r2, #24
   d79b2:	f1c2 0c20 	rsb	ip, r2, #32
   d79b6:	fa10 f30c 	lsls.w	r3, r0, ip
   d79ba:	fa20 f002 	lsr.w	r0, r0, r2
   d79be:	bf18      	it	ne
   d79c0:	f040 0001 	orrne.w	r0, r0, #1
   d79c4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d79c8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d79cc:	fa03 fc0c 	lsl.w	ip, r3, ip
   d79d0:	ea40 000c 	orr.w	r0, r0, ip
   d79d4:	fa23 f302 	lsr.w	r3, r3, r2
   d79d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d79dc:	e7cc      	b.n	d7978 <__aeabi_d2f+0x14>
   d79de:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d79e2:	d107      	bne.n	d79f4 <__aeabi_d2f+0x90>
   d79e4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d79e8:	bf1e      	ittt	ne
   d79ea:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d79ee:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d79f2:	4770      	bxne	lr
   d79f4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d79f8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d79fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d7a00:	4770      	bx	lr
   d7a02:	bf00      	nop

000d7a04 <atof>:
   d7a04:	2100      	movs	r1, #0
   d7a06:	f000 bfef 	b.w	d89e8 <strtod>

000d7a0a <atoi>:
   d7a0a:	220a      	movs	r2, #10
   d7a0c:	2100      	movs	r1, #0
   d7a0e:	f001 b8a7 	b.w	d8b60 <strtol>
	...

000d7a14 <__cxa_atexit>:
   d7a14:	b510      	push	{r4, lr}
   d7a16:	4c05      	ldr	r4, [pc, #20]	; (d7a2c <__cxa_atexit+0x18>)
   d7a18:	4613      	mov	r3, r2
   d7a1a:	b12c      	cbz	r4, d7a28 <__cxa_atexit+0x14>
   d7a1c:	460a      	mov	r2, r1
   d7a1e:	4601      	mov	r1, r0
   d7a20:	2002      	movs	r0, #2
   d7a22:	f3af 8000 	nop.w
   d7a26:	bd10      	pop	{r4, pc}
   d7a28:	4620      	mov	r0, r4
   d7a2a:	bd10      	pop	{r4, pc}
   d7a2c:	00000000 	.word	0x00000000

000d7a30 <localtime>:
   d7a30:	b538      	push	{r3, r4, r5, lr}
   d7a32:	4b07      	ldr	r3, [pc, #28]	; (d7a50 <localtime+0x20>)
   d7a34:	681c      	ldr	r4, [r3, #0]
   d7a36:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d7a38:	4605      	mov	r5, r0
   d7a3a:	b91b      	cbnz	r3, d7a44 <localtime+0x14>
   d7a3c:	2024      	movs	r0, #36	; 0x24
   d7a3e:	f7fd fec7 	bl	d57d0 <malloc>
   d7a42:	63e0      	str	r0, [r4, #60]	; 0x3c
   d7a44:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d7a46:	4628      	mov	r0, r5
   d7a48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d7a4c:	f000 b802 	b.w	d7a54 <localtime_r>
   d7a50:	2003e170 	.word	0x2003e170

000d7a54 <localtime_r>:
   d7a54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7a58:	460c      	mov	r4, r1
   d7a5a:	4680      	mov	r8, r0
   d7a5c:	f001 feb0 	bl	d97c0 <__gettzinfo>
   d7a60:	4621      	mov	r1, r4
   d7a62:	4607      	mov	r7, r0
   d7a64:	4640      	mov	r0, r8
   d7a66:	f001 feaf 	bl	d97c8 <gmtime_r>
   d7a6a:	6946      	ldr	r6, [r0, #20]
   d7a6c:	f206 766c 	addw	r6, r6, #1900	; 0x76c
   d7a70:	07b3      	lsls	r3, r6, #30
   d7a72:	4604      	mov	r4, r0
   d7a74:	d105      	bne.n	d7a82 <localtime_r+0x2e>
   d7a76:	2264      	movs	r2, #100	; 0x64
   d7a78:	fb96 f3f2 	sdiv	r3, r6, r2
   d7a7c:	fb02 6313 	mls	r3, r2, r3, r6
   d7a80:	b94b      	cbnz	r3, d7a96 <localtime_r+0x42>
   d7a82:	f44f 75c8 	mov.w	r5, #400	; 0x190
   d7a86:	fb96 f3f5 	sdiv	r3, r6, r5
   d7a8a:	fb05 6513 	mls	r5, r5, r3, r6
   d7a8e:	fab5 f385 	clz	r3, r5
   d7a92:	095b      	lsrs	r3, r3, #5
   d7a94:	e000      	b.n	d7a98 <localtime_r+0x44>
   d7a96:	2301      	movs	r3, #1
   d7a98:	4a5f      	ldr	r2, [pc, #380]	; (d7c18 <localtime_r+0x1c4>)
   d7a9a:	2530      	movs	r5, #48	; 0x30
   d7a9c:	fb05 2503 	mla	r5, r5, r3, r2
   d7aa0:	f001 f9a4 	bl	d8dec <__tz_lock>
   d7aa4:	f001 f9a4 	bl	d8df0 <_tzset_unlocked>
   d7aa8:	4b5c      	ldr	r3, [pc, #368]	; (d7c1c <localtime_r+0x1c8>)
   d7aaa:	681b      	ldr	r3, [r3, #0]
   d7aac:	b1f3      	cbz	r3, d7aec <localtime_r+0x98>
   d7aae:	687b      	ldr	r3, [r7, #4]
   d7ab0:	429e      	cmp	r6, r3
   d7ab2:	d105      	bne.n	d7ac0 <localtime_r+0x6c>
   d7ab4:	6839      	ldr	r1, [r7, #0]
   d7ab6:	f8d8 3000 	ldr.w	r3, [r8]
   d7aba:	69fa      	ldr	r2, [r7, #28]
   d7abc:	b941      	cbnz	r1, d7ad0 <localtime_r+0x7c>
   d7abe:	e00a      	b.n	d7ad6 <localtime_r+0x82>
   d7ac0:	4630      	mov	r0, r6
   d7ac2:	f001 f8eb 	bl	d8c9c <__tzcalc_limits>
   d7ac6:	2800      	cmp	r0, #0
   d7ac8:	d1f4      	bne.n	d7ab4 <localtime_r+0x60>
   d7aca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d7ace:	e00d      	b.n	d7aec <localtime_r+0x98>
   d7ad0:	4293      	cmp	r3, r2
   d7ad2:	db08      	blt.n	d7ae6 <localtime_r+0x92>
   d7ad4:	e001      	b.n	d7ada <localtime_r+0x86>
   d7ad6:	4293      	cmp	r3, r2
   d7ad8:	da07      	bge.n	d7aea <localtime_r+0x96>
   d7ada:	6bba      	ldr	r2, [r7, #56]	; 0x38
   d7adc:	4293      	cmp	r3, r2
   d7ade:	bfac      	ite	ge
   d7ae0:	2300      	movge	r3, #0
   d7ae2:	2301      	movlt	r3, #1
   d7ae4:	e002      	b.n	d7aec <localtime_r+0x98>
   d7ae6:	2300      	movs	r3, #0
   d7ae8:	e000      	b.n	d7aec <localtime_r+0x98>
   d7aea:	2301      	movs	r3, #1
   d7aec:	6223      	str	r3, [r4, #32]
   d7aee:	6a23      	ldr	r3, [r4, #32]
   d7af0:	2b01      	cmp	r3, #1
   d7af2:	bf0c      	ite	eq
   d7af4:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
   d7af6:	6a39      	ldrne	r1, [r7, #32]
   d7af8:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   d7afc:	203c      	movs	r0, #60	; 0x3c
   d7afe:	fb91 f6f3 	sdiv	r6, r1, r3
   d7b02:	fb03 1316 	mls	r3, r3, r6, r1
   d7b06:	6861      	ldr	r1, [r4, #4]
   d7b08:	fb93 f2f0 	sdiv	r2, r3, r0
   d7b0c:	fb00 3012 	mls	r0, r0, r2, r3
   d7b10:	6823      	ldr	r3, [r4, #0]
   d7b12:	1a89      	subs	r1, r1, r2
   d7b14:	68a2      	ldr	r2, [r4, #8]
   d7b16:	6061      	str	r1, [r4, #4]
   d7b18:	1a1b      	subs	r3, r3, r0
   d7b1a:	1b92      	subs	r2, r2, r6
   d7b1c:	2b3b      	cmp	r3, #59	; 0x3b
   d7b1e:	6023      	str	r3, [r4, #0]
   d7b20:	60a2      	str	r2, [r4, #8]
   d7b22:	dd03      	ble.n	d7b2c <localtime_r+0xd8>
   d7b24:	3101      	adds	r1, #1
   d7b26:	6061      	str	r1, [r4, #4]
   d7b28:	3b3c      	subs	r3, #60	; 0x3c
   d7b2a:	e004      	b.n	d7b36 <localtime_r+0xe2>
   d7b2c:	2b00      	cmp	r3, #0
   d7b2e:	da03      	bge.n	d7b38 <localtime_r+0xe4>
   d7b30:	3901      	subs	r1, #1
   d7b32:	6061      	str	r1, [r4, #4]
   d7b34:	333c      	adds	r3, #60	; 0x3c
   d7b36:	6023      	str	r3, [r4, #0]
   d7b38:	6863      	ldr	r3, [r4, #4]
   d7b3a:	2b3b      	cmp	r3, #59	; 0x3b
   d7b3c:	dd03      	ble.n	d7b46 <localtime_r+0xf2>
   d7b3e:	3201      	adds	r2, #1
   d7b40:	60a2      	str	r2, [r4, #8]
   d7b42:	3b3c      	subs	r3, #60	; 0x3c
   d7b44:	e004      	b.n	d7b50 <localtime_r+0xfc>
   d7b46:	2b00      	cmp	r3, #0
   d7b48:	da03      	bge.n	d7b52 <localtime_r+0xfe>
   d7b4a:	3a01      	subs	r2, #1
   d7b4c:	60a2      	str	r2, [r4, #8]
   d7b4e:	333c      	adds	r3, #60	; 0x3c
   d7b50:	6063      	str	r3, [r4, #4]
   d7b52:	68a3      	ldr	r3, [r4, #8]
   d7b54:	2b17      	cmp	r3, #23
   d7b56:	dd22      	ble.n	d7b9e <localtime_r+0x14a>
   d7b58:	69e2      	ldr	r2, [r4, #28]
   d7b5a:	3201      	adds	r2, #1
   d7b5c:	61e2      	str	r2, [r4, #28]
   d7b5e:	69a2      	ldr	r2, [r4, #24]
   d7b60:	3201      	adds	r2, #1
   d7b62:	2a06      	cmp	r2, #6
   d7b64:	bfc8      	it	gt
   d7b66:	2200      	movgt	r2, #0
   d7b68:	61a2      	str	r2, [r4, #24]
   d7b6a:	68e2      	ldr	r2, [r4, #12]
   d7b6c:	3b18      	subs	r3, #24
   d7b6e:	3201      	adds	r2, #1
   d7b70:	60a3      	str	r3, [r4, #8]
   d7b72:	6923      	ldr	r3, [r4, #16]
   d7b74:	60e2      	str	r2, [r4, #12]
   d7b76:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   d7b7a:	428a      	cmp	r2, r1
   d7b7c:	dd46      	ble.n	d7c0c <localtime_r+0x1b8>
   d7b7e:	3301      	adds	r3, #1
   d7b80:	2b0c      	cmp	r3, #12
   d7b82:	bf0c      	ite	eq
   d7b84:	6963      	ldreq	r3, [r4, #20]
   d7b86:	6123      	strne	r3, [r4, #16]
   d7b88:	eba2 0201 	sub.w	r2, r2, r1
   d7b8c:	60e2      	str	r2, [r4, #12]
   d7b8e:	bf01      	itttt	eq
   d7b90:	3301      	addeq	r3, #1
   d7b92:	2200      	moveq	r2, #0
   d7b94:	6122      	streq	r2, [r4, #16]
   d7b96:	6163      	streq	r3, [r4, #20]
   d7b98:	bf08      	it	eq
   d7b9a:	61e2      	streq	r2, [r4, #28]
   d7b9c:	e036      	b.n	d7c0c <localtime_r+0x1b8>
   d7b9e:	2b00      	cmp	r3, #0
   d7ba0:	da34      	bge.n	d7c0c <localtime_r+0x1b8>
   d7ba2:	69e2      	ldr	r2, [r4, #28]
   d7ba4:	3a01      	subs	r2, #1
   d7ba6:	61e2      	str	r2, [r4, #28]
   d7ba8:	69a2      	ldr	r2, [r4, #24]
   d7baa:	3a01      	subs	r2, #1
   d7bac:	bf48      	it	mi
   d7bae:	2206      	movmi	r2, #6
   d7bb0:	61a2      	str	r2, [r4, #24]
   d7bb2:	68e2      	ldr	r2, [r4, #12]
   d7bb4:	3318      	adds	r3, #24
   d7bb6:	3a01      	subs	r2, #1
   d7bb8:	60e2      	str	r2, [r4, #12]
   d7bba:	60a3      	str	r3, [r4, #8]
   d7bbc:	bb32      	cbnz	r2, d7c0c <localtime_r+0x1b8>
   d7bbe:	6923      	ldr	r3, [r4, #16]
   d7bc0:	3b01      	subs	r3, #1
   d7bc2:	d401      	bmi.n	d7bc8 <localtime_r+0x174>
   d7bc4:	6123      	str	r3, [r4, #16]
   d7bc6:	e01d      	b.n	d7c04 <localtime_r+0x1b0>
   d7bc8:	230b      	movs	r3, #11
   d7bca:	6123      	str	r3, [r4, #16]
   d7bcc:	6963      	ldr	r3, [r4, #20]
   d7bce:	1e5a      	subs	r2, r3, #1
   d7bd0:	f012 0f03 	tst.w	r2, #3
   d7bd4:	6162      	str	r2, [r4, #20]
   d7bd6:	f203 736b 	addw	r3, r3, #1899	; 0x76b
   d7bda:	d105      	bne.n	d7be8 <localtime_r+0x194>
   d7bdc:	2164      	movs	r1, #100	; 0x64
   d7bde:	fb93 f2f1 	sdiv	r2, r3, r1
   d7be2:	fb01 3212 	mls	r2, r1, r2, r3
   d7be6:	b94a      	cbnz	r2, d7bfc <localtime_r+0x1a8>
   d7be8:	f44f 71c8 	mov.w	r1, #400	; 0x190
   d7bec:	fb93 f2f1 	sdiv	r2, r3, r1
   d7bf0:	fb01 3312 	mls	r3, r1, r2, r3
   d7bf4:	fab3 f383 	clz	r3, r3
   d7bf8:	095b      	lsrs	r3, r3, #5
   d7bfa:	e000      	b.n	d7bfe <localtime_r+0x1aa>
   d7bfc:	2301      	movs	r3, #1
   d7bfe:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
   d7c02:	61e3      	str	r3, [r4, #28]
   d7c04:	6923      	ldr	r3, [r4, #16]
   d7c06:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
   d7c0a:	60e3      	str	r3, [r4, #12]
   d7c0c:	f001 f8ef 	bl	d8dee <__tz_unlock>
   d7c10:	4620      	mov	r0, r4
   d7c12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d7c16:	bf00      	nop
   d7c18:	000dacc8 	.word	0x000dacc8
   d7c1c:	2003e7e4 	.word	0x2003e7e4

000d7c20 <_localeconv_r>:
   d7c20:	4800      	ldr	r0, [pc, #0]	; (d7c24 <_localeconv_r+0x4>)
   d7c22:	4770      	bx	lr
   d7c24:	2003e174 	.word	0x2003e174

000d7c28 <memcpy>:
   d7c28:	b510      	push	{r4, lr}
   d7c2a:	1e43      	subs	r3, r0, #1
   d7c2c:	440a      	add	r2, r1
   d7c2e:	4291      	cmp	r1, r2
   d7c30:	d004      	beq.n	d7c3c <memcpy+0x14>
   d7c32:	f811 4b01 	ldrb.w	r4, [r1], #1
   d7c36:	f803 4f01 	strb.w	r4, [r3, #1]!
   d7c3a:	e7f8      	b.n	d7c2e <memcpy+0x6>
   d7c3c:	bd10      	pop	{r4, pc}

000d7c3e <memset>:
   d7c3e:	4402      	add	r2, r0
   d7c40:	4603      	mov	r3, r0
   d7c42:	4293      	cmp	r3, r2
   d7c44:	d002      	beq.n	d7c4c <memset+0xe>
   d7c46:	f803 1b01 	strb.w	r1, [r3], #1
   d7c4a:	e7fa      	b.n	d7c42 <memset+0x4>
   d7c4c:	4770      	bx	lr
	...

000d7c50 <srand>:
   d7c50:	b538      	push	{r3, r4, r5, lr}
   d7c52:	4b12      	ldr	r3, [pc, #72]	; (d7c9c <srand+0x4c>)
   d7c54:	681c      	ldr	r4, [r3, #0]
   d7c56:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d7c58:	4605      	mov	r5, r0
   d7c5a:	b9d3      	cbnz	r3, d7c92 <srand+0x42>
   d7c5c:	2018      	movs	r0, #24
   d7c5e:	f7fd fdb7 	bl	d57d0 <malloc>
   d7c62:	f243 330e 	movw	r3, #13070	; 0x330e
   d7c66:	63a0      	str	r0, [r4, #56]	; 0x38
   d7c68:	8003      	strh	r3, [r0, #0]
   d7c6a:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d7c6e:	8043      	strh	r3, [r0, #2]
   d7c70:	f241 2334 	movw	r3, #4660	; 0x1234
   d7c74:	8083      	strh	r3, [r0, #4]
   d7c76:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d7c7a:	80c3      	strh	r3, [r0, #6]
   d7c7c:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d7c80:	8103      	strh	r3, [r0, #8]
   d7c82:	2305      	movs	r3, #5
   d7c84:	8143      	strh	r3, [r0, #10]
   d7c86:	230b      	movs	r3, #11
   d7c88:	8183      	strh	r3, [r0, #12]
   d7c8a:	2201      	movs	r2, #1
   d7c8c:	2300      	movs	r3, #0
   d7c8e:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d7c92:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d7c94:	2200      	movs	r2, #0
   d7c96:	611d      	str	r5, [r3, #16]
   d7c98:	615a      	str	r2, [r3, #20]
   d7c9a:	bd38      	pop	{r3, r4, r5, pc}
   d7c9c:	2003e170 	.word	0x2003e170

000d7ca0 <strchr>:
   d7ca0:	b2c9      	uxtb	r1, r1
   d7ca2:	4603      	mov	r3, r0
   d7ca4:	f810 2b01 	ldrb.w	r2, [r0], #1
   d7ca8:	b11a      	cbz	r2, d7cb2 <strchr+0x12>
   d7caa:	4291      	cmp	r1, r2
   d7cac:	d1f9      	bne.n	d7ca2 <strchr+0x2>
   d7cae:	4618      	mov	r0, r3
   d7cb0:	4770      	bx	lr
   d7cb2:	2900      	cmp	r1, #0
   d7cb4:	bf0c      	ite	eq
   d7cb6:	4618      	moveq	r0, r3
   d7cb8:	2000      	movne	r0, #0
   d7cba:	4770      	bx	lr

000d7cbc <strcmp>:
   d7cbc:	f810 2b01 	ldrb.w	r2, [r0], #1
   d7cc0:	f811 3b01 	ldrb.w	r3, [r1], #1
   d7cc4:	2a01      	cmp	r2, #1
   d7cc6:	bf28      	it	cs
   d7cc8:	429a      	cmpcs	r2, r3
   d7cca:	d0f7      	beq.n	d7cbc <strcmp>
   d7ccc:	1ad0      	subs	r0, r2, r3
   d7cce:	4770      	bx	lr

000d7cd0 <strcpy>:
   d7cd0:	4603      	mov	r3, r0
   d7cd2:	f811 2b01 	ldrb.w	r2, [r1], #1
   d7cd6:	f803 2b01 	strb.w	r2, [r3], #1
   d7cda:	2a00      	cmp	r2, #0
   d7cdc:	d1f9      	bne.n	d7cd2 <strcpy+0x2>
   d7cde:	4770      	bx	lr

000d7ce0 <strdup>:
   d7ce0:	4b02      	ldr	r3, [pc, #8]	; (d7cec <strdup+0xc>)
   d7ce2:	4601      	mov	r1, r0
   d7ce4:	6818      	ldr	r0, [r3, #0]
   d7ce6:	f000 b803 	b.w	d7cf0 <_strdup_r>
   d7cea:	bf00      	nop
   d7cec:	2003e170 	.word	0x2003e170

000d7cf0 <_strdup_r>:
   d7cf0:	b570      	push	{r4, r5, r6, lr}
   d7cf2:	4606      	mov	r6, r0
   d7cf4:	4608      	mov	r0, r1
   d7cf6:	460c      	mov	r4, r1
   d7cf8:	f000 f80d 	bl	d7d16 <strlen>
   d7cfc:	1c45      	adds	r5, r0, #1
   d7cfe:	4629      	mov	r1, r5
   d7d00:	4630      	mov	r0, r6
   d7d02:	f7fd fdad 	bl	d5860 <_malloc_r>
   d7d06:	4606      	mov	r6, r0
   d7d08:	b118      	cbz	r0, d7d12 <_strdup_r+0x22>
   d7d0a:	462a      	mov	r2, r5
   d7d0c:	4621      	mov	r1, r4
   d7d0e:	f7ff ff8b 	bl	d7c28 <memcpy>
   d7d12:	4630      	mov	r0, r6
   d7d14:	bd70      	pop	{r4, r5, r6, pc}

000d7d16 <strlen>:
   d7d16:	4603      	mov	r3, r0
   d7d18:	f813 2b01 	ldrb.w	r2, [r3], #1
   d7d1c:	2a00      	cmp	r2, #0
   d7d1e:	d1fb      	bne.n	d7d18 <strlen+0x2>
   d7d20:	1a18      	subs	r0, r3, r0
   d7d22:	3801      	subs	r0, #1
   d7d24:	4770      	bx	lr

000d7d26 <strncmp>:
   d7d26:	b530      	push	{r4, r5, lr}
   d7d28:	b182      	cbz	r2, d7d4c <strncmp+0x26>
   d7d2a:	1e45      	subs	r5, r0, #1
   d7d2c:	3901      	subs	r1, #1
   d7d2e:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   d7d32:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d7d36:	42a3      	cmp	r3, r4
   d7d38:	d106      	bne.n	d7d48 <strncmp+0x22>
   d7d3a:	43ec      	mvns	r4, r5
   d7d3c:	4414      	add	r4, r2
   d7d3e:	42e0      	cmn	r0, r4
   d7d40:	d001      	beq.n	d7d46 <strncmp+0x20>
   d7d42:	2b00      	cmp	r3, #0
   d7d44:	d1f3      	bne.n	d7d2e <strncmp+0x8>
   d7d46:	461c      	mov	r4, r3
   d7d48:	1b18      	subs	r0, r3, r4
   d7d4a:	bd30      	pop	{r4, r5, pc}
   d7d4c:	4610      	mov	r0, r2
   d7d4e:	bd30      	pop	{r4, r5, pc}

000d7d50 <strncpy>:
   d7d50:	b510      	push	{r4, lr}
   d7d52:	4603      	mov	r3, r0
   d7d54:	b142      	cbz	r2, d7d68 <strncpy+0x18>
   d7d56:	f811 4b01 	ldrb.w	r4, [r1], #1
   d7d5a:	f803 4b01 	strb.w	r4, [r3], #1
   d7d5e:	3a01      	subs	r2, #1
   d7d60:	2c00      	cmp	r4, #0
   d7d62:	d1f7      	bne.n	d7d54 <strncpy+0x4>
   d7d64:	441a      	add	r2, r3
   d7d66:	e000      	b.n	d7d6a <strncpy+0x1a>
   d7d68:	bd10      	pop	{r4, pc}
   d7d6a:	4293      	cmp	r3, r2
   d7d6c:	d002      	beq.n	d7d74 <strncpy+0x24>
   d7d6e:	f803 4b01 	strb.w	r4, [r3], #1
   d7d72:	e7fa      	b.n	d7d6a <strncpy+0x1a>
   d7d74:	bd10      	pop	{r4, pc}

000d7d76 <strstr>:
   d7d76:	b5f0      	push	{r4, r5, r6, r7, lr}
   d7d78:	7803      	ldrb	r3, [r0, #0]
   d7d7a:	b963      	cbnz	r3, d7d96 <strstr+0x20>
   d7d7c:	780b      	ldrb	r3, [r1, #0]
   d7d7e:	2b00      	cmp	r3, #0
   d7d80:	bf18      	it	ne
   d7d82:	2000      	movne	r0, #0
   d7d84:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7d86:	f815 2f01 	ldrb.w	r2, [r5, #1]!
   d7d8a:	b162      	cbz	r2, d7da6 <strstr+0x30>
   d7d8c:	f814 7f01 	ldrb.w	r7, [r4, #1]!
   d7d90:	4297      	cmp	r7, r2
   d7d92:	4630      	mov	r0, r6
   d7d94:	d0f7      	beq.n	d7d86 <strstr+0x10>
   d7d96:	4603      	mov	r3, r0
   d7d98:	1c46      	adds	r6, r0, #1
   d7d9a:	7800      	ldrb	r0, [r0, #0]
   d7d9c:	b110      	cbz	r0, d7da4 <strstr+0x2e>
   d7d9e:	1e4d      	subs	r5, r1, #1
   d7da0:	1e5c      	subs	r4, r3, #1
   d7da2:	e7f0      	b.n	d7d86 <strstr+0x10>
   d7da4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7da6:	4618      	mov	r0, r3
   d7da8:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d7daa <sulp>:
   d7daa:	b570      	push	{r4, r5, r6, lr}
   d7dac:	4604      	mov	r4, r0
   d7dae:	460d      	mov	r5, r1
   d7db0:	ec45 4b10 	vmov	d0, r4, r5
   d7db4:	4616      	mov	r6, r2
   d7db6:	f002 f865 	bl	d9e84 <__ulp>
   d7dba:	ec51 0b10 	vmov	r0, r1, d0
   d7dbe:	b17e      	cbz	r6, d7de0 <sulp+0x36>
   d7dc0:	f3c5 530a 	ubfx	r3, r5, #20, #11
   d7dc4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   d7dc8:	2b00      	cmp	r3, #0
   d7dca:	dd09      	ble.n	d7de0 <sulp+0x36>
   d7dcc:	051b      	lsls	r3, r3, #20
   d7dce:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   d7dd2:	2400      	movs	r4, #0
   d7dd4:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   d7dd8:	4622      	mov	r2, r4
   d7dda:	462b      	mov	r3, r5
   d7ddc:	f7ff fae0 	bl	d73a0 <__aeabi_dmul>
   d7de0:	bd70      	pop	{r4, r5, r6, pc}
   d7de2:	0000      	movs	r0, r0
   d7de4:	0000      	movs	r0, r0
	...

000d7de8 <_strtod_r>:
   d7de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7dec:	b09d      	sub	sp, #116	; 0x74
   d7dee:	2300      	movs	r3, #0
   d7df0:	9002      	str	r0, [sp, #8]
   d7df2:	460c      	mov	r4, r1
   d7df4:	9213      	str	r2, [sp, #76]	; 0x4c
   d7df6:	9318      	str	r3, [sp, #96]	; 0x60
   d7df8:	f04f 0a00 	mov.w	sl, #0
   d7dfc:	f04f 0b00 	mov.w	fp, #0
   d7e00:	9117      	str	r1, [sp, #92]	; 0x5c
   d7e02:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d7e04:	781a      	ldrb	r2, [r3, #0]
   d7e06:	2a0d      	cmp	r2, #13
   d7e08:	d805      	bhi.n	d7e16 <_strtod_r+0x2e>
   d7e0a:	2a09      	cmp	r2, #9
   d7e0c:	d213      	bcs.n	d7e36 <_strtod_r+0x4e>
   d7e0e:	2a00      	cmp	r2, #0
   d7e10:	f000 81ac 	beq.w	d816c <_strtod_r+0x384>
   d7e14:	e012      	b.n	d7e3c <_strtod_r+0x54>
   d7e16:	2a2b      	cmp	r2, #43	; 0x2b
   d7e18:	d004      	beq.n	d7e24 <_strtod_r+0x3c>
   d7e1a:	2a2d      	cmp	r2, #45	; 0x2d
   d7e1c:	d004      	beq.n	d7e28 <_strtod_r+0x40>
   d7e1e:	2a20      	cmp	r2, #32
   d7e20:	d10c      	bne.n	d7e3c <_strtod_r+0x54>
   d7e22:	e008      	b.n	d7e36 <_strtod_r+0x4e>
   d7e24:	2200      	movs	r2, #0
   d7e26:	e000      	b.n	d7e2a <_strtod_r+0x42>
   d7e28:	2201      	movs	r2, #1
   d7e2a:	920c      	str	r2, [sp, #48]	; 0x30
   d7e2c:	1c5a      	adds	r2, r3, #1
   d7e2e:	9217      	str	r2, [sp, #92]	; 0x5c
   d7e30:	785b      	ldrb	r3, [r3, #1]
   d7e32:	b92b      	cbnz	r3, d7e40 <_strtod_r+0x58>
   d7e34:	e19a      	b.n	d816c <_strtod_r+0x384>
   d7e36:	3301      	adds	r3, #1
   d7e38:	9317      	str	r3, [sp, #92]	; 0x5c
   d7e3a:	e7e2      	b.n	d7e02 <_strtod_r+0x1a>
   d7e3c:	2300      	movs	r3, #0
   d7e3e:	930c      	str	r3, [sp, #48]	; 0x30
   d7e40:	9d17      	ldr	r5, [sp, #92]	; 0x5c
   d7e42:	782b      	ldrb	r3, [r5, #0]
   d7e44:	2b30      	cmp	r3, #48	; 0x30
   d7e46:	d15c      	bne.n	d7f02 <_strtod_r+0x11a>
   d7e48:	786b      	ldrb	r3, [r5, #1]
   d7e4a:	2b58      	cmp	r3, #88	; 0x58
   d7e4c:	d001      	beq.n	d7e52 <_strtod_r+0x6a>
   d7e4e:	2b78      	cmp	r3, #120	; 0x78
   d7e50:	d14c      	bne.n	d7eec <_strtod_r+0x104>
   d7e52:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d7e54:	9301      	str	r3, [sp, #4]
   d7e56:	ab18      	add	r3, sp, #96	; 0x60
   d7e58:	9300      	str	r3, [sp, #0]
   d7e5a:	4aa9      	ldr	r2, [pc, #676]	; (d8100 <_strtod_r+0x318>)
   d7e5c:	9802      	ldr	r0, [sp, #8]
   d7e5e:	ab19      	add	r3, sp, #100	; 0x64
   d7e60:	a917      	add	r1, sp, #92	; 0x5c
   d7e62:	f001 f996 	bl	d9192 <__gethex>
   d7e66:	f010 0607 	ands.w	r6, r0, #7
   d7e6a:	4604      	mov	r4, r0
   d7e6c:	f000 8587 	beq.w	d897e <_strtod_r+0xb96>
   d7e70:	2e06      	cmp	r6, #6
   d7e72:	d105      	bne.n	d7e80 <_strtod_r+0x98>
   d7e74:	3501      	adds	r5, #1
   d7e76:	2300      	movs	r3, #0
   d7e78:	9517      	str	r5, [sp, #92]	; 0x5c
   d7e7a:	930c      	str	r3, [sp, #48]	; 0x30
   d7e7c:	f000 bd7f 	b.w	d897e <_strtod_r+0xb96>
   d7e80:	9a18      	ldr	r2, [sp, #96]	; 0x60
   d7e82:	b13a      	cbz	r2, d7e94 <_strtod_r+0xac>
   d7e84:	2135      	movs	r1, #53	; 0x35
   d7e86:	a81a      	add	r0, sp, #104	; 0x68
   d7e88:	f002 f8e9 	bl	da05e <__copybits>
   d7e8c:	9918      	ldr	r1, [sp, #96]	; 0x60
   d7e8e:	9802      	ldr	r0, [sp, #8]
   d7e90:	f001 fd67 	bl	d9962 <_Bfree>
   d7e94:	2e06      	cmp	r6, #6
   d7e96:	d822      	bhi.n	d7ede <_strtod_r+0xf6>
   d7e98:	e8df f006 	tbb	[pc, r6]
   d7e9c:	18080d04 	.word	0x18080d04
   d7ea0:	0d1d      	.short	0x0d1d
   d7ea2:	04          	.byte	0x04
   d7ea3:	00          	.byte	0x00
   d7ea4:	f04f 0b00 	mov.w	fp, #0
   d7ea8:	46da      	mov	sl, fp
   d7eaa:	e018      	b.n	d7ede <_strtod_r+0xf6>
   d7eac:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   d7eb0:	f8dd b06c 	ldr.w	fp, [sp, #108]	; 0x6c
   d7eb4:	e013      	b.n	d7ede <_strtod_r+0xf6>
   d7eb6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   d7eb8:	9a19      	ldr	r2, [sp, #100]	; 0x64
   d7eba:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   d7ebe:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   d7ec2:	f202 4233 	addw	r2, r2, #1075	; 0x433
   d7ec6:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   d7eca:	e008      	b.n	d7ede <_strtod_r+0xf6>
   d7ecc:	f8df b234 	ldr.w	fp, [pc, #564]	; d8104 <_strtod_r+0x31c>
   d7ed0:	f04f 0a00 	mov.w	sl, #0
   d7ed4:	e003      	b.n	d7ede <_strtod_r+0xf6>
   d7ed6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   d7eda:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   d7ede:	0721      	lsls	r1, r4, #28
   d7ee0:	f140 854d 	bpl.w	d897e <_strtod_r+0xb96>
   d7ee4:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   d7ee8:	f000 bd49 	b.w	d897e <_strtod_r+0xb96>
   d7eec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d7eee:	1c5a      	adds	r2, r3, #1
   d7ef0:	9217      	str	r2, [sp, #92]	; 0x5c
   d7ef2:	785b      	ldrb	r3, [r3, #1]
   d7ef4:	2b30      	cmp	r3, #48	; 0x30
   d7ef6:	d0f9      	beq.n	d7eec <_strtod_r+0x104>
   d7ef8:	2b00      	cmp	r3, #0
   d7efa:	f000 8540 	beq.w	d897e <_strtod_r+0xb96>
   d7efe:	2301      	movs	r3, #1
   d7f00:	e000      	b.n	d7f04 <_strtod_r+0x11c>
   d7f02:	2300      	movs	r3, #0
   d7f04:	f04f 0800 	mov.w	r8, #0
   d7f08:	9306      	str	r3, [sp, #24]
   d7f0a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d7f0c:	9307      	str	r3, [sp, #28]
   d7f0e:	f8cd 8014 	str.w	r8, [sp, #20]
   d7f12:	f8cd 8010 	str.w	r8, [sp, #16]
   d7f16:	220a      	movs	r2, #10
   d7f18:	9d17      	ldr	r5, [sp, #92]	; 0x5c
   d7f1a:	782e      	ldrb	r6, [r5, #0]
   d7f1c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   d7f20:	b2d9      	uxtb	r1, r3
   d7f22:	2909      	cmp	r1, #9
   d7f24:	d80e      	bhi.n	d7f44 <_strtod_r+0x15c>
   d7f26:	9904      	ldr	r1, [sp, #16]
   d7f28:	2908      	cmp	r1, #8
   d7f2a:	bfdd      	ittte	le
   d7f2c:	9905      	ldrle	r1, [sp, #20]
   d7f2e:	fb02 3301 	mlale	r3, r2, r1, r3
   d7f32:	9305      	strle	r3, [sp, #20]
   d7f34:	fb02 3808 	mlagt	r8, r2, r8, r3
   d7f38:	9b04      	ldr	r3, [sp, #16]
   d7f3a:	3501      	adds	r5, #1
   d7f3c:	3301      	adds	r3, #1
   d7f3e:	9304      	str	r3, [sp, #16]
   d7f40:	9517      	str	r5, [sp, #92]	; 0x5c
   d7f42:	e7e9      	b.n	d7f18 <_strtod_r+0x130>
   d7f44:	9802      	ldr	r0, [sp, #8]
   d7f46:	f7ff fe6b 	bl	d7c20 <_localeconv_r>
   d7f4a:	6807      	ldr	r7, [r0, #0]
   d7f4c:	9802      	ldr	r0, [sp, #8]
   d7f4e:	f7ff fe67 	bl	d7c20 <_localeconv_r>
   d7f52:	6800      	ldr	r0, [r0, #0]
   d7f54:	f7ff fedf 	bl	d7d16 <strlen>
   d7f58:	4639      	mov	r1, r7
   d7f5a:	4602      	mov	r2, r0
   d7f5c:	4628      	mov	r0, r5
   d7f5e:	f7ff fee2 	bl	d7d26 <strncmp>
   d7f62:	4607      	mov	r7, r0
   d7f64:	b128      	cbz	r0, d7f72 <_strtod_r+0x18a>
   d7f66:	2000      	movs	r0, #0
   d7f68:	4633      	mov	r3, r6
   d7f6a:	9d04      	ldr	r5, [sp, #16]
   d7f6c:	4602      	mov	r2, r0
   d7f6e:	4601      	mov	r1, r0
   d7f70:	e057      	b.n	d8022 <_strtod_r+0x23a>
   d7f72:	9802      	ldr	r0, [sp, #8]
   d7f74:	f7ff fe54 	bl	d7c20 <_localeconv_r>
   d7f78:	6800      	ldr	r0, [r0, #0]
   d7f7a:	f7ff fecc 	bl	d7d16 <strlen>
   d7f7e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d7f80:	181a      	adds	r2, r3, r0
   d7f82:	9217      	str	r2, [sp, #92]	; 0x5c
   d7f84:	9a04      	ldr	r2, [sp, #16]
   d7f86:	5c1b      	ldrb	r3, [r3, r0]
   d7f88:	2a00      	cmp	r2, #0
   d7f8a:	d142      	bne.n	d8012 <_strtod_r+0x22a>
   d7f8c:	4610      	mov	r0, r2
   d7f8e:	2b30      	cmp	r3, #48	; 0x30
   d7f90:	d105      	bne.n	d7f9e <_strtod_r+0x1b6>
   d7f92:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d7f94:	1c5a      	adds	r2, r3, #1
   d7f96:	9217      	str	r2, [sp, #92]	; 0x5c
   d7f98:	3001      	adds	r0, #1
   d7f9a:	785b      	ldrb	r3, [r3, #1]
   d7f9c:	e7f7      	b.n	d7f8e <_strtod_r+0x1a6>
   d7f9e:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
   d7fa2:	2a08      	cmp	r2, #8
   d7fa4:	d843      	bhi.n	d802e <_strtod_r+0x246>
   d7fa6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   d7fa8:	9207      	str	r2, [sp, #28]
   d7faa:	4602      	mov	r2, r0
   d7fac:	2000      	movs	r0, #0
   d7fae:	4605      	mov	r5, r0
   d7fb0:	3b30      	subs	r3, #48	; 0x30
   d7fb2:	f100 0101 	add.w	r1, r0, #1
   d7fb6:	d026      	beq.n	d8006 <_strtod_r+0x21e>
   d7fb8:	440a      	add	r2, r1
   d7fba:	eb05 0c00 	add.w	ip, r5, r0
   d7fbe:	4629      	mov	r1, r5
   d7fc0:	260a      	movs	r6, #10
   d7fc2:	4561      	cmp	r1, ip
   d7fc4:	d00e      	beq.n	d7fe4 <_strtod_r+0x1fc>
   d7fc6:	3101      	adds	r1, #1
   d7fc8:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
   d7fcc:	f1be 0f08 	cmp.w	lr, #8
   d7fd0:	dc03      	bgt.n	d7fda <_strtod_r+0x1f2>
   d7fd2:	9f05      	ldr	r7, [sp, #20]
   d7fd4:	4377      	muls	r7, r6
   d7fd6:	9705      	str	r7, [sp, #20]
   d7fd8:	e7f3      	b.n	d7fc2 <_strtod_r+0x1da>
   d7fda:	2910      	cmp	r1, #16
   d7fdc:	bfd8      	it	le
   d7fde:	fb06 f808 	mulle.w	r8, r6, r8
   d7fe2:	e7ee      	b.n	d7fc2 <_strtod_r+0x1da>
   d7fe4:	4428      	add	r0, r5
   d7fe6:	2808      	cmp	r0, #8
   d7fe8:	f100 0501 	add.w	r5, r0, #1
   d7fec:	dc05      	bgt.n	d7ffa <_strtod_r+0x212>
   d7fee:	9805      	ldr	r0, [sp, #20]
   d7ff0:	210a      	movs	r1, #10
   d7ff2:	fb01 3300 	mla	r3, r1, r0, r3
   d7ff6:	9305      	str	r3, [sp, #20]
   d7ff8:	e004      	b.n	d8004 <_strtod_r+0x21c>
   d7ffa:	2d10      	cmp	r5, #16
   d7ffc:	bfdc      	itt	le
   d7ffe:	210a      	movle	r1, #10
   d8000:	fb01 3808 	mlale	r8, r1, r8, r3
   d8004:	2100      	movs	r1, #0
   d8006:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d8008:	1c58      	adds	r0, r3, #1
   d800a:	9017      	str	r0, [sp, #92]	; 0x5c
   d800c:	785b      	ldrb	r3, [r3, #1]
   d800e:	4608      	mov	r0, r1
   d8010:	e002      	b.n	d8018 <_strtod_r+0x230>
   d8012:	9d04      	ldr	r5, [sp, #16]
   d8014:	4638      	mov	r0, r7
   d8016:	463a      	mov	r2, r7
   d8018:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   d801c:	2909      	cmp	r1, #9
   d801e:	d9c7      	bls.n	d7fb0 <_strtod_r+0x1c8>
   d8020:	2101      	movs	r1, #1
   d8022:	2b65      	cmp	r3, #101	; 0x65
   d8024:	d001      	beq.n	d802a <_strtod_r+0x242>
   d8026:	2b45      	cmp	r3, #69	; 0x45
   d8028:	d151      	bne.n	d80ce <_strtod_r+0x2e6>
   d802a:	b96d      	cbnz	r5, d8048 <_strtod_r+0x260>
   d802c:	e004      	b.n	d8038 <_strtod_r+0x250>
   d802e:	2b65      	cmp	r3, #101	; 0x65
   d8030:	f040 84b3 	bne.w	d899a <_strtod_r+0xbb2>
   d8034:	2200      	movs	r2, #0
   d8036:	2101      	movs	r1, #1
   d8038:	b928      	cbnz	r0, d8046 <_strtod_r+0x25e>
   d803a:	9b06      	ldr	r3, [sp, #24]
   d803c:	2b00      	cmp	r3, #0
   d803e:	f000 8095 	beq.w	d816c <_strtod_r+0x384>
   d8042:	4605      	mov	r5, r0
   d8044:	e000      	b.n	d8048 <_strtod_r+0x260>
   d8046:	2500      	movs	r5, #0
   d8048:	9c17      	ldr	r4, [sp, #92]	; 0x5c
   d804a:	1c63      	adds	r3, r4, #1
   d804c:	9317      	str	r3, [sp, #92]	; 0x5c
   d804e:	7863      	ldrb	r3, [r4, #1]
   d8050:	2b2b      	cmp	r3, #43	; 0x2b
   d8052:	d006      	beq.n	d8062 <_strtod_r+0x27a>
   d8054:	2b2d      	cmp	r3, #45	; 0x2d
   d8056:	d002      	beq.n	d805e <_strtod_r+0x276>
   d8058:	2600      	movs	r6, #0
   d805a:	9603      	str	r6, [sp, #12]
   d805c:	e006      	b.n	d806c <_strtod_r+0x284>
   d805e:	2301      	movs	r3, #1
   d8060:	e000      	b.n	d8064 <_strtod_r+0x27c>
   d8062:	2300      	movs	r3, #0
   d8064:	9303      	str	r3, [sp, #12]
   d8066:	1ca3      	adds	r3, r4, #2
   d8068:	9317      	str	r3, [sp, #92]	; 0x5c
   d806a:	78a3      	ldrb	r3, [r4, #2]
   d806c:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
   d8070:	2e09      	cmp	r6, #9
   d8072:	d82b      	bhi.n	d80cc <_strtod_r+0x2e4>
   d8074:	2b30      	cmp	r3, #48	; 0x30
   d8076:	d104      	bne.n	d8082 <_strtod_r+0x29a>
   d8078:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d807a:	1c5e      	adds	r6, r3, #1
   d807c:	9617      	str	r6, [sp, #92]	; 0x5c
   d807e:	785b      	ldrb	r3, [r3, #1]
   d8080:	e7f8      	b.n	d8074 <_strtod_r+0x28c>
   d8082:	f1a3 0631 	sub.w	r6, r3, #49	; 0x31
   d8086:	2e08      	cmp	r6, #8
   d8088:	d821      	bhi.n	d80ce <_strtod_r+0x2e6>
   d808a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
   d808e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d8090:	f04f 0c0a 	mov.w	ip, #10
   d8094:	461f      	mov	r7, r3
   d8096:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d8098:	1c5e      	adds	r6, r3, #1
   d809a:	9617      	str	r6, [sp, #92]	; 0x5c
   d809c:	785b      	ldrb	r3, [r3, #1]
   d809e:	f1a3 0930 	sub.w	r9, r3, #48	; 0x30
   d80a2:	f1b9 0f09 	cmp.w	r9, #9
   d80a6:	d804      	bhi.n	d80b2 <_strtod_r+0x2ca>
   d80a8:	fb0c 3e0e 	mla	lr, ip, lr, r3
   d80ac:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   d80b0:	e7f1      	b.n	d8096 <_strtod_r+0x2ae>
   d80b2:	1bf6      	subs	r6, r6, r7
   d80b4:	2e08      	cmp	r6, #8
   d80b6:	f644 691f 	movw	r9, #19999	; 0x4e1f
   d80ba:	dc02      	bgt.n	d80c2 <_strtod_r+0x2da>
   d80bc:	45f1      	cmp	r9, lr
   d80be:	bfa8      	it	ge
   d80c0:	46f1      	movge	r9, lr
   d80c2:	9e03      	ldr	r6, [sp, #12]
   d80c4:	b12e      	cbz	r6, d80d2 <_strtod_r+0x2ea>
   d80c6:	f1c9 0900 	rsb	r9, r9, #0
   d80ca:	e002      	b.n	d80d2 <_strtod_r+0x2ea>
   d80cc:	9417      	str	r4, [sp, #92]	; 0x5c
   d80ce:	f04f 0900 	mov.w	r9, #0
   d80d2:	2d00      	cmp	r5, #0
   d80d4:	d153      	bne.n	d817e <_strtod_r+0x396>
   d80d6:	2800      	cmp	r0, #0
   d80d8:	f040 8451 	bne.w	d897e <_strtod_r+0xb96>
   d80dc:	9a06      	ldr	r2, [sp, #24]
   d80de:	2a00      	cmp	r2, #0
   d80e0:	f040 844d 	bne.w	d897e <_strtod_r+0xb96>
   d80e4:	2900      	cmp	r1, #0
   d80e6:	d141      	bne.n	d816c <_strtod_r+0x384>
   d80e8:	2b4e      	cmp	r3, #78	; 0x4e
   d80ea:	d020      	beq.n	d812e <_strtod_r+0x346>
   d80ec:	dc02      	bgt.n	d80f4 <_strtod_r+0x30c>
   d80ee:	2b49      	cmp	r3, #73	; 0x49
   d80f0:	d00a      	beq.n	d8108 <_strtod_r+0x320>
   d80f2:	e03b      	b.n	d816c <_strtod_r+0x384>
   d80f4:	2b69      	cmp	r3, #105	; 0x69
   d80f6:	d007      	beq.n	d8108 <_strtod_r+0x320>
   d80f8:	2b6e      	cmp	r3, #110	; 0x6e
   d80fa:	d018      	beq.n	d812e <_strtod_r+0x346>
   d80fc:	e036      	b.n	d816c <_strtod_r+0x384>
   d80fe:	bf00      	nop
   d8100:	000dad28 	.word	0x000dad28
   d8104:	7ff00000 	.word	0x7ff00000
   d8108:	49a8      	ldr	r1, [pc, #672]	; (d83ac <_strtod_r+0x5c4>)
   d810a:	a817      	add	r0, sp, #92	; 0x5c
   d810c:	f001 fa72 	bl	d95f4 <__match>
   d8110:	b360      	cbz	r0, d816c <_strtod_r+0x384>
   d8112:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d8114:	49a6      	ldr	r1, [pc, #664]	; (d83b0 <_strtod_r+0x5c8>)
   d8116:	3b01      	subs	r3, #1
   d8118:	a817      	add	r0, sp, #92	; 0x5c
   d811a:	9317      	str	r3, [sp, #92]	; 0x5c
   d811c:	f001 fa6a 	bl	d95f4 <__match>
   d8120:	b910      	cbnz	r0, d8128 <_strtod_r+0x340>
   d8122:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d8124:	3301      	adds	r3, #1
   d8126:	9317      	str	r3, [sp, #92]	; 0x5c
   d8128:	f8df b2a0 	ldr.w	fp, [pc, #672]	; d83cc <_strtod_r+0x5e4>
   d812c:	e01a      	b.n	d8164 <_strtod_r+0x37c>
   d812e:	49a1      	ldr	r1, [pc, #644]	; (d83b4 <_strtod_r+0x5cc>)
   d8130:	a817      	add	r0, sp, #92	; 0x5c
   d8132:	f001 fa5f 	bl	d95f4 <__match>
   d8136:	b1c8      	cbz	r0, d816c <_strtod_r+0x384>
   d8138:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d813a:	781b      	ldrb	r3, [r3, #0]
   d813c:	2b28      	cmp	r3, #40	; 0x28
   d813e:	d10f      	bne.n	d8160 <_strtod_r+0x378>
   d8140:	aa1a      	add	r2, sp, #104	; 0x68
   d8142:	499d      	ldr	r1, [pc, #628]	; (d83b8 <_strtod_r+0x5d0>)
   d8144:	a817      	add	r0, sp, #92	; 0x5c
   d8146:	f001 fa68 	bl	d961a <__hexnan>
   d814a:	2805      	cmp	r0, #5
   d814c:	d108      	bne.n	d8160 <_strtod_r+0x378>
   d814e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   d8150:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   d8154:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   d8158:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   d815c:	f000 bc0f 	b.w	d897e <_strtod_r+0xb96>
   d8160:	f8df b26c 	ldr.w	fp, [pc, #620]	; d83d0 <_strtod_r+0x5e8>
   d8164:	f04f 0a00 	mov.w	sl, #0
   d8168:	f000 bc09 	b.w	d897e <_strtod_r+0xb96>
   d816c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   d816e:	9417      	str	r4, [sp, #92]	; 0x5c
   d8170:	2b00      	cmp	r3, #0
   d8172:	f000 840f 	beq.w	d8994 <_strtod_r+0xbac>
   d8176:	2300      	movs	r3, #0
   d8178:	930c      	str	r3, [sp, #48]	; 0x30
   d817a:	f000 bc02 	b.w	d8982 <_strtod_r+0xb9a>
   d817e:	9b04      	ldr	r3, [sp, #16]
   d8180:	9805      	ldr	r0, [sp, #20]
   d8182:	2b00      	cmp	r3, #0
   d8184:	bf08      	it	eq
   d8186:	462b      	moveq	r3, r5
   d8188:	2d10      	cmp	r5, #16
   d818a:	462c      	mov	r4, r5
   d818c:	ebc2 0909 	rsb	r9, r2, r9
   d8190:	bfa8      	it	ge
   d8192:	2410      	movge	r4, #16
   d8194:	9304      	str	r3, [sp, #16]
   d8196:	f7ff f88d 	bl	d72b4 <__aeabi_ui2d>
   d819a:	2c09      	cmp	r4, #9
   d819c:	4682      	mov	sl, r0
   d819e:	468b      	mov	fp, r1
   d81a0:	dd13      	ble.n	d81ca <_strtod_r+0x3e2>
   d81a2:	4b86      	ldr	r3, [pc, #536]	; (d83bc <_strtod_r+0x5d4>)
   d81a4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   d81a8:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   d81ac:	f7ff f8f8 	bl	d73a0 <__aeabi_dmul>
   d81b0:	4606      	mov	r6, r0
   d81b2:	4640      	mov	r0, r8
   d81b4:	460f      	mov	r7, r1
   d81b6:	f7ff f87d 	bl	d72b4 <__aeabi_ui2d>
   d81ba:	4602      	mov	r2, r0
   d81bc:	460b      	mov	r3, r1
   d81be:	4630      	mov	r0, r6
   d81c0:	4639      	mov	r1, r7
   d81c2:	f7fe ff3b 	bl	d703c <__adddf3>
   d81c6:	4682      	mov	sl, r0
   d81c8:	468b      	mov	fp, r1
   d81ca:	2d0f      	cmp	r5, #15
   d81cc:	dc36      	bgt.n	d823c <_strtod_r+0x454>
   d81ce:	f1b9 0f00 	cmp.w	r9, #0
   d81d2:	f000 83d4 	beq.w	d897e <_strtod_r+0xb96>
   d81d6:	dd24      	ble.n	d8222 <_strtod_r+0x43a>
   d81d8:	f1b9 0f16 	cmp.w	r9, #22
   d81dc:	dc07      	bgt.n	d81ee <_strtod_r+0x406>
   d81de:	4d77      	ldr	r5, [pc, #476]	; (d83bc <_strtod_r+0x5d4>)
   d81e0:	eb05 09c9 	add.w	r9, r5, r9, lsl #3
   d81e4:	4652      	mov	r2, sl
   d81e6:	465b      	mov	r3, fp
   d81e8:	e9d9 0100 	ldrd	r0, r1, [r9]
   d81ec:	e014      	b.n	d8218 <_strtod_r+0x430>
   d81ee:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   d81f2:	4599      	cmp	r9, r3
   d81f4:	dc22      	bgt.n	d823c <_strtod_r+0x454>
   d81f6:	4c71      	ldr	r4, [pc, #452]	; (d83bc <_strtod_r+0x5d4>)
   d81f8:	f1c5 050f 	rsb	r5, r5, #15
   d81fc:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   d8200:	ebc5 0509 	rsb	r5, r5, r9
   d8204:	4652      	mov	r2, sl
   d8206:	465b      	mov	r3, fp
   d8208:	e9d1 0100 	ldrd	r0, r1, [r1]
   d820c:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   d8210:	f7ff f8c6 	bl	d73a0 <__aeabi_dmul>
   d8214:	e9d4 2300 	ldrd	r2, r3, [r4]
   d8218:	f7ff f8c2 	bl	d73a0 <__aeabi_dmul>
   d821c:	4682      	mov	sl, r0
   d821e:	468b      	mov	fp, r1
   d8220:	e3ad      	b.n	d897e <_strtod_r+0xb96>
   d8222:	f119 0f16 	cmn.w	r9, #22
   d8226:	db09      	blt.n	d823c <_strtod_r+0x454>
   d8228:	4d64      	ldr	r5, [pc, #400]	; (d83bc <_strtod_r+0x5d4>)
   d822a:	eba5 09c9 	sub.w	r9, r5, r9, lsl #3
   d822e:	e9d9 2300 	ldrd	r2, r3, [r9]
   d8232:	4650      	mov	r0, sl
   d8234:	4659      	mov	r1, fp
   d8236:	f7ff f9dd 	bl	d75f4 <__aeabi_ddiv>
   d823a:	e7ef      	b.n	d821c <_strtod_r+0x434>
   d823c:	1b2c      	subs	r4, r5, r4
   d823e:	444c      	add	r4, r9
   d8240:	2c00      	cmp	r4, #0
   d8242:	dd57      	ble.n	d82f4 <_strtod_r+0x50c>
   d8244:	f014 010f 	ands.w	r1, r4, #15
   d8248:	d00a      	beq.n	d8260 <_strtod_r+0x478>
   d824a:	4b5c      	ldr	r3, [pc, #368]	; (d83bc <_strtod_r+0x5d4>)
   d824c:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   d8250:	4652      	mov	r2, sl
   d8252:	465b      	mov	r3, fp
   d8254:	e9d1 0100 	ldrd	r0, r1, [r1]
   d8258:	f7ff f8a2 	bl	d73a0 <__aeabi_dmul>
   d825c:	4682      	mov	sl, r0
   d825e:	468b      	mov	fp, r1
   d8260:	f034 040f 	bics.w	r4, r4, #15
   d8264:	f000 80b8 	beq.w	d83d8 <_strtod_r+0x5f0>
   d8268:	f5b4 7f9a 	cmp.w	r4, #308	; 0x134
   d826c:	dd0b      	ble.n	d8286 <_strtod_r+0x49e>
   d826e:	2400      	movs	r4, #0
   d8270:	4625      	mov	r5, r4
   d8272:	9405      	str	r4, [sp, #20]
   d8274:	9404      	str	r4, [sp, #16]
   d8276:	9a02      	ldr	r2, [sp, #8]
   d8278:	f8df b150 	ldr.w	fp, [pc, #336]	; d83cc <_strtod_r+0x5e4>
   d827c:	2322      	movs	r3, #34	; 0x22
   d827e:	6013      	str	r3, [r2, #0]
   d8280:	f04f 0a00 	mov.w	sl, #0
   d8284:	e187      	b.n	d8596 <_strtod_r+0x7ae>
   d8286:	4e4e      	ldr	r6, [pc, #312]	; (d83c0 <_strtod_r+0x5d8>)
   d8288:	2300      	movs	r3, #0
   d828a:	1124      	asrs	r4, r4, #4
   d828c:	4650      	mov	r0, sl
   d828e:	4659      	mov	r1, fp
   d8290:	4698      	mov	r8, r3
   d8292:	4637      	mov	r7, r6
   d8294:	2c01      	cmp	r4, #1
   d8296:	dd0b      	ble.n	d82b0 <_strtod_r+0x4c8>
   d8298:	07e2      	lsls	r2, r4, #31
   d829a:	d504      	bpl.n	d82a6 <_strtod_r+0x4be>
   d829c:	e9d6 2300 	ldrd	r2, r3, [r6]
   d82a0:	f7ff f87e 	bl	d73a0 <__aeabi_dmul>
   d82a4:	2301      	movs	r3, #1
   d82a6:	f108 0801 	add.w	r8, r8, #1
   d82aa:	1064      	asrs	r4, r4, #1
   d82ac:	3608      	adds	r6, #8
   d82ae:	e7f1      	b.n	d8294 <_strtod_r+0x4ac>
   d82b0:	b10b      	cbz	r3, d82b6 <_strtod_r+0x4ce>
   d82b2:	4682      	mov	sl, r0
   d82b4:	468b      	mov	fp, r1
   d82b6:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   d82ba:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
   d82be:	4652      	mov	r2, sl
   d82c0:	465b      	mov	r3, fp
   d82c2:	e9d7 0100 	ldrd	r0, r1, [r7]
   d82c6:	f7ff f86b 	bl	d73a0 <__aeabi_dmul>
   d82ca:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   d82ce:	468b      	mov	fp, r1
   d82d0:	460a      	mov	r2, r1
   d82d2:	0d1b      	lsrs	r3, r3, #20
   d82d4:	493b      	ldr	r1, [pc, #236]	; (d83c4 <_strtod_r+0x5dc>)
   d82d6:	051b      	lsls	r3, r3, #20
   d82d8:	428b      	cmp	r3, r1
   d82da:	4682      	mov	sl, r0
   d82dc:	d8c7      	bhi.n	d826e <_strtod_r+0x486>
   d82de:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   d82e2:	428b      	cmp	r3, r1
   d82e4:	bf86      	itte	hi
   d82e6:	f8df b0ec 	ldrhi.w	fp, [pc, #236]	; d83d4 <_strtod_r+0x5ec>
   d82ea:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
   d82ee:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   d82f2:	e071      	b.n	d83d8 <_strtod_r+0x5f0>
   d82f4:	d070      	beq.n	d83d8 <_strtod_r+0x5f0>
   d82f6:	4264      	negs	r4, r4
   d82f8:	f014 020f 	ands.w	r2, r4, #15
   d82fc:	d00a      	beq.n	d8314 <_strtod_r+0x52c>
   d82fe:	4b2f      	ldr	r3, [pc, #188]	; (d83bc <_strtod_r+0x5d4>)
   d8300:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   d8304:	4650      	mov	r0, sl
   d8306:	4659      	mov	r1, fp
   d8308:	e9d3 2300 	ldrd	r2, r3, [r3]
   d830c:	f7ff f972 	bl	d75f4 <__aeabi_ddiv>
   d8310:	4682      	mov	sl, r0
   d8312:	468b      	mov	fp, r1
   d8314:	1124      	asrs	r4, r4, #4
   d8316:	d05f      	beq.n	d83d8 <_strtod_r+0x5f0>
   d8318:	2c1f      	cmp	r4, #31
   d831a:	dd04      	ble.n	d8326 <_strtod_r+0x53e>
   d831c:	2400      	movs	r4, #0
   d831e:	4625      	mov	r5, r4
   d8320:	9405      	str	r4, [sp, #20]
   d8322:	9404      	str	r4, [sp, #16]
   d8324:	e130      	b.n	d8588 <_strtod_r+0x7a0>
   d8326:	f014 0f10 	tst.w	r4, #16
   d832a:	bf0c      	ite	eq
   d832c:	2300      	moveq	r3, #0
   d832e:	236a      	movne	r3, #106	; 0x6a
   d8330:	4e25      	ldr	r6, [pc, #148]	; (d83c8 <_strtod_r+0x5e0>)
   d8332:	9303      	str	r3, [sp, #12]
   d8334:	4650      	mov	r0, sl
   d8336:	4659      	mov	r1, fp
   d8338:	2300      	movs	r3, #0
   d833a:	2c00      	cmp	r4, #0
   d833c:	dd09      	ble.n	d8352 <_strtod_r+0x56a>
   d833e:	07e2      	lsls	r2, r4, #31
   d8340:	d504      	bpl.n	d834c <_strtod_r+0x564>
   d8342:	e9d6 2300 	ldrd	r2, r3, [r6]
   d8346:	f7ff f82b 	bl	d73a0 <__aeabi_dmul>
   d834a:	2301      	movs	r3, #1
   d834c:	1064      	asrs	r4, r4, #1
   d834e:	3608      	adds	r6, #8
   d8350:	e7f3      	b.n	d833a <_strtod_r+0x552>
   d8352:	b10b      	cbz	r3, d8358 <_strtod_r+0x570>
   d8354:	4682      	mov	sl, r0
   d8356:	468b      	mov	fp, r1
   d8358:	9b03      	ldr	r3, [sp, #12]
   d835a:	b1eb      	cbz	r3, d8398 <_strtod_r+0x5b0>
   d835c:	f3cb 530a 	ubfx	r3, fp, #20, #11
   d8360:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   d8364:	2b00      	cmp	r3, #0
   d8366:	4659      	mov	r1, fp
   d8368:	dd16      	ble.n	d8398 <_strtod_r+0x5b0>
   d836a:	2b1f      	cmp	r3, #31
   d836c:	dd0e      	ble.n	d838c <_strtod_r+0x5a4>
   d836e:	2b34      	cmp	r3, #52	; 0x34
   d8370:	bfde      	ittt	le
   d8372:	3b20      	suble	r3, #32
   d8374:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
   d8378:	fa02 f303 	lslle.w	r3, r2, r3
   d837c:	f04f 0a00 	mov.w	sl, #0
   d8380:	bfcc      	ite	gt
   d8382:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   d8386:	ea03 0b01 	andle.w	fp, r3, r1
   d838a:	e005      	b.n	d8398 <_strtod_r+0x5b0>
   d838c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d8390:	fa02 f303 	lsl.w	r3, r2, r3
   d8394:	ea03 0a0a 	and.w	sl, r3, sl
   d8398:	2200      	movs	r2, #0
   d839a:	2300      	movs	r3, #0
   d839c:	4650      	mov	r0, sl
   d839e:	4659      	mov	r1, fp
   d83a0:	f7ff fa66 	bl	d7870 <__aeabi_dcmpeq>
   d83a4:	2800      	cmp	r0, #0
   d83a6:	d1b9      	bne.n	d831c <_strtod_r+0x534>
   d83a8:	e018      	b.n	d83dc <_strtod_r+0x5f4>
   d83aa:	bf00      	nop
   d83ac:	000dad50 	.word	0x000dad50
   d83b0:	000dad53 	.word	0x000dad53
   d83b4:	000dad59 	.word	0x000dad59
   d83b8:	000dad3c 	.word	0x000dad3c
   d83bc:	000dadc8 	.word	0x000dadc8
   d83c0:	000dae90 	.word	0x000dae90
   d83c4:	7ca00000 	.word	0x7ca00000
   d83c8:	000dad60 	.word	0x000dad60
   d83cc:	7ff00000 	.word	0x7ff00000
   d83d0:	fff80000 	.word	0xfff80000
   d83d4:	7fefffff 	.word	0x7fefffff
   d83d8:	2300      	movs	r3, #0
   d83da:	9303      	str	r3, [sp, #12]
   d83dc:	9b05      	ldr	r3, [sp, #20]
   d83de:	9300      	str	r3, [sp, #0]
   d83e0:	9a04      	ldr	r2, [sp, #16]
   d83e2:	9907      	ldr	r1, [sp, #28]
   d83e4:	9802      	ldr	r0, [sp, #8]
   d83e6:	462b      	mov	r3, r5
   d83e8:	f001 fb0d 	bl	d9a06 <__s2b>
   d83ec:	9005      	str	r0, [sp, #20]
   d83ee:	2800      	cmp	r0, #0
   d83f0:	f43f af3d 	beq.w	d826e <_strtod_r+0x486>
   d83f4:	f1b9 0f00 	cmp.w	r9, #0
   d83f8:	f1c9 0300 	rsb	r3, r9, #0
   d83fc:	bfa8      	it	ge
   d83fe:	2300      	movge	r3, #0
   d8400:	930d      	str	r3, [sp, #52]	; 0x34
   d8402:	2400      	movs	r4, #0
   d8404:	ea29 73e9 	bic.w	r3, r9, r9, asr #31
   d8408:	9312      	str	r3, [sp, #72]	; 0x48
   d840a:	4625      	mov	r5, r4
   d840c:	9b05      	ldr	r3, [sp, #20]
   d840e:	9802      	ldr	r0, [sp, #8]
   d8410:	6859      	ldr	r1, [r3, #4]
   d8412:	f001 fa71 	bl	d98f8 <_Balloc>
   d8416:	9004      	str	r0, [sp, #16]
   d8418:	2800      	cmp	r0, #0
   d841a:	f43f af2c 	beq.w	d8276 <_strtod_r+0x48e>
   d841e:	9b05      	ldr	r3, [sp, #20]
   d8420:	691a      	ldr	r2, [r3, #16]
   d8422:	3202      	adds	r2, #2
   d8424:	f103 010c 	add.w	r1, r3, #12
   d8428:	0092      	lsls	r2, r2, #2
   d842a:	300c      	adds	r0, #12
   d842c:	f7ff fbfc 	bl	d7c28 <memcpy>
   d8430:	aa1a      	add	r2, sp, #104	; 0x68
   d8432:	a919      	add	r1, sp, #100	; 0x64
   d8434:	ec4b ab10 	vmov	d0, sl, fp
   d8438:	9802      	ldr	r0, [sp, #8]
   d843a:	e9cd ab08 	strd	sl, fp, [sp, #32]
   d843e:	f001 fd96 	bl	d9f6e <__d2b>
   d8442:	9018      	str	r0, [sp, #96]	; 0x60
   d8444:	2800      	cmp	r0, #0
   d8446:	f43f af16 	beq.w	d8276 <_strtod_r+0x48e>
   d844a:	2101      	movs	r1, #1
   d844c:	9802      	ldr	r0, [sp, #8]
   d844e:	f001 fb65 	bl	d9b1c <__i2b>
   d8452:	4605      	mov	r5, r0
   d8454:	2800      	cmp	r0, #0
   d8456:	f43f af0e 	beq.w	d8276 <_strtod_r+0x48e>
   d845a:	9b19      	ldr	r3, [sp, #100]	; 0x64
   d845c:	9903      	ldr	r1, [sp, #12]
   d845e:	9e1a      	ldr	r6, [sp, #104]	; 0x68
   d8460:	2b00      	cmp	r3, #0
   d8462:	bfad      	iteet	ge
   d8464:	9a0d      	ldrge	r2, [sp, #52]	; 0x34
   d8466:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   d8468:	f8dd 8034 	ldrlt.w	r8, [sp, #52]	; 0x34
   d846c:	eb02 0803 	addge.w	r8, r2, r3
   d8470:	bfb8      	it	lt
   d8472:	1ad2      	sublt	r2, r2, r3
   d8474:	eba3 0301 	sub.w	r3, r3, r1
   d8478:	4433      	add	r3, r6
   d847a:	49b5      	ldr	r1, [pc, #724]	; (d8750 <_strtod_r+0x968>)
   d847c:	bfa8      	it	ge
   d847e:	9a12      	ldrge	r2, [sp, #72]	; 0x48
   d8480:	3b01      	subs	r3, #1
   d8482:	428b      	cmp	r3, r1
   d8484:	f1c6 0636 	rsb	r6, r6, #54	; 0x36
   d8488:	f280 808a 	bge.w	d85a0 <_strtod_r+0x7b8>
   d848c:	1ac9      	subs	r1, r1, r3
   d848e:	291f      	cmp	r1, #31
   d8490:	bfc8      	it	gt
   d8492:	4fb0      	ldrgt	r7, [pc, #704]	; (d8754 <_strtod_r+0x96c>)
   d8494:	f04f 0901 	mov.w	r9, #1
   d8498:	bfd4      	ite	le
   d849a:	fa09 f301 	lslle.w	r3, r9, r1
   d849e:	1aff      	subgt	r7, r7, r3
   d84a0:	eba6 0601 	sub.w	r6, r6, r1
   d84a4:	bfd9      	ittee	le
   d84a6:	9306      	strle	r3, [sp, #24]
   d84a8:	2700      	movle	r7, #0
   d84aa:	fa09 f707 	lslgt.w	r7, r9, r7
   d84ae:	f8cd 9018 	strgt.w	r9, [sp, #24]
   d84b2:	eb08 0906 	add.w	r9, r8, r6
   d84b6:	9b03      	ldr	r3, [sp, #12]
   d84b8:	45c8      	cmp	r8, r9
   d84ba:	4416      	add	r6, r2
   d84bc:	441e      	add	r6, r3
   d84be:	4643      	mov	r3, r8
   d84c0:	bfa8      	it	ge
   d84c2:	464b      	movge	r3, r9
   d84c4:	42b3      	cmp	r3, r6
   d84c6:	bfa8      	it	ge
   d84c8:	4633      	movge	r3, r6
   d84ca:	2b00      	cmp	r3, #0
   d84cc:	bfc2      	ittt	gt
   d84ce:	ebc3 0909 	rsbgt	r9, r3, r9
   d84d2:	1af6      	subgt	r6, r6, r3
   d84d4:	ebc3 0808 	rsbgt	r8, r3, r8
   d84d8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   d84da:	2b00      	cmp	r3, #0
   d84dc:	d164      	bne.n	d85a8 <_strtod_r+0x7c0>
   d84de:	f1b9 0f00 	cmp.w	r9, #0
   d84e2:	dc7a      	bgt.n	d85da <_strtod_r+0x7f2>
   d84e4:	9b12      	ldr	r3, [sp, #72]	; 0x48
   d84e6:	2b00      	cmp	r3, #0
   d84e8:	f040 8081 	bne.w	d85ee <_strtod_r+0x806>
   d84ec:	2e00      	cmp	r6, #0
   d84ee:	f300 8088 	bgt.w	d8602 <_strtod_r+0x81a>
   d84f2:	f1b8 0f00 	cmp.w	r8, #0
   d84f6:	f300 808e 	bgt.w	d8616 <_strtod_r+0x82e>
   d84fa:	9a04      	ldr	r2, [sp, #16]
   d84fc:	9918      	ldr	r1, [sp, #96]	; 0x60
   d84fe:	9802      	ldr	r0, [sp, #8]
   d8500:	f001 fc61 	bl	d9dc6 <__mdiff>
   d8504:	4604      	mov	r4, r0
   d8506:	2800      	cmp	r0, #0
   d8508:	f43f aeb5 	beq.w	d8276 <_strtod_r+0x48e>
   d850c:	68c3      	ldr	r3, [r0, #12]
   d850e:	9307      	str	r3, [sp, #28]
   d8510:	2300      	movs	r3, #0
   d8512:	60c3      	str	r3, [r0, #12]
   d8514:	4629      	mov	r1, r5
   d8516:	f001 fc3a 	bl	d9d8e <__mcmp>
   d851a:	2800      	cmp	r0, #0
   d851c:	f280 8089 	bge.w	d8632 <_strtod_r+0x84a>
   d8520:	9b07      	ldr	r3, [sp, #28]
   d8522:	2b00      	cmp	r3, #0
   d8524:	f040 8204 	bne.w	d8930 <_strtod_r+0xb48>
   d8528:	f1ba 0f00 	cmp.w	sl, #0
   d852c:	f040 8200 	bne.w	d8930 <_strtod_r+0xb48>
   d8530:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d8534:	2b00      	cmp	r3, #0
   d8536:	f040 81fb 	bne.w	d8930 <_strtod_r+0xb48>
   d853a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   d853e:	0d1b      	lsrs	r3, r3, #20
   d8540:	051b      	lsls	r3, r3, #20
   d8542:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   d8546:	f240 81f3 	bls.w	d8930 <_strtod_r+0xb48>
   d854a:	6963      	ldr	r3, [r4, #20]
   d854c:	2b00      	cmp	r3, #0
   d854e:	d06c      	beq.n	d862a <_strtod_r+0x842>
   d8550:	4621      	mov	r1, r4
   d8552:	2201      	movs	r2, #1
   d8554:	9802      	ldr	r0, [sp, #8]
   d8556:	f001 fbc9 	bl	d9cec <__lshift>
   d855a:	4629      	mov	r1, r5
   d855c:	4604      	mov	r4, r0
   d855e:	f001 fc16 	bl	d9d8e <__mcmp>
   d8562:	2800      	cmp	r0, #0
   d8564:	f340 81e4 	ble.w	d8930 <_strtod_r+0xb48>
   d8568:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   d856c:	9a03      	ldr	r2, [sp, #12]
   d856e:	0d1b      	lsrs	r3, r3, #20
   d8570:	051b      	lsls	r3, r3, #20
   d8572:	2a00      	cmp	r2, #0
   d8574:	f000 808c 	beq.w	d8690 <_strtod_r+0x8a8>
   d8578:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   d857c:	f300 8088 	bgt.w	d8690 <_strtod_r+0x8a8>
   d8580:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
   d8584:	f300 81d6 	bgt.w	d8934 <_strtod_r+0xb4c>
   d8588:	9a02      	ldr	r2, [sp, #8]
   d858a:	2322      	movs	r3, #34	; 0x22
   d858c:	f04f 0a00 	mov.w	sl, #0
   d8590:	f04f 0b00 	mov.w	fp, #0
   d8594:	6013      	str	r3, [r2, #0]
   d8596:	9b05      	ldr	r3, [sp, #20]
   d8598:	2b00      	cmp	r3, #0
   d859a:	f040 81dc 	bne.w	d8956 <_strtod_r+0xb6e>
   d859e:	e1ee      	b.n	d897e <_strtod_r+0xb96>
   d85a0:	2301      	movs	r3, #1
   d85a2:	2700      	movs	r7, #0
   d85a4:	9306      	str	r3, [sp, #24]
   d85a6:	e784      	b.n	d84b2 <_strtod_r+0x6ca>
   d85a8:	4629      	mov	r1, r5
   d85aa:	461a      	mov	r2, r3
   d85ac:	9802      	ldr	r0, [sp, #8]
   d85ae:	f001 fb4f 	bl	d9c50 <__pow5mult>
   d85b2:	4605      	mov	r5, r0
   d85b4:	2800      	cmp	r0, #0
   d85b6:	f43f ae5e 	beq.w	d8276 <_strtod_r+0x48e>
   d85ba:	4601      	mov	r1, r0
   d85bc:	9a18      	ldr	r2, [sp, #96]	; 0x60
   d85be:	9802      	ldr	r0, [sp, #8]
   d85c0:	f001 fab5 	bl	d9b2e <__multiply>
   d85c4:	9007      	str	r0, [sp, #28]
   d85c6:	2800      	cmp	r0, #0
   d85c8:	f43f ae55 	beq.w	d8276 <_strtod_r+0x48e>
   d85cc:	9918      	ldr	r1, [sp, #96]	; 0x60
   d85ce:	9802      	ldr	r0, [sp, #8]
   d85d0:	f001 f9c7 	bl	d9962 <_Bfree>
   d85d4:	9b07      	ldr	r3, [sp, #28]
   d85d6:	9318      	str	r3, [sp, #96]	; 0x60
   d85d8:	e781      	b.n	d84de <_strtod_r+0x6f6>
   d85da:	464a      	mov	r2, r9
   d85dc:	9918      	ldr	r1, [sp, #96]	; 0x60
   d85de:	9802      	ldr	r0, [sp, #8]
   d85e0:	f001 fb84 	bl	d9cec <__lshift>
   d85e4:	9018      	str	r0, [sp, #96]	; 0x60
   d85e6:	2800      	cmp	r0, #0
   d85e8:	f47f af7c 	bne.w	d84e4 <_strtod_r+0x6fc>
   d85ec:	e643      	b.n	d8276 <_strtod_r+0x48e>
   d85ee:	9a12      	ldr	r2, [sp, #72]	; 0x48
   d85f0:	9904      	ldr	r1, [sp, #16]
   d85f2:	9802      	ldr	r0, [sp, #8]
   d85f4:	f001 fb2c 	bl	d9c50 <__pow5mult>
   d85f8:	9004      	str	r0, [sp, #16]
   d85fa:	2800      	cmp	r0, #0
   d85fc:	f47f af76 	bne.w	d84ec <_strtod_r+0x704>
   d8600:	e639      	b.n	d8276 <_strtod_r+0x48e>
   d8602:	4632      	mov	r2, r6
   d8604:	9904      	ldr	r1, [sp, #16]
   d8606:	9802      	ldr	r0, [sp, #8]
   d8608:	f001 fb70 	bl	d9cec <__lshift>
   d860c:	9004      	str	r0, [sp, #16]
   d860e:	2800      	cmp	r0, #0
   d8610:	f47f af6f 	bne.w	d84f2 <_strtod_r+0x70a>
   d8614:	e62f      	b.n	d8276 <_strtod_r+0x48e>
   d8616:	4629      	mov	r1, r5
   d8618:	4642      	mov	r2, r8
   d861a:	9802      	ldr	r0, [sp, #8]
   d861c:	f001 fb66 	bl	d9cec <__lshift>
   d8620:	4605      	mov	r5, r0
   d8622:	2800      	cmp	r0, #0
   d8624:	f47f af69 	bne.w	d84fa <_strtod_r+0x712>
   d8628:	e625      	b.n	d8276 <_strtod_r+0x48e>
   d862a:	6923      	ldr	r3, [r4, #16]
   d862c:	2b01      	cmp	r3, #1
   d862e:	dc8f      	bgt.n	d8550 <_strtod_r+0x768>
   d8630:	e17e      	b.n	d8930 <_strtod_r+0xb48>
   d8632:	d161      	bne.n	d86f8 <_strtod_r+0x910>
   d8634:	9a07      	ldr	r2, [sp, #28]
   d8636:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d863a:	b322      	cbz	r2, d8686 <_strtod_r+0x89e>
   d863c:	4946      	ldr	r1, [pc, #280]	; (d8758 <_strtod_r+0x970>)
   d863e:	428b      	cmp	r3, r1
   d8640:	465a      	mov	r2, fp
   d8642:	d12e      	bne.n	d86a2 <_strtod_r+0x8ba>
   d8644:	9b03      	ldr	r3, [sp, #12]
   d8646:	4651      	mov	r1, sl
   d8648:	b163      	cbz	r3, d8664 <_strtod_r+0x87c>
   d864a:	4b44      	ldr	r3, [pc, #272]	; (d875c <_strtod_r+0x974>)
   d864c:	4013      	ands	r3, r2
   d864e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   d8652:	d807      	bhi.n	d8664 <_strtod_r+0x87c>
   d8654:	0d1b      	lsrs	r3, r3, #20
   d8656:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   d865a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d865e:	fa00 f303 	lsl.w	r3, r0, r3
   d8662:	e001      	b.n	d8668 <_strtod_r+0x880>
   d8664:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d8668:	428b      	cmp	r3, r1
   d866a:	d11a      	bne.n	d86a2 <_strtod_r+0x8ba>
   d866c:	493c      	ldr	r1, [pc, #240]	; (d8760 <_strtod_r+0x978>)
   d866e:	428a      	cmp	r2, r1
   d8670:	d102      	bne.n	d8678 <_strtod_r+0x890>
   d8672:	3301      	adds	r3, #1
   d8674:	f43f adff 	beq.w	d8276 <_strtod_r+0x48e>
   d8678:	4b38      	ldr	r3, [pc, #224]	; (d875c <_strtod_r+0x974>)
   d867a:	4013      	ands	r3, r2
   d867c:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   d8680:	f04f 0a00 	mov.w	sl, #0
   d8684:	e154      	b.n	d8930 <_strtod_r+0xb48>
   d8686:	b963      	cbnz	r3, d86a2 <_strtod_r+0x8ba>
   d8688:	f1ba 0f00 	cmp.w	sl, #0
   d868c:	d109      	bne.n	d86a2 <_strtod_r+0x8ba>
   d868e:	e76b      	b.n	d8568 <_strtod_r+0x780>
   d8690:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   d8694:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   d8698:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   d869c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   d86a0:	e146      	b.n	d8930 <_strtod_r+0xb48>
   d86a2:	b117      	cbz	r7, d86aa <_strtod_r+0x8c2>
   d86a4:	ea17 0f0b 	tst.w	r7, fp
   d86a8:	e002      	b.n	d86b0 <_strtod_r+0x8c8>
   d86aa:	9b06      	ldr	r3, [sp, #24]
   d86ac:	ea13 0f0a 	tst.w	r3, sl
   d86b0:	f000 813e 	beq.w	d8930 <_strtod_r+0xb48>
   d86b4:	9b07      	ldr	r3, [sp, #28]
   d86b6:	9a03      	ldr	r2, [sp, #12]
   d86b8:	4650      	mov	r0, sl
   d86ba:	4659      	mov	r1, fp
   d86bc:	b153      	cbz	r3, d86d4 <_strtod_r+0x8ec>
   d86be:	f7ff fb74 	bl	d7daa <sulp>
   d86c2:	4602      	mov	r2, r0
   d86c4:	460b      	mov	r3, r1
   d86c6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   d86ca:	f7fe fcb7 	bl	d703c <__adddf3>
   d86ce:	4682      	mov	sl, r0
   d86d0:	468b      	mov	fp, r1
   d86d2:	e12d      	b.n	d8930 <_strtod_r+0xb48>
   d86d4:	f7ff fb69 	bl	d7daa <sulp>
   d86d8:	4602      	mov	r2, r0
   d86da:	460b      	mov	r3, r1
   d86dc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   d86e0:	f7fe fcaa 	bl	d7038 <__aeabi_dsub>
   d86e4:	2200      	movs	r2, #0
   d86e6:	2300      	movs	r3, #0
   d86e8:	4682      	mov	sl, r0
   d86ea:	468b      	mov	fp, r1
   d86ec:	f7ff f8c0 	bl	d7870 <__aeabi_dcmpeq>
   d86f0:	2800      	cmp	r0, #0
   d86f2:	f47f af49 	bne.w	d8588 <_strtod_r+0x7a0>
   d86f6:	e11b      	b.n	d8930 <_strtod_r+0xb48>
   d86f8:	4629      	mov	r1, r5
   d86fa:	4620      	mov	r0, r4
   d86fc:	f001 fc85 	bl	da00a <__ratio>
   d8700:	ec57 6b10 	vmov	r6, r7, d0
   d8704:	2200      	movs	r2, #0
   d8706:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   d870a:	ee10 0a10 	vmov	r0, s0
   d870e:	4639      	mov	r1, r7
   d8710:	f7ff f8c2 	bl	d7898 <__aeabi_dcmple>
   d8714:	2800      	cmp	r0, #0
   d8716:	d042      	beq.n	d879e <_strtod_r+0x9b6>
   d8718:	9b07      	ldr	r3, [sp, #28]
   d871a:	b123      	cbz	r3, d8726 <_strtod_r+0x93e>
   d871c:	f04f 0800 	mov.w	r8, #0
   d8720:	f8df 9040 	ldr.w	r9, [pc, #64]	; d8764 <_strtod_r+0x97c>
   d8724:	e011      	b.n	d874a <_strtod_r+0x962>
   d8726:	f1ba 0f00 	cmp.w	sl, #0
   d872a:	d103      	bne.n	d8734 <_strtod_r+0x94c>
   d872c:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d8730:	b93b      	cbnz	r3, d8742 <_strtod_r+0x95a>
   d8732:	e01b      	b.n	d876c <_strtod_r+0x984>
   d8734:	f1ba 0f01 	cmp.w	sl, #1
   d8738:	d103      	bne.n	d8742 <_strtod_r+0x95a>
   d873a:	f1bb 0f00 	cmp.w	fp, #0
   d873e:	f43f af23 	beq.w	d8588 <_strtod_r+0x7a0>
   d8742:	f8df 9024 	ldr.w	r9, [pc, #36]	; d8768 <_strtod_r+0x980>
   d8746:	f04f 0800 	mov.w	r8, #0
   d874a:	2600      	movs	r6, #0
   d874c:	4f05      	ldr	r7, [pc, #20]	; (d8764 <_strtod_r+0x97c>)
   d874e:	e039      	b.n	d87c4 <_strtod_r+0x9dc>
   d8750:	fffffc02 	.word	0xfffffc02
   d8754:	fffffbe2 	.word	0xfffffbe2
   d8758:	000fffff 	.word	0x000fffff
   d875c:	7ff00000 	.word	0x7ff00000
   d8760:	7fefffff 	.word	0x7fefffff
   d8764:	3ff00000 	.word	0x3ff00000
   d8768:	bff00000 	.word	0xbff00000
   d876c:	2200      	movs	r2, #0
   d876e:	4b98      	ldr	r3, [pc, #608]	; (d89d0 <_strtod_r+0xbe8>)
   d8770:	4630      	mov	r0, r6
   d8772:	4639      	mov	r1, r7
   d8774:	f7ff f886 	bl	d7884 <__aeabi_dcmplt>
   d8778:	b940      	cbnz	r0, d878c <_strtod_r+0x9a4>
   d877a:	4630      	mov	r0, r6
   d877c:	4639      	mov	r1, r7
   d877e:	2200      	movs	r2, #0
   d8780:	4b94      	ldr	r3, [pc, #592]	; (d89d4 <_strtod_r+0xbec>)
   d8782:	f7fe fe0d 	bl	d73a0 <__aeabi_dmul>
   d8786:	4606      	mov	r6, r0
   d8788:	460f      	mov	r7, r1
   d878a:	e001      	b.n	d8790 <_strtod_r+0x9a8>
   d878c:	4f91      	ldr	r7, [pc, #580]	; (d89d4 <_strtod_r+0xbec>)
   d878e:	2600      	movs	r6, #0
   d8790:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   d8794:	9614      	str	r6, [sp, #80]	; 0x50
   d8796:	9315      	str	r3, [sp, #84]	; 0x54
   d8798:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
   d879c:	e012      	b.n	d87c4 <_strtod_r+0x9dc>
   d879e:	4b8d      	ldr	r3, [pc, #564]	; (d89d4 <_strtod_r+0xbec>)
   d87a0:	4630      	mov	r0, r6
   d87a2:	4639      	mov	r1, r7
   d87a4:	2200      	movs	r2, #0
   d87a6:	f7fe fdfb 	bl	d73a0 <__aeabi_dmul>
   d87aa:	9b07      	ldr	r3, [sp, #28]
   d87ac:	4606      	mov	r6, r0
   d87ae:	460f      	mov	r7, r1
   d87b0:	b923      	cbnz	r3, d87bc <_strtod_r+0x9d4>
   d87b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d87b6:	900e      	str	r0, [sp, #56]	; 0x38
   d87b8:	930f      	str	r3, [sp, #60]	; 0x3c
   d87ba:	e001      	b.n	d87c0 <_strtod_r+0x9d8>
   d87bc:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
   d87c0:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
   d87c4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   d87c8:	0d1b      	lsrs	r3, r3, #20
   d87ca:	051b      	lsls	r3, r3, #20
   d87cc:	9306      	str	r3, [sp, #24]
   d87ce:	9a06      	ldr	r2, [sp, #24]
   d87d0:	4b81      	ldr	r3, [pc, #516]	; (d89d8 <_strtod_r+0xbf0>)
   d87d2:	429a      	cmp	r2, r3
   d87d4:	d12b      	bne.n	d882e <_strtod_r+0xa46>
   d87d6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   d87da:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   d87de:	ec4b ab10 	vmov	d0, sl, fp
   d87e2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
   d87e6:	f001 fb4d 	bl	d9e84 <__ulp>
   d87ea:	4640      	mov	r0, r8
   d87ec:	ec53 2b10 	vmov	r2, r3, d0
   d87f0:	4649      	mov	r1, r9
   d87f2:	f7fe fdd5 	bl	d73a0 <__aeabi_dmul>
   d87f6:	4652      	mov	r2, sl
   d87f8:	465b      	mov	r3, fp
   d87fa:	f7fe fc1f 	bl	d703c <__adddf3>
   d87fe:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   d8802:	0d1b      	lsrs	r3, r3, #20
   d8804:	4a75      	ldr	r2, [pc, #468]	; (d89dc <_strtod_r+0xbf4>)
   d8806:	051b      	lsls	r3, r3, #20
   d8808:	4293      	cmp	r3, r2
   d880a:	4682      	mov	sl, r0
   d880c:	d90c      	bls.n	d8828 <_strtod_r+0xa40>
   d880e:	4b74      	ldr	r3, [pc, #464]	; (d89e0 <_strtod_r+0xbf8>)
   d8810:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   d8812:	429a      	cmp	r2, r3
   d8814:	d103      	bne.n	d881e <_strtod_r+0xa36>
   d8816:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d8818:	3301      	adds	r3, #1
   d881a:	f43f ad2c 	beq.w	d8276 <_strtod_r+0x48e>
   d881e:	f8df b1c0 	ldr.w	fp, [pc, #448]	; d89e0 <_strtod_r+0xbf8>
   d8822:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   d8826:	e072      	b.n	d890e <_strtod_r+0xb26>
   d8828:	f101 7b54 	add.w	fp, r1, #55574528	; 0x3500000
   d882c:	e038      	b.n	d88a0 <_strtod_r+0xab8>
   d882e:	9b03      	ldr	r3, [sp, #12]
   d8830:	b333      	cbz	r3, d8880 <_strtod_r+0xa98>
   d8832:	9b06      	ldr	r3, [sp, #24]
   d8834:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   d8838:	d822      	bhi.n	d8880 <_strtod_r+0xa98>
   d883a:	a35d      	add	r3, pc, #372	; (adr r3, d89b0 <_strtod_r+0xbc8>)
   d883c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8840:	4630      	mov	r0, r6
   d8842:	4639      	mov	r1, r7
   d8844:	f7ff f828 	bl	d7898 <__aeabi_dcmple>
   d8848:	b1a8      	cbz	r0, d8876 <_strtod_r+0xa8e>
   d884a:	4639      	mov	r1, r7
   d884c:	4630      	mov	r0, r6
   d884e:	f7ff f869 	bl	d7924 <__aeabi_d2uiz>
   d8852:	2800      	cmp	r0, #0
   d8854:	bf08      	it	eq
   d8856:	2001      	moveq	r0, #1
   d8858:	f7fe fd2c 	bl	d72b4 <__aeabi_ui2d>
   d885c:	9b07      	ldr	r3, [sp, #28]
   d885e:	4606      	mov	r6, r0
   d8860:	460f      	mov	r7, r1
   d8862:	b923      	cbnz	r3, d886e <_strtod_r+0xa86>
   d8864:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d8868:	9010      	str	r0, [sp, #64]	; 0x40
   d886a:	9311      	str	r3, [sp, #68]	; 0x44
   d886c:	e001      	b.n	d8872 <_strtod_r+0xa8a>
   d886e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
   d8872:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
   d8876:	9a06      	ldr	r2, [sp, #24]
   d8878:	f109 63d6 	add.w	r3, r9, #112197632	; 0x6b00000
   d887c:	ebc2 0903 	rsb	r9, r2, r3
   d8880:	ed9d 0b08 	vldr	d0, [sp, #32]
   d8884:	f001 fafe 	bl	d9e84 <__ulp>
   d8888:	4640      	mov	r0, r8
   d888a:	ec53 2b10 	vmov	r2, r3, d0
   d888e:	4649      	mov	r1, r9
   d8890:	f7fe fd86 	bl	d73a0 <__aeabi_dmul>
   d8894:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   d8898:	f7fe fbd0 	bl	d703c <__adddf3>
   d889c:	4682      	mov	sl, r0
   d889e:	468b      	mov	fp, r1
   d88a0:	9b03      	ldr	r3, [sp, #12]
   d88a2:	bba3      	cbnz	r3, d890e <_strtod_r+0xb26>
   d88a4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   d88a8:	0d1b      	lsrs	r3, r3, #20
   d88aa:	9a06      	ldr	r2, [sp, #24]
   d88ac:	051b      	lsls	r3, r3, #20
   d88ae:	429a      	cmp	r2, r3
   d88b0:	46d8      	mov	r8, fp
   d88b2:	d12c      	bne.n	d890e <_strtod_r+0xb26>
   d88b4:	4639      	mov	r1, r7
   d88b6:	4630      	mov	r0, r6
   d88b8:	f7ff f80c 	bl	d78d4 <__aeabi_d2iz>
   d88bc:	f7fe fd0a 	bl	d72d4 <__aeabi_i2d>
   d88c0:	460b      	mov	r3, r1
   d88c2:	4602      	mov	r2, r0
   d88c4:	4639      	mov	r1, r7
   d88c6:	4630      	mov	r0, r6
   d88c8:	f7fe fbb6 	bl	d7038 <__aeabi_dsub>
   d88cc:	9b07      	ldr	r3, [sp, #28]
   d88ce:	4606      	mov	r6, r0
   d88d0:	460f      	mov	r7, r1
   d88d2:	b92b      	cbnz	r3, d88e0 <_strtod_r+0xaf8>
   d88d4:	f1ba 0f00 	cmp.w	sl, #0
   d88d8:	d102      	bne.n	d88e0 <_strtod_r+0xaf8>
   d88da:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d88de:	b183      	cbz	r3, d8902 <_strtod_r+0xb1a>
   d88e0:	a335      	add	r3, pc, #212	; (adr r3, d89b8 <_strtod_r+0xbd0>)
   d88e2:	e9d3 2300 	ldrd	r2, r3, [r3]
   d88e6:	4630      	mov	r0, r6
   d88e8:	4639      	mov	r1, r7
   d88ea:	f7fe ffcb 	bl	d7884 <__aeabi_dcmplt>
   d88ee:	2800      	cmp	r0, #0
   d88f0:	d131      	bne.n	d8956 <_strtod_r+0xb6e>
   d88f2:	a333      	add	r3, pc, #204	; (adr r3, d89c0 <_strtod_r+0xbd8>)
   d88f4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d88f8:	4630      	mov	r0, r6
   d88fa:	4639      	mov	r1, r7
   d88fc:	f7fe ffe0 	bl	d78c0 <__aeabi_dcmpgt>
   d8900:	e004      	b.n	d890c <_strtod_r+0xb24>
   d8902:	a331      	add	r3, pc, #196	; (adr r3, d89c8 <_strtod_r+0xbe0>)
   d8904:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8908:	f7fe ffbc 	bl	d7884 <__aeabi_dcmplt>
   d890c:	bb18      	cbnz	r0, d8956 <_strtod_r+0xb6e>
   d890e:	9918      	ldr	r1, [sp, #96]	; 0x60
   d8910:	9802      	ldr	r0, [sp, #8]
   d8912:	f001 f826 	bl	d9962 <_Bfree>
   d8916:	9904      	ldr	r1, [sp, #16]
   d8918:	9802      	ldr	r0, [sp, #8]
   d891a:	f001 f822 	bl	d9962 <_Bfree>
   d891e:	4629      	mov	r1, r5
   d8920:	9802      	ldr	r0, [sp, #8]
   d8922:	f001 f81e 	bl	d9962 <_Bfree>
   d8926:	4621      	mov	r1, r4
   d8928:	9802      	ldr	r0, [sp, #8]
   d892a:	f001 f81a 	bl	d9962 <_Bfree>
   d892e:	e56d      	b.n	d840c <_strtod_r+0x624>
   d8930:	9b03      	ldr	r3, [sp, #12]
   d8932:	b183      	cbz	r3, d8956 <_strtod_r+0xb6e>
   d8934:	4b2b      	ldr	r3, [pc, #172]	; (d89e4 <_strtod_r+0xbfc>)
   d8936:	930b      	str	r3, [sp, #44]	; 0x2c
   d8938:	2300      	movs	r3, #0
   d893a:	930a      	str	r3, [sp, #40]	; 0x28
   d893c:	4650      	mov	r0, sl
   d893e:	4659      	mov	r1, fp
   d8940:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   d8944:	f7fe fd2c 	bl	d73a0 <__aeabi_dmul>
   d8948:	4682      	mov	sl, r0
   d894a:	468b      	mov	fp, r1
   d894c:	b919      	cbnz	r1, d8956 <_strtod_r+0xb6e>
   d894e:	b910      	cbnz	r0, d8956 <_strtod_r+0xb6e>
   d8950:	9a02      	ldr	r2, [sp, #8]
   d8952:	2322      	movs	r3, #34	; 0x22
   d8954:	6013      	str	r3, [r2, #0]
   d8956:	9918      	ldr	r1, [sp, #96]	; 0x60
   d8958:	9802      	ldr	r0, [sp, #8]
   d895a:	f001 f802 	bl	d9962 <_Bfree>
   d895e:	9904      	ldr	r1, [sp, #16]
   d8960:	9802      	ldr	r0, [sp, #8]
   d8962:	f000 fffe 	bl	d9962 <_Bfree>
   d8966:	4629      	mov	r1, r5
   d8968:	9802      	ldr	r0, [sp, #8]
   d896a:	f000 fffa 	bl	d9962 <_Bfree>
   d896e:	9905      	ldr	r1, [sp, #20]
   d8970:	9802      	ldr	r0, [sp, #8]
   d8972:	f000 fff6 	bl	d9962 <_Bfree>
   d8976:	4621      	mov	r1, r4
   d8978:	9802      	ldr	r0, [sp, #8]
   d897a:	f000 fff2 	bl	d9962 <_Bfree>
   d897e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   d8980:	b113      	cbz	r3, d8988 <_strtod_r+0xba0>
   d8982:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   d8984:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d8986:	6013      	str	r3, [r2, #0]
   d8988:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d898a:	b11b      	cbz	r3, d8994 <_strtod_r+0xbac>
   d898c:	4652      	mov	r2, sl
   d898e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   d8992:	e007      	b.n	d89a4 <_strtod_r+0xbbc>
   d8994:	4652      	mov	r2, sl
   d8996:	465b      	mov	r3, fp
   d8998:	e004      	b.n	d89a4 <_strtod_r+0xbbc>
   d899a:	2500      	movs	r5, #0
   d899c:	462a      	mov	r2, r5
   d899e:	2101      	movs	r1, #1
   d89a0:	f7ff bb41 	b.w	d8026 <_strtod_r+0x23e>
   d89a4:	ec43 2b10 	vmov	d0, r2, r3
   d89a8:	b01d      	add	sp, #116	; 0x74
   d89aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d89ae:	bf00      	nop
   d89b0:	ffc00000 	.word	0xffc00000
   d89b4:	41dfffff 	.word	0x41dfffff
   d89b8:	94a03595 	.word	0x94a03595
   d89bc:	3fdfffff 	.word	0x3fdfffff
   d89c0:	35afe535 	.word	0x35afe535
   d89c4:	3fe00000 	.word	0x3fe00000
   d89c8:	94a03595 	.word	0x94a03595
   d89cc:	3fcfffff 	.word	0x3fcfffff
   d89d0:	3ff00000 	.word	0x3ff00000
   d89d4:	3fe00000 	.word	0x3fe00000
   d89d8:	7fe00000 	.word	0x7fe00000
   d89dc:	7c9fffff 	.word	0x7c9fffff
   d89e0:	7fefffff 	.word	0x7fefffff
   d89e4:	39500000 	.word	0x39500000

000d89e8 <strtod>:
   d89e8:	4b02      	ldr	r3, [pc, #8]	; (d89f4 <strtod+0xc>)
   d89ea:	460a      	mov	r2, r1
   d89ec:	4601      	mov	r1, r0
   d89ee:	6818      	ldr	r0, [r3, #0]
   d89f0:	f7ff b9fa 	b.w	d7de8 <_strtod_r>
   d89f4:	2003e170 	.word	0x2003e170

000d89f8 <__strtok_r>:
   d89f8:	b5f0      	push	{r4, r5, r6, r7, lr}
   d89fa:	b948      	cbnz	r0, d8a10 <__strtok_r+0x18>
   d89fc:	6810      	ldr	r0, [r2, #0]
   d89fe:	b938      	cbnz	r0, d8a10 <__strtok_r+0x18>
   d8a00:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d8a02:	f817 6b01 	ldrb.w	r6, [r7], #1
   d8a06:	b15e      	cbz	r6, d8a20 <__strtok_r+0x28>
   d8a08:	42b5      	cmp	r5, r6
   d8a0a:	d1fa      	bne.n	d8a02 <__strtok_r+0xa>
   d8a0c:	b12b      	cbz	r3, d8a1a <__strtok_r+0x22>
   d8a0e:	4620      	mov	r0, r4
   d8a10:	4604      	mov	r4, r0
   d8a12:	460f      	mov	r7, r1
   d8a14:	f814 5b01 	ldrb.w	r5, [r4], #1
   d8a18:	e7f3      	b.n	d8a02 <__strtok_r+0xa>
   d8a1a:	6014      	str	r4, [r2, #0]
   d8a1c:	7003      	strb	r3, [r0, #0]
   d8a1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d8a20:	b94d      	cbnz	r5, d8a36 <__strtok_r+0x3e>
   d8a22:	6015      	str	r5, [r2, #0]
   d8a24:	4628      	mov	r0, r5
   d8a26:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d8a28:	f817 6b01 	ldrb.w	r6, [r7], #1
   d8a2c:	42b5      	cmp	r5, r6
   d8a2e:	d007      	beq.n	d8a40 <__strtok_r+0x48>
   d8a30:	2e00      	cmp	r6, #0
   d8a32:	d1f9      	bne.n	d8a28 <__strtok_r+0x30>
   d8a34:	461c      	mov	r4, r3
   d8a36:	4623      	mov	r3, r4
   d8a38:	460f      	mov	r7, r1
   d8a3a:	f813 5b01 	ldrb.w	r5, [r3], #1
   d8a3e:	e7f3      	b.n	d8a28 <__strtok_r+0x30>
   d8a40:	b115      	cbz	r5, d8a48 <__strtok_r+0x50>
   d8a42:	2100      	movs	r1, #0
   d8a44:	7021      	strb	r1, [r4, #0]
   d8a46:	e000      	b.n	d8a4a <__strtok_r+0x52>
   d8a48:	462b      	mov	r3, r5
   d8a4a:	6013      	str	r3, [r2, #0]
   d8a4c:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d8a4e <strtok_r>:
   d8a4e:	2301      	movs	r3, #1
   d8a50:	f7ff bfd2 	b.w	d89f8 <__strtok_r>

000d8a54 <_strtol_r>:
   d8a54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d8a58:	4680      	mov	r8, r0
   d8a5a:	4840      	ldr	r0, [pc, #256]	; (d8b5c <_strtol_r+0x108>)
   d8a5c:	f8d0 9000 	ldr.w	r9, [r0]
   d8a60:	460f      	mov	r7, r1
   d8a62:	463d      	mov	r5, r7
   d8a64:	f815 4b01 	ldrb.w	r4, [r5], #1
   d8a68:	eb09 0004 	add.w	r0, r9, r4
   d8a6c:	7840      	ldrb	r0, [r0, #1]
   d8a6e:	f000 0008 	and.w	r0, r0, #8
   d8a72:	f000 06ff 	and.w	r6, r0, #255	; 0xff
   d8a76:	b108      	cbz	r0, d8a7c <_strtol_r+0x28>
   d8a78:	462f      	mov	r7, r5
   d8a7a:	e7f2      	b.n	d8a62 <_strtol_r+0xe>
   d8a7c:	2c2d      	cmp	r4, #45	; 0x2d
   d8a7e:	d103      	bne.n	d8a88 <_strtol_r+0x34>
   d8a80:	1cbd      	adds	r5, r7, #2
   d8a82:	787c      	ldrb	r4, [r7, #1]
   d8a84:	2601      	movs	r6, #1
   d8a86:	e003      	b.n	d8a90 <_strtol_r+0x3c>
   d8a88:	2c2b      	cmp	r4, #43	; 0x2b
   d8a8a:	bf04      	itt	eq
   d8a8c:	787c      	ldrbeq	r4, [r7, #1]
   d8a8e:	1cbd      	addeq	r5, r7, #2
   d8a90:	b113      	cbz	r3, d8a98 <_strtol_r+0x44>
   d8a92:	2b10      	cmp	r3, #16
   d8a94:	d10a      	bne.n	d8aac <_strtol_r+0x58>
   d8a96:	e05b      	b.n	d8b50 <_strtol_r+0xfc>
   d8a98:	2c30      	cmp	r4, #48	; 0x30
   d8a9a:	d157      	bne.n	d8b4c <_strtol_r+0xf8>
   d8a9c:	7828      	ldrb	r0, [r5, #0]
   d8a9e:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d8aa2:	2858      	cmp	r0, #88	; 0x58
   d8aa4:	d14d      	bne.n	d8b42 <_strtol_r+0xee>
   d8aa6:	786c      	ldrb	r4, [r5, #1]
   d8aa8:	2310      	movs	r3, #16
   d8aaa:	3502      	adds	r5, #2
   d8aac:	2e00      	cmp	r6, #0
   d8aae:	bf14      	ite	ne
   d8ab0:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
   d8ab4:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
   d8ab8:	2700      	movs	r7, #0
   d8aba:	fbbc faf3 	udiv	sl, ip, r3
   d8abe:	4638      	mov	r0, r7
   d8ac0:	fb03 cc1a 	mls	ip, r3, sl, ip
   d8ac4:	eb09 0e04 	add.w	lr, r9, r4
   d8ac8:	f89e e001 	ldrb.w	lr, [lr, #1]
   d8acc:	f01e 0f04 	tst.w	lr, #4
   d8ad0:	d001      	beq.n	d8ad6 <_strtol_r+0x82>
   d8ad2:	3c30      	subs	r4, #48	; 0x30
   d8ad4:	e00b      	b.n	d8aee <_strtol_r+0x9a>
   d8ad6:	f01e 0e03 	ands.w	lr, lr, #3
   d8ada:	d01b      	beq.n	d8b14 <_strtol_r+0xc0>
   d8adc:	f1be 0f01 	cmp.w	lr, #1
   d8ae0:	bf0c      	ite	eq
   d8ae2:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   d8ae6:	f04f 0e57 	movne.w	lr, #87	; 0x57
   d8aea:	ebce 0404 	rsb	r4, lr, r4
   d8aee:	42a3      	cmp	r3, r4
   d8af0:	dd10      	ble.n	d8b14 <_strtol_r+0xc0>
   d8af2:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
   d8af6:	d00a      	beq.n	d8b0e <_strtol_r+0xba>
   d8af8:	4550      	cmp	r0, sl
   d8afa:	d806      	bhi.n	d8b0a <_strtol_r+0xb6>
   d8afc:	d101      	bne.n	d8b02 <_strtol_r+0xae>
   d8afe:	4564      	cmp	r4, ip
   d8b00:	dc03      	bgt.n	d8b0a <_strtol_r+0xb6>
   d8b02:	fb03 4000 	mla	r0, r3, r0, r4
   d8b06:	2701      	movs	r7, #1
   d8b08:	e001      	b.n	d8b0e <_strtol_r+0xba>
   d8b0a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   d8b0e:	f815 4b01 	ldrb.w	r4, [r5], #1
   d8b12:	e7d7      	b.n	d8ac4 <_strtol_r+0x70>
   d8b14:	1c7b      	adds	r3, r7, #1
   d8b16:	d10c      	bne.n	d8b32 <_strtol_r+0xde>
   d8b18:	2e00      	cmp	r6, #0
   d8b1a:	f04f 0322 	mov.w	r3, #34	; 0x22
   d8b1e:	bf14      	ite	ne
   d8b20:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   d8b24:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d8b28:	f8c8 3000 	str.w	r3, [r8]
   d8b2c:	b92a      	cbnz	r2, d8b3a <_strtol_r+0xe6>
   d8b2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d8b32:	b106      	cbz	r6, d8b36 <_strtol_r+0xe2>
   d8b34:	4240      	negs	r0, r0
   d8b36:	b172      	cbz	r2, d8b56 <_strtol_r+0x102>
   d8b38:	b107      	cbz	r7, d8b3c <_strtol_r+0xe8>
   d8b3a:	1e69      	subs	r1, r5, #1
   d8b3c:	6011      	str	r1, [r2, #0]
   d8b3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d8b42:	2430      	movs	r4, #48	; 0x30
   d8b44:	2b00      	cmp	r3, #0
   d8b46:	d1b1      	bne.n	d8aac <_strtol_r+0x58>
   d8b48:	2308      	movs	r3, #8
   d8b4a:	e7af      	b.n	d8aac <_strtol_r+0x58>
   d8b4c:	230a      	movs	r3, #10
   d8b4e:	e7ad      	b.n	d8aac <_strtol_r+0x58>
   d8b50:	2c30      	cmp	r4, #48	; 0x30
   d8b52:	d0a3      	beq.n	d8a9c <_strtol_r+0x48>
   d8b54:	e7aa      	b.n	d8aac <_strtol_r+0x58>
   d8b56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d8b5a:	bf00      	nop
   d8b5c:	2003e10c 	.word	0x2003e10c

000d8b60 <strtol>:
   d8b60:	4613      	mov	r3, r2
   d8b62:	460a      	mov	r2, r1
   d8b64:	4601      	mov	r1, r0
   d8b66:	4802      	ldr	r0, [pc, #8]	; (d8b70 <strtol+0x10>)
   d8b68:	6800      	ldr	r0, [r0, #0]
   d8b6a:	f7ff bf73 	b.w	d8a54 <_strtol_r>
   d8b6e:	bf00      	nop
   d8b70:	2003e170 	.word	0x2003e170

000d8b74 <_strtoul_r>:
   d8b74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d8b78:	4680      	mov	r8, r0
   d8b7a:	483c      	ldr	r0, [pc, #240]	; (d8c6c <_strtoul_r+0xf8>)
   d8b7c:	f8d0 9000 	ldr.w	r9, [r0]
   d8b80:	460e      	mov	r6, r1
   d8b82:	4635      	mov	r5, r6
   d8b84:	f815 4b01 	ldrb.w	r4, [r5], #1
   d8b88:	eb09 0004 	add.w	r0, r9, r4
   d8b8c:	7840      	ldrb	r0, [r0, #1]
   d8b8e:	f000 0008 	and.w	r0, r0, #8
   d8b92:	f000 07ff 	and.w	r7, r0, #255	; 0xff
   d8b96:	b108      	cbz	r0, d8b9c <_strtoul_r+0x28>
   d8b98:	462e      	mov	r6, r5
   d8b9a:	e7f2      	b.n	d8b82 <_strtoul_r+0xe>
   d8b9c:	2c2d      	cmp	r4, #45	; 0x2d
   d8b9e:	d103      	bne.n	d8ba8 <_strtoul_r+0x34>
   d8ba0:	1cb5      	adds	r5, r6, #2
   d8ba2:	7874      	ldrb	r4, [r6, #1]
   d8ba4:	2701      	movs	r7, #1
   d8ba6:	e003      	b.n	d8bb0 <_strtoul_r+0x3c>
   d8ba8:	2c2b      	cmp	r4, #43	; 0x2b
   d8baa:	bf04      	itt	eq
   d8bac:	7874      	ldrbeq	r4, [r6, #1]
   d8bae:	1cb5      	addeq	r5, r6, #2
   d8bb0:	b113      	cbz	r3, d8bb8 <_strtoul_r+0x44>
   d8bb2:	2b10      	cmp	r3, #16
   d8bb4:	d10a      	bne.n	d8bcc <_strtoul_r+0x58>
   d8bb6:	e053      	b.n	d8c60 <_strtoul_r+0xec>
   d8bb8:	2c30      	cmp	r4, #48	; 0x30
   d8bba:	d14f      	bne.n	d8c5c <_strtoul_r+0xe8>
   d8bbc:	7828      	ldrb	r0, [r5, #0]
   d8bbe:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d8bc2:	2858      	cmp	r0, #88	; 0x58
   d8bc4:	d145      	bne.n	d8c52 <_strtoul_r+0xde>
   d8bc6:	786c      	ldrb	r4, [r5, #1]
   d8bc8:	2310      	movs	r3, #16
   d8bca:	3502      	adds	r5, #2
   d8bcc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   d8bd0:	2600      	movs	r6, #0
   d8bd2:	fbbc fcf3 	udiv	ip, ip, r3
   d8bd6:	fb03 fa0c 	mul.w	sl, r3, ip
   d8bda:	ea6f 0a0a 	mvn.w	sl, sl
   d8bde:	4630      	mov	r0, r6
   d8be0:	eb09 0e04 	add.w	lr, r9, r4
   d8be4:	f89e e001 	ldrb.w	lr, [lr, #1]
   d8be8:	f01e 0f04 	tst.w	lr, #4
   d8bec:	d001      	beq.n	d8bf2 <_strtoul_r+0x7e>
   d8bee:	3c30      	subs	r4, #48	; 0x30
   d8bf0:	e00b      	b.n	d8c0a <_strtoul_r+0x96>
   d8bf2:	f01e 0e03 	ands.w	lr, lr, #3
   d8bf6:	d01a      	beq.n	d8c2e <_strtoul_r+0xba>
   d8bf8:	f1be 0f01 	cmp.w	lr, #1
   d8bfc:	bf0c      	ite	eq
   d8bfe:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   d8c02:	f04f 0e57 	movne.w	lr, #87	; 0x57
   d8c06:	ebce 0404 	rsb	r4, lr, r4
   d8c0a:	42a3      	cmp	r3, r4
   d8c0c:	dd0f      	ble.n	d8c2e <_strtoul_r+0xba>
   d8c0e:	2e00      	cmp	r6, #0
   d8c10:	db08      	blt.n	d8c24 <_strtoul_r+0xb0>
   d8c12:	4560      	cmp	r0, ip
   d8c14:	d806      	bhi.n	d8c24 <_strtoul_r+0xb0>
   d8c16:	d101      	bne.n	d8c1c <_strtoul_r+0xa8>
   d8c18:	4554      	cmp	r4, sl
   d8c1a:	dc03      	bgt.n	d8c24 <_strtoul_r+0xb0>
   d8c1c:	fb03 4000 	mla	r0, r3, r0, r4
   d8c20:	2601      	movs	r6, #1
   d8c22:	e001      	b.n	d8c28 <_strtoul_r+0xb4>
   d8c24:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   d8c28:	f815 4b01 	ldrb.w	r4, [r5], #1
   d8c2c:	e7d8      	b.n	d8be0 <_strtoul_r+0x6c>
   d8c2e:	2e00      	cmp	r6, #0
   d8c30:	da07      	bge.n	d8c42 <_strtoul_r+0xce>
   d8c32:	2322      	movs	r3, #34	; 0x22
   d8c34:	f8c8 3000 	str.w	r3, [r8]
   d8c38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d8c3c:	b92a      	cbnz	r2, d8c4a <_strtoul_r+0xd6>
   d8c3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d8c42:	b107      	cbz	r7, d8c46 <_strtoul_r+0xd2>
   d8c44:	4240      	negs	r0, r0
   d8c46:	b172      	cbz	r2, d8c66 <_strtoul_r+0xf2>
   d8c48:	b106      	cbz	r6, d8c4c <_strtoul_r+0xd8>
   d8c4a:	1e69      	subs	r1, r5, #1
   d8c4c:	6011      	str	r1, [r2, #0]
   d8c4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d8c52:	2430      	movs	r4, #48	; 0x30
   d8c54:	2b00      	cmp	r3, #0
   d8c56:	d1b9      	bne.n	d8bcc <_strtoul_r+0x58>
   d8c58:	2308      	movs	r3, #8
   d8c5a:	e7b7      	b.n	d8bcc <_strtoul_r+0x58>
   d8c5c:	230a      	movs	r3, #10
   d8c5e:	e7b5      	b.n	d8bcc <_strtoul_r+0x58>
   d8c60:	2c30      	cmp	r4, #48	; 0x30
   d8c62:	d0ab      	beq.n	d8bbc <_strtoul_r+0x48>
   d8c64:	e7b2      	b.n	d8bcc <_strtoul_r+0x58>
   d8c66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d8c6a:	bf00      	nop
   d8c6c:	2003e10c 	.word	0x2003e10c

000d8c70 <strtoul>:
   d8c70:	4613      	mov	r3, r2
   d8c72:	460a      	mov	r2, r1
   d8c74:	4601      	mov	r1, r0
   d8c76:	4802      	ldr	r0, [pc, #8]	; (d8c80 <strtoul+0x10>)
   d8c78:	6800      	ldr	r0, [r0, #0]
   d8c7a:	f7ff bf7b 	b.w	d8b74 <_strtoul_r>
   d8c7e:	bf00      	nop
   d8c80:	2003e170 	.word	0x2003e170

000d8c84 <toupper>:
   d8c84:	4b04      	ldr	r3, [pc, #16]	; (d8c98 <toupper+0x14>)
   d8c86:	681b      	ldr	r3, [r3, #0]
   d8c88:	4403      	add	r3, r0
   d8c8a:	785b      	ldrb	r3, [r3, #1]
   d8c8c:	f003 0303 	and.w	r3, r3, #3
   d8c90:	2b02      	cmp	r3, #2
   d8c92:	bf08      	it	eq
   d8c94:	3820      	subeq	r0, #32
   d8c96:	4770      	bx	lr
   d8c98:	2003e10c 	.word	0x2003e10c

000d8c9c <__tzcalc_limits>:
   d8c9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8ca0:	4604      	mov	r4, r0
   d8ca2:	f000 fd8d 	bl	d97c0 <__gettzinfo>
   d8ca6:	f240 73b1 	movw	r3, #1969	; 0x7b1
   d8caa:	429c      	cmp	r4, r3
   d8cac:	f340 8096 	ble.w	d8ddc <__tzcalc_limits+0x140>
   d8cb0:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
   d8cb4:	18e3      	adds	r3, r4, r3
   d8cb6:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
   d8cba:	109b      	asrs	r3, r3, #2
   d8cbc:	f240 156d 	movw	r5, #365	; 0x16d
   d8cc0:	fb05 3502 	mla	r5, r5, r2, r3
   d8cc4:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
   d8cc8:	f06f 0363 	mvn.w	r3, #99	; 0x63
   d8ccc:	fb92 f3f3 	sdiv	r3, r2, r3
   d8cd0:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
   d8cd4:	442b      	add	r3, r5
   d8cd6:	18a5      	adds	r5, r4, r2
   d8cd8:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d8cdc:	fb95 f5f2 	sdiv	r5, r5, r2
   d8ce0:	441d      	add	r5, r3
   d8ce2:	2364      	movs	r3, #100	; 0x64
   d8ce4:	fb94 f7f2 	sdiv	r7, r4, r2
   d8ce8:	fb94 f6f3 	sdiv	r6, r4, r3
   d8cec:	fb02 4717 	mls	r7, r2, r7, r4
   d8cf0:	fb03 4616 	mls	r6, r3, r6, r4
   d8cf4:	f100 0338 	add.w	r3, r0, #56	; 0x38
   d8cf8:	fab7 fe87 	clz	lr, r7
   d8cfc:	9301      	str	r3, [sp, #4]
   d8cfe:	f004 0303 	and.w	r3, r4, #3
   d8d02:	6044      	str	r4, [r0, #4]
   d8d04:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
   d8d08:	4601      	mov	r1, r0
   d8d0a:	9300      	str	r3, [sp, #0]
   d8d0c:	f04f 0c07 	mov.w	ip, #7
   d8d10:	7a0b      	ldrb	r3, [r1, #8]
   d8d12:	2b4a      	cmp	r3, #74	; 0x4a
   d8d14:	d10e      	bne.n	d8d34 <__tzcalc_limits+0x98>
   d8d16:	694b      	ldr	r3, [r1, #20]
   d8d18:	9a00      	ldr	r2, [sp, #0]
   d8d1a:	18ec      	adds	r4, r5, r3
   d8d1c:	b902      	cbnz	r2, d8d20 <__tzcalc_limits+0x84>
   d8d1e:	b906      	cbnz	r6, d8d22 <__tzcalc_limits+0x86>
   d8d20:	b927      	cbnz	r7, d8d2c <__tzcalc_limits+0x90>
   d8d22:	2b3b      	cmp	r3, #59	; 0x3b
   d8d24:	bfd4      	ite	le
   d8d26:	2300      	movle	r3, #0
   d8d28:	2301      	movgt	r3, #1
   d8d2a:	e000      	b.n	d8d2e <__tzcalc_limits+0x92>
   d8d2c:	2300      	movs	r3, #0
   d8d2e:	4423      	add	r3, r4
   d8d30:	3b01      	subs	r3, #1
   d8d32:	e03f      	b.n	d8db4 <__tzcalc_limits+0x118>
   d8d34:	2b44      	cmp	r3, #68	; 0x44
   d8d36:	d102      	bne.n	d8d3e <__tzcalc_limits+0xa2>
   d8d38:	694b      	ldr	r3, [r1, #20]
   d8d3a:	442b      	add	r3, r5
   d8d3c:	e03a      	b.n	d8db4 <__tzcalc_limits+0x118>
   d8d3e:	9b00      	ldr	r3, [sp, #0]
   d8d40:	b92b      	cbnz	r3, d8d4e <__tzcalc_limits+0xb2>
   d8d42:	2e00      	cmp	r6, #0
   d8d44:	bf0c      	ite	eq
   d8d46:	46f0      	moveq	r8, lr
   d8d48:	f04f 0801 	movne.w	r8, #1
   d8d4c:	e000      	b.n	d8d50 <__tzcalc_limits+0xb4>
   d8d4e:	46f0      	mov	r8, lr
   d8d50:	4b24      	ldr	r3, [pc, #144]	; (d8de4 <__tzcalc_limits+0x148>)
   d8d52:	68cc      	ldr	r4, [r1, #12]
   d8d54:	2230      	movs	r2, #48	; 0x30
   d8d56:	fb02 3808 	mla	r8, r2, r8, r3
   d8d5a:	f1a8 0a04 	sub.w	sl, r8, #4
   d8d5e:	46a9      	mov	r9, r5
   d8d60:	2301      	movs	r3, #1
   d8d62:	42a3      	cmp	r3, r4
   d8d64:	da04      	bge.n	d8d70 <__tzcalc_limits+0xd4>
   d8d66:	f85a bf04 	ldr.w	fp, [sl, #4]!
   d8d6a:	3301      	adds	r3, #1
   d8d6c:	44d9      	add	r9, fp
   d8d6e:	e7f8      	b.n	d8d62 <__tzcalc_limits+0xc6>
   d8d70:	f109 0304 	add.w	r3, r9, #4
   d8d74:	fb93 fbfc 	sdiv	fp, r3, ip
   d8d78:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
   d8d7c:	2c01      	cmp	r4, #1
   d8d7e:	ebca 0a03 	rsb	sl, sl, r3
   d8d82:	694b      	ldr	r3, [r1, #20]
   d8d84:	bfb8      	it	lt
   d8d86:	2401      	movlt	r4, #1
   d8d88:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   d8d8c:	ebb3 0a0a 	subs.w	sl, r3, sl
   d8d90:	690b      	ldr	r3, [r1, #16]
   d8d92:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
   d8d96:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   d8d9a:	bf48      	it	mi
   d8d9c:	f10a 0a07 	addmi.w	sl, sl, #7
   d8da0:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   d8da4:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
   d8da8:	4453      	add	r3, sl
   d8daa:	42a3      	cmp	r3, r4
   d8dac:	db01      	blt.n	d8db2 <__tzcalc_limits+0x116>
   d8dae:	3b07      	subs	r3, #7
   d8db0:	e7fb      	b.n	d8daa <__tzcalc_limits+0x10e>
   d8db2:	444b      	add	r3, r9
   d8db4:	698c      	ldr	r4, [r1, #24]
   d8db6:	4a0c      	ldr	r2, [pc, #48]	; (d8de8 <__tzcalc_limits+0x14c>)
   d8db8:	fb02 4303 	mla	r3, r2, r3, r4
   d8dbc:	6a0c      	ldr	r4, [r1, #32]
   d8dbe:	4423      	add	r3, r4
   d8dc0:	f841 3f1c 	str.w	r3, [r1, #28]!
   d8dc4:	9b01      	ldr	r3, [sp, #4]
   d8dc6:	4299      	cmp	r1, r3
   d8dc8:	d1a2      	bne.n	d8d10 <__tzcalc_limits+0x74>
   d8dca:	69c3      	ldr	r3, [r0, #28]
   d8dcc:	6b82      	ldr	r2, [r0, #56]	; 0x38
   d8dce:	4293      	cmp	r3, r2
   d8dd0:	bfac      	ite	ge
   d8dd2:	2300      	movge	r3, #0
   d8dd4:	2301      	movlt	r3, #1
   d8dd6:	6003      	str	r3, [r0, #0]
   d8dd8:	2001      	movs	r0, #1
   d8dda:	e000      	b.n	d8dde <__tzcalc_limits+0x142>
   d8ddc:	2000      	movs	r0, #0
   d8dde:	b003      	add	sp, #12
   d8de0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d8de4:	000dacc8 	.word	0x000dacc8
   d8de8:	00015180 	.word	0x00015180

000d8dec <__tz_lock>:
   d8dec:	4770      	bx	lr

000d8dee <__tz_unlock>:
   d8dee:	4770      	bx	lr

000d8df0 <_tzset_unlocked>:
   d8df0:	4b01      	ldr	r3, [pc, #4]	; (d8df8 <_tzset_unlocked+0x8>)
   d8df2:	6818      	ldr	r0, [r3, #0]
   d8df4:	f000 b802 	b.w	d8dfc <_tzset_unlocked_r>
   d8df8:	2003e170 	.word	0x2003e170

000d8dfc <_tzset_unlocked_r>:
   d8dfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8e00:	b08d      	sub	sp, #52	; 0x34
   d8e02:	4607      	mov	r7, r0
   d8e04:	f000 fcdc 	bl	d97c0 <__gettzinfo>
   d8e08:	49b0      	ldr	r1, [pc, #704]	; (d90cc <_tzset_unlocked_r+0x2d0>)
   d8e0a:	4eb1      	ldr	r6, [pc, #708]	; (d90d0 <_tzset_unlocked_r+0x2d4>)
   d8e0c:	4604      	mov	r4, r0
   d8e0e:	4638      	mov	r0, r7
   d8e10:	f000 fcce 	bl	d97b0 <_getenv_r>
   d8e14:	4605      	mov	r5, r0
   d8e16:	b960      	cbnz	r0, d8e32 <_tzset_unlocked_r+0x36>
   d8e18:	4bae      	ldr	r3, [pc, #696]	; (d90d4 <_tzset_unlocked_r+0x2d8>)
   d8e1a:	4aaf      	ldr	r2, [pc, #700]	; (d90d8 <_tzset_unlocked_r+0x2dc>)
   d8e1c:	6018      	str	r0, [r3, #0]
   d8e1e:	4baf      	ldr	r3, [pc, #700]	; (d90dc <_tzset_unlocked_r+0x2e0>)
   d8e20:	6018      	str	r0, [r3, #0]
   d8e22:	4baf      	ldr	r3, [pc, #700]	; (d90e0 <_tzset_unlocked_r+0x2e4>)
   d8e24:	6830      	ldr	r0, [r6, #0]
   d8e26:	601a      	str	r2, [r3, #0]
   d8e28:	605a      	str	r2, [r3, #4]
   d8e2a:	f7fc fcd9 	bl	d57e0 <free>
   d8e2e:	6035      	str	r5, [r6, #0]
   d8e30:	e148      	b.n	d90c4 <_tzset_unlocked_r+0x2c8>
   d8e32:	6831      	ldr	r1, [r6, #0]
   d8e34:	b979      	cbnz	r1, d8e56 <_tzset_unlocked_r+0x5a>
   d8e36:	6830      	ldr	r0, [r6, #0]
   d8e38:	f7fc fcd2 	bl	d57e0 <free>
   d8e3c:	4628      	mov	r0, r5
   d8e3e:	f7fe ff6a 	bl	d7d16 <strlen>
   d8e42:	1c41      	adds	r1, r0, #1
   d8e44:	4638      	mov	r0, r7
   d8e46:	f7fc fd0b 	bl	d5860 <_malloc_r>
   d8e4a:	6030      	str	r0, [r6, #0]
   d8e4c:	b148      	cbz	r0, d8e62 <_tzset_unlocked_r+0x66>
   d8e4e:	4629      	mov	r1, r5
   d8e50:	f7fe ff3e 	bl	d7cd0 <strcpy>
   d8e54:	e005      	b.n	d8e62 <_tzset_unlocked_r+0x66>
   d8e56:	f7fe ff31 	bl	d7cbc <strcmp>
   d8e5a:	2800      	cmp	r0, #0
   d8e5c:	f000 8132 	beq.w	d90c4 <_tzset_unlocked_r+0x2c8>
   d8e60:	e7e9      	b.n	d8e36 <_tzset_unlocked_r+0x3a>
   d8e62:	782b      	ldrb	r3, [r5, #0]
   d8e64:	4a9f      	ldr	r2, [pc, #636]	; (d90e4 <_tzset_unlocked_r+0x2e8>)
   d8e66:	49a0      	ldr	r1, [pc, #640]	; (d90e8 <_tzset_unlocked_r+0x2ec>)
   d8e68:	2b3a      	cmp	r3, #58	; 0x3a
   d8e6a:	bf08      	it	eq
   d8e6c:	3501      	addeq	r5, #1
   d8e6e:	ae0a      	add	r6, sp, #40	; 0x28
   d8e70:	4633      	mov	r3, r6
   d8e72:	4628      	mov	r0, r5
   d8e74:	f7fc fcd4 	bl	d5820 <siscanf>
   d8e78:	2800      	cmp	r0, #0
   d8e7a:	f340 8123 	ble.w	d90c4 <_tzset_unlocked_r+0x2c8>
   d8e7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d8e80:	18ef      	adds	r7, r5, r3
   d8e82:	5ceb      	ldrb	r3, [r5, r3]
   d8e84:	2b2d      	cmp	r3, #45	; 0x2d
   d8e86:	d103      	bne.n	d8e90 <_tzset_unlocked_r+0x94>
   d8e88:	3701      	adds	r7, #1
   d8e8a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   d8e8e:	e003      	b.n	d8e98 <_tzset_unlocked_r+0x9c>
   d8e90:	2b2b      	cmp	r3, #43	; 0x2b
   d8e92:	bf08      	it	eq
   d8e94:	3701      	addeq	r7, #1
   d8e96:	2501      	movs	r5, #1
   d8e98:	f10d 0a20 	add.w	sl, sp, #32
   d8e9c:	f10d 0b1e 	add.w	fp, sp, #30
   d8ea0:	f04f 0800 	mov.w	r8, #0
   d8ea4:	9603      	str	r6, [sp, #12]
   d8ea6:	f8cd a008 	str.w	sl, [sp, #8]
   d8eaa:	9601      	str	r6, [sp, #4]
   d8eac:	f8cd b000 	str.w	fp, [sp]
   d8eb0:	4633      	mov	r3, r6
   d8eb2:	aa07      	add	r2, sp, #28
   d8eb4:	498d      	ldr	r1, [pc, #564]	; (d90ec <_tzset_unlocked_r+0x2f0>)
   d8eb6:	f8ad 801e 	strh.w	r8, [sp, #30]
   d8eba:	4638      	mov	r0, r7
   d8ebc:	f8ad 8020 	strh.w	r8, [sp, #32]
   d8ec0:	f7fc fcae 	bl	d5820 <siscanf>
   d8ec4:	4540      	cmp	r0, r8
   d8ec6:	f340 80fd 	ble.w	d90c4 <_tzset_unlocked_r+0x2c8>
   d8eca:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d8ece:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d8ed2:	f8df 9224 	ldr.w	r9, [pc, #548]	; d90f8 <_tzset_unlocked_r+0x2fc>
   d8ed6:	213c      	movs	r1, #60	; 0x3c
   d8ed8:	fb01 3302 	mla	r3, r1, r2, r3
   d8edc:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d8ee0:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d8ee4:	fb01 3302 	mla	r3, r1, r2, r3
   d8ee8:	435d      	muls	r5, r3
   d8eea:	6225      	str	r5, [r4, #32]
   d8eec:	4d7c      	ldr	r5, [pc, #496]	; (d90e0 <_tzset_unlocked_r+0x2e4>)
   d8eee:	4b7d      	ldr	r3, [pc, #500]	; (d90e4 <_tzset_unlocked_r+0x2e8>)
   d8ef0:	602b      	str	r3, [r5, #0]
   d8ef2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d8ef4:	497c      	ldr	r1, [pc, #496]	; (d90e8 <_tzset_unlocked_r+0x2ec>)
   d8ef6:	441f      	add	r7, r3
   d8ef8:	464a      	mov	r2, r9
   d8efa:	4633      	mov	r3, r6
   d8efc:	4638      	mov	r0, r7
   d8efe:	f7fc fc8f 	bl	d5820 <siscanf>
   d8f02:	4540      	cmp	r0, r8
   d8f04:	dc08      	bgt.n	d8f18 <_tzset_unlocked_r+0x11c>
   d8f06:	682b      	ldr	r3, [r5, #0]
   d8f08:	606b      	str	r3, [r5, #4]
   d8f0a:	4b72      	ldr	r3, [pc, #456]	; (d90d4 <_tzset_unlocked_r+0x2d8>)
   d8f0c:	6a22      	ldr	r2, [r4, #32]
   d8f0e:	601a      	str	r2, [r3, #0]
   d8f10:	4b72      	ldr	r3, [pc, #456]	; (d90dc <_tzset_unlocked_r+0x2e0>)
   d8f12:	f8c3 8000 	str.w	r8, [r3]
   d8f16:	e0d5      	b.n	d90c4 <_tzset_unlocked_r+0x2c8>
   d8f18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d8f1a:	f8c5 9004 	str.w	r9, [r5, #4]
   d8f1e:	18fd      	adds	r5, r7, r3
   d8f20:	5cfb      	ldrb	r3, [r7, r3]
   d8f22:	2b2d      	cmp	r3, #45	; 0x2d
   d8f24:	d103      	bne.n	d8f2e <_tzset_unlocked_r+0x132>
   d8f26:	3501      	adds	r5, #1
   d8f28:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   d8f2c:	e003      	b.n	d8f36 <_tzset_unlocked_r+0x13a>
   d8f2e:	2b2b      	cmp	r3, #43	; 0x2b
   d8f30:	bf08      	it	eq
   d8f32:	3501      	addeq	r5, #1
   d8f34:	2701      	movs	r7, #1
   d8f36:	2300      	movs	r3, #0
   d8f38:	f8ad 301c 	strh.w	r3, [sp, #28]
   d8f3c:	f8ad 301e 	strh.w	r3, [sp, #30]
   d8f40:	f8ad 3020 	strh.w	r3, [sp, #32]
   d8f44:	930a      	str	r3, [sp, #40]	; 0x28
   d8f46:	9603      	str	r6, [sp, #12]
   d8f48:	f8cd a008 	str.w	sl, [sp, #8]
   d8f4c:	9601      	str	r6, [sp, #4]
   d8f4e:	f8cd b000 	str.w	fp, [sp]
   d8f52:	4633      	mov	r3, r6
   d8f54:	aa07      	add	r2, sp, #28
   d8f56:	4965      	ldr	r1, [pc, #404]	; (d90ec <_tzset_unlocked_r+0x2f0>)
   d8f58:	4628      	mov	r0, r5
   d8f5a:	f7fc fc61 	bl	d5820 <siscanf>
   d8f5e:	2800      	cmp	r0, #0
   d8f60:	dc04      	bgt.n	d8f6c <_tzset_unlocked_r+0x170>
   d8f62:	6a23      	ldr	r3, [r4, #32]
   d8f64:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
   d8f68:	63e3      	str	r3, [r4, #60]	; 0x3c
   d8f6a:	e00e      	b.n	d8f8a <_tzset_unlocked_r+0x18e>
   d8f6c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d8f70:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d8f74:	213c      	movs	r1, #60	; 0x3c
   d8f76:	fb01 3302 	mla	r3, r1, r2, r3
   d8f7a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d8f7e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d8f82:	fb01 3302 	mla	r3, r1, r2, r3
   d8f86:	435f      	muls	r7, r3
   d8f88:	63e7      	str	r7, [r4, #60]	; 0x3c
   d8f8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d8f8c:	4627      	mov	r7, r4
   d8f8e:	441d      	add	r5, r3
   d8f90:	f04f 0900 	mov.w	r9, #0
   d8f94:	782b      	ldrb	r3, [r5, #0]
   d8f96:	2b2c      	cmp	r3, #44	; 0x2c
   d8f98:	bf08      	it	eq
   d8f9a:	3501      	addeq	r5, #1
   d8f9c:	f895 8000 	ldrb.w	r8, [r5]
   d8fa0:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
   d8fa4:	d126      	bne.n	d8ff4 <_tzset_unlocked_r+0x1f8>
   d8fa6:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   d8faa:	9302      	str	r3, [sp, #8]
   d8fac:	ab09      	add	r3, sp, #36	; 0x24
   d8fae:	9300      	str	r3, [sp, #0]
   d8fb0:	9603      	str	r6, [sp, #12]
   d8fb2:	9601      	str	r6, [sp, #4]
   d8fb4:	4633      	mov	r3, r6
   d8fb6:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   d8fba:	494d      	ldr	r1, [pc, #308]	; (d90f0 <_tzset_unlocked_r+0x2f4>)
   d8fbc:	4628      	mov	r0, r5
   d8fbe:	f7fc fc2f 	bl	d5820 <siscanf>
   d8fc2:	2803      	cmp	r0, #3
   d8fc4:	d17e      	bne.n	d90c4 <_tzset_unlocked_r+0x2c8>
   d8fc6:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
   d8fca:	1e4b      	subs	r3, r1, #1
   d8fcc:	2b0b      	cmp	r3, #11
   d8fce:	d879      	bhi.n	d90c4 <_tzset_unlocked_r+0x2c8>
   d8fd0:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   d8fd4:	1e53      	subs	r3, r2, #1
   d8fd6:	2b04      	cmp	r3, #4
   d8fd8:	d874      	bhi.n	d90c4 <_tzset_unlocked_r+0x2c8>
   d8fda:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   d8fde:	2b06      	cmp	r3, #6
   d8fe0:	d870      	bhi.n	d90c4 <_tzset_unlocked_r+0x2c8>
   d8fe2:	f887 8008 	strb.w	r8, [r7, #8]
   d8fe6:	60f9      	str	r1, [r7, #12]
   d8fe8:	613a      	str	r2, [r7, #16]
   d8fea:	617b      	str	r3, [r7, #20]
   d8fec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d8fee:	eb05 0803 	add.w	r8, r5, r3
   d8ff2:	e02a      	b.n	d904a <_tzset_unlocked_r+0x24e>
   d8ff4:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
   d8ff8:	bf06      	itte	eq
   d8ffa:	3501      	addeq	r5, #1
   d8ffc:	4643      	moveq	r3, r8
   d8ffe:	2344      	movne	r3, #68	; 0x44
   d9000:	220a      	movs	r2, #10
   d9002:	a90b      	add	r1, sp, #44	; 0x2c
   d9004:	4628      	mov	r0, r5
   d9006:	9305      	str	r3, [sp, #20]
   d9008:	f7ff fe32 	bl	d8c70 <strtoul>
   d900c:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   d9010:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
   d9014:	4545      	cmp	r5, r8
   d9016:	9b05      	ldr	r3, [sp, #20]
   d9018:	d114      	bne.n	d9044 <_tzset_unlocked_r+0x248>
   d901a:	234d      	movs	r3, #77	; 0x4d
   d901c:	f1b9 0f00 	cmp.w	r9, #0
   d9020:	d107      	bne.n	d9032 <_tzset_unlocked_r+0x236>
   d9022:	7223      	strb	r3, [r4, #8]
   d9024:	2303      	movs	r3, #3
   d9026:	60e3      	str	r3, [r4, #12]
   d9028:	2302      	movs	r3, #2
   d902a:	6123      	str	r3, [r4, #16]
   d902c:	f8c4 9014 	str.w	r9, [r4, #20]
   d9030:	e00b      	b.n	d904a <_tzset_unlocked_r+0x24e>
   d9032:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
   d9036:	230b      	movs	r3, #11
   d9038:	62a3      	str	r3, [r4, #40]	; 0x28
   d903a:	2301      	movs	r3, #1
   d903c:	62e3      	str	r3, [r4, #44]	; 0x2c
   d903e:	2300      	movs	r3, #0
   d9040:	6323      	str	r3, [r4, #48]	; 0x30
   d9042:	e002      	b.n	d904a <_tzset_unlocked_r+0x24e>
   d9044:	b280      	uxth	r0, r0
   d9046:	723b      	strb	r3, [r7, #8]
   d9048:	6178      	str	r0, [r7, #20]
   d904a:	2302      	movs	r3, #2
   d904c:	f8ad 301c 	strh.w	r3, [sp, #28]
   d9050:	2300      	movs	r3, #0
   d9052:	f8ad 301e 	strh.w	r3, [sp, #30]
   d9056:	f8ad 3020 	strh.w	r3, [sp, #32]
   d905a:	930a      	str	r3, [sp, #40]	; 0x28
   d905c:	f898 3000 	ldrb.w	r3, [r8]
   d9060:	2b2f      	cmp	r3, #47	; 0x2f
   d9062:	d10b      	bne.n	d907c <_tzset_unlocked_r+0x280>
   d9064:	9603      	str	r6, [sp, #12]
   d9066:	f8cd a008 	str.w	sl, [sp, #8]
   d906a:	9601      	str	r6, [sp, #4]
   d906c:	f8cd b000 	str.w	fp, [sp]
   d9070:	4633      	mov	r3, r6
   d9072:	aa07      	add	r2, sp, #28
   d9074:	491f      	ldr	r1, [pc, #124]	; (d90f4 <_tzset_unlocked_r+0x2f8>)
   d9076:	4640      	mov	r0, r8
   d9078:	f7fc fbd2 	bl	d5820 <siscanf>
   d907c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d9080:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d9084:	213c      	movs	r1, #60	; 0x3c
   d9086:	fb01 3302 	mla	r3, r1, r2, r3
   d908a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d908e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d9092:	fb01 3302 	mla	r3, r1, r2, r3
   d9096:	61bb      	str	r3, [r7, #24]
   d9098:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   d909a:	f109 0901 	add.w	r9, r9, #1
   d909e:	f1b9 0f02 	cmp.w	r9, #2
   d90a2:	4445      	add	r5, r8
   d90a4:	f107 071c 	add.w	r7, r7, #28
   d90a8:	f47f af74 	bne.w	d8f94 <_tzset_unlocked_r+0x198>
   d90ac:	6860      	ldr	r0, [r4, #4]
   d90ae:	f7ff fdf5 	bl	d8c9c <__tzcalc_limits>
   d90b2:	4b08      	ldr	r3, [pc, #32]	; (d90d4 <_tzset_unlocked_r+0x2d8>)
   d90b4:	6a22      	ldr	r2, [r4, #32]
   d90b6:	601a      	str	r2, [r3, #0]
   d90b8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d90ba:	1a9b      	subs	r3, r3, r2
   d90bc:	4a07      	ldr	r2, [pc, #28]	; (d90dc <_tzset_unlocked_r+0x2e0>)
   d90be:	bf18      	it	ne
   d90c0:	2301      	movne	r3, #1
   d90c2:	6013      	str	r3, [r2, #0]
   d90c4:	b00d      	add	sp, #52	; 0x34
   d90c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d90ca:	bf00      	nop
   d90cc:	000dad88 	.word	0x000dad88
   d90d0:	2003e7e0 	.word	0x2003e7e0
   d90d4:	2003e7e8 	.word	0x2003e7e8
   d90d8:	000dad8b 	.word	0x000dad8b
   d90dc:	2003e7e4 	.word	0x2003e7e4
   d90e0:	2003e1ac 	.word	0x2003e1ac
   d90e4:	2003e7d3 	.word	0x2003e7d3
   d90e8:	000dad8f 	.word	0x000dad8f
   d90ec:	000dadb2 	.word	0x000dadb2
   d90f0:	000dad9e 	.word	0x000dad9e
   d90f4:	000dadb1 	.word	0x000dadb1
   d90f8:	2003e7c8 	.word	0x2003e7c8

000d90fc <rshift>:
   d90fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   d90fe:	6906      	ldr	r6, [r0, #16]
   d9100:	114b      	asrs	r3, r1, #5
   d9102:	42b3      	cmp	r3, r6
   d9104:	f100 0514 	add.w	r5, r0, #20
   d9108:	da27      	bge.n	d915a <rshift+0x5e>
   d910a:	f011 011f 	ands.w	r1, r1, #31
   d910e:	eb05 0686 	add.w	r6, r5, r6, lsl #2
   d9112:	eb05 0283 	add.w	r2, r5, r3, lsl #2
   d9116:	d101      	bne.n	d911c <rshift+0x20>
   d9118:	4629      	mov	r1, r5
   d911a:	e016      	b.n	d914a <rshift+0x4e>
   d911c:	1d14      	adds	r4, r2, #4
   d911e:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
   d9122:	f1c1 0e20 	rsb	lr, r1, #32
   d9126:	40ca      	lsrs	r2, r1
   d9128:	462b      	mov	r3, r5
   d912a:	42b4      	cmp	r4, r6
   d912c:	d209      	bcs.n	d9142 <rshift+0x46>
   d912e:	6827      	ldr	r7, [r4, #0]
   d9130:	fa07 f70e 	lsl.w	r7, r7, lr
   d9134:	433a      	orrs	r2, r7
   d9136:	f843 2b04 	str.w	r2, [r3], #4
   d913a:	f854 2b04 	ldr.w	r2, [r4], #4
   d913e:	40ca      	lsrs	r2, r1
   d9140:	e7f3      	b.n	d912a <rshift+0x2e>
   d9142:	601a      	str	r2, [r3, #0]
   d9144:	b152      	cbz	r2, d915c <rshift+0x60>
   d9146:	3304      	adds	r3, #4
   d9148:	e008      	b.n	d915c <rshift+0x60>
   d914a:	42b2      	cmp	r2, r6
   d914c:	460b      	mov	r3, r1
   d914e:	d205      	bcs.n	d915c <rshift+0x60>
   d9150:	f852 3b04 	ldr.w	r3, [r2], #4
   d9154:	f841 3b04 	str.w	r3, [r1], #4
   d9158:	e7f7      	b.n	d914a <rshift+0x4e>
   d915a:	462b      	mov	r3, r5
   d915c:	1b5b      	subs	r3, r3, r5
   d915e:	109b      	asrs	r3, r3, #2
   d9160:	6103      	str	r3, [r0, #16]
   d9162:	b903      	cbnz	r3, d9166 <rshift+0x6a>
   d9164:	6143      	str	r3, [r0, #20]
   d9166:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d9168 <__hexdig_fun>:
   d9168:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d916c:	2b09      	cmp	r3, #9
   d916e:	d801      	bhi.n	d9174 <__hexdig_fun+0xc>
   d9170:	3820      	subs	r0, #32
   d9172:	e00a      	b.n	d918a <__hexdig_fun+0x22>
   d9174:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   d9178:	2b05      	cmp	r3, #5
   d917a:	d801      	bhi.n	d9180 <__hexdig_fun+0x18>
   d917c:	3847      	subs	r0, #71	; 0x47
   d917e:	e004      	b.n	d918a <__hexdig_fun+0x22>
   d9180:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   d9184:	2b05      	cmp	r3, #5
   d9186:	d802      	bhi.n	d918e <__hexdig_fun+0x26>
   d9188:	3827      	subs	r0, #39	; 0x27
   d918a:	b2c0      	uxtb	r0, r0
   d918c:	4770      	bx	lr
   d918e:	2000      	movs	r0, #0
   d9190:	4770      	bx	lr

000d9192 <__gethex>:
   d9192:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9196:	b08b      	sub	sp, #44	; 0x2c
   d9198:	468a      	mov	sl, r1
   d919a:	4690      	mov	r8, r2
   d919c:	9306      	str	r3, [sp, #24]
   d919e:	9002      	str	r0, [sp, #8]
   d91a0:	f7fe fd3e 	bl	d7c20 <_localeconv_r>
   d91a4:	6803      	ldr	r3, [r0, #0]
   d91a6:	9303      	str	r3, [sp, #12]
   d91a8:	4618      	mov	r0, r3
   d91aa:	f7fe fdb4 	bl	d7d16 <strlen>
   d91ae:	9b03      	ldr	r3, [sp, #12]
   d91b0:	9001      	str	r0, [sp, #4]
   d91b2:	4403      	add	r3, r0
   d91b4:	f04f 0b00 	mov.w	fp, #0
   d91b8:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   d91bc:	9307      	str	r3, [sp, #28]
   d91be:	f8da 3000 	ldr.w	r3, [sl]
   d91c2:	3302      	adds	r3, #2
   d91c4:	461f      	mov	r7, r3
   d91c6:	f813 0b01 	ldrb.w	r0, [r3], #1
   d91ca:	2830      	cmp	r0, #48	; 0x30
   d91cc:	d102      	bne.n	d91d4 <__gethex+0x42>
   d91ce:	f10b 0b01 	add.w	fp, fp, #1
   d91d2:	e7f7      	b.n	d91c4 <__gethex+0x32>
   d91d4:	f7ff ffc8 	bl	d9168 <__hexdig_fun>
   d91d8:	4604      	mov	r4, r0
   d91da:	b9e0      	cbnz	r0, d9216 <__gethex+0x84>
   d91dc:	9a01      	ldr	r2, [sp, #4]
   d91de:	9903      	ldr	r1, [sp, #12]
   d91e0:	4638      	mov	r0, r7
   d91e2:	f7fe fda0 	bl	d7d26 <strncmp>
   d91e6:	2800      	cmp	r0, #0
   d91e8:	d134      	bne.n	d9254 <__gethex+0xc2>
   d91ea:	9b01      	ldr	r3, [sp, #4]
   d91ec:	5cf8      	ldrb	r0, [r7, r3]
   d91ee:	18fe      	adds	r6, r7, r3
   d91f0:	f7ff ffba 	bl	d9168 <__hexdig_fun>
   d91f4:	b380      	cbz	r0, d9258 <__gethex+0xc6>
   d91f6:	4633      	mov	r3, r6
   d91f8:	7818      	ldrb	r0, [r3, #0]
   d91fa:	2830      	cmp	r0, #48	; 0x30
   d91fc:	461f      	mov	r7, r3
   d91fe:	f103 0301 	add.w	r3, r3, #1
   d9202:	d0f9      	beq.n	d91f8 <__gethex+0x66>
   d9204:	f7ff ffb0 	bl	d9168 <__hexdig_fun>
   d9208:	fab0 f580 	clz	r5, r0
   d920c:	096d      	lsrs	r5, r5, #5
   d920e:	4634      	mov	r4, r6
   d9210:	f04f 0b01 	mov.w	fp, #1
   d9214:	e001      	b.n	d921a <__gethex+0x88>
   d9216:	2500      	movs	r5, #0
   d9218:	462c      	mov	r4, r5
   d921a:	463a      	mov	r2, r7
   d921c:	4616      	mov	r6, r2
   d921e:	3201      	adds	r2, #1
   d9220:	7830      	ldrb	r0, [r6, #0]
   d9222:	f7ff ffa1 	bl	d9168 <__hexdig_fun>
   d9226:	2800      	cmp	r0, #0
   d9228:	d1f8      	bne.n	d921c <__gethex+0x8a>
   d922a:	9a01      	ldr	r2, [sp, #4]
   d922c:	9903      	ldr	r1, [sp, #12]
   d922e:	4630      	mov	r0, r6
   d9230:	f7fe fd79 	bl	d7d26 <strncmp>
   d9234:	b950      	cbnz	r0, d924c <__gethex+0xba>
   d9236:	b954      	cbnz	r4, d924e <__gethex+0xbc>
   d9238:	9b01      	ldr	r3, [sp, #4]
   d923a:	18f4      	adds	r4, r6, r3
   d923c:	4622      	mov	r2, r4
   d923e:	4616      	mov	r6, r2
   d9240:	3201      	adds	r2, #1
   d9242:	7830      	ldrb	r0, [r6, #0]
   d9244:	f7ff ff90 	bl	d9168 <__hexdig_fun>
   d9248:	2800      	cmp	r0, #0
   d924a:	d1f8      	bne.n	d923e <__gethex+0xac>
   d924c:	b134      	cbz	r4, d925c <__gethex+0xca>
   d924e:	1ba4      	subs	r4, r4, r6
   d9250:	00a4      	lsls	r4, r4, #2
   d9252:	e003      	b.n	d925c <__gethex+0xca>
   d9254:	463e      	mov	r6, r7
   d9256:	e000      	b.n	d925a <__gethex+0xc8>
   d9258:	4604      	mov	r4, r0
   d925a:	2501      	movs	r5, #1
   d925c:	7833      	ldrb	r3, [r6, #0]
   d925e:	2b50      	cmp	r3, #80	; 0x50
   d9260:	d001      	beq.n	d9266 <__gethex+0xd4>
   d9262:	2b70      	cmp	r3, #112	; 0x70
   d9264:	d12a      	bne.n	d92bc <__gethex+0x12a>
   d9266:	7873      	ldrb	r3, [r6, #1]
   d9268:	2b2b      	cmp	r3, #43	; 0x2b
   d926a:	d008      	beq.n	d927e <__gethex+0xec>
   d926c:	2b2d      	cmp	r3, #45	; 0x2d
   d926e:	d003      	beq.n	d9278 <__gethex+0xe6>
   d9270:	1c71      	adds	r1, r6, #1
   d9272:	f04f 0900 	mov.w	r9, #0
   d9276:	e005      	b.n	d9284 <__gethex+0xf2>
   d9278:	f04f 0901 	mov.w	r9, #1
   d927c:	e001      	b.n	d9282 <__gethex+0xf0>
   d927e:	f04f 0900 	mov.w	r9, #0
   d9282:	1cb1      	adds	r1, r6, #2
   d9284:	7808      	ldrb	r0, [r1, #0]
   d9286:	f7ff ff6f 	bl	d9168 <__hexdig_fun>
   d928a:	1e43      	subs	r3, r0, #1
   d928c:	b2db      	uxtb	r3, r3
   d928e:	2b18      	cmp	r3, #24
   d9290:	d814      	bhi.n	d92bc <__gethex+0x12a>
   d9292:	f1a0 0210 	sub.w	r2, r0, #16
   d9296:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   d929a:	f7ff ff65 	bl	d9168 <__hexdig_fun>
   d929e:	1e43      	subs	r3, r0, #1
   d92a0:	b2db      	uxtb	r3, r3
   d92a2:	2b18      	cmp	r3, #24
   d92a4:	d804      	bhi.n	d92b0 <__gethex+0x11e>
   d92a6:	230a      	movs	r3, #10
   d92a8:	fb03 0202 	mla	r2, r3, r2, r0
   d92ac:	3a10      	subs	r2, #16
   d92ae:	e7f2      	b.n	d9296 <__gethex+0x104>
   d92b0:	f1b9 0f00 	cmp.w	r9, #0
   d92b4:	d000      	beq.n	d92b8 <__gethex+0x126>
   d92b6:	4252      	negs	r2, r2
   d92b8:	4414      	add	r4, r2
   d92ba:	e000      	b.n	d92be <__gethex+0x12c>
   d92bc:	4631      	mov	r1, r6
   d92be:	f8ca 1000 	str.w	r1, [sl]
   d92c2:	b12d      	cbz	r5, d92d0 <__gethex+0x13e>
   d92c4:	f1bb 0f00 	cmp.w	fp, #0
   d92c8:	bf14      	ite	ne
   d92ca:	2000      	movne	r0, #0
   d92cc:	2006      	moveq	r0, #6
   d92ce:	e17c      	b.n	d95ca <__gethex+0x438>
   d92d0:	1bf3      	subs	r3, r6, r7
   d92d2:	3b01      	subs	r3, #1
   d92d4:	4629      	mov	r1, r5
   d92d6:	2b07      	cmp	r3, #7
   d92d8:	dd02      	ble.n	d92e0 <__gethex+0x14e>
   d92da:	3101      	adds	r1, #1
   d92dc:	105b      	asrs	r3, r3, #1
   d92de:	e7fa      	b.n	d92d6 <__gethex+0x144>
   d92e0:	9802      	ldr	r0, [sp, #8]
   d92e2:	f000 fb09 	bl	d98f8 <_Balloc>
   d92e6:	9b01      	ldr	r3, [sp, #4]
   d92e8:	f100 0a14 	add.w	sl, r0, #20
   d92ec:	f04f 0900 	mov.w	r9, #0
   d92f0:	f1c3 0301 	rsb	r3, r3, #1
   d92f4:	4605      	mov	r5, r0
   d92f6:	f8cd a010 	str.w	sl, [sp, #16]
   d92fa:	46cb      	mov	fp, r9
   d92fc:	9308      	str	r3, [sp, #32]
   d92fe:	42b7      	cmp	r7, r6
   d9300:	d22f      	bcs.n	d9362 <__gethex+0x1d0>
   d9302:	1e73      	subs	r3, r6, #1
   d9304:	9305      	str	r3, [sp, #20]
   d9306:	9a07      	ldr	r2, [sp, #28]
   d9308:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   d930c:	4293      	cmp	r3, r2
   d930e:	d00b      	beq.n	d9328 <__gethex+0x196>
   d9310:	f1bb 0f20 	cmp.w	fp, #32
   d9314:	d116      	bne.n	d9344 <__gethex+0x1b2>
   d9316:	9b04      	ldr	r3, [sp, #16]
   d9318:	f8c3 9000 	str.w	r9, [r3]
   d931c:	3304      	adds	r3, #4
   d931e:	f04f 0900 	mov.w	r9, #0
   d9322:	9304      	str	r3, [sp, #16]
   d9324:	46cb      	mov	fp, r9
   d9326:	e00d      	b.n	d9344 <__gethex+0x1b2>
   d9328:	9b05      	ldr	r3, [sp, #20]
   d932a:	9a08      	ldr	r2, [sp, #32]
   d932c:	4413      	add	r3, r2
   d932e:	429f      	cmp	r7, r3
   d9330:	d8ee      	bhi.n	d9310 <__gethex+0x17e>
   d9332:	4618      	mov	r0, r3
   d9334:	9a01      	ldr	r2, [sp, #4]
   d9336:	9903      	ldr	r1, [sp, #12]
   d9338:	9309      	str	r3, [sp, #36]	; 0x24
   d933a:	f7fe fcf4 	bl	d7d26 <strncmp>
   d933e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d9340:	b168      	cbz	r0, d935e <__gethex+0x1cc>
   d9342:	e7e5      	b.n	d9310 <__gethex+0x17e>
   d9344:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   d9348:	f7ff ff0e 	bl	d9168 <__hexdig_fun>
   d934c:	f000 000f 	and.w	r0, r0, #15
   d9350:	fa00 f00b 	lsl.w	r0, r0, fp
   d9354:	9b05      	ldr	r3, [sp, #20]
   d9356:	ea49 0900 	orr.w	r9, r9, r0
   d935a:	f10b 0b04 	add.w	fp, fp, #4
   d935e:	461e      	mov	r6, r3
   d9360:	e7cd      	b.n	d92fe <__gethex+0x16c>
   d9362:	9804      	ldr	r0, [sp, #16]
   d9364:	f840 9b04 	str.w	r9, [r0], #4
   d9368:	ebca 0000 	rsb	r0, sl, r0
   d936c:	1080      	asrs	r0, r0, #2
   d936e:	6128      	str	r0, [r5, #16]
   d9370:	0147      	lsls	r7, r0, #5
   d9372:	4648      	mov	r0, r9
   d9374:	f000 fb85 	bl	d9a82 <__hi0bits>
   d9378:	f8d8 6000 	ldr.w	r6, [r8]
   d937c:	1a38      	subs	r0, r7, r0
   d937e:	42b0      	cmp	r0, r6
   d9380:	dd26      	ble.n	d93d0 <__gethex+0x23e>
   d9382:	1b87      	subs	r7, r0, r6
   d9384:	4639      	mov	r1, r7
   d9386:	4628      	mov	r0, r5
   d9388:	f000 fe83 	bl	da092 <__any_on>
   d938c:	b1c8      	cbz	r0, d93c2 <__gethex+0x230>
   d938e:	1e7b      	subs	r3, r7, #1
   d9390:	1159      	asrs	r1, r3, #5
   d9392:	f003 021f 	and.w	r2, r3, #31
   d9396:	f04f 0901 	mov.w	r9, #1
   d939a:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
   d939e:	fa09 f202 	lsl.w	r2, r9, r2
   d93a2:	420a      	tst	r2, r1
   d93a4:	d00e      	beq.n	d93c4 <__gethex+0x232>
   d93a6:	454b      	cmp	r3, r9
   d93a8:	dc02      	bgt.n	d93b0 <__gethex+0x21e>
   d93aa:	f04f 0902 	mov.w	r9, #2
   d93ae:	e009      	b.n	d93c4 <__gethex+0x232>
   d93b0:	1eb9      	subs	r1, r7, #2
   d93b2:	4628      	mov	r0, r5
   d93b4:	f000 fe6d 	bl	da092 <__any_on>
   d93b8:	2800      	cmp	r0, #0
   d93ba:	d0f6      	beq.n	d93aa <__gethex+0x218>
   d93bc:	f04f 0903 	mov.w	r9, #3
   d93c0:	e000      	b.n	d93c4 <__gethex+0x232>
   d93c2:	4681      	mov	r9, r0
   d93c4:	4639      	mov	r1, r7
   d93c6:	4628      	mov	r0, r5
   d93c8:	f7ff fe98 	bl	d90fc <rshift>
   d93cc:	443c      	add	r4, r7
   d93ce:	e00c      	b.n	d93ea <__gethex+0x258>
   d93d0:	da09      	bge.n	d93e6 <__gethex+0x254>
   d93d2:	1a37      	subs	r7, r6, r0
   d93d4:	4629      	mov	r1, r5
   d93d6:	463a      	mov	r2, r7
   d93d8:	9802      	ldr	r0, [sp, #8]
   d93da:	f000 fc87 	bl	d9cec <__lshift>
   d93de:	1be4      	subs	r4, r4, r7
   d93e0:	4605      	mov	r5, r0
   d93e2:	f100 0a14 	add.w	sl, r0, #20
   d93e6:	f04f 0900 	mov.w	r9, #0
   d93ea:	f8d8 3008 	ldr.w	r3, [r8, #8]
   d93ee:	429c      	cmp	r4, r3
   d93f0:	dd08      	ble.n	d9404 <__gethex+0x272>
   d93f2:	9802      	ldr	r0, [sp, #8]
   d93f4:	4629      	mov	r1, r5
   d93f6:	f000 fab4 	bl	d9962 <_Bfree>
   d93fa:	9a14      	ldr	r2, [sp, #80]	; 0x50
   d93fc:	2300      	movs	r3, #0
   d93fe:	6013      	str	r3, [r2, #0]
   d9400:	20a3      	movs	r0, #163	; 0xa3
   d9402:	e0e2      	b.n	d95ca <__gethex+0x438>
   d9404:	f8d8 0004 	ldr.w	r0, [r8, #4]
   d9408:	4284      	cmp	r4, r0
   d940a:	da53      	bge.n	d94b4 <__gethex+0x322>
   d940c:	1b04      	subs	r4, r0, r4
   d940e:	42a6      	cmp	r6, r4
   d9410:	dc2e      	bgt.n	d9470 <__gethex+0x2de>
   d9412:	f8d8 300c 	ldr.w	r3, [r8, #12]
   d9416:	2b02      	cmp	r3, #2
   d9418:	d01a      	beq.n	d9450 <__gethex+0x2be>
   d941a:	2b03      	cmp	r3, #3
   d941c:	d01c      	beq.n	d9458 <__gethex+0x2c6>
   d941e:	2b01      	cmp	r3, #1
   d9420:	d11d      	bne.n	d945e <__gethex+0x2cc>
   d9422:	42a6      	cmp	r6, r4
   d9424:	d11b      	bne.n	d945e <__gethex+0x2cc>
   d9426:	2e01      	cmp	r6, #1
   d9428:	dc0b      	bgt.n	d9442 <__gethex+0x2b0>
   d942a:	9a06      	ldr	r2, [sp, #24]
   d942c:	f8d8 3004 	ldr.w	r3, [r8, #4]
   d9430:	6013      	str	r3, [r2, #0]
   d9432:	2301      	movs	r3, #1
   d9434:	612b      	str	r3, [r5, #16]
   d9436:	f8ca 3000 	str.w	r3, [sl]
   d943a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   d943c:	2062      	movs	r0, #98	; 0x62
   d943e:	601d      	str	r5, [r3, #0]
   d9440:	e0c3      	b.n	d95ca <__gethex+0x438>
   d9442:	1e71      	subs	r1, r6, #1
   d9444:	4628      	mov	r0, r5
   d9446:	f000 fe24 	bl	da092 <__any_on>
   d944a:	2800      	cmp	r0, #0
   d944c:	d1ed      	bne.n	d942a <__gethex+0x298>
   d944e:	e006      	b.n	d945e <__gethex+0x2cc>
   d9450:	9b15      	ldr	r3, [sp, #84]	; 0x54
   d9452:	2b00      	cmp	r3, #0
   d9454:	d0e9      	beq.n	d942a <__gethex+0x298>
   d9456:	e002      	b.n	d945e <__gethex+0x2cc>
   d9458:	9b15      	ldr	r3, [sp, #84]	; 0x54
   d945a:	2b00      	cmp	r3, #0
   d945c:	d1e5      	bne.n	d942a <__gethex+0x298>
   d945e:	9802      	ldr	r0, [sp, #8]
   d9460:	4629      	mov	r1, r5
   d9462:	f000 fa7e 	bl	d9962 <_Bfree>
   d9466:	9a14      	ldr	r2, [sp, #80]	; 0x50
   d9468:	2300      	movs	r3, #0
   d946a:	6013      	str	r3, [r2, #0]
   d946c:	2050      	movs	r0, #80	; 0x50
   d946e:	e0ac      	b.n	d95ca <__gethex+0x438>
   d9470:	1e67      	subs	r7, r4, #1
   d9472:	f1b9 0f00 	cmp.w	r9, #0
   d9476:	d106      	bne.n	d9486 <__gethex+0x2f4>
   d9478:	b13f      	cbz	r7, d948a <__gethex+0x2f8>
   d947a:	4639      	mov	r1, r7
   d947c:	4628      	mov	r0, r5
   d947e:	f000 fe08 	bl	da092 <__any_on>
   d9482:	4681      	mov	r9, r0
   d9484:	e001      	b.n	d948a <__gethex+0x2f8>
   d9486:	f04f 0901 	mov.w	r9, #1
   d948a:	117a      	asrs	r2, r7, #5
   d948c:	2301      	movs	r3, #1
   d948e:	f007 071f 	and.w	r7, r7, #31
   d9492:	fa03 f707 	lsl.w	r7, r3, r7
   d9496:	f85a 3022 	ldr.w	r3, [sl, r2, lsl #2]
   d949a:	4621      	mov	r1, r4
   d949c:	421f      	tst	r7, r3
   d949e:	4628      	mov	r0, r5
   d94a0:	bf18      	it	ne
   d94a2:	f049 0902 	orrne.w	r9, r9, #2
   d94a6:	1b36      	subs	r6, r6, r4
   d94a8:	f7ff fe28 	bl	d90fc <rshift>
   d94ac:	2702      	movs	r7, #2
   d94ae:	f8d8 4004 	ldr.w	r4, [r8, #4]
   d94b2:	e000      	b.n	d94b6 <__gethex+0x324>
   d94b4:	2701      	movs	r7, #1
   d94b6:	f1b9 0f00 	cmp.w	r9, #0
   d94ba:	f000 8081 	beq.w	d95c0 <__gethex+0x42e>
   d94be:	f8d8 300c 	ldr.w	r3, [r8, #12]
   d94c2:	2b02      	cmp	r3, #2
   d94c4:	d00e      	beq.n	d94e4 <__gethex+0x352>
   d94c6:	2b03      	cmp	r3, #3
   d94c8:	d010      	beq.n	d94ec <__gethex+0x35a>
   d94ca:	2b01      	cmp	r3, #1
   d94cc:	d176      	bne.n	d95bc <__gethex+0x42a>
   d94ce:	f019 0f02 	tst.w	r9, #2
   d94d2:	d073      	beq.n	d95bc <__gethex+0x42a>
   d94d4:	f8da 0000 	ldr.w	r0, [sl]
   d94d8:	ea49 0900 	orr.w	r9, r9, r0
   d94dc:	f019 0f01 	tst.w	r9, #1
   d94e0:	d107      	bne.n	d94f2 <__gethex+0x360>
   d94e2:	e06b      	b.n	d95bc <__gethex+0x42a>
   d94e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
   d94e6:	f1c3 0301 	rsb	r3, r3, #1
   d94ea:	9315      	str	r3, [sp, #84]	; 0x54
   d94ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
   d94ee:	2b00      	cmp	r3, #0
   d94f0:	d064      	beq.n	d95bc <__gethex+0x42a>
   d94f2:	f8d5 a010 	ldr.w	sl, [r5, #16]
   d94f6:	f105 0314 	add.w	r3, r5, #20
   d94fa:	ea4f 098a 	mov.w	r9, sl, lsl #2
   d94fe:	eb03 0109 	add.w	r1, r3, r9
   d9502:	2000      	movs	r0, #0
   d9504:	681a      	ldr	r2, [r3, #0]
   d9506:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   d950a:	d002      	beq.n	d9512 <__gethex+0x380>
   d950c:	3201      	adds	r2, #1
   d950e:	601a      	str	r2, [r3, #0]
   d9510:	e020      	b.n	d9554 <__gethex+0x3c2>
   d9512:	f843 0b04 	str.w	r0, [r3], #4
   d9516:	4299      	cmp	r1, r3
   d9518:	d8f4      	bhi.n	d9504 <__gethex+0x372>
   d951a:	68ab      	ldr	r3, [r5, #8]
   d951c:	459a      	cmp	sl, r3
   d951e:	db12      	blt.n	d9546 <__gethex+0x3b4>
   d9520:	6869      	ldr	r1, [r5, #4]
   d9522:	9802      	ldr	r0, [sp, #8]
   d9524:	3101      	adds	r1, #1
   d9526:	f000 f9e7 	bl	d98f8 <_Balloc>
   d952a:	692a      	ldr	r2, [r5, #16]
   d952c:	3202      	adds	r2, #2
   d952e:	f105 010c 	add.w	r1, r5, #12
   d9532:	4683      	mov	fp, r0
   d9534:	0092      	lsls	r2, r2, #2
   d9536:	300c      	adds	r0, #12
   d9538:	f7fe fb76 	bl	d7c28 <memcpy>
   d953c:	4629      	mov	r1, r5
   d953e:	9802      	ldr	r0, [sp, #8]
   d9540:	f000 fa0f 	bl	d9962 <_Bfree>
   d9544:	465d      	mov	r5, fp
   d9546:	692b      	ldr	r3, [r5, #16]
   d9548:	1c5a      	adds	r2, r3, #1
   d954a:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   d954e:	612a      	str	r2, [r5, #16]
   d9550:	2201      	movs	r2, #1
   d9552:	615a      	str	r2, [r3, #20]
   d9554:	2f02      	cmp	r7, #2
   d9556:	f105 0214 	add.w	r2, r5, #20
   d955a:	d111      	bne.n	d9580 <__gethex+0x3ee>
   d955c:	f8d8 3000 	ldr.w	r3, [r8]
   d9560:	3b01      	subs	r3, #1
   d9562:	429e      	cmp	r6, r3
   d9564:	d127      	bne.n	d95b6 <__gethex+0x424>
   d9566:	1171      	asrs	r1, r6, #5
   d9568:	2301      	movs	r3, #1
   d956a:	f006 061f 	and.w	r6, r6, #31
   d956e:	fa03 f606 	lsl.w	r6, r3, r6
   d9572:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   d9576:	421e      	tst	r6, r3
   d9578:	bf0c      	ite	eq
   d957a:	2702      	moveq	r7, #2
   d957c:	2701      	movne	r7, #1
   d957e:	e01a      	b.n	d95b6 <__gethex+0x424>
   d9580:	692b      	ldr	r3, [r5, #16]
   d9582:	459a      	cmp	sl, r3
   d9584:	da0a      	bge.n	d959c <__gethex+0x40a>
   d9586:	2101      	movs	r1, #1
   d9588:	4628      	mov	r0, r5
   d958a:	f7ff fdb7 	bl	d90fc <rshift>
   d958e:	f8d8 3008 	ldr.w	r3, [r8, #8]
   d9592:	3401      	adds	r4, #1
   d9594:	429c      	cmp	r4, r3
   d9596:	f73f af2c 	bgt.w	d93f2 <__gethex+0x260>
   d959a:	e00b      	b.n	d95b4 <__gethex+0x422>
   d959c:	f016 061f 	ands.w	r6, r6, #31
   d95a0:	d008      	beq.n	d95b4 <__gethex+0x422>
   d95a2:	4491      	add	r9, r2
   d95a4:	f1c6 0620 	rsb	r6, r6, #32
   d95a8:	f859 0c04 	ldr.w	r0, [r9, #-4]
   d95ac:	f000 fa69 	bl	d9a82 <__hi0bits>
   d95b0:	42b0      	cmp	r0, r6
   d95b2:	dbe8      	blt.n	d9586 <__gethex+0x3f4>
   d95b4:	2701      	movs	r7, #1
   d95b6:	f047 0720 	orr.w	r7, r7, #32
   d95ba:	e001      	b.n	d95c0 <__gethex+0x42e>
   d95bc:	f047 0710 	orr.w	r7, r7, #16
   d95c0:	9b14      	ldr	r3, [sp, #80]	; 0x50
   d95c2:	601d      	str	r5, [r3, #0]
   d95c4:	9b06      	ldr	r3, [sp, #24]
   d95c6:	4638      	mov	r0, r7
   d95c8:	601c      	str	r4, [r3, #0]
   d95ca:	b00b      	add	sp, #44	; 0x2c
   d95cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d95d0 <L_shift>:
   d95d0:	f1c2 0208 	rsb	r2, r2, #8
   d95d4:	0092      	lsls	r2, r2, #2
   d95d6:	b570      	push	{r4, r5, r6, lr}
   d95d8:	f1c2 0620 	rsb	r6, r2, #32
   d95dc:	6843      	ldr	r3, [r0, #4]
   d95de:	6805      	ldr	r5, [r0, #0]
   d95e0:	fa03 f406 	lsl.w	r4, r3, r6
   d95e4:	432c      	orrs	r4, r5
   d95e6:	40d3      	lsrs	r3, r2
   d95e8:	6004      	str	r4, [r0, #0]
   d95ea:	f840 3f04 	str.w	r3, [r0, #4]!
   d95ee:	4288      	cmp	r0, r1
   d95f0:	d3f4      	bcc.n	d95dc <L_shift+0xc>
   d95f2:	bd70      	pop	{r4, r5, r6, pc}

000d95f4 <__match>:
   d95f4:	b530      	push	{r4, r5, lr}
   d95f6:	6803      	ldr	r3, [r0, #0]
   d95f8:	f811 4b01 	ldrb.w	r4, [r1], #1
   d95fc:	3301      	adds	r3, #1
   d95fe:	b14c      	cbz	r4, d9614 <__match+0x20>
   d9600:	781a      	ldrb	r2, [r3, #0]
   d9602:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   d9606:	2d19      	cmp	r5, #25
   d9608:	bf98      	it	ls
   d960a:	3220      	addls	r2, #32
   d960c:	42a2      	cmp	r2, r4
   d960e:	d0f3      	beq.n	d95f8 <__match+0x4>
   d9610:	2000      	movs	r0, #0
   d9612:	bd30      	pop	{r4, r5, pc}
   d9614:	6003      	str	r3, [r0, #0]
   d9616:	2001      	movs	r0, #1
   d9618:	bd30      	pop	{r4, r5, pc}

000d961a <__hexnan>:
   d961a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d961e:	680b      	ldr	r3, [r1, #0]
   d9620:	f8d0 b000 	ldr.w	fp, [r0]
   d9624:	115e      	asrs	r6, r3, #5
   d9626:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   d962a:	f013 031f 	ands.w	r3, r3, #31
   d962e:	b085      	sub	sp, #20
   d9630:	bf18      	it	ne
   d9632:	3604      	addne	r6, #4
   d9634:	1f35      	subs	r5, r6, #4
   d9636:	4617      	mov	r7, r2
   d9638:	2200      	movs	r2, #0
   d963a:	4682      	mov	sl, r0
   d963c:	9301      	str	r3, [sp, #4]
   d963e:	f846 2c04 	str.w	r2, [r6, #-4]
   d9642:	46a8      	mov	r8, r5
   d9644:	462c      	mov	r4, r5
   d9646:	9200      	str	r2, [sp, #0]
   d9648:	4691      	mov	r9, r2
   d964a:	f81b 1f01 	ldrb.w	r1, [fp, #1]!
   d964e:	2900      	cmp	r1, #0
   d9650:	d03c      	beq.n	d96cc <__hexnan+0xb2>
   d9652:	4608      	mov	r0, r1
   d9654:	9203      	str	r2, [sp, #12]
   d9656:	9102      	str	r1, [sp, #8]
   d9658:	f7ff fd86 	bl	d9168 <__hexdig_fun>
   d965c:	9a03      	ldr	r2, [sp, #12]
   d965e:	bb00      	cbnz	r0, d96a2 <__hexnan+0x88>
   d9660:	9902      	ldr	r1, [sp, #8]
   d9662:	2920      	cmp	r1, #32
   d9664:	d816      	bhi.n	d9694 <__hexnan+0x7a>
   d9666:	9b00      	ldr	r3, [sp, #0]
   d9668:	4599      	cmp	r9, r3
   d966a:	ddee      	ble.n	d964a <__hexnan+0x30>
   d966c:	4544      	cmp	r4, r8
   d966e:	d205      	bcs.n	d967c <__hexnan+0x62>
   d9670:	2a07      	cmp	r2, #7
   d9672:	dc03      	bgt.n	d967c <__hexnan+0x62>
   d9674:	4641      	mov	r1, r8
   d9676:	4620      	mov	r0, r4
   d9678:	f7ff ffaa 	bl	d95d0 <L_shift>
   d967c:	42bc      	cmp	r4, r7
   d967e:	d923      	bls.n	d96c8 <__hexnan+0xae>
   d9680:	2300      	movs	r3, #0
   d9682:	f1a4 0804 	sub.w	r8, r4, #4
   d9686:	f844 3c04 	str.w	r3, [r4, #-4]
   d968a:	f8cd 9000 	str.w	r9, [sp]
   d968e:	4644      	mov	r4, r8
   d9690:	461a      	mov	r2, r3
   d9692:	e7da      	b.n	d964a <__hexnan+0x30>
   d9694:	2929      	cmp	r1, #41	; 0x29
   d9696:	d148      	bne.n	d972a <__hexnan+0x110>
   d9698:	f10b 0301 	add.w	r3, fp, #1
   d969c:	f8ca 3000 	str.w	r3, [sl]
   d96a0:	e014      	b.n	d96cc <__hexnan+0xb2>
   d96a2:	3201      	adds	r2, #1
   d96a4:	2a08      	cmp	r2, #8
   d96a6:	f109 0901 	add.w	r9, r9, #1
   d96aa:	dd06      	ble.n	d96ba <__hexnan+0xa0>
   d96ac:	42bc      	cmp	r4, r7
   d96ae:	d9cc      	bls.n	d964a <__hexnan+0x30>
   d96b0:	2300      	movs	r3, #0
   d96b2:	f844 3c04 	str.w	r3, [r4, #-4]
   d96b6:	2201      	movs	r2, #1
   d96b8:	3c04      	subs	r4, #4
   d96ba:	6821      	ldr	r1, [r4, #0]
   d96bc:	f000 000f 	and.w	r0, r0, #15
   d96c0:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
   d96c4:	6020      	str	r0, [r4, #0]
   d96c6:	e7c0      	b.n	d964a <__hexnan+0x30>
   d96c8:	2208      	movs	r2, #8
   d96ca:	e7be      	b.n	d964a <__hexnan+0x30>
   d96cc:	f1b9 0f00 	cmp.w	r9, #0
   d96d0:	d02b      	beq.n	d972a <__hexnan+0x110>
   d96d2:	4544      	cmp	r4, r8
   d96d4:	d205      	bcs.n	d96e2 <__hexnan+0xc8>
   d96d6:	2a07      	cmp	r2, #7
   d96d8:	dc03      	bgt.n	d96e2 <__hexnan+0xc8>
   d96da:	4641      	mov	r1, r8
   d96dc:	4620      	mov	r0, r4
   d96de:	f7ff ff77 	bl	d95d0 <L_shift>
   d96e2:	42bc      	cmp	r4, r7
   d96e4:	d90c      	bls.n	d9700 <__hexnan+0xe6>
   d96e6:	463b      	mov	r3, r7
   d96e8:	f854 2b04 	ldr.w	r2, [r4], #4
   d96ec:	f843 2b04 	str.w	r2, [r3], #4
   d96f0:	42a5      	cmp	r5, r4
   d96f2:	d2f9      	bcs.n	d96e8 <__hexnan+0xce>
   d96f4:	2200      	movs	r2, #0
   d96f6:	f843 2b04 	str.w	r2, [r3], #4
   d96fa:	429d      	cmp	r5, r3
   d96fc:	d2fb      	bcs.n	d96f6 <__hexnan+0xdc>
   d96fe:	e00b      	b.n	d9718 <__hexnan+0xfe>
   d9700:	9b01      	ldr	r3, [sp, #4]
   d9702:	b14b      	cbz	r3, d9718 <__hexnan+0xfe>
   d9704:	f1c3 0220 	rsb	r2, r3, #32
   d9708:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d970c:	40d3      	lsrs	r3, r2
   d970e:	f856 2c04 	ldr.w	r2, [r6, #-4]
   d9712:	4013      	ands	r3, r2
   d9714:	f846 3c04 	str.w	r3, [r6, #-4]
   d9718:	682b      	ldr	r3, [r5, #0]
   d971a:	b943      	cbnz	r3, d972e <__hexnan+0x114>
   d971c:	42bd      	cmp	r5, r7
   d971e:	d102      	bne.n	d9726 <__hexnan+0x10c>
   d9720:	2301      	movs	r3, #1
   d9722:	602b      	str	r3, [r5, #0]
   d9724:	e003      	b.n	d972e <__hexnan+0x114>
   d9726:	3d04      	subs	r5, #4
   d9728:	e7f6      	b.n	d9718 <__hexnan+0xfe>
   d972a:	2004      	movs	r0, #4
   d972c:	e000      	b.n	d9730 <__hexnan+0x116>
   d972e:	2005      	movs	r0, #5
   d9730:	b005      	add	sp, #20
   d9732:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

000d9738 <_findenv_r>:
   d9738:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d973c:	4607      	mov	r7, r0
   d973e:	468b      	mov	fp, r1
   d9740:	4690      	mov	r8, r2
   d9742:	f000 fcd6 	bl	da0f2 <__env_lock>
   d9746:	4b19      	ldr	r3, [pc, #100]	; (d97ac <_findenv_r+0x74>)
   d9748:	681d      	ldr	r5, [r3, #0]
   d974a:	469a      	mov	sl, r3
   d974c:	b13d      	cbz	r5, d975e <_findenv_r+0x26>
   d974e:	465c      	mov	r4, fp
   d9750:	4623      	mov	r3, r4
   d9752:	f813 2b01 	ldrb.w	r2, [r3], #1
   d9756:	b142      	cbz	r2, d976a <_findenv_r+0x32>
   d9758:	2a3d      	cmp	r2, #61	; 0x3d
   d975a:	461c      	mov	r4, r3
   d975c:	d1f8      	bne.n	d9750 <_findenv_r+0x18>
   d975e:	4638      	mov	r0, r7
   d9760:	f000 fcc8 	bl	da0f4 <__env_unlock>
   d9764:	2000      	movs	r0, #0
   d9766:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d976a:	ebcb 0404 	rsb	r4, fp, r4
   d976e:	46a9      	mov	r9, r5
   d9770:	f859 0b04 	ldr.w	r0, [r9], #4
   d9774:	2800      	cmp	r0, #0
   d9776:	d0f2      	beq.n	d975e <_findenv_r+0x26>
   d9778:	4622      	mov	r2, r4
   d977a:	4659      	mov	r1, fp
   d977c:	f7fe fad3 	bl	d7d26 <strncmp>
   d9780:	b988      	cbnz	r0, d97a6 <_findenv_r+0x6e>
   d9782:	f859 3c04 	ldr.w	r3, [r9, #-4]
   d9786:	191e      	adds	r6, r3, r4
   d9788:	5d1b      	ldrb	r3, [r3, r4]
   d978a:	2b3d      	cmp	r3, #61	; 0x3d
   d978c:	d10b      	bne.n	d97a6 <_findenv_r+0x6e>
   d978e:	f8da 3000 	ldr.w	r3, [sl]
   d9792:	1aed      	subs	r5, r5, r3
   d9794:	10ad      	asrs	r5, r5, #2
   d9796:	4638      	mov	r0, r7
   d9798:	f8c8 5000 	str.w	r5, [r8]
   d979c:	f000 fcaa 	bl	da0f4 <__env_unlock>
   d97a0:	1c70      	adds	r0, r6, #1
   d97a2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d97a6:	464d      	mov	r5, r9
   d97a8:	e7e1      	b.n	d976e <_findenv_r+0x36>
   d97aa:	bf00      	nop
   d97ac:	2003e1f4 	.word	0x2003e1f4

000d97b0 <_getenv_r>:
   d97b0:	b507      	push	{r0, r1, r2, lr}
   d97b2:	aa01      	add	r2, sp, #4
   d97b4:	f7ff ffc0 	bl	d9738 <_findenv_r>
   d97b8:	b003      	add	sp, #12
   d97ba:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d97c0 <__gettzinfo>:
   d97c0:	4800      	ldr	r0, [pc, #0]	; (d97c4 <__gettzinfo+0x4>)
   d97c2:	4770      	bx	lr
   d97c4:	2003e1b4 	.word	0x2003e1b4

000d97c8 <gmtime_r>:
   d97c8:	6802      	ldr	r2, [r0, #0]
   d97ca:	4b47      	ldr	r3, [pc, #284]	; (d98e8 <gmtime_r+0x120>)
   d97cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   d97ce:	fb92 f4f3 	sdiv	r4, r2, r3
   d97d2:	fb03 2214 	mls	r2, r3, r4, r2
   d97d6:	2a00      	cmp	r2, #0
   d97d8:	bfbc      	itt	lt
   d97da:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
   d97de:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
   d97e2:	f44f 6061 	mov.w	r0, #3600	; 0xe10
   d97e6:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
   d97ea:	fb92 f3f0 	sdiv	r3, r2, r0
   d97ee:	fb00 2213 	mls	r2, r0, r3, r2
   d97f2:	f04f 003c 	mov.w	r0, #60	; 0x3c
   d97f6:	bfac      	ite	ge
   d97f8:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
   d97fc:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
   d9800:	608b      	str	r3, [r1, #8]
   d9802:	fb92 f3f0 	sdiv	r3, r2, r0
   d9806:	fb00 2213 	mls	r2, r0, r3, r2
   d980a:	604b      	str	r3, [r1, #4]
   d980c:	600a      	str	r2, [r1, #0]
   d980e:	2307      	movs	r3, #7
   d9810:	1ce2      	adds	r2, r4, #3
   d9812:	fb92 f3f3 	sdiv	r3, r2, r3
   d9816:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   d981a:	1ad3      	subs	r3, r2, r3
   d981c:	618b      	str	r3, [r1, #24]
   d981e:	4b33      	ldr	r3, [pc, #204]	; (d98ec <gmtime_r+0x124>)
   d9820:	4d33      	ldr	r5, [pc, #204]	; (d98f0 <gmtime_r+0x128>)
   d9822:	fb94 f5f5 	sdiv	r5, r4, r5
   d9826:	fb03 4405 	mla	r4, r3, r5, r4
   d982a:	f648 62ac 	movw	r2, #36524	; 0x8eac
   d982e:	fbb4 f2f2 	udiv	r2, r4, r2
   d9832:	4422      	add	r2, r4
   d9834:	f240 57b4 	movw	r7, #1460	; 0x5b4
   d9838:	fbb4 f3f7 	udiv	r3, r4, r7
   d983c:	1ad2      	subs	r2, r2, r3
   d983e:	482d      	ldr	r0, [pc, #180]	; (d98f4 <gmtime_r+0x12c>)
   d9840:	fbb4 f0f0 	udiv	r0, r4, r0
   d9844:	f648 6694 	movw	r6, #36500	; 0x8e94
   d9848:	1a13      	subs	r3, r2, r0
   d984a:	fbb3 f6f6 	udiv	r6, r3, r6
   d984e:	4434      	add	r4, r6
   d9850:	f240 126d 	movw	r2, #365	; 0x16d
   d9854:	fbb3 f0f2 	udiv	r0, r3, r2
   d9858:	fbb3 f3f7 	udiv	r3, r3, r7
   d985c:	1ae3      	subs	r3, r4, r3
   d985e:	fb02 3310 	mls	r3, r2, r0, r3
   d9862:	2499      	movs	r4, #153	; 0x99
   d9864:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   d9868:	3202      	adds	r2, #2
   d986a:	fbb2 f2f4 	udiv	r2, r2, r4
   d986e:	2a0a      	cmp	r2, #10
   d9870:	fb04 f402 	mul.w	r4, r4, r2
   d9874:	f104 0602 	add.w	r6, r4, #2
   d9878:	f04f 0405 	mov.w	r4, #5
   d987c:	fbb6 f4f4 	udiv	r4, r6, r4
   d9880:	bf34      	ite	cc
   d9882:	2602      	movcc	r6, #2
   d9884:	f06f 0609 	mvncs.w	r6, #9
   d9888:	4416      	add	r6, r2
   d988a:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d988e:	fb02 0505 	mla	r5, r2, r5, r0
   d9892:	1c5f      	adds	r7, r3, #1
   d9894:	2e01      	cmp	r6, #1
   d9896:	bf98      	it	ls
   d9898:	3501      	addls	r5, #1
   d989a:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
   d989e:	eba7 0704 	sub.w	r7, r7, r4
   d98a2:	d302      	bcc.n	d98aa <gmtime_r+0xe2>
   d98a4:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
   d98a8:	e014      	b.n	d98d4 <gmtime_r+0x10c>
   d98aa:	0782      	lsls	r2, r0, #30
   d98ac:	d105      	bne.n	d98ba <gmtime_r+0xf2>
   d98ae:	2464      	movs	r4, #100	; 0x64
   d98b0:	fbb0 f2f4 	udiv	r2, r0, r4
   d98b4:	fb04 0212 	mls	r2, r4, r2, r0
   d98b8:	b94a      	cbnz	r2, d98ce <gmtime_r+0x106>
   d98ba:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d98be:	fbb0 f4f2 	udiv	r4, r0, r2
   d98c2:	fb02 0014 	mls	r0, r2, r4, r0
   d98c6:	fab0 f280 	clz	r2, r0
   d98ca:	0952      	lsrs	r2, r2, #5
   d98cc:	e000      	b.n	d98d0 <gmtime_r+0x108>
   d98ce:	2201      	movs	r2, #1
   d98d0:	333b      	adds	r3, #59	; 0x3b
   d98d2:	441a      	add	r2, r3
   d98d4:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
   d98d8:	2300      	movs	r3, #0
   d98da:	61ca      	str	r2, [r1, #28]
   d98dc:	614d      	str	r5, [r1, #20]
   d98de:	610e      	str	r6, [r1, #16]
   d98e0:	60cf      	str	r7, [r1, #12]
   d98e2:	620b      	str	r3, [r1, #32]
   d98e4:	4608      	mov	r0, r1
   d98e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d98e8:	00015180 	.word	0x00015180
   d98ec:	fffdc54f 	.word	0xfffdc54f
   d98f0:	00023ab1 	.word	0x00023ab1
   d98f4:	00023ab0 	.word	0x00023ab0

000d98f8 <_Balloc>:
   d98f8:	b570      	push	{r4, r5, r6, lr}
   d98fa:	6a45      	ldr	r5, [r0, #36]	; 0x24
   d98fc:	4604      	mov	r4, r0
   d98fe:	460e      	mov	r6, r1
   d9900:	b93d      	cbnz	r5, d9912 <_Balloc+0x1a>
   d9902:	2010      	movs	r0, #16
   d9904:	f7fb ff64 	bl	d57d0 <malloc>
   d9908:	6260      	str	r0, [r4, #36]	; 0x24
   d990a:	6045      	str	r5, [r0, #4]
   d990c:	6085      	str	r5, [r0, #8]
   d990e:	6005      	str	r5, [r0, #0]
   d9910:	60c5      	str	r5, [r0, #12]
   d9912:	6a65      	ldr	r5, [r4, #36]	; 0x24
   d9914:	68eb      	ldr	r3, [r5, #12]
   d9916:	b143      	cbz	r3, d992a <_Balloc+0x32>
   d9918:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d991a:	68db      	ldr	r3, [r3, #12]
   d991c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
   d9920:	b178      	cbz	r0, d9942 <_Balloc+0x4a>
   d9922:	6802      	ldr	r2, [r0, #0]
   d9924:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
   d9928:	e017      	b.n	d995a <_Balloc+0x62>
   d992a:	2221      	movs	r2, #33	; 0x21
   d992c:	2104      	movs	r1, #4
   d992e:	4620      	mov	r0, r4
   d9930:	f000 fbd1 	bl	da0d6 <_calloc_r>
   d9934:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d9936:	60e8      	str	r0, [r5, #12]
   d9938:	68db      	ldr	r3, [r3, #12]
   d993a:	2b00      	cmp	r3, #0
   d993c:	d1ec      	bne.n	d9918 <_Balloc+0x20>
   d993e:	2000      	movs	r0, #0
   d9940:	bd70      	pop	{r4, r5, r6, pc}
   d9942:	2101      	movs	r1, #1
   d9944:	fa01 f506 	lsl.w	r5, r1, r6
   d9948:	1d6a      	adds	r2, r5, #5
   d994a:	0092      	lsls	r2, r2, #2
   d994c:	4620      	mov	r0, r4
   d994e:	f000 fbc2 	bl	da0d6 <_calloc_r>
   d9952:	2800      	cmp	r0, #0
   d9954:	d0f3      	beq.n	d993e <_Balloc+0x46>
   d9956:	6046      	str	r6, [r0, #4]
   d9958:	6085      	str	r5, [r0, #8]
   d995a:	2300      	movs	r3, #0
   d995c:	6103      	str	r3, [r0, #16]
   d995e:	60c3      	str	r3, [r0, #12]
   d9960:	bd70      	pop	{r4, r5, r6, pc}

000d9962 <_Bfree>:
   d9962:	b570      	push	{r4, r5, r6, lr}
   d9964:	6a44      	ldr	r4, [r0, #36]	; 0x24
   d9966:	4606      	mov	r6, r0
   d9968:	460d      	mov	r5, r1
   d996a:	b93c      	cbnz	r4, d997c <_Bfree+0x1a>
   d996c:	2010      	movs	r0, #16
   d996e:	f7fb ff2f 	bl	d57d0 <malloc>
   d9972:	6270      	str	r0, [r6, #36]	; 0x24
   d9974:	6044      	str	r4, [r0, #4]
   d9976:	6084      	str	r4, [r0, #8]
   d9978:	6004      	str	r4, [r0, #0]
   d997a:	60c4      	str	r4, [r0, #12]
   d997c:	b13d      	cbz	r5, d998e <_Bfree+0x2c>
   d997e:	6a73      	ldr	r3, [r6, #36]	; 0x24
   d9980:	686a      	ldr	r2, [r5, #4]
   d9982:	68db      	ldr	r3, [r3, #12]
   d9984:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   d9988:	6029      	str	r1, [r5, #0]
   d998a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   d998e:	bd70      	pop	{r4, r5, r6, pc}

000d9990 <__multadd>:
   d9990:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d9994:	690d      	ldr	r5, [r1, #16]
   d9996:	461f      	mov	r7, r3
   d9998:	4606      	mov	r6, r0
   d999a:	460c      	mov	r4, r1
   d999c:	f101 0e14 	add.w	lr, r1, #20
   d99a0:	2300      	movs	r3, #0
   d99a2:	f8de 0000 	ldr.w	r0, [lr]
   d99a6:	b281      	uxth	r1, r0
   d99a8:	fb02 7101 	mla	r1, r2, r1, r7
   d99ac:	0c0f      	lsrs	r7, r1, #16
   d99ae:	0c00      	lsrs	r0, r0, #16
   d99b0:	fb02 7000 	mla	r0, r2, r0, r7
   d99b4:	b289      	uxth	r1, r1
   d99b6:	3301      	adds	r3, #1
   d99b8:	eb01 4100 	add.w	r1, r1, r0, lsl #16
   d99bc:	429d      	cmp	r5, r3
   d99be:	ea4f 4710 	mov.w	r7, r0, lsr #16
   d99c2:	f84e 1b04 	str.w	r1, [lr], #4
   d99c6:	dcec      	bgt.n	d99a2 <__multadd+0x12>
   d99c8:	b1d7      	cbz	r7, d9a00 <__multadd+0x70>
   d99ca:	68a3      	ldr	r3, [r4, #8]
   d99cc:	429d      	cmp	r5, r3
   d99ce:	db12      	blt.n	d99f6 <__multadd+0x66>
   d99d0:	6861      	ldr	r1, [r4, #4]
   d99d2:	4630      	mov	r0, r6
   d99d4:	3101      	adds	r1, #1
   d99d6:	f7ff ff8f 	bl	d98f8 <_Balloc>
   d99da:	6922      	ldr	r2, [r4, #16]
   d99dc:	3202      	adds	r2, #2
   d99de:	f104 010c 	add.w	r1, r4, #12
   d99e2:	4680      	mov	r8, r0
   d99e4:	0092      	lsls	r2, r2, #2
   d99e6:	300c      	adds	r0, #12
   d99e8:	f7fe f91e 	bl	d7c28 <memcpy>
   d99ec:	4621      	mov	r1, r4
   d99ee:	4630      	mov	r0, r6
   d99f0:	f7ff ffb7 	bl	d9962 <_Bfree>
   d99f4:	4644      	mov	r4, r8
   d99f6:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   d99fa:	3501      	adds	r5, #1
   d99fc:	615f      	str	r7, [r3, #20]
   d99fe:	6125      	str	r5, [r4, #16]
   d9a00:	4620      	mov	r0, r4
   d9a02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d9a06 <__s2b>:
   d9a06:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d9a0a:	460c      	mov	r4, r1
   d9a0c:	4615      	mov	r5, r2
   d9a0e:	461f      	mov	r7, r3
   d9a10:	2209      	movs	r2, #9
   d9a12:	3308      	adds	r3, #8
   d9a14:	4606      	mov	r6, r0
   d9a16:	fb93 f3f2 	sdiv	r3, r3, r2
   d9a1a:	2100      	movs	r1, #0
   d9a1c:	2201      	movs	r2, #1
   d9a1e:	429a      	cmp	r2, r3
   d9a20:	da02      	bge.n	d9a28 <__s2b+0x22>
   d9a22:	0052      	lsls	r2, r2, #1
   d9a24:	3101      	adds	r1, #1
   d9a26:	e7fa      	b.n	d9a1e <__s2b+0x18>
   d9a28:	4630      	mov	r0, r6
   d9a2a:	f7ff ff65 	bl	d98f8 <_Balloc>
   d9a2e:	9b08      	ldr	r3, [sp, #32]
   d9a30:	6143      	str	r3, [r0, #20]
   d9a32:	2d09      	cmp	r5, #9
   d9a34:	f04f 0301 	mov.w	r3, #1
   d9a38:	6103      	str	r3, [r0, #16]
   d9a3a:	dd11      	ble.n	d9a60 <__s2b+0x5a>
   d9a3c:	f104 0809 	add.w	r8, r4, #9
   d9a40:	46c1      	mov	r9, r8
   d9a42:	442c      	add	r4, r5
   d9a44:	f819 3b01 	ldrb.w	r3, [r9], #1
   d9a48:	4601      	mov	r1, r0
   d9a4a:	3b30      	subs	r3, #48	; 0x30
   d9a4c:	220a      	movs	r2, #10
   d9a4e:	4630      	mov	r0, r6
   d9a50:	f7ff ff9e 	bl	d9990 <__multadd>
   d9a54:	45a1      	cmp	r9, r4
   d9a56:	d1f5      	bne.n	d9a44 <__s2b+0x3e>
   d9a58:	eb08 0405 	add.w	r4, r8, r5
   d9a5c:	3c08      	subs	r4, #8
   d9a5e:	e001      	b.n	d9a64 <__s2b+0x5e>
   d9a60:	340a      	adds	r4, #10
   d9a62:	2509      	movs	r5, #9
   d9a64:	1b2d      	subs	r5, r5, r4
   d9a66:	1963      	adds	r3, r4, r5
   d9a68:	429f      	cmp	r7, r3
   d9a6a:	dd08      	ble.n	d9a7e <__s2b+0x78>
   d9a6c:	f814 3b01 	ldrb.w	r3, [r4], #1
   d9a70:	4601      	mov	r1, r0
   d9a72:	3b30      	subs	r3, #48	; 0x30
   d9a74:	220a      	movs	r2, #10
   d9a76:	4630      	mov	r0, r6
   d9a78:	f7ff ff8a 	bl	d9990 <__multadd>
   d9a7c:	e7f3      	b.n	d9a66 <__s2b+0x60>
   d9a7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d9a82 <__hi0bits>:
   d9a82:	0c03      	lsrs	r3, r0, #16
   d9a84:	041b      	lsls	r3, r3, #16
   d9a86:	b913      	cbnz	r3, d9a8e <__hi0bits+0xc>
   d9a88:	0400      	lsls	r0, r0, #16
   d9a8a:	2310      	movs	r3, #16
   d9a8c:	e000      	b.n	d9a90 <__hi0bits+0xe>
   d9a8e:	2300      	movs	r3, #0
   d9a90:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   d9a94:	bf04      	itt	eq
   d9a96:	0200      	lsleq	r0, r0, #8
   d9a98:	3308      	addeq	r3, #8
   d9a9a:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   d9a9e:	bf04      	itt	eq
   d9aa0:	0100      	lsleq	r0, r0, #4
   d9aa2:	3304      	addeq	r3, #4
   d9aa4:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   d9aa8:	bf04      	itt	eq
   d9aaa:	0080      	lsleq	r0, r0, #2
   d9aac:	3302      	addeq	r3, #2
   d9aae:	2800      	cmp	r0, #0
   d9ab0:	db03      	blt.n	d9aba <__hi0bits+0x38>
   d9ab2:	0042      	lsls	r2, r0, #1
   d9ab4:	d503      	bpl.n	d9abe <__hi0bits+0x3c>
   d9ab6:	1c58      	adds	r0, r3, #1
   d9ab8:	4770      	bx	lr
   d9aba:	4618      	mov	r0, r3
   d9abc:	4770      	bx	lr
   d9abe:	2020      	movs	r0, #32
   d9ac0:	4770      	bx	lr

000d9ac2 <__lo0bits>:
   d9ac2:	6803      	ldr	r3, [r0, #0]
   d9ac4:	f013 0207 	ands.w	r2, r3, #7
   d9ac8:	d00b      	beq.n	d9ae2 <__lo0bits+0x20>
   d9aca:	07d9      	lsls	r1, r3, #31
   d9acc:	d422      	bmi.n	d9b14 <__lo0bits+0x52>
   d9ace:	079a      	lsls	r2, r3, #30
   d9ad0:	bf4b      	itete	mi
   d9ad2:	085b      	lsrmi	r3, r3, #1
   d9ad4:	089b      	lsrpl	r3, r3, #2
   d9ad6:	6003      	strmi	r3, [r0, #0]
   d9ad8:	6003      	strpl	r3, [r0, #0]
   d9ada:	bf4c      	ite	mi
   d9adc:	2001      	movmi	r0, #1
   d9ade:	2002      	movpl	r0, #2
   d9ae0:	4770      	bx	lr
   d9ae2:	b299      	uxth	r1, r3
   d9ae4:	b909      	cbnz	r1, d9aea <__lo0bits+0x28>
   d9ae6:	0c1b      	lsrs	r3, r3, #16
   d9ae8:	2210      	movs	r2, #16
   d9aea:	f013 0fff 	tst.w	r3, #255	; 0xff
   d9aee:	bf04      	itt	eq
   d9af0:	0a1b      	lsreq	r3, r3, #8
   d9af2:	3208      	addeq	r2, #8
   d9af4:	0719      	lsls	r1, r3, #28
   d9af6:	bf04      	itt	eq
   d9af8:	091b      	lsreq	r3, r3, #4
   d9afa:	3204      	addeq	r2, #4
   d9afc:	0799      	lsls	r1, r3, #30
   d9afe:	bf04      	itt	eq
   d9b00:	089b      	lsreq	r3, r3, #2
   d9b02:	3202      	addeq	r2, #2
   d9b04:	07d9      	lsls	r1, r3, #31
   d9b06:	d402      	bmi.n	d9b0e <__lo0bits+0x4c>
   d9b08:	085b      	lsrs	r3, r3, #1
   d9b0a:	d005      	beq.n	d9b18 <__lo0bits+0x56>
   d9b0c:	3201      	adds	r2, #1
   d9b0e:	6003      	str	r3, [r0, #0]
   d9b10:	4610      	mov	r0, r2
   d9b12:	4770      	bx	lr
   d9b14:	2000      	movs	r0, #0
   d9b16:	4770      	bx	lr
   d9b18:	2020      	movs	r0, #32
   d9b1a:	4770      	bx	lr

000d9b1c <__i2b>:
   d9b1c:	b510      	push	{r4, lr}
   d9b1e:	460c      	mov	r4, r1
   d9b20:	2101      	movs	r1, #1
   d9b22:	f7ff fee9 	bl	d98f8 <_Balloc>
   d9b26:	2201      	movs	r2, #1
   d9b28:	6144      	str	r4, [r0, #20]
   d9b2a:	6102      	str	r2, [r0, #16]
   d9b2c:	bd10      	pop	{r4, pc}

000d9b2e <__multiply>:
   d9b2e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9b32:	4614      	mov	r4, r2
   d9b34:	690a      	ldr	r2, [r1, #16]
   d9b36:	6923      	ldr	r3, [r4, #16]
   d9b38:	429a      	cmp	r2, r3
   d9b3a:	bfb8      	it	lt
   d9b3c:	460b      	movlt	r3, r1
   d9b3e:	4688      	mov	r8, r1
   d9b40:	bfbc      	itt	lt
   d9b42:	46a0      	movlt	r8, r4
   d9b44:	461c      	movlt	r4, r3
   d9b46:	f8d8 7010 	ldr.w	r7, [r8, #16]
   d9b4a:	f8d4 9010 	ldr.w	r9, [r4, #16]
   d9b4e:	f8d8 3008 	ldr.w	r3, [r8, #8]
   d9b52:	f8d8 1004 	ldr.w	r1, [r8, #4]
   d9b56:	eb07 0609 	add.w	r6, r7, r9
   d9b5a:	429e      	cmp	r6, r3
   d9b5c:	bfc8      	it	gt
   d9b5e:	3101      	addgt	r1, #1
   d9b60:	f7ff feca 	bl	d98f8 <_Balloc>
   d9b64:	f100 0514 	add.w	r5, r0, #20
   d9b68:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
   d9b6c:	462b      	mov	r3, r5
   d9b6e:	2200      	movs	r2, #0
   d9b70:	4563      	cmp	r3, ip
   d9b72:	d202      	bcs.n	d9b7a <__multiply+0x4c>
   d9b74:	f843 2b04 	str.w	r2, [r3], #4
   d9b78:	e7fa      	b.n	d9b70 <__multiply+0x42>
   d9b7a:	f104 0214 	add.w	r2, r4, #20
   d9b7e:	f108 0114 	add.w	r1, r8, #20
   d9b82:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   d9b86:	eb01 0787 	add.w	r7, r1, r7, lsl #2
   d9b8a:	9300      	str	r3, [sp, #0]
   d9b8c:	9b00      	ldr	r3, [sp, #0]
   d9b8e:	9201      	str	r2, [sp, #4]
   d9b90:	4293      	cmp	r3, r2
   d9b92:	d957      	bls.n	d9c44 <__multiply+0x116>
   d9b94:	f8b2 b000 	ldrh.w	fp, [r2]
   d9b98:	f1bb 0f00 	cmp.w	fp, #0
   d9b9c:	d023      	beq.n	d9be6 <__multiply+0xb8>
   d9b9e:	4689      	mov	r9, r1
   d9ba0:	46ae      	mov	lr, r5
   d9ba2:	f04f 0800 	mov.w	r8, #0
   d9ba6:	f859 4b04 	ldr.w	r4, [r9], #4
   d9baa:	f8be a000 	ldrh.w	sl, [lr]
   d9bae:	b2a3      	uxth	r3, r4
   d9bb0:	fb0b a303 	mla	r3, fp, r3, sl
   d9bb4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
   d9bb8:	f8de 4000 	ldr.w	r4, [lr]
   d9bbc:	4443      	add	r3, r8
   d9bbe:	ea4f 4814 	mov.w	r8, r4, lsr #16
   d9bc2:	fb0b 840a 	mla	r4, fp, sl, r8
   d9bc6:	eb04 4413 	add.w	r4, r4, r3, lsr #16
   d9bca:	46f2      	mov	sl, lr
   d9bcc:	b29b      	uxth	r3, r3
   d9bce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
   d9bd2:	454f      	cmp	r7, r9
   d9bd4:	ea4f 4814 	mov.w	r8, r4, lsr #16
   d9bd8:	f84a 3b04 	str.w	r3, [sl], #4
   d9bdc:	d901      	bls.n	d9be2 <__multiply+0xb4>
   d9bde:	46d6      	mov	lr, sl
   d9be0:	e7e1      	b.n	d9ba6 <__multiply+0x78>
   d9be2:	f8ce 8004 	str.w	r8, [lr, #4]
   d9be6:	9b01      	ldr	r3, [sp, #4]
   d9be8:	f8b3 a002 	ldrh.w	sl, [r3, #2]
   d9bec:	3204      	adds	r2, #4
   d9bee:	f1ba 0f00 	cmp.w	sl, #0
   d9bf2:	d021      	beq.n	d9c38 <__multiply+0x10a>
   d9bf4:	682b      	ldr	r3, [r5, #0]
   d9bf6:	462c      	mov	r4, r5
   d9bf8:	4689      	mov	r9, r1
   d9bfa:	f04f 0800 	mov.w	r8, #0
   d9bfe:	f8b9 e000 	ldrh.w	lr, [r9]
   d9c02:	f8b4 b002 	ldrh.w	fp, [r4, #2]
   d9c06:	fb0a be0e 	mla	lr, sl, lr, fp
   d9c0a:	44f0      	add	r8, lr
   d9c0c:	46a3      	mov	fp, r4
   d9c0e:	b29b      	uxth	r3, r3
   d9c10:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   d9c14:	f84b 3b04 	str.w	r3, [fp], #4
   d9c18:	f859 3b04 	ldr.w	r3, [r9], #4
   d9c1c:	f8b4 e004 	ldrh.w	lr, [r4, #4]
   d9c20:	0c1b      	lsrs	r3, r3, #16
   d9c22:	fb0a e303 	mla	r3, sl, r3, lr
   d9c26:	eb03 4318 	add.w	r3, r3, r8, lsr #16
   d9c2a:	454f      	cmp	r7, r9
   d9c2c:	ea4f 4813 	mov.w	r8, r3, lsr #16
   d9c30:	d901      	bls.n	d9c36 <__multiply+0x108>
   d9c32:	465c      	mov	r4, fp
   d9c34:	e7e3      	b.n	d9bfe <__multiply+0xd0>
   d9c36:	6063      	str	r3, [r4, #4]
   d9c38:	3504      	adds	r5, #4
   d9c3a:	e7a7      	b.n	d9b8c <__multiply+0x5e>
   d9c3c:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
   d9c40:	b913      	cbnz	r3, d9c48 <__multiply+0x11a>
   d9c42:	3e01      	subs	r6, #1
   d9c44:	2e00      	cmp	r6, #0
   d9c46:	dcf9      	bgt.n	d9c3c <__multiply+0x10e>
   d9c48:	6106      	str	r6, [r0, #16]
   d9c4a:	b003      	add	sp, #12
   d9c4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d9c50 <__pow5mult>:
   d9c50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d9c54:	4615      	mov	r5, r2
   d9c56:	f012 0203 	ands.w	r2, r2, #3
   d9c5a:	4606      	mov	r6, r0
   d9c5c:	460f      	mov	r7, r1
   d9c5e:	d007      	beq.n	d9c70 <__pow5mult+0x20>
   d9c60:	3a01      	subs	r2, #1
   d9c62:	4c21      	ldr	r4, [pc, #132]	; (d9ce8 <__pow5mult+0x98>)
   d9c64:	2300      	movs	r3, #0
   d9c66:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   d9c6a:	f7ff fe91 	bl	d9990 <__multadd>
   d9c6e:	4607      	mov	r7, r0
   d9c70:	10ad      	asrs	r5, r5, #2
   d9c72:	d036      	beq.n	d9ce2 <__pow5mult+0x92>
   d9c74:	6a74      	ldr	r4, [r6, #36]	; 0x24
   d9c76:	b93c      	cbnz	r4, d9c88 <__pow5mult+0x38>
   d9c78:	2010      	movs	r0, #16
   d9c7a:	f7fb fda9 	bl	d57d0 <malloc>
   d9c7e:	6270      	str	r0, [r6, #36]	; 0x24
   d9c80:	6044      	str	r4, [r0, #4]
   d9c82:	6084      	str	r4, [r0, #8]
   d9c84:	6004      	str	r4, [r0, #0]
   d9c86:	60c4      	str	r4, [r0, #12]
   d9c88:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   d9c8c:	f8d8 4008 	ldr.w	r4, [r8, #8]
   d9c90:	b94c      	cbnz	r4, d9ca6 <__pow5mult+0x56>
   d9c92:	f240 2171 	movw	r1, #625	; 0x271
   d9c96:	4630      	mov	r0, r6
   d9c98:	f7ff ff40 	bl	d9b1c <__i2b>
   d9c9c:	2300      	movs	r3, #0
   d9c9e:	f8c8 0008 	str.w	r0, [r8, #8]
   d9ca2:	4604      	mov	r4, r0
   d9ca4:	6003      	str	r3, [r0, #0]
   d9ca6:	f04f 0800 	mov.w	r8, #0
   d9caa:	07eb      	lsls	r3, r5, #31
   d9cac:	d50a      	bpl.n	d9cc4 <__pow5mult+0x74>
   d9cae:	4639      	mov	r1, r7
   d9cb0:	4622      	mov	r2, r4
   d9cb2:	4630      	mov	r0, r6
   d9cb4:	f7ff ff3b 	bl	d9b2e <__multiply>
   d9cb8:	4639      	mov	r1, r7
   d9cba:	4681      	mov	r9, r0
   d9cbc:	4630      	mov	r0, r6
   d9cbe:	f7ff fe50 	bl	d9962 <_Bfree>
   d9cc2:	464f      	mov	r7, r9
   d9cc4:	106d      	asrs	r5, r5, #1
   d9cc6:	d00c      	beq.n	d9ce2 <__pow5mult+0x92>
   d9cc8:	6820      	ldr	r0, [r4, #0]
   d9cca:	b108      	cbz	r0, d9cd0 <__pow5mult+0x80>
   d9ccc:	4604      	mov	r4, r0
   d9cce:	e7ec      	b.n	d9caa <__pow5mult+0x5a>
   d9cd0:	4622      	mov	r2, r4
   d9cd2:	4621      	mov	r1, r4
   d9cd4:	4630      	mov	r0, r6
   d9cd6:	f7ff ff2a 	bl	d9b2e <__multiply>
   d9cda:	6020      	str	r0, [r4, #0]
   d9cdc:	f8c0 8000 	str.w	r8, [r0]
   d9ce0:	e7f4      	b.n	d9ccc <__pow5mult+0x7c>
   d9ce2:	4638      	mov	r0, r7
   d9ce4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d9ce8:	000daeb8 	.word	0x000daeb8

000d9cec <__lshift>:
   d9cec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d9cf0:	460c      	mov	r4, r1
   d9cf2:	ea4f 1a62 	mov.w	sl, r2, asr #5
   d9cf6:	6926      	ldr	r6, [r4, #16]
   d9cf8:	6849      	ldr	r1, [r1, #4]
   d9cfa:	68a3      	ldr	r3, [r4, #8]
   d9cfc:	4456      	add	r6, sl
   d9cfe:	4607      	mov	r7, r0
   d9d00:	4691      	mov	r9, r2
   d9d02:	1c75      	adds	r5, r6, #1
   d9d04:	42ab      	cmp	r3, r5
   d9d06:	da02      	bge.n	d9d0e <__lshift+0x22>
   d9d08:	3101      	adds	r1, #1
   d9d0a:	005b      	lsls	r3, r3, #1
   d9d0c:	e7fa      	b.n	d9d04 <__lshift+0x18>
   d9d0e:	4638      	mov	r0, r7
   d9d10:	f7ff fdf2 	bl	d98f8 <_Balloc>
   d9d14:	2300      	movs	r3, #0
   d9d16:	4680      	mov	r8, r0
   d9d18:	f100 0114 	add.w	r1, r0, #20
   d9d1c:	461a      	mov	r2, r3
   d9d1e:	4553      	cmp	r3, sl
   d9d20:	da03      	bge.n	d9d2a <__lshift+0x3e>
   d9d22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   d9d26:	3301      	adds	r3, #1
   d9d28:	e7f9      	b.n	d9d1e <__lshift+0x32>
   d9d2a:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
   d9d2e:	6920      	ldr	r0, [r4, #16]
   d9d30:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   d9d34:	f019 091f 	ands.w	r9, r9, #31
   d9d38:	f104 0114 	add.w	r1, r4, #20
   d9d3c:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
   d9d40:	d014      	beq.n	d9d6c <__lshift+0x80>
   d9d42:	f1c9 0c20 	rsb	ip, r9, #32
   d9d46:	2200      	movs	r2, #0
   d9d48:	6808      	ldr	r0, [r1, #0]
   d9d4a:	fa00 f009 	lsl.w	r0, r0, r9
   d9d4e:	4302      	orrs	r2, r0
   d9d50:	469a      	mov	sl, r3
   d9d52:	f843 2b04 	str.w	r2, [r3], #4
   d9d56:	f851 2b04 	ldr.w	r2, [r1], #4
   d9d5a:	458e      	cmp	lr, r1
   d9d5c:	fa22 f20c 	lsr.w	r2, r2, ip
   d9d60:	d8f2      	bhi.n	d9d48 <__lshift+0x5c>
   d9d62:	f8ca 2004 	str.w	r2, [sl, #4]
   d9d66:	b142      	cbz	r2, d9d7a <__lshift+0x8e>
   d9d68:	1cb5      	adds	r5, r6, #2
   d9d6a:	e006      	b.n	d9d7a <__lshift+0x8e>
   d9d6c:	3b04      	subs	r3, #4
   d9d6e:	f851 2b04 	ldr.w	r2, [r1], #4
   d9d72:	f843 2f04 	str.w	r2, [r3, #4]!
   d9d76:	458e      	cmp	lr, r1
   d9d78:	d8f9      	bhi.n	d9d6e <__lshift+0x82>
   d9d7a:	3d01      	subs	r5, #1
   d9d7c:	4638      	mov	r0, r7
   d9d7e:	f8c8 5010 	str.w	r5, [r8, #16]
   d9d82:	4621      	mov	r1, r4
   d9d84:	f7ff fded 	bl	d9962 <_Bfree>
   d9d88:	4640      	mov	r0, r8
   d9d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d9d8e <__mcmp>:
   d9d8e:	6903      	ldr	r3, [r0, #16]
   d9d90:	690a      	ldr	r2, [r1, #16]
   d9d92:	1a9b      	subs	r3, r3, r2
   d9d94:	b510      	push	{r4, lr}
   d9d96:	d111      	bne.n	d9dbc <__mcmp+0x2e>
   d9d98:	0092      	lsls	r2, r2, #2
   d9d9a:	3014      	adds	r0, #20
   d9d9c:	3114      	adds	r1, #20
   d9d9e:	1883      	adds	r3, r0, r2
   d9da0:	440a      	add	r2, r1
   d9da2:	f853 4d04 	ldr.w	r4, [r3, #-4]!
   d9da6:	f852 1d04 	ldr.w	r1, [r2, #-4]!
   d9daa:	428c      	cmp	r4, r1
   d9dac:	d002      	beq.n	d9db4 <__mcmp+0x26>
   d9dae:	d307      	bcc.n	d9dc0 <__mcmp+0x32>
   d9db0:	2001      	movs	r0, #1
   d9db2:	bd10      	pop	{r4, pc}
   d9db4:	4298      	cmp	r0, r3
   d9db6:	d3f4      	bcc.n	d9da2 <__mcmp+0x14>
   d9db8:	2000      	movs	r0, #0
   d9dba:	bd10      	pop	{r4, pc}
   d9dbc:	4618      	mov	r0, r3
   d9dbe:	bd10      	pop	{r4, pc}
   d9dc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d9dc4:	bd10      	pop	{r4, pc}

000d9dc6 <__mdiff>:
   d9dc6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d9dca:	460c      	mov	r4, r1
   d9dcc:	4607      	mov	r7, r0
   d9dce:	4611      	mov	r1, r2
   d9dd0:	4620      	mov	r0, r4
   d9dd2:	4615      	mov	r5, r2
   d9dd4:	f7ff ffdb 	bl	d9d8e <__mcmp>
   d9dd8:	1e06      	subs	r6, r0, #0
   d9dda:	d108      	bne.n	d9dee <__mdiff+0x28>
   d9ddc:	4631      	mov	r1, r6
   d9dde:	4638      	mov	r0, r7
   d9de0:	f7ff fd8a 	bl	d98f8 <_Balloc>
   d9de4:	2301      	movs	r3, #1
   d9de6:	6103      	str	r3, [r0, #16]
   d9de8:	6146      	str	r6, [r0, #20]
   d9dea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d9dee:	bfbc      	itt	lt
   d9df0:	4623      	movlt	r3, r4
   d9df2:	462c      	movlt	r4, r5
   d9df4:	4638      	mov	r0, r7
   d9df6:	6861      	ldr	r1, [r4, #4]
   d9df8:	bfba      	itte	lt
   d9dfa:	461d      	movlt	r5, r3
   d9dfc:	2601      	movlt	r6, #1
   d9dfe:	2600      	movge	r6, #0
   d9e00:	f7ff fd7a 	bl	d98f8 <_Balloc>
   d9e04:	692b      	ldr	r3, [r5, #16]
   d9e06:	60c6      	str	r6, [r0, #12]
   d9e08:	6926      	ldr	r6, [r4, #16]
   d9e0a:	f105 0914 	add.w	r9, r5, #20
   d9e0e:	3414      	adds	r4, #20
   d9e10:	eb04 0786 	add.w	r7, r4, r6, lsl #2
   d9e14:	eb09 0883 	add.w	r8, r9, r3, lsl #2
   d9e18:	f100 0514 	add.w	r5, r0, #20
   d9e1c:	f04f 0c00 	mov.w	ip, #0
   d9e20:	f854 3b04 	ldr.w	r3, [r4], #4
   d9e24:	f859 2b04 	ldr.w	r2, [r9], #4
   d9e28:	fa1c f183 	uxtah	r1, ip, r3
   d9e2c:	fa1f fe82 	uxth.w	lr, r2
   d9e30:	0c12      	lsrs	r2, r2, #16
   d9e32:	ebce 0101 	rsb	r1, lr, r1
   d9e36:	ebc2 4313 	rsb	r3, r2, r3, lsr #16
   d9e3a:	eb03 4321 	add.w	r3, r3, r1, asr #16
   d9e3e:	b289      	uxth	r1, r1
   d9e40:	ea4f 4c23 	mov.w	ip, r3, asr #16
   d9e44:	45c8      	cmp	r8, r9
   d9e46:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
   d9e4a:	46a6      	mov	lr, r4
   d9e4c:	f845 3b04 	str.w	r3, [r5], #4
   d9e50:	d8e6      	bhi.n	d9e20 <__mdiff+0x5a>
   d9e52:	45be      	cmp	lr, r7
   d9e54:	d20e      	bcs.n	d9e74 <__mdiff+0xae>
   d9e56:	f85e 1b04 	ldr.w	r1, [lr], #4
   d9e5a:	fa1c f281 	uxtah	r2, ip, r1
   d9e5e:	1413      	asrs	r3, r2, #16
   d9e60:	eb03 4311 	add.w	r3, r3, r1, lsr #16
   d9e64:	b292      	uxth	r2, r2
   d9e66:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   d9e6a:	ea4f 4c23 	mov.w	ip, r3, asr #16
   d9e6e:	f845 2b04 	str.w	r2, [r5], #4
   d9e72:	e7ee      	b.n	d9e52 <__mdiff+0x8c>
   d9e74:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   d9e78:	b90b      	cbnz	r3, d9e7e <__mdiff+0xb8>
   d9e7a:	3e01      	subs	r6, #1
   d9e7c:	e7fa      	b.n	d9e74 <__mdiff+0xae>
   d9e7e:	6106      	str	r6, [r0, #16]
   d9e80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d9e84 <__ulp>:
   d9e84:	4b12      	ldr	r3, [pc, #72]	; (d9ed0 <__ulp+0x4c>)
   d9e86:	ee10 2a90 	vmov	r2, s1
   d9e8a:	401a      	ands	r2, r3
   d9e8c:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
   d9e90:	2b00      	cmp	r3, #0
   d9e92:	dd02      	ble.n	d9e9a <__ulp+0x16>
   d9e94:	2000      	movs	r0, #0
   d9e96:	4619      	mov	r1, r3
   d9e98:	e017      	b.n	d9eca <__ulp+0x46>
   d9e9a:	425b      	negs	r3, r3
   d9e9c:	151b      	asrs	r3, r3, #20
   d9e9e:	2b13      	cmp	r3, #19
   d9ea0:	f04f 0000 	mov.w	r0, #0
   d9ea4:	f04f 0100 	mov.w	r1, #0
   d9ea8:	dc04      	bgt.n	d9eb4 <__ulp+0x30>
   d9eaa:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   d9eae:	fa42 f103 	asr.w	r1, r2, r3
   d9eb2:	e00a      	b.n	d9eca <__ulp+0x46>
   d9eb4:	3b14      	subs	r3, #20
   d9eb6:	2b1e      	cmp	r3, #30
   d9eb8:	f04f 0201 	mov.w	r2, #1
   d9ebc:	bfda      	itte	le
   d9ebe:	f1c3 031f 	rsble	r3, r3, #31
   d9ec2:	fa02 f303 	lslle.w	r3, r2, r3
   d9ec6:	4613      	movgt	r3, r2
   d9ec8:	4618      	mov	r0, r3
   d9eca:	ec41 0b10 	vmov	d0, r0, r1
   d9ece:	4770      	bx	lr
   d9ed0:	7ff00000 	.word	0x7ff00000

000d9ed4 <__b2d>:
   d9ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d9ed6:	6905      	ldr	r5, [r0, #16]
   d9ed8:	f100 0614 	add.w	r6, r0, #20
   d9edc:	eb06 0585 	add.w	r5, r6, r5, lsl #2
   d9ee0:	1f2f      	subs	r7, r5, #4
   d9ee2:	f855 4c04 	ldr.w	r4, [r5, #-4]
   d9ee6:	4620      	mov	r0, r4
   d9ee8:	f7ff fdcb 	bl	d9a82 <__hi0bits>
   d9eec:	f1c0 0320 	rsb	r3, r0, #32
   d9ef0:	280a      	cmp	r0, #10
   d9ef2:	600b      	str	r3, [r1, #0]
   d9ef4:	dc14      	bgt.n	d9f20 <__b2d+0x4c>
   d9ef6:	f1c0 0e0b 	rsb	lr, r0, #11
   d9efa:	fa24 f10e 	lsr.w	r1, r4, lr
   d9efe:	42be      	cmp	r6, r7
   d9f00:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
   d9f04:	bf34      	ite	cc
   d9f06:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   d9f0a:	2100      	movcs	r1, #0
   d9f0c:	3015      	adds	r0, #21
   d9f0e:	fa04 f000 	lsl.w	r0, r4, r0
   d9f12:	fa21 f10e 	lsr.w	r1, r1, lr
   d9f16:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   d9f1a:	ea40 0201 	orr.w	r2, r0, r1
   d9f1e:	e023      	b.n	d9f68 <__b2d+0x94>
   d9f20:	42be      	cmp	r6, r7
   d9f22:	bf3a      	itte	cc
   d9f24:	f1a5 0708 	subcc.w	r7, r5, #8
   d9f28:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   d9f2c:	2100      	movcs	r1, #0
   d9f2e:	380b      	subs	r0, #11
   d9f30:	d015      	beq.n	d9f5e <__b2d+0x8a>
   d9f32:	4084      	lsls	r4, r0
   d9f34:	f1c0 0520 	rsb	r5, r0, #32
   d9f38:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
   d9f3c:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
   d9f40:	42b7      	cmp	r7, r6
   d9f42:	fa21 fe05 	lsr.w	lr, r1, r5
   d9f46:	ea44 030e 	orr.w	r3, r4, lr
   d9f4a:	bf8c      	ite	hi
   d9f4c:	f857 4c04 	ldrhi.w	r4, [r7, #-4]
   d9f50:	2400      	movls	r4, #0
   d9f52:	fa01 f000 	lsl.w	r0, r1, r0
   d9f56:	40ec      	lsrs	r4, r5
   d9f58:	ea40 0204 	orr.w	r2, r0, r4
   d9f5c:	e004      	b.n	d9f68 <__b2d+0x94>
   d9f5e:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
   d9f62:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   d9f66:	460a      	mov	r2, r1
   d9f68:	ec43 2b10 	vmov	d0, r2, r3
   d9f6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d9f6e <__d2b>:
   d9f6e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d9f72:	460e      	mov	r6, r1
   d9f74:	2101      	movs	r1, #1
   d9f76:	ec59 8b10 	vmov	r8, r9, d0
   d9f7a:	4615      	mov	r5, r2
   d9f7c:	f7ff fcbc 	bl	d98f8 <_Balloc>
   d9f80:	f3c9 540a 	ubfx	r4, r9, #20, #11
   d9f84:	4607      	mov	r7, r0
   d9f86:	f3c9 0313 	ubfx	r3, r9, #0, #20
   d9f8a:	b10c      	cbz	r4, d9f90 <__d2b+0x22>
   d9f8c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d9f90:	9301      	str	r3, [sp, #4]
   d9f92:	f1b8 0f00 	cmp.w	r8, #0
   d9f96:	d019      	beq.n	d9fcc <__d2b+0x5e>
   d9f98:	a802      	add	r0, sp, #8
   d9f9a:	f840 8d08 	str.w	r8, [r0, #-8]!
   d9f9e:	f7ff fd90 	bl	d9ac2 <__lo0bits>
   d9fa2:	9b00      	ldr	r3, [sp, #0]
   d9fa4:	b148      	cbz	r0, d9fba <__d2b+0x4c>
   d9fa6:	9a01      	ldr	r2, [sp, #4]
   d9fa8:	f1c0 0120 	rsb	r1, r0, #32
   d9fac:	fa02 f101 	lsl.w	r1, r2, r1
   d9fb0:	430b      	orrs	r3, r1
   d9fb2:	40c2      	lsrs	r2, r0
   d9fb4:	617b      	str	r3, [r7, #20]
   d9fb6:	9201      	str	r2, [sp, #4]
   d9fb8:	e000      	b.n	d9fbc <__d2b+0x4e>
   d9fba:	617b      	str	r3, [r7, #20]
   d9fbc:	9b01      	ldr	r3, [sp, #4]
   d9fbe:	61bb      	str	r3, [r7, #24]
   d9fc0:	2b00      	cmp	r3, #0
   d9fc2:	bf14      	ite	ne
   d9fc4:	2102      	movne	r1, #2
   d9fc6:	2101      	moveq	r1, #1
   d9fc8:	6139      	str	r1, [r7, #16]
   d9fca:	e007      	b.n	d9fdc <__d2b+0x6e>
   d9fcc:	a801      	add	r0, sp, #4
   d9fce:	f7ff fd78 	bl	d9ac2 <__lo0bits>
   d9fd2:	9b01      	ldr	r3, [sp, #4]
   d9fd4:	617b      	str	r3, [r7, #20]
   d9fd6:	2101      	movs	r1, #1
   d9fd8:	6139      	str	r1, [r7, #16]
   d9fda:	3020      	adds	r0, #32
   d9fdc:	b134      	cbz	r4, d9fec <__d2b+0x7e>
   d9fde:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
   d9fe2:	4404      	add	r4, r0
   d9fe4:	6034      	str	r4, [r6, #0]
   d9fe6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   d9fea:	e009      	b.n	da000 <__d2b+0x92>
   d9fec:	eb07 0381 	add.w	r3, r7, r1, lsl #2
   d9ff0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   d9ff4:	6030      	str	r0, [r6, #0]
   d9ff6:	6918      	ldr	r0, [r3, #16]
   d9ff8:	f7ff fd43 	bl	d9a82 <__hi0bits>
   d9ffc:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
   da000:	6028      	str	r0, [r5, #0]
   da002:	4638      	mov	r0, r7
   da004:	b003      	add	sp, #12
   da006:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000da00a <__ratio>:
   da00a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   da00e:	4688      	mov	r8, r1
   da010:	4669      	mov	r1, sp
   da012:	4681      	mov	r9, r0
   da014:	f7ff ff5e 	bl	d9ed4 <__b2d>
   da018:	a901      	add	r1, sp, #4
   da01a:	4640      	mov	r0, r8
   da01c:	ec55 4b10 	vmov	r4, r5, d0
   da020:	f7ff ff58 	bl	d9ed4 <__b2d>
   da024:	f8d9 3010 	ldr.w	r3, [r9, #16]
   da028:	f8d8 2010 	ldr.w	r2, [r8, #16]
   da02c:	1a9a      	subs	r2, r3, r2
   da02e:	e89d 000a 	ldmia.w	sp, {r1, r3}
   da032:	1ac9      	subs	r1, r1, r3
   da034:	ec57 6b10 	vmov	r6, r7, d0
   da038:	eb01 1342 	add.w	r3, r1, r2, lsl #5
   da03c:	2b00      	cmp	r3, #0
   da03e:	bfcc      	ite	gt
   da040:	eb05 5503 	addgt.w	r5, r5, r3, lsl #20
   da044:	eba7 5703 	suble.w	r7, r7, r3, lsl #20
   da048:	4632      	mov	r2, r6
   da04a:	463b      	mov	r3, r7
   da04c:	4620      	mov	r0, r4
   da04e:	4629      	mov	r1, r5
   da050:	f7fd fad0 	bl	d75f4 <__aeabi_ddiv>
   da054:	ec41 0b10 	vmov	d0, r0, r1
   da058:	b003      	add	sp, #12
   da05a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000da05e <__copybits>:
   da05e:	3901      	subs	r1, #1
   da060:	b510      	push	{r4, lr}
   da062:	1149      	asrs	r1, r1, #5
   da064:	6914      	ldr	r4, [r2, #16]
   da066:	3101      	adds	r1, #1
   da068:	f102 0314 	add.w	r3, r2, #20
   da06c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   da070:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   da074:	42a3      	cmp	r3, r4
   da076:	4602      	mov	r2, r0
   da078:	d204      	bcs.n	da084 <__copybits+0x26>
   da07a:	f853 2b04 	ldr.w	r2, [r3], #4
   da07e:	f840 2b04 	str.w	r2, [r0], #4
   da082:	e7f7      	b.n	da074 <__copybits+0x16>
   da084:	2300      	movs	r3, #0
   da086:	428a      	cmp	r2, r1
   da088:	d202      	bcs.n	da090 <__copybits+0x32>
   da08a:	f842 3b04 	str.w	r3, [r2], #4
   da08e:	e7fa      	b.n	da086 <__copybits+0x28>
   da090:	bd10      	pop	{r4, pc}

000da092 <__any_on>:
   da092:	f100 0214 	add.w	r2, r0, #20
   da096:	6900      	ldr	r0, [r0, #16]
   da098:	114b      	asrs	r3, r1, #5
   da09a:	4298      	cmp	r0, r3
   da09c:	b510      	push	{r4, lr}
   da09e:	db0c      	blt.n	da0ba <__any_on+0x28>
   da0a0:	dd0c      	ble.n	da0bc <__any_on+0x2a>
   da0a2:	f011 011f 	ands.w	r1, r1, #31
   da0a6:	d009      	beq.n	da0bc <__any_on+0x2a>
   da0a8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   da0ac:	fa24 f001 	lsr.w	r0, r4, r1
   da0b0:	fa00 f101 	lsl.w	r1, r0, r1
   da0b4:	428c      	cmp	r4, r1
   da0b6:	d10c      	bne.n	da0d2 <__any_on+0x40>
   da0b8:	e000      	b.n	da0bc <__any_on+0x2a>
   da0ba:	4603      	mov	r3, r0
   da0bc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   da0c0:	4293      	cmp	r3, r2
   da0c2:	d904      	bls.n	da0ce <__any_on+0x3c>
   da0c4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   da0c8:	2900      	cmp	r1, #0
   da0ca:	d0f9      	beq.n	da0c0 <__any_on+0x2e>
   da0cc:	e001      	b.n	da0d2 <__any_on+0x40>
   da0ce:	2000      	movs	r0, #0
   da0d0:	bd10      	pop	{r4, pc}
   da0d2:	2001      	movs	r0, #1
   da0d4:	bd10      	pop	{r4, pc}

000da0d6 <_calloc_r>:
   da0d6:	b538      	push	{r3, r4, r5, lr}
   da0d8:	fb02 f401 	mul.w	r4, r2, r1
   da0dc:	4621      	mov	r1, r4
   da0de:	f7fb fbbf 	bl	d5860 <_malloc_r>
   da0e2:	4605      	mov	r5, r0
   da0e4:	b118      	cbz	r0, da0ee <_calloc_r+0x18>
   da0e6:	4622      	mov	r2, r4
   da0e8:	2100      	movs	r1, #0
   da0ea:	f7fd fda8 	bl	d7c3e <memset>
   da0ee:	4628      	mov	r0, r5
   da0f0:	bd38      	pop	{r3, r4, r5, pc}

000da0f2 <__env_lock>:
   da0f2:	4770      	bx	lr

000da0f4 <__env_unlock>:
   da0f4:	4770      	bx	lr

000da0f6 <link_code_end>:
	...

000da0f8 <dynalib_user>:
   da0f8:	4021 000d 405d 000d 4089 000d 408d 000d     !@..]@...@...@..
   da108:	0000 0000 5047 2053 3176 322e 6400 7665     ....GPS v1.2.dev
   da118:	6369 4c65 636f 7461 726f 0000               iceLocator..

000da124 <_ZTV28CellularHelperStringResponse>:
	...
   da12c:	4a31 000d 5954 4550 555f 4b4e 4f4e 4e57     1J..TYPE_UNKNOWN
   da13c:	5400 5059 5f45 4b4f 5400 5059 5f45 5245     .TYPE_OK.TYPE_ER
   da14c:	4f52 0052 5954 4550 435f 4e4f 454e 5443     ROR.TYPE_CONNECT
   da15c:	5400 5059 5f45 4f4e 4143 5252 4549 0052     .TYPE_NOCARRIER.
   da16c:	5954 4550 4e5f 444f 4149 544c 4e4f 0045     TYPE_NODIALTONE.
   da17c:	5954 4550 425f 5355 0059 5954 4550 4e5f     TYPE_BUSY.TYPE_N
   da18c:	414f 534e 4557 0052 5954 4550 505f 4f52     OANSWER.TYPE_PRO
   da19c:	504d 0054 5954 4550 505f 554c 0053 5954     MPT.TYPE_PLUS.TY
   da1ac:	4550 415f 4f42 5452 4445 7400 7079 3d65     PE_ABORTED.type=
   da1bc:	7830 7825 6300 6c65 756c 616c 2072 6572     0x%x.cellular re
   da1cc:	7073 6e6f 6573 7420 7079 3d65 7325 6c20     sponse type=%s l
   da1dc:	6e65 253d 0064 6e5c 5c00 0072 7830 3025     en=%d.\n.\r.0x%0
   da1ec:	7832 2500 2c64 6425 6b00 7965 7420 6f6f     2x.%d,%d.key too
   da1fc:	6c20 6e6f 2067 656b 3d79 7325 7620 6c61      long key=%s val
   da20c:	6575 253d 0073 4152 0054 4d55 5354 4d00     ue=%s.RAT.UMTS.M
   da21c:	4343 4d00 434e 4c00 4341 4300 0049 5342     CC.MNC.LAC.CI.BS
   da22c:	4349 4100 4652 4e43 4100 4652 4e43 445f     IC.ARFCN.ARFCN_D
   da23c:	4445 5200 4c58 5645 5553 0042 5f54 4441     ED.RXLEVSUB.T_AD
   da24c:	0056 5852 454c 0056 4c44 0046 4c55 0046     V.RXLEV.DLF.ULF.
   da25c:	5352 5043 4c20 5645 5200 4341 5300 0043     RSCP LEV.RAC.SC.
   da26c:	4345 304e 4c20 5645 7500 6b6e 6f6e 6e77     ECN0 LEV.unknown
   da27c:	6b20 7965 253d 2073 6176 756c 3d65 7325      key=%s value=%s
   da28c:	4d00 4343 003a 4152 3a54 4700 4d53 0020     .MCC:.RAT:.GSM .
   da29c:	4344 2053 3831 3030 4500 4753 204d 3039     DCS 1800.ESGM 90
   da2ac:	0030 4d55 5354 0020 4733 7520 6b6e 6f6e     0.UMTS .3G unkno
   da2bc:	6e77 4400 5343 3120 3038 2030 726f 3120     wn.DCS 1800 or 1
   da2cc:	3039 0030 4745 4d53 3920 3030 3200 2047     900.EGSM 900.2G 
   da2dc:	6e75 6e6b 776f 006e 636d 3d63 6425 202c     unknown.mcc=%d, 
   da2ec:	6e6d 3d63 6425 202c 616c 3d63 7825 6320     mnc=%d, lac=%x c
   da2fc:	3d69 7825 6220 6e61 3d64 7325 7220 7373     i=%x band=%s rss
   da30c:	3d69 6425 7200 7461 553d 544d 2053 7325     i=%d.rat=UMTS %s
   da31c:	6420 666c 253d 2064 6c75 3d66 6425 7200      dlf=%d ulf=%d.r
   da32c:	7461 473d 4d53 2520 2073 7362 6369 253d     at=GSM %s bsic=%
   da33c:	2078 7261 6366 3d6e 6425 7220 6c78 7665     x arfcn=%d rxlev
   da34c:	253d 0064 6573 7672 6369 2065 7325 6e00     =%d.service %s.n
   da35c:	6965 6867 6f62 2072 6425 2520 0073 616c     eighbor %d %s.la
   da36c:	3d74 6625 6c20 6e6f 253d 2066 6c61 3d74     t=%f lon=%f alt=
   da37c:	6425 7520 636e 7265 6174 6e69 7974 253d     %d uncertainty=%
   da38c:	0064 6176 696c 3d64 6166 736c 0065 6425     d.valid=false.%d
   da39c:	252c 2c64 2522 2278 222c 7825 2c22 6425     ,%d,"%x","%x",%d
   da3ac:	7300 6174 3d74 6425 6c20 6361 303d 2578     .stat=%d lac=0x%
   da3bc:	2078 6963 303d 2578 2078 6172 3d74 6425     x ci=0x%x rat=%d
   da3cc:	4100 2b54 4743 4d4d 0a0d 4100 4954 0d30     .AT+CGMM...ATI0.
   da3dc:	000a 5441 432b 4d47 0d52 000a 5441 432b     ..AT+CGMR...AT+C
   da3ec:	5347 0d4e 000a 5441 432b 4d47 0d49 000a     GSN...AT+CGMI...
   da3fc:	4343 4449 4100 2b54 4343 4449 0a0d 5300     CCID.AT+CCID...S
   da40c:	5241 2d41 3452 5500 4f44 4e50 4100 2b54     ARA-R4.UDOPN.AT+
   da41c:	4455 504f 3d4e 6425 0a0d 4300 5153 4100     UDOPN=%d...CSQ.A
   da42c:	2b54 5343 0d51 000a 5441 432b 504f 3d53     T+CSQ...AT+COPS=
   da43c:	0d30 000a 706f 7265 7461 726f 6120 726c     0...operator alr
   da44c:	6165 7964 2520 0073 5441 432b 504f 3d53     eady %s.AT+COPS=
   da45c:	0d32 000a 5441 432b 504f 3d53 2c34 2c32     2...AT+COPS=4,2,
   da46c:	2522 2273 0a0d 4300 4547 0044 5441 432b     "%s"...CGED.AT+C
   da47c:	4547 3d44 6425 0a0d 5500 4c55 434f 4100     GED=%d...UULOC.A
   da48c:	2b54 4c55 434f 4543 4c4c 303d 0a0d 4100     T+ULOCCELL=0...A
   da49c:	2b54 4c55 434f 323d 322c 302c 252c 2c64     T+ULOC=2,2,0,%d,
   da4ac:	3035 3030 0a0d 4100 2b54 5243 4745 323d     5000...AT+CREG=2
   da4bc:	0a0d 4300 4552 0047 5441 432b 4552 3f47     ...CREG.AT+CREG?
   da4cc:	0a0d 4100 2b54 5243 4745 303d 0a0d 4100     ...AT+CREG=0...A
   da4dc:	2b54 5055 4e49 3d47 2522 2273 0a0d 5500     T+UPING="%s"...U
   da4ec:	4e44 5253 004e 5441 552b 4e44 5253 3d4e     DNSRN.AT+UDNSRN=
   da4fc:	2c30 2522 2273 0a0d 2500 2e75 7525 252e     0,"%s"...%u.%u.%
   da50c:	2e75 7525 0a00 252b 3a73 0020               u.%u..+%s: .

000da518 <_ZTV33CellularHelperEnvironmentResponse>:
	...
   da520:	46d5 000d                                   .F..

000da524 <_ZTV32CellularHelperPlusStringResponse>:
	...
   da52c:	4a69 000d                                   iJ..

000da530 <_ZL9BasicFont>:
	...
   da538:	0000 005f 0000 0000 0000 0007 0007 0000     .._.............
   da548:	1400 147f 147f 0000 2400 7f2a 122a 0000     .........$*.*...
   da558:	2300 0813 6264 0000 3600 5549 5022 0000     .#..db...6IU"P..
   da568:	0000 0305 0000 0000 1c00 4122 0000 0000     .........."A....
   da578:	4100 1c22 0000 0000 0800 1c2a 082a 0000     .A".......*.*...
   da588:	0800 3e08 0808 0000 a000 0060 0000 0000     ...>......`.....
   da598:	0800 0808 0808 0000 6000 0060 0000 0000     .........``.....
   da5a8:	2000 0810 0204 0000 3e00 4951 3e45 0000     . .......>QIE>..
   da5b8:	0000 7f42 0040 0000 6200 4951 4649 0000     ..B.@....bQIIF..
   da5c8:	2200 4941 3649 0000 1800 1214 107f 0000     ."AII6..........
   da5d8:	2700 4545 3945 0000 3c00 494a 3049 0000     .'EEE9...<JII0..
   da5e8:	0100 0971 0305 0000 3600 4949 3649 0000     ..q......6III6..
   da5f8:	0600 4949 1e29 0000 0000 3636 0000 0000     ..II).....66....
   da608:	0000 6cac 0000 0000 0800 2214 0041 0000     ...l......."A...
   da618:	1400 1414 1414 0000 4100 1422 0008 0000     .........A".....
   da628:	0200 5101 0609 0000 3200 7949 3e41 0000     ...Q.....2IyA>..
   da638:	7e00 0909 7e09 0000 7f00 4949 3649 0000     .~...~....III6..
   da648:	3e00 4141 2241 0000 7f00 4141 1c22 0000     .>AAA"....AA"...
   da658:	7f00 4949 4149 0000 7f00 0909 0109 0000     ..IIIA..........
   da668:	3e00 4141 7251 0000 7f00 0808 7f08 0000     .>AAQr..........
   da678:	4100 417f 0000 0000 2000 4140 013f 0000     .A.A..... @A?...
   da688:	7f00 1408 4122 0000 7f00 4040 4040 0000     ...."A....@@@@..
   da698:	7f00 0c02 7f02 0000 7f00 0804 7f10 0000     ................
   da6a8:	3e00 4141 3e41 0000 7f00 0909 0609 0000     .>AAA>..........
   da6b8:	3e00 5141 5e21 0000 7f00 1909 4629 0000     .>AQ!^......)F..
   da6c8:	2600 4949 3249 0000 0100 7f01 0101 0000     .&III2..........
   da6d8:	3f00 4040 3f40 0000 1f00 4020 1f20 0000     .?@@@?.... @ ...
   da6e8:	3f00 3840 3f40 0000 6300 0814 6314 0000     .?@8@?...c...c..
   da6f8:	0300 7804 0304 0000 6100 4951 4345 0000     ...x.....aQIEC..
   da708:	7f00 4141 0000 0000 0200 0804 2010 0000     ..AA......... ..
   da718:	4100 7f41 0000 0000 0400 0102 0402 0000     .AA.............
   da728:	8000 8080 8080 0000 0100 0402 0000 0000     ................
   da738:	2000 5454 7854 0000 7f00 4448 3844 0000     . TTTx....HDD8..
   da748:	3800 4444 0028 0000 3800 4444 7f48 0000     .8DD(....8DDH...
   da758:	3800 5454 1854 0000 0800 097e 0002 0000     .8TTT.....~.....
   da768:	1800 a4a4 7ca4 0000 7f00 0408 7804 0000     .....|.......x..
   da778:	0000 007d 0000 0000 8000 7d84 0000 0000     ..}........}....
   da788:	7f00 2810 0044 0000 4100 407f 0000 0000     ...(D....A.@....
   da798:	7c00 1804 7804 0000 7c00 0408 007c 0000     .|...x...|..|...
   da7a8:	3800 4444 0038 0000 fc00 2424 0018 0000     .8DD8.....$$....
   da7b8:	1800 2424 00fc 0000 0000 087c 0004 0000     ..$$......|.....
   da7c8:	4800 5454 0024 0000 0400 447f 0000 0000     .HTT$......D....
   da7d8:	3c00 4040 007c 0000 1c00 4020 1c20 0000     .<@@|..... @ ...
   da7e8:	3c00 3040 3c40 0000 4400 1028 4428 0000     .<@0@<...D(.(D..
   da7f8:	1c00 a0a0 007c 0000 4400 5464 444c 0000     ....|....DdTLD..
   da808:	0800 4136 0000 0000 0000 007f 0000 0000     ..6A............
   da818:	4100 0836 0000 0000 0200 0101 0102 0000     .A6.............
   da828:	0200 0505 0002 0000                         ........

000da830 <_ZTV26CellularHelperCREGResponse>:
	...
   da838:	4a69 000d                                   iJ..

000da83c <_ZTV39CellularHelperEnvironmentResponseStaticILj4EE>:
	...
   da844:	46d5 000d                                   .F..

000da848 <_ZTV23GoogleMapsDeviceLocator>:
	...
   da850:	4d01 000d 4d21 000d 7325 227b 2269 253a     .M..!M..%s{"i":%
   da860:	2c64 6c22 3a22 7525 222c 2263 253a 2c64     d,"l":%u,"c":%d,
   da870:	6e22 3a22 6425 007d 5441 5426 7b00 6322     "n":%d}.AT&T.{"c
   da880:	3a22 227b 226f 223a 7325 2c22 2200 2261     ":{"o":"%s",."a"
   da890:	5b3a 5300 5241 2d41 3347 3035 7000 6275     :[.SARA-G350.pub
   da8a0:	696c 6873 6f4c 6163 6974 6e6f 7300 6163     lishLocation.sca
   da8b0:	446e 7461 3d61 7325 6800 6f6f 2d6b 6572     nData=%s.hook-re
   da8c0:	7073 6e6f 6573 252f 2f73 7325 0000 0000     sponse/%s/%s....

000da8d0 <_ZTVN5spark13CellularClassE>:
	...
   da8d8:	597b 000d 5971 000d 5967 000d 591d 000d     {Y..qY..gY...Y..
   da8e8:	595b 000d 594f 000d 5943 000d 593b 000d     [Y..OY..CY..;Y..
   da8f8:	5931 000d 5927 000d 6371 000d               1Y..'Y..qc..

000da904 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   da90c:	59b5 000d 59bb 000d 59ff 000d 59c9 000d     .Y...Y...Y...Y..
   da91c:	59b7 000d                                   .Y..

000da920 <_ZTVN5spark13EthernetClassE>:
	...
   da928:	5fd7 000d 5fcd 000d 5fc3 000d 5fb9 000d     ._..._..._..._..
   da938:	5fad 000d 5fa1 000d 5f95 000d 5f8d 000d     ._..._..._..._..
   da948:	5f83 000d 5f79 000d 6371 000d               ._..y_..qc..

000da954 <_ZTV7TwoWire>:
	...
   da95c:	5ff5 000d 603f 000d 6017 000d 5ff7 000d     ._..?`...`..._..
   da96c:	601f 000d 6027 000d 602f 000d 6037 000d     .`..'`../`..7`..

000da97c <_ZTV9IPAddress>:
	...
   da984:	60a9 000d 6099 000d 609b 000d 6162 6475     .`...`...`..baud
   da994:	5300 7265 6169 006c 6553 6972 6c61 0031     .Serial.Serial1.
   da9a4:	7974 6570 7000 7261 6d61 6300 646d 6900     type.param.cmd.i
   da9b4:	0064 6e68 0064 7473 6d72 6600 6c69 0074     d.hnd.strm.filt.
   da9c4:	766c 006c 6461 4864 6e61 6c64 7265 7200     lvl.addHandler.r
   da9d4:	6d65 766f 4865 6e61 6c64 7265 6500 756e     emoveHandler.enu
   da9e4:	486d 6e61 6c64 7265 0073 534a 4e4f 7453     mHandlers.JSONSt
   da9f4:	6572 6d61 6f4c 4867 6e61 6c64 7265 6100     reamLogHandler.a
   daa04:	7070 2500 3130 7530 0020 205d 2c00 0020     pp.%010u .] ., .
   daa14:	2928 203a 2000 005b 6f63 6564 3d20 0020     (): . [.code = .
   daa24:	6925 6400 7465 6961 736c 3d20 0020 6e6c     %i.details = .ln
   daa34:	6600 006e 6f63 6564 6400 7465 6961 006c     .fn.code.detail.
   daa44:	6f6e 656e 7400 6172 6563 6900 666e 006f     none.trace.info.
   daa54:	6177 6e72 6500 7272 726f 7000 6e61 6369     warn.error.panic
   daa64:	6100 6c6c 0000 0000                         .all....

000daa6c <_ZTVN5spark9MeshClassE>:
	...
   daa74:	61eb 000d 61e1 000d 61d7 000d 61cd 000d     .a...a...a...a..
   daa84:	61c1 000d 61b5 000d 61a9 000d 61a1 000d     .a...a...a...a..
   daa94:	6197 000d 618d 000d 6371 000d               .a...a..qc..

000daaa0 <_ZTVN5spark12NetworkClassE>:
	...
   daaa8:	6309 000d 6313 000d 631d 000d 6327 000d     .c...c...c..'c..
   daab8:	6331 000d 633d 000d 6349 000d 6355 000d     1c..=c..Ic..Uc..
   daac8:	635d 000d 6367 000d 6371 000d 2b25 3330     ]c..gc..qc..%+03
   daad8:	3a64 3025 7532 2500 2d59 6d25 252d 5464     d:%02u.%Y-%m-%dT
   daae8:	4825 253a 3a4d 5325 7a25 6100 6373 6974     %H:%M:%S%z.ascti
   daaf8:	656d 0000                                   me..

000daafc <_ZTV11USARTSerial>:
	...
   dab04:	69bd 000d 6a0d 000d 6a1b 000d 6451 000d     .i...j...j..Qd..
   dab14:	69d1 000d 69f3 000d 69df 000d 6a07 000d     .i...i...i...j..
   dab24:	69bf 000d 69c3 000d                         .i...i..

000dab2c <_ZTV9USBSerial>:
	...
   dab34:	6abd 000d 6b0d 000d 6b1b 000d 6451 000d     .j...k...k..Qd..
   dab44:	6af9 000d 6abf 000d 6ad5 000d 6b07 000d     .j...j...j...k..
   dab54:	6aeb 000d 6ab9 000d                         .j...j..

000dab5c <_ZSt7nothrow>:
	...

000dab5d <_ctype_>:
   dab5d:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   dab6d:	2020 2020 2020 2020 2020 2020 2020 2020                     
   dab7d:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   dab8d:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   dab9d:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   dabad:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   dabbd:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   dabcd:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   dabdd:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000dac60 <__sf_fake_stdin>:
	...

000dac80 <__sf_fake_stdout>:
	...

000daca0 <__sf_fake_stderr>:
	...
   dacc0:	4f50 4953 0058 002e                         POSIX...

000dacc8 <__month_lengths>:
   dacc8:	001f 0000 001c 0000 001f 0000 001e 0000     ................
   dacd8:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   dace8:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   dacf8:	001f 0000 001d 0000 001f 0000 001e 0000     ................
   dad08:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   dad18:	001e 0000 001f 0000 001e 0000 001f 0000     ................

000dad28 <fpi.5344>:
   dad28:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   dad38:	0000 0000                                   ....

000dad3c <fpinan.5380>:
   dad3c:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
   dad4c:	0000 0000 666e 6900 696e 7974 6100 006e     ....nf.inity.an.
   dad5c:	0000 0000                                   ....

000dad60 <tinytens>:
   dad60:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   dad70:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   dad80:	6f43 64ac 0628 1168 5a54 4700 544d 2500     Co.d(.h.TZ.GMT.%
   dad90:	3031 5e5b 2d30 2c39 2d2b 255d 006e 254d     10[^0-9,+-]%n.M%
   dada0:	7568 6e25 252e 7568 6e25 252e 7568 6e25     hu%n.%hu%n.%hu%n
   dadb0:	2f00 6825 2575 3a6e 6825 2575 3a6e 6825     ./%hu%n:%hu%n:%h
   dadc0:	2575 006e 0000 0000                         u%n.....

000dadc8 <__mprec_tens>:
   dadc8:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   dadd8:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   dade8:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   dadf8:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   dae08:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   dae18:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   dae28:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   dae38:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   dae48:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   dae58:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   dae68:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   dae78:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   dae88:	9db4 79d9 7843 44ea                         ...yCx.D

000dae90 <__mprec_bigtens>:
   dae90:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   daea0:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   daeb0:	bf3c 7f73 4fdd 7515                         <.s..O.u

000daeb8 <p05.5387>:
   daeb8:	0005 0000 0019 0000 007d 0000               ........}...

000daec4 <link_const_variable_data_end>:
   daec4:	000d41a5 	.word	0x000d41a5
   daec8:	000d4af1 	.word	0x000d4af1
   daecc:	000d4cd9 	.word	0x000d4cd9
   daed0:	000d53b5 	.word	0x000d53b5
   daed4:	000d58f5 	.word	0x000d58f5
   daed8:	000d5985 	.word	0x000d5985
   daedc:	000d5fe1 	.word	0x000d5fe1
   daee0:	000d617d 	.word	0x000d617d
   daee4:	000d62b9 	.word	0x000d62b9
   daee8:	000d643d 	.word	0x000d643d
   daeec:	000d6591 	.word	0x000d6591
   daef0:	000d682d 	.word	0x000d682d
   daef4:	000d69a9 	.word	0x000d69a9
   daef8:	000d6da1 	.word	0x000d6da1
   daefc:	000d6e65 	.word	0x000d6e65
   daf00:	000d6ee9 	.word	0x000d6ee9
   daf04:	000d6f6d 	.word	0x000d6f6d

000daf08 <link_constructors_end>:
	...
