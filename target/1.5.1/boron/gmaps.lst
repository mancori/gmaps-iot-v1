
/Users/manuel/IoT_maps/tracker1/app2/gmaps/target/1.5.1/boron/gmaps.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000086b0  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000dc6d0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         000000f8  2003e0a8  000dc6d4  0001e0a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000650  2003e1a0  2003e1a0  0002e1a0  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000dc7cc  000dc7cc  0002c7cc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000dc7f4  000dc7f4  0002c7f4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000fe108  00000000  00000000  0002c7f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000131be  00000000  00000000  0012a900  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00023e1b  00000000  00000000  0013dabe  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002a98  00000000  00000000  001618d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000050e8  00000000  00000000  00164371  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00036b22  00000000  00000000  00169459  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002da82  00000000  00000000  0019ff7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0010ed99  00000000  00000000  001cd9fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000e928  00000000  00000000  002dc798  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f005 f933 	bl	d929c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f005 f953 	bl	d92e8 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e0a8 	.word	0x2003e0a8
   d404c:	000dc6d4 	.word	0x000dc6d4
   d4050:	2003e1a0 	.word	0x2003e1a0
   d4054:	2003e1a0 	.word	0x2003e1a0
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405e:	f004 f949 	bl	d82f4 <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000dc6d0 	.word	0x000dc6d0
   d4084:	000dc68c 	.word	0x000dc68c

000d4088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4088:	f000 b89e 	b.w	d41c8 <setup>

000d408c <module_user_loop>:
}

void module_user_loop() {
   d408c:	b508      	push	{r3, lr}
    loop();
   d408e:	f000 f907 	bl	d42a0 <loop>
    _post_loop();
}
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4096:	f004 b8ef 	b.w	d8278 <_post_loop>

000d409a <_Znwj>:
   d409a:	f001 bd27 	b.w	d5aec <malloc>

000d409e <_ZdlPv>:
   d409e:	f001 bd2d 	b.w	d5afc <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f001 bd2b 	b.w	d5afc <free>
	...

000d40a8 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a8:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40aa:	4a03      	ldr	r2, [pc, #12]	; (d40b8 <__cxa_pure_virtual+0x10>)
   d40ac:	2100      	movs	r1, #0
   d40ae:	200c      	movs	r0, #12
   d40b0:	f001 fc30 	bl	d5914 <panic_>
   d40b4:	e7fe      	b.n	d40b4 <__cxa_pure_virtual+0xc>
   d40b6:	bf00      	nop
   d40b8:	000d56f5 	.word	0x000d56f5

000d40bc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40bc:	7800      	ldrb	r0, [r0, #0]
   d40be:	fab0 f080 	clz	r0, r0
   d40c2:	0940      	lsrs	r0, r0, #5
   d40c4:	4770      	bx	lr

000d40c6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c6:	2301      	movs	r3, #1
   d40c8:	7003      	strb	r3, [r0, #0]
   d40ca:	4770      	bx	lr

000d40cc <_ZN5spark10LogHandler5writeEPKcj>:
    if (level >= filter_.level(category)) {
        write(data, size);
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
   d40cc:	4770      	bx	lr

000d40ce <_ZN5spark16StreamLogHandler5writeEPKcj>:
inline Print* spark::StreamLogHandler::stream() const {
    return stream_;
}

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
   d40ce:	6a00      	ldr	r0, [r0, #32]
   d40d0:	6803      	ldr	r3, [r0, #0]
   d40d2:	68db      	ldr	r3, [r3, #12]
   d40d4:	4718      	bx	r3
	...

000d40d8 <_Z16locationCallbackfff>:
void loop() {
	locator.loop();
  updateDisplay();
}

void locationCallback(float lat, float lon, float accuracy) {
   d40d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d40dc:	b08e      	sub	sp, #56	; 0x38
   d40de:	ed8d 1a07 	vstr	s2, [sp, #28]
   d40e2:	edcd 0a08 	vstr	s1, [sp, #32]
   d40e6:	ed8d 0a09 	vstr	s0, [sp, #36]	; 0x24
	Serial.printlnf("lat=%f lon=%f accuracy=%f", lat, lon, accuracy);
   d40ea:	f004 f881 	bl	d81f0 <_Z16_fetch_usbserialv>
    }

    template <typename... Args>
    inline size_t printlnf(const char* format, Args... args)
    {
        return this->printf_impl(true, format, args...);
   d40ee:	ed9d 0a09 	vldr	s0, [sp, #36]	; 0x24
   d40f2:	4682      	mov	sl, r0
   d40f4:	ee10 0a10 	vmov	r0, s0
   d40f8:	f004 fc38 	bl	d896c <__aeabi_f2d>
   d40fc:	eddd 0a08 	vldr	s1, [sp, #32]
   d4100:	4680      	mov	r8, r0
   d4102:	ee10 0a90 	vmov	r0, s1
   d4106:	4689      	mov	r9, r1
   d4108:	f004 fc30 	bl	d896c <__aeabi_f2d>
   d410c:	ed9d 1a07 	vldr	s2, [sp, #28]
   d4110:	4606      	mov	r6, r0
   d4112:	ee11 0a10 	vmov	r0, s2
   d4116:	460f      	mov	r7, r1
   d4118:	f004 fc28 	bl	d896c <__aeabi_f2d>
   d411c:	4604      	mov	r4, r0
   d411e:	460d      	mov	r5, r1
   d4120:	4a13      	ldr	r2, [pc, #76]	; (d4170 <_Z16locationCallbackfff+0x98>)
   d4122:	2101      	movs	r1, #1
   d4124:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d4128:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d412c:	e9cd 8900 	strd	r8, r9, [sp]
   d4130:	4650      	mov	r0, sl
	SeeedOled.clearDisplay();   // clears the screen and buffer

	// 10 characters fit at text size 2

	char buf[16];
	snprintf(buf, sizeof(buf), "%.6f", lat);
   d4132:	f8df a048 	ldr.w	sl, [pc, #72]	; d417c <_Z16locationCallbackfff+0xa4>
   d4136:	f003 fd06 	bl	d7b46 <_ZN5Print11printf_implEbPKcz>
  updateDisplay();
}

void locationCallback(float lat, float lon, float accuracy) {
	Serial.printlnf("lat=%f lon=%f accuracy=%f", lat, lon, accuracy);
	SeeedOled.clearDisplay();   // clears the screen and buffer
   d413a:	480e      	ldr	r0, [pc, #56]	; (d4174 <_Z16locationCallbackfff+0x9c>)
   d413c:	f001 fa1c 	bl	d5578 <_ZN9SeeedOLED12clearDisplayEv>

	// 10 characters fit at text size 2

	char buf[16];
	snprintf(buf, sizeof(buf), "%.6f", lat);
   d4140:	4652      	mov	r2, sl
   d4142:	e9cd 8900 	strd	r8, r9, [sp]
   d4146:	2110      	movs	r1, #16
   d4148:	a80a      	add	r0, sp, #40	; 0x28
   d414a:	f001 fcff 	bl	d5b4c <snprintf>
  //SeeedOled.putString(buf, sizeof(buf), "%.6f", lat);
	snprintf(buf, sizeof(buf), "%.6f", lon);
   d414e:	4652      	mov	r2, sl
   d4150:	e9cd 6700 	strd	r6, r7, [sp]
   d4154:	2110      	movs	r1, #16
   d4156:	a80a      	add	r0, sp, #40	; 0x28
   d4158:	f001 fcf8 	bl	d5b4c <snprintf>
  //SeeedOled.putString(buf, sizeof(buf), "%.6f", lon);
	snprintf(buf, sizeof(buf), "%.1f", accuracy);
   d415c:	e9cd 4500 	strd	r4, r5, [sp]
   d4160:	4a05      	ldr	r2, [pc, #20]	; (d4178 <_Z16locationCallbackfff+0xa0>)
   d4162:	2110      	movs	r1, #16
   d4164:	a80a      	add	r0, sp, #40	; 0x28
   d4166:	f001 fcf1 	bl	d5b4c <snprintf>
  //SeeedOled.putString(buf);
   d416a:	b00e      	add	sp, #56	; 0x38
   d416c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d4170:	000db81c 	.word	0x000db81c
   d4174:	2003e325 	.word	0x2003e325
   d4178:	000db83b 	.word	0x000db83b
   d417c:	000db836 	.word	0x000db836

000d4180 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   d4180:	4b0a      	ldr	r3, [pc, #40]	; (d41ac <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   d4182:	b510      	push	{r4, lr}
   d4184:	4604      	mov	r4, r0
   d4186:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   d4188:	f002 fc9c 	bl	d6ac4 <_ZN5spark10LogManager8instanceEv>
   d418c:	4621      	mov	r1, r4
   d418e:	f002 fe89 	bl	d6ea4 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   d4192:	f004 f82d 	bl	d81f0 <_Z16_fetch_usbserialv>
   d4196:	f004 f81f 	bl	d81d8 <_ZN9USBSerial3endEv>
    */
    LogHandler(LogLevel level, LogCategoryFilters filters);
    /*!
        \brief Destructor.
    */
    virtual ~LogHandler() = default;
   d419a:	4620      	mov	r0, r4
   d419c:	4b04      	ldr	r3, [pc, #16]	; (d41b0 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   d419e:	f840 3b04 	str.w	r3, [r0], #4
   d41a2:	f002 fd85 	bl	d6cb0 <_ZN5spark6detail9LogFilterD1Ev>
    }
   d41a6:	4620      	mov	r0, r4
   d41a8:	bd10      	pop	{r4, pc}
   d41aa:	bf00      	nop
   d41ac:	000db80c 	.word	0x000db80c
   d41b0:	000db7f4 	.word	0x000db7f4

000d41b4 <_ZN5spark16SerialLogHandlerD0Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   d41b4:	b510      	push	{r4, lr}
   d41b6:	4604      	mov	r4, r0
        LogManager::instance()->removeHandler(this);
        Serial.end();
    }
   d41b8:	f7ff ffe2 	bl	d4180 <_ZN5spark16SerialLogHandlerD1Ev>
   d41bc:	4620      	mov	r0, r4
   d41be:	2124      	movs	r1, #36	; 0x24
   d41c0:	f004 f909 	bl	d83d6 <_ZdlPvj>
   d41c4:	4620      	mov	r0, r4
   d41c6:	bd10      	pop	{r4, pc}

000d41c8 <setup>:

// SYSTEM_THREAD(ENABLED);

void locationCallback(float lat, float lon, float accuracy);

void setup() {
   d41c8:	b510      	push	{r4, lr}
 	  Serial.begin(9600);
   d41ca:	f004 f811 	bl	d81f0 <_Z16_fetch_usbserialv>
	  Wire.begin();
  	SeeedOled.init();
   d41ce:	4c18      	ldr	r4, [pc, #96]	; (d4230 <setup+0x68>)
// SYSTEM_THREAD(ENABLED);

void locationCallback(float lat, float lon, float accuracy);

void setup() {
 	  Serial.begin(9600);
   d41d0:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d41d4:	f003 fffc 	bl	d81d0 <_ZN9USBSerial5beginEl>
	  Wire.begin();
   d41d8:	f004 f8d2 	bl	d8380 <_Z19__fetch_global_Wirev>
   d41dc:	f002 f8ec 	bl	d63b8 <_ZN7TwoWire5beginEv>
  	SeeedOled.init();
   d41e0:	4620      	mov	r0, r4
   d41e2:	f001 f95d 	bl	d54a0 <_ZN9SeeedOLED4initEv>
 	  SeeedOled.clearDisplay();
   d41e6:	4620      	mov	r0, r4
   d41e8:	f001 f9c6 	bl	d5578 <_ZN9SeeedOLED12clearDisplayEv>
    SeeedOled.setNormalDisplay();
   d41ec:	4620      	mov	r0, r4
   d41ee:	f001 fa2a 	bl	d5646 <_ZN9SeeedOLED16setNormalDisplayEv>
    SeeedOled.setPageMode(); 
   d41f2:	4620      	mov	r0, r4
   d41f4:	f001 f969 	bl	d54ca <_ZN9SeeedOLED11setPageModeEv>
    SeeedOled.setTextXY(2, 0);
   d41f8:	2200      	movs	r2, #0
   d41fa:	4620      	mov	r0, r4
   d41fc:	2102      	movs	r1, #2
   d41fe:	f001 f971 	bl	d54e4 <_ZN9SeeedOLED9setTextXYEhh>
    SeeedOled.putString("GPS v2.1");
   d4202:	4620      	mov	r0, r4
    locator.withEventName("deviceLocator");
   d4204:	4c0b      	ldr	r4, [pc, #44]	; (d4234 <setup+0x6c>)
  	SeeedOled.init();
 	  SeeedOled.clearDisplay();
    SeeedOled.setNormalDisplay();
    SeeedOled.setPageMode(); 
    SeeedOled.setTextXY(2, 0);
    SeeedOled.putString("GPS v2.1");
   d4206:	490c      	ldr	r1, [pc, #48]	; (d4238 <setup+0x70>)
   d4208:	f001 f9d8 	bl	d55bc <_ZN9SeeedOLED9putStringEPKc>
    locator.withEventName("deviceLocator");
   d420c:	490b      	ldr	r1, [pc, #44]	; (d423c <setup+0x74>)
   d420e:	4620      	mov	r0, r4
   d4210:	f000 feb8 	bl	d4f84 <_ZN23GoogleMapsDeviceLocator13withEventNameEPKc>
	  locator.withSubscribe(locationCallback).withLocatePeriodic(60);
   d4214:	490a      	ldr	r1, [pc, #40]	; (d4240 <setup+0x78>)
   d4216:	4620      	mov	r0, r4
   d4218:	f001 f8d0 	bl	d53bc <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE>
   d421c:	213c      	movs	r1, #60	; 0x3c
   d421e:	f000 fea7 	bl	d4f70 <_ZN23GoogleMapsDeviceLocator18withLocatePeriodicEm>

    Time.zone(+7);
   d4222:	eeb1 0a0c 	vmov.f32	s0, #28	; 0x40e00000  7.0
}
   d4226:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    SeeedOled.setTextXY(2, 0);
    SeeedOled.putString("GPS v2.1");
    locator.withEventName("deviceLocator");
	  locator.withSubscribe(locationCallback).withLocatePeriodic(60);

    Time.zone(+7);
   d422a:	f003 be93 	b.w	d7f54 <_ZN9TimeClass4zoneEf>
   d422e:	bf00      	nop
   d4230:	2003e325 	.word	0x2003e325
   d4234:	2003e1c8 	.word	0x2003e1c8
   d4238:	000db840 	.word	0x000db840
   d423c:	000db849 	.word	0x000db849
   d4240:	000d40d9 	.word	0x000d40d9

000d4244 <_Z13updateDisplayv>:
}

void updateDisplay()
{
   d4244:	b570      	push	{r4, r5, r6, lr}
Time.now();    
   d4246:	f003 fec2 	bl	d7fce <_ZN9TimeClass3nowEv>
hour = Time.hourFormat12();
   d424a:	f003 fec7 	bl	d7fdc <_ZN9TimeClass12hourFormat12Ev>
   d424e:	4e10      	ldr	r6, [pc, #64]	; (d4290 <_Z13updateDisplayv+0x4c>)
minutes = Time.minute();
SeeedOled.setNormalDisplay();
   d4250:	4c10      	ldr	r4, [pc, #64]	; (d4294 <_Z13updateDisplayv+0x50>)
}

void updateDisplay()
{
Time.now();    
hour = Time.hourFormat12();
   d4252:	6030      	str	r0, [r6, #0]
minutes = Time.minute();
   d4254:	f003 feca 	bl	d7fec <_ZN9TimeClass6minuteEv>
   d4258:	4d0f      	ldr	r5, [pc, #60]	; (d4298 <_Z13updateDisplayv+0x54>)
   d425a:	6028      	str	r0, [r5, #0]
SeeedOled.setNormalDisplay();
   d425c:	4620      	mov	r0, r4
   d425e:	f001 f9f2 	bl	d5646 <_ZN9SeeedOLED16setNormalDisplayEv>
SeeedOled.setPageMode();
   d4262:	4620      	mov	r0, r4
   d4264:	f001 f931 	bl	d54ca <_ZN9SeeedOLED11setPageModeEv>
SeeedOled.setTextXY(4,5);
   d4268:	2205      	movs	r2, #5
   d426a:	4620      	mov	r0, r4
   d426c:	2104      	movs	r1, #4
   d426e:	f001 f939 	bl	d54e4 <_ZN9SeeedOLED9setTextXYEhh>
SeeedOled.putNumber(hour);
   d4272:	6831      	ldr	r1, [r6, #0]
   d4274:	4620      	mov	r0, r4
   d4276:	f001 f9ae 	bl	d55d6 <_ZN9SeeedOLED9putNumberEl>
SeeedOled.putString(":");
   d427a:	4620      	mov	r0, r4
   d427c:	4907      	ldr	r1, [pc, #28]	; (d429c <_Z13updateDisplayv+0x58>)
   d427e:	f001 f99d 	bl	d55bc <_ZN9SeeedOLED9putStringEPKc>
SeeedOled.putNumber(minutes);
   d4282:	6829      	ldr	r1, [r5, #0]
   d4284:	4620      	mov	r0, r4
}
   d4286:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
SeeedOled.setNormalDisplay();
SeeedOled.setPageMode();
SeeedOled.setTextXY(4,5);
SeeedOled.putNumber(hour);
SeeedOled.putString(":");
SeeedOled.putNumber(minutes);
   d428a:	f001 b9a4 	b.w	d55d6 <_ZN9SeeedOLED9putNumberEl>
   d428e:	bf00      	nop
   d4290:	2003e210 	.word	0x2003e210
   d4294:	2003e325 	.word	0x2003e325
   d4298:	2003e20c 	.word	0x2003e20c
   d429c:	000db9c4 	.word	0x000db9c4

000d42a0 <loop>:
}

void loop() {
   d42a0:	b508      	push	{r3, lr}
	locator.loop();
   d42a2:	4803      	ldr	r0, [pc, #12]	; (d42b0 <loop+0x10>)
   d42a4:	f001 f83c 	bl	d5320 <_ZN23GoogleMapsDeviceLocator4loopEv>
  updateDisplay();
}
   d42a8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
SeeedOled.putNumber(minutes);
}

void loop() {
	locator.loop();
  updateDisplay();
   d42ac:	f7ff bfca 	b.w	d4244 <_Z13updateDisplayv>
   d42b0:	2003e1c8 	.word	0x2003e1c8

000d42b4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d42b4:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d42b6:	6804      	ldr	r4, [r0, #0]
   d42b8:	6843      	ldr	r3, [r0, #4]
   d42ba:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d42bc:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d42be:	fb06 4603 	mla	r6, r6, r3, r4
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d42c2:	42a6      	cmp	r6, r4
   d42c4:	d004      	beq.n	d42d0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
    static int nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found);
};

} // namespace spark::detail

class LogCategoryFilter {
   d42c6:	4620      	mov	r0, r4
   d42c8:	f003 fc9c 	bl	d7c04 <_ZN6StringD1Ev>
   d42cc:	3414      	adds	r4, #20
   d42ce:	e7f8      	b.n	d42c2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d42d0:	6828      	ldr	r0, [r5, #0]
   d42d2:	f001 fc13 	bl	d5afc <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d42d6:	4628      	mov	r0, r5
   d42d8:	bd70      	pop	{r4, r5, r6, pc}

000d42da <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d42da:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d42dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d42de:	4606      	mov	r6, r0
   d42e0:	460c      	mov	r4, r1
   d42e2:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d42e4:	d916      	bls.n	d4314 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   d42e6:	4290      	cmp	r0, r2
   d42e8:	d215      	bcs.n	d4316 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            // Move elements in reverse order
            --p;
            --end;
   d42ea:	f1a2 0514 	sub.w	r5, r2, #20
            dest += end - p - 1;
   d42ee:	1a6c      	subs	r4, r5, r1
   d42f0:	f1a1 0714 	sub.w	r7, r1, #20
   d42f4:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d42f6:	42af      	cmp	r7, r5
   d42f8:	d01c      	beq.n	d4334 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   d42fa:	b12c      	cbz	r4, d4308 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   d42fc:	4629      	mov	r1, r5
   d42fe:	4620      	mov	r0, r4
   d4300:	f003 fc70 	bl	d7be4 <_ZN6StringC1EOS_>
   d4304:	7c2b      	ldrb	r3, [r5, #16]
   d4306:	7423      	strb	r3, [r4, #16]
   d4308:	4628      	mov	r0, r5
   d430a:	f003 fc7b 	bl	d7c04 <_ZN6StringD1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d430e:	3d14      	subs	r5, #20
   d4310:	3c14      	subs	r4, #20
   d4312:	e7f0      	b.n	d42f6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d4314:	d00e      	beq.n	d4334 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   d4316:	42ac      	cmp	r4, r5
   d4318:	d00c      	beq.n	d4334 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   d431a:	b12e      	cbz	r6, d4328 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   d431c:	4621      	mov	r1, r4
   d431e:	4630      	mov	r0, r6
   d4320:	f003 fc60 	bl	d7be4 <_ZN6StringC1EOS_>
   d4324:	7c23      	ldrb	r3, [r4, #16]
   d4326:	7433      	strb	r3, [r6, #16]
   d4328:	4620      	mov	r0, r4
   d432a:	f003 fc6b 	bl	d7c04 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d432e:	3414      	adds	r4, #20
   d4330:	3614      	adds	r6, #20
   d4332:	e7f0      	b.n	d4316 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
   d4334:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4336 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d4336:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d433a:	2300      	movs	r3, #0
   d433c:	6003      	str	r3, [r0, #0]
   d433e:	6043      	str	r3, [r0, #4]
   d4340:	6083      	str	r3, [r0, #8]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d4342:	684e      	ldr	r6, [r1, #4]
   d4344:	429e      	cmp	r6, r3
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d4346:	4604      	mov	r4, r0
   d4348:	460f      	mov	r7, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d434a:	dd24      	ble.n	d4396 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d434c:	f04f 0814 	mov.w	r8, #20
   d4350:	fb08 f006 	mul.w	r0, r8, r6
   d4354:	f001 fbca 	bl	d5aec <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d4358:	4605      	mov	r5, r0
   d435a:	b1e0      	cbz	r0, d4396 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>
                return false;
            }
            move(d, data_, data_ + size_);
   d435c:	e894 0006 	ldmia.w	r4, {r1, r2}
   d4360:	fb08 1202 	mla	r2, r8, r2, r1
   d4364:	f7ff ffb9 	bl	d42da <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d4368:	6820      	ldr	r0, [r4, #0]
   d436a:	f001 fbc7 	bl	d5afc <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d436e:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d4370:	60a6      	str	r6, [r4, #8]
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
    if (vector.size_ > 0 && realloc(vector.size_)) {
        copy(data_, vector.data_, vector.data_ + vector.size_);
   d4372:	683e      	ldr	r6, [r7, #0]
   d4374:	687b      	ldr	r3, [r7, #4]
   d4376:	fb08 6803 	mla	r8, r8, r3, r6
        }
    }

    template<typename IteratorT>
    static void copy(IteratorT dest, IteratorT it, IteratorT end) {
        for (; it != end; ++it, ++dest) {
   d437a:	4546      	cmp	r6, r8
   d437c:	d009      	beq.n	d4392 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5c>
            new(dest) T(*it);
   d437e:	b12d      	cbz	r5, d438c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x56>
   d4380:	4631      	mov	r1, r6
   d4382:	4628      	mov	r0, r5
   d4384:	f003 fcc4 	bl	d7d10 <_ZN6StringC1ERKS_>
   d4388:	7c33      	ldrb	r3, [r6, #16]
   d438a:	742b      	strb	r3, [r5, #16]
        }
    }

    template<typename IteratorT>
    static void copy(IteratorT dest, IteratorT it, IteratorT end) {
        for (; it != end; ++it, ++dest) {
   d438c:	3614      	adds	r6, #20
   d438e:	3514      	adds	r5, #20
   d4390:	e7f3      	b.n	d437a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
    if (vector.size_ > 0 && realloc(vector.size_)) {
        copy(data_, vector.data_, vector.data_ + vector.size_);
        size_ = vector.size_;
   d4392:	687b      	ldr	r3, [r7, #4]
   d4394:	6063      	str	r3, [r4, #4]
    }
}
   d4396:	4620      	mov	r0, r4
   d4398:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d439c <_GLOBAL__sub_I_logHandler>:
  //SeeedOled.putString(buf, sizeof(buf), "%.6f", lat);
	snprintf(buf, sizeof(buf), "%.6f", lon);
  //SeeedOled.putString(buf, sizeof(buf), "%.6f", lon);
	snprintf(buf, sizeof(buf), "%.1f", accuracy);
  //SeeedOled.putString(buf);
   d439c:	b570      	push	{r4, r5, r6, lr}
   d439e:	b08c      	sub	sp, #48	; 0x30

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d43a0:	f001 f9c8 	bl	d5734 <HAL_Pin_Map>
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d43a4:	2300      	movs	r3, #0
   d43a6:	9300      	str	r3, [sp, #0]
   d43a8:	9301      	str	r3, [sp, #4]
   d43aa:	9302      	str	r3, [sp, #8]
namespace spark {

class SerialLogHandler: public StreamLogHandler {
public:
    explicit SerialLogHandler(LogLevel level = LOG_LEVEL_INFO, LogCategoryFilters filters = {}) :
            StreamLogHandler(Serial, level, filters) {
   d43ac:	f003 ff20 	bl	d81f0 <_Z16_fetch_usbserialv>
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
        filter_(level, filters) {
   d43b0:	4c21      	ldr	r4, [pc, #132]	; (d4438 <_GLOBAL__sub_I_logHandler+0x9c>)
   d43b2:	4606      	mov	r6, r0
   d43b4:	4669      	mov	r1, sp
   d43b6:	a803      	add	r0, sp, #12
   d43b8:	f7ff ffbd 	bl	d4336 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d43bc:	4625      	mov	r5, r4
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
   d43be:	a903      	add	r1, sp, #12
   d43c0:	a806      	add	r0, sp, #24
   d43c2:	f7ff ffb8 	bl	d4336 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
        filter_(level, filters) {
   d43c6:	4b1d      	ldr	r3, [pc, #116]	; (d443c <_GLOBAL__sub_I_logHandler+0xa0>)
   d43c8:	f845 3b04 	str.w	r3, [r5], #4
   d43cc:	a906      	add	r1, sp, #24
   d43ce:	a809      	add	r0, sp, #36	; 0x24
   d43d0:	f7ff ffb1 	bl	d4336 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d43d4:	aa09      	add	r2, sp, #36	; 0x24
   d43d6:	2101      	movs	r1, #1
   d43d8:	4628      	mov	r0, r5
   d43da:	f002 feca 	bl	d7172 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d43de:	a809      	add	r0, sp, #36	; 0x24
   d43e0:	f7ff ff68 	bl	d42b4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
   d43e4:	a806      	add	r0, sp, #24
   d43e6:	f7ff ff65 	bl	d42b4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d43ea:	4b15      	ldr	r3, [pc, #84]	; (d4440 <_GLOBAL__sub_I_logHandler+0xa4>)
   d43ec:	6023      	str	r3, [r4, #0]
   d43ee:	6226      	str	r6, [r4, #32]
   d43f0:	a803      	add	r0, sp, #12
   d43f2:	f7ff ff5f 	bl	d42b4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d43f6:	4b13      	ldr	r3, [pc, #76]	; (d4444 <_GLOBAL__sub_I_logHandler+0xa8>)
   d43f8:	6023      	str	r3, [r4, #0]
        Serial.begin();
   d43fa:	f003 fef9 	bl	d81f0 <_Z16_fetch_usbserialv>
   d43fe:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4402:	f003 fee5 	bl	d81d0 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   d4406:	f002 fb5d 	bl	d6ac4 <_ZN5spark10LogManager8instanceEv>
   d440a:	4621      	mov	r1, r4
   d440c:	f002 fe44 	bl	d7098 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
#include "SeeedOLED.h"

 

// Uncomment to show debugging logs
SerialLogHandler logHandler(LOG_LEVEL_TRACE);
   d4410:	4d0d      	ldr	r5, [pc, #52]	; (d4448 <_GLOBAL__sub_I_logHandler+0xac>)
   d4412:	4668      	mov	r0, sp
   d4414:	f7ff ff4e 	bl	d42b4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d4418:	4620      	mov	r0, r4
GoogleMapsDeviceLocator locator;
   d441a:	4c0c      	ldr	r4, [pc, #48]	; (d444c <_GLOBAL__sub_I_logHandler+0xb0>)
#include "SeeedOLED.h"

 

// Uncomment to show debugging logs
SerialLogHandler logHandler(LOG_LEVEL_TRACE);
   d441c:	490c      	ldr	r1, [pc, #48]	; (d4450 <_GLOBAL__sub_I_logHandler+0xb4>)
   d441e:	462a      	mov	r2, r5
   d4420:	f003 ffd4 	bl	d83cc <__aeabi_atexit>
GoogleMapsDeviceLocator locator;
   d4424:	4620      	mov	r0, r4
   d4426:	f000 fd7d 	bl	d4f24 <_ZN23GoogleMapsDeviceLocatorC1Ev>
   d442a:	462a      	mov	r2, r5
   d442c:	4909      	ldr	r1, [pc, #36]	; (d4454 <_GLOBAL__sub_I_logHandler+0xb8>)
   d442e:	4620      	mov	r0, r4
   d4430:	f003 ffcc 	bl	d83cc <__aeabi_atexit>
  //SeeedOled.putString(buf, sizeof(buf), "%.6f", lat);
	snprintf(buf, sizeof(buf), "%.6f", lon);
  //SeeedOled.putString(buf, sizeof(buf), "%.6f", lon);
	snprintf(buf, sizeof(buf), "%.1f", accuracy);
  //SeeedOled.putString(buf);
   d4434:	b00c      	add	sp, #48	; 0x30
   d4436:	bd70      	pop	{r4, r5, r6, pc}
   d4438:	2003e1a4 	.word	0x2003e1a4
   d443c:	000db7f4 	.word	0x000db7f4
   d4440:	000dc1f8 	.word	0x000dc1f8
   d4444:	000db80c 	.word	0x000db80c
   d4448:	2003e1a0 	.word	0x2003e1a0
   d444c:	2003e1c8 	.word	0x2003e1c8
   d4450:	000d4181 	.word	0x000d4181
   d4454:	000d4da5 	.word	0x000d4da5

000d4458 <_ZN19CellularHelperClass16responseCallbackEiPKciPv>:
   d4458:	b430      	push	{r4, r5}
   d445a:	461c      	mov	r4, r3
   d445c:	681b      	ldr	r3, [r3, #0]
   d445e:	681d      	ldr	r5, [r3, #0]
   d4460:	4613      	mov	r3, r2
   d4462:	46ac      	mov	ip, r5
   d4464:	460a      	mov	r2, r1
   d4466:	4601      	mov	r1, r0
   d4468:	4620      	mov	r0, r4
   d446a:	bc30      	pop	{r4, r5}
   d446c:	4760      	bx	ip

000d446e <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   d446e:	b40e      	push	{r1, r2, r3}
   d4470:	b500      	push	{lr}
   d4472:	b08c      	sub	sp, #48	; 0x30
   d4474:	aa0d      	add	r2, sp, #52	; 0x34
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
   d4476:	2320      	movs	r3, #32
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   d4478:	f852 1b04 	ldr.w	r1, [r2], #4
    va_list args;
    va_start(args, fmt);
   d447c:	9203      	str	r2, [sp, #12]

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d447e:	e88d 0006 	stmia.w	sp, {r1, r2}
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
   d4482:	9304      	str	r3, [sp, #16]
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d4484:	6801      	ldr	r1, [r0, #0]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d4486:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d4488:	aa04      	add	r2, sp, #16
   d448a:	201e      	movs	r0, #30
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d448c:	9305      	str	r3, [sp, #20]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d448e:	f001 fa49 	bl	d5924 <log_message_v>
inline void spark::Logger::info(const char *fmt, ...) const {
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_INFO, fmt, args);
    va_end(args);
}
   d4492:	b00c      	add	sp, #48	; 0x30
   d4494:	f85d eb04 	ldr.w	lr, [sp], #4
   d4498:	b003      	add	sp, #12
   d449a:	4770      	bx	lr

000d449c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci>:
   d449c:	b570      	push	{r4, r5, r6, lr}
   d449e:	b08c      	sub	sp, #48	; 0x30
   d44a0:	460c      	mov	r4, r1
   d44a2:	a804      	add	r0, sp, #16
   d44a4:	494b      	ldr	r1, [pc, #300]	; (d45d4 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x138>)
   d44a6:	4615      	mov	r5, r2
   d44a8:	461e      	mov	r6, r3
   d44aa:	f003 fbf2 	bl	d7c92 <_ZN6StringC1EPK19__FlashStringHelper>
   d44ae:	f5b4 1f10 	cmp.w	r4, #2359296	; 0x240000
   d44b2:	d035      	beq.n	d4520 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x84>
   d44b4:	dc13      	bgt.n	d44de <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x42>
   d44b6:	f5b4 1f90 	cmp.w	r4, #1179648	; 0x120000
   d44ba:	d028      	beq.n	d450e <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x72>
   d44bc:	dc05      	bgt.n	d44ca <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x2e>
   d44be:	b324      	cbz	r4, d450a <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x6e>
   d44c0:	f5b4 1f88 	cmp.w	r4, #1114112	; 0x110000
   d44c4:	d136      	bne.n	d4534 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x98>
   d44c6:	4944      	ldr	r1, [pc, #272]	; (d45d8 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x13c>)
   d44c8:	e022      	b.n	d4510 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x74>
   d44ca:	f5b4 1f08 	cmp.w	r4, #2228224	; 0x220000
   d44ce:	d023      	beq.n	d4518 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x7c>
   d44d0:	f5b4 1f0c 	cmp.w	r4, #2293760	; 0x230000
   d44d4:	d022      	beq.n	d451c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x80>
   d44d6:	f5b4 1f04 	cmp.w	r4, #2162688	; 0x210000
   d44da:	d12b      	bne.n	d4534 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x98>
   d44dc:	e017      	b.n	d450e <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x72>
   d44de:	f5b4 1f40 	cmp.w	r4, #3145728	; 0x300000
   d44e2:	d021      	beq.n	d4528 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x8c>
   d44e4:	dc07      	bgt.n	d44f6 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x5a>
   d44e6:	f5b4 1f14 	cmp.w	r4, #2424832	; 0x250000
   d44ea:	d01b      	beq.n	d4524 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x88>
   d44ec:	f5b4 1f18 	cmp.w	r4, #2490368	; 0x260000
   d44f0:	d120      	bne.n	d4534 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x98>
   d44f2:	493a      	ldr	r1, [pc, #232]	; (d45dc <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x140>)
   d44f4:	e00c      	b.n	d4510 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x74>
   d44f6:	f5b4 0fa0 	cmp.w	r4, #5242880	; 0x500000
   d44fa:	d017      	beq.n	d452c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x90>
   d44fc:	f5b4 0fc0 	cmp.w	r4, #6291456	; 0x600000
   d4500:	d016      	beq.n	d4530 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x94>
   d4502:	f5b4 0f80 	cmp.w	r4, #4194304	; 0x400000
   d4506:	d115      	bne.n	d4534 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x98>
   d4508:	e010      	b.n	d452c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x90>
   d450a:	4935      	ldr	r1, [pc, #212]	; (d45e0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x144>)
   d450c:	e000      	b.n	d4510 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x74>
   d450e:	4935      	ldr	r1, [pc, #212]	; (d45e4 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x148>)
   d4510:	a804      	add	r0, sp, #16
   d4512:	f003 fc10 	bl	d7d36 <_ZN6StringaSEPKc>
   d4516:	e019      	b.n	d454c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xb0>
   d4518:	4933      	ldr	r1, [pc, #204]	; (d45e8 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x14c>)
   d451a:	e7f9      	b.n	d4510 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x74>
   d451c:	4933      	ldr	r1, [pc, #204]	; (d45ec <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x150>)
   d451e:	e7f7      	b.n	d4510 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x74>
   d4520:	4933      	ldr	r1, [pc, #204]	; (d45f0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x154>)
   d4522:	e7f5      	b.n	d4510 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x74>
   d4524:	4933      	ldr	r1, [pc, #204]	; (d45f4 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x158>)
   d4526:	e7f3      	b.n	d4510 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x74>
   d4528:	4933      	ldr	r1, [pc, #204]	; (d45f8 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x15c>)
   d452a:	e7f1      	b.n	d4510 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x74>
   d452c:	4933      	ldr	r1, [pc, #204]	; (d45fc <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x160>)
   d452e:	e7ef      	b.n	d4510 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x74>
   d4530:	4933      	ldr	r1, [pc, #204]	; (d4600 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x164>)
   d4532:	e7ed      	b.n	d4510 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x74>
   d4534:	4622      	mov	r2, r4
   d4536:	4933      	ldr	r1, [pc, #204]	; (d4604 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x168>)
   d4538:	a808      	add	r0, sp, #32
   d453a:	f003 fc6b 	bl	d7e14 <_ZN6String6formatEPKcz>
   d453e:	a908      	add	r1, sp, #32
   d4540:	a804      	add	r0, sp, #16
   d4542:	f003 fbf0 	bl	d7d26 <_ZN6StringaSEOS_>
   d4546:	a808      	add	r0, sp, #32
   d4548:	f003 fb5c 	bl	d7c04 <_ZN6StringD1Ev>
   d454c:	4633      	mov	r3, r6
   d454e:	9a04      	ldr	r2, [sp, #16]
   d4550:	492d      	ldr	r1, [pc, #180]	; (d4608 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x16c>)
   d4552:	482e      	ldr	r0, [pc, #184]	; (d460c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x170>)
   d4554:	f7ff ff8b 	bl	d446e <_ZNK5spark6Logger4infoEPKcz>
   d4558:	491e      	ldr	r1, [pc, #120]	; (d45d4 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x138>)
   d455a:	a808      	add	r0, sp, #32
   d455c:	f003 fb99 	bl	d7c92 <_ZN6StringC1EPK19__FlashStringHelper>
   d4560:	462c      	mov	r4, r5
   d4562:	1b63      	subs	r3, r4, r5
   d4564:	429e      	cmp	r6, r3
   d4566:	dd27      	ble.n	d45b8 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x11c>
   d4568:	f814 3b01 	ldrb.w	r3, [r4], #1
   d456c:	2b0a      	cmp	r3, #10
   d456e:	d10c      	bne.n	d458a <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xee>
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
   d4570:	4927      	ldr	r1, [pc, #156]	; (d4610 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x174>)
   d4572:	a808      	add	r0, sp, #32
   d4574:	f003 fc07 	bl	d7d86 <_ZN6String6concatEPKc>
   d4578:	9908      	ldr	r1, [sp, #32]
   d457a:	4824      	ldr	r0, [pc, #144]	; (d460c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x170>)
   d457c:	f7ff ff77 	bl	d446e <_ZNK5spark6Logger4infoEPKcz>
   d4580:	4914      	ldr	r1, [pc, #80]	; (d45d4 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x138>)
   d4582:	a808      	add	r0, sp, #32
   d4584:	f003 fbd7 	bl	d7d36 <_ZN6StringaSEPKc>
   d4588:	e7eb      	b.n	d4562 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xc6>
   d458a:	2b0d      	cmp	r3, #13
   d458c:	d101      	bne.n	d4592 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xf6>
   d458e:	4921      	ldr	r1, [pc, #132]	; (d4614 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x178>)
   d4590:	e009      	b.n	d45a6 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x10a>
   d4592:	f1a3 0220 	sub.w	r2, r3, #32
   d4596:	2a5e      	cmp	r2, #94	; 0x5e
   d4598:	d909      	bls.n	d45ae <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x112>
   d459a:	210a      	movs	r1, #10
   d459c:	4a1e      	ldr	r2, [pc, #120]	; (d4618 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x17c>)
   d459e:	a801      	add	r0, sp, #4
   d45a0:	f001 fad4 	bl	d5b4c <snprintf>
   d45a4:	a901      	add	r1, sp, #4
   d45a6:	a808      	add	r0, sp, #32
   d45a8:	f003 fbed 	bl	d7d86 <_ZN6String6concatEPKc>
   d45ac:	e7d9      	b.n	d4562 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xc6>
   d45ae:	4619      	mov	r1, r3
   d45b0:	a808      	add	r0, sp, #32
   d45b2:	f003 fbf7 	bl	d7da4 <_ZN6String6concatEc>
   d45b6:	e7d4      	b.n	d4562 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xc6>
   d45b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d45ba:	b11b      	cbz	r3, d45c4 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x128>
   d45bc:	9908      	ldr	r1, [sp, #32]
   d45be:	4813      	ldr	r0, [pc, #76]	; (d460c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x170>)
   d45c0:	f7ff ff55 	bl	d446e <_ZNK5spark6Logger4infoEPKcz>
   d45c4:	a808      	add	r0, sp, #32
   d45c6:	f003 fb1d 	bl	d7c04 <_ZN6StringD1Ev>
   d45ca:	a804      	add	r0, sp, #16
   d45cc:	f003 fb1a 	bl	d7c04 <_ZN6StringD1Ev>
   d45d0:	b00c      	add	sp, #48	; 0x30
   d45d2:	bd70      	pop	{r4, r5, r6, pc}
   d45d4:	000dbc38 	.word	0x000dbc38
   d45d8:	000db871 	.word	0x000db871
   d45dc:	000db8ba 	.word	0x000db8ba
   d45e0:	000db864 	.word	0x000db864
   d45e4:	000db879 	.word	0x000db879
   d45e8:	000db884 	.word	0x000db884
   d45ec:	000db891 	.word	0x000db891
   d45f0:	000db8a0 	.word	0x000db8a0
   d45f4:	000db8b0 	.word	0x000db8b0
   d45f8:	000db8c8 	.word	0x000db8c8
   d45fc:	000db8d4 	.word	0x000db8d4
   d4600:	000db8de 	.word	0x000db8de
   d4604:	000db8eb 	.word	0x000db8eb
   d4608:	000db8f5 	.word	0x000db8f5
   d460c:	2003e398 	.word	0x2003e398
   d4610:	000db916 	.word	0x000db916
   d4614:	000db919 	.word	0x000db919
   d4618:	000db91c 	.word	0x000db91c

000d461c <_ZNK32CellularHelperPlusStringResponse19getDoubleQuotedPartEb>:
   d461c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d4620:	460f      	mov	r7, r1
   d4622:	4606      	mov	r6, r0
   d4624:	4914      	ldr	r1, [pc, #80]	; (d4678 <_ZNK32CellularHelperPlusStringResponse19getDoubleQuotedPartEb+0x5c>)
   d4626:	4690      	mov	r8, r2
   d4628:	f003 fb33 	bl	d7c92 <_ZN6StringC1EPK19__FlashStringHelper>
   d462c:	6a79      	ldr	r1, [r7, #36]	; 0x24
   d462e:	4630      	mov	r0, r6
   d4630:	f003 fb06 	bl	d7c40 <_ZN6String7reserveEj>
   d4634:	2500      	movs	r5, #0
   d4636:	462c      	mov	r4, r5
   d4638:	f107 091c 	add.w	r9, r7, #28
   d463c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   d463e:	429d      	cmp	r5, r3
   d4640:	d216      	bcs.n	d4670 <_ZNK32CellularHelperPlusStringResponse19getDoubleQuotedPartEb+0x54>
   d4642:	4629      	mov	r1, r5
   d4644:	4648      	mov	r0, r9
   d4646:	f003 fbe2 	bl	d7e0e <_ZNK6String6charAtEj>
   d464a:	2822      	cmp	r0, #34	; 0x22
   d464c:	4601      	mov	r1, r0
   d464e:	d107      	bne.n	d4660 <_ZNK32CellularHelperPlusStringResponse19getDoubleQuotedPartEb+0x44>
   d4650:	f084 0301 	eor.w	r3, r4, #1
   d4654:	b2db      	uxtb	r3, r3
   d4656:	b144      	cbz	r4, d466a <_ZNK32CellularHelperPlusStringResponse19getDoubleQuotedPartEb+0x4e>
   d4658:	f1b8 0f00 	cmp.w	r8, #0
   d465c:	d005      	beq.n	d466a <_ZNK32CellularHelperPlusStringResponse19getDoubleQuotedPartEb+0x4e>
   d465e:	e007      	b.n	d4670 <_ZNK32CellularHelperPlusStringResponse19getDoubleQuotedPartEb+0x54>
   d4660:	b114      	cbz	r4, d4668 <_ZNK32CellularHelperPlusStringResponse19getDoubleQuotedPartEb+0x4c>
   d4662:	4630      	mov	r0, r6
   d4664:	f003 fb9e 	bl	d7da4 <_ZN6String6concatEc>
   d4668:	4623      	mov	r3, r4
   d466a:	3501      	adds	r5, #1
   d466c:	461c      	mov	r4, r3
   d466e:	e7e5      	b.n	d463c <_ZNK32CellularHelperPlusStringResponse19getDoubleQuotedPartEb+0x20>
   d4670:	4630      	mov	r0, r6
   d4672:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d4676:	bf00      	nop
   d4678:	000dbc38 	.word	0x000dbc38

000d467c <_ZN32CellularHelperPlusStringResponseC1Ev>:
   d467c:	b538      	push	{r3, r4, r5, lr}
   d467e:	f06f 0302 	mvn.w	r3, #2
   d4682:	6043      	str	r3, [r0, #4]
   d4684:	4d08      	ldr	r5, [pc, #32]	; (d46a8 <_ZN32CellularHelperPlusStringResponseC1Ev+0x2c>)
   d4686:	2300      	movs	r3, #0
   d4688:	7203      	strb	r3, [r0, #8]
   d468a:	4b08      	ldr	r3, [pc, #32]	; (d46ac <_ZN32CellularHelperPlusStringResponseC1Ev+0x30>)
   d468c:	4604      	mov	r4, r0
   d468e:	4629      	mov	r1, r5
   d4690:	f840 3b0c 	str.w	r3, [r0], #12
   d4694:	f003 fafd 	bl	d7c92 <_ZN6StringC1EPK19__FlashStringHelper>
   d4698:	4629      	mov	r1, r5
   d469a:	f104 001c 	add.w	r0, r4, #28
   d469e:	f003 faf8 	bl	d7c92 <_ZN6StringC1EPK19__FlashStringHelper>
   d46a2:	4620      	mov	r0, r4
   d46a4:	bd38      	pop	{r3, r4, r5, pc}
   d46a6:	bf00      	nop
   d46a8:	000dbc38 	.word	0x000dbc38
   d46ac:	000dbc60 	.word	0x000dbc60

000d46b0 <_ZN32CellularHelperPlusStringResponseD1Ev>:
   d46b0:	b510      	push	{r4, lr}
   d46b2:	4b06      	ldr	r3, [pc, #24]	; (d46cc <_ZN32CellularHelperPlusStringResponseD1Ev+0x1c>)
   d46b4:	4604      	mov	r4, r0
   d46b6:	f840 3b1c 	str.w	r3, [r0], #28
   d46ba:	f003 faa3 	bl	d7c04 <_ZN6StringD1Ev>
   d46be:	f104 000c 	add.w	r0, r4, #12
   d46c2:	f003 fa9f 	bl	d7c04 <_ZN6StringD1Ev>
   d46c6:	4620      	mov	r0, r4
   d46c8:	bd10      	pop	{r4, pc}
   d46ca:	bf00      	nop
   d46cc:	000dbc60 	.word	0x000dbc60

000d46d0 <_ZN33CellularHelperEnvironmentResponseC1EP33CellularHelperEnvironmentCellDataj>:
   d46d0:	b570      	push	{r4, r5, r6, lr}
   d46d2:	4604      	mov	r4, r0
   d46d4:	4615      	mov	r5, r2
   d46d6:	460e      	mov	r6, r1
   d46d8:	f7ff ffd0 	bl	d467c <_ZN32CellularHelperPlusStringResponseC1Ev>
   d46dc:	4b08      	ldr	r3, [pc, #32]	; (d4700 <_ZN33CellularHelperEnvironmentResponseC1EP33CellularHelperEnvironmentCellDataj+0x30>)
   d46de:	6023      	str	r3, [r4, #0]
   d46e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d46e4:	62e3      	str	r3, [r4, #44]	; 0x2c
   d46e6:	23ff      	movs	r3, #255	; 0xff
   d46e8:	6323      	str	r3, [r4, #48]	; 0x30
   d46ea:	2200      	movs	r2, #0
   d46ec:	6563      	str	r3, [r4, #84]	; 0x54
   d46ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d46f2:	f884 2048 	strb.w	r2, [r4, #72]	; 0x48
   d46f6:	65a6      	str	r6, [r4, #88]	; 0x58
   d46f8:	65e5      	str	r5, [r4, #92]	; 0x5c
   d46fa:	6623      	str	r3, [r4, #96]	; 0x60
   d46fc:	4620      	mov	r0, r4
   d46fe:	bd70      	pop	{r4, r5, r6, pc}
   d4700:	000dbc54 	.word	0x000dbc54

000d4704 <_ZNK33CellularHelperEnvironmentCellData7isValidEb>:
   d4704:	6803      	ldr	r3, [r0, #0]
   d4706:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   d470a:	da0c      	bge.n	d4726 <_ZNK33CellularHelperEnvironmentCellData7isValidEb+0x22>
   d470c:	b969      	cbnz	r1, d472a <_ZNK33CellularHelperEnvironmentCellData7isValidEb+0x26>
   d470e:	7f03      	ldrb	r3, [r0, #28]
   d4710:	68c0      	ldr	r0, [r0, #12]
   d4712:	b10b      	cbz	r3, d4718 <_ZNK33CellularHelperEnvironmentCellData7isValidEb+0x14>
   d4714:	4b06      	ldr	r3, [pc, #24]	; (d4730 <_ZNK33CellularHelperEnvironmentCellData7isValidEb+0x2c>)
   d4716:	e001      	b.n	d471c <_ZNK33CellularHelperEnvironmentCellData7isValidEb+0x18>
   d4718:	f64f 73fe 	movw	r3, #65534	; 0xfffe
   d471c:	4298      	cmp	r0, r3
   d471e:	bfcc      	ite	gt
   d4720:	2000      	movgt	r0, #0
   d4722:	2001      	movle	r0, #1
   d4724:	4770      	bx	lr
   d4726:	2000      	movs	r0, #0
   d4728:	4770      	bx	lr
   d472a:	2001      	movs	r0, #1
   d472c:	4770      	bx	lr
   d472e:	bf00      	nop
   d4730:	0ffffffe 	.word	0x0ffffffe

000d4734 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_>:
   d4734:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4736:	4605      	mov	r5, r0
   d4738:	b085      	sub	sp, #20
   d473a:	4608      	mov	r0, r1
   d473c:	460f      	mov	r7, r1
   d473e:	4614      	mov	r4, r2
   d4740:	f004 fe47 	bl	d93d2 <strlen>
   d4744:	280f      	cmp	r0, #15
   d4746:	d801      	bhi.n	d474c <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x18>
   d4748:	2600      	movs	r6, #0
   d474a:	e003      	b.n	d4754 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x20>
   d474c:	4623      	mov	r3, r4
   d474e:	463a      	mov	r2, r7
   d4750:	4959      	ldr	r1, [pc, #356]	; (d48b8 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x184>)
   d4752:	e0ab      	b.n	d48ac <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x178>
   d4754:	5db8      	ldrb	r0, [r7, r6]
   d4756:	b128      	cbz	r0, d4764 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x30>
   d4758:	f005 fe04 	bl	da364 <toupper>
   d475c:	f80d 0006 	strb.w	r0, [sp, r6]
   d4760:	3601      	adds	r6, #1
   d4762:	e7f7      	b.n	d4754 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x20>
   d4764:	ab04      	add	r3, sp, #16
   d4766:	441e      	add	r6, r3
   d4768:	4954      	ldr	r1, [pc, #336]	; (d48bc <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x188>)
   d476a:	f806 0c10 	strb.w	r0, [r6, #-16]
   d476e:	4668      	mov	r0, sp
   d4770:	f004 fe02 	bl	d9378 <strcmp>
   d4774:	b940      	cbnz	r0, d4788 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x54>
   d4776:	4952      	ldr	r1, [pc, #328]	; (d48c0 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x18c>)
   d4778:	4620      	mov	r0, r4
   d477a:	f004 fe6d 	bl	d9458 <strstr>
   d477e:	3000      	adds	r0, #0
   d4780:	bf18      	it	ne
   d4782:	2001      	movne	r0, #1
   d4784:	7728      	strb	r0, [r5, #28]
   d4786:	e094      	b.n	d48b2 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x17e>
   d4788:	494e      	ldr	r1, [pc, #312]	; (d48c4 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x190>)
   d478a:	4668      	mov	r0, sp
   d478c:	f004 fdf4 	bl	d9378 <strcmp>
   d4790:	b920      	cbnz	r0, d479c <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x68>
   d4792:	4620      	mov	r0, r4
   d4794:	f004 fc73 	bl	d907e <atoi>
   d4798:	6028      	str	r0, [r5, #0]
   d479a:	e08a      	b.n	d48b2 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x17e>
   d479c:	494a      	ldr	r1, [pc, #296]	; (d48c8 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x194>)
   d479e:	4668      	mov	r0, sp
   d47a0:	f004 fdea 	bl	d9378 <strcmp>
   d47a4:	b920      	cbnz	r0, d47b0 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x7c>
   d47a6:	4620      	mov	r0, r4
   d47a8:	f004 fc69 	bl	d907e <atoi>
   d47ac:	6068      	str	r0, [r5, #4]
   d47ae:	e080      	b.n	d48b2 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x17e>
   d47b0:	4946      	ldr	r1, [pc, #280]	; (d48cc <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x198>)
   d47b2:	4668      	mov	r0, sp
   d47b4:	f004 fde0 	bl	d9378 <strcmp>
   d47b8:	4601      	mov	r1, r0
   d47ba:	b928      	cbnz	r0, d47c8 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x94>
   d47bc:	2210      	movs	r2, #16
   d47be:	4620      	mov	r0, r4
   d47c0:	f005 fd3e 	bl	da240 <strtol>
   d47c4:	60a8      	str	r0, [r5, #8]
   d47c6:	e074      	b.n	d48b2 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x17e>
   d47c8:	4941      	ldr	r1, [pc, #260]	; (d48d0 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x19c>)
   d47ca:	4668      	mov	r0, sp
   d47cc:	f004 fdd4 	bl	d9378 <strcmp>
   d47d0:	4601      	mov	r1, r0
   d47d2:	b928      	cbnz	r0, d47e0 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0xac>
   d47d4:	2210      	movs	r2, #16
   d47d6:	4620      	mov	r0, r4
   d47d8:	f005 fd32 	bl	da240 <strtol>
   d47dc:	60e8      	str	r0, [r5, #12]
   d47de:	e068      	b.n	d48b2 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x17e>
   d47e0:	493c      	ldr	r1, [pc, #240]	; (d48d4 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x1a0>)
   d47e2:	4668      	mov	r0, sp
   d47e4:	f004 fdc8 	bl	d9378 <strcmp>
   d47e8:	4601      	mov	r1, r0
   d47ea:	b928      	cbnz	r0, d47f8 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0xc4>
   d47ec:	2210      	movs	r2, #16
   d47ee:	4620      	mov	r0, r4
   d47f0:	f005 fd26 	bl	da240 <strtol>
   d47f4:	6128      	str	r0, [r5, #16]
   d47f6:	e05c      	b.n	d48b2 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x17e>
   d47f8:	4937      	ldr	r1, [pc, #220]	; (d48d8 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x1a4>)
   d47fa:	4668      	mov	r0, sp
   d47fc:	f004 fdbc 	bl	d9378 <strcmp>
   d4800:	b920      	cbnz	r0, d480c <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0xd8>
   d4802:	4620      	mov	r0, r4
   d4804:	f004 fc3b 	bl	d907e <atoi>
   d4808:	6168      	str	r0, [r5, #20]
   d480a:	e052      	b.n	d48b2 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x17e>
   d480c:	4933      	ldr	r1, [pc, #204]	; (d48dc <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x1a8>)
   d480e:	4668      	mov	r0, sp
   d4810:	f004 fdb2 	bl	d9378 <strcmp>
   d4814:	2800      	cmp	r0, #0
   d4816:	d04c      	beq.n	d48b2 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x17e>
   d4818:	4931      	ldr	r1, [pc, #196]	; (d48e0 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x1ac>)
   d481a:	4668      	mov	r0, sp
   d481c:	f004 fdac 	bl	d9378 <strcmp>
   d4820:	2800      	cmp	r0, #0
   d4822:	d046      	beq.n	d48b2 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x17e>
   d4824:	492f      	ldr	r1, [pc, #188]	; (d48e4 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x1b0>)
   d4826:	4668      	mov	r0, sp
   d4828:	f004 fda6 	bl	d9378 <strcmp>
   d482c:	2800      	cmp	r0, #0
   d482e:	d040      	beq.n	d48b2 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x17e>
   d4830:	492d      	ldr	r1, [pc, #180]	; (d48e8 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x1b4>)
   d4832:	4668      	mov	r0, sp
   d4834:	f004 fda0 	bl	d9378 <strcmp>
   d4838:	4601      	mov	r1, r0
   d483a:	b928      	cbnz	r0, d4848 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x114>
   d483c:	2210      	movs	r2, #16
   d483e:	4620      	mov	r0, r4
   d4840:	f005 fcfe 	bl	da240 <strtol>
   d4844:	61a8      	str	r0, [r5, #24]
   d4846:	e034      	b.n	d48b2 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x17e>
   d4848:	4928      	ldr	r1, [pc, #160]	; (d48ec <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x1b8>)
   d484a:	4668      	mov	r0, sp
   d484c:	f004 fd94 	bl	d9378 <strcmp>
   d4850:	b920      	cbnz	r0, d485c <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x128>
   d4852:	4620      	mov	r0, r4
   d4854:	f004 fc13 	bl	d907e <atoi>
   d4858:	6228      	str	r0, [r5, #32]
   d485a:	e02a      	b.n	d48b2 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x17e>
   d485c:	4924      	ldr	r1, [pc, #144]	; (d48f0 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x1bc>)
   d485e:	4668      	mov	r0, sp
   d4860:	f004 fd8a 	bl	d9378 <strcmp>
   d4864:	b930      	cbnz	r0, d4874 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x140>
   d4866:	4620      	mov	r0, r4
   d4868:	f004 fc09 	bl	d907e <atoi>
   d486c:	2301      	movs	r3, #1
   d486e:	6268      	str	r0, [r5, #36]	; 0x24
   d4870:	772b      	strb	r3, [r5, #28]
   d4872:	e01e      	b.n	d48b2 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x17e>
   d4874:	491f      	ldr	r1, [pc, #124]	; (d48f4 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x1c0>)
   d4876:	4668      	mov	r0, sp
   d4878:	f004 fd7e 	bl	d9378 <strcmp>
   d487c:	b920      	cbnz	r0, d4888 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x154>
   d487e:	4620      	mov	r0, r4
   d4880:	f004 fbfd 	bl	d907e <atoi>
   d4884:	62a8      	str	r0, [r5, #40]	; 0x28
   d4886:	e014      	b.n	d48b2 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x17e>
   d4888:	491b      	ldr	r1, [pc, #108]	; (d48f8 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x1c4>)
   d488a:	4668      	mov	r0, sp
   d488c:	f004 fd74 	bl	d9378 <strcmp>
   d4890:	b178      	cbz	r0, d48b2 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x17e>
   d4892:	491a      	ldr	r1, [pc, #104]	; (d48fc <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x1c8>)
   d4894:	4668      	mov	r0, sp
   d4896:	f004 fd6f 	bl	d9378 <strcmp>
   d489a:	b150      	cbz	r0, d48b2 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x17e>
   d489c:	4918      	ldr	r1, [pc, #96]	; (d4900 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x1cc>)
   d489e:	4668      	mov	r0, sp
   d48a0:	f004 fd6a 	bl	d9378 <strcmp>
   d48a4:	b128      	cbz	r0, d48b2 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x17e>
   d48a6:	4917      	ldr	r1, [pc, #92]	; (d4904 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x1d0>)
   d48a8:	4623      	mov	r3, r4
   d48aa:	463a      	mov	r2, r7
   d48ac:	4816      	ldr	r0, [pc, #88]	; (d4908 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x1d4>)
   d48ae:	f7ff fdde 	bl	d446e <_ZNK5spark6Logger4infoEPKcz>
   d48b2:	b005      	add	sp, #20
   d48b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d48b6:	bf00      	nop
   d48b8:	000db929 	.word	0x000db929
   d48bc:	000db946 	.word	0x000db946
   d48c0:	000db94a 	.word	0x000db94a
   d48c4:	000db94f 	.word	0x000db94f
   d48c8:	000db953 	.word	0x000db953
   d48cc:	000db957 	.word	0x000db957
   d48d0:	000db95b 	.word	0x000db95b
   d48d4:	000db95e 	.word	0x000db95e
   d48d8:	000db963 	.word	0x000db963
   d48dc:	000db969 	.word	0x000db969
   d48e0:	000db973 	.word	0x000db973
   d48e4:	000db97c 	.word	0x000db97c
   d48e8:	000db982 	.word	0x000db982
   d48ec:	000db988 	.word	0x000db988
   d48f0:	000db98c 	.word	0x000db98c
   d48f4:	000db990 	.word	0x000db990
   d48f8:	000db999 	.word	0x000db999
   d48fc:	000db99d 	.word	0x000db99d
   d4900:	000db9a0 	.word	0x000db9a0
   d4904:	000db9a9 	.word	0x000db9a9
   d4908:	2003e398 	.word	0x2003e398

000d490c <_ZN33CellularHelperEnvironmentCellData5parseEPKc>:
   d490c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d490e:	4606      	mov	r6, r0
   d4910:	4608      	mov	r0, r1
   d4912:	f004 fd43 	bl	d939c <strdup>
   d4916:	aa01      	add	r2, sp, #4
   d4918:	4910      	ldr	r1, [pc, #64]	; (d495c <_ZN33CellularHelperEnvironmentCellData5parseEPKc+0x50>)
   d491a:	4605      	mov	r5, r0
   d491c:	f005 fc07 	bl	da12e <strtok_r>
   d4920:	2700      	movs	r7, #0
   d4922:	b1b0      	cbz	r0, d4952 <_ZN33CellularHelperEnvironmentCellData5parseEPKc+0x46>
   d4924:	4604      	mov	r4, r0
   d4926:	3001      	adds	r0, #1
   d4928:	7823      	ldrb	r3, [r4, #0]
   d492a:	2b20      	cmp	r3, #32
   d492c:	d0fa      	beq.n	d4924 <_ZN33CellularHelperEnvironmentCellData5parseEPKc+0x18>
   d492e:	213a      	movs	r1, #58	; 0x3a
   d4930:	4620      	mov	r0, r4
   d4932:	f004 fd09 	bl	d9348 <strchr>
   d4936:	b130      	cbz	r0, d4946 <_ZN33CellularHelperEnvironmentCellData5parseEPKc+0x3a>
   d4938:	4602      	mov	r2, r0
   d493a:	4621      	mov	r1, r4
   d493c:	f802 7b01 	strb.w	r7, [r2], #1
   d4940:	4630      	mov	r0, r6
   d4942:	f7ff fef7 	bl	d4734 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_>
   d4946:	aa01      	add	r2, sp, #4
   d4948:	4904      	ldr	r1, [pc, #16]	; (d495c <_ZN33CellularHelperEnvironmentCellData5parseEPKc+0x50>)
   d494a:	2000      	movs	r0, #0
   d494c:	f005 fbef 	bl	da12e <strtok_r>
   d4950:	e7e7      	b.n	d4922 <_ZN33CellularHelperEnvironmentCellData5parseEPKc+0x16>
   d4952:	4628      	mov	r0, r5
   d4954:	f001 f8d2 	bl	d5afc <free>
   d4958:	b003      	add	sp, #12
   d495a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d495c:	000dbcbf 	.word	0x000dbcbf

000d4960 <_ZN33CellularHelperEnvironmentResponse5parseEiPKci>:
   d4960:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d4964:	7a06      	ldrb	r6, [r0, #8]
   d4966:	b08b      	sub	sp, #44	; 0x2c
   d4968:	4605      	mov	r5, r0
   d496a:	460f      	mov	r7, r1
   d496c:	4691      	mov	r9, r2
   d496e:	461c      	mov	r4, r3
   d4970:	b10e      	cbz	r6, d4976 <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0x16>
   d4972:	f7ff fd93 	bl	d449c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci>
   d4976:	f437 0880 	bics.w	r8, r7, #4194304	; 0x400000
   d497a:	d155      	bne.n	d4a28 <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0xc8>
   d497c:	1c60      	adds	r0, r4, #1
   d497e:	f001 f8b5 	bl	d5aec <malloc>
   d4982:	4606      	mov	r6, r0
   d4984:	2800      	cmp	r0, #0
   d4986:	d04f      	beq.n	d4a28 <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0xc8>
   d4988:	4622      	mov	r2, r4
   d498a:	4649      	mov	r1, r9
   d498c:	f004 fd3e 	bl	d940c <strncpy>
   d4990:	f806 8004 	strb.w	r8, [r6, r4]
   d4994:	4a27      	ldr	r2, [pc, #156]	; (d4a34 <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0xd4>)
   d4996:	68eb      	ldr	r3, [r5, #12]
   d4998:	2120      	movs	r1, #32
   d499a:	a802      	add	r0, sp, #8
   d499c:	f001 f8d6 	bl	d5b4c <snprintf>
   d49a0:	4925      	ldr	r1, [pc, #148]	; (d4a38 <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0xd8>)
   d49a2:	4680      	mov	r8, r0
   d49a4:	aa01      	add	r2, sp, #4
   d49a6:	4630      	mov	r0, r6
   d49a8:	f005 fbc1 	bl	da12e <strtok_r>
   d49ac:	4604      	mov	r4, r0
   d49ae:	2800      	cmp	r0, #0
   d49b0:	d037      	beq.n	d4a22 <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0xc2>
   d49b2:	7803      	ldrb	r3, [r0, #0]
   d49b4:	b38b      	cbz	r3, d4a1a <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0xba>
   d49b6:	f5b7 0f80 	cmp.w	r7, #4194304	; 0x400000
   d49ba:	d105      	bne.n	d49c8 <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0x68>
   d49bc:	4642      	mov	r2, r8
   d49be:	a902      	add	r1, sp, #8
   d49c0:	f004 fd0f 	bl	d93e2 <strncmp>
   d49c4:	b900      	cbnz	r0, d49c8 <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0x68>
   d49c6:	4444      	add	r4, r8
   d49c8:	2204      	movs	r2, #4
   d49ca:	491c      	ldr	r1, [pc, #112]	; (d4a3c <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0xdc>)
   d49cc:	4620      	mov	r0, r4
   d49ce:	f004 fd08 	bl	d93e2 <strncmp>
   d49d2:	b9b8      	cbnz	r0, d4a04 <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0xa4>
   d49d4:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   d49d6:	2b00      	cmp	r3, #0
   d49d8:	da08      	bge.n	d49ec <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0x8c>
   d49da:	4621      	mov	r1, r4
   d49dc:	f105 002c 	add.w	r0, r5, #44	; 0x2c
   d49e0:	f7ff ff94 	bl	d490c <_ZN33CellularHelperEnvironmentCellData5parseEPKc>
   d49e4:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   d49e6:	3301      	adds	r3, #1
   d49e8:	662b      	str	r3, [r5, #96]	; 0x60
   d49ea:	e016      	b.n	d4a1a <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0xba>
   d49ec:	6daa      	ldr	r2, [r5, #88]	; 0x58
   d49ee:	b1a2      	cbz	r2, d4a1a <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0xba>
   d49f0:	6de9      	ldr	r1, [r5, #92]	; 0x5c
   d49f2:	428b      	cmp	r3, r1
   d49f4:	d211      	bcs.n	d4a1a <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0xba>
   d49f6:	1c59      	adds	r1, r3, #1
   d49f8:	202c      	movs	r0, #44	; 0x2c
   d49fa:	6629      	str	r1, [r5, #96]	; 0x60
   d49fc:	fb00 2003 	mla	r0, r0, r3, r2
   d4a00:	4621      	mov	r1, r4
   d4a02:	e008      	b.n	d4a16 <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0xb6>
   d4a04:	2204      	movs	r2, #4
   d4a06:	490e      	ldr	r1, [pc, #56]	; (d4a40 <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0xe0>)
   d4a08:	4620      	mov	r0, r4
   d4a0a:	f004 fcea 	bl	d93e2 <strncmp>
   d4a0e:	b920      	cbnz	r0, d4a1a <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0xba>
   d4a10:	4621      	mov	r1, r4
   d4a12:	f105 002c 	add.w	r0, r5, #44	; 0x2c
   d4a16:	f7ff ff79 	bl	d490c <_ZN33CellularHelperEnvironmentCellData5parseEPKc>
   d4a1a:	aa01      	add	r2, sp, #4
   d4a1c:	4906      	ldr	r1, [pc, #24]	; (d4a38 <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0xd8>)
   d4a1e:	2000      	movs	r0, #0
   d4a20:	e7c2      	b.n	d49a8 <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0x48>
   d4a22:	4630      	mov	r0, r6
   d4a24:	f001 f86a 	bl	d5afc <free>
   d4a28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d4a2c:	b00b      	add	sp, #44	; 0x2c
   d4a2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d4a32:	bf00      	nop
   d4a34:	000dbc46 	.word	0x000dbc46
   d4a38:	000dbc36 	.word	0x000dbc36
   d4a3c:	000db9c1 	.word	0x000db9c1
   d4a40:	000db9c6 	.word	0x000db9c6

000d4a44 <_ZNK33CellularHelperEnvironmentResponse15getNumNeighborsEv>:
   d4a44:	b570      	push	{r4, r5, r6, lr}
   d4a46:	6e04      	ldr	r4, [r0, #96]	; 0x60
   d4a48:	2c00      	cmp	r4, #0
   d4a4a:	db0f      	blt.n	d4a6c <_ZNK33CellularHelperEnvironmentResponse15getNumNeighborsEv+0x28>
   d4a4c:	6d85      	ldr	r5, [r0, #88]	; 0x58
   d4a4e:	b15d      	cbz	r5, d4a68 <_ZNK33CellularHelperEnvironmentResponse15getNumNeighborsEv+0x24>
   d4a50:	2200      	movs	r2, #0
   d4a52:	262c      	movs	r6, #44	; 0x2c
   d4a54:	42a2      	cmp	r2, r4
   d4a56:	d007      	beq.n	d4a68 <_ZNK33CellularHelperEnvironmentResponse15getNumNeighborsEv+0x24>
   d4a58:	2100      	movs	r1, #0
   d4a5a:	fb06 5002 	mla	r0, r6, r2, r5
   d4a5e:	f7ff fe51 	bl	d4704 <_ZNK33CellularHelperEnvironmentCellData7isValidEb>
   d4a62:	b128      	cbz	r0, d4a70 <_ZNK33CellularHelperEnvironmentResponse15getNumNeighborsEv+0x2c>
   d4a64:	3201      	adds	r2, #1
   d4a66:	e7f5      	b.n	d4a54 <_ZNK33CellularHelperEnvironmentResponse15getNumNeighborsEv+0x10>
   d4a68:	4620      	mov	r0, r4
   d4a6a:	bd70      	pop	{r4, r5, r6, pc}
   d4a6c:	2000      	movs	r0, #0
   d4a6e:	bd70      	pop	{r4, r5, r6, pc}
   d4a70:	4610      	mov	r0, r2
   d4a72:	bd70      	pop	{r4, r5, r6, pc}

000d4a74 <_ZN26CellularHelperCREGResponse11postProcessEv>:
   d4a74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4a78:	f100 0634 	add.w	r6, r0, #52	; 0x34
   d4a7c:	b086      	sub	sp, #24
   d4a7e:	f100 0738 	add.w	r7, r0, #56	; 0x38
   d4a82:	f100 083c 	add.w	r8, r0, #60	; 0x3c
   d4a86:	e88d 01c0 	stmia.w	sp, {r6, r7, r8}
   d4a8a:	f100 0530 	add.w	r5, r0, #48	; 0x30
   d4a8e:	4604      	mov	r4, r0
   d4a90:	462b      	mov	r3, r5
   d4a92:	aa05      	add	r2, sp, #20
   d4a94:	490b      	ldr	r1, [pc, #44]	; (d4ac4 <_ZN26CellularHelperCREGResponse11postProcessEv+0x50>)
   d4a96:	69c0      	ldr	r0, [r0, #28]
   d4a98:	f001 f848 	bl	d5b2c <sscanf>
   d4a9c:	2805      	cmp	r0, #5
   d4a9e:	d103      	bne.n	d4aa8 <_ZN26CellularHelperCREGResponse11postProcessEv+0x34>
   d4aa0:	2301      	movs	r3, #1
   d4aa2:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
   d4aa6:	e009      	b.n	d4abc <_ZN26CellularHelperCREGResponse11postProcessEv+0x48>
   d4aa8:	e88d 0180 	stmia.w	sp, {r7, r8}
   d4aac:	4633      	mov	r3, r6
   d4aae:	462a      	mov	r2, r5
   d4ab0:	4905      	ldr	r1, [pc, #20]	; (d4ac8 <_ZN26CellularHelperCREGResponse11postProcessEv+0x54>)
   d4ab2:	69e0      	ldr	r0, [r4, #28]
   d4ab4:	f001 f83a 	bl	d5b2c <sscanf>
   d4ab8:	2804      	cmp	r0, #4
   d4aba:	d0f1      	beq.n	d4aa0 <_ZN26CellularHelperCREGResponse11postProcessEv+0x2c>
   d4abc:	b006      	add	sp, #24
   d4abe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4ac2:	bf00      	nop
   d4ac4:	000dbace 	.word	0x000dbace
   d4ac8:	000dbad1 	.word	0x000dbad1

000d4acc <_ZN28CellularHelperStringResponseC1Ev>:
   d4acc:	b510      	push	{r4, lr}
   d4ace:	f06f 0302 	mvn.w	r3, #2
   d4ad2:	6043      	str	r3, [r0, #4]
   d4ad4:	2300      	movs	r3, #0
   d4ad6:	7203      	strb	r3, [r0, #8]
   d4ad8:	4b04      	ldr	r3, [pc, #16]	; (d4aec <_ZN28CellularHelperStringResponseC1Ev+0x20>)
   d4ada:	4905      	ldr	r1, [pc, #20]	; (d4af0 <_ZN28CellularHelperStringResponseC1Ev+0x24>)
   d4adc:	4604      	mov	r4, r0
   d4ade:	f840 3b0c 	str.w	r3, [r0], #12
   d4ae2:	f003 f8d6 	bl	d7c92 <_ZN6StringC1EPK19__FlashStringHelper>
   d4ae6:	4620      	mov	r0, r4
   d4ae8:	bd10      	pop	{r4, pc}
   d4aea:	bf00      	nop
   d4aec:	000db860 	.word	0x000db860
   d4af0:	000dbc38 	.word	0x000dbc38

000d4af4 <_ZN28CellularHelperStringResponseD1Ev>:
   d4af4:	b510      	push	{r4, lr}
   d4af6:	4b04      	ldr	r3, [pc, #16]	; (d4b08 <_ZN28CellularHelperStringResponseD1Ev+0x14>)
   d4af8:	4604      	mov	r4, r0
   d4afa:	f840 3b0c 	str.w	r3, [r0], #12
   d4afe:	f003 f881 	bl	d7c04 <_ZN6StringD1Ev>
   d4b02:	4620      	mov	r0, r4
   d4b04:	bd10      	pop	{r4, pc}
   d4b06:	bf00      	nop
   d4b08:	000db860 	.word	0x000db860

000d4b0c <_ZNK19CellularHelperClass8getModelEv>:
   d4b0c:	b510      	push	{r4, lr}
   d4b0e:	b088      	sub	sp, #32
   d4b10:	4604      	mov	r4, r0
   d4b12:	a801      	add	r0, sp, #4
   d4b14:	f7ff ffda 	bl	d4acc <_ZN28CellularHelperStringResponseC1Ev>

    template<typename T, typename... Targs>
    inline int command(int (*cb)(int type, const char* buf, int len, T* param),
            T* param, system_tick_t timeout_ms, const char* format, Targs... Fargs)
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
   d4b18:	4b08      	ldr	r3, [pc, #32]	; (d4b3c <_ZNK19CellularHelperClass8getModelEv+0x30>)
   d4b1a:	4809      	ldr	r0, [pc, #36]	; (d4b40 <_ZNK19CellularHelperClass8getModelEv+0x34>)
   d4b1c:	f242 7210 	movw	r2, #10000	; 0x2710
   d4b20:	a901      	add	r1, sp, #4
   d4b22:	f000 fd95 	bl	d5650 <cellular_command>
   d4b26:	a904      	add	r1, sp, #16
   d4b28:	4620      	mov	r0, r4
   d4b2a:	f003 f8f1 	bl	d7d10 <_ZN6StringC1ERKS_>
   d4b2e:	a801      	add	r0, sp, #4
   d4b30:	f7ff ffe0 	bl	d4af4 <_ZN28CellularHelperStringResponseD1Ev>
   d4b34:	4620      	mov	r0, r4
   d4b36:	b008      	add	sp, #32
   d4b38:	bd10      	pop	{r4, pc}
   d4b3a:	bf00      	nop
   d4b3c:	000dbb01 	.word	0x000dbb01
   d4b40:	000d4459 	.word	0x000d4459

000d4b44 <_ZNK19CellularHelperClass5isLTEEv>:
   d4b44:	b510      	push	{r4, lr}
   d4b46:	b088      	sub	sp, #32
   d4b48:	4601      	mov	r1, r0
   d4b4a:	4668      	mov	r0, sp
   d4b4c:	f7ff ffde 	bl	d4b0c <_ZNK19CellularHelperClass8getModelEv>
   d4b50:	4909      	ldr	r1, [pc, #36]	; (d4b78 <_ZNK19CellularHelperClass5isLTEEv+0x34>)
   d4b52:	a804      	add	r0, sp, #16
   d4b54:	f003 f89d 	bl	d7c92 <_ZN6StringC1EPK19__FlashStringHelper>
   d4b58:	a904      	add	r1, sp, #16
   d4b5a:	4668      	mov	r0, sp
   d4b5c:	f003 f945 	bl	d7dea <_ZNK6String10startsWithERKS_>
   d4b60:	4604      	mov	r4, r0
   d4b62:	a804      	add	r0, sp, #16
   d4b64:	f003 f84e 	bl	d7c04 <_ZN6StringD1Ev>
   d4b68:	4668      	mov	r0, sp
   d4b6a:	f003 f84b 	bl	d7c04 <_ZN6StringD1Ev>
   d4b6e:	1c20      	adds	r0, r4, #0
   d4b70:	bf18      	it	ne
   d4b72:	2001      	movne	r0, #1
   d4b74:	b008      	add	sp, #32
   d4b76:	bd10      	pop	{r4, pc}
   d4b78:	000dbb3f 	.word	0x000dbb3f

000d4b7c <_ZNK19CellularHelperClass15getOperatorNameEi>:
   d4b7c:	b530      	push	{r4, r5, lr}
   d4b7e:	4914      	ldr	r1, [pc, #80]	; (d4bd0 <_ZNK19CellularHelperClass15getOperatorNameEi+0x54>)
   d4b80:	b093      	sub	sp, #76	; 0x4c
   d4b82:	4615      	mov	r5, r2
   d4b84:	4604      	mov	r4, r0
   d4b86:	f003 f884 	bl	d7c92 <_ZN6StringC1EPK19__FlashStringHelper>
   d4b8a:	a807      	add	r0, sp, #28
   d4b8c:	f7ff fd76 	bl	d467c <_ZN32CellularHelperPlusStringResponseC1Ev>
   d4b90:	4910      	ldr	r1, [pc, #64]	; (d4bd4 <_ZNK19CellularHelperClass15getOperatorNameEi+0x58>)
   d4b92:	a80a      	add	r0, sp, #40	; 0x28
   d4b94:	f003 f8cf 	bl	d7d36 <_ZN6StringaSEPKc>
   d4b98:	9500      	str	r5, [sp, #0]
   d4b9a:	4b0f      	ldr	r3, [pc, #60]	; (d4bd8 <_ZNK19CellularHelperClass15getOperatorNameEi+0x5c>)
   d4b9c:	480f      	ldr	r0, [pc, #60]	; (d4bdc <_ZNK19CellularHelperClass15getOperatorNameEi+0x60>)
   d4b9e:	f242 7210 	movw	r2, #10000	; 0x2710
   d4ba2:	a907      	add	r1, sp, #28
   d4ba4:	f000 fd54 	bl	d5650 <cellular_command>
   d4ba8:	3002      	adds	r0, #2
   d4baa:	d10b      	bne.n	d4bc4 <_ZNK19CellularHelperClass15getOperatorNameEi+0x48>
   d4bac:	2201      	movs	r2, #1
   d4bae:	a907      	add	r1, sp, #28
   d4bb0:	a803      	add	r0, sp, #12
   d4bb2:	f7ff fd33 	bl	d461c <_ZNK32CellularHelperPlusStringResponse19getDoubleQuotedPartEb>
   d4bb6:	a903      	add	r1, sp, #12
   d4bb8:	4620      	mov	r0, r4
   d4bba:	f003 f8b4 	bl	d7d26 <_ZN6StringaSEOS_>
   d4bbe:	a803      	add	r0, sp, #12
   d4bc0:	f003 f820 	bl	d7c04 <_ZN6StringD1Ev>
   d4bc4:	a807      	add	r0, sp, #28
   d4bc6:	f7ff fd73 	bl	d46b0 <_ZN32CellularHelperPlusStringResponseD1Ev>
   d4bca:	4620      	mov	r0, r4
   d4bcc:	b013      	add	sp, #76	; 0x4c
   d4bce:	bd30      	pop	{r4, r5, pc}
   d4bd0:	000dbc38 	.word	0x000dbc38
   d4bd4:	000dbb47 	.word	0x000dbb47
   d4bd8:	000dbb4d 	.word	0x000dbb4d
   d4bdc:	000d4459 	.word	0x000d4459

000d4be0 <_ZNK19CellularHelperClass14getEnvironmentEiR33CellularHelperEnvironmentResponse>:
   d4be0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d4be2:	4614      	mov	r4, r2
   d4be4:	460d      	mov	r5, r1
   d4be6:	f102 000c 	add.w	r0, r2, #12
   d4bea:	4907      	ldr	r1, [pc, #28]	; (d4c08 <_ZNK19CellularHelperClass14getEnvironmentEiR33CellularHelperEnvironmentResponse+0x28>)
   d4bec:	f003 f8a3 	bl	d7d36 <_ZN6StringaSEPKc>
   d4bf0:	9500      	str	r5, [sp, #0]
   d4bf2:	4b06      	ldr	r3, [pc, #24]	; (d4c0c <_ZNK19CellularHelperClass14getEnvironmentEiR33CellularHelperEnvironmentResponse+0x2c>)
   d4bf4:	4806      	ldr	r0, [pc, #24]	; (d4c10 <_ZNK19CellularHelperClass14getEnvironmentEiR33CellularHelperEnvironmentResponse+0x30>)
   d4bf6:	f242 7210 	movw	r2, #10000	; 0x2710
   d4bfa:	4621      	mov	r1, r4
   d4bfc:	f000 fd28 	bl	d5650 <cellular_command>
   d4c00:	6060      	str	r0, [r4, #4]
   d4c02:	b003      	add	sp, #12
   d4c04:	bd30      	pop	{r4, r5, pc}
   d4c06:	bf00      	nop
   d4c08:	000dbba7 	.word	0x000dbba7
   d4c0c:	000dbbac 	.word	0x000dbbac
   d4c10:	000d4459 	.word	0x000d4459

000d4c14 <_ZNK19CellularHelperClass7getCREGER26CellularHelperCREGResponse>:
   d4c14:	b510      	push	{r4, lr}
   d4c16:	460c      	mov	r4, r1
    }

    template<typename... Targs>
    inline int command(system_tick_t timeout_ms, const char* format, Targs... Fargs)
    {
        return cellular_command(NULL, NULL, timeout_ms, format, Fargs...);
   d4c18:	2100      	movs	r1, #0
   d4c1a:	4b12      	ldr	r3, [pc, #72]	; (d4c64 <_ZNK19CellularHelperClass7getCREGER26CellularHelperCREGResponse+0x50>)
   d4c1c:	f242 7210 	movw	r2, #10000	; 0x2710
   d4c20:	4608      	mov	r0, r1
   d4c22:	f000 fd15 	bl	d5650 <cellular_command>
   d4c26:	3002      	adds	r0, #2
   d4c28:	d11a      	bne.n	d4c60 <_ZNK19CellularHelperClass7getCREGER26CellularHelperCREGResponse+0x4c>
   d4c2a:	490f      	ldr	r1, [pc, #60]	; (d4c68 <_ZNK19CellularHelperClass7getCREGER26CellularHelperCREGResponse+0x54>)
   d4c2c:	f104 000c 	add.w	r0, r4, #12
   d4c30:	f003 f881 	bl	d7d36 <_ZN6StringaSEPKc>

    template<typename T, typename... Targs>
    inline int command(int (*cb)(int type, const char* buf, int len, T* param),
            T* param, system_tick_t timeout_ms, const char* format, Targs... Fargs)
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
   d4c34:	4b0d      	ldr	r3, [pc, #52]	; (d4c6c <_ZNK19CellularHelperClass7getCREGER26CellularHelperCREGResponse+0x58>)
   d4c36:	480e      	ldr	r0, [pc, #56]	; (d4c70 <_ZNK19CellularHelperClass7getCREGER26CellularHelperCREGResponse+0x5c>)
   d4c38:	f242 7210 	movw	r2, #10000	; 0x2710
   d4c3c:	4621      	mov	r1, r4
   d4c3e:	f000 fd07 	bl	d5650 <cellular_command>
   d4c42:	6060      	str	r0, [r4, #4]
   d4c44:	3002      	adds	r0, #2
   d4c46:	d10b      	bne.n	d4c60 <_ZNK19CellularHelperClass7getCREGER26CellularHelperCREGResponse+0x4c>
   d4c48:	4620      	mov	r0, r4
   d4c4a:	f7ff ff13 	bl	d4a74 <_ZN26CellularHelperCREGResponse11postProcessEv>
    }

    template<typename... Targs>
    inline int command(system_tick_t timeout_ms, const char* format, Targs... Fargs)
    {
        return cellular_command(NULL, NULL, timeout_ms, format, Fargs...);
   d4c4e:	2100      	movs	r1, #0
   d4c50:	4b08      	ldr	r3, [pc, #32]	; (d4c74 <_ZNK19CellularHelperClass7getCREGER26CellularHelperCREGResponse+0x60>)
   d4c52:	f242 7210 	movw	r2, #10000	; 0x2710
   d4c56:	4608      	mov	r0, r1
   d4c58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d4c5c:	f000 bcf8 	b.w	d5650 <cellular_command>
   d4c60:	bd10      	pop	{r4, pc}
   d4c62:	bf00      	nop
   d4c64:	000dbbe7 	.word	0x000dbbe7
   d4c68:	000dbbf3 	.word	0x000dbbf3
   d4c6c:	000dbbf8 	.word	0x000dbbf8
   d4c70:	000d4459 	.word	0x000d4459
   d4c74:	000dbc03 	.word	0x000dbc03

000d4c78 <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib>:
   d4c78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4c7c:	460d      	mov	r5, r1
   d4c7e:	461f      	mov	r7, r3
   d4c80:	1c59      	adds	r1, r3, #1
   d4c82:	68ab      	ldr	r3, [r5, #8]
   d4c84:	f89d 8018 	ldrb.w	r8, [sp, #24]
   d4c88:	4419      	add	r1, r3
   d4c8a:	4628      	mov	r0, r5
   d4c8c:	4616      	mov	r6, r2
   d4c8e:	f002 ffd7 	bl	d7c40 <_ZN6String7reserveEj>
   d4c92:	4634      	mov	r4, r6
   d4c94:	1ba3      	subs	r3, r4, r6
   d4c96:	429f      	cmp	r7, r3
   d4c98:	dd0d      	ble.n	d4cb6 <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib+0x3e>
   d4c9a:	f1b8 0f00 	cmp.w	r8, #0
   d4c9e:	d004      	beq.n	d4caa <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib+0x32>
   d4ca0:	7823      	ldrb	r3, [r4, #0]
   d4ca2:	2b0d      	cmp	r3, #13
   d4ca4:	d005      	beq.n	d4cb2 <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib+0x3a>
   d4ca6:	2b0a      	cmp	r3, #10
   d4ca8:	d003      	beq.n	d4cb2 <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib+0x3a>
   d4caa:	7821      	ldrb	r1, [r4, #0]
   d4cac:	4628      	mov	r0, r5
   d4cae:	f003 f879 	bl	d7da4 <_ZN6String6concatEc>
   d4cb2:	3401      	adds	r4, #1
   d4cb4:	e7ee      	b.n	d4c94 <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib+0x1c>
   d4cb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d4cbc <_ZN28CellularHelperStringResponse5parseEiPKci>:
   d4cbc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d4cbe:	f890 e008 	ldrb.w	lr, [r0, #8]
   d4cc2:	4604      	mov	r4, r0
   d4cc4:	460f      	mov	r7, r1
   d4cc6:	4615      	mov	r5, r2
   d4cc8:	461e      	mov	r6, r3
   d4cca:	f1be 0f00 	cmp.w	lr, #0
   d4cce:	d001      	beq.n	d4cd4 <_ZN28CellularHelperStringResponse5parseEiPKci+0x18>
   d4cd0:	f7ff fbe4 	bl	d449c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci>
   d4cd4:	b947      	cbnz	r7, d4ce8 <_ZN28CellularHelperStringResponse5parseEiPKci+0x2c>
   d4cd6:	2301      	movs	r3, #1
   d4cd8:	9300      	str	r3, [sp, #0]
   d4cda:	462a      	mov	r2, r5
   d4cdc:	4633      	mov	r3, r6
   d4cde:	f104 010c 	add.w	r1, r4, #12
   d4ce2:	4803      	ldr	r0, [pc, #12]	; (d4cf0 <_ZN28CellularHelperStringResponse5parseEiPKci+0x34>)
   d4ce4:	f7ff ffc8 	bl	d4c78 <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib>
   d4ce8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d4cec:	b003      	add	sp, #12
   d4cee:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4cf0:	2003e214 	.word	0x2003e214

000d4cf4 <_ZN32CellularHelperPlusStringResponse5parseEiPKci>:
   d4cf4:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4cf6:	f890 e008 	ldrb.w	lr, [r0, #8]
   d4cfa:	b08b      	sub	sp, #44	; 0x2c
   d4cfc:	4606      	mov	r6, r0
   d4cfe:	460d      	mov	r5, r1
   d4d00:	4617      	mov	r7, r2
   d4d02:	461c      	mov	r4, r3
   d4d04:	f1be 0f00 	cmp.w	lr, #0
   d4d08:	d001      	beq.n	d4d0e <_ZN32CellularHelperPlusStringResponse5parseEiPKci+0x1a>
   d4d0a:	f7ff fbc7 	bl	d449c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci>
   d4d0e:	f5b5 0f80 	cmp.w	r5, #4194304	; 0x400000
   d4d12:	d12a      	bne.n	d4d6a <_ZN32CellularHelperPlusStringResponse5parseEiPKci+0x76>
   d4d14:	1c60      	adds	r0, r4, #1
   d4d16:	f000 fee9 	bl	d5aec <malloc>
   d4d1a:	4605      	mov	r5, r0
   d4d1c:	b328      	cbz	r0, d4d6a <_ZN32CellularHelperPlusStringResponse5parseEiPKci+0x76>
   d4d1e:	4622      	mov	r2, r4
   d4d20:	4639      	mov	r1, r7
   d4d22:	f004 fb73 	bl	d940c <strncpy>
   d4d26:	2300      	movs	r3, #0
   d4d28:	552b      	strb	r3, [r5, r4]
   d4d2a:	4a12      	ldr	r2, [pc, #72]	; (d4d74 <_ZN32CellularHelperPlusStringResponse5parseEiPKci+0x80>)
   d4d2c:	68f3      	ldr	r3, [r6, #12]
   d4d2e:	2120      	movs	r1, #32
   d4d30:	a802      	add	r0, sp, #8
   d4d32:	f000 ff0b 	bl	d5b4c <snprintf>
   d4d36:	a902      	add	r1, sp, #8
   d4d38:	4628      	mov	r0, r5
   d4d3a:	f004 fb8d 	bl	d9458 <strstr>
   d4d3e:	4604      	mov	r4, r0
   d4d40:	b180      	cbz	r0, d4d64 <_ZN32CellularHelperPlusStringResponse5parseEiPKci+0x70>
   d4d42:	a802      	add	r0, sp, #8
   d4d44:	f004 fb45 	bl	d93d2 <strlen>
   d4d48:	4404      	add	r4, r0
   d4d4a:	210d      	movs	r1, #13
   d4d4c:	4620      	mov	r0, r4
   d4d4e:	f004 fafb 	bl	d9348 <strchr>
   d4d52:	2301      	movs	r3, #1
   d4d54:	9300      	str	r3, [sp, #0]
   d4d56:	4622      	mov	r2, r4
   d4d58:	1b03      	subs	r3, r0, r4
   d4d5a:	f106 011c 	add.w	r1, r6, #28
   d4d5e:	4806      	ldr	r0, [pc, #24]	; (d4d78 <_ZN32CellularHelperPlusStringResponse5parseEiPKci+0x84>)
   d4d60:	f7ff ff8a 	bl	d4c78 <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib>
   d4d64:	4628      	mov	r0, r5
   d4d66:	f000 fec9 	bl	d5afc <free>
   d4d6a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d4d6e:	b00b      	add	sp, #44	; 0x2c
   d4d70:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4d72:	bf00      	nop
   d4d74:	000dbc45 	.word	0x000dbc45
   d4d78:	2003e214 	.word	0x2003e214

000d4d7c <_GLOBAL__sub_I_CellularHelper>:
   d4d7c:	f000 bcda 	b.w	d5734 <HAL_Pin_Map>

000d4d80 <_ZNSt17_Function_handlerIFvPKcS1_ESt5_BindIFSt7_Mem_fnIM23GoogleMapsDeviceLocatorFvS1_S1_EEPS5_St12_PlaceholderILi1EESA_ILi2EEEEE9_M_invokeERKSt9_Any_dataOS1_SJ_>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d4d80:	b430      	push	{r4, r5}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d4d82:	6803      	ldr	r3, [r0, #0]
      template<typename... _Args, typename _Req
               = _Require<typename _Traits::__lvalue,
                          _CheckArgs<_Pack<_Args...>>>>
	result_type
	operator()(_Class* __object, _Args&&... __args) const
	{ return (__object->*_M_pmf)(std::forward<_Args>(__args)...); }
   d4d84:	6812      	ldr	r2, [r2, #0]
   d4d86:	6858      	ldr	r0, [r3, #4]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d4d88:	689c      	ldr	r4, [r3, #8]
   d4d8a:	681b      	ldr	r3, [r3, #0]
      template<typename... _Args, typename _Req
               = _Require<typename _Traits::__lvalue,
                          _CheckArgs<_Pack<_Args...>>>>
	result_type
	operator()(_Class* __object, _Args&&... __args) const
	{ return (__object->*_M_pmf)(std::forward<_Args>(__args)...); }
   d4d8c:	6809      	ldr	r1, [r1, #0]
   d4d8e:	f010 0f01 	tst.w	r0, #1
   d4d92:	ea4f 0060 	mov.w	r0, r0, asr #1
   d4d96:	bf18      	it	ne
   d4d98:	5825      	ldrne	r5, [r4, r0]
   d4d9a:	4420      	add	r0, r4
   d4d9c:	bf18      	it	ne
   d4d9e:	58eb      	ldrne	r3, [r5, r3]
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	(*_Base::_M_get_pointer(__functor))(
	    std::forward<_ArgTypes>(__args)...);
      }
   d4da0:	bc30      	pop	{r4, r5}
      template<typename... _Args, typename _Req
               = _Require<typename _Traits::__lvalue,
                          _CheckArgs<_Pack<_Args...>>>>
	result_type
	operator()(_Class* __object, _Args&&... __args) const
	{ return (__object->*_M_pmf)(std::forward<_Args>(__args)...); }
   d4da2:	4718      	bx	r3

000d4da4 <_ZN23GoogleMapsDeviceLocatorD1Ev>:
GoogleMapsDeviceLocator::GoogleMapsDeviceLocator() : locatorMode(LOCATOR_MODE_MANUAL), periodMs(10000), eventName("deviceLocator"),
	stateTime(0), state(CONNECT_WAIT_STATE), callback(NULL), waitAfterConnect(8000) {

}

GoogleMapsDeviceLocator::~GoogleMapsDeviceLocator() {
   d4da4:	b510      	push	{r4, lr}
   d4da6:	4b06      	ldr	r3, [pc, #24]	; (d4dc0 <_ZN23GoogleMapsDeviceLocatorD1Ev+0x1c>)
   d4da8:	4604      	mov	r4, r0
   d4daa:	f840 3b2c 	str.w	r3, [r0], #44
   d4dae:	f002 ff29 	bl	d7c04 <_ZN6StringD1Ev>
   d4db2:	f104 000c 	add.w	r0, r4, #12
   d4db6:	f002 ff25 	bl	d7c04 <_ZN6StringD1Ev>

}
   d4dba:	4620      	mov	r0, r4
   d4dbc:	bd10      	pop	{r4, pc}
   d4dbe:	bf00      	nop
   d4dc0:	000dbc84 	.word	0x000dbc84

000d4dc4 <_ZN23GoogleMapsDeviceLocatorD0Ev>:
GoogleMapsDeviceLocator::GoogleMapsDeviceLocator() : locatorMode(LOCATOR_MODE_MANUAL), periodMs(10000), eventName("deviceLocator"),
	stateTime(0), state(CONNECT_WAIT_STATE), callback(NULL), waitAfterConnect(8000) {

}

GoogleMapsDeviceLocator::~GoogleMapsDeviceLocator() {
   d4dc4:	b510      	push	{r4, lr}
   d4dc6:	4604      	mov	r4, r0

}
   d4dc8:	f7ff ffec 	bl	d4da4 <_ZN23GoogleMapsDeviceLocatorD1Ev>
   d4dcc:	4620      	mov	r0, r4
   d4dce:	2144      	movs	r1, #68	; 0x44
   d4dd0:	f003 fb01 	bl	d83d6 <_ZdlPvj>
   d4dd4:	4620      	mov	r0, r4
   d4dd6:	bd10      	pop	{r4, pc}

000d4dd8 <_ZL16cellularAddTowerPK33CellularHelperEnvironmentCellData>:
#endif /* Wiring_WiFi */


#if Wiring_Cellular

static void cellularAddTower(const CellularHelperEnvironmentCellData *cellData) {
   d4dd8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	// The - 4 factor here to leave room for the closing JSON array ], object }}, and the trailing null
	size_t spaceLeft = &requestBuf[sizeof(requestBuf) - 4] - requestCur;
   d4dda:	4e17      	ldr	r6, [pc, #92]	; (d4e38 <_ZL16cellularAddTowerPK33CellularHelperEnvironmentCellData+0x60>)
   d4ddc:	4d17      	ldr	r5, [pc, #92]	; (d4e3c <_ZL16cellularAddTowerPK33CellularHelperEnvironmentCellData+0x64>)

	size_t sizeNeeded = snprintf(requestCur, spaceLeft,
   d4dde:	4a18      	ldr	r2, [pc, #96]	; (d4e40 <_ZL16cellularAddTowerPK33CellularHelperEnvironmentCellData+0x68>)
#endif /* Wiring_WiFi */


#if Wiring_Cellular

static void cellularAddTower(const CellularHelperEnvironmentCellData *cellData) {
   d4de0:	4604      	mov	r4, r0
	// The - 4 factor here to leave room for the closing JSON array ], object }}, and the trailing null
	size_t spaceLeft = &requestBuf[sizeof(requestBuf) - 4] - requestCur;
   d4de2:	6830      	ldr	r0, [r6, #0]

	size_t sizeNeeded = snprintf(requestCur, spaceLeft,
   d4de4:	6863      	ldr	r3, [r4, #4]
   d4de6:	f810 1c01 	ldrb.w	r1, [r0, #-1]
   d4dea:	9303      	str	r3, [sp, #12]
   d4dec:	6823      	ldr	r3, [r4, #0]
   d4dee:	9302      	str	r3, [sp, #8]
   d4df0:	68a3      	ldr	r3, [r4, #8]
   d4df2:	9301      	str	r3, [sp, #4]
   d4df4:	68e3      	ldr	r3, [r4, #12]
   d4df6:	9300      	str	r3, [sp, #0]
   d4df8:	4b12      	ldr	r3, [pc, #72]	; (d4e44 <_ZL16cellularAddTowerPK33CellularHelperEnvironmentCellData+0x6c>)

#if Wiring_Cellular

static void cellularAddTower(const CellularHelperEnvironmentCellData *cellData) {
	// The - 4 factor here to leave room for the closing JSON array ], object }}, and the trailing null
	size_t spaceLeft = &requestBuf[sizeof(requestBuf) - 4] - requestCur;
   d4dfa:	1a2d      	subs	r5, r5, r0

	size_t sizeNeeded = snprintf(requestCur, spaceLeft,
   d4dfc:	295b      	cmp	r1, #91	; 0x5b
   d4dfe:	bf18      	it	ne
   d4e00:	4613      	movne	r3, r2
   d4e02:	4a11      	ldr	r2, [pc, #68]	; (d4e48 <_ZL16cellularAddTowerPK33CellularHelperEnvironmentCellData+0x70>)
   d4e04:	4629      	mov	r1, r5
   d4e06:	f000 fea1 	bl	d5b4c <snprintf>
			"%s{\"i\":%d,\"l\":%u,\"c\":%d,\"n\":%d}",
			(requestCur[-1] == '[' ? "" : ","),
			cellData->ci, cellData->lac, cellData->mcc, cellData->mnc);

	if (sizeNeeded <= spaceLeft && cellData->lac != 0 && cellData->lac != 65535 && cellData->mcc != 65535 && cellData->mnc != 65535) {
   d4e0a:	4285      	cmp	r5, r0
   d4e0c:	d312      	bcc.n	d4e34 <_ZL16cellularAddTowerPK33CellularHelperEnvironmentCellData+0x5c>
   d4e0e:	68a2      	ldr	r2, [r4, #8]
   d4e10:	b182      	cbz	r2, d4e34 <_ZL16cellularAddTowerPK33CellularHelperEnvironmentCellData+0x5c>
   d4e12:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d4e16:	429a      	cmp	r2, r3
   d4e18:	d00c      	beq.n	d4e34 <_ZL16cellularAddTowerPK33CellularHelperEnvironmentCellData+0x5c>
   d4e1a:	6822      	ldr	r2, [r4, #0]
   d4e1c:	429a      	cmp	r2, r3
   d4e1e:	d009      	beq.n	d4e34 <_ZL16cellularAddTowerPK33CellularHelperEnvironmentCellData+0x5c>
   d4e20:	6862      	ldr	r2, [r4, #4]
   d4e22:	429a      	cmp	r2, r3
   d4e24:	d006      	beq.n	d4e34 <_ZL16cellularAddTowerPK33CellularHelperEnvironmentCellData+0x5c>
		// There is enough space to store the whole entry, so save it
		requestCur += sizeNeeded;
   d4e26:	6833      	ldr	r3, [r6, #0]
		numAdded++;
   d4e28:	4a08      	ldr	r2, [pc, #32]	; (d4e4c <_ZL16cellularAddTowerPK33CellularHelperEnvironmentCellData+0x74>)
			(requestCur[-1] == '[' ? "" : ","),
			cellData->ci, cellData->lac, cellData->mcc, cellData->mnc);

	if (sizeNeeded <= spaceLeft && cellData->lac != 0 && cellData->lac != 65535 && cellData->mcc != 65535 && cellData->mnc != 65535) {
		// There is enough space to store the whole entry, so save it
		requestCur += sizeNeeded;
   d4e2a:	4418      	add	r0, r3
		numAdded++;
   d4e2c:	6813      	ldr	r3, [r2, #0]
			(requestCur[-1] == '[' ? "" : ","),
			cellData->ci, cellData->lac, cellData->mcc, cellData->mnc);

	if (sizeNeeded <= spaceLeft && cellData->lac != 0 && cellData->lac != 65535 && cellData->mcc != 65535 && cellData->mnc != 65535) {
		// There is enough space to store the whole entry, so save it
		requestCur += sizeNeeded;
   d4e2e:	6030      	str	r0, [r6, #0]
		numAdded++;
   d4e30:	3301      	adds	r3, #1
   d4e32:	6013      	str	r3, [r2, #0]
	}

}
   d4e34:	b004      	add	sp, #16
   d4e36:	bd70      	pop	{r4, r5, r6, pc}
   d4e38:	2003e320 	.word	0x2003e320
   d4e3c:	2003e319 	.word	0x2003e319
   d4e40:	000dbcbf 	.word	0x000dbcbf
   d4e44:	000dbc38 	.word	0x000dbc38
   d4e48:	000dbc8c 	.word	0x000dbc8c
   d4e4c:	2003e218 	.word	0x2003e218

000d4e50 <_ZN23GoogleMapsDeviceLocator19subscriptionHandlerEPKcS1_>:
			Particle.publish(eventName, scanData, PRIVATE);
		}
	}
}

void GoogleMapsDeviceLocator::subscriptionHandler(const char *event, const char *data) {
   d4e50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	// event: hook-response/deviceLocator/<deviceid>/0

	if (callback) {
   d4e54:	6a43      	ldr	r3, [r0, #36]	; 0x24
			Particle.publish(eventName, scanData, PRIVATE);
		}
	}
}

void GoogleMapsDeviceLocator::subscriptionHandler(const char *event, const char *data) {
   d4e56:	b085      	sub	sp, #20
   d4e58:	4604      	mov	r4, r0
	// event: hook-response/deviceLocator/<deviceid>/0

	if (callback) {
   d4e5a:	2b00      	cmp	r3, #0
   d4e5c:	d037      	beq.n	d4ece <_ZN23GoogleMapsDeviceLocator19subscriptionHandlerEPKcS1_+0x7e>
		// float lat, float lon, float accuracy
		char *mutableCopy = strdup(data);
   d4e5e:	4610      	mov	r0, r2
   d4e60:	f004 fa9c 	bl	d939c <strdup>
		char *part, *end;
		float lat, lon, accuracy;

		part = strtok_r(mutableCopy, ",", &end);
   d4e64:	aa03      	add	r2, sp, #12
   d4e66:	491b      	ldr	r1, [pc, #108]	; (d4ed4 <_ZN23GoogleMapsDeviceLocator19subscriptionHandlerEPKcS1_+0x84>)
void GoogleMapsDeviceLocator::subscriptionHandler(const char *event, const char *data) {
	// event: hook-response/deviceLocator/<deviceid>/0

	if (callback) {
		// float lat, float lon, float accuracy
		char *mutableCopy = strdup(data);
   d4e68:	4605      	mov	r5, r0
		char *part, *end;
		float lat, lon, accuracy;

		part = strtok_r(mutableCopy, ",", &end);
   d4e6a:	f005 f960 	bl	da12e <strtok_r>
		if (part) {
   d4e6e:	b358      	cbz	r0, d4ec8 <_ZN23GoogleMapsDeviceLocator19subscriptionHandlerEPKcS1_+0x78>
			lat = atof(part);
   d4e70:	f004 f902 	bl	d9078 <atof>
			part = strtok_r(NULL, ",", &end);
   d4e74:	aa03      	add	r2, sp, #12
   d4e76:	4917      	ldr	r1, [pc, #92]	; (d4ed4 <_ZN23GoogleMapsDeviceLocator19subscriptionHandlerEPKcS1_+0x84>)
   d4e78:	2000      	movs	r0, #0
		char *part, *end;
		float lat, lon, accuracy;

		part = strtok_r(mutableCopy, ",", &end);
		if (part) {
			lat = atof(part);
   d4e7a:	ec57 6b10 	vmov	r6, r7, d0
			part = strtok_r(NULL, ",", &end);
   d4e7e:	f005 f956 	bl	da12e <strtok_r>
			if (part) {
   d4e82:	b308      	cbz	r0, d4ec8 <_ZN23GoogleMapsDeviceLocator19subscriptionHandlerEPKcS1_+0x78>
				lon = atof(part);
   d4e84:	f004 f8f8 	bl	d9078 <atof>
				part = strtok_r(NULL, ",", &end);
   d4e88:	aa03      	add	r2, sp, #12
   d4e8a:	4912      	ldr	r1, [pc, #72]	; (d4ed4 <_ZN23GoogleMapsDeviceLocator19subscriptionHandlerEPKcS1_+0x84>)
   d4e8c:	2000      	movs	r0, #0
		part = strtok_r(mutableCopy, ",", &end);
		if (part) {
			lat = atof(part);
			part = strtok_r(NULL, ",", &end);
			if (part) {
				lon = atof(part);
   d4e8e:	ec59 8b10 	vmov	r8, r9, d0
				part = strtok_r(NULL, ",", &end);
   d4e92:	f005 f94c 	bl	da12e <strtok_r>
				if (part) {
   d4e96:	b1b8      	cbz	r0, d4ec8 <_ZN23GoogleMapsDeviceLocator19subscriptionHandlerEPKcS1_+0x78>
					accuracy = atof(part);
   d4e98:	f004 f8ee 	bl	d9078 <atof>

					(*callback)(lat, lon, accuracy);
   d4e9c:	ec51 0b10 	vmov	r0, r1, d0
   d4ea0:	f004 f89a 	bl	d8fd8 <__aeabi_d2f>
   d4ea4:	4649      	mov	r1, r9
   d4ea6:	9001      	str	r0, [sp, #4]
   d4ea8:	4640      	mov	r0, r8
   d4eaa:	f004 f895 	bl	d8fd8 <__aeabi_d2f>
   d4eae:	4639      	mov	r1, r7
   d4eb0:	9000      	str	r0, [sp, #0]
   d4eb2:	4630      	mov	r0, r6
   d4eb4:	f004 f890 	bl	d8fd8 <__aeabi_d2f>
   d4eb8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d4eba:	ed9d 1a01 	vldr	s2, [sp, #4]
   d4ebe:	eddd 0a00 	vldr	s1, [sp]
   d4ec2:	ee00 0a10 	vmov	s0, r0
   d4ec6:	4798      	blx	r3
				}
			}
		}

		free(mutableCopy);
   d4ec8:	4628      	mov	r0, r5
   d4eca:	f000 fe17 	bl	d5afc <free>
	}
}
   d4ece:	b005      	add	sp, #20
   d4ed0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d4ed4:	000dbcbf 	.word	0x000dbcbf

000d4ed8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM23GoogleMapsDeviceLocatorFvPKcS5_EEPS3_St12_PlaceholderILi1EESA_ILi2EEEEE10_M_managerERSt9_Any_dataRKSG_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d4ed8:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d4eda:	b538      	push	{r3, r4, r5, lr}
   d4edc:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d4ede:	d005      	beq.n	d4eec <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM23GoogleMapsDeviceLocatorFvPKcS5_EEPS3_St12_PlaceholderILi1EESA_ILi2EEEEE10_M_managerERSt9_Any_dataRKSG_St18_Manager_operation+0x14>
   d4ee0:	2a03      	cmp	r2, #3
   d4ee2:	d00f      	beq.n	d4f04 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM23GoogleMapsDeviceLocatorFvPKcS5_EEPS3_St12_PlaceholderILi1EESA_ILi2EEEEE10_M_managerERSt9_Any_dataRKSG_St18_Manager_operation+0x2c>
   d4ee4:	2a01      	cmp	r2, #1
   d4ee6:	d111      	bne.n	d4f0c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM23GoogleMapsDeviceLocatorFvPKcS5_EEPS3_St12_PlaceholderILi1EESA_ILi2EEEEE10_M_managerERSt9_Any_dataRKSG_St18_Manager_operation+0x34>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d4ee8:	680b      	ldr	r3, [r1, #0]
   d4eea:	e009      	b.n	d4f00 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM23GoogleMapsDeviceLocatorFvPKcS5_EEPS3_St12_PlaceholderILi1EESA_ILi2EEEEE10_M_managerERSt9_Any_dataRKSG_St18_Manager_operation+0x28>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d4eec:	200c      	movs	r0, #12
   d4eee:	680d      	ldr	r5, [r1, #0]
   d4ef0:	f7ff f8d3 	bl	d409a <_Znwj>
   d4ef4:	4603      	mov	r3, r0
   d4ef6:	b118      	cbz	r0, d4f00 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM23GoogleMapsDeviceLocatorFvPKcS5_EEPS3_St12_PlaceholderILi1EESA_ILi2EEEEE10_M_managerERSt9_Any_dataRKSG_St18_Manager_operation+0x28>
   d4ef8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   d4efc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   d4f00:	6023      	str	r3, [r4, #0]
   d4f02:	e003      	b.n	d4f0c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM23GoogleMapsDeviceLocatorFvPKcS5_EEPS3_St12_PlaceholderILi1EESA_ILi2EEEEE10_M_managerERSt9_Any_dataRKSG_St18_Manager_operation+0x34>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d4f04:	210c      	movs	r1, #12
   d4f06:	6800      	ldr	r0, [r0, #0]
   d4f08:	f003 fa65 	bl	d83d6 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d4f0c:	2000      	movs	r0, #0
   d4f0e:	bd38      	pop	{r3, r4, r5, pc}

000d4f10 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4f10:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d4f12:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4f14:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d4f16:	b113      	cbz	r3, d4f1e <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4f18:	2203      	movs	r2, #3
   d4f1a:	4601      	mov	r1, r0
   d4f1c:	4798      	blx	r3
    }
   d4f1e:	4620      	mov	r0, r4
   d4f20:	bd10      	pop	{r4, pc}
	...

000d4f24 <_ZN23GoogleMapsDeviceLocatorC1Ev>:

static char requestBuf[256];
static char *requestCur;
static int numAdded = 0;

GoogleMapsDeviceLocator::GoogleMapsDeviceLocator() : locatorMode(LOCATOR_MODE_MANUAL), periodMs(10000), eventName("deviceLocator"),
   d4f24:	b538      	push	{r3, r4, r5, lr}
	stateTime(0), state(CONNECT_WAIT_STATE), callback(NULL), waitAfterConnect(8000) {
   d4f26:	4b0f      	ldr	r3, [pc, #60]	; (d4f64 <_ZN23GoogleMapsDeviceLocatorC1Ev+0x40>)
   d4f28:	6003      	str	r3, [r0, #0]
   d4f2a:	2500      	movs	r5, #0
   d4f2c:	f242 7310 	movw	r3, #10000	; 0x2710

static char requestBuf[256];
static char *requestCur;
static int numAdded = 0;

GoogleMapsDeviceLocator::GoogleMapsDeviceLocator() : locatorMode(LOCATOR_MODE_MANUAL), periodMs(10000), eventName("deviceLocator"),
   d4f30:	4604      	mov	r4, r0
	stateTime(0), state(CONNECT_WAIT_STATE), callback(NULL), waitAfterConnect(8000) {
   d4f32:	6045      	str	r5, [r0, #4]
   d4f34:	6083      	str	r3, [r0, #8]
   d4f36:	490c      	ldr	r1, [pc, #48]	; (d4f68 <_ZN23GoogleMapsDeviceLocatorC1Ev+0x44>)
   d4f38:	300c      	adds	r0, #12
   d4f3a:	f002 feaa 	bl	d7c92 <_ZN6StringC1EPK19__FlashStringHelper>
   d4f3e:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
   d4f42:	62a3      	str	r3, [r4, #40]	; 0x28
   d4f44:	61e5      	str	r5, [r4, #28]
   d4f46:	6225      	str	r5, [r4, #32]
   d4f48:	6265      	str	r5, [r4, #36]	; 0x24
   d4f4a:	4908      	ldr	r1, [pc, #32]	; (d4f6c <_ZN23GoogleMapsDeviceLocatorC1Ev+0x48>)
   d4f4c:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   d4f50:	f002 fe9f 	bl	d7c92 <_ZN6StringC1EPK19__FlashStringHelper>
   d4f54:	f44f 739b 	mov.w	r3, #310	; 0x136
   d4f58:	63e3      	str	r3, [r4, #60]	; 0x3c
   d4f5a:	f44f 73cd 	mov.w	r3, #410	; 0x19a
   d4f5e:	6423      	str	r3, [r4, #64]	; 0x40

}
   d4f60:	4620      	mov	r0, r4
   d4f62:	bd38      	pop	{r3, r4, r5, pc}
   d4f64:	000dbc84 	.word	0x000dbc84
   d4f68:	000db849 	.word	0x000db849
   d4f6c:	000dbcac 	.word	0x000dbcac

000d4f70 <_ZN23GoogleMapsDeviceLocator18withLocatePeriodicEm>:
	locatorMode = LOCATOR_MODE_ONCE;
	return *this;
}

GoogleMapsDeviceLocator &GoogleMapsDeviceLocator::withLocatePeriodic(unsigned long secondsPeriodic) {
	locatorMode = LOCATOR_MODE_PERIODIC;
   d4f70:	2302      	movs	r3, #2
   d4f72:	6043      	str	r3, [r0, #4]
	if (secondsPeriodic < 5) {
		secondsPeriodic = 5;
   d4f74:	2904      	cmp	r1, #4
   d4f76:	bf98      	it	ls
   d4f78:	2105      	movls	r1, #5
	}
	periodMs = secondsPeriodic * 1000;
   d4f7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4f7e:	4359      	muls	r1, r3
   d4f80:	6081      	str	r1, [r0, #8]
	return *this;
}
   d4f82:	4770      	bx	lr

000d4f84 <_ZN23GoogleMapsDeviceLocator13withEventNameEPKc>:

GoogleMapsDeviceLocator &GoogleMapsDeviceLocator::withEventName(const char *name) {
   d4f84:	b510      	push	{r4, lr}
   d4f86:	4604      	mov	r4, r0
	this->eventName = name;
   d4f88:	300c      	adds	r0, #12
   d4f8a:	f002 fed4 	bl	d7d36 <_ZN6StringaSEPKc>
	return *this;
}
   d4f8e:	4620      	mov	r0, r4
   d4f90:	bd10      	pop	{r4, pc}
	...

000d4f94 <_ZN23GoogleMapsDeviceLocator15cellularScanCGIEv>:
	}

}

#if HAS_CELLULAR_GLOBAL_IDENTITY
const char *GoogleMapsDeviceLocator::cellularScanCGI() {
   d4f94:	b570      	push	{r4, r5, r6, lr}

	*requestCur = 0;
   d4f96:	4c22      	ldr	r4, [pc, #136]	; (d5020 <_ZN23GoogleMapsDeviceLocator15cellularScanCGIEv+0x8c>)

	// getOperatorName (AT+UDOPN) is not supported on LTE (SARA-R410M-02-B) but the function
	// will return an empty string which is fine.
	String oper = CellularHelper.getOperatorName();
   d4f98:	4922      	ldr	r1, [pc, #136]	; (d5024 <_ZN23GoogleMapsDeviceLocator15cellularScanCGIEv+0x90>)
}

#if HAS_CELLULAR_GLOBAL_IDENTITY
const char *GoogleMapsDeviceLocator::cellularScanCGI() {

	*requestCur = 0;
   d4f9a:	6823      	ldr	r3, [r4, #0]
	}

}

#if HAS_CELLULAR_GLOBAL_IDENTITY
const char *GoogleMapsDeviceLocator::cellularScanCGI() {
   d4f9c:	b08a      	sub	sp, #40	; 0x28

	*requestCur = 0;
   d4f9e:	2500      	movs	r5, #0
   d4fa0:	701d      	strb	r5, [r3, #0]

	// getOperatorName (AT+UDOPN) is not supported on LTE (SARA-R410M-02-B) but the function
	// will return an empty string which is fine.
	String oper = CellularHelper.getOperatorName();
   d4fa2:	2209      	movs	r2, #9
   d4fa4:	a802      	add	r0, sp, #8

	CellularGlobalIdentity cgi = {0};
   d4fa6:	2610      	movs	r6, #16

	*requestCur = 0;

	// getOperatorName (AT+UDOPN) is not supported on LTE (SARA-R410M-02-B) but the function
	// will return an empty string which is fine.
	String oper = CellularHelper.getOperatorName();
   d4fa8:	f7ff fde8 	bl	d4b7c <_ZNK19CellularHelperClass15getOperatorNameEi>

	CellularGlobalIdentity cgi = {0};
   d4fac:	4629      	mov	r1, r5
   d4fae:	4632      	mov	r2, r6
   d4fb0:	a806      	add	r0, sp, #24
   d4fb2:	f004 f999 	bl	d92e8 <memset>
	cgi.size = sizeof(CellularGlobalIdentity);
	cgi.version = CGI_VERSION_LATEST;

	cellular_result_t res = cellular_global_identity(&cgi, NULL);
   d4fb6:	4629      	mov	r1, r5
   d4fb8:	a806      	add	r0, sp, #24
	// getOperatorName (AT+UDOPN) is not supported on LTE (SARA-R410M-02-B) but the function
	// will return an empty string which is fine.
	String oper = CellularHelper.getOperatorName();

	CellularGlobalIdentity cgi = {0};
	cgi.size = sizeof(CellularGlobalIdentity);
   d4fba:	f8ad 6018 	strh.w	r6, [sp, #24]
	cgi.version = CGI_VERSION_LATEST;

	cellular_result_t res = cellular_global_identity(&cgi, NULL);
   d4fbe:	f000 fb4f 	bl	d5660 <cellular_global_identity>
	if (res == SYSTEM_ERROR_NONE) {
   d4fc2:	4605      	mov	r5, r0
   d4fc4:	bb30      	cbnz	r0, d5014 <_ZN23GoogleMapsDeviceLocator15cellularScanCGIEv+0x80>
		// We know these things fit, so just using sprintf instead of snprintf here
		requestCur += sprintf(requestCur, "{\"c\":{\"o\":\"%s\",", oper.c_str());
   d4fc6:	9a02      	ldr	r2, [sp, #8]
   d4fc8:	4917      	ldr	r1, [pc, #92]	; (d5028 <_ZN23GoogleMapsDeviceLocator15cellularScanCGIEv+0x94>)
   d4fca:	6820      	ldr	r0, [r4, #0]

		requestCur += sprintf(requestCur,
					"{\"i\":%d,\"l\":%u,\"c\":%d,\"n\":%d}",
					cgi.cell_id, cgi.location_area_code, cgi.mobile_country_code, cgi.mobile_network_code);

		numAdded++;
   d4fcc:	4e17      	ldr	r6, [pc, #92]	; (d502c <_ZN23GoogleMapsDeviceLocator15cellularScanCGIEv+0x98>)
	cgi.version = CGI_VERSION_LATEST;

	cellular_result_t res = cellular_global_identity(&cgi, NULL);
	if (res == SYSTEM_ERROR_NONE) {
		// We know these things fit, so just using sprintf instead of snprintf here
		requestCur += sprintf(requestCur, "{\"c\":{\"o\":\"%s\",", oper.c_str());
   d4fce:	f000 fda5 	bl	d5b1c <sprintf>
   d4fd2:	6823      	ldr	r3, [r4, #0]

		requestCur += sprintf(requestCur, "\"a\":[");
   d4fd4:	4916      	ldr	r1, [pc, #88]	; (d5030 <_ZN23GoogleMapsDeviceLocator15cellularScanCGIEv+0x9c>)
	cgi.version = CGI_VERSION_LATEST;

	cellular_result_t res = cellular_global_identity(&cgi, NULL);
	if (res == SYSTEM_ERROR_NONE) {
		// We know these things fit, so just using sprintf instead of snprintf here
		requestCur += sprintf(requestCur, "{\"c\":{\"o\":\"%s\",", oper.c_str());
   d4fd6:	4403      	add	r3, r0

		requestCur += sprintf(requestCur, "\"a\":[");
   d4fd8:	4618      	mov	r0, r3
   d4fda:	f004 f9d7 	bl	d938c <strcpy>

		requestCur += sprintf(requestCur,
					"{\"i\":%d,\"l\":%u,\"c\":%d,\"n\":%d}",
					cgi.cell_id, cgi.location_area_code, cgi.mobile_country_code, cgi.mobile_network_code);
   d4fde:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d4fe2:	9201      	str	r2, [sp, #4]
   d4fe4:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d4fe8:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
   d4fec:	9200      	str	r2, [sp, #0]
	cellular_result_t res = cellular_global_identity(&cgi, NULL);
	if (res == SYSTEM_ERROR_NONE) {
		// We know these things fit, so just using sprintf instead of snprintf here
		requestCur += sprintf(requestCur, "{\"c\":{\"o\":\"%s\",", oper.c_str());

		requestCur += sprintf(requestCur, "\"a\":[");
   d4fee:	3005      	adds	r0, #5

		requestCur += sprintf(requestCur,
					"{\"i\":%d,\"l\":%u,\"c\":%d,\"n\":%d}",
					cgi.cell_id, cgi.location_area_code, cgi.mobile_country_code, cgi.mobile_network_code);
   d4ff0:	9a09      	ldr	r2, [sp, #36]	; 0x24
   d4ff2:	4910      	ldr	r1, [pc, #64]	; (d5034 <_ZN23GoogleMapsDeviceLocator15cellularScanCGIEv+0xa0>)
	cellular_result_t res = cellular_global_identity(&cgi, NULL);
	if (res == SYSTEM_ERROR_NONE) {
		// We know these things fit, so just using sprintf instead of snprintf here
		requestCur += sprintf(requestCur, "{\"c\":{\"o\":\"%s\",", oper.c_str());

		requestCur += sprintf(requestCur, "\"a\":[");
   d4ff4:	6020      	str	r0, [r4, #0]

		requestCur += sprintf(requestCur,
					"{\"i\":%d,\"l\":%u,\"c\":%d,\"n\":%d}",
					cgi.cell_id, cgi.location_area_code, cgi.mobile_country_code, cgi.mobile_network_code);
   d4ff6:	f000 fd91 	bl	d5b1c <sprintf>

		numAdded++;
   d4ffa:	6832      	ldr	r2, [r6, #0]
		// We know these things fit, so just using sprintf instead of snprintf here
		requestCur += sprintf(requestCur, "{\"c\":{\"o\":\"%s\",", oper.c_str());

		requestCur += sprintf(requestCur, "\"a\":[");

		requestCur += sprintf(requestCur,
   d4ffc:	6821      	ldr	r1, [r4, #0]
					"{\"i\":%d,\"l\":%u,\"c\":%d,\"n\":%d}",
					cgi.cell_id, cgi.location_area_code, cgi.mobile_country_code, cgi.mobile_network_code);

		numAdded++;
   d4ffe:	3201      	adds	r2, #1
		// We know these things fit, so just using sprintf instead of snprintf here
		requestCur += sprintf(requestCur, "{\"c\":{\"o\":\"%s\",", oper.c_str());

		requestCur += sprintf(requestCur, "\"a\":[");

		requestCur += sprintf(requestCur,
   d5000:	180b      	adds	r3, r1, r0
					"{\"i\":%d,\"l\":%u,\"c\":%d,\"n\":%d}",
					cgi.cell_id, cgi.location_area_code, cgi.mobile_country_code, cgi.mobile_network_code);

		numAdded++;
   d5002:	6032      	str	r2, [r6, #0]

		*requestCur++ = ']';
   d5004:	225d      	movs	r2, #93	; 0x5d
   d5006:	540a      	strb	r2, [r1, r0]
		*requestCur++ = '}';
   d5008:	227d      	movs	r2, #125	; 0x7d
   d500a:	705a      	strb	r2, [r3, #1]
		*requestCur++ = '}';
   d500c:	709a      	strb	r2, [r3, #2]
		*requestCur++ = 0;
   d500e:	1d1a      	adds	r2, r3, #4
   d5010:	6022      	str	r2, [r4, #0]
   d5012:	70dd      	strb	r5, [r3, #3]

	*requestCur = 0;

	// getOperatorName (AT+UDOPN) is not supported on LTE (SARA-R410M-02-B) but the function
	// will return an empty string which is fine.
	String oper = CellularHelper.getOperatorName();
   d5014:	a802      	add	r0, sp, #8
   d5016:	f002 fdf5 	bl	d7c04 <_ZN6StringD1Ev>
	else {
		// Serial.printlnf("cellular_global_identity failed %d", res);
	}

	return requestBuf;
}
   d501a:	4807      	ldr	r0, [pc, #28]	; (d5038 <_ZN23GoogleMapsDeviceLocator15cellularScanCGIEv+0xa4>)
   d501c:	b00a      	add	sp, #40	; 0x28
   d501e:	bd70      	pop	{r4, r5, r6, pc}
   d5020:	2003e320 	.word	0x2003e320
   d5024:	2003e214 	.word	0x2003e214
   d5028:	000dbcb1 	.word	0x000dbcb1
   d502c:	2003e218 	.word	0x2003e218
   d5030:	000dbcc1 	.word	0x000dbcc1
   d5034:	000dbc8e 	.word	0x000dbc8e
   d5038:	2003e21d 	.word	0x2003e21d

000d503c <_ZN23GoogleMapsDeviceLocator15cellularScanLTEEv>:
#endif /* HAS_CELLULAR_GLOBAL_IDENTITY */

// This is only useful on the Electron and E Series LTE before Device OS 1.2.1.
// It does not work on the Boron LTE. The cellular global identity (CGI) version
// is better, and this will eventually be deprecated.
const char *GoogleMapsDeviceLocator::cellularScanLTE() {
   d503c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d503e:	b093      	sub	sp, #76	; 0x4c
   d5040:	ae12      	add	r6, sp, #72	; 0x48
   d5042:	4d2d      	ldr	r5, [pc, #180]	; (d50f8 <_ZN23GoogleMapsDeviceLocator15cellularScanLTEEv+0xbc>)
   d5044:	f846 5d40 	str.w	r5, [r6, #-64]!
   d5048:	2400      	movs	r4, #0
   d504a:	f06f 0302 	mvn.w	r3, #2
   d504e:	4607      	mov	r7, r0
   d5050:	492a      	ldr	r1, [pc, #168]	; (d50fc <_ZN23GoogleMapsDeviceLocator15cellularScanLTEEv+0xc0>)
   d5052:	9303      	str	r3, [sp, #12]
   d5054:	a805      	add	r0, sp, #20
   d5056:	f88d 4010 	strb.w	r4, [sp, #16]
   d505a:	f002 fe1a 	bl	d7c92 <_ZN6StringC1EPK19__FlashStringHelper>
   d505e:	4927      	ldr	r1, [pc, #156]	; (d50fc <_ZN23GoogleMapsDeviceLocator15cellularScanLTEEv+0xc0>)
   d5060:	a809      	add	r0, sp, #36	; 0x24
   d5062:	f002 fe16 	bl	d7c92 <_ZN6StringC1EPK19__FlashStringHelper>
   d5066:	4b26      	ldr	r3, [pc, #152]	; (d5100 <_ZN23GoogleMapsDeviceLocator15cellularScanLTEEv+0xc4>)
   d5068:	9302      	str	r3, [sp, #8]
   d506a:	f88d 4034 	strb.w	r4, [sp, #52]	; 0x34
   d506e:	940e      	str	r4, [sp, #56]	; 0x38
   d5070:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d5074:	9411      	str	r4, [sp, #68]	; 0x44
	CellularHelper.getCREG(resp);

	// Serial.println(resp.toString().c_str());

	// We know these things fit, so just using sprintf instead of snprintf here
	requestCur += sprintf(requestCur, "{\"c\":{\"o\":\"%s\",", oper.c_str());
   d5076:	4c23      	ldr	r4, [pc, #140]	; (d5104 <_ZN23GoogleMapsDeviceLocator15cellularScanLTEEv+0xc8>)
   d5078:	930f      	str	r3, [sp, #60]	; 0x3c
// It does not work on the Boron LTE. The cellular global identity (CGI) version
// is better, and this will eventually be deprecated.
const char *GoogleMapsDeviceLocator::cellularScanLTE() {

	CellularHelperCREGResponse resp;
	CellularHelper.getCREG(resp);
   d507a:	4631      	mov	r1, r6
   d507c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d5080:	4821      	ldr	r0, [pc, #132]	; (d5108 <_ZN23GoogleMapsDeviceLocator15cellularScanLTEEv+0xcc>)
   d5082:	9310      	str	r3, [sp, #64]	; 0x40
   d5084:	f7ff fdc6 	bl	d4c14 <_ZNK19CellularHelperClass7getCREGER26CellularHelperCREGResponse>

	// Serial.println(resp.toString().c_str());

	// We know these things fit, so just using sprintf instead of snprintf here
	requestCur += sprintf(requestCur, "{\"c\":{\"o\":\"%s\",", oper.c_str());
   d5088:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   d508a:	4920      	ldr	r1, [pc, #128]	; (d510c <_ZN23GoogleMapsDeviceLocator15cellularScanLTEEv+0xd0>)
   d508c:	6820      	ldr	r0, [r4, #0]
   d508e:	4e20      	ldr	r6, [pc, #128]	; (d5110 <_ZN23GoogleMapsDeviceLocator15cellularScanLTEEv+0xd4>)
   d5090:	f000 fd44 	bl	d5b1c <sprintf>
   d5094:	6823      	ldr	r3, [r4, #0]

	requestCur += sprintf(requestCur, "\"a\":[");
   d5096:	491f      	ldr	r1, [pc, #124]	; (d5114 <_ZN23GoogleMapsDeviceLocator15cellularScanLTEEv+0xd8>)
	CellularHelper.getCREG(resp);

	// Serial.println(resp.toString().c_str());

	// We know these things fit, so just using sprintf instead of snprintf here
	requestCur += sprintf(requestCur, "{\"c\":{\"o\":\"%s\",", oper.c_str());
   d5098:	4403      	add	r3, r0

	requestCur += sprintf(requestCur, "\"a\":[");
   d509a:	4618      	mov	r0, r3
   d509c:	f004 f976 	bl	d938c <strcpy>

	if (resp.valid) {
   d50a0:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
	// Serial.println(resp.toString().c_str());

	// We know these things fit, so just using sprintf instead of snprintf here
	requestCur += sprintf(requestCur, "{\"c\":{\"o\":\"%s\",", oper.c_str());

	requestCur += sprintf(requestCur, "\"a\":[");
   d50a4:	3005      	adds	r0, #5
   d50a6:	6020      	str	r0, [r4, #0]

	if (resp.valid) {
   d50a8:	b173      	cbz	r3, d50c8 <_ZN23GoogleMapsDeviceLocator15cellularScanLTEEv+0x8c>
		requestCur += sprintf(requestCur,
					"{\"i\":%d,\"l\":%u,\"c\":%d,\"n\":%d}",
					resp.ci, resp.lac, mcc, mnc);
   d50aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   d50ac:	9301      	str	r3, [sp, #4]
   d50ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   d50b0:	9300      	str	r3, [sp, #0]
   d50b2:	9a10      	ldr	r2, [sp, #64]	; 0x40
   d50b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d50b6:	4918      	ldr	r1, [pc, #96]	; (d5118 <_ZN23GoogleMapsDeviceLocator15cellularScanLTEEv+0xdc>)
   d50b8:	f000 fd30 	bl	d5b1c <sprintf>
   d50bc:	6823      	ldr	r3, [r4, #0]
   d50be:	4418      	add	r0, r3

		numAdded++;
   d50c0:	6833      	ldr	r3, [r6, #0]
	requestCur += sprintf(requestCur, "\"a\":[");

	if (resp.valid) {
		requestCur += sprintf(requestCur,
					"{\"i\":%d,\"l\":%u,\"c\":%d,\"n\":%d}",
					resp.ci, resp.lac, mcc, mnc);
   d50c2:	6020      	str	r0, [r4, #0]

		numAdded++;
   d50c4:	3301      	adds	r3, #1
   d50c6:	6033      	str	r3, [r6, #0]
	}

	*requestCur++ = ']';
   d50c8:	6823      	ldr	r3, [r4, #0]
   d50ca:	225d      	movs	r2, #93	; 0x5d
   d50cc:	701a      	strb	r2, [r3, #0]
	*requestCur++ = '}';
   d50ce:	227d      	movs	r2, #125	; 0x7d
   d50d0:	705a      	strb	r2, [r3, #1]
	*requestCur++ = '}';
   d50d2:	709a      	strb	r2, [r3, #2]
	*requestCur++ = 0;
   d50d4:	1d1a      	adds	r2, r3, #4
   d50d6:	6022      	str	r2, [r4, #0]
   d50d8:	2200      	movs	r2, #0
   d50da:	70da      	strb	r2, [r3, #3]



	if (numAdded == 0) {
   d50dc:	6833      	ldr	r3, [r6, #0]
   d50de:	b90b      	cbnz	r3, d50e4 <_ZN23GoogleMapsDeviceLocator15cellularScanLTEEv+0xa8>
		requestBuf[0] = 0;
   d50e0:	4a0e      	ldr	r2, [pc, #56]	; (d511c <_ZN23GoogleMapsDeviceLocator15cellularScanLTEEv+0xe0>)
   d50e2:	7013      	strb	r3, [r2, #0]
   d50e4:	a809      	add	r0, sp, #36	; 0x24
   d50e6:	9502      	str	r5, [sp, #8]
   d50e8:	f002 fd8c 	bl	d7c04 <_ZN6StringD1Ev>
   d50ec:	a805      	add	r0, sp, #20
   d50ee:	f002 fd89 	bl	d7c04 <_ZN6StringD1Ev>
	}

	return requestBuf;
}
   d50f2:	480a      	ldr	r0, [pc, #40]	; (d511c <_ZN23GoogleMapsDeviceLocator15cellularScanLTEEv+0xe0>)
   d50f4:	b013      	add	sp, #76	; 0x4c
   d50f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d50f8:	000dbc60 	.word	0x000dbc60
   d50fc:	000dbc38 	.word	0x000dbc38
   d5100:	000dbc6c 	.word	0x000dbc6c
   d5104:	2003e320 	.word	0x2003e320
   d5108:	2003e214 	.word	0x2003e214
   d510c:	000dbcb1 	.word	0x000dbcb1
   d5110:	2003e218 	.word	0x2003e218
   d5114:	000dbcc1 	.word	0x000dbcc1
   d5118:	000dbc8e 	.word	0x000dbc8e
   d511c:	2003e21d 	.word	0x2003e21d

000d5120 <_ZN23GoogleMapsDeviceLocator12cellularScanEv.part.5.constprop.14>:


const char *GoogleMapsDeviceLocator::cellularScan() {
   d5120:	b570      	push	{r4, r5, r6, lr}
   d5122:	4605      	mov	r5, r0
   d5124:	b0ca      	sub	sp, #296	; 0x128
			return cellularScanCGI();
		}
	}
#endif

	if (CellularHelper.isLTE()) {
   d5126:	4839      	ldr	r0, [pc, #228]	; (d520c <_ZN23GoogleMapsDeviceLocator12cellularScanEv.part.5.constprop.14+0xec>)
   d5128:	f7ff fd0c 	bl	d4b44 <_ZNK19CellularHelperClass5isLTEEv>
   d512c:	4604      	mov	r4, r0
   d512e:	b118      	cbz	r0, d5138 <_ZN23GoogleMapsDeviceLocator12cellularScanEv.part.5.constprop.14+0x18>
		return cellularScanLTE();
   d5130:	4628      	mov	r0, r5
   d5132:	f7ff ff83 	bl	d503c <_ZN23GoogleMapsDeviceLocator15cellularScanLTEEv>
   d5136:	e066      	b.n	d5206 <_ZN23GoogleMapsDeviceLocator12cellularScanEv.part.5.constprop.14+0xe6>
   d5138:	2204      	movs	r2, #4
   d513a:	a91e      	add	r1, sp, #120	; 0x78
   d513c:	a805      	add	r0, sp, #20
   d513e:	f7ff fac7 	bl	d46d0 <_ZN33CellularHelperEnvironmentResponseC1EP33CellularHelperEnvironmentCellDataj>
   d5142:	4b33      	ldr	r3, [pc, #204]	; (d5210 <_ZN23GoogleMapsDeviceLocator12cellularScanEv.part.5.constprop.14+0xf0>)
   d5144:	9305      	str	r3, [sp, #20]
   d5146:	a955      	add	r1, sp, #340	; 0x154
   d5148:	ab29      	add	r3, sp, #164	; 0xa4
   d514a:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d514e:	22ff      	movs	r2, #255	; 0xff
   d5150:	f843 0c2c 	str.w	r0, [r3, #-44]
   d5154:	f843 2c28 	str.w	r2, [r3, #-40]
   d5158:	f803 4c10 	strb.w	r4, [r3, #-16]
   d515c:	f843 2c04 	str.w	r2, [r3, #-4]
   d5160:	332c      	adds	r3, #44	; 0x2c
   d5162:	428b      	cmp	r3, r1
   d5164:	d1f4      	bne.n	d5150 <_ZN23GoogleMapsDeviceLocator12cellularScanEv.part.5.constprop.14+0x30>
	}

	// First try to get info on neighboring cells. This doesn't work for me using the U260
	CellularHelperEnvironmentResponseStatic<4> envResp;

	CellularHelper.getEnvironment(5, envResp);
   d5166:	aa05      	add	r2, sp, #20
   d5168:	2105      	movs	r1, #5
   d516a:	4828      	ldr	r0, [pc, #160]	; (d520c <_ZN23GoogleMapsDeviceLocator12cellularScanEv.part.5.constprop.14+0xec>)
   d516c:	f7ff fd38 	bl	d4be0 <_ZNK19CellularHelperClass14getEnvironmentEiR33CellularHelperEnvironmentResponse>

	if (envResp.resp != RESP_OK) {
   d5170:	9b06      	ldr	r3, [sp, #24]
   d5172:	3302      	adds	r3, #2
   d5174:	d004      	beq.n	d5180 <_ZN23GoogleMapsDeviceLocator12cellularScanEv.part.5.constprop.14+0x60>
		// We couldn't get neighboring cells, so try just the receiving cell
		CellularHelper.getEnvironment(3, envResp);
   d5176:	aa05      	add	r2, sp, #20
   d5178:	2103      	movs	r1, #3
   d517a:	4824      	ldr	r0, [pc, #144]	; (d520c <_ZN23GoogleMapsDeviceLocator12cellularScanEv.part.5.constprop.14+0xec>)
   d517c:	f7ff fd30 	bl	d4be0 <_ZNK19CellularHelperClass14getEnvironmentEiR33CellularHelperEnvironmentResponse>
	}
	// envResp.serialDebug();


	// We know these things fit, so just using sprintf instead of snprintf here
	requestCur += sprintf(requestCur, "{\"c\":{\"o\":\"%s\",",
   d5180:	4c24      	ldr	r4, [pc, #144]	; (d5214 <_ZN23GoogleMapsDeviceLocator12cellularScanEv.part.5.constprop.14+0xf4>)
			CellularHelper.getOperatorName().c_str());
   d5182:	4922      	ldr	r1, [pc, #136]	; (d520c <_ZN23GoogleMapsDeviceLocator12cellularScanEv.part.5.constprop.14+0xec>)
	}
	// envResp.serialDebug();


	// We know these things fit, so just using sprintf instead of snprintf here
	requestCur += sprintf(requestCur, "{\"c\":{\"o\":\"%s\",",
   d5184:	6825      	ldr	r5, [r4, #0]
			CellularHelper.getOperatorName().c_str());
   d5186:	2209      	movs	r2, #9
   d5188:	a801      	add	r0, sp, #4
   d518a:	f7ff fcf7 	bl	d4b7c <_ZNK19CellularHelperClass15getOperatorNameEi>
   d518e:	9a01      	ldr	r2, [sp, #4]
   d5190:	4921      	ldr	r1, [pc, #132]	; (d5218 <_ZN23GoogleMapsDeviceLocator12cellularScanEv.part.5.constprop.14+0xf8>)
   d5192:	4628      	mov	r0, r5
   d5194:	f000 fcc2 	bl	d5b1c <sprintf>
   d5198:	6823      	ldr	r3, [r4, #0]
   d519a:	4418      	add	r0, r3
   d519c:	6020      	str	r0, [r4, #0]
   d519e:	a801      	add	r0, sp, #4
   d51a0:	f002 fd30 	bl	d7c04 <_ZN6StringD1Ev>

	requestCur += sprintf(requestCur, "\"a\":[");
   d51a4:	6823      	ldr	r3, [r4, #0]
   d51a6:	491d      	ldr	r1, [pc, #116]	; (d521c <_ZN23GoogleMapsDeviceLocator12cellularScanEv.part.5.constprop.14+0xfc>)
   d51a8:	4618      	mov	r0, r3
   d51aa:	f004 f8ef 	bl	d938c <strcpy>
   d51ae:	4603      	mov	r3, r0
   d51b0:	3305      	adds	r3, #5

	cellularAddTower(&envResp.service);
   d51b2:	a810      	add	r0, sp, #64	; 0x40

	// We know these things fit, so just using sprintf instead of snprintf here
	requestCur += sprintf(requestCur, "{\"c\":{\"o\":\"%s\",",
			CellularHelper.getOperatorName().c_str());

	requestCur += sprintf(requestCur, "\"a\":[");
   d51b4:	6023      	str	r3, [r4, #0]

	cellularAddTower(&envResp.service);
   d51b6:	f7ff fe0f 	bl	d4dd8 <_ZL16cellularAddTowerPK33CellularHelperEnvironmentCellData>

	for(size_t ii = 0; ii < envResp.getNumNeighbors(); ii++) {
   d51ba:	2500      	movs	r5, #0
		cellularAddTower(&envResp.neighbors[ii]);
   d51bc:	262c      	movs	r6, #44	; 0x2c

	requestCur += sprintf(requestCur, "\"a\":[");

	cellularAddTower(&envResp.service);

	for(size_t ii = 0; ii < envResp.getNumNeighbors(); ii++) {
   d51be:	a805      	add	r0, sp, #20
   d51c0:	f7ff fc40 	bl	d4a44 <_ZNK33CellularHelperEnvironmentResponse15getNumNeighborsEv>
   d51c4:	42a8      	cmp	r0, r5
   d51c6:	d906      	bls.n	d51d6 <_ZN23GoogleMapsDeviceLocator12cellularScanEv.part.5.constprop.14+0xb6>
		cellularAddTower(&envResp.neighbors[ii]);
   d51c8:	981b      	ldr	r0, [sp, #108]	; 0x6c
   d51ca:	fb06 0005 	mla	r0, r6, r5, r0
   d51ce:	f7ff fe03 	bl	d4dd8 <_ZL16cellularAddTowerPK33CellularHelperEnvironmentCellData>

	requestCur += sprintf(requestCur, "\"a\":[");

	cellularAddTower(&envResp.service);

	for(size_t ii = 0; ii < envResp.getNumNeighbors(); ii++) {
   d51d2:	3501      	adds	r5, #1
   d51d4:	e7f3      	b.n	d51be <_ZN23GoogleMapsDeviceLocator12cellularScanEv.part.5.constprop.14+0x9e>
		cellularAddTower(&envResp.neighbors[ii]);
	}

	*requestCur++ = ']';
   d51d6:	6823      	ldr	r3, [r4, #0]
   d51d8:	225d      	movs	r2, #93	; 0x5d
   d51da:	701a      	strb	r2, [r3, #0]
	*requestCur++ = '}';
   d51dc:	227d      	movs	r2, #125	; 0x7d
   d51de:	705a      	strb	r2, [r3, #1]
	*requestCur++ = '}';
   d51e0:	709a      	strb	r2, [r3, #2]
	*requestCur++ = 0;
   d51e2:	1d1a      	adds	r2, r3, #4
   d51e4:	6022      	str	r2, [r4, #0]
   d51e6:	2200      	movs	r2, #0
   d51e8:	70da      	strb	r2, [r3, #3]

	if (numAdded == 0) {
   d51ea:	4b0d      	ldr	r3, [pc, #52]	; (d5220 <_ZN23GoogleMapsDeviceLocator12cellularScanEv.part.5.constprop.14+0x100>)
   d51ec:	681b      	ldr	r3, [r3, #0]
   d51ee:	b90b      	cbnz	r3, d51f4 <_ZN23GoogleMapsDeviceLocator12cellularScanEv.part.5.constprop.14+0xd4>
		requestBuf[0] = 0;
   d51f0:	4a0c      	ldr	r2, [pc, #48]	; (d5224 <_ZN23GoogleMapsDeviceLocator12cellularScanEv.part.5.constprop.14+0x104>)
   d51f2:	7013      	strb	r3, [r2, #0]
   d51f4:	4b0c      	ldr	r3, [pc, #48]	; (d5228 <_ZN23GoogleMapsDeviceLocator12cellularScanEv.part.5.constprop.14+0x108>)
   d51f6:	9305      	str	r3, [sp, #20]
   d51f8:	a80c      	add	r0, sp, #48	; 0x30
   d51fa:	f002 fd03 	bl	d7c04 <_ZN6StringD1Ev>
   d51fe:	a808      	add	r0, sp, #32
   d5200:	f002 fd00 	bl	d7c04 <_ZN6StringD1Ev>
	}

	return requestBuf;
   d5204:	4807      	ldr	r0, [pc, #28]	; (d5224 <_ZN23GoogleMapsDeviceLocator12cellularScanEv.part.5.constprop.14+0x104>)
}
   d5206:	b04a      	add	sp, #296	; 0x128
   d5208:	bd70      	pop	{r4, r5, r6, pc}
   d520a:	bf00      	nop
   d520c:	2003e214 	.word	0x2003e214
   d5210:	000dbc78 	.word	0x000dbc78
   d5214:	2003e320 	.word	0x2003e320
   d5218:	000dbcb1 	.word	0x000dbcb1
   d521c:	000dbcc1 	.word	0x000dbcc1
   d5220:	2003e218 	.word	0x2003e218
   d5224:	2003e21d 	.word	0x2003e21d
   d5228:	000dbc60 	.word	0x000dbc60

000d522c <_ZN23GoogleMapsDeviceLocator12cellularScanEv>:
}


const char *GoogleMapsDeviceLocator::cellularScan() {

	requestCur = requestBuf;
   d522c:	4b17      	ldr	r3, [pc, #92]	; (d528c <_ZN23GoogleMapsDeviceLocator12cellularScanEv+0x60>)
   d522e:	4a18      	ldr	r2, [pc, #96]	; (d5290 <_ZN23GoogleMapsDeviceLocator12cellularScanEv+0x64>)

	return requestBuf;
}


const char *GoogleMapsDeviceLocator::cellularScan() {
   d5230:	b530      	push	{r4, r5, lr}

	requestCur = requestBuf;
   d5232:	601a      	str	r2, [r3, #0]
	numAdded = 0;
   d5234:	4b17      	ldr	r3, [pc, #92]	; (d5294 <_ZN23GoogleMapsDeviceLocator12cellularScanEv+0x68>)
   d5236:	4d18      	ldr	r5, [pc, #96]	; (d5298 <_ZN23GoogleMapsDeviceLocator12cellularScanEv+0x6c>)
   d5238:	2200      	movs	r2, #0
   d523a:	601a      	str	r2, [r3, #0]
#if HAS_CELLULAR_GLOBAL_IDENTITY
	{
		static bool modelChecked = false;
		static bool useCGI = false;

		if (!modelChecked) {
   d523c:	4b17      	ldr	r3, [pc, #92]	; (d529c <_ZN23GoogleMapsDeviceLocator12cellularScanEv+0x70>)
   d523e:	781a      	ldrb	r2, [r3, #0]

	return requestBuf;
}


const char *GoogleMapsDeviceLocator::cellularScan() {
   d5240:	b089      	sub	sp, #36	; 0x24
   d5242:	4604      	mov	r4, r0
#if HAS_CELLULAR_GLOBAL_IDENTITY
	{
		static bool modelChecked = false;
		static bool useCGI = false;

		if (!modelChecked) {
   d5244:	b9ba      	cbnz	r2, d5276 <_ZN23GoogleMapsDeviceLocator12cellularScanEv+0x4a>
			modelChecked = true;
   d5246:	2201      	movs	r2, #1

			// Use Cellular Global Identity (CGI) on Device OS 1.2.1 and later
			// if the modem is not a global 2G (G350). On the G350, AT+CGEG=5
			// works so a better multi-tower result can be returned.
			useCGI = !CellularHelper.getModel().startsWith("SARA-G350");
   d5248:	4915      	ldr	r1, [pc, #84]	; (d52a0 <_ZN23GoogleMapsDeviceLocator12cellularScanEv+0x74>)
	{
		static bool modelChecked = false;
		static bool useCGI = false;

		if (!modelChecked) {
			modelChecked = true;
   d524a:	701a      	strb	r2, [r3, #0]

			// Use Cellular Global Identity (CGI) on Device OS 1.2.1 and later
			// if the modem is not a global 2G (G350). On the G350, AT+CGEG=5
			// works so a better multi-tower result can be returned.
			useCGI = !CellularHelper.getModel().startsWith("SARA-G350");
   d524c:	4668      	mov	r0, sp
   d524e:	f7ff fc5d 	bl	d4b0c <_ZNK19CellularHelperClass8getModelEv>
   d5252:	4914      	ldr	r1, [pc, #80]	; (d52a4 <_ZN23GoogleMapsDeviceLocator12cellularScanEv+0x78>)
   d5254:	a804      	add	r0, sp, #16
   d5256:	f002 fd1c 	bl	d7c92 <_ZN6StringC1EPK19__FlashStringHelper>
   d525a:	a904      	add	r1, sp, #16
   d525c:	4668      	mov	r0, sp
   d525e:	f002 fdc4 	bl	d7dea <_ZNK6String10startsWithERKS_>
   d5262:	fab0 f080 	clz	r0, r0
   d5266:	0940      	lsrs	r0, r0, #5
   d5268:	7028      	strb	r0, [r5, #0]
   d526a:	a804      	add	r0, sp, #16
   d526c:	f002 fcca 	bl	d7c04 <_ZN6StringD1Ev>
   d5270:	4668      	mov	r0, sp
   d5272:	f002 fcc7 	bl	d7c04 <_ZN6StringD1Ev>
		}
		if (useCGI) {
   d5276:	782b      	ldrb	r3, [r5, #0]
			return cellularScanCGI();
   d5278:	4620      	mov	r0, r4
			// Use Cellular Global Identity (CGI) on Device OS 1.2.1 and later
			// if the modem is not a global 2G (G350). On the G350, AT+CGEG=5
			// works so a better multi-tower result can be returned.
			useCGI = !CellularHelper.getModel().startsWith("SARA-G350");
		}
		if (useCGI) {
   d527a:	b113      	cbz	r3, d5282 <_ZN23GoogleMapsDeviceLocator12cellularScanEv+0x56>
			return cellularScanCGI();
   d527c:	f7ff fe8a 	bl	d4f94 <_ZN23GoogleMapsDeviceLocator15cellularScanCGIEv>
   d5280:	e001      	b.n	d5286 <_ZN23GoogleMapsDeviceLocator12cellularScanEv+0x5a>
   d5282:	f7ff ff4d 	bl	d5120 <_ZN23GoogleMapsDeviceLocator12cellularScanEv.part.5.constprop.14>
	if (numAdded == 0) {
		requestBuf[0] = 0;
	}

	return requestBuf;
}
   d5286:	b009      	add	sp, #36	; 0x24
   d5288:	bd30      	pop	{r4, r5, pc}
   d528a:	bf00      	nop
   d528c:	2003e320 	.word	0x2003e320
   d5290:	2003e21d 	.word	0x2003e21d
   d5294:	2003e218 	.word	0x2003e218
   d5298:	2003e31d 	.word	0x2003e31d
   d529c:	2003e324 	.word	0x2003e324
   d52a0:	2003e214 	.word	0x2003e214
   d52a4:	000dbcc7 	.word	0x000dbcc7

000d52a8 <_ZN23GoogleMapsDeviceLocator15publishLocationEv>:
	return cellularScan();
#endif
}


void GoogleMapsDeviceLocator::publishLocation() {
   d52a8:	b530      	push	{r4, r5, lr}
   d52aa:	b085      	sub	sp, #20
   d52ac:	4605      	mov	r5, r0

	Serial.println("publishLocation");
   d52ae:	f002 ff9f 	bl	d81f0 <_Z16_fetch_usbserialv>
   d52b2:	4918      	ldr	r1, [pc, #96]	; (d5314 <_ZN23GoogleMapsDeviceLocator15publishLocationEv+0x6c>)
   d52b4:	f002 fc1d 	bl	d7af2 <_ZN5Print7printlnEPKc>
const char *GoogleMapsDeviceLocator::scan() {
#if Wiring_WiFi
	return wifiScan();
#endif
#if Wiring_Cellular
	return cellularScan();
   d52b8:	4628      	mov	r0, r5
   d52ba:	f7ff ffb7 	bl	d522c <_ZN23GoogleMapsDeviceLocator12cellularScanEv>
   d52be:	4604      	mov	r4, r0

	Serial.println("publishLocation");

	const char *scanData = scan();

	Serial.printlnf("scanData=%s", scanData);
   d52c0:	f002 ff96 	bl	d81f0 <_Z16_fetch_usbserialv>
   d52c4:	4623      	mov	r3, r4
   d52c6:	4a14      	ldr	r2, [pc, #80]	; (d5318 <_ZN23GoogleMapsDeviceLocator15publishLocationEv+0x70>)
   d52c8:	2101      	movs	r1, #1
   d52ca:	f002 fc3c 	bl	d7b46 <_ZN5Print11printf_implEbPKcz>

	if (scanData[0]) {
   d52ce:	7823      	ldrb	r3, [r4, #0]
   d52d0:	b1f3      	cbz	r3, d5310 <_ZN23GoogleMapsDeviceLocator15publishLocationEv+0x68>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d52d2:	f000 fb8b 	bl	d59ec <spark_cloud_flag_connected>

		if (Particle.connected()) {
   d52d6:	b1d8      	cbz	r0, d5310 <_ZN23GoogleMapsDeviceLocator15publishLocationEv+0x68>
   d52d8:	4b10      	ldr	r3, [pc, #64]	; (d531c <_ZN23GoogleMapsDeviceLocator15publishLocationEv+0x74>)
   d52da:	68e9      	ldr	r1, [r5, #12]
   d52dc:	781b      	ldrb	r3, [r3, #0]
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d52de:	f88d 3000 	strb.w	r3, [sp]
   d52e2:	4622      	mov	r2, r4
   d52e4:	233c      	movs	r3, #60	; 0x3c
   d52e6:	a802      	add	r0, sp, #8
   d52e8:	f000 fe68 	bl	d5fbc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d52ec:	9c03      	ldr	r4, [sp, #12]
   d52ee:	b17c      	cbz	r4, d5310 <_ZN23GoogleMapsDeviceLocator15publishLocationEv+0x68>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d52f0:	6863      	ldr	r3, [r4, #4]
   d52f2:	3b01      	subs	r3, #1
   d52f4:	6063      	str	r3, [r4, #4]
   d52f6:	b95b      	cbnz	r3, d5310 <_ZN23GoogleMapsDeviceLocator15publishLocationEv+0x68>
        {
          _M_dispose();
   d52f8:	6823      	ldr	r3, [r4, #0]
   d52fa:	4620      	mov	r0, r4
   d52fc:	689b      	ldr	r3, [r3, #8]
   d52fe:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d5300:	68a3      	ldr	r3, [r4, #8]
   d5302:	3b01      	subs	r3, #1
   d5304:	60a3      	str	r3, [r4, #8]
   d5306:	b91b      	cbnz	r3, d5310 <_ZN23GoogleMapsDeviceLocator15publishLocationEv+0x68>
            _M_destroy();
   d5308:	6823      	ldr	r3, [r4, #0]
   d530a:	4620      	mov	r0, r4
   d530c:	68db      	ldr	r3, [r3, #12]
   d530e:	4798      	blx	r3
			Particle.publish(eventName, scanData, PRIVATE);
		}
	}
}
   d5310:	b005      	add	sp, #20
   d5312:	bd30      	pop	{r4, r5, pc}
   d5314:	000dbcd1 	.word	0x000dbcd1
   d5318:	000dbce1 	.word	0x000dbce1
   d531c:	2003e21c 	.word	0x2003e21c

000d5320 <_ZN23GoogleMapsDeviceLocator4loopEv>:
	return *this;
}



void GoogleMapsDeviceLocator::loop() {
   d5320:	b510      	push	{r4, lr}
	switch(state) {
   d5322:	6a03      	ldr	r3, [r0, #32]
   d5324:	2b02      	cmp	r3, #2
	return *this;
}



void GoogleMapsDeviceLocator::loop() {
   d5326:	4604      	mov	r4, r0
	switch(state) {
   d5328:	d00b      	beq.n	d5342 <_ZN23GoogleMapsDeviceLocator4loopEv+0x22>
   d532a:	2b03      	cmp	r3, #3
   d532c:	d023      	beq.n	d5376 <_ZN23GoogleMapsDeviceLocator4loopEv+0x56>
   d532e:	2b00      	cmp	r3, #0
   d5330:	d134      	bne.n	d539c <_ZN23GoogleMapsDeviceLocator4loopEv+0x7c>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5332:	f000 fb5b 	bl	d59ec <spark_cloud_flag_connected>
	case CONNECT_WAIT_STATE:
		if (Particle.connected()) {
   d5336:	b388      	cbz	r0, d539c <_ZN23GoogleMapsDeviceLocator4loopEv+0x7c>
			state = CONNECTED_WAIT_STATE;
   d5338:	2302      	movs	r3, #2
   d533a:	6223      	str	r3, [r4, #32]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d533c:	f000 f9e2 	bl	d5704 <HAL_Timer_Get_Milli_Seconds>
   d5340:	e017      	b.n	d5372 <_ZN23GoogleMapsDeviceLocator4loopEv+0x52>
   d5342:	f000 f9df 	bl	d5704 <HAL_Timer_Get_Milli_Seconds>
			stateTime = millis();
		}
		break;

	case CONNECTED_WAIT_STATE:
		if (millis() - stateTime >= waitAfterConnect) {
   d5346:	69e3      	ldr	r3, [r4, #28]
   d5348:	1ac0      	subs	r0, r0, r3
   d534a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   d534c:	4298      	cmp	r0, r3
   d534e:	d325      	bcc.n	d539c <_ZN23GoogleMapsDeviceLocator4loopEv+0x7c>
			// Wait several seconds after connecting before doing the location
			if (locatorMode == LOCATOR_MODE_ONCE) {
   d5350:	6863      	ldr	r3, [r4, #4]
   d5352:	2b01      	cmp	r3, #1
   d5354:	d103      	bne.n	d535e <_ZN23GoogleMapsDeviceLocator4loopEv+0x3e>
				publishLocation();
   d5356:	4620      	mov	r0, r4
   d5358:	f7ff ffa6 	bl	d52a8 <_ZN23GoogleMapsDeviceLocator15publishLocationEv>
   d535c:	e000      	b.n	d5360 <_ZN23GoogleMapsDeviceLocator4loopEv+0x40>

				state = IDLE_STATE;
			}
			else
			if (locatorMode == LOCATOR_MODE_MANUAL) {
   d535e:	b913      	cbnz	r3, d5366 <_ZN23GoogleMapsDeviceLocator4loopEv+0x46>
				state = IDLE_STATE;
   d5360:	2304      	movs	r3, #4
   d5362:	6223      	str	r3, [r4, #32]
   d5364:	bd10      	pop	{r4, pc}
			}
			else {
				state = CONNECTED_STATE;
   d5366:	2303      	movs	r3, #3
   d5368:	6223      	str	r3, [r4, #32]
   d536a:	f000 f9cb 	bl	d5704 <HAL_Timer_Get_Milli_Seconds>
				stateTime = millis() - periodMs;
   d536e:	68a3      	ldr	r3, [r4, #8]
   d5370:	1ac0      	subs	r0, r0, r3
   d5372:	61e0      	str	r0, [r4, #28]
   d5374:	bd10      	pop	{r4, pc}
   d5376:	f000 fb39 	bl	d59ec <spark_cloud_flag_connected>
			}
		}
		break;

	case CONNECTED_STATE:
		if (Particle.connected()) {
   d537a:	b170      	cbz	r0, d539a <_ZN23GoogleMapsDeviceLocator4loopEv+0x7a>
   d537c:	f000 f9c2 	bl	d5704 <HAL_Timer_Get_Milli_Seconds>
			if (millis() - stateTime >= periodMs) {
   d5380:	69e3      	ldr	r3, [r4, #28]
   d5382:	1ac0      	subs	r0, r0, r3
   d5384:	68a3      	ldr	r3, [r4, #8]
   d5386:	4298      	cmp	r0, r3
   d5388:	d308      	bcc.n	d539c <_ZN23GoogleMapsDeviceLocator4loopEv+0x7c>
   d538a:	f000 f9bb 	bl	d5704 <HAL_Timer_Get_Milli_Seconds>
				stateTime = millis();
   d538e:	61e0      	str	r0, [r4, #28]
				publishLocation();
   d5390:	4620      	mov	r0, r4
	case IDLE_STATE:
		// Just hang out here forever (entered only on LOCATOR_MODE_ONCE)
		break;
	}

}
   d5392:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

	case CONNECTED_STATE:
		if (Particle.connected()) {
			if (millis() - stateTime >= periodMs) {
				stateTime = millis();
				publishLocation();
   d5396:	f7ff bf87 	b.w	d52a8 <_ZN23GoogleMapsDeviceLocator15publishLocationEv>
			}
		}
		else {
			// We have disconnected, rec
			state = CONNECT_WAIT_STATE;
   d539a:	6220      	str	r0, [r4, #32]
   d539c:	bd10      	pop	{r4, pc}

000d539e <_ZNSt8functionIFvPKcS1_EEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d539e:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d53a0:	2300      	movs	r3, #0
   d53a2:	6083      	str	r3, [r0, #8]
   d53a4:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d53a6:	4604      	mov	r4, r0
   d53a8:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d53aa:	b12b      	cbz	r3, d53b8 <_ZNSt8functionIFvPKcS1_EEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d53ac:	2202      	movs	r2, #2
   d53ae:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d53b0:	68eb      	ldr	r3, [r5, #12]
   d53b2:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d53b4:	68ab      	ldr	r3, [r5, #8]
   d53b6:	60a3      	str	r3, [r4, #8]
	}
    }
   d53b8:	4620      	mov	r0, r4
   d53ba:	bd38      	pop	{r3, r4, r5, pc}

000d53bc <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE>:
GoogleMapsDeviceLocator &GoogleMapsDeviceLocator::withEventName(const char *name) {
	this->eventName = name;
	return *this;
}

GoogleMapsDeviceLocator &GoogleMapsDeviceLocator::withSubscribe(GoogleMapsDeviceLocatorSubscriptionCallback callback) {
   d53bc:	b530      	push	{r4, r5, lr}
   d53be:	b08b      	sub	sp, #44	; 0x2c
   d53c0:	68c5      	ldr	r5, [r0, #12]
	this->callback = callback;
   d53c2:	6241      	str	r1, [r0, #36]	; 0x24
GoogleMapsDeviceLocator &GoogleMapsDeviceLocator::withEventName(const char *name) {
	this->eventName = name;
	return *this;
}

GoogleMapsDeviceLocator &GoogleMapsDeviceLocator::withSubscribe(GoogleMapsDeviceLocatorSubscriptionCallback callback) {
   d53c4:	4604      	mov	r4, r0
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, long seconds = 0, SleepOptionFlags flag = SLEEP_NETWORK_OFF) { return sleepPinImpl(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, std::chrono::seconds s, SleepOptionFlags flag = SLEEP_NETWORK_OFF) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, s.count(), flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, long seconds = 0) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, std::chrono::seconds s) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, flag, s.count()); }

    static String deviceID(void) { return spark_deviceID(); }
   d53c6:	a806      	add	r0, sp, #24
   d53c8:	f000 fb18 	bl	d59fc <spark_deviceID>
	this->callback = callback;

	snprintf(requestBuf, sizeof(requestBuf), "hook-response/%s/%s", eventName.c_str(), System.deviceID().c_str());
   d53cc:	9b06      	ldr	r3, [sp, #24]
   d53ce:	9300      	str	r3, [sp, #0]
   d53d0:	4a1b      	ldr	r2, [pc, #108]	; (d5440 <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE+0x84>)
   d53d2:	481c      	ldr	r0, [pc, #112]	; (d5444 <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE+0x88>)
   d53d4:	462b      	mov	r3, r5
   d53d6:	f44f 7180 	mov.w	r1, #256	; 0x100
   d53da:	f000 fbb7 	bl	d5b4c <snprintf>
   d53de:	a806      	add	r0, sp, #24
   d53e0:	f002 fc10 	bl	d7c04 <_ZN6StringD1Ev>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d53e4:	2500      	movs	r5, #0
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d53e6:	200c      	movs	r0, #12
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d53e8:	9504      	str	r5, [sp, #16]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d53ea:	f7fe fe56 	bl	d409a <_Znwj>
   d53ee:	b118      	cbz	r0, d53f8 <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE+0x3c>
	{ }

      _Bind(const _Bind&) = default;

      _Bind(_Bind&& __b)
      : _M_f(std::move(__b._M_f)), _M_bound_args(std::move(__b._M_bound_args))
   d53f0:	4b15      	ldr	r3, [pc, #84]	; (d5448 <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE+0x8c>)
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d53f2:	6084      	str	r4, [r0, #8]
   d53f4:	e880 0028 	stmia.w	r0, {r3, r5}
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d53f8:	4b14      	ldr	r3, [pc, #80]	; (d544c <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE+0x90>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d53fa:	9002      	str	r0, [sp, #8]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d53fc:	9305      	str	r3, [sp, #20]
        return spark_subscribe(eventName, handler, NULL, MY_DEVICES, deviceID, NULL);
    }

    bool subscribe(const char *eventName, wiring_event_handler_t handler, Spark_Subscription_Scope_TypeDef scope)
    {
        return subscribe_wiring(eventName, handler, scope);
   d53fe:	a902      	add	r1, sp, #8
	    _M_manager = &_My_handler::_M_manager;
   d5400:	4b13      	ldr	r3, [pc, #76]	; (d5450 <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE+0x94>)
   d5402:	9304      	str	r3, [sp, #16]
   d5404:	a806      	add	r0, sp, #24
   d5406:	f7ff ffca 	bl	d539e <_ZNSt8functionIFvPKcS1_EEC1ERKS3_>
    }

    bool subscribe_wiring(const char *eventName, wiring_event_handler_t handler, Spark_Subscription_Scope_TypeDef scope, const char *deviceID = NULL)
    {
        bool success = false;
        if (handler) // if the call-wrapper has wrapped a callable object
   d540a:	9b08      	ldr	r3, [sp, #32]
   d540c:	b17b      	cbz	r3, d542e <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE+0x72>
        {
            auto wrapper = new wiring_event_handler_t(handler);
   d540e:	2010      	movs	r0, #16
   d5410:	f7fe fe43 	bl	d409a <_Znwj>
   d5414:	4605      	mov	r5, r0
   d5416:	b150      	cbz	r0, d542e <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE+0x72>
   d5418:	a906      	add	r1, sp, #24
   d541a:	f7ff ffc0 	bl	d539e <_ZNSt8functionIFvPKcS1_EEC1ERKS3_>
            if (wrapper) {
                success = spark_subscribe(eventName, (EventHandler)call_wiring_event_handler, wrapper, scope, deviceID, NULL);
   d541e:	2300      	movs	r3, #0
   d5420:	9301      	str	r3, [sp, #4]
   d5422:	9300      	str	r3, [sp, #0]
   d5424:	462a      	mov	r2, r5
   d5426:	490b      	ldr	r1, [pc, #44]	; (d5454 <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE+0x98>)
   d5428:	4806      	ldr	r0, [pc, #24]	; (d5444 <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE+0x88>)
   d542a:	f000 faf7 	bl	d5a1c <spark_subscribe>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d542e:	a806      	add	r0, sp, #24
   d5430:	f7ff fd6e 	bl	d4f10 <_ZNSt14_Function_baseD1Ev>
   d5434:	a802      	add	r0, sp, #8
   d5436:	f7ff fd6b 	bl	d4f10 <_ZNSt14_Function_baseD1Ev>

	Particle.subscribe(requestBuf, &GoogleMapsDeviceLocator::subscriptionHandler, this, MY_DEVICES);

	return *this;
}
   d543a:	4620      	mov	r0, r4
   d543c:	b00b      	add	sp, #44	; 0x2c
   d543e:	bd30      	pop	{r4, r5, pc}
   d5440:	000dbced 	.word	0x000dbced
   d5444:	2003e21d 	.word	0x2003e21d
   d5448:	000d4e51 	.word	0x000d4e51
   d544c:	000d4d81 	.word	0x000d4d81
   d5450:	000d4ed9 	.word	0x000d4ed9
   d5454:	000d5d8d 	.word	0x000d5d8d

000d5458 <_GLOBAL__sub_I__ZN23GoogleMapsDeviceLocatorC2Ev>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d5458:	4b02      	ldr	r3, [pc, #8]	; (d5464 <_GLOBAL__sub_I__ZN23GoogleMapsDeviceLocatorC2Ev+0xc>)
   d545a:	2201      	movs	r2, #1
   d545c:	701a      	strb	r2, [r3, #0]
   d545e:	f000 b969 	b.w	d5734 <HAL_Pin_Map>
   d5462:	bf00      	nop
   d5464:	2003e21c 	.word	0x2003e21c

000d5468 <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d5468:	6803      	ldr	r3, [r0, #0]
   d546a:	b2c9      	uxtb	r1, r1
   d546c:	689b      	ldr	r3, [r3, #8]
   d546e:	4718      	bx	r3

000d5470 <_ZN9SeeedOLED11sendCommandEh>:
  delay(5);
  sendCommand(SeeedOLED_Normal_Display_Cmd); //Set Normal Display (default)
}

void SeeedOLED::sendCommand(unsigned char command)
{
   d5470:	b510      	push	{r4, lr}
   d5472:	460c      	mov	r4, r1
  Wire.beginTransmission(SeeedOLED_Address); // begin I2C communication
   d5474:	f002 ff84 	bl	d8380 <_Z19__fetch_global_Wirev>
   d5478:	213c      	movs	r1, #60	; 0x3c
   d547a:	f000 ffa7 	bl	d63cc <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(SeeedOLED_Command_Mode);        // Set OLED Command mode
   d547e:	f002 ff7f 	bl	d8380 <_Z19__fetch_global_Wirev>
   d5482:	2180      	movs	r1, #128	; 0x80
   d5484:	f7ff fff0 	bl	d5468 <_ZN7TwoWire5writeEi>
  Wire.write(command);
   d5488:	f002 ff7a 	bl	d8380 <_Z19__fetch_global_Wirev>
   d548c:	6803      	ldr	r3, [r0, #0]
   d548e:	4621      	mov	r1, r4
   d5490:	689b      	ldr	r3, [r3, #8]
   d5492:	4798      	blx	r3
  Wire.endTransmission(); // End I2C communication
   d5494:	f002 ff74 	bl	d8380 <_Z19__fetch_global_Wirev>
}
   d5498:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void SeeedOLED::sendCommand(unsigned char command)
{
  Wire.beginTransmission(SeeedOLED_Address); // begin I2C communication
  Wire.write(SeeedOLED_Command_Mode);        // Set OLED Command mode
  Wire.write(command);
  Wire.endTransmission(); // End I2C communication
   d549c:	f000 bf9d 	b.w	d63da <_ZN7TwoWire15endTransmissionEv>

000d54a0 <_ZN9SeeedOLED4initEv>:
        {0x00, 0x41, 0x36, 0x08, 0x00, 0x00, 0x00, 0x00},
        {0x00, 0x02, 0x01, 0x01, 0x02, 0x01, 0x00, 0x00},
        {0x00, 0x02, 0x05, 0x05, 0x02, 0x00, 0x00, 0x00}};

void SeeedOLED::init(void)
{
   d54a0:	b510      	push	{r4, lr}
  sendCommand(SeeedOLED_Display_Off_Cmd); //display off
   d54a2:	21ae      	movs	r1, #174	; 0xae
        {0x00, 0x41, 0x36, 0x08, 0x00, 0x00, 0x00, 0x00},
        {0x00, 0x02, 0x01, 0x01, 0x02, 0x01, 0x00, 0x00},
        {0x00, 0x02, 0x05, 0x05, 0x02, 0x00, 0x00, 0x00}};

void SeeedOLED::init(void)
{
   d54a4:	4604      	mov	r4, r0
  sendCommand(SeeedOLED_Display_Off_Cmd); //display off
   d54a6:	f7ff ffe3 	bl	d5470 <_ZN9SeeedOLED11sendCommandEh>
  delay(5);
   d54aa:	2005      	movs	r0, #5
   d54ac:	f000 fb6e 	bl	d5b8c <delay>
  sendCommand(SeeedOLED_Display_On_Cmd); //display on
   d54b0:	21af      	movs	r1, #175	; 0xaf
   d54b2:	4620      	mov	r0, r4
   d54b4:	f7ff ffdc 	bl	d5470 <_ZN9SeeedOLED11sendCommandEh>
  delay(5);
   d54b8:	2005      	movs	r0, #5
   d54ba:	f000 fb67 	bl	d5b8c <delay>
  sendCommand(SeeedOLED_Normal_Display_Cmd); //Set Normal Display (default)
   d54be:	4620      	mov	r0, r4
   d54c0:	21a6      	movs	r1, #166	; 0xa6
}
   d54c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
{
  sendCommand(SeeedOLED_Display_Off_Cmd); //display off
  delay(5);
  sendCommand(SeeedOLED_Display_On_Cmd); //display on
  delay(5);
  sendCommand(SeeedOLED_Normal_Display_Cmd); //Set Normal Display (default)
   d54c6:	f7ff bfd3 	b.w	d5470 <_ZN9SeeedOLED11sendCommandEh>

000d54ca <_ZN9SeeedOLED11setPageModeEv>:
  sendCommand(0x20); //set addressing mode
  sendCommand(0x00); //set horizontal addressing mode
}

void SeeedOLED::setPageMode()
{
   d54ca:	b510      	push	{r4, lr}
  addressingMode = PAGE_MODE;
   d54cc:	2301      	movs	r3, #1
  sendCommand(0x20); //set addressing mode
  sendCommand(0x00); //set horizontal addressing mode
}

void SeeedOLED::setPageMode()
{
   d54ce:	4604      	mov	r4, r0
  addressingMode = PAGE_MODE;
   d54d0:	7003      	strb	r3, [r0, #0]
  sendCommand(0x20); //set addressing mode
   d54d2:	2120      	movs	r1, #32
   d54d4:	f7ff ffcc 	bl	d5470 <_ZN9SeeedOLED11sendCommandEh>
  sendCommand(0x02); //set page addressing mode
   d54d8:	4620      	mov	r0, r4
   d54da:	2102      	movs	r1, #2
}
   d54dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

void SeeedOLED::setPageMode()
{
  addressingMode = PAGE_MODE;
  sendCommand(0x20); //set addressing mode
  sendCommand(0x02); //set page addressing mode
   d54e0:	f7ff bfc6 	b.w	d5470 <_ZN9SeeedOLED11sendCommandEh>

000d54e4 <_ZN9SeeedOLED9setTextXYEhh>:
}

void SeeedOLED::setTextXY(unsigned char Row, unsigned char Column)
{
   d54e4:	b538      	push	{r3, r4, r5, lr}
  sendCommand(0xB0 + Row);                        //set page address
   d54e6:	3950      	subs	r1, #80	; 0x50
  sendCommand(0x20); //set addressing mode
  sendCommand(0x02); //set page addressing mode
}

void SeeedOLED::setTextXY(unsigned char Row, unsigned char Column)
{
   d54e8:	4614      	mov	r4, r2
  sendCommand(0xB0 + Row);                        //set page address
   d54ea:	b2c9      	uxtb	r1, r1
  sendCommand(0x20); //set addressing mode
  sendCommand(0x02); //set page addressing mode
}

void SeeedOLED::setTextXY(unsigned char Row, unsigned char Column)
{
   d54ec:	4605      	mov	r5, r0
  sendCommand(0xB0 + Row);                        //set page address
   d54ee:	f7ff ffbf 	bl	d5470 <_ZN9SeeedOLED11sendCommandEh>
  sendCommand(0x00 + (8 * Column & 0x0F));        //set column lower address
   d54f2:	00e1      	lsls	r1, r4, #3
   d54f4:	4628      	mov	r0, r5
   d54f6:	f001 0108 	and.w	r1, r1, #8
   d54fa:	f7ff ffb9 	bl	d5470 <_ZN9SeeedOLED11sendCommandEh>
  sendCommand(0x10 + ((8 * Column >> 4) & 0x0F)); //set column higher address
   d54fe:	f3c4 0143 	ubfx	r1, r4, #1, #4
   d5502:	4628      	mov	r0, r5
   d5504:	3110      	adds	r1, #16
}
   d5506:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

void SeeedOLED::setTextXY(unsigned char Row, unsigned char Column)
{
  sendCommand(0xB0 + Row);                        //set page address
  sendCommand(0x00 + (8 * Column & 0x0F));        //set column lower address
  sendCommand(0x10 + ((8 * Column >> 4) & 0x0F)); //set column higher address
   d550a:	f7ff bfb1 	b.w	d5470 <_ZN9SeeedOLED11sendCommandEh>

000d550e <_ZN9SeeedOLED8sendDataEh>:
  sendCommand(SeeedOLED_Display_On_Cmd); //display on
  setTextXY(0, 0);
}

void SeeedOLED::sendData(unsigned char Data)
{
   d550e:	b510      	push	{r4, lr}
   d5510:	460c      	mov	r4, r1
  Wire.beginTransmission(SeeedOLED_Address); // begin I2C transmission
   d5512:	f002 ff35 	bl	d8380 <_Z19__fetch_global_Wirev>
   d5516:	213c      	movs	r1, #60	; 0x3c
   d5518:	f000 ff58 	bl	d63cc <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(SeeedOLED_Data_Mode);           // data mode
   d551c:	f002 ff30 	bl	d8380 <_Z19__fetch_global_Wirev>
   d5520:	2140      	movs	r1, #64	; 0x40
   d5522:	f7ff ffa1 	bl	d5468 <_ZN7TwoWire5writeEi>
  Wire.write(Data);
   d5526:	f002 ff2b 	bl	d8380 <_Z19__fetch_global_Wirev>
   d552a:	6803      	ldr	r3, [r0, #0]
   d552c:	4621      	mov	r1, r4
   d552e:	689b      	ldr	r3, [r3, #8]
   d5530:	4798      	blx	r3
  Wire.endTransmission(); // stop I2C transmission
   d5532:	f002 ff25 	bl	d8380 <_Z19__fetch_global_Wirev>
}
   d5536:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void SeeedOLED::sendData(unsigned char Data)
{
  Wire.beginTransmission(SeeedOLED_Address); // begin I2C transmission
  Wire.write(SeeedOLED_Data_Mode);           // data mode
  Wire.write(Data);
  Wire.endTransmission(); // stop I2C transmission
   d553a:	f000 bf4e 	b.w	d63da <_ZN7TwoWire15endTransmissionEv>
	...

000d5540 <_ZN9SeeedOLED7putCharEh>:
}

void SeeedOLED::putChar(unsigned char C)
{
  if (C < 32 || C > 127) //Ignore non-printable ASCII characters. This can be modified for multilingual font.
   d5540:	f1a1 0320 	sub.w	r3, r1, #32
  {
    C = ' '; //Space
   d5544:	2b5f      	cmp	r3, #95	; 0x5f
   d5546:	4b0b      	ldr	r3, [pc, #44]	; (d5574 <_ZN9SeeedOLED7putCharEh+0x34>)
   d5548:	bf88      	it	hi
   d554a:	2120      	movhi	r1, #32
  Wire.write(Data);
  Wire.endTransmission(); // stop I2C transmission
}

void SeeedOLED::putChar(unsigned char C)
{
   d554c:	b570      	push	{r4, r5, r6, lr}
   d554e:	f46f 7280 	mvn.w	r2, #256	; 0x100
   d5552:	eb03 05c1 	add.w	r5, r3, r1, lsl #3
   d5556:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   d555a:	4606      	mov	r6, r0
   d555c:	4415      	add	r5, r2
   d555e:	f1a3 04f9 	sub.w	r4, r3, #249	; 0xf9
  }
  unsigned char i = 0;
  for (i = 0; i < 8; i++)
  {
    //read bytes from code memory
    sendData(pgm_read_byte(&BasicFont[C - 32][i])); //font array starts at 0, ASCII starts at 32. Hence the translation
   d5562:	f815 1f01 	ldrb.w	r1, [r5, #1]!
   d5566:	4630      	mov	r0, r6
   d5568:	f7ff ffd1 	bl	d550e <_ZN9SeeedOLED8sendDataEh>
  if (C < 32 || C > 127) //Ignore non-printable ASCII characters. This can be modified for multilingual font.
  {
    C = ' '; //Space
  }
  unsigned char i = 0;
  for (i = 0; i < 8; i++)
   d556c:	42a5      	cmp	r5, r4
   d556e:	d1f8      	bne.n	d5562 <_ZN9SeeedOLED7putCharEh+0x22>
  {
    //read bytes from code memory
    sendData(pgm_read_byte(&BasicFont[C - 32][i])); //font array starts at 0, ASCII starts at 32. Hence the translation
  }
}
   d5570:	bd70      	pop	{r4, r5, r6, pc}
   d5572:	bf00      	nop
   d5574:	000dbd01 	.word	0x000dbd01

000d5578 <_ZN9SeeedOLED12clearDisplayEv>:
  sendCommand(0x00 + (8 * Column & 0x0F));        //set column lower address
  sendCommand(0x10 + ((8 * Column >> 4) & 0x0F)); //set column higher address
}

void SeeedOLED::clearDisplay()
{
   d5578:	b570      	push	{r4, r5, r6, lr}
  unsigned char i, j;
  sendCommand(SeeedOLED_Display_Off_Cmd); //display off
   d557a:	21ae      	movs	r1, #174	; 0xae
  sendCommand(0x00 + (8 * Column & 0x0F));        //set column lower address
  sendCommand(0x10 + ((8 * Column >> 4) & 0x0F)); //set column higher address
}

void SeeedOLED::clearDisplay()
{
   d557c:	4605      	mov	r5, r0
  unsigned char i, j;
  sendCommand(SeeedOLED_Display_Off_Cmd); //display off
   d557e:	f7ff ff77 	bl	d5470 <_ZN9SeeedOLED11sendCommandEh>
   d5582:	2600      	movs	r6, #0
  for (j = 0; j < 8; j++)
  {
    setTextXY(j, 0);
   d5584:	2200      	movs	r2, #0
   d5586:	b2f1      	uxtb	r1, r6
   d5588:	4628      	mov	r0, r5
   d558a:	f7ff ffab 	bl	d54e4 <_ZN9SeeedOLED9setTextXYEhh>
   d558e:	2410      	movs	r4, #16
    {
      for (i = 0; i < 16; i++) //clear all columns
      {
        putChar(' ');
   d5590:	2120      	movs	r1, #32
   d5592:	4628      	mov	r0, r5
   d5594:	3c01      	subs	r4, #1
   d5596:	f7ff ffd3 	bl	d5540 <_ZN9SeeedOLED7putCharEh>
  sendCommand(SeeedOLED_Display_Off_Cmd); //display off
  for (j = 0; j < 8; j++)
  {
    setTextXY(j, 0);
    {
      for (i = 0; i < 16; i++) //clear all columns
   d559a:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   d559e:	d1f7      	bne.n	d5590 <_ZN9SeeedOLED12clearDisplayEv+0x18>
   d55a0:	3601      	adds	r6, #1

void SeeedOLED::clearDisplay()
{
  unsigned char i, j;
  sendCommand(SeeedOLED_Display_Off_Cmd); //display off
  for (j = 0; j < 8; j++)
   d55a2:	2e08      	cmp	r6, #8
   d55a4:	d1ee      	bne.n	d5584 <_ZN9SeeedOLED12clearDisplayEv+0xc>
      {
        putChar(' ');
      }
    }
  }
  sendCommand(SeeedOLED_Display_On_Cmd); //display on
   d55a6:	4628      	mov	r0, r5
   d55a8:	21af      	movs	r1, #175	; 0xaf
   d55aa:	f7ff ff61 	bl	d5470 <_ZN9SeeedOLED11sendCommandEh>
  setTextXY(0, 0);
   d55ae:	4622      	mov	r2, r4
   d55b0:	4621      	mov	r1, r4
   d55b2:	4628      	mov	r0, r5
}
   d55b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        putChar(' ');
      }
    }
  }
  sendCommand(SeeedOLED_Display_On_Cmd); //display on
  setTextXY(0, 0);
   d55b8:	f7ff bf94 	b.w	d54e4 <_ZN9SeeedOLED9setTextXYEhh>

000d55bc <_ZN9SeeedOLED9putStringEPKc>:
    sendData(pgm_read_byte(&BasicFont[C - 32][i])); //font array starts at 0, ASCII starts at 32. Hence the translation
  }
}

void SeeedOLED::putString(const char *String)
{
   d55bc:	b570      	push	{r4, r5, r6, lr}
   d55be:	4605      	mov	r5, r0
   d55c0:	460e      	mov	r6, r1
   d55c2:	2400      	movs	r4, #0
  unsigned char i = 0;
  while (String[i])
   d55c4:	b2e3      	uxtb	r3, r4
   d55c6:	3401      	adds	r4, #1
   d55c8:	5cf1      	ldrb	r1, [r6, r3]
   d55ca:	b119      	cbz	r1, d55d4 <_ZN9SeeedOLED9putStringEPKc+0x18>
  {
    putChar(String[i]);
   d55cc:	4628      	mov	r0, r5
   d55ce:	f7ff ffb7 	bl	d5540 <_ZN9SeeedOLED7putCharEh>
}

void SeeedOLED::putString(const char *String)
{
  unsigned char i = 0;
  while (String[i])
   d55d2:	e7f7      	b.n	d55c4 <_ZN9SeeedOLED9putStringEPKc+0x8>
   d55d4:	bd70      	pop	{r4, r5, r6, pc}

000d55d6 <_ZN9SeeedOLED9putNumberEl>:
    i++;
  }
}

unsigned char SeeedOLED::putNumber(long long_num)
{
   d55d6:	b5f0      	push	{r4, r5, r6, r7, lr}
   d55d8:	b085      	sub	sp, #20
  unsigned char char_buffer[10] = "";
   d55da:	2300      	movs	r3, #0
  unsigned char i = 0;
  unsigned char f = 0;

  if (long_num < 0)
   d55dc:	1e0e      	subs	r6, r1, #0
    i++;
  }
}

unsigned char SeeedOLED::putNumber(long long_num)
{
   d55de:	4607      	mov	r7, r0
  unsigned char char_buffer[10] = "";
   d55e0:	9301      	str	r3, [sp, #4]
   d55e2:	9302      	str	r3, [sp, #8]
   d55e4:	f8ad 300c 	strh.w	r3, [sp, #12]
  unsigned char i = 0;
  unsigned char f = 0;

  if (long_num < 0)
   d55e8:	da07      	bge.n	d55fa <_ZN9SeeedOLED9putNumberEl+0x24>
  {
    f = 1;
    putChar('-');
   d55ea:	212d      	movs	r1, #45	; 0x2d
   d55ec:	f7ff ffa8 	bl	d5540 <_ZN9SeeedOLED7putCharEh>
    long_num = -long_num;
   d55f0:	4276      	negs	r6, r6
  unsigned char i = 0;
  unsigned char f = 0;

  if (long_num < 0)
  {
    f = 1;
   d55f2:	2301      	movs	r3, #1

unsigned char SeeedOLED::putNumber(long long_num)
{
  unsigned char char_buffer[10] = "";
  unsigned char i = 0;
  unsigned char f = 0;
   d55f4:	2400      	movs	r4, #0
    return f;
  }

  while (long_num > 0)
  {
    char_buffer[i++] = long_num % 10;
   d55f6:	210a      	movs	r1, #10
   d55f8:	e005      	b.n	d5606 <_ZN9SeeedOLED9putNumberEl+0x30>
  {
    f = 1;
    putChar('-');
    long_num = -long_num;
  }
  else if (long_num == 0)
   d55fa:	d1fb      	bne.n	d55f4 <_ZN9SeeedOLED9putNumberEl+0x1e>
  {
    f = 1;
    putChar('0');
   d55fc:	2130      	movs	r1, #48	; 0x30
   d55fe:	f7ff ff9f 	bl	d5540 <_ZN9SeeedOLED7putCharEh>
    return f;
   d5602:	2001      	movs	r0, #1
   d5604:	e01d      	b.n	d5642 <_ZN9SeeedOLED9putNumberEl+0x6c>
  }

  while (long_num > 0)
  {
    char_buffer[i++] = long_num % 10;
   d5606:	aa04      	add	r2, sp, #16
   d5608:	1c65      	adds	r5, r4, #1
   d560a:	4414      	add	r4, r2
   d560c:	b2ed      	uxtb	r5, r5
   d560e:	fb96 f2f1 	sdiv	r2, r6, r1
   d5612:	fb01 6612 	mls	r6, r1, r2, r6
   d5616:	f804 6c0c 	strb.w	r6, [r4, #-12]
   d561a:	462c      	mov	r4, r5
    f = 1;
    putChar('0');
    return f;
  }

  while (long_num > 0)
   d561c:	4616      	mov	r6, r2
   d561e:	2a00      	cmp	r2, #0
   d5620:	d1f1      	bne.n	d5606 <_ZN9SeeedOLED9putNumberEl+0x30>
  {
    char_buffer[i++] = long_num % 10;
    long_num /= 10;
  }

  f = f + i;
   d5622:	442b      	add	r3, r5
   d5624:	b2dc      	uxtb	r4, r3
  for (; i > 0; i--)
   d5626:	b15d      	cbz	r5, d5640 <_ZN9SeeedOLED9putNumberEl+0x6a>
  {
    putChar('0' + char_buffer[i - 1]);
   d5628:	ab04      	add	r3, sp, #16
   d562a:	442b      	add	r3, r5
   d562c:	4638      	mov	r0, r7
   d562e:	f813 1c0d 	ldrb.w	r1, [r3, #-13]
   d5632:	3130      	adds	r1, #48	; 0x30
   d5634:	b2c9      	uxtb	r1, r1
    char_buffer[i++] = long_num % 10;
    long_num /= 10;
  }

  f = f + i;
  for (; i > 0; i--)
   d5636:	3d01      	subs	r5, #1
  {
    putChar('0' + char_buffer[i - 1]);
   d5638:	f7ff ff82 	bl	d5540 <_ZN9SeeedOLED7putCharEh>
    char_buffer[i++] = long_num % 10;
    long_num /= 10;
  }

  f = f + i;
  for (; i > 0; i--)
   d563c:	b2ed      	uxtb	r5, r5
   d563e:	e7f2      	b.n	d5626 <_ZN9SeeedOLED9putNumberEl+0x50>
  {
    putChar('0' + char_buffer[i - 1]);
  }
  return f;
   d5640:	4620      	mov	r0, r4
}
   d5642:	b005      	add	sp, #20
   d5644:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5646 <_ZN9SeeedOLED16setNormalDisplayEv>:
  sendCommand(SeeedOLED_Dectivate_Scroll_Cmd);
}

void SeeedOLED::setNormalDisplay()
{
  sendCommand(SeeedOLED_Normal_Display_Cmd);
   d5646:	21a6      	movs	r1, #166	; 0xa6
   d5648:	f7ff bf12 	b.w	d5470 <_ZN9SeeedOLED11sendCommandEh>

000d564c <_GLOBAL__sub_I__ZN9SeeedOLED4initEv>:
   d564c:	f000 b872 	b.w	d5734 <HAL_Pin_Map>

000d5650 <cellular_command>:
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(CellularSignalHal*, cellular_signal_t*))
DYNALIB_FN(18, hal_cellular, cellular_command, cellular_result_t(_CALLBACKPTR_MDM, void*, system_tick_t, const char*, ...))
   d5650:	b508      	push	{r3, lr}
   d5652:	4b02      	ldr	r3, [pc, #8]	; (d565c <cellular_command+0xc>)
   d5654:	681b      	ldr	r3, [r3, #0]
   d5656:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d5658:	9301      	str	r3, [sp, #4]
   d565a:	bd08      	pop	{r3, pc}
   d565c:	00030274 	.word	0x00030274

000d5660 <cellular_global_identity>:
DYNALIB_FN(35, hal_cellular, cellular_get_active_sim, cellular_result_t(int*, void*))
DYNALIB_FN(36, hal_cellular, cellular_credentials_clear, int(void*))
#define BASE_CELL_IDX 37 // Base index for all subsequent functions
#endif // !HAL_PLATFORM_MESH

DYNALIB_FN(BASE_CELL_IDX + 0, hal_cellular, cellular_global_identity, cellular_result_t(CellularGlobalIdentity*, void*))
   d5660:	b508      	push	{r3, lr}
   d5662:	4b03      	ldr	r3, [pc, #12]	; (d5670 <cellular_global_identity+0x10>)
   d5664:	681b      	ldr	r3, [r3, #0]
   d5666:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d566a:	9301      	str	r3, [sp, #4]
   d566c:	bd08      	pop	{r3, pc}
   d566e:	0000      	.short	0x0000
   d5670:	00030274 	.word	0x00030274

000d5674 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d5674:	b508      	push	{r3, lr}
   d5676:	4b02      	ldr	r3, [pc, #8]	; (d5680 <os_thread_is_current+0xc>)
   d5678:	681b      	ldr	r3, [r3, #0]
   d567a:	689b      	ldr	r3, [r3, #8]
   d567c:	9301      	str	r3, [sp, #4]
   d567e:	bd08      	pop	{r3, pc}
   d5680:	00030248 	.word	0x00030248

000d5684 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d5684:	b508      	push	{r3, lr}
   d5686:	4b02      	ldr	r3, [pc, #8]	; (d5690 <os_thread_join+0xc>)
   d5688:	681b      	ldr	r3, [r3, #0]
   d568a:	691b      	ldr	r3, [r3, #16]
   d568c:	9301      	str	r3, [sp, #4]
   d568e:	bd08      	pop	{r3, pc}
   d5690:	00030248 	.word	0x00030248

000d5694 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d5694:	b508      	push	{r3, lr}
   d5696:	4b02      	ldr	r3, [pc, #8]	; (d56a0 <os_thread_cleanup+0xc>)
   d5698:	681b      	ldr	r3, [r3, #0]
   d569a:	695b      	ldr	r3, [r3, #20]
   d569c:	9301      	str	r3, [sp, #4]
   d569e:	bd08      	pop	{r3, pc}
   d56a0:	00030248 	.word	0x00030248

000d56a4 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d56a4:	b508      	push	{r3, lr}
   d56a6:	4b02      	ldr	r3, [pc, #8]	; (d56b0 <os_mutex_recursive_create+0xc>)
   d56a8:	681b      	ldr	r3, [r3, #0]
   d56aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d56ac:	9301      	str	r3, [sp, #4]
   d56ae:	bd08      	pop	{r3, pc}
   d56b0:	00030248 	.word	0x00030248

000d56b4 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d56b4:	b508      	push	{r3, lr}
   d56b6:	4b02      	ldr	r3, [pc, #8]	; (d56c0 <os_mutex_recursive_destroy+0xc>)
   d56b8:	681b      	ldr	r3, [r3, #0]
   d56ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d56bc:	9301      	str	r3, [sp, #4]
   d56be:	bd08      	pop	{r3, pc}
   d56c0:	00030248 	.word	0x00030248

000d56c4 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d56c4:	b508      	push	{r3, lr}
   d56c6:	4b02      	ldr	r3, [pc, #8]	; (d56d0 <os_mutex_recursive_lock+0xc>)
   d56c8:	681b      	ldr	r3, [r3, #0]
   d56ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d56cc:	9301      	str	r3, [sp, #4]
   d56ce:	bd08      	pop	{r3, pc}
   d56d0:	00030248 	.word	0x00030248

000d56d4 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d56d4:	b508      	push	{r3, lr}
   d56d6:	4b02      	ldr	r3, [pc, #8]	; (d56e0 <os_mutex_recursive_unlock+0xc>)
   d56d8:	681b      	ldr	r3, [r3, #0]
   d56da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d56dc:	9301      	str	r3, [sp, #4]
   d56de:	bd08      	pop	{r3, pc}
   d56e0:	00030248 	.word	0x00030248

000d56e4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d56e4:	b508      	push	{r3, lr}
   d56e6:	4b02      	ldr	r3, [pc, #8]	; (d56f0 <HAL_RNG_GetRandomNumber+0xc>)
   d56e8:	681b      	ldr	r3, [r3, #0]
   d56ea:	685b      	ldr	r3, [r3, #4]
   d56ec:	9301      	str	r3, [sp, #4]
   d56ee:	bd08      	pop	{r3, pc}
   d56f0:	00030218 	.word	0x00030218

000d56f4 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d56f4:	b508      	push	{r3, lr}
   d56f6:	4b02      	ldr	r3, [pc, #8]	; (d5700 <HAL_Delay_Microseconds+0xc>)
   d56f8:	681b      	ldr	r3, [r3, #0]
   d56fa:	68db      	ldr	r3, [r3, #12]
   d56fc:	9301      	str	r3, [sp, #4]
   d56fe:	bd08      	pop	{r3, pc}
   d5700:	00030218 	.word	0x00030218

000d5704 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d5704:	b508      	push	{r3, lr}
   d5706:	4b02      	ldr	r3, [pc, #8]	; (d5710 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d5708:	681b      	ldr	r3, [r3, #0]
   d570a:	695b      	ldr	r3, [r3, #20]
   d570c:	9301      	str	r3, [sp, #4]
   d570e:	bd08      	pop	{r3, pc}
   d5710:	00030218 	.word	0x00030218

000d5714 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
   d5714:	b508      	push	{r3, lr}
   d5716:	4b02      	ldr	r3, [pc, #8]	; (d5720 <HAL_RTC_Get_UnixTime+0xc>)
   d5718:	681b      	ldr	r3, [r3, #0]
   d571a:	69db      	ldr	r3, [r3, #28]
   d571c:	9301      	str	r3, [sp, #4]
   d571e:	bd08      	pop	{r3, pc}
   d5720:	00030218 	.word	0x00030218

000d5724 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
   d5724:	b508      	push	{r3, lr}
   d5726:	4b02      	ldr	r3, [pc, #8]	; (d5730 <HAL_RTC_Time_Is_Valid+0xc>)
   d5728:	681b      	ldr	r3, [r3, #0]
   d572a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d572c:	9301      	str	r3, [sp, #4]
   d572e:	bd08      	pop	{r3, pc}
   d5730:	00030218 	.word	0x00030218

000d5734 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d5734:	b508      	push	{r3, lr}
   d5736:	4b02      	ldr	r3, [pc, #8]	; (d5740 <HAL_Pin_Map+0xc>)
   d5738:	681b      	ldr	r3, [r3, #0]
   d573a:	681b      	ldr	r3, [r3, #0]
   d573c:	9301      	str	r3, [sp, #4]
   d573e:	bd08      	pop	{r3, pc}
   d5740:	0003022c 	.word	0x0003022c

000d5744 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d5744:	b508      	push	{r3, lr}
   d5746:	4b02      	ldr	r3, [pc, #8]	; (d5750 <HAL_I2C_Begin+0xc>)
   d5748:	681b      	ldr	r3, [r3, #0]
   d574a:	68db      	ldr	r3, [r3, #12]
   d574c:	9301      	str	r3, [sp, #4]
   d574e:	bd08      	pop	{r3, pc}
   d5750:	00030228 	.word	0x00030228

000d5754 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
   d5754:	b508      	push	{r3, lr}
   d5756:	4b02      	ldr	r3, [pc, #8]	; (d5760 <HAL_I2C_Begin_Transmission+0xc>)
   d5758:	681b      	ldr	r3, [r3, #0]
   d575a:	699b      	ldr	r3, [r3, #24]
   d575c:	9301      	str	r3, [sp, #4]
   d575e:	bd08      	pop	{r3, pc}
   d5760:	00030228 	.word	0x00030228

000d5764 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d5764:	b508      	push	{r3, lr}
   d5766:	4b02      	ldr	r3, [pc, #8]	; (d5770 <HAL_I2C_End_Transmission+0xc>)
   d5768:	681b      	ldr	r3, [r3, #0]
   d576a:	69db      	ldr	r3, [r3, #28]
   d576c:	9301      	str	r3, [sp, #4]
   d576e:	bd08      	pop	{r3, pc}
   d5770:	00030228 	.word	0x00030228

000d5774 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d5774:	b508      	push	{r3, lr}
   d5776:	4b02      	ldr	r3, [pc, #8]	; (d5780 <HAL_I2C_Write_Data+0xc>)
   d5778:	681b      	ldr	r3, [r3, #0]
   d577a:	6a1b      	ldr	r3, [r3, #32]
   d577c:	9301      	str	r3, [sp, #4]
   d577e:	bd08      	pop	{r3, pc}
   d5780:	00030228 	.word	0x00030228

000d5784 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d5784:	b508      	push	{r3, lr}
   d5786:	4b02      	ldr	r3, [pc, #8]	; (d5790 <HAL_I2C_Available_Data+0xc>)
   d5788:	681b      	ldr	r3, [r3, #0]
   d578a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d578c:	9301      	str	r3, [sp, #4]
   d578e:	bd08      	pop	{r3, pc}
   d5790:	00030228 	.word	0x00030228

000d5794 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d5794:	b508      	push	{r3, lr}
   d5796:	4b02      	ldr	r3, [pc, #8]	; (d57a0 <HAL_I2C_Read_Data+0xc>)
   d5798:	681b      	ldr	r3, [r3, #0]
   d579a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d579c:	9301      	str	r3, [sp, #4]
   d579e:	bd08      	pop	{r3, pc}
   d57a0:	00030228 	.word	0x00030228

000d57a4 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d57a4:	b508      	push	{r3, lr}
   d57a6:	4b02      	ldr	r3, [pc, #8]	; (d57b0 <HAL_I2C_Peek_Data+0xc>)
   d57a8:	681b      	ldr	r3, [r3, #0]
   d57aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d57ac:	9301      	str	r3, [sp, #4]
   d57ae:	bd08      	pop	{r3, pc}
   d57b0:	00030228 	.word	0x00030228

000d57b4 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d57b4:	b508      	push	{r3, lr}
   d57b6:	4b02      	ldr	r3, [pc, #8]	; (d57c0 <HAL_I2C_Flush_Data+0xc>)
   d57b8:	681b      	ldr	r3, [r3, #0]
   d57ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d57bc:	9301      	str	r3, [sp, #4]
   d57be:	bd08      	pop	{r3, pc}
   d57c0:	00030228 	.word	0x00030228

000d57c4 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d57c4:	b508      	push	{r3, lr}
   d57c6:	4b02      	ldr	r3, [pc, #8]	; (d57d0 <HAL_I2C_Init+0xc>)
   d57c8:	681b      	ldr	r3, [r3, #0]
   d57ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d57cc:	9301      	str	r3, [sp, #4]
   d57ce:	bd08      	pop	{r3, pc}
   d57d0:	00030228 	.word	0x00030228

000d57d4 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d57d4:	b508      	push	{r3, lr}
   d57d6:	4b02      	ldr	r3, [pc, #8]	; (d57e0 <inet_inet_ntop+0xc>)
   d57d8:	681b      	ldr	r3, [r3, #0]
   d57da:	695b      	ldr	r3, [r3, #20]
   d57dc:	9301      	str	r3, [sp, #4]
   d57de:	bd08      	pop	{r3, pc}
   d57e0:	00030264 	.word	0x00030264

000d57e4 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d57e4:	b508      	push	{r3, lr}
   d57e6:	4b02      	ldr	r3, [pc, #8]	; (d57f0 <netdb_freeaddrinfo+0xc>)
   d57e8:	681b      	ldr	r3, [r3, #0]
   d57ea:	689b      	ldr	r3, [r3, #8]
   d57ec:	9301      	str	r3, [sp, #4]
   d57ee:	bd08      	pop	{r3, pc}
   d57f0:	00030268 	.word	0x00030268

000d57f4 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d57f4:	b508      	push	{r3, lr}
   d57f6:	4b02      	ldr	r3, [pc, #8]	; (d5800 <netdb_getaddrinfo+0xc>)
   d57f8:	681b      	ldr	r3, [r3, #0]
   d57fa:	68db      	ldr	r3, [r3, #12]
   d57fc:	9301      	str	r3, [sp, #4]
   d57fe:	bd08      	pop	{r3, pc}
   d5800:	00030268 	.word	0x00030268

000d5804 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d5804:	b508      	push	{r3, lr}
   d5806:	4b02      	ldr	r3, [pc, #8]	; (d5810 <HAL_USART_Init+0xc>)
   d5808:	681b      	ldr	r3, [r3, #0]
   d580a:	681b      	ldr	r3, [r3, #0]
   d580c:	9301      	str	r3, [sp, #4]
   d580e:	bd08      	pop	{r3, pc}
   d5810:	0003023c 	.word	0x0003023c

000d5814 <HAL_USART_End>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
   d5814:	b508      	push	{r3, lr}
   d5816:	4b02      	ldr	r3, [pc, #8]	; (d5820 <HAL_USART_End+0xc>)
   d5818:	681b      	ldr	r3, [r3, #0]
   d581a:	689b      	ldr	r3, [r3, #8]
   d581c:	9301      	str	r3, [sp, #4]
   d581e:	bd08      	pop	{r3, pc}
   d5820:	0003023c 	.word	0x0003023c

000d5824 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d5824:	b508      	push	{r3, lr}
   d5826:	4b02      	ldr	r3, [pc, #8]	; (d5830 <HAL_USART_Write_Data+0xc>)
   d5828:	681b      	ldr	r3, [r3, #0]
   d582a:	68db      	ldr	r3, [r3, #12]
   d582c:	9301      	str	r3, [sp, #4]
   d582e:	bd08      	pop	{r3, pc}
   d5830:	0003023c 	.word	0x0003023c

000d5834 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d5834:	b508      	push	{r3, lr}
   d5836:	4b02      	ldr	r3, [pc, #8]	; (d5840 <HAL_USART_Available_Data+0xc>)
   d5838:	681b      	ldr	r3, [r3, #0]
   d583a:	691b      	ldr	r3, [r3, #16]
   d583c:	9301      	str	r3, [sp, #4]
   d583e:	bd08      	pop	{r3, pc}
   d5840:	0003023c 	.word	0x0003023c

000d5844 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d5844:	b508      	push	{r3, lr}
   d5846:	4b02      	ldr	r3, [pc, #8]	; (d5850 <HAL_USART_Read_Data+0xc>)
   d5848:	681b      	ldr	r3, [r3, #0]
   d584a:	695b      	ldr	r3, [r3, #20]
   d584c:	9301      	str	r3, [sp, #4]
   d584e:	bd08      	pop	{r3, pc}
   d5850:	0003023c 	.word	0x0003023c

000d5854 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d5854:	b508      	push	{r3, lr}
   d5856:	4b02      	ldr	r3, [pc, #8]	; (d5860 <HAL_USART_Peek_Data+0xc>)
   d5858:	681b      	ldr	r3, [r3, #0]
   d585a:	699b      	ldr	r3, [r3, #24]
   d585c:	9301      	str	r3, [sp, #4]
   d585e:	bd08      	pop	{r3, pc}
   d5860:	0003023c 	.word	0x0003023c

000d5864 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d5864:	b508      	push	{r3, lr}
   d5866:	4b02      	ldr	r3, [pc, #8]	; (d5870 <HAL_USART_Flush_Data+0xc>)
   d5868:	681b      	ldr	r3, [r3, #0]
   d586a:	69db      	ldr	r3, [r3, #28]
   d586c:	9301      	str	r3, [sp, #4]
   d586e:	bd08      	pop	{r3, pc}
   d5870:	0003023c 	.word	0x0003023c

000d5874 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d5874:	b508      	push	{r3, lr}
   d5876:	4b02      	ldr	r3, [pc, #8]	; (d5880 <HAL_USART_Available_Data_For_Write+0xc>)
   d5878:	681b      	ldr	r3, [r3, #0]
   d587a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d587c:	9301      	str	r3, [sp, #4]
   d587e:	bd08      	pop	{r3, pc}
   d5880:	0003023c 	.word	0x0003023c

000d5884 <HAL_USART_BeginConfig>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, HAL_USART_BeginConfig, void(HAL_USART_Serial serial, uint32_t baud, uint32_t config, void *ptr))
   d5884:	b508      	push	{r3, lr}
   d5886:	4b02      	ldr	r3, [pc, #8]	; (d5890 <HAL_USART_BeginConfig+0xc>)
   d5888:	681b      	ldr	r3, [r3, #0]
   d588a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d588c:	9301      	str	r3, [sp, #4]
   d588e:	bd08      	pop	{r3, pc}
   d5890:	0003023c 	.word	0x0003023c

000d5894 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d5894:	b508      	push	{r3, lr}
   d5896:	4b02      	ldr	r3, [pc, #8]	; (d58a0 <HAL_USB_USART_Init+0xc>)
   d5898:	681b      	ldr	r3, [r3, #0]
   d589a:	681b      	ldr	r3, [r3, #0]
   d589c:	9301      	str	r3, [sp, #4]
   d589e:	bd08      	pop	{r3, pc}
   d58a0:	0003024c 	.word	0x0003024c

000d58a4 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d58a4:	b508      	push	{r3, lr}
   d58a6:	4b02      	ldr	r3, [pc, #8]	; (d58b0 <HAL_USB_USART_Begin+0xc>)
   d58a8:	681b      	ldr	r3, [r3, #0]
   d58aa:	685b      	ldr	r3, [r3, #4]
   d58ac:	9301      	str	r3, [sp, #4]
   d58ae:	bd08      	pop	{r3, pc}
   d58b0:	0003024c 	.word	0x0003024c

000d58b4 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   d58b4:	b508      	push	{r3, lr}
   d58b6:	4b02      	ldr	r3, [pc, #8]	; (d58c0 <HAL_USB_USART_End+0xc>)
   d58b8:	681b      	ldr	r3, [r3, #0]
   d58ba:	689b      	ldr	r3, [r3, #8]
   d58bc:	9301      	str	r3, [sp, #4]
   d58be:	bd08      	pop	{r3, pc}
   d58c0:	0003024c 	.word	0x0003024c

000d58c4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d58c4:	b508      	push	{r3, lr}
   d58c6:	4b02      	ldr	r3, [pc, #8]	; (d58d0 <HAL_USB_USART_Available_Data+0xc>)
   d58c8:	681b      	ldr	r3, [r3, #0]
   d58ca:	691b      	ldr	r3, [r3, #16]
   d58cc:	9301      	str	r3, [sp, #4]
   d58ce:	bd08      	pop	{r3, pc}
   d58d0:	0003024c 	.word	0x0003024c

000d58d4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d58d4:	b508      	push	{r3, lr}
   d58d6:	4b02      	ldr	r3, [pc, #8]	; (d58e0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d58d8:	681b      	ldr	r3, [r3, #0]
   d58da:	695b      	ldr	r3, [r3, #20]
   d58dc:	9301      	str	r3, [sp, #4]
   d58de:	bd08      	pop	{r3, pc}
   d58e0:	0003024c 	.word	0x0003024c

000d58e4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d58e4:	b508      	push	{r3, lr}
   d58e6:	4b02      	ldr	r3, [pc, #8]	; (d58f0 <HAL_USB_USART_Receive_Data+0xc>)
   d58e8:	681b      	ldr	r3, [r3, #0]
   d58ea:	699b      	ldr	r3, [r3, #24]
   d58ec:	9301      	str	r3, [sp, #4]
   d58ee:	bd08      	pop	{r3, pc}
   d58f0:	0003024c 	.word	0x0003024c

000d58f4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d58f4:	b508      	push	{r3, lr}
   d58f6:	4b02      	ldr	r3, [pc, #8]	; (d5900 <HAL_USB_USART_Send_Data+0xc>)
   d58f8:	681b      	ldr	r3, [r3, #0]
   d58fa:	69db      	ldr	r3, [r3, #28]
   d58fc:	9301      	str	r3, [sp, #4]
   d58fe:	bd08      	pop	{r3, pc}
   d5900:	0003024c 	.word	0x0003024c

000d5904 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d5904:	b508      	push	{r3, lr}
   d5906:	4b02      	ldr	r3, [pc, #8]	; (d5910 <HAL_USB_USART_Flush_Data+0xc>)
   d5908:	681b      	ldr	r3, [r3, #0]
   d590a:	6a1b      	ldr	r3, [r3, #32]
   d590c:	9301      	str	r3, [sp, #4]
   d590e:	bd08      	pop	{r3, pc}
   d5910:	0003024c 	.word	0x0003024c

000d5914 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d5914:	b508      	push	{r3, lr}
   d5916:	4b02      	ldr	r3, [pc, #8]	; (d5920 <panic_+0xc>)
   d5918:	681b      	ldr	r3, [r3, #0]
   d591a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d591c:	9301      	str	r3, [sp, #4]
   d591e:	bd08      	pop	{r3, pc}
   d5920:	00030260 	.word	0x00030260

000d5924 <log_message_v>:
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   d5924:	b508      	push	{r3, lr}
   d5926:	4b02      	ldr	r3, [pc, #8]	; (d5930 <log_message_v+0xc>)
   d5928:	681b      	ldr	r3, [r3, #0]
   d592a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d592c:	9301      	str	r3, [sp, #4]
   d592e:	bd08      	pop	{r3, pc}
   d5930:	00030260 	.word	0x00030260

000d5934 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   d5934:	b508      	push	{r3, lr}
   d5936:	4b02      	ldr	r3, [pc, #8]	; (d5940 <log_level_name+0xc>)
   d5938:	681b      	ldr	r3, [r3, #0]
   d593a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d593c:	9301      	str	r3, [sp, #4]
   d593e:	bd08      	pop	{r3, pc}
   d5940:	00030260 	.word	0x00030260

000d5944 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   d5944:	b508      	push	{r3, lr}
   d5946:	4b02      	ldr	r3, [pc, #8]	; (d5950 <log_set_callbacks+0xc>)
   d5948:	681b      	ldr	r3, [r3, #0]
   d594a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d594c:	9301      	str	r3, [sp, #4]
   d594e:	bd08      	pop	{r3, pc}
   d5950:	00030260 	.word	0x00030260

000d5954 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d5954:	b508      	push	{r3, lr}
   d5956:	4b02      	ldr	r3, [pc, #8]	; (d5960 <system_mode+0xc>)
   d5958:	681b      	ldr	r3, [r3, #0]
   d595a:	681b      	ldr	r3, [r3, #0]
   d595c:	9301      	str	r3, [sp, #4]
   d595e:	bd08      	pop	{r3, pc}
   d5960:	00030220 	.word	0x00030220

000d5964 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d5964:	b508      	push	{r3, lr}
   d5966:	4b02      	ldr	r3, [pc, #8]	; (d5970 <set_system_mode+0xc>)
   d5968:	681b      	ldr	r3, [r3, #0]
   d596a:	685b      	ldr	r3, [r3, #4]
   d596c:	9301      	str	r3, [sp, #4]
   d596e:	bd08      	pop	{r3, pc}
   d5970:	00030220 	.word	0x00030220

000d5974 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d5974:	b508      	push	{r3, lr}
   d5976:	4b02      	ldr	r3, [pc, #8]	; (d5980 <system_delay_ms+0xc>)
   d5978:	681b      	ldr	r3, [r3, #0]
   d597a:	695b      	ldr	r3, [r3, #20]
   d597c:	9301      	str	r3, [sp, #4]
   d597e:	bd08      	pop	{r3, pc}
   d5980:	00030220 	.word	0x00030220

000d5984 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d5984:	b508      	push	{r3, lr}
   d5986:	4b02      	ldr	r3, [pc, #8]	; (d5990 <application_thread_current+0xc>)
   d5988:	681b      	ldr	r3, [r3, #0]
   d598a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d598c:	9301      	str	r3, [sp, #4]
   d598e:	bd08      	pop	{r3, pc}
   d5990:	00030220 	.word	0x00030220

000d5994 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d5994:	b508      	push	{r3, lr}
   d5996:	4b02      	ldr	r3, [pc, #8]	; (d59a0 <application_thread_invoke+0xc>)
   d5998:	681b      	ldr	r3, [r3, #0]
   d599a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d599c:	9301      	str	r3, [sp, #4]
   d599e:	bd08      	pop	{r3, pc}
   d59a0:	00030220 	.word	0x00030220

000d59a4 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d59a4:	b508      	push	{r3, lr}
   d59a6:	4b02      	ldr	r3, [pc, #8]	; (d59b0 <system_thread_get_state+0xc>)
   d59a8:	681b      	ldr	r3, [r3, #0]
   d59aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d59ac:	9301      	str	r3, [sp, #4]
   d59ae:	bd08      	pop	{r3, pc}
   d59b0:	00030220 	.word	0x00030220

000d59b4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d59b4:	b508      	push	{r3, lr}
   d59b6:	4b03      	ldr	r3, [pc, #12]	; (d59c4 <system_ctrl_set_app_request_handler+0x10>)
   d59b8:	681b      	ldr	r3, [r3, #0]
   d59ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d59be:	9301      	str	r3, [sp, #4]
   d59c0:	bd08      	pop	{r3, pc}
   d59c2:	0000      	.short	0x0000
   d59c4:	00030220 	.word	0x00030220

000d59c8 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d59c8:	b508      	push	{r3, lr}
   d59ca:	4b03      	ldr	r3, [pc, #12]	; (d59d8 <system_ctrl_set_result+0x10>)
   d59cc:	681b      	ldr	r3, [r3, #0]
   d59ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d59d2:	9301      	str	r3, [sp, #4]
   d59d4:	bd08      	pop	{r3, pc}
   d59d6:	0000      	.short	0x0000
   d59d8:	00030220 	.word	0x00030220

000d59dc <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d59dc:	b508      	push	{r3, lr}
   d59de:	4b02      	ldr	r3, [pc, #8]	; (d59e8 <spark_process+0xc>)
   d59e0:	681b      	ldr	r3, [r3, #0]
   d59e2:	689b      	ldr	r3, [r3, #8]
   d59e4:	9301      	str	r3, [sp, #4]
   d59e6:	bd08      	pop	{r3, pc}
   d59e8:	00030244 	.word	0x00030244

000d59ec <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d59ec:	b508      	push	{r3, lr}
   d59ee:	4b02      	ldr	r3, [pc, #8]	; (d59f8 <spark_cloud_flag_connected+0xc>)
   d59f0:	681b      	ldr	r3, [r3, #0]
   d59f2:	695b      	ldr	r3, [r3, #20]
   d59f4:	9301      	str	r3, [sp, #4]
   d59f6:	bd08      	pop	{r3, pc}
   d59f8:	00030244 	.word	0x00030244

000d59fc <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   d59fc:	b508      	push	{r3, lr}
   d59fe:	4b02      	ldr	r3, [pc, #8]	; (d5a08 <spark_deviceID+0xc>)
   d5a00:	681b      	ldr	r3, [r3, #0]
   d5a02:	69db      	ldr	r3, [r3, #28]
   d5a04:	9301      	str	r3, [sp, #4]
   d5a06:	bd08      	pop	{r3, pc}
   d5a08:	00030244 	.word	0x00030244

000d5a0c <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d5a0c:	b508      	push	{r3, lr}
   d5a0e:	4b02      	ldr	r3, [pc, #8]	; (d5a18 <spark_send_event+0xc>)
   d5a10:	681b      	ldr	r3, [r3, #0]
   d5a12:	6a1b      	ldr	r3, [r3, #32]
   d5a14:	9301      	str	r3, [sp, #4]
   d5a16:	bd08      	pop	{r3, pc}
   d5a18:	00030244 	.word	0x00030244

000d5a1c <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   d5a1c:	b508      	push	{r3, lr}
   d5a1e:	4b02      	ldr	r3, [pc, #8]	; (d5a28 <spark_subscribe+0xc>)
   d5a20:	681b      	ldr	r3, [r3, #0]
   d5a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5a24:	9301      	str	r3, [sp, #4]
   d5a26:	bd08      	pop	{r3, pc}
   d5a28:	00030244 	.word	0x00030244

000d5a2c <spark_sync_time_pending>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d5a2c:	b508      	push	{r3, lr}
   d5a2e:	4b02      	ldr	r3, [pc, #8]	; (d5a38 <spark_sync_time_pending+0xc>)
   d5a30:	681b      	ldr	r3, [r3, #0]
   d5a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5a34:	9301      	str	r3, [sp, #4]
   d5a36:	bd08      	pop	{r3, pc}
   d5a38:	00030244 	.word	0x00030244

000d5a3c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d5a3c:	b508      	push	{r3, lr}
   d5a3e:	4b02      	ldr	r3, [pc, #8]	; (d5a48 <spark_set_random_seed_from_cloud_handler+0xc>)
   d5a40:	681b      	ldr	r3, [r3, #0]
   d5a42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5a44:	9301      	str	r3, [sp, #4]
   d5a46:	bd08      	pop	{r3, pc}
   d5a48:	00030244 	.word	0x00030244

000d5a4c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d5a4c:	b508      	push	{r3, lr}
   d5a4e:	4b02      	ldr	r3, [pc, #8]	; (d5a58 <network_connect+0xc>)
   d5a50:	681b      	ldr	r3, [r3, #0]
   d5a52:	685b      	ldr	r3, [r3, #4]
   d5a54:	9301      	str	r3, [sp, #4]
   d5a56:	bd08      	pop	{r3, pc}
   d5a58:	00030240 	.word	0x00030240

000d5a5c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d5a5c:	b508      	push	{r3, lr}
   d5a5e:	4b02      	ldr	r3, [pc, #8]	; (d5a68 <network_connecting+0xc>)
   d5a60:	681b      	ldr	r3, [r3, #0]
   d5a62:	689b      	ldr	r3, [r3, #8]
   d5a64:	9301      	str	r3, [sp, #4]
   d5a66:	bd08      	pop	{r3, pc}
   d5a68:	00030240 	.word	0x00030240

000d5a6c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d5a6c:	b508      	push	{r3, lr}
   d5a6e:	4b02      	ldr	r3, [pc, #8]	; (d5a78 <network_disconnect+0xc>)
   d5a70:	681b      	ldr	r3, [r3, #0]
   d5a72:	68db      	ldr	r3, [r3, #12]
   d5a74:	9301      	str	r3, [sp, #4]
   d5a76:	bd08      	pop	{r3, pc}
   d5a78:	00030240 	.word	0x00030240

000d5a7c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d5a7c:	b508      	push	{r3, lr}
   d5a7e:	4b02      	ldr	r3, [pc, #8]	; (d5a88 <network_ready+0xc>)
   d5a80:	681b      	ldr	r3, [r3, #0]
   d5a82:	691b      	ldr	r3, [r3, #16]
   d5a84:	9301      	str	r3, [sp, #4]
   d5a86:	bd08      	pop	{r3, pc}
   d5a88:	00030240 	.word	0x00030240

000d5a8c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d5a8c:	b508      	push	{r3, lr}
   d5a8e:	4b02      	ldr	r3, [pc, #8]	; (d5a98 <network_on+0xc>)
   d5a90:	681b      	ldr	r3, [r3, #0]
   d5a92:	695b      	ldr	r3, [r3, #20]
   d5a94:	9301      	str	r3, [sp, #4]
   d5a96:	bd08      	pop	{r3, pc}
   d5a98:	00030240 	.word	0x00030240

000d5a9c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d5a9c:	b508      	push	{r3, lr}
   d5a9e:	4b02      	ldr	r3, [pc, #8]	; (d5aa8 <network_off+0xc>)
   d5aa0:	681b      	ldr	r3, [r3, #0]
   d5aa2:	699b      	ldr	r3, [r3, #24]
   d5aa4:	9301      	str	r3, [sp, #4]
   d5aa6:	bd08      	pop	{r3, pc}
   d5aa8:	00030240 	.word	0x00030240

000d5aac <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d5aac:	b508      	push	{r3, lr}
   d5aae:	4b02      	ldr	r3, [pc, #8]	; (d5ab8 <network_listen+0xc>)
   d5ab0:	681b      	ldr	r3, [r3, #0]
   d5ab2:	69db      	ldr	r3, [r3, #28]
   d5ab4:	9301      	str	r3, [sp, #4]
   d5ab6:	bd08      	pop	{r3, pc}
   d5ab8:	00030240 	.word	0x00030240

000d5abc <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d5abc:	b508      	push	{r3, lr}
   d5abe:	4b02      	ldr	r3, [pc, #8]	; (d5ac8 <network_listening+0xc>)
   d5ac0:	681b      	ldr	r3, [r3, #0]
   d5ac2:	6a1b      	ldr	r3, [r3, #32]
   d5ac4:	9301      	str	r3, [sp, #4]
   d5ac6:	bd08      	pop	{r3, pc}
   d5ac8:	00030240 	.word	0x00030240

000d5acc <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d5acc:	b508      	push	{r3, lr}
   d5ace:	4b02      	ldr	r3, [pc, #8]	; (d5ad8 <network_set_listen_timeout+0xc>)
   d5ad0:	681b      	ldr	r3, [r3, #0]
   d5ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5ad4:	9301      	str	r3, [sp, #4]
   d5ad6:	bd08      	pop	{r3, pc}
   d5ad8:	00030240 	.word	0x00030240

000d5adc <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d5adc:	b508      	push	{r3, lr}
   d5ade:	4b02      	ldr	r3, [pc, #8]	; (d5ae8 <network_get_listen_timeout+0xc>)
   d5ae0:	681b      	ldr	r3, [r3, #0]
   d5ae2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5ae4:	9301      	str	r3, [sp, #4]
   d5ae6:	bd08      	pop	{r3, pc}
   d5ae8:	00030240 	.word	0x00030240

000d5aec <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d5aec:	b508      	push	{r3, lr}
   d5aee:	4b02      	ldr	r3, [pc, #8]	; (d5af8 <malloc+0xc>)
   d5af0:	681b      	ldr	r3, [r3, #0]
   d5af2:	681b      	ldr	r3, [r3, #0]
   d5af4:	9301      	str	r3, [sp, #4]
   d5af6:	bd08      	pop	{r3, pc}
   d5af8:	0003021c 	.word	0x0003021c

000d5afc <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d5afc:	b508      	push	{r3, lr}
   d5afe:	4b02      	ldr	r3, [pc, #8]	; (d5b08 <free+0xc>)
   d5b00:	681b      	ldr	r3, [r3, #0]
   d5b02:	685b      	ldr	r3, [r3, #4]
   d5b04:	9301      	str	r3, [sp, #4]
   d5b06:	bd08      	pop	{r3, pc}
   d5b08:	0003021c 	.word	0x0003021c

000d5b0c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d5b0c:	b508      	push	{r3, lr}
   d5b0e:	4b02      	ldr	r3, [pc, #8]	; (d5b18 <realloc+0xc>)
   d5b10:	681b      	ldr	r3, [r3, #0]
   d5b12:	689b      	ldr	r3, [r3, #8]
   d5b14:	9301      	str	r3, [sp, #4]
   d5b16:	bd08      	pop	{r3, pc}
   d5b18:	0003021c 	.word	0x0003021c

000d5b1c <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   d5b1c:	b508      	push	{r3, lr}
   d5b1e:	4b02      	ldr	r3, [pc, #8]	; (d5b28 <sprintf+0xc>)
   d5b20:	681b      	ldr	r3, [r3, #0]
   d5b22:	68db      	ldr	r3, [r3, #12]
   d5b24:	9301      	str	r3, [sp, #4]
   d5b26:	bd08      	pop	{r3, pc}
   d5b28:	0003021c 	.word	0x0003021c

000d5b2c <sscanf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
   d5b2c:	b508      	push	{r3, lr}
   d5b2e:	4b02      	ldr	r3, [pc, #8]	; (d5b38 <sscanf+0xc>)
   d5b30:	681b      	ldr	r3, [r3, #0]
   d5b32:	695b      	ldr	r3, [r3, #20]
   d5b34:	9301      	str	r3, [sp, #4]
   d5b36:	bd08      	pop	{r3, pc}
   d5b38:	0003021c 	.word	0x0003021c

000d5b3c <siscanf>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
   d5b3c:	b508      	push	{r3, lr}
   d5b3e:	4b02      	ldr	r3, [pc, #8]	; (d5b48 <siscanf+0xc>)
   d5b40:	681b      	ldr	r3, [r3, #0]
   d5b42:	699b      	ldr	r3, [r3, #24]
   d5b44:	9301      	str	r3, [sp, #4]
   d5b46:	bd08      	pop	{r3, pc}
   d5b48:	0003021c 	.word	0x0003021c

000d5b4c <snprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d5b4c:	b508      	push	{r3, lr}
   d5b4e:	4b02      	ldr	r3, [pc, #8]	; (d5b58 <snprintf+0xc>)
   d5b50:	681b      	ldr	r3, [r3, #0]
   d5b52:	69db      	ldr	r3, [r3, #28]
   d5b54:	9301      	str	r3, [sp, #4]
   d5b56:	bd08      	pop	{r3, pc}
   d5b58:	0003021c 	.word	0x0003021c

000d5b5c <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d5b5c:	b508      	push	{r3, lr}
   d5b5e:	4b02      	ldr	r3, [pc, #8]	; (d5b68 <vsnprintf+0xc>)
   d5b60:	681b      	ldr	r3, [r3, #0]
   d5b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5b64:	9301      	str	r3, [sp, #4]
   d5b66:	bd08      	pop	{r3, pc}
   d5b68:	0003021c 	.word	0x0003021c

000d5b6c <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d5b6c:	b508      	push	{r3, lr}
   d5b6e:	4b02      	ldr	r3, [pc, #8]	; (d5b78 <abort+0xc>)
   d5b70:	681b      	ldr	r3, [r3, #0]
   d5b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5b74:	9301      	str	r3, [sp, #4]
   d5b76:	bd08      	pop	{r3, pc}
   d5b78:	0003021c 	.word	0x0003021c

000d5b7c <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d5b7c:	b508      	push	{r3, lr}
   d5b7e:	4b02      	ldr	r3, [pc, #8]	; (d5b88 <_malloc_r+0xc>)
   d5b80:	681b      	ldr	r3, [r3, #0]
   d5b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5b84:	9301      	str	r3, [sp, #4]
   d5b86:	bd08      	pop	{r3, pc}
   d5b88:	0003021c 	.word	0x0003021c

000d5b8c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d5b8c:	2100      	movs	r1, #0
   d5b8e:	f7ff bef1 	b.w	d5974 <system_delay_ms>

000d5b92 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d5b92:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5b94:	6883      	ldr	r3, [r0, #8]
   d5b96:	4604      	mov	r4, r0
   d5b98:	b90b      	cbnz	r3, d5b9e <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d5b9a:	f002 fc38 	bl	d840e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5b9e:	68c3      	ldr	r3, [r0, #12]
   d5ba0:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d5ba2:	68a3      	ldr	r3, [r4, #8]
   d5ba4:	b11b      	cbz	r3, d5bae <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5ba6:	2203      	movs	r2, #3
   d5ba8:	4621      	mov	r1, r4
   d5baa:	4620      	mov	r0, r4
   d5bac:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d5bae:	4620      	mov	r0, r4
   d5bb0:	2110      	movs	r1, #16
}
   d5bb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d5bb6:	f002 bc0e 	b.w	d83d6 <_ZdlPvj>

000d5bba <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d5bba:	b510      	push	{r4, lr}
   d5bbc:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d5bbe:	6800      	ldr	r0, [r0, #0]
   d5bc0:	b108      	cbz	r0, d5bc6 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d5bc2:	f7ff fd77 	bl	d56b4 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d5bc6:	4620      	mov	r0, r4
   d5bc8:	bd10      	pop	{r4, pc}

000d5bca <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d5bca:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d5bcc:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d5bce:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d5bd0:	689b      	ldr	r3, [r3, #8]
   d5bd2:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d5bd4:	68a3      	ldr	r3, [r4, #8]
   d5bd6:	3b01      	subs	r3, #1
   d5bd8:	60a3      	str	r3, [r4, #8]
   d5bda:	b92b      	cbnz	r3, d5be8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112+0x1e>
            _M_destroy();
   d5bdc:	6823      	ldr	r3, [r4, #0]
   d5bde:	4620      	mov	r0, r4
   d5be0:	68db      	ldr	r3, [r3, #12]
        }
    }
   d5be2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d5be6:	4718      	bx	r3
   d5be8:	bd10      	pop	{r4, pc}

000d5bea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d5bea:	680b      	ldr	r3, [r1, #0]
   d5bec:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d5bee:	b113      	cbz	r3, d5bf6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d5bf0:	685a      	ldr	r2, [r3, #4]
   d5bf2:	3201      	adds	r2, #1
   d5bf4:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d5bf6:	4770      	bx	lr

000d5bf8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d5bf8:	b510      	push	{r4, lr}
   d5bfa:	4604      	mov	r4, r0
      {
	if (_M_pi != nullptr)
   d5bfc:	6800      	ldr	r0, [r0, #0]
   d5bfe:	b128      	cbz	r0, d5c0c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d5c00:	6843      	ldr	r3, [r0, #4]
   d5c02:	3b01      	subs	r3, #1
   d5c04:	6043      	str	r3, [r0, #4]
   d5c06:	b90b      	cbnz	r3, d5c0c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d5c08:	f7ff ffdf 	bl	d5bca <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d5c0c:	4620      	mov	r0, r4
   d5c0e:	bd10      	pop	{r4, pc}

000d5c10 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>:
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }

      __shared_count&
      operator=(const __shared_count& __r) noexcept
   d5c10:	b538      	push	{r3, r4, r5, lr}
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d5c12:	680c      	ldr	r4, [r1, #0]
	if (__tmp != _M_pi)
   d5c14:	6803      	ldr	r3, [r0, #0]
   d5c16:	429c      	cmp	r4, r3
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }

      __shared_count&
      operator=(const __shared_count& __r) noexcept
   d5c18:	4605      	mov	r5, r0
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	if (__tmp != _M_pi)
   d5c1a:	d00c      	beq.n	d5c36 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x26>
	  {
	    if (__tmp != 0)
   d5c1c:	b114      	cbz	r4, d5c24 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x14>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d5c1e:	6863      	ldr	r3, [r4, #4]
   d5c20:	3301      	adds	r3, #1
   d5c22:	6063      	str	r3, [r4, #4]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	if (__tmp != _M_pi)
	  {
	    if (__tmp != 0)
	      __tmp->_M_add_ref_copy();
	    if (_M_pi != 0)
   d5c24:	6828      	ldr	r0, [r5, #0]
   d5c26:	b128      	cbz	r0, d5c34 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x24>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d5c28:	6843      	ldr	r3, [r0, #4]
   d5c2a:	3b01      	subs	r3, #1
   d5c2c:	6043      	str	r3, [r0, #4]
   d5c2e:	b90b      	cbnz	r3, d5c34 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x24>
   d5c30:	f7ff ffcb 	bl	d5bca <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>
	  {
	    if (__tmp != 0)
	      __tmp->_M_add_ref_copy();
	    if (_M_pi != 0)
	      _M_pi->_M_release();
	    _M_pi = __tmp;
   d5c34:	602c      	str	r4, [r5, #0]
	  }
	return *this;
      }
   d5c36:	4628      	mov	r0, r5
   d5c38:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5c3c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d5c3c:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5c3e:	4c06      	ldr	r4, [pc, #24]	; (d5c58 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d5c40:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d5c42:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5c44:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d5c46:	f7ff fd2d 	bl	d56a4 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d5c4a:	4620      	mov	r0, r4
   d5c4c:	4a03      	ldr	r2, [pc, #12]	; (d5c5c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d5c4e:	4904      	ldr	r1, [pc, #16]	; (d5c60 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d5c50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d5c54:	f002 bbba 	b.w	d83cc <__aeabi_atexit>
   d5c58:	2003e328 	.word	0x2003e328
   d5c5c:	2003e1a0 	.word	0x2003e1a0
   d5c60:	000d5bbb 	.word	0x000d5bbb

000d5c64 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d5c64:	2200      	movs	r2, #0
   d5c66:	4611      	mov	r1, r2
   d5c68:	6840      	ldr	r0, [r0, #4]
   d5c6a:	f7ff bf07 	b.w	d5a7c <network_ready>

000d5c6e <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5c6e:	2200      	movs	r2, #0
   d5c70:	4611      	mov	r1, r2
   d5c72:	6840      	ldr	r0, [r0, #4]
   d5c74:	f7ff bf22 	b.w	d5abc <network_listening>

000d5c78 <_ZN5spark13CellularClass16getListenTimeoutEv>:
    }

    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5c78:	2200      	movs	r2, #0
   d5c7a:	4611      	mov	r1, r2
   d5c7c:	6840      	ldr	r0, [r0, #4]
   d5c7e:	f7ff bf2d 	b.w	d5adc <network_get_listen_timeout>

000d5c82 <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    inline void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5c82:	2200      	movs	r2, #0
   d5c84:	6840      	ldr	r0, [r0, #4]
   d5c86:	f7ff bf21 	b.w	d5acc <network_set_listen_timeout>

000d5c8a <_ZN5spark13CellularClass6listenEb>:
        cellular_credentials_clear(nullptr);
    }
#endif // HAL_PLATFORM_MESH

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5c8a:	2200      	movs	r2, #0
   d5c8c:	f081 0101 	eor.w	r1, r1, #1
   d5c90:	6840      	ldr	r0, [r0, #4]
   d5c92:	f7ff bf0b 	b.w	d5aac <network_listen>

000d5c96 <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d5c96:	2300      	movs	r3, #0
   d5c98:	461a      	mov	r2, r3
   d5c9a:	4619      	mov	r1, r3
   d5c9c:	6840      	ldr	r0, [r0, #4]
   d5c9e:	f7ff befd 	b.w	d5a9c <network_off>

000d5ca2 <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d5ca2:	2300      	movs	r3, #0
   d5ca4:	461a      	mov	r2, r3
   d5ca6:	4619      	mov	r1, r3
   d5ca8:	6840      	ldr	r0, [r0, #4]
   d5caa:	f7ff beef 	b.w	d5a8c <network_on>

000d5cae <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5cae:	2200      	movs	r2, #0
   d5cb0:	4611      	mov	r1, r2
   d5cb2:	6840      	ldr	r0, [r0, #4]
   d5cb4:	f7ff bed2 	b.w	d5a5c <network_connecting>

000d5cb8 <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5cb8:	2200      	movs	r2, #0
   d5cba:	2102      	movs	r1, #2
   d5cbc:	6840      	ldr	r0, [r0, #4]
   d5cbe:	f7ff bed5 	b.w	d5a6c <network_disconnect>

000d5cc2 <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5cc2:	2300      	movs	r3, #0
   d5cc4:	461a      	mov	r2, r3
   d5cc6:	6840      	ldr	r0, [r0, #4]
   d5cc8:	f7ff bec0 	b.w	d5a4c <network_connect>

000d5ccc <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d5ccc:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d5cce:	4c08      	ldr	r4, [pc, #32]	; (d5cf0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
   d5cd0:	2528      	movs	r5, #40	; 0x28
   d5cd2:	462a      	mov	r2, r5
   d5cd4:	2100      	movs	r1, #0
   d5cd6:	4620      	mov	r0, r4
   d5cd8:	f003 fb06 	bl	d92e8 <memset>
        cid = -1;
   d5cdc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d5ce0:	6063      	str	r3, [r4, #4]
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d5ce2:	4b04      	ldr	r3, [pc, #16]	; (d5cf4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        size = sizeof(*this);
   d5ce4:	8025      	strh	r5, [r4, #0]
   d5ce6:	2204      	movs	r2, #4
   d5ce8:	605a      	str	r2, [r3, #4]

class CellularClass : public NetworkClass
{
public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d5cea:	4a03      	ldr	r2, [pc, #12]	; (d5cf8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d5cec:	601a      	str	r2, [r3, #0]
   d5cee:	bd38      	pop	{r3, r4, r5, pc}
   d5cf0:	2003e334 	.word	0x2003e334
   d5cf4:	2003e32c 	.word	0x2003e32c
   d5cf8:	000dc00c 	.word	0x000dc00c

000d5cfc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d5cfc:	4770      	bx	lr

000d5cfe <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d5cfe:	2000      	movs	r0, #0
   d5d00:	4770      	bx	lr

000d5d02 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d5d02:	b510      	push	{r4, lr}
   d5d04:	2110      	movs	r1, #16
   d5d06:	4604      	mov	r4, r0
   d5d08:	f002 fb65 	bl	d83d6 <_ZdlPvj>
   d5d0c:	4620      	mov	r0, r4
   d5d0e:	bd10      	pop	{r4, pc}

000d5d10 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d5d10:	b508      	push	{r3, lr}
      { delete this; }
   d5d12:	b108      	cbz	r0, d5d18 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d5d14:	f7ff fff5 	bl	d5d02 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d5d18:	bd08      	pop	{r3, pc}

000d5d1a <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d5d1a:	2200      	movs	r2, #0
   d5d1c:	6002      	str	r2, [r0, #0]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d5d1e:	b510      	push	{r4, lr}

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d5d20:	f64f 729c 	movw	r2, #65436	; 0xff9c
   d5d24:	8082      	strh	r2, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5d26:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
   d5d2a:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d5d2c:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5d2e:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d5d30:	680c      	ldr	r4, [r1, #0]
   d5d32:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d5d34:	600a      	str	r2, [r1, #0]
}

inline particle::Error::Error(Error&& error) :
        Error() {
    swap(*this, error);
}
   d5d36:	bd10      	pop	{r4, pc}

000d5d38 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d5d38:	b510      	push	{r4, lr}
   d5d3a:	4604      	mov	r4, r0
    free((void*)msg_);
   d5d3c:	6800      	ldr	r0, [r0, #0]
   d5d3e:	f7ff fedd 	bl	d5afc <free>
}
   d5d42:	4620      	mov	r0, r4
   d5d44:	bd10      	pop	{r4, pc}

000d5d46 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d5d46:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d5d48:	68c4      	ldr	r4, [r0, #12]
   d5d4a:	b1f4      	cbz	r4, d5d8a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d5d4c:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d5d4e:	2b02      	cmp	r3, #2
   d5d50:	d103      	bne.n	d5d5a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d5d52:	f104 000c 	add.w	r0, r4, #12
   d5d56:	f7ff ffef 	bl	d5d38 <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d5d5a:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d5d5c:	b135      	cbz	r5, d5d6c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5d5e:	4628      	mov	r0, r5
   d5d60:	f7ff f8d6 	bl	d4f10 <_ZNSt14_Function_baseD1Ev>
   d5d64:	2110      	movs	r1, #16
   d5d66:	4628      	mov	r0, r5
   d5d68:	f002 fb35 	bl	d83d6 <_ZdlPvj>
   d5d6c:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d5d6e:	b135      	cbz	r5, d5d7e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d5d70:	4628      	mov	r0, r5
   d5d72:	f7ff f8cd 	bl	d4f10 <_ZNSt14_Function_baseD1Ev>
   d5d76:	2110      	movs	r1, #16
   d5d78:	4628      	mov	r0, r5
   d5d7a:	f002 fb2c 	bl	d83d6 <_ZdlPvj>
   d5d7e:	4620      	mov	r0, r4
   d5d80:	2114      	movs	r1, #20
   d5d82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d5d86:	f002 bb26 	b.w	d83d6 <_ZdlPvj>
   d5d8a:	bd38      	pop	{r3, r4, r5, pc}

000d5d8c <_ZN10CloudClass25call_wiring_event_handlerEPKvPKcS3_>:
    user_std_function_int_str_t* fn = (user_std_function_int_str_t*)(data);
    return (*fn)(String(param));
}

void CloudClass::call_wiring_event_handler(const void* handler_data, const char *event_name, const char *data)
{
   d5d8c:	b507      	push	{r0, r1, r2, lr}
   d5d8e:	e88d 0006 	stmia.w	sp, {r1, r2}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5d92:	6882      	ldr	r2, [r0, #8]
   d5d94:	b90a      	cbnz	r2, d5d9a <_ZN10CloudClass25call_wiring_event_handlerEPKvPKcS3_+0xe>
	__throw_bad_function_call();
   d5d96:	f002 fb3a 	bl	d840e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5d9a:	68c3      	ldr	r3, [r0, #12]
   d5d9c:	aa01      	add	r2, sp, #4
   d5d9e:	4669      	mov	r1, sp
   d5da0:	4798      	blx	r3
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}
   d5da2:	b003      	add	sp, #12
   d5da4:	f85d fb04 	ldr.w	pc, [sp], #4

000d5da8 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d5da8:	b513      	push	{r0, r1, r4, lr}
   d5daa:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d5dac:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d5db0:	2300      	movs	r3, #0
   d5db2:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d5db4:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d5db6:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d5db8:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5dba:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d5dbc:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d5dbe:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5dc0:	f7ff ff1a 	bl	d5bf8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5dc4:	4620      	mov	r0, r4
   d5dc6:	b002      	add	sp, #8
   d5dc8:	bd10      	pop	{r4, pc}

000d5dca <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d5dca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5dcc:	460c      	mov	r4, r1
   d5dce:	ad02      	add	r5, sp, #8
   d5dd0:	f854 3b04 	ldr.w	r3, [r4], #4
   d5dd4:	f845 3d08 	str.w	r3, [r5, #-8]!
   d5dd8:	4606      	mov	r6, r0
   d5dda:	460f      	mov	r7, r1
   d5ddc:	a801      	add	r0, sp, #4
   d5dde:	4621      	mov	r1, r4
   d5de0:	f7ff ff03 	bl	d5bea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d5de4:	4629      	mov	r1, r5
   d5de6:	4630      	mov	r0, r6
   d5de8:	f7ff ffde 	bl	d5da8 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5dec:	a801      	add	r0, sp, #4
   d5dee:	f7ff ff03 	bl	d5bf8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5df2:	4620      	mov	r0, r4
   d5df4:	f7ff ff00 	bl	d5bf8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d5df8:	4638      	mov	r0, r7
   d5dfa:	2108      	movs	r1, #8
   d5dfc:	f002 faeb 	bl	d83d6 <_ZdlPvj>
        return p;
    }
   d5e00:	4630      	mov	r0, r6
   d5e02:	b003      	add	sp, #12
   d5e04:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5e06 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d5e06:	b513      	push	{r0, r1, r4, lr}
   d5e08:	460b      	mov	r3, r1
   d5e0a:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5e0c:	c803      	ldmia	r0, {r0, r1}
   d5e0e:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d5e12:	e893 0003 	ldmia.w	r3, {r0, r1}
   d5e16:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d5e1a:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d5e1e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d5e22:	b002      	add	sp, #8
   d5e24:	bd10      	pop	{r4, pc}
	...

000d5e28 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d5e28:	b538      	push	{r3, r4, r5, lr}
   d5e2a:	2300      	movs	r3, #0
   d5e2c:	4604      	mov	r4, r0
   d5e2e:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5e30:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d5e32:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5e34:	f7fe f931 	bl	d409a <_Znwj>
   d5e38:	b128      	cbz	r0, d5e46 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d5e3a:	2301      	movs	r3, #1
   d5e3c:	6043      	str	r3, [r0, #4]
   d5e3e:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d5e40:	4b02      	ldr	r3, [pc, #8]	; (d5e4c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d5e42:	6003      	str	r3, [r0, #0]
   d5e44:	60c5      	str	r5, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5e46:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
   d5e48:	4620      	mov	r0, r4
   d5e4a:	bd38      	pop	{r3, r4, r5, pc}
   d5e4c:	000dc040 	.word	0x000dc040

000d5e50 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5e50:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d5e52:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5e54:	b90a      	cbnz	r2, d5e5a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d5e56:	f002 fada 	bl	d840e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5e5a:	68c3      	ldr	r3, [r0, #12]
    }
   d5e5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5e60:	4718      	bx	r3

000d5e62 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d5e62:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d5e64:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d5e66:	f100 0110 	add.w	r1, r0, #16
   d5e6a:	f7ff fff1 	bl	d5e50 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d5e6e:	bd08      	pop	{r3, pc}

000d5e70 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5e70:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d5e72:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5e74:	b90a      	cbnz	r2, d5e7a <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d5e76:	f002 faca 	bl	d840e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5e7a:	68c3      	ldr	r3, [r0, #12]
    }
   d5e7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5e80:	4718      	bx	r3

000d5e82 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d5e82:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d5e84:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d5e86:	f100 0110 	add.w	r1, r0, #16
   d5e8a:	f7ff fff1 	bl	d5e70 <_ZNKSt8functionIFvRKbEEclES1_>
   d5e8e:	bd08      	pop	{r3, pc}

000d5e90 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d5e90:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5e92:	2300      	movs	r3, #0
   d5e94:	6083      	str	r3, [r0, #8]
   d5e96:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d5e98:	4604      	mov	r4, r0
   d5e9a:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d5e9c:	b12b      	cbz	r3, d5eaa <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d5e9e:	2202      	movs	r2, #2
   d5ea0:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d5ea2:	68eb      	ldr	r3, [r5, #12]
   d5ea4:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d5ea6:	68ab      	ldr	r3, [r5, #8]
   d5ea8:	60a3      	str	r3, [r4, #8]
	}
    }
   d5eaa:	4620      	mov	r0, r4
   d5eac:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5eb0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d5eb0:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5eb2:	b089      	sub	sp, #36	; 0x24
   d5eb4:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d5eb6:	4668      	mov	r0, sp
   d5eb8:	f7ff ff2f 	bl	d5d1a <_ZN8particle5ErrorC1EOS0_>
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d5ebc:	2300      	movs	r3, #0
   d5ebe:	f88d 3008 	strb.w	r3, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d5ec2:	f04f 0202 	mov.w	r2, #2
   d5ec6:	e8d4 3f4f 	ldrexb	r3, [r4]
   d5eca:	2b00      	cmp	r3, #0
   d5ecc:	d103      	bne.n	d5ed6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
   d5ece:	e8c4 2f41 	strexb	r1, r2, [r4]
   d5ed2:	2900      	cmp	r1, #0
   d5ed4:	d1f7      	bne.n	d5ec6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
   d5ed6:	d002      	beq.n	d5ede <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
   d5ed8:	f88d 3008 	strb.w	r3, [sp, #8]
   d5edc:	e063      	b.n	d5fa6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d5ede:	f114 050c 	adds.w	r5, r4, #12
   d5ee2:	d003      	beq.n	d5eec <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
   d5ee4:	4669      	mov	r1, sp
   d5ee6:	4628      	mov	r0, r5
   d5ee8:	f7ff ff17 	bl	d5d1a <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d5eec:	f3bf 8f5f 	dmb	sy
   d5ef0:	2301      	movs	r3, #1
   d5ef2:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d5ef4:	2000      	movs	r0, #0
   d5ef6:	f104 0308 	add.w	r3, r4, #8
   d5efa:	f3bf 8f5f 	dmb	sy
   d5efe:	e853 6f00 	ldrex	r6, [r3]
   d5f02:	e843 0200 	strex	r2, r0, [r3]
   d5f06:	2a00      	cmp	r2, #0
   d5f08:	d1f9      	bne.n	d5efe <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
   d5f0a:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d5f0e:	2e00      	cmp	r6, #0
   d5f10:	d049      	beq.n	d5fa6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d5f12:	f7ff fd37 	bl	d5984 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d5f16:	b120      	cbz	r0, d5f22 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d5f18:	4629      	mov	r1, r5
   d5f1a:	4630      	mov	r0, r6
   d5f1c:	f7ff ff98 	bl	d5e50 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d5f20:	e03a      	b.n	d5f98 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d5f22:	4631      	mov	r1, r6
   d5f24:	a802      	add	r0, sp, #8
   d5f26:	f7ff ffb3 	bl	d5e90 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d5f2a:	68e0      	ldr	r0, [r4, #12]
   d5f2c:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d5f30:	b108      	cbz	r0, d5f36 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
   d5f32:	f003 fa33 	bl	d939c <strdup>
   d5f36:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d5f38:	2010      	movs	r0, #16
   d5f3a:	f8ad 501c 	strh.w	r5, [sp, #28]
   d5f3e:	f7fe f8ac 	bl	d409a <_Znwj>
   d5f42:	4605      	mov	r5, r0
   d5f44:	b1e8      	cbz	r0, d5f82 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5f46:	2700      	movs	r7, #0
   d5f48:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5f4a:	2018      	movs	r0, #24
   d5f4c:	f7fe f8a5 	bl	d409a <_Znwj>
   d5f50:	4604      	mov	r4, r0
   d5f52:	b188      	cbz	r0, d5f78 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d5f54:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5f56:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d5f58:	a802      	add	r0, sp, #8
   d5f5a:	f7ff ff54 	bl	d5e06 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5f5e:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d5f60:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d5f62:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5f64:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d5f66:	9204      	str	r2, [sp, #16]
   d5f68:	a906      	add	r1, sp, #24
   d5f6a:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d5f6c:	60e3      	str	r3, [r4, #12]
   d5f6e:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5f72:	9205      	str	r2, [sp, #20]
   d5f74:	f7ff fed1 	bl	d5d1a <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d5f78:	4b0d      	ldr	r3, [pc, #52]	; (d5fb0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
   d5f7a:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d5f7c:	4b0d      	ldr	r3, [pc, #52]	; (d5fb4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5f7e:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d5f80:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
   d5f82:	a806      	add	r0, sp, #24
   d5f84:	f7ff fed8 	bl	d5d38 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5f88:	a802      	add	r0, sp, #8
   d5f8a:	f7fe ffc1 	bl	d4f10 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d5f8e:	2200      	movs	r2, #0
   d5f90:	4629      	mov	r1, r5
   d5f92:	4809      	ldr	r0, [pc, #36]	; (d5fb8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
   d5f94:	f7ff fcfe 	bl	d5994 <application_thread_invoke>
   d5f98:	4630      	mov	r0, r6
   d5f9a:	f7fe ffb9 	bl	d4f10 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d5f9e:	2110      	movs	r1, #16
   d5fa0:	4630      	mov	r0, r6
   d5fa2:	f002 fa18 	bl	d83d6 <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
   d5fa6:	4668      	mov	r0, sp
   d5fa8:	f7ff fec6 	bl	d5d38 <_ZN8particle5ErrorD1Ev>
    }
   d5fac:	b009      	add	sp, #36	; 0x24
   d5fae:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5fb0:	000d5e63 	.word	0x000d5e63
   d5fb4:	000d60d9 	.word	0x000d60d9
   d5fb8:	000d5b93 	.word	0x000d5b93

000d5fbc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d5fbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5fc0:	b08b      	sub	sp, #44	; 0x2c
   d5fc2:	4606      	mov	r6, r0
   d5fc4:	460f      	mov	r7, r1
   d5fc6:	4690      	mov	r8, r2
   d5fc8:	4699      	mov	r9, r3
   d5fca:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5fce:	f7ff fd0d 	bl	d59ec <spark_cloud_flag_connected>
   d5fd2:	ad07      	add	r5, sp, #28
    if (!connected()) {
   d5fd4:	4683      	mov	fp, r0
   d5fd6:	bb30      	cbnz	r0, d6026 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d5fd8:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d5fdc:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d5fde:	a905      	add	r1, sp, #20
   d5fe0:	4628      	mov	r0, r5
   d5fe2:	f8ad 3018 	strh.w	r3, [sp, #24]
   d5fe6:	f7ff fe98 	bl	d5d1a <_ZN8particle5ErrorC1EOS0_>
   d5fea:	2014      	movs	r0, #20
   d5fec:	f7fe f855 	bl	d409a <_Znwj>
   d5ff0:	4604      	mov	r4, r0
   d5ff2:	b158      	cbz	r0, d600c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d5ff4:	2302      	movs	r3, #2
   d5ff6:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5ff8:	2301      	movs	r3, #1
   d5ffa:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d5ffc:	f8c0 b004 	str.w	fp, [r0, #4]
   d6000:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
   d6004:	4629      	mov	r1, r5
   d6006:	300c      	adds	r0, #12
   d6008:	f7ff fe87 	bl	d5d1a <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d600c:	4630      	mov	r0, r6
   d600e:	4621      	mov	r1, r4
   d6010:	f840 4b04 	str.w	r4, [r0], #4
   d6014:	f7ff ff08 	bl	d5e28 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d6018:	4628      	mov	r0, r5
   d601a:	f7ff fe8d 	bl	d5d38 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d601e:	a805      	add	r0, sp, #20
   d6020:	f7ff fe8a 	bl	d5d38 <_ZN8particle5ErrorD1Ev>
   d6024:	e052      	b.n	d60cc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d6026:	2400      	movs	r4, #0
   d6028:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d602a:	2014      	movs	r0, #20
   d602c:	606c      	str	r4, [r5, #4]
   d602e:	60ac      	str	r4, [r5, #8]
   d6030:	9307      	str	r3, [sp, #28]
   d6032:	f7fe f832 	bl	d409a <_Znwj>
   d6036:	4601      	mov	r1, r0
   d6038:	b118      	cbz	r0, d6042 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
   d603a:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d603c:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d603e:	6044      	str	r4, [r0, #4]
   d6040:	6084      	str	r4, [r0, #8]
   d6042:	a804      	add	r0, sp, #16
   d6044:	9103      	str	r1, [sp, #12]
   d6046:	f7ff feef 	bl	d5e28 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d604a:	4b22      	ldr	r3, [pc, #136]	; (d60d4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
   d604c:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d604e:	2008      	movs	r0, #8
   d6050:	f7fe f823 	bl	d409a <_Znwj>
   d6054:	4604      	mov	r4, r0
   d6056:	b128      	cbz	r0, d6064 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6058:	9b03      	ldr	r3, [sp, #12]
   d605a:	f840 3b04 	str.w	r3, [r0], #4
   d605e:	a904      	add	r1, sp, #16
   d6060:	f7ff fdc3 	bl	d5bea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d6064:	9500      	str	r5, [sp, #0]
   d6066:	fa5f f38a 	uxtb.w	r3, sl
   d606a:	464a      	mov	r2, r9
   d606c:	4641      	mov	r1, r8
   d606e:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d6070:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d6072:	f7ff fccb 	bl	d5a0c <spark_send_event>
   d6076:	b920      	cbnz	r0, d6082 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d6078:	9b03      	ldr	r3, [sp, #12]
   d607a:	785b      	ldrb	r3, [r3, #1]
   d607c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d6080:	b183      	cbz	r3, d60a4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   d6082:	9b03      	ldr	r3, [sp, #12]
   d6084:	9305      	str	r3, [sp, #20]
   d6086:	a904      	add	r1, sp, #16
   d6088:	a806      	add	r0, sp, #24
   d608a:	f7ff fdae 	bl	d5bea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d608e:	a905      	add	r1, sp, #20
   d6090:	4630      	mov	r0, r6
   d6092:	f7ff fe89 	bl	d5da8 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6096:	a806      	add	r0, sp, #24
   d6098:	f7ff fdae 	bl	d5bf8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d609c:	a804      	add	r0, sp, #16
   d609e:	f7ff fdab 	bl	d5bf8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d60a2:	e013      	b.n	d60cc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
   d60a4:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d60a8:	a905      	add	r1, sp, #20
   d60aa:	a803      	add	r0, sp, #12
   d60ac:	9205      	str	r2, [sp, #20]
   d60ae:	f8ad 3018 	strh.w	r3, [sp, #24]
   d60b2:	f7ff fefd 	bl	d5eb0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d60b6:	a805      	add	r0, sp, #20
   d60b8:	f7ff fe3e 	bl	d5d38 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d60bc:	a805      	add	r0, sp, #20
   d60be:	9909      	ldr	r1, [sp, #36]	; 0x24
   d60c0:	f7ff fe83 	bl	d5dca <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
   d60c4:	a806      	add	r0, sp, #24
   d60c6:	f7ff fd97 	bl	d5bf8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d60ca:	e7da      	b.n	d6082 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
    }

    return p.future();
}
   d60cc:	4630      	mov	r0, r6
   d60ce:	b00b      	add	sp, #44	; 0x2c
   d60d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d60d4:	000d6249 	.word	0x000d6249

000d60d8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d60d8:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d60da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d60dc:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d60de:	d006      	beq.n	d60ee <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d60e0:	2a03      	cmp	r2, #3
   d60e2:	d017      	beq.n	d6114 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d60e4:	2a01      	cmp	r2, #1
   d60e6:	d122      	bne.n	d612e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d60e8:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d60ea:	6003      	str	r3, [r0, #0]
	      break;
   d60ec:	e01f      	b.n	d612e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d60ee:	2018      	movs	r0, #24
   d60f0:	680e      	ldr	r6, [r1, #0]
   d60f2:	f7fd ffd2 	bl	d409a <_Znwj>
   d60f6:	4605      	mov	r5, r0
   d60f8:	b150      	cbz	r0, d6110 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d60fa:	4631      	mov	r1, r6
   d60fc:	f7ff fec8 	bl	d5e90 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d6100:	6930      	ldr	r0, [r6, #16]
   d6102:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d6106:	b108      	cbz	r0, d610c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d6108:	f003 f948 	bl	d939c <strdup>
   d610c:	6128      	str	r0, [r5, #16]
   d610e:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d6110:	6025      	str	r5, [r4, #0]
   d6112:	e00c      	b.n	d612e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d6114:	6804      	ldr	r4, [r0, #0]
   d6116:	b154      	cbz	r4, d612e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
   d6118:	f104 0010 	add.w	r0, r4, #16
   d611c:	f7ff fe0c 	bl	d5d38 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6120:	4620      	mov	r0, r4
   d6122:	f7fe fef5 	bl	d4f10 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d6126:	2118      	movs	r1, #24
   d6128:	4620      	mov	r0, r4
   d612a:	f002 f954 	bl	d83d6 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d612e:	2000      	movs	r0, #0
   d6130:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6132 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d6132:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6134:	2300      	movs	r3, #0
   d6136:	6083      	str	r3, [r0, #8]
   d6138:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d613a:	4604      	mov	r4, r0
   d613c:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d613e:	b12b      	cbz	r3, d614c <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d6140:	2202      	movs	r2, #2
   d6142:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d6144:	68eb      	ldr	r3, [r5, #12]
   d6146:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d6148:	68ab      	ldr	r3, [r5, #8]
   d614a:	60a3      	str	r3, [r4, #8]
	}
    }
   d614c:	4620      	mov	r0, r4
   d614e:	bd38      	pop	{r3, r4, r5, pc}

000d6150 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d6150:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d6152:	b570      	push	{r4, r5, r6, lr}
   d6154:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d6156:	d006      	beq.n	d6166 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d6158:	2a03      	cmp	r2, #3
   d615a:	d011      	beq.n	d6180 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d615c:	2a01      	cmp	r2, #1
   d615e:	d118      	bne.n	d6192 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d6160:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d6162:	6003      	str	r3, [r0, #0]
	      break;
   d6164:	e015      	b.n	d6192 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d6166:	2014      	movs	r0, #20
   d6168:	680e      	ldr	r6, [r1, #0]
   d616a:	f7fd ff96 	bl	d409a <_Znwj>
   d616e:	4605      	mov	r5, r0
   d6170:	b120      	cbz	r0, d617c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d6172:	4631      	mov	r1, r6
   d6174:	f7ff ffdd 	bl	d6132 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d6178:	7c33      	ldrb	r3, [r6, #16]
   d617a:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d617c:	6025      	str	r5, [r4, #0]
   d617e:	e008      	b.n	d6192 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d6180:	6804      	ldr	r4, [r0, #0]
   d6182:	b134      	cbz	r4, d6192 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6184:	4620      	mov	r0, r4
   d6186:	f7fe fec3 	bl	d4f10 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d618a:	2114      	movs	r1, #20
   d618c:	4620      	mov	r0, r4
   d618e:	f002 f922 	bl	d83d6 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d6192:	2000      	movs	r0, #0
   d6194:	bd70      	pop	{r4, r5, r6, pc}
	...

000d6198 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d6198:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d619a:	2300      	movs	r3, #0
   d619c:	b087      	sub	sp, #28
   d619e:	460c      	mov	r4, r1
   d61a0:	f3bf 8f5f 	dmb	sy
   d61a4:	e850 6f00 	ldrex	r6, [r0]
   d61a8:	e840 3200 	strex	r2, r3, [r0]
   d61ac:	2a00      	cmp	r2, #0
   d61ae:	d1f9      	bne.n	d61a4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d61b0:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d61b4:	2e00      	cmp	r6, #0
   d61b6:	d03f      	beq.n	d6238 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d61b8:	4618      	mov	r0, r3
   d61ba:	f7ff fbe3 	bl	d5984 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d61be:	4607      	mov	r7, r0
   d61c0:	b120      	cbz	r0, d61cc <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d61c2:	4621      	mov	r1, r4
   d61c4:	4630      	mov	r0, r6
   d61c6:	f7ff fe53 	bl	d5e70 <_ZNKSt8functionIFvRKbEEclES1_>
   d61ca:	e02e      	b.n	d622a <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d61cc:	4631      	mov	r1, r6
   d61ce:	a801      	add	r0, sp, #4
   d61d0:	f7ff ffaf 	bl	d6132 <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d61d4:	7823      	ldrb	r3, [r4, #0]
   d61d6:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d61da:	2010      	movs	r0, #16
   d61dc:	f7fd ff5d 	bl	d409a <_Znwj>
   d61e0:	4605      	mov	r5, r0
   d61e2:	b1d0      	cbz	r0, d621a <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d61e4:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d61e6:	2014      	movs	r0, #20
   d61e8:	f7fd ff57 	bl	d409a <_Znwj>
   d61ec:	4604      	mov	r4, r0
   d61ee:	b178      	cbz	r0, d6210 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d61f0:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d61f2:	4601      	mov	r1, r0
   d61f4:	a801      	add	r0, sp, #4
   d61f6:	f7ff fe06 	bl	d5e06 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d61fa:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d61fc:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d61fe:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6200:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d6202:	9203      	str	r2, [sp, #12]
   d6204:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d6206:	60e3      	str	r3, [r4, #12]
   d6208:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d620c:	9204      	str	r2, [sp, #16]
   d620e:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d6210:	4b0a      	ldr	r3, [pc, #40]	; (d623c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d6212:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d6214:	4b0a      	ldr	r3, [pc, #40]	; (d6240 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6216:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d6218:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d621a:	a801      	add	r0, sp, #4
   d621c:	f7fe fe78 	bl	d4f10 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d6220:	2200      	movs	r2, #0
   d6222:	4629      	mov	r1, r5
   d6224:	4807      	ldr	r0, [pc, #28]	; (d6244 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d6226:	f7ff fbb5 	bl	d5994 <application_thread_invoke>
   d622a:	4630      	mov	r0, r6
   d622c:	f7fe fe70 	bl	d4f10 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d6230:	2110      	movs	r1, #16
   d6232:	4630      	mov	r0, r6
   d6234:	f002 f8cf 	bl	d83d6 <_ZdlPvj>
        }
    }
   d6238:	b007      	add	sp, #28
   d623a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d623c:	000d5e83 	.word	0x000d5e83
   d6240:	000d6151 	.word	0x000d6151
   d6244:	000d5b93 	.word	0x000d5b93

000d6248 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:

namespace {

using namespace particle;

void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d6248:	b530      	push	{r4, r5, lr}
   d624a:	b085      	sub	sp, #20
   d624c:	4604      	mov	r4, r0
   d624e:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d6250:	4668      	mov	r0, sp
   d6252:	4611      	mov	r1, r2
   d6254:	f7ff fdb9 	bl	d5dca <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d6258:	b17c      	cbz	r4, d627a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d625a:	b224      	sxth	r4, r4
   d625c:	4628      	mov	r0, r5
   d625e:	b10d      	cbz	r5, d6264 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d6260:	f003 f89c 	bl	d939c <strdup>
   d6264:	9002      	str	r0, [sp, #8]
   d6266:	a902      	add	r1, sp, #8
   d6268:	4668      	mov	r0, sp
   d626a:	f8ad 400c 	strh.w	r4, [sp, #12]
   d626e:	f7ff fe1f 	bl	d5eb0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d6272:	a802      	add	r0, sp, #8
   d6274:	f7ff fd60 	bl	d5d38 <_ZN8particle5ErrorD1Ev>
   d6278:	e01d      	b.n	d62b6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d627a:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d627c:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d6280:	f04f 0201 	mov.w	r2, #1
   d6284:	e8d0 3f4f 	ldrexb	r3, [r0]
   d6288:	42a3      	cmp	r3, r4
   d628a:	d103      	bne.n	d6294 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d628c:	e8c0 2f41 	strexb	r1, r2, [r0]
   d6290:	2900      	cmp	r1, #0
   d6292:	d1f7      	bne.n	d6284 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d6294:	d002      	beq.n	d629c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d6296:	f88d 3008 	strb.w	r3, [sp, #8]
   d629a:	e00c      	b.n	d62b6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d629c:	f110 010c 	adds.w	r1, r0, #12
   d62a0:	f04f 0301 	mov.w	r3, #1
   d62a4:	bf18      	it	ne
   d62a6:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d62a8:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d62ac:	3004      	adds	r0, #4
   d62ae:	f800 3c03 	strb.w	r3, [r0, #-3]
   d62b2:	f7ff ff71 	bl	d6198 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d62b6:	a801      	add	r0, sp, #4
   d62b8:	f7ff fc9e 	bl	d5bf8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d62bc:	b005      	add	sp, #20
   d62be:	bd30      	pop	{r4, r5, pc}

000d62c0 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d62c0:	2200      	movs	r2, #0
   d62c2:	4611      	mov	r1, r2
   d62c4:	6840      	ldr	r0, [r0, #4]
   d62c6:	f7ff bbf9 	b.w	d5abc <network_listening>

000d62ca <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d62ca:	2200      	movs	r2, #0
   d62cc:	4611      	mov	r1, r2
   d62ce:	6840      	ldr	r0, [r0, #4]
   d62d0:	f7ff bc04 	b.w	d5adc <network_get_listen_timeout>

000d62d4 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d62d4:	2200      	movs	r2, #0
   d62d6:	6840      	ldr	r0, [r0, #4]
   d62d8:	f7ff bbf8 	b.w	d5acc <network_set_listen_timeout>

000d62dc <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d62dc:	2200      	movs	r2, #0
   d62de:	f081 0101 	eor.w	r1, r1, #1
   d62e2:	6840      	ldr	r0, [r0, #4]
   d62e4:	f7ff bbe2 	b.w	d5aac <network_listen>

000d62e8 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d62e8:	2300      	movs	r3, #0
   d62ea:	461a      	mov	r2, r3
   d62ec:	4619      	mov	r1, r3
   d62ee:	6840      	ldr	r0, [r0, #4]
   d62f0:	f7ff bbd4 	b.w	d5a9c <network_off>

000d62f4 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d62f4:	2300      	movs	r3, #0
   d62f6:	461a      	mov	r2, r3
   d62f8:	4619      	mov	r1, r3
   d62fa:	6840      	ldr	r0, [r0, #4]
   d62fc:	f7ff bbc6 	b.w	d5a8c <network_on>

000d6300 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d6300:	2200      	movs	r2, #0
   d6302:	4611      	mov	r1, r2
   d6304:	6840      	ldr	r0, [r0, #4]
   d6306:	f7ff bbb9 	b.w	d5a7c <network_ready>

000d630a <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d630a:	2200      	movs	r2, #0
   d630c:	4611      	mov	r1, r2
   d630e:	6840      	ldr	r0, [r0, #4]
   d6310:	f7ff bba4 	b.w	d5a5c <network_connecting>

000d6314 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6314:	2200      	movs	r2, #0
   d6316:	2102      	movs	r1, #2
   d6318:	6840      	ldr	r0, [r0, #4]
   d631a:	f7ff bba7 	b.w	d5a6c <network_disconnect>

000d631e <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d631e:	2300      	movs	r3, #0
   d6320:	461a      	mov	r2, r3
   d6322:	6840      	ldr	r0, [r0, #4]
   d6324:	f7ff bb92 	b.w	d5a4c <network_connect>

000d6328 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d6328:	4b02      	ldr	r3, [pc, #8]	; (d6334 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d632a:	2203      	movs	r2, #3
   d632c:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d632e:	4a02      	ldr	r2, [pc, #8]	; (d6338 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d6330:	601a      	str	r2, [r3, #0]
   d6332:	4770      	bx	lr
   d6334:	2003e35c 	.word	0x2003e35c
   d6338:	000dc05c 	.word	0x000dc05c

000d633c <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d633c:	4770      	bx	lr

000d633e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d633e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6340:	4606      	mov	r6, r0
   d6342:	4615      	mov	r5, r2
   d6344:	460c      	mov	r4, r1
   d6346:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d6348:	42bc      	cmp	r4, r7
   d634a:	d006      	beq.n	d635a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d634c:	6833      	ldr	r3, [r6, #0]
   d634e:	f814 1b01 	ldrb.w	r1, [r4], #1
   d6352:	689b      	ldr	r3, [r3, #8]
   d6354:	4630      	mov	r0, r6
   d6356:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d6358:	e7f6      	b.n	d6348 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d635a:	4628      	mov	r0, r5
   d635c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d635e <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d635e:	2200      	movs	r2, #0
   d6360:	7c00      	ldrb	r0, [r0, #16]
   d6362:	f7ff ba07 	b.w	d5774 <HAL_I2C_Write_Data>

000d6366 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d6366:	2100      	movs	r1, #0
   d6368:	7c00      	ldrb	r0, [r0, #16]
   d636a:	f7ff ba0b 	b.w	d5784 <HAL_I2C_Available_Data>

000d636e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d636e:	2100      	movs	r1, #0
   d6370:	7c00      	ldrb	r0, [r0, #16]
   d6372:	f7ff ba0f 	b.w	d5794 <HAL_I2C_Read_Data>

000d6376 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d6376:	2100      	movs	r1, #0
   d6378:	7c00      	ldrb	r0, [r0, #16]
   d637a:	f7ff ba13 	b.w	d57a4 <HAL_I2C_Peek_Data>

000d637e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d637e:	2100      	movs	r1, #0
   d6380:	7c00      	ldrb	r0, [r0, #16]
   d6382:	f7ff ba17 	b.w	d57b4 <HAL_I2C_Flush_Data>

000d6386 <_ZN7TwoWireD0Ev>:
   d6386:	b510      	push	{r4, lr}
   d6388:	2114      	movs	r1, #20
   d638a:	4604      	mov	r4, r0
   d638c:	f002 f823 	bl	d83d6 <_ZdlPvj>
   d6390:	4620      	mov	r0, r4
   d6392:	bd10      	pop	{r4, pc}

000d6394 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d6394:	b510      	push	{r4, lr}
   d6396:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d6398:	2300      	movs	r3, #0
   d639a:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d639c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d63a0:	60a3      	str	r3, [r4, #8]
   d63a2:	4b04      	ldr	r3, [pc, #16]	; (d63b4 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d63a4:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d63a6:	4608      	mov	r0, r1
   d63a8:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d63aa:	4611      	mov	r1, r2
   d63ac:	f7ff fa0a 	bl	d57c4 <HAL_I2C_Init>
}
   d63b0:	4620      	mov	r0, r4
   d63b2:	bd10      	pop	{r4, pc}
   d63b4:	000dc090 	.word	0x000dc090

000d63b8 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d63b8:	2300      	movs	r3, #0
   d63ba:	461a      	mov	r2, r3
   d63bc:	4619      	mov	r1, r3
   d63be:	7c00      	ldrb	r0, [r0, #16]
   d63c0:	f7ff b9c0 	b.w	d5744 <HAL_I2C_Begin>

000d63c4 <_ZN7TwoWire17beginTransmissionEh>:
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d63c4:	2200      	movs	r2, #0
   d63c6:	7c00      	ldrb	r0, [r0, #16]
   d63c8:	f7ff b9c4 	b.w	d5754 <HAL_I2C_Begin_Transmission>

000d63cc <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
   d63cc:	b2c9      	uxtb	r1, r1
   d63ce:	f7ff bff9 	b.w	d63c4 <_ZN7TwoWire17beginTransmissionEh>

000d63d2 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d63d2:	2200      	movs	r2, #0
   d63d4:	7c00      	ldrb	r0, [r0, #16]
   d63d6:	f7ff b9c5 	b.w	d5764 <HAL_I2C_End_Transmission>

000d63da <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
   d63da:	2101      	movs	r1, #1
   d63dc:	f7ff bff9 	b.w	d63d2 <_ZN7TwoWire15endTransmissionEh>

000d63e0 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d63e0:	4770      	bx	lr

000d63e2 <_ZN9IPAddressD0Ev>:
   d63e2:	b510      	push	{r4, lr}
   d63e4:	2118      	movs	r1, #24
   d63e6:	4604      	mov	r4, r0
   d63e8:	f001 fff5 	bl	d83d6 <_ZdlPvj>
   d63ec:	4620      	mov	r0, r4
   d63ee:	bd10      	pop	{r4, pc}

000d63f0 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d63f0:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d63f2:	7d03      	ldrb	r3, [r0, #20]
   d63f4:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d63f6:	b08d      	sub	sp, #52	; 0x34
   d63f8:	460e      	mov	r6, r1
   d63fa:	f100 0704 	add.w	r7, r0, #4
   d63fe:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d6402:	d002      	beq.n	d640a <_ZNK9IPAddress7printToER5Print+0x1a>
   d6404:	f100 0508 	add.w	r5, r0, #8
   d6408:	e018      	b.n	d643c <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d640a:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d640c:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d640e:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d6412:	232f      	movs	r3, #47	; 0x2f
   d6414:	462a      	mov	r2, r5
   d6416:	200a      	movs	r0, #10
   d6418:	f7ff f9dc 	bl	d57d4 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d641c:	4628      	mov	r0, r5
   d641e:	f002 ffd8 	bl	d93d2 <strlen>
   d6422:	6833      	ldr	r3, [r6, #0]
   d6424:	4602      	mov	r2, r0
   d6426:	68db      	ldr	r3, [r3, #12]
   d6428:	4629      	mov	r1, r5
   d642a:	4630      	mov	r0, r6
   d642c:	4798      	blx	r3
   d642e:	e00f      	b.n	d6450 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d6430:	b124      	cbz	r4, d643c <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d6432:	212e      	movs	r1, #46	; 0x2e
   d6434:	4630      	mov	r0, r6
   d6436:	f001 fb4d 	bl	d7ad4 <_ZN5Print5printEc>
   d643a:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d643c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d6440:	220a      	movs	r2, #10
   d6442:	4630      	mov	r0, r6
   d6444:	f001 fb5f 	bl	d7b06 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d6448:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d644a:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d644c:	d1f0      	bne.n	d6430 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d644e:	4620      	mov	r0, r4
    }
    return n;
}
   d6450:	b00d      	add	sp, #52	; 0x34
   d6452:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6454 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d6454:	b510      	push	{r4, lr}
   d6456:	4b05      	ldr	r3, [pc, #20]	; (d646c <_ZN9IPAddressC1Ev+0x18>)
   d6458:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d645a:	2211      	movs	r2, #17
   d645c:	f840 3b04 	str.w	r3, [r0], #4
   d6460:	2100      	movs	r1, #0
   d6462:	f002 ff41 	bl	d92e8 <memset>
{
    clear();
}
   d6466:	4620      	mov	r0, r4
   d6468:	bd10      	pop	{r4, pc}
   d646a:	bf00      	nop
   d646c:	000dc0b8 	.word	0x000dc0b8

000d6470 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d6470:	4603      	mov	r3, r0
   d6472:	4a07      	ldr	r2, [pc, #28]	; (d6490 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d6474:	b510      	push	{r4, lr}
   d6476:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d647a:	f101 0210 	add.w	r2, r1, #16
   d647e:	f851 4b04 	ldr.w	r4, [r1], #4
   d6482:	f843 4b04 	str.w	r4, [r3], #4
   d6486:	4291      	cmp	r1, r2
   d6488:	d1f9      	bne.n	d647e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d648a:	780a      	ldrb	r2, [r1, #0]
   d648c:	701a      	strb	r2, [r3, #0]
}
   d648e:	bd10      	pop	{r4, pc}
   d6490:	000dc0b8 	.word	0x000dc0b8

000d6494 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d6494:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d6496:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d649a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d649e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d64a2:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d64a6:	2304      	movs	r3, #4
   d64a8:	6041      	str	r1, [r0, #4]
   d64aa:	7503      	strb	r3, [r0, #20]
   d64ac:	bd10      	pop	{r4, pc}

000d64ae <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d64ae:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d64b0:	780d      	ldrb	r5, [r1, #0]
   d64b2:	788b      	ldrb	r3, [r1, #2]
   d64b4:	784a      	ldrb	r2, [r1, #1]
   d64b6:	78c9      	ldrb	r1, [r1, #3]
   d64b8:	9100      	str	r1, [sp, #0]
   d64ba:	4629      	mov	r1, r5
   d64bc:	f7ff ffea 	bl	d6494 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d64c0:	b003      	add	sp, #12
   d64c2:	bd30      	pop	{r4, r5, pc}

000d64c4 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:
#include <cstdarg>

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
   d64c4:	f100 0210 	add.w	r2, r0, #16
    size_t n = 1;
   d64c8:	2301      	movs	r3, #1
    do {
        if (t->type == JSMN_OBJECT) {
   d64ca:	f812 1c10 	ldrb.w	r1, [r2, #-16]
   d64ce:	2901      	cmp	r1, #1
   d64d0:	4610      	mov	r0, r2
   d64d2:	d104      	bne.n	d64de <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x1a>
            n += t->size * 2; // Number of name and value tokens
   d64d4:	f852 1c04 	ldr.w	r1, [r2, #-4]
   d64d8:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   d64dc:	e004      	b.n	d64e8 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x24>
        } else if (t->type == JSMN_ARRAY) {
   d64de:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   d64e0:	bf04      	itt	eq
   d64e2:	f852 1c04 	ldreq.w	r1, [r2, #-4]
   d64e6:	185b      	addeq	r3, r3, r1
namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
    do {
   d64e8:	3b01      	subs	r3, #1
   d64ea:	f102 0210 	add.w	r2, r2, #16
   d64ee:	d1ec      	bne.n	d64ca <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
        }
        ++t;
        --n;
    } while (n);
    return t;
}
   d64f0:	4770      	bx	lr

000d64f2 <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   d64f2:	b40e      	push	{r1, r2, r3}
   d64f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d64f8:	b087      	sub	sp, #28
   d64fa:	af00      	add	r7, sp, #0
   d64fc:	f107 0434 	add.w	r4, r7, #52	; 0x34
   d6500:	4605      	mov	r5, r0
   d6502:	f854 6b04 	ldr.w	r6, [r4], #4
    char buf[16];
    va_list args;
    va_start(args, fmt);
   d6506:	607c      	str	r4, [r7, #4]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d6508:	4623      	mov	r3, r4
   d650a:	4632      	mov	r2, r6
   d650c:	2110      	movs	r1, #16
   d650e:	f107 0008 	add.w	r0, r7, #8
   d6512:	f7ff fb23 	bl	d5b5c <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   d6516:	280f      	cmp	r0, #15
   d6518:	d916      	bls.n	d6548 <_ZN5spark10JSONWriter6printfEPKcz+0x56>
        char buf[n + 1]; // Use larger buffer
   d651a:	f100 0308 	add.w	r3, r0, #8
   d651e:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   d6522:	46e8      	mov	r8, sp
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
        char buf[n + 1]; // Use larger buffer
   d6524:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   d6528:	4632      	mov	r2, r6
   d652a:	1c41      	adds	r1, r0, #1
   d652c:	4623      	mov	r3, r4
   d652e:	4668      	mov	r0, sp
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
        char buf[n + 1]; // Use larger buffer
        va_start(args, fmt);
   d6530:	607c      	str	r4, [r7, #4]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   d6532:	f7ff fb13 	bl	d5b5c <vsnprintf>
        va_end(args);
        if (n > 0) {
   d6536:	1e02      	subs	r2, r0, #0
   d6538:	dd04      	ble.n	d6544 <_ZN5spark10JSONWriter6printfEPKcz+0x52>
            write(buf, n);
   d653a:	682b      	ldr	r3, [r5, #0]
   d653c:	4669      	mov	r1, sp
   d653e:	689b      	ldr	r3, [r3, #8]
   d6540:	4628      	mov	r0, r5
   d6542:	4798      	blx	r3
   d6544:	46c5      	mov	sp, r8
   d6546:	e007      	b.n	d6558 <_ZN5spark10JSONWriter6printfEPKcz+0x66>
        }
    } else if (n > 0) {
   d6548:	b130      	cbz	r0, d6558 <_ZN5spark10JSONWriter6printfEPKcz+0x66>
        write(buf, n);
   d654a:	682b      	ldr	r3, [r5, #0]
   d654c:	4602      	mov	r2, r0
   d654e:	689b      	ldr	r3, [r3, #8]
   d6550:	f107 0108 	add.w	r1, r7, #8
   d6554:	4628      	mov	r0, r5
   d6556:	4798      	blx	r3
    }
}
   d6558:	371c      	adds	r7, #28
   d655a:	46bd      	mov	sp, r7
   d655c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d6560:	b003      	add	sp, #12
   d6562:	4770      	bx	lr

000d6564 <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   d6564:	b513      	push	{r0, r1, r4, lr}
   d6566:	ab02      	add	r3, sp, #8
    write(&c, 1);
   d6568:	6802      	ldr	r2, [r0, #0]

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   d656a:	f803 1d01 	strb.w	r1, [r3, #-1]!
    write(&c, 1);
   d656e:	6894      	ldr	r4, [r2, #8]
   d6570:	4619      	mov	r1, r3
   d6572:	2201      	movs	r2, #1
   d6574:	47a0      	blx	r4
}
   d6576:	b002      	add	sp, #8
   d6578:	bd10      	pop	{r4, pc}

000d657a <_ZNK5spark9JSONValue4typeEv>:
        return 0.0;
    }
}

spark::JSONType spark::JSONValue::type() const {
    if (!t_) {
   d657a:	6883      	ldr	r3, [r0, #8]
   d657c:	b1fb      	cbz	r3, d65be <_ZNK5spark9JSONValue4typeEv+0x44>
        return JSON_TYPE_INVALID;
    }
    switch (t_->type) {
   d657e:	781a      	ldrb	r2, [r3, #0]
   d6580:	2a03      	cmp	r2, #3
   d6582:	d81a      	bhi.n	d65ba <_ZNK5spark9JSONValue4typeEv+0x40>
   d6584:	e8df f002 	tbb	[pc, r2]
   d6588:	1d021704 	.word	0x1d021704
        return JSON_TYPE_INVALID;
    }
    case JSMN_STRING:
        return JSON_TYPE_STRING;
    case JSMN_ARRAY:
        return JSON_TYPE_ARRAY;
   d658c:	2005      	movs	r0, #5
   d658e:	4770      	bx	lr
    if (!t_) {
        return JSON_TYPE_INVALID;
    }
    switch (t_->type) {
    case JSMN_PRIMITIVE: {
        const char c = d_->json[t_->start];
   d6590:	6802      	ldr	r2, [r0, #0]
   d6592:	685b      	ldr	r3, [r3, #4]
   d6594:	6852      	ldr	r2, [r2, #4]
   d6596:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   d6598:	282d      	cmp	r0, #45	; 0x2d
   d659a:	d014      	beq.n	d65c6 <_ZNK5spark9JSONValue4typeEv+0x4c>
   d659c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d65a0:	2b09      	cmp	r3, #9
   d65a2:	d910      	bls.n	d65c6 <_ZNK5spark9JSONValue4typeEv+0x4c>
            return JSON_TYPE_NUMBER;
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   d65a4:	2874      	cmp	r0, #116	; 0x74
   d65a6:	d010      	beq.n	d65ca <_ZNK5spark9JSONValue4typeEv+0x50>
   d65a8:	2866      	cmp	r0, #102	; 0x66
   d65aa:	d00e      	beq.n	d65ca <_ZNK5spark9JSONValue4typeEv+0x50>
    }
}

spark::JSONType spark::JSONValue::type() const {
    if (!t_) {
        return JSON_TYPE_INVALID;
   d65ac:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   d65b0:	4258      	negs	r0, r3
   d65b2:	4158      	adcs	r0, r3
   d65b4:	4770      	bx	lr
    case JSMN_STRING:
        return JSON_TYPE_STRING;
    case JSMN_ARRAY:
        return JSON_TYPE_ARRAY;
    case JSMN_OBJECT:
        return JSON_TYPE_OBJECT;
   d65b6:	2006      	movs	r0, #6
   d65b8:	4770      	bx	lr
    default:
        return JSON_TYPE_INVALID;
   d65ba:	2000      	movs	r0, #0
   d65bc:	4770      	bx	lr
    }
}

spark::JSONType spark::JSONValue::type() const {
    if (!t_) {
        return JSON_TYPE_INVALID;
   d65be:	4618      	mov	r0, r3
   d65c0:	4770      	bx	lr
            return JSON_TYPE_NULL;
        }
        return JSON_TYPE_INVALID;
    }
    case JSMN_STRING:
        return JSON_TYPE_STRING;
   d65c2:	2004      	movs	r0, #4
   d65c4:	4770      	bx	lr
    }
    switch (t_->type) {
    case JSMN_PRIMITIVE: {
        const char c = d_->json[t_->start];
        if (c == '-' || (c >= '0' && c <= '9')) {
            return JSON_TYPE_NUMBER;
   d65c6:	2003      	movs	r0, #3
   d65c8:	4770      	bx	lr
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
            return JSON_TYPE_BOOL;
   d65ca:	2002      	movs	r0, #2
    case JSMN_OBJECT:
        return JSON_TYPE_OBJECT;
    default:
        return JSON_TYPE_INVALID;
    }
}
   d65cc:	4770      	bx	lr

000d65ce <_ZNK5spark9JSONValue5toIntEv>:
    default:
        return false;
    }
}

int spark::JSONValue::toInt() const {
   d65ce:	b510      	push	{r4, lr}
   d65d0:	4604      	mov	r4, r0
    switch (type()) {
   d65d2:	f7ff ffd2 	bl	d657a <_ZNK5spark9JSONValue4typeEv>
   d65d6:	2802      	cmp	r0, #2
   d65d8:	d00d      	beq.n	d65f6 <_ZNK5spark9JSONValue5toIntEv+0x28>
   d65da:	d316      	bcc.n	d660a <_ZNK5spark9JSONValue5toIntEv+0x3c>
   d65dc:	2804      	cmp	r0, #4
   d65de:	d814      	bhi.n	d660a <_ZNK5spark9JSONValue5toIntEv+0x3c>
    }
    case JSON_TYPE_NUMBER:
    case JSON_TYPE_STRING: {
        // toInt() may produce incorrect results for floating point numbers, since we want to keep
        // compile-time dependency on strtod() optional
        const char* const s = d_->json + t_->start;
   d65e0:	6822      	ldr	r2, [r4, #0]
   d65e2:	68a3      	ldr	r3, [r4, #8]
        return strtol(s, nullptr, 10);
   d65e4:	6850      	ldr	r0, [r2, #4]
   d65e6:	685b      	ldr	r3, [r3, #4]
   d65e8:	220a      	movs	r2, #10
   d65ea:	2100      	movs	r1, #0
   d65ec:	4418      	add	r0, r3
    }
    default:
        return 0;
    }
}
   d65ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    case JSON_TYPE_NUMBER:
    case JSON_TYPE_STRING: {
        // toInt() may produce incorrect results for floating point numbers, since we want to keep
        // compile-time dependency on strtod() optional
        const char* const s = d_->json + t_->start;
        return strtol(s, nullptr, 10);
   d65f2:	f003 be25 	b.w	da240 <strtol>
}

int spark::JSONValue::toInt() const {
    switch (type()) {
    case JSON_TYPE_BOOL: {
        const char* const s = d_->json + t_->start;
   d65f6:	6822      	ldr	r2, [r4, #0]
   d65f8:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   d65fa:	6852      	ldr	r2, [r2, #4]
   d65fc:	685b      	ldr	r3, [r3, #4]
   d65fe:	5cd0      	ldrb	r0, [r2, r3]
   d6600:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   d6604:	4258      	negs	r0, r3
   d6606:	4158      	adcs	r0, r3
   d6608:	bd10      	pop	{r4, pc}
        // compile-time dependency on strtod() optional
        const char* const s = d_->json + t_->start;
        return strtol(s, nullptr, 10);
    }
    default:
        return 0;
   d660a:	2000      	movs	r0, #0
    }
}
   d660c:	bd10      	pop	{r4, pc}

000d660e <_ZN5spark18JSONObjectIterator4nextEv>:
        n_ = t->size; // Number of properties
        d_ = d;
    }
}

bool spark::JSONObjectIterator::next() {
   d660e:	b510      	push	{r4, lr}
    if (!n_) {
   d6610:	6943      	ldr	r3, [r0, #20]
        n_ = t->size; // Number of properties
        d_ = d;
    }
}

bool spark::JSONObjectIterator::next() {
   d6612:	4604      	mov	r4, r0
    if (!n_) {
   d6614:	b15b      	cbz	r3, d662e <_ZN5spark18JSONObjectIterator4nextEv+0x20>
        return false;
    }
    k_ = t_; // Name
   d6616:	6880      	ldr	r0, [r0, #8]
   d6618:	60e0      	str	r0, [r4, #12]
    ++t_;
    v_ = t_; // Value
    --n_;
   d661a:	3b01      	subs	r3, #1
bool spark::JSONObjectIterator::next() {
    if (!n_) {
        return false;
    }
    k_ = t_; // Name
    ++t_;
   d661c:	3010      	adds	r0, #16
   d661e:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   d6620:	6120      	str	r0, [r4, #16]
    --n_;
   d6622:	6163      	str	r3, [r4, #20]
    if (n_) {
   d6624:	b12b      	cbz	r3, d6632 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        t_ = skipToken(t_);
   d6626:	f7ff ff4d 	bl	d64c4 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   d662a:	60a0      	str	r0, [r4, #8]
   d662c:	e001      	b.n	d6632 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
    }
}

bool spark::JSONObjectIterator::next() {
    if (!n_) {
        return false;
   d662e:	4618      	mov	r0, r3
   d6630:	bd10      	pop	{r4, pc}
    v_ = t_; // Value
    --n_;
    if (n_) {
        t_ = skipToken(t_);
    }
    return true;
   d6632:	2001      	movs	r0, #1
}
   d6634:	bd10      	pop	{r4, pc}

000d6636 <_ZN5spark10JSONWriter9endObjectEv>:
    write('{');
    state_ = BEGIN;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::endObject() {
   d6636:	b510      	push	{r4, lr}
    write('}');
   d6638:	217d      	movs	r1, #125	; 0x7d
    write('{');
    state_ = BEGIN;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::endObject() {
   d663a:	4604      	mov	r4, r0
    write('}');
   d663c:	f7ff ff92 	bl	d6564 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   d6640:	2301      	movs	r3, #1
   d6642:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d6644:	4620      	mov	r0, r4
   d6646:	bd10      	pop	{r4, pc}

000d6648 <_ZN5spark10JSONWriter14writeSeparatorEv>:
    } else if (n > 0) {
        write(buf, n);
    }
}

void spark::JSONWriter::writeSeparator() {
   d6648:	b508      	push	{r3, lr}
    switch (state_) {
   d664a:	7903      	ldrb	r3, [r0, #4]
   d664c:	2b01      	cmp	r3, #1
   d664e:	d002      	beq.n	d6656 <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   d6650:	2b02      	cmp	r3, #2
   d6652:	d002      	beq.n	d665a <_ZN5spark10JSONWriter14writeSeparatorEv+0x12>
   d6654:	bd08      	pop	{r3, pc}
    case NEXT:
        write(',');
   d6656:	212c      	movs	r1, #44	; 0x2c
   d6658:	e000      	b.n	d665c <_ZN5spark10JSONWriter14writeSeparatorEv+0x14>
        break;
    case VALUE:
        write(':');
   d665a:	213a      	movs	r1, #58	; 0x3a
   d665c:	f7ff ff82 	bl	d6564 <_ZN5spark10JSONWriter5writeEc>
   d6660:	bd08      	pop	{r3, pc}

000d6662 <_ZN5spark10JSONWriter11beginObjectEv>:
    write(']');
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::beginObject() {
   d6662:	b510      	push	{r4, lr}
   d6664:	4604      	mov	r4, r0
    writeSeparator();
   d6666:	f7ff ffef 	bl	d6648 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   d666a:	4620      	mov	r0, r4
   d666c:	217b      	movs	r1, #123	; 0x7b
   d666e:	f7ff ff79 	bl	d6564 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   d6672:	2300      	movs	r3, #0
   d6674:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d6676:	4620      	mov	r0, r4
   d6678:	bd10      	pop	{r4, pc}
	...

000d667c <_ZN5spark10JSONWriter5valueEi>:
    }
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::value(int val) {
   d667c:	b538      	push	{r3, r4, r5, lr}
   d667e:	4604      	mov	r4, r0
   d6680:	460d      	mov	r5, r1
    writeSeparator();
   d6682:	f7ff ffe1 	bl	d6648 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   d6686:	6823      	ldr	r3, [r4, #0]
   d6688:	4904      	ldr	r1, [pc, #16]	; (d669c <_ZN5spark10JSONWriter5valueEi+0x20>)
   d668a:	68db      	ldr	r3, [r3, #12]
   d668c:	4620      	mov	r0, r4
   d668e:	462a      	mov	r2, r5
   d6690:	4798      	blx	r3
    state_ = NEXT;
   d6692:	2301      	movs	r3, #1
   d6694:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d6696:	4620      	mov	r0, r4
   d6698:	bd38      	pop	{r3, r4, r5, pc}
   d669a:	bf00      	nop
   d669c:	000dbade 	.word	0x000dbade

000d66a0 <_ZN5spark10JSONWriter5valueEj>:

spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   d66a0:	b538      	push	{r3, r4, r5, lr}
   d66a2:	4604      	mov	r4, r0
   d66a4:	460d      	mov	r5, r1
    writeSeparator();
   d66a6:	f7ff ffcf 	bl	d6648 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   d66aa:	6823      	ldr	r3, [r4, #0]
   d66ac:	4904      	ldr	r1, [pc, #16]	; (d66c0 <_ZN5spark10JSONWriter5valueEj+0x20>)
   d66ae:	68db      	ldr	r3, [r3, #12]
   d66b0:	4620      	mov	r0, r4
   d66b2:	462a      	mov	r2, r5
   d66b4:	4798      	blx	r3
    state_ = NEXT;
   d66b6:	2301      	movs	r3, #1
   d66b8:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d66ba:	4620      	mov	r0, r4
   d66bc:	bd38      	pop	{r3, r4, r5, pc}
   d66be:	bf00      	nop
   d66c0:	000dbc42 	.word	0x000dbc42

000d66c4 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:
    default:
        break;
    }
}

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   d66c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d66c6:	460d      	mov	r5, r1
   d66c8:	4617      	mov	r7, r2
    write('"');
   d66ca:	2122      	movs	r1, #34	; 0x22
    default:
        break;
    }
}

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   d66cc:	4604      	mov	r4, r0
   d66ce:	442f      	add	r7, r5
    write('"');
   d66d0:	f7ff ff48 	bl	d6564 <_ZN5spark10JSONWriter5writeEc>
   d66d4:	462a      	mov	r2, r5
    const char* const end = str + size;
   d66d6:	4629      	mov	r1, r5
    const char *s = str;
    while (s != end) {
   d66d8:	42ba      	cmp	r2, r7
   d66da:	d038      	beq.n	d674e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8a>
        const char c = *s;
   d66dc:	4616      	mov	r6, r2
   d66de:	f816 5b01 	ldrb.w	r5, [r6], #1
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
   d66e2:	2d22      	cmp	r5, #34	; 0x22
   d66e4:	d003      	beq.n	d66ee <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2a>
   d66e6:	2d5c      	cmp	r5, #92	; 0x5c
   d66e8:	d001      	beq.n	d66ee <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2a>
   d66ea:	2d1f      	cmp	r5, #31
   d66ec:	d82d      	bhi.n	d674a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x86>
            write(str, s - str); // Write preceeding characters
   d66ee:	6823      	ldr	r3, [r4, #0]
   d66f0:	1a52      	subs	r2, r2, r1
   d66f2:	689b      	ldr	r3, [r3, #8]
   d66f4:	4620      	mov	r0, r4
   d66f6:	4798      	blx	r3
            write('\\');
   d66f8:	215c      	movs	r1, #92	; 0x5c
   d66fa:	4620      	mov	r0, r4
   d66fc:	f7ff ff32 	bl	d6564 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   d6700:	2d0c      	cmp	r5, #12
   d6702:	d019      	beq.n	d6738 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
   d6704:	d807      	bhi.n	d6716 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x52>
   d6706:	2d09      	cmp	r5, #9
   d6708:	d00f      	beq.n	d672a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x66>
   d670a:	2d0a      	cmp	r5, #10
   d670c:	d012      	beq.n	d6734 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x70>
   d670e:	2d08      	cmp	r5, #8
   d6710:	d114      	bne.n	d673c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x78>
            case '"':
            case '\\':
                write(c);
                break;
            case 0x08: // Backspace
                write('b');
   d6712:	2162      	movs	r1, #98	; 0x62
   d6714:	e00a      	b.n	d672c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
    while (s != end) {
        const char c = *s;
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
            write(str, s - str); // Write preceeding characters
            write('\\');
            switch (c) {
   d6716:	2d22      	cmp	r5, #34	; 0x22
   d6718:	d005      	beq.n	d6726 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
   d671a:	2d5c      	cmp	r5, #92	; 0x5c
   d671c:	d003      	beq.n	d6726 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
   d671e:	2d0d      	cmp	r5, #13
   d6720:	d10c      	bne.n	d673c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x78>
                break;
            case 0x0c: // Form feed
                write('f');
                break;
            case 0x0d: // Carriage return
                write('r');
   d6722:	2172      	movs	r1, #114	; 0x72
   d6724:	e002      	b.n	d672c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
            write(str, s - str); // Write preceeding characters
            write('\\');
            switch (c) {
            case '"':
            case '\\':
                write(c);
   d6726:	4629      	mov	r1, r5
   d6728:	e000      	b.n	d672c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
                break;
            case 0x08: // Backspace
                write('b');
                break;
            case 0x09: // Tab
                write('t');
   d672a:	2174      	movs	r1, #116	; 0x74
            case '"':
            case '\\':
                write(c);
                break;
            case 0x08: // Backspace
                write('b');
   d672c:	4620      	mov	r0, r4
   d672e:	f7ff ff19 	bl	d6564 <_ZN5spark10JSONWriter5writeEc>
                break;
   d6732:	e009      	b.n	d6748 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x84>
            case 0x09: // Tab
                write('t');
                break;
            case 0x0a: // Line feed
                write('n');
   d6734:	216e      	movs	r1, #110	; 0x6e
   d6736:	e7f9      	b.n	d672c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
                break;
            case 0x0c: // Form feed
                write('f');
   d6738:	2166      	movs	r1, #102	; 0x66
   d673a:	e7f7      	b.n	d672c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   d673c:	6823      	ldr	r3, [r4, #0]
   d673e:	490a      	ldr	r1, [pc, #40]	; (d6768 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xa4>)
   d6740:	68db      	ldr	r3, [r3, #12]
   d6742:	462a      	mov	r2, r5
   d6744:	4620      	mov	r0, r4
   d6746:	4798      	blx	r3
                break;
            }
            str = s + 1;
   d6748:	4631      	mov	r1, r6

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
    write('"');
    const char* const end = str + size;
    const char *s = str;
    while (s != end) {
   d674a:	4632      	mov	r2, r6
   d674c:	e7c4      	b.n	d66d8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x14>
            }
            str = s + 1;
        }
        ++s;
    }
    if (s != str) {
   d674e:	4291      	cmp	r1, r2
   d6750:	d004      	beq.n	d675c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x98>
        write(str, s - str); // Write remaining characters
   d6752:	6823      	ldr	r3, [r4, #0]
   d6754:	1a52      	subs	r2, r2, r1
   d6756:	689d      	ldr	r5, [r3, #8]
   d6758:	4620      	mov	r0, r4
   d675a:	47a8      	blx	r5
    }
    write('"');
   d675c:	2122      	movs	r1, #34	; 0x22
   d675e:	4620      	mov	r0, r4
   d6760:	f7ff ff00 	bl	d6564 <_ZN5spark10JSONWriter5writeEc>
   d6764:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d6766:	bf00      	nop
   d6768:	000dc0db 	.word	0x000dc0db

000d676c <_ZN5spark10JSONWriter4nameEPKcj>:
    write('}');
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   d676c:	b570      	push	{r4, r5, r6, lr}
   d676e:	4604      	mov	r4, r0
   d6770:	460d      	mov	r5, r1
   d6772:	4616      	mov	r6, r2
    writeSeparator();
   d6774:	f7ff ff68 	bl	d6648 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   d6778:	4620      	mov	r0, r4
   d677a:	4632      	mov	r2, r6
   d677c:	4629      	mov	r1, r5
   d677e:	f7ff ffa1 	bl	d66c4 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   d6782:	2302      	movs	r3, #2
   d6784:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d6786:	4620      	mov	r0, r4
   d6788:	bd70      	pop	{r4, r5, r6, pc}

000d678a <_ZN5spark10JSONWriter5valueEPKcj>:
    printf("%g", val);
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   d678a:	b570      	push	{r4, r5, r6, lr}
   d678c:	4604      	mov	r4, r0
   d678e:	460d      	mov	r5, r1
   d6790:	4616      	mov	r6, r2
    writeSeparator();
   d6792:	f7ff ff59 	bl	d6648 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   d6796:	4620      	mov	r0, r4
   d6798:	4632      	mov	r2, r6
   d679a:	4629      	mov	r1, r5
   d679c:	f7ff ff92 	bl	d66c4 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   d67a0:	2301      	movs	r3, #1
   d67a2:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d67a4:	4620      	mov	r0, r4
   d67a6:	bd70      	pop	{r4, r5, r6, pc}

000d67a8 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
    t->end = str - json; // Update string length
    return true;
}

// spark::JSONString
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   d67a8:	b510      	push	{r4, lr}

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d67aa:	2300      	movs	r3, #0
   d67ac:	4604      	mov	r4, r0
   d67ae:	6003      	str	r3, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d67b0:	6043      	str	r3, [r0, #4]
}

// spark::JSONString
inline spark::JSONString::JSONString() :
        s_(""),
        n_(0) {
   d67b2:	4810      	ldr	r0, [pc, #64]	; (d67f4 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x4c>)
   d67b4:	60a0      	str	r0, [r4, #8]
   d67b6:	60e3      	str	r3, [r4, #12]
        JSONString() {
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   d67b8:	b1d1      	cbz	r1, d67f0 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x48>
   d67ba:	780b      	ldrb	r3, [r1, #0]
   d67bc:	2b03      	cmp	r3, #3
   d67be:	d006      	beq.n	d67ce <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   d67c0:	b9b3      	cbnz	r3, d67f0 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x48>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   d67c2:	6813      	ldr	r3, [r2, #0]
   d67c4:	6858      	ldr	r0, [r3, #4]
   d67c6:	684b      	ldr	r3, [r1, #4]
   d67c8:	5cc3      	ldrb	r3, [r0, r3]
   d67ca:	2b6e      	cmp	r3, #110	; 0x6e
   d67cc:	d008      	beq.n	d67e0 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x38>
            s_ = d->json + t->start;
   d67ce:	6813      	ldr	r3, [r2, #0]
   d67d0:	6858      	ldr	r0, [r3, #4]
   d67d2:	684b      	ldr	r3, [r1, #4]
   d67d4:	4403      	add	r3, r0
   d67d6:	60a3      	str	r3, [r4, #8]
            n_ = t->end - t->start;
   d67d8:	688b      	ldr	r3, [r1, #8]
   d67da:	6849      	ldr	r1, [r1, #4]
   d67dc:	1a5b      	subs	r3, r3, r1
   d67de:	60e3      	str	r3, [r4, #12]
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
   d67e0:	4611      	mov	r1, r2
   d67e2:	4620      	mov	r0, r4
   d67e4:	f851 3b04 	ldr.w	r3, [r1], #4
   d67e8:	f840 3b04 	str.w	r3, [r0], #4
   d67ec:	f7ff fa10 	bl	d5c10 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
        }
        d_ = d;
    }
}
   d67f0:	4620      	mov	r0, r4
   d67f2:	bd10      	pop	{r4, pc}
   d67f4:	000dbc38 	.word	0x000dbc38

000d67f8 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d67f8:	2300      	movs	r3, #0
bool spark::JSONString::operator==(const JSONString &str) const {
    return n_ == str.n_ && strncmp(s_, str.s_, n_) == 0;
}

// spark::JSONObjectIterator
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   d67fa:	b510      	push	{r4, lr}
   d67fc:	4604      	mov	r4, r0
   d67fe:	6003      	str	r3, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d6800:	6043      	str	r3, [r0, #4]
// spark::JSONObjectIterator
inline spark::JSONObjectIterator::JSONObjectIterator() :
        t_(nullptr),
        k_(nullptr),
        v_(nullptr),
        n_(0) {
   d6802:	6083      	str	r3, [r0, #8]
   d6804:	60c3      	str	r3, [r0, #12]
   d6806:	6103      	str	r3, [r0, #16]
   d6808:	6143      	str	r3, [r0, #20]
        JSONObjectIterator() {
    if (t && t->type == JSMN_OBJECT) {
   d680a:	b171      	cbz	r1, d682a <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x32>
   d680c:	780b      	ldrb	r3, [r1, #0]
   d680e:	2b01      	cmp	r3, #1
   d6810:	d10b      	bne.n	d682a <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x32>
        t_ = t + 1; // First property's name
   d6812:	f101 0310 	add.w	r3, r1, #16
   d6816:	6083      	str	r3, [r0, #8]
        n_ = t->size; // Number of properties
   d6818:	68cb      	ldr	r3, [r1, #12]
   d681a:	6143      	str	r3, [r0, #20]
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
   d681c:	4611      	mov	r1, r2
   d681e:	f851 3b04 	ldr.w	r3, [r1], #4
   d6822:	f840 3b04 	str.w	r3, [r0], #4
   d6826:	f7ff f9f3 	bl	d5c10 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
        d_ = d;
    }
}
   d682a:	4620      	mov	r0, r4
   d682c:	bd10      	pop	{r4, pc}

000d682e <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d682e:	2300      	movs	r3, #0
        }
    }
};

// spark::JSONValue
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   d6830:	b510      	push	{r4, lr}
   d6832:	4604      	mov	r4, r0
   d6834:	6003      	str	r3, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d6836:	6043      	str	r3, [r0, #4]
        JSONValue() {
    if (t) {
        t_ = t;
   d6838:	6081      	str	r1, [r0, #8]
};

// spark::JSONValue
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
        JSONValue() {
    if (t) {
   d683a:	b131      	cbz	r1, d684a <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x1c>
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
   d683c:	4611      	mov	r1, r2
   d683e:	f851 3b04 	ldr.w	r3, [r1], #4
   d6842:	f840 3b04 	str.w	r3, [r0], #4
   d6846:	f7ff f9e3 	bl	d5c10 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
        t_ = t;
        d_ = d;
    }
}
   d684a:	4620      	mov	r0, r4
   d684c:	bd10      	pop	{r4, pc}

000d684e <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   d684e:	6880      	ldr	r0, [r0, #8]
   d6850:	6803      	ldr	r3, [r0, #0]
   d6852:	68db      	ldr	r3, [r3, #12]
   d6854:	4718      	bx	r3

000d6856 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
inline void spark::StreamLogHandler::printf(const char *fmt, ArgsT... args) {
    stream_->printf(fmt, args...);
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
   d6856:	4770      	bx	lr

000d6858 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   d6858:	b119      	cbz	r1, d6862 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   d685a:	680b      	ldr	r3, [r1, #0]
   d685c:	4608      	mov	r0, r1
   d685e:	685b      	ldr	r3, [r3, #4]
   d6860:	4718      	bx	r3
   d6862:	4770      	bx	lr

000d6864 <_ZN5spark19OutputStreamFactory13destroyStreamEP5Print>:
}

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   d6864:	b119      	cbz	r1, d686e <_ZN5spark19OutputStreamFactory13destroyStreamEP5Print+0xa>
   d6866:	680b      	ldr	r3, [r1, #0]
   d6868:	4608      	mov	r0, r1
   d686a:	685b      	ldr	r3, [r3, #4]
   d686c:	4718      	bx	r3
   d686e:	4770      	bx	lr

000d6870 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:

    virtual Print* createStream(const char *type, const JSONValue &params) = 0;
    virtual void destroyStream(Print *stream);
};

class DefaultOutputStreamFactory: public OutputStreamFactory {
   d6870:	4770      	bx	lr

000d6872 <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
    virtual LogHandler* createHandler(const char *type, LogLevel level, LogCategoryFilters filters, Print *stream,
            const JSONValue &params) = 0; // TODO: Use some generic container or a buffer instead of JSONValue
    virtual void destroyHandler(LogHandler *handler);
};

class DefaultLogHandlerFactory: public LogHandlerFactory {
   d6872:	4770      	bx	lr

000d6874 <_ZN5spark16JSONStreamWriterD1Ev>:
    void writeSeparator();
    void writeEscaped(const char *data, size_t size);
    void write(char c);
};

class JSONStreamWriter: public JSONWriter {
   d6874:	4770      	bx	lr

000d6876 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
    return s;
}
#endif

// Iterates over subcategory names separated by '.' character
const char* nextSubcategoryName(const char* &category, size_t &size) {
   d6876:	b538      	push	{r3, r4, r5, lr}
   d6878:	4604      	mov	r4, r0
   d687a:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   d687c:	6800      	ldr	r0, [r0, #0]
   d687e:	212e      	movs	r1, #46	; 0x2e
   d6880:	f002 fd70 	bl	d9364 <strchrnul>
    size = s - category;
   d6884:	6823      	ldr	r3, [r4, #0]
   d6886:	1ac3      	subs	r3, r0, r3
   d6888:	602b      	str	r3, [r5, #0]
    if (size) {
   d688a:	b123      	cbz	r3, d6896 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   d688c:	7803      	ldrb	r3, [r0, #0]
   d688e:	b103      	cbz	r3, d6892 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   d6890:	3001      	adds	r0, #1
   d6892:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d6894:	6020      	str	r0, [r4, #0]
        }
        std::swap(s, category);
        return s;
    }
    return nullptr;
   d6896:	4618      	mov	r0, r3
}
   d6898:	bd38      	pop	{r3, r4, r5, pc}

000d689a <_ZN5spark16JSONStreamWriterD0Ev>:
   d689a:	b510      	push	{r4, lr}
   d689c:	210c      	movs	r1, #12
   d689e:	4604      	mov	r4, r0
   d68a0:	f001 fd99 	bl	d83d6 <_ZdlPvj>
   d68a4:	4620      	mov	r0, r4
   d68a6:	bd10      	pop	{r4, pc}

000d68a8 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   d68a8:	b510      	push	{r4, lr}
   d68aa:	2104      	movs	r1, #4
   d68ac:	4604      	mov	r4, r0
   d68ae:	f001 fd92 	bl	d83d6 <_ZdlPvj>
   d68b2:	4620      	mov	r0, r4
   d68b4:	bd10      	pop	{r4, pc}

000d68b6 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:

    virtual Print* createStream(const char *type, const JSONValue &params) = 0;
    virtual void destroyStream(Print *stream);
};

class DefaultOutputStreamFactory: public OutputStreamFactory {
   d68b6:	b510      	push	{r4, lr}
   d68b8:	2104      	movs	r1, #4
   d68ba:	4604      	mov	r4, r0
   d68bc:	f001 fd8b 	bl	d83d6 <_ZdlPvj>
   d68c0:	4620      	mov	r0, r4
   d68c2:	bd10      	pop	{r4, pc}

000d68c4 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != 3
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   d68c4:	b538      	push	{r3, r4, r5, lr}
   d68c6:	460c      	mov	r4, r1
   d68c8:	4605      	mov	r5, r0
#if PLATFORM_ID != 3
    if (stream == &Serial) {
   d68ca:	f001 fc91 	bl	d81f0 <_Z16_fetch_usbserialv>
   d68ce:	4284      	cmp	r4, r0
   d68d0:	d00d      	beq.n	d68ee <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2a>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   d68d2:	f001 fc01 	bl	d80d8 <_Z22__fetch_global_Serial1v>
   d68d6:	4284      	cmp	r4, r0
   d68d8:	d105      	bne.n	d68e6 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x22>
        Serial1.end();
   d68da:	f001 fbfd 	bl	d80d8 <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}
   d68de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
        Serial1.end();
   d68e2:	f001 bbf6 	b.w	d80d2 <_ZN11USARTSerial3endEv>
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
   d68e6:	4621      	mov	r1, r4
   d68e8:	4628      	mov	r0, r5
   d68ea:	f7ff ffbb 	bl	d6864 <_ZN5spark19OutputStreamFactory13destroyStreamEP5Print>
   d68ee:	bd38      	pop	{r3, r4, r5, pc}

000d68f0 <_ZNK5spark10JSONStringeqEPKc.isra.7>:

inline bool spark::JSONString::isEmpty() const {
    return !n_;
}

inline bool spark::JSONString::operator==(const char *str) const {
   d68f0:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   d68f2:	f002 fd41 	bl	d9378 <strcmp>
}
   d68f6:	fab0 f080 	clz	r0, r0
   d68fa:	0940      	lsrs	r0, r0, #5
   d68fc:	bd08      	pop	{r3, pc}

000d68fe <_ZN5spark10JSONWriter5valueEPKc>:

inline spark::JSONWriter& spark::JSONWriter::name(const String &name) {
    return this->name(name.c_str(), name.length());
}

inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   d68fe:	b538      	push	{r3, r4, r5, lr}
   d6900:	4605      	mov	r5, r0
    return value(val, strlen(val));
   d6902:	4608      	mov	r0, r1

inline spark::JSONWriter& spark::JSONWriter::name(const String &name) {
    return this->name(name.c_str(), name.length());
}

inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   d6904:	460c      	mov	r4, r1
    return value(val, strlen(val));
   d6906:	f002 fd64 	bl	d93d2 <strlen>
   d690a:	4621      	mov	r1, r4
   d690c:	4602      	mov	r2, r0
   d690e:	4628      	mov	r0, r5
}
   d6910:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
inline spark::JSONWriter& spark::JSONWriter::name(const String &name) {
    return this->name(name.c_str(), name.length());
}

inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
    return value(val, strlen(val));
   d6914:	f7ff bf39 	b.w	d678a <_ZN5spark10JSONWriter5valueEPKcj>

000d6918 <_ZN14RecursiveMutex4lockEv>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   d6918:	6800      	ldr	r0, [r0, #0]
   d691a:	f7fe bed3 	b.w	d56c4 <os_mutex_recursive_lock>

000d691e <_ZN5spark16StreamLogHandler5writeEPKc>:

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
}

inline void spark::StreamLogHandler::write(const char *str) {
   d691e:	b570      	push	{r4, r5, r6, lr}
   d6920:	4604      	mov	r4, r0
    write(str, strlen(str));
   d6922:	4608      	mov	r0, r1

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
}

inline void spark::StreamLogHandler::write(const char *str) {
   d6924:	460d      	mov	r5, r1
    write(str, strlen(str));
   d6926:	f002 fd54 	bl	d93d2 <strlen>
   d692a:	6823      	ldr	r3, [r4, #0]
   d692c:	4602      	mov	r2, r0
   d692e:	4629      	mov	r1, r5
   d6930:	4620      	mov	r0, r4
   d6932:	68db      	ldr	r3, [r3, #12]
}
   d6934:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
}

inline void spark::StreamLogHandler::write(const char *str) {
    write(str, strlen(str));
   d6938:	4718      	bx	r3

000d693a <_ZN5spark16StreamLogHandler5writeEc>:
}

inline void spark::StreamLogHandler::write(char c) {
   d693a:	b513      	push	{r0, r1, r4, lr}
   d693c:	ab02      	add	r3, sp, #8
    write(&c, 1);
   d693e:	6802      	ldr	r2, [r0, #0]

inline void spark::StreamLogHandler::write(const char *str) {
    write(str, strlen(str));
}

inline void spark::StreamLogHandler::write(char c) {
   d6940:	f803 1d01 	strb.w	r1, [r3, #-1]!
    write(&c, 1);
   d6944:	68d4      	ldr	r4, [r2, #12]
   d6946:	4619      	mov	r1, r3
   d6948:	2201      	movs	r2, #1
   d694a:	47a0      	blx	r4
}
   d694c:	b002      	add	sp, #8
   d694e:	bd10      	pop	{r4, pc}

000d6950 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
        }
    }
    return level;
}

int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   d6950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   d6954:	6845      	ldr	r5, [r0, #4]
   d6956:	6807      	ldr	r7, [r0, #0]
   d6958:	b085      	sub	sp, #20
   d695a:	4691      	mov	r9, r2
   d695c:	2214      	movs	r2, #20
   d695e:	4355      	muls	r5, r2
   d6960:	9301      	str	r3, [sp, #4]
   d6962:	10ab      	asrs	r3, r5, #2
   d6964:	4d19      	ldr	r5, [pc, #100]	; (d69cc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x7c>)
              random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      __i += __n;
   d6966:	9202      	str	r2, [sp, #8]
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   d6968:	435d      	muls	r5, r3
   d696a:	468b      	mov	fp, r1
   d696c:	463c      	mov	r4, r7
    return std::distance(nodes.begin(), std::lower_bound(nodes.begin(), nodes.end(), std::make_pair(name, size),
            [&found](const Node &node, const std::pair<const char*, size_t> &value) {
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
                if (cmp == 0) {
                    if (node.size == value.second) { // Lengths are equal
                        found = true; // Allows caller code to avoid extra call to strncmp()
   d696e:	2301      	movs	r3, #1
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   d6970:	2d00      	cmp	r5, #0
   d6972:	9303      	str	r3, [sp, #12]
   d6974:	dd23      	ble.n	d69be <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x6e>
              random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      __i += __n;
   d6976:	9b02      	ldr	r3, [sp, #8]
	{
	  _DistanceType __half = __len >> 1;
   d6978:	106e      	asrs	r6, r5, #1
   d697a:	fb03 f006 	mul.w	r0, r3, r6
   d697e:	eb04 0800 	add.w	r8, r4, r0

int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
    // Using binary search to find existent node or suitable position for new node
    return std::distance(nodes.begin(), std::lower_bound(nodes.begin(), nodes.end(), std::make_pair(name, size),
            [&found](const Node &node, const std::pair<const char*, size_t> &value) {
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   d6982:	464a      	mov	r2, r9
   d6984:	f8b8 a004 	ldrh.w	sl, [r8, #4]
   d6988:	5820      	ldr	r0, [r4, r0]
   d698a:	45d1      	cmp	r9, sl
   d698c:	bf28      	it	cs
   d698e:	4652      	movcs	r2, sl
   d6990:	4659      	mov	r1, fp
   d6992:	f002 fd26 	bl	d93e2 <strncmp>
                if (cmp == 0) {
   d6996:	9b03      	ldr	r3, [sp, #12]
   d6998:	b948      	cbnz	r0, d69ae <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x5e>
                    if (node.size == value.second) { // Lengths are equal
   d699a:	45d1      	cmp	r9, sl
   d699c:	d103      	bne.n	d69a6 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   d699e:	9a01      	ldr	r2, [sp, #4]
   d69a0:	7013      	strb	r3, [r2, #0]
        }
    }
    return level;
}

int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   d69a2:	4635      	mov	r5, r6
   d69a4:	e7e4      	b.n	d6970 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x20>
                if (cmp == 0) {
                    if (node.size == value.second) { // Lengths are equal
                        found = true; // Allows caller code to avoid extra call to strncmp()
                        return false;
                    }
                    return node.size < value.second;
   d69a6:	bf8c      	ite	hi
   d69a8:	2001      	movhi	r0, #1
   d69aa:	2000      	movls	r0, #0
   d69ac:	e000      	b.n	d69b0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                }
                return cmp < 0;
   d69ae:	0fc0      	lsrs	r0, r0, #31
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   d69b0:	2800      	cmp	r0, #0
   d69b2:	d0f6      	beq.n	d69a2 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x52>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   d69b4:	1bae      	subs	r6, r5, r6
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
	    {
	      __first = __middle;
	      ++__first;
   d69b6:	f108 0414 	add.w	r4, r8, #20
	      __len = __len - __half - 1;
   d69ba:	3e01      	subs	r6, #1
   d69bc:	e7f1      	b.n	d69a2 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x52>
            }));
   d69be:	1be4      	subs	r4, r4, r7
}
   d69c0:	4802      	ldr	r0, [pc, #8]	; (d69cc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x7c>)
                        return false;
                    }
                    return node.size < value.second;
                }
                return cmp < 0;
            }));
   d69c2:	10a4      	asrs	r4, r4, #2
}
   d69c4:	4360      	muls	r0, r4
   d69c6:	b005      	add	sp, #20
   d69c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d69cc:	cccccccd 	.word	0xcccccccd

000d69d0 <_ZNK5spark6detail9LogFilter5levelEPKc>:
}

spark::detail::LogFilter::~LogFilter() {
}

LogLevel spark::detail::LogFilter::level(const char *category) const {
   d69d0:	b5f0      	push	{r4, r5, r6, r7, lr}
   d69d2:	b085      	sub	sp, #20
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
   d69d4:	6903      	ldr	r3, [r0, #16]
}

spark::detail::LogFilter::~LogFilter() {
}

LogLevel spark::detail::LogFilter::level(const char *category) const {
   d69d6:	9101      	str	r1, [sp, #4]
    LogLevel level = level_; // Default level
   d69d8:	7e06      	ldrb	r6, [r0, #24]
    if (!nodes_.isEmpty() && category) {
   d69da:	b313      	cbz	r3, d6a22 <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
   d69dc:	b309      	cbz	r1, d6a22 <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
   d69de:	af04      	add	r7, sp, #16
   d69e0:	2300      	movs	r3, #0
   d69e2:	f847 3d04 	str.w	r3, [r7, #-4]!
}

LogLevel spark::detail::LogFilter::level(const char *category) const {
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   d69e6:	f100 040c 	add.w	r4, r0, #12
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
   d69ea:	461d      	mov	r5, r3
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
   d69ec:	4639      	mov	r1, r7
   d69ee:	a801      	add	r0, sp, #4
   d69f0:	f7ff ff41 	bl	d6876 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   d69f4:	4601      	mov	r1, r0
   d69f6:	b1a0      	cbz	r0, d6a22 <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
            bool found = false;
   d69f8:	ab04      	add	r3, sp, #16
            const int index = nodeIndex(*pNodes, name, size, found);
   d69fa:	9a03      	ldr	r2, [sp, #12]
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
   d69fc:	f803 5d05 	strb.w	r5, [r3, #-5]!
            const int index = nodeIndex(*pNodes, name, size, found);
   d6a00:	4620      	mov	r0, r4
   d6a02:	f7ff ffa5 	bl	d6950 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   d6a06:	f89d 300b 	ldrb.w	r3, [sp, #11]
   d6a0a:	b153      	cbz	r3, d6a22 <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
    return data_[i];
}

template<typename T, typename AllocatorT>
inline const T& spark::Vector<T, AllocatorT>::at(int i) const {
    return data_[i];
   d6a0c:	6823      	ldr	r3, [r4, #0]
   d6a0e:	2414      	movs	r4, #20
   d6a10:	fb04 3400 	mla	r4, r4, r0, r3
            }
            const Node &node = pNodes->at(index);
            if (node.level >= 0) {
                level = (LogLevel)node.level;
            }
            pNodes = &node.nodes;
   d6a14:	3408      	adds	r4, #8
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found) {
                break;
            }
            const Node &node = pNodes->at(index);
            if (node.level >= 0) {
   d6a16:	f934 3c02 	ldrsh.w	r3, [r4, #-2]
   d6a1a:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   d6a1c:	bfa8      	it	ge
   d6a1e:	b2de      	uxtbge	r6, r3
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
   d6a20:	e7e4      	b.n	d69ec <_ZNK5spark6detail9LogFilter5levelEPKc+0x1c>
            }
            pNodes = &node.nodes;
        }
    }
    return level;
}
   d6a22:	4630      	mov	r0, r6
   d6a24:	b005      	add	sp, #20
   d6a26:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6a28 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   d6a28:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   d6a2a:	4c09      	ldr	r4, [pc, #36]	; (d6a50 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   d6a2c:	6823      	ldr	r3, [r4, #0]
   d6a2e:	07db      	lsls	r3, r3, #31
   d6a30:	d40b      	bmi.n	d6a4a <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   d6a32:	4620      	mov	r0, r4
   d6a34:	f7fd fb42 	bl	d40bc <__cxa_guard_acquire>
   d6a38:	b138      	cbz	r0, d6a4a <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   d6a3a:	4620      	mov	r0, r4
   d6a3c:	f7fd fb43 	bl	d40c6 <__cxa_guard_release>
   d6a40:	4a04      	ldr	r2, [pc, #16]	; (d6a54 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   d6a42:	4905      	ldr	r1, [pc, #20]	; (d6a58 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   d6a44:	4805      	ldr	r0, [pc, #20]	; (d6a5c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x34>)
   d6a46:	f001 fcc1 	bl	d83cc <__aeabi_atexit>
    return &factory;
}
   d6a4a:	4804      	ldr	r0, [pc, #16]	; (d6a5c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x34>)
   d6a4c:	bd10      	pop	{r4, pc}
   d6a4e:	bf00      	nop
   d6a50:	2003e364 	.word	0x2003e364
   d6a54:	2003e1a0 	.word	0x2003e1a0
   d6a58:	000d6873 	.word	0x000d6873
   d6a5c:	2003e0ac 	.word	0x2003e0ac

000d6a60 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   d6a60:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   d6a62:	4c09      	ldr	r4, [pc, #36]	; (d6a88 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   d6a64:	6823      	ldr	r3, [r4, #0]
   d6a66:	07db      	lsls	r3, r3, #31
   d6a68:	d40b      	bmi.n	d6a82 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   d6a6a:	4620      	mov	r0, r4
   d6a6c:	f7fd fb26 	bl	d40bc <__cxa_guard_acquire>
   d6a70:	b138      	cbz	r0, d6a82 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   d6a72:	4620      	mov	r0, r4
   d6a74:	f7fd fb27 	bl	d40c6 <__cxa_guard_release>
   d6a78:	4a04      	ldr	r2, [pc, #16]	; (d6a8c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   d6a7a:	4905      	ldr	r1, [pc, #20]	; (d6a90 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   d6a7c:	4805      	ldr	r0, [pc, #20]	; (d6a94 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x34>)
   d6a7e:	f001 fca5 	bl	d83cc <__aeabi_atexit>
    return &factory;
}
   d6a82:	4804      	ldr	r0, [pc, #16]	; (d6a94 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x34>)
   d6a84:	bd10      	pop	{r4, pc}
   d6a86:	bf00      	nop
   d6a88:	2003e394 	.word	0x2003e394
   d6a8c:	2003e1a0 	.word	0x2003e1a0
   d6a90:	000d6871 	.word	0x000d6871
   d6a94:	2003e0a8 	.word	0x2003e0a8

000d6a98 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   d6a98:	b538      	push	{r3, r4, r5, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d6a9a:	2500      	movs	r5, #0
   d6a9c:	4604      	mov	r4, r0
   d6a9e:	6005      	str	r5, [r0, #0]
   d6aa0:	6045      	str	r5, [r0, #4]
   d6aa2:	6085      	str	r5, [r0, #8]
   d6aa4:	6105      	str	r5, [r0, #16]
   d6aa6:	6145      	str	r5, [r0, #20]
   d6aa8:	6185      	str	r5, [r0, #24]
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d6aaa:	f840 5f24 	str.w	r5, [r0, #36]!
    {
        os_mutex_recursive_create(&handle_);
   d6aae:	f7fe fdf9 	bl	d56a4 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   d6ab2:	f7ff ffb9 	bl	d6a28 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   d6ab6:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   d6ab8:	f7ff ffd2 	bl	d6a60 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   d6abc:	7325      	strb	r5, [r4, #12]
#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
    streamFactory_ = DefaultOutputStreamFactory::instance();
   d6abe:	6220      	str	r0, [r4, #32]
#endif
    outputActive_ = false;
}
   d6ac0:	4620      	mov	r0, r4
   d6ac2:	bd38      	pop	{r3, r4, r5, pc}

000d6ac4 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   d6ac4:	b510      	push	{r4, lr}
    static LogManager mgr;
   d6ac6:	4c0a      	ldr	r4, [pc, #40]	; (d6af0 <_ZN5spark10LogManager8instanceEv+0x2c>)
   d6ac8:	6823      	ldr	r3, [r4, #0]
   d6aca:	07db      	lsls	r3, r3, #31
   d6acc:	d40e      	bmi.n	d6aec <_ZN5spark10LogManager8instanceEv+0x28>
   d6ace:	4620      	mov	r0, r4
   d6ad0:	f7fd faf4 	bl	d40bc <__cxa_guard_acquire>
   d6ad4:	b150      	cbz	r0, d6aec <_ZN5spark10LogManager8instanceEv+0x28>
   d6ad6:	4807      	ldr	r0, [pc, #28]	; (d6af4 <_ZN5spark10LogManager8instanceEv+0x30>)
   d6ad8:	f7ff ffde 	bl	d6a98 <_ZN5spark10LogManagerC1Ev>
   d6adc:	4620      	mov	r0, r4
   d6ade:	f7fd faf2 	bl	d40c6 <__cxa_guard_release>
   d6ae2:	4a05      	ldr	r2, [pc, #20]	; (d6af8 <_ZN5spark10LogManager8instanceEv+0x34>)
   d6ae4:	4905      	ldr	r1, [pc, #20]	; (d6afc <_ZN5spark10LogManager8instanceEv+0x38>)
   d6ae6:	4803      	ldr	r0, [pc, #12]	; (d6af4 <_ZN5spark10LogManager8instanceEv+0x30>)
   d6ae8:	f001 fc70 	bl	d83cc <__aeabi_atexit>
    return &mgr;
}
   d6aec:	4801      	ldr	r0, [pc, #4]	; (d6af4 <_ZN5spark10LogManager8instanceEv+0x30>)
   d6aee:	bd10      	pop	{r4, pc}
   d6af0:	2003e368 	.word	0x2003e368
   d6af4:	2003e36c 	.word	0x2003e36c
   d6af8:	2003e1a0 	.word	0x2003e1a0
   d6afc:	000d6f2f 	.word	0x000d6f2f

000d6b00 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   d6b00:	2300      	movs	r3, #0
   d6b02:	4a02      	ldr	r2, [pc, #8]	; (d6b0c <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   d6b04:	4902      	ldr	r1, [pc, #8]	; (d6b10 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   d6b06:	4803      	ldr	r0, [pc, #12]	; (d6b14 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   d6b08:	f7fe bf1c 	b.w	d5944 <log_set_callbacks>
   d6b0c:	000d6e11 	.word	0x000d6e11
   d6b10:	000d6da1 	.word	0x000d6da1
   d6b14:	000d6d29 	.word	0x000d6d29

000d6b18 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   d6b18:	2300      	movs	r3, #0
   d6b1a:	461a      	mov	r2, r3
   d6b1c:	4619      	mov	r1, r3
   d6b1e:	4618      	mov	r0, r3
   d6b20:	f7fe bf10 	b.w	d5944 <log_set_callbacks>

000d6b24 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
        k_(nullptr),
        v_(nullptr),
        n_(0) {
}

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d6b24:	b573      	push	{r0, r1, r4, r5, r6, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6b26:	ac02      	add	r4, sp, #8
        JSONObjectIterator(value.t_, value.d_) {
   d6b28:	688e      	ldr	r6, [r1, #8]
   d6b2a:	f851 3b04 	ldr.w	r3, [r1], #4
   d6b2e:	f844 3d08 	str.w	r3, [r4, #-8]!
        k_(nullptr),
        v_(nullptr),
        n_(0) {
}

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d6b32:	4605      	mov	r5, r0
   d6b34:	a801      	add	r0, sp, #4
   d6b36:	f7ff f858 	bl	d5bea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        JSONObjectIterator(value.t_, value.d_) {
   d6b3a:	4622      	mov	r2, r4
   d6b3c:	4631      	mov	r1, r6
   d6b3e:	4628      	mov	r0, r5
   d6b40:	f7ff fe5a 	bl	d67f8 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6b44:	a801      	add	r0, sp, #4
   d6b46:	f7ff f857 	bl	d5bf8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d6b4a:	4628      	mov	r0, r5
   d6b4c:	b002      	add	sp, #8
   d6b4e:	bd70      	pop	{r4, r5, r6, pc}

000d6b50 <_ZNK5spark18JSONObjectIterator5valueEv>:

inline spark::JSONString spark::JSONObjectIterator::name() const {
    return JSONString(k_, d_);
}

inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d6b50:	b573      	push	{r0, r1, r4, r5, r6, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6b52:	ac02      	add	r4, sp, #8
    return JSONValue(v_, d_);
   d6b54:	690e      	ldr	r6, [r1, #16]
   d6b56:	f851 3b04 	ldr.w	r3, [r1], #4
   d6b5a:	f844 3d08 	str.w	r3, [r4, #-8]!

inline spark::JSONString spark::JSONObjectIterator::name() const {
    return JSONString(k_, d_);
}

inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d6b5e:	4605      	mov	r5, r0
   d6b60:	a801      	add	r0, sp, #4
   d6b62:	f7ff f842 	bl	d5bea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONValue(v_, d_);
   d6b66:	4622      	mov	r2, r4
   d6b68:	4631      	mov	r1, r6
   d6b6a:	4628      	mov	r0, r5
   d6b6c:	f7ff fe5f 	bl	d682e <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6b70:	a801      	add	r0, sp, #4
   d6b72:	f7ff f841 	bl	d5bf8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d6b76:	4628      	mov	r0, r5
   d6b78:	b002      	add	sp, #8
   d6b7a:	bd70      	pop	{r4, r5, r6, pc}

000d6b7c <_ZNK5spark18JSONObjectIterator4nameEv>:

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
        JSONObjectIterator(value.t_, value.d_) {
}

inline spark::JSONString spark::JSONObjectIterator::name() const {
   d6b7c:	b573      	push	{r0, r1, r4, r5, r6, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6b7e:	ac02      	add	r4, sp, #8
    return JSONString(k_, d_);
   d6b80:	68ce      	ldr	r6, [r1, #12]
   d6b82:	f851 3b04 	ldr.w	r3, [r1], #4
   d6b86:	f844 3d08 	str.w	r3, [r4, #-8]!

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
        JSONObjectIterator(value.t_, value.d_) {
}

inline spark::JSONString spark::JSONObjectIterator::name() const {
   d6b8a:	4605      	mov	r5, r0
   d6b8c:	a801      	add	r0, sp, #4
   d6b8e:	f7ff f82c 	bl	d5bea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONString(k_, d_);
   d6b92:	4622      	mov	r2, r4
   d6b94:	4631      	mov	r1, r6
   d6b96:	4628      	mov	r0, r5
   d6b98:	f7ff fe06 	bl	d67a8 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6b9c:	a801      	add	r0, sp, #4
   d6b9e:	f7ff f82b 	bl	d5bf8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d6ba2:	4628      	mov	r0, r5
   d6ba4:	b002      	add	sp, #8
   d6ba6:	bd70      	pop	{r4, r5, r6, pc}

000d6ba8 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
    static DefaultOutputStreamFactory factory;
    return &factory;
}

void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   d6ba8:	b530      	push	{r4, r5, lr}
   d6baa:	b08b      	sub	sp, #44	; 0x2c
   d6bac:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   d6bae:	4601      	mov	r1, r0
   d6bb0:	a804      	add	r0, sp, #16
   d6bb2:	f7ff ffb7 	bl	d6b24 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
    while (it.next()) {
   d6bb6:	a804      	add	r0, sp, #16
   d6bb8:	f7ff fd29 	bl	d660e <_ZN5spark18JSONObjectIterator4nextEv>
   d6bbc:	b1e8      	cbz	r0, d6bfa <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x52>
        if (it.name() == "baud" && baudRate) {
   d6bbe:	a904      	add	r1, sp, #16
   d6bc0:	4668      	mov	r0, sp
   d6bc2:	f7ff ffdb 	bl	d6b7c <_ZNK5spark18JSONObjectIterator4nameEv>
   d6bc6:	490f      	ldr	r1, [pc, #60]	; (d6c04 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x5c>)
   d6bc8:	9802      	ldr	r0, [sp, #8]
   d6bca:	f7ff fe91 	bl	d68f0 <_ZNK5spark10JSONStringeqEPKc.isra.7>
   d6bce:	4604      	mov	r4, r0
   d6bd0:	b110      	cbz	r0, d6bd8 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x30>
   d6bd2:	1c2c      	adds	r4, r5, #0
   d6bd4:	bf18      	it	ne
   d6bd6:	2401      	movne	r4, #1
   d6bd8:	a801      	add	r0, sp, #4
   d6bda:	f7ff f80d 	bl	d5bf8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6bde:	2c00      	cmp	r4, #0
   d6be0:	d0e9      	beq.n	d6bb6 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0xe>
            *baudRate = it.value().toInt();
   d6be2:	a904      	add	r1, sp, #16
   d6be4:	4668      	mov	r0, sp
   d6be6:	f7ff ffb3 	bl	d6b50 <_ZNK5spark18JSONObjectIterator5valueEv>
   d6bea:	4668      	mov	r0, sp
   d6bec:	f7ff fcef 	bl	d65ce <_ZNK5spark9JSONValue5toIntEv>
   d6bf0:	6028      	str	r0, [r5, #0]
   d6bf2:	a801      	add	r0, sp, #4
   d6bf4:	f7ff f800 	bl	d5bf8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6bf8:	e7dd      	b.n	d6bb6 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0xe>
   d6bfa:	a805      	add	r0, sp, #20
   d6bfc:	f7fe fffc 	bl	d5bf8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        }
    }
}
   d6c00:	b00b      	add	sp, #44	; 0x2c
   d6c02:	bd30      	pop	{r4, r5, pc}
   d6c04:	000dc114 	.word	0x000dc114

000d6c08 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
    static DefaultLogHandlerFactory factory;
    return &factory;
}

// spark::DefaultOutputStreamFactory
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   d6c08:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d6c0a:	460c      	mov	r4, r1
#if PLATFORM_ID != 3
    if (strcmp(type, "Serial") == 0) {
   d6c0c:	4620      	mov	r0, r4
   d6c0e:	4913      	ldr	r1, [pc, #76]	; (d6c5c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
    static DefaultLogHandlerFactory factory;
    return &factory;
}

// spark::DefaultOutputStreamFactory
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   d6c10:	4615      	mov	r5, r2
#if PLATFORM_ID != 3
    if (strcmp(type, "Serial") == 0) {
   d6c12:	f002 fbb1 	bl	d9378 <strcmp>
   d6c16:	b940      	cbnz	r0, d6c2a <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x22>
        Serial.begin();
   d6c18:	f001 faea 	bl	d81f0 <_Z16_fetch_usbserialv>
   d6c1c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d6c20:	f001 fad6 	bl	d81d0 <_ZN9USBSerial5beginEl>
        return &Serial;
   d6c24:	f001 fae4 	bl	d81f0 <_Z16_fetch_usbserialv>
   d6c28:	e015      	b.n	d6c56 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4e>
    if (strcmp(type, "USBSerial1") == 0) {
        USBSerial1.begin();
        return &USBSerial1;
    }
#endif
    if (strcmp(type, "Serial1") == 0) {
   d6c2a:	490d      	ldr	r1, [pc, #52]	; (d6c60 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
   d6c2c:	4620      	mov	r0, r4
   d6c2e:	f002 fba3 	bl	d9378 <strcmp>
   d6c32:	b978      	cbnz	r0, d6c54 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
        int baud = 9600;
   d6c34:	a902      	add	r1, sp, #8
   d6c36:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   d6c3a:	f841 3d04 	str.w	r3, [r1, #-4]!
        getParams(params, &baud);
   d6c3e:	4628      	mov	r0, r5
   d6c40:	f7ff ffb2 	bl	d6ba8 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   d6c44:	f001 fa48 	bl	d80d8 <_Z22__fetch_global_Serial1v>
   d6c48:	9901      	ldr	r1, [sp, #4]
   d6c4a:	f001 fa3f 	bl	d80cc <_ZN11USARTSerial5beginEm>
        return &Serial1;
   d6c4e:	f001 fa43 	bl	d80d8 <_Z22__fetch_global_Serial1v>
   d6c52:	e000      	b.n	d6c56 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4e>
    }
#endif // PLATFORM_ID != 3
    return nullptr;
   d6c54:	2000      	movs	r0, #0
}
   d6c56:	b003      	add	sp, #12
   d6c58:	bd30      	pop	{r4, r5, pc}
   d6c5a:	bf00      	nop
   d6c5c:	000dc119 	.word	0x000dc119
   d6c60:	000dc120 	.word	0x000dc120

000d6c64 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d6c64:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d6c66:	6804      	ldr	r4, [r0, #0]
   d6c68:	6843      	ldr	r3, [r0, #4]
   d6c6a:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d6c6c:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d6c6e:	fb06 4603 	mla	r6, r6, r3, r4
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d6c72:	42a6      	cmp	r6, r4
   d6c74:	d005      	beq.n	d6c82 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
    |
    `- aa (error) - b (warn)
*/

// spark::detail::LogFilter
struct spark::detail::LogFilter::Node {
   d6c76:	f104 0008 	add.w	r0, r4, #8
   d6c7a:	f7ff fff3 	bl	d6c64 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d6c7e:	3414      	adds	r4, #20
   d6c80:	e7f7      	b.n	d6c72 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d6c82:	6828      	ldr	r0, [r5, #0]
   d6c84:	f7fe ff3a 	bl	d5afc <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d6c88:	4628      	mov	r0, r5
   d6c8a:	bd70      	pop	{r4, r5, r6, pc}

000d6c8c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d6c8c:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d6c8e:	6804      	ldr	r4, [r0, #0]
   d6c90:	6843      	ldr	r3, [r0, #4]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d6c92:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d6c94:	eb04 1603 	add.w	r6, r4, r3, lsl #4
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d6c98:	42a6      	cmp	r6, r4
   d6c9a:	d004      	beq.n	d6ca6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   d6c9c:	4620      	mov	r0, r4
   d6c9e:	f000 ffb1 	bl	d7c04 <_ZN6StringD1Ev>
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d6ca2:	3410      	adds	r4, #16
   d6ca4:	e7f8      	b.n	d6c98 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d6ca6:	6828      	ldr	r0, [r5, #0]
   d6ca8:	f7fe ff28 	bl	d5afc <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d6cac:	4628      	mov	r0, r5
   d6cae:	bd70      	pop	{r4, r5, r6, pc}

000d6cb0 <_ZN5spark6detail9LogFilterD1Ev>:
    swap(cats_, cats);
    swap(nodes_, nodes);
    level_ = level;
}

spark::detail::LogFilter::~LogFilter() {
   d6cb0:	b510      	push	{r4, lr}
   d6cb2:	4604      	mov	r4, r0
   d6cb4:	300c      	adds	r0, #12
   d6cb6:	f7ff ffd5 	bl	d6c64 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d6cba:	4620      	mov	r0, r4
   d6cbc:	f7ff ffe6 	bl	d6c8c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   d6cc0:	4620      	mov	r0, r4
   d6cc2:	bd10      	pop	{r4, pc}

000d6cc4 <_ZN5spark16StreamLogHandlerD1Ev>:
/*!
    \brief Stream-based log handler.

    Adapter class allowing to use existent stream objects as destination for logging output.
*/
class StreamLogHandler: public LogHandler {
   d6cc4:	b510      	push	{r4, lr}
    */
    LogHandler(LogLevel level, LogCategoryFilters filters);
    /*!
        \brief Destructor.
    */
    virtual ~LogHandler() = default;
   d6cc6:	4b04      	ldr	r3, [pc, #16]	; (d6cd8 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
/*!
    \brief Stream-based log handler.

    Adapter class allowing to use existent stream objects as destination for logging output.
*/
class StreamLogHandler: public LogHandler {
   d6cc8:	4604      	mov	r4, r0
    */
    LogHandler(LogLevel level, LogCategoryFilters filters);
    /*!
        \brief Destructor.
    */
    virtual ~LogHandler() = default;
   d6cca:	f840 3b04 	str.w	r3, [r0], #4
   d6cce:	f7ff ffef 	bl	d6cb0 <_ZN5spark6detail9LogFilterD1Ev>
/*!
    \brief Stream-based log handler.

    Adapter class allowing to use existent stream objects as destination for logging output.
*/
class StreamLogHandler: public LogHandler {
   d6cd2:	4620      	mov	r0, r4
   d6cd4:	bd10      	pop	{r4, pc}
   d6cd6:	bf00      	nop
   d6cd8:	000db7f4 	.word	0x000db7f4

000d6cdc <_ZN5spark16StreamLogHandlerD0Ev>:
   d6cdc:	b510      	push	{r4, lr}
   d6cde:	4604      	mov	r4, r0
   d6ce0:	f7ff fff0 	bl	d6cc4 <_ZN5spark16StreamLogHandlerD1Ev>
   d6ce4:	4620      	mov	r0, r4
   d6ce6:	2124      	movs	r1, #36	; 0x24
   d6ce8:	f001 fb75 	bl	d83d6 <_ZdlPvj>
   d6cec:	4620      	mov	r0, r4
   d6cee:	bd10      	pop	{r4, pc}

000d6cf0 <_ZN5spark20JSONStreamLogHandlerD1Ev>:

private:
    Print *stream_;
};

class JSONStreamLogHandler: public StreamLogHandler {
   d6cf0:	b510      	push	{r4, lr}
   d6cf2:	4b03      	ldr	r3, [pc, #12]	; (d6d00 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   d6cf4:	6003      	str	r3, [r0, #0]
   d6cf6:	4604      	mov	r4, r0
   d6cf8:	f7ff ffe4 	bl	d6cc4 <_ZN5spark16StreamLogHandlerD1Ev>
   d6cfc:	4620      	mov	r0, r4
   d6cfe:	bd10      	pop	{r4, pc}
   d6d00:	000dc104 	.word	0x000dc104

000d6d04 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   d6d04:	b510      	push	{r4, lr}
   d6d06:	4604      	mov	r4, r0
   d6d08:	f7ff fff2 	bl	d6cf0 <_ZN5spark20JSONStreamLogHandlerD1Ev>
   d6d0c:	4620      	mov	r0, r4
   d6d0e:	2124      	movs	r1, #36	; 0x24
   d6d10:	f001 fb61 	bl	d83d6 <_ZdlPvj>
   d6d14:	4620      	mov	r0, r4
   d6d16:	bd10      	pop	{r4, pc}

000d6d18 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   d6d18:	b510      	push	{r4, lr}
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d6d1a:	6803      	ldr	r3, [r0, #0]
   d6d1c:	4604      	mov	r4, r0
   d6d1e:	6818      	ldr	r0, [r3, #0]
   d6d20:	f7fe fcd8 	bl	d56d4 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   d6d24:	4620      	mov	r0, r4
   d6d26:	bd10      	pop	{r4, pc}

000d6d28 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   d6d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6d2c:	469b      	mov	fp, r3
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   d6d2e:	4b1b      	ldr	r3, [pc, #108]	; (d6d9c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>)
   d6d30:	685b      	ldr	r3, [r3, #4]
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d6d32:	f3c3 0308 	ubfx	r3, r3, #0, #9

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   d6d36:	b085      	sub	sp, #20
   d6d38:	4682      	mov	sl, r0
   d6d3a:	460e      	mov	r6, r1
   d6d3c:	4690      	mov	r8, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d6d3e:	bb53      	cbnz	r3, d6d96 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x6e>
        return;
    }
#endif
    LogManager *that = instance();
   d6d40:	f7ff fec0 	bl	d6ac4 <_ZN5spark10LogManager8instanceEv>
   d6d44:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   d6d46:	3024      	adds	r0, #36	; 0x24
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d6d48:	9003      	str	r0, [sp, #12]
      { _M_device.lock(); }
   d6d4a:	f7ff fde5 	bl	d6918 <_ZN14RecursiveMutex4lockEv>
        // prevent re-entry
        if (that->isActive()) {
   d6d4e:	7b23      	ldrb	r3, [r4, #12]
   d6d50:	b9f3      	cbnz	r3, d6d90 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x68>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d6d52:	2301      	movs	r3, #1
   d6d54:	7323      	strb	r3, [r4, #12]
   d6d56:	6825      	ldr	r5, [r4, #0]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d6d58:	6863      	ldr	r3, [r4, #4]
        if (that->isActive()) {
            return;
        }
        that->setActive(true);
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
   d6d5a:	b2f6      	uxtb	r6, r6
   d6d5c:	eb05 0983 	add.w	r9, r5, r3, lsl #2
        // prevent re-entry
        if (that->isActive()) {
            return;
        }
        that->setActive(true);
        for (LogHandler *handler: that->activeHandlers_) {
   d6d60:	454d      	cmp	r5, r9
   d6d62:	d013      	beq.n	d6d8c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x64>
   d6d64:	f855 7b04 	ldr.w	r7, [r5], #4
inline const char* spark::LogHandler::levelName(LogLevel level) {
    return log_level_name(level, nullptr);
}

inline void spark::LogHandler::message(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
    if (level >= filter_.level(category)) {
   d6d68:	4641      	mov	r1, r8
   d6d6a:	1d38      	adds	r0, r7, #4
   d6d6c:	f7ff fe30 	bl	d69d0 <_ZNK5spark6detail9LogFilter5levelEPKc>
   d6d70:	4286      	cmp	r6, r0
   d6d72:	d3f5      	bcc.n	d6d60 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x38>
        logMessage(msg, level, category, attr);
   d6d74:	683b      	ldr	r3, [r7, #0]
   d6d76:	f8cd b000 	str.w	fp, [sp]
   d6d7a:	689b      	ldr	r3, [r3, #8]
   d6d7c:	469e      	mov	lr, r3
   d6d7e:	4638      	mov	r0, r7
   d6d80:	4643      	mov	r3, r8
   d6d82:	4632      	mov	r2, r6
   d6d84:	4651      	mov	r1, sl
   d6d86:	4677      	mov	r7, lr
   d6d88:	47b8      	blx	r7
   d6d8a:	e7e9      	b.n	d6d60 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x38>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d6d8c:	2300      	movs	r3, #0
   d6d8e:	7323      	strb	r3, [r4, #12]
#endif
    LogManager *that = instance();
    LOG_WITH_LOCK(that->mutex_) {
        // prevent re-entry
        if (that->isActive()) {
            return;
   d6d90:	a803      	add	r0, sp, #12
   d6d92:	f7ff ffc1 	bl	d6d18 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   d6d96:	b005      	add	sp, #20
   d6d98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6d9c:	e000ed00 	.word	0xe000ed00

000d6da0 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:

void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   d6da0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6da4:	4699      	mov	r9, r3
   d6da6:	4b19      	ldr	r3, [pc, #100]	; (d6e0c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x6c>)
   d6da8:	685b      	ldr	r3, [r3, #4]
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d6daa:	f3c3 0308 	ubfx	r3, r3, #0, #9
        }
        that->setActive(false);
    }
}

void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   d6dae:	4607      	mov	r7, r0
   d6db0:	4688      	mov	r8, r1
   d6db2:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d6db4:	bb33      	cbnz	r3, d6e04 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x64>
        return;
    }
#endif
    LogManager *that = instance();
   d6db6:	f7ff fe85 	bl	d6ac4 <_ZN5spark10LogManager8instanceEv>
   d6dba:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   d6dbc:	3024      	adds	r0, #36	; 0x24
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d6dbe:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d6dc0:	f7ff fdaa 	bl	d6918 <_ZN14RecursiveMutex4lockEv>
        // prevent re-entry
        if (that->isActive()) {
   d6dc4:	7b23      	ldrb	r3, [r4, #12]
   d6dc6:	b9d3      	cbnz	r3, d6dfe <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x5e>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d6dc8:	2301      	movs	r3, #1
   d6dca:	7323      	strb	r3, [r4, #12]
   d6dcc:	6825      	ldr	r5, [r4, #0]
   d6dce:	6863      	ldr	r3, [r4, #4]
    }
}

inline void spark::LogHandler::write(const char *data, size_t size, LogLevel level, const char *category) {
    if (level >= filter_.level(category)) {
   d6dd0:	fa5f fb86 	uxtb.w	fp, r6
   d6dd4:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        // prevent re-entry
        if (that->isActive()) {
            return;
        }
        that->setActive(true);
        for (LogHandler *handler: that->activeHandlers_) {
   d6dd8:	4555      	cmp	r5, sl
   d6dda:	d00e      	beq.n	d6dfa <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x5a>
   d6ddc:	f855 6b04 	ldr.w	r6, [r5], #4
   d6de0:	4649      	mov	r1, r9
   d6de2:	1d30      	adds	r0, r6, #4
   d6de4:	f7ff fdf4 	bl	d69d0 <_ZNK5spark6detail9LogFilter5levelEPKc>
   d6de8:	4583      	cmp	fp, r0
   d6dea:	d3f5      	bcc.n	d6dd8 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
        write(data, size);
   d6dec:	6833      	ldr	r3, [r6, #0]
   d6dee:	4642      	mov	r2, r8
   d6df0:	68db      	ldr	r3, [r3, #12]
   d6df2:	4639      	mov	r1, r7
   d6df4:	4630      	mov	r0, r6
   d6df6:	4798      	blx	r3
   d6df8:	e7ee      	b.n	d6dd8 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d6dfa:	2300      	movs	r3, #0
   d6dfc:	7323      	strb	r3, [r4, #12]
#endif
    LogManager *that = instance();
    LOG_WITH_LOCK(that->mutex_) {
        // prevent re-entry
        if (that->isActive()) {
            return;
   d6dfe:	a801      	add	r0, sp, #4
   d6e00:	f7ff ff8a 	bl	d6d18 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->write(data, size, (LogLevel)level, category);
        }
        that->setActive(false);
    }
}
   d6e04:	b003      	add	sp, #12
   d6e06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6e0a:	bf00      	nop
   d6e0c:	e000ed00 	.word	0xe000ed00

000d6e10 <_ZN5spark10LogManager10logEnabledEiPKcPv>:

int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   d6e10:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d6e14:	4b15      	ldr	r3, [pc, #84]	; (d6e6c <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5c>)
   d6e16:	685b      	ldr	r3, [r3, #4]
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d6e18:	f3c3 0308 	ubfx	r3, r3, #0, #9
        }
        that->setActive(false);
    }
}

int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   d6e1c:	4604      	mov	r4, r0
   d6e1e:	4688      	mov	r8, r1
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d6e20:	b9fb      	cbnz	r3, d6e62 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x52>
        return 0;
    }
#endif
    LogManager *that = instance();
   d6e22:	f7ff fe4f 	bl	d6ac4 <_ZN5spark10LogManager8instanceEv>
   d6e26:	4606      	mov	r6, r0
    int minLevel = LOG_LEVEL_NONE;
    LOG_WITH_LOCK(that->mutex_) {
   d6e28:	3024      	adds	r0, #36	; 0x24
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d6e2a:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d6e2c:	f7ff fd74 	bl	d6918 <_ZN14RecursiveMutex4lockEv>
   d6e30:	e896 00a0 	ldmia.w	r6, {r5, r7}
   d6e34:	2646      	movs	r6, #70	; 0x46
   d6e36:	eb05 0787 	add.w	r7, r5, r7, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   d6e3a:	42af      	cmp	r7, r5
   d6e3c:	d107      	bne.n	d6e4e <_ZN5spark10LogManager10logEnabledEiPKcPv+0x3e>
        return 0;
    }
#endif
    LogManager *that = instance();
    int minLevel = LOG_LEVEL_NONE;
    LOG_WITH_LOCK(that->mutex_) {
   d6e3e:	a801      	add	r0, sp, #4
   d6e40:	f7ff ff6a 	bl	d6d18 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
            if (level < minLevel) {
                minLevel = level;
            }
        }
    }
    return (level >= minLevel);
   d6e44:	42b4      	cmp	r4, r6
   d6e46:	bfb4      	ite	lt
   d6e48:	2000      	movlt	r0, #0
   d6e4a:	2001      	movge	r0, #1
   d6e4c:	e00a      	b.n	d6e64 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x54>
inline LogLevel spark::LogHandler::level() const {
    return filter_.level();
}

inline LogLevel spark::LogHandler::level(const char *category) const {
    return filter_.level(category);
   d6e4e:	f855 0b04 	ldr.w	r0, [r5], #4
   d6e52:	4641      	mov	r1, r8
   d6e54:	3004      	adds	r0, #4
   d6e56:	f7ff fdbb 	bl	d69d0 <_ZNK5spark6detail9LogFilter5levelEPKc>
   d6e5a:	4286      	cmp	r6, r0
   d6e5c:	bfa8      	it	ge
   d6e5e:	4606      	movge	r6, r0
   d6e60:	e7eb      	b.n	d6e3a <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2a>
}

int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
        return 0;
   d6e62:	2000      	movs	r0, #0
                minLevel = level;
            }
        }
    }
    return (level >= minLevel);
}
   d6e64:	b002      	add	sp, #8
   d6e66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6e6a:	bf00      	nop
   d6e6c:	e000ed00 	.word	0xe000ed00

000d6e70 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d6e70:	b570      	push	{r4, r5, r6, lr}
    T* const p = find(data_, data_ + size_, value);
   d6e72:	6803      	ldr	r3, [r0, #0]
   d6e74:	6842      	ldr	r2, [r0, #4]
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d6e76:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   d6e78:	eb03 0282 	add.w	r2, r3, r2, lsl #2
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d6e7c:	429a      	cmp	r2, r3
   d6e7e:	4618      	mov	r0, r3
   d6e80:	d00e      	beq.n	d6ea0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x30>
            if (*p == value) {
   d6e82:	6806      	ldr	r6, [r0, #0]
   d6e84:	680d      	ldr	r5, [r1, #0]
   d6e86:	42ae      	cmp	r6, r5
   d6e88:	f103 0304 	add.w	r3, r3, #4
   d6e8c:	d1f6      	bne.n	d6e7c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xc>
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
        return false;
    }
    p->~T();
    move(p, p + 1, data_ + size_);
   d6e8e:	1d01      	adds	r1, r0, #4
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
   d6e90:	1a52      	subs	r2, r2, r1
   d6e92:	f002 fa0e 	bl	d92b2 <memmove>
    if (!p) {
        return false;
    }
    p->~T();
    move(p, p + 1, data_ + size_);
    --size_;
   d6e96:	6863      	ldr	r3, [r4, #4]
   d6e98:	3b01      	subs	r3, #1
   d6e9a:	6063      	str	r3, [r4, #4]
    return true;
   d6e9c:	2001      	movs	r0, #1
}
   d6e9e:	bd70      	pop	{r4, r5, r6, pc}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
        return false;
   d6ea0:	2000      	movs	r0, #0
   d6ea2:	bd70      	pop	{r4, r5, r6, pc}

000d6ea4 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
        }
    }
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
   d6ea4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d6ea6:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
   d6ea8:	3024      	adds	r0, #36	; 0x24
        }
    }
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
   d6eaa:	9101      	str	r1, [sp, #4]
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d6eac:	9003      	str	r0, [sp, #12]
      { _M_device.lock(); }
   d6eae:	f7ff fd33 	bl	d6918 <_ZN14RecursiveMutex4lockEv>
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   d6eb2:	a901      	add	r1, sp, #4
   d6eb4:	4620      	mov	r0, r4
   d6eb6:	f7ff ffdb 	bl	d6e70 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   d6eba:	b920      	cbnz	r0, d6ec6 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x22>
    }
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
   d6ebc:	a803      	add	r0, sp, #12
   d6ebe:	f7ff ff2b 	bl	d6d18 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
            resetSystemCallbacks();
        }
    }
}
   d6ec2:	b004      	add	sp, #16
   d6ec4:	bd10      	pop	{r4, pc}
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   d6ec6:	6863      	ldr	r3, [r4, #4]
   d6ec8:	2b00      	cmp	r3, #0
   d6eca:	d1f7      	bne.n	d6ebc <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x18>
            resetSystemCallbacks();
   d6ecc:	f7ff fe24 	bl	d6b18 <_ZN5spark10LogManager20resetSystemCallbacksEv>
   d6ed0:	e7f4      	b.n	d6ebc <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x18>

000d6ed2 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
            break;
        }
    }
}

void spark::LogManager::destroyFactoryHandlers() {
   d6ed2:	b570      	push	{r4, r5, r6, lr}
   d6ed4:	6905      	ldr	r5, [r0, #16]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d6ed6:	6943      	ldr	r3, [r0, #20]
   d6ed8:	2618      	movs	r6, #24
   d6eda:	4604      	mov	r4, r0
   d6edc:	fb06 5603 	mla	r6, r6, r3, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   d6ee0:	42ae      	cmp	r6, r5
   d6ee2:	d015      	beq.n	d6f10 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   d6ee4:	f105 0110 	add.w	r1, r5, #16
   d6ee8:	4620      	mov	r0, r4
   d6eea:	f7ff ffc1 	bl	d6e70 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   d6eee:	6863      	ldr	r3, [r4, #4]
   d6ef0:	b90b      	cbnz	r3, d6ef6 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   d6ef2:	f7ff fe11 	bl	d6b18 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        }
        handlerFactory_->destroyHandler(h.handler);
   d6ef6:	69e0      	ldr	r0, [r4, #28]
   d6ef8:	6929      	ldr	r1, [r5, #16]
   d6efa:	6803      	ldr	r3, [r0, #0]
   d6efc:	68db      	ldr	r3, [r3, #12]
   d6efe:	4798      	blx	r3
        if (h.stream) {
   d6f00:	6969      	ldr	r1, [r5, #20]
   d6f02:	b119      	cbz	r1, d6f0c <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   d6f04:	6a20      	ldr	r0, [r4, #32]
   d6f06:	6803      	ldr	r3, [r0, #0]
   d6f08:	68db      	ldr	r3, [r3, #12]
   d6f0a:	4798      	blx	r3
   d6f0c:	3518      	adds	r5, #24
        }
    }
}

void spark::LogManager::destroyFactoryHandlers() {
    for (const FactoryHandler &h: factoryHandlers_) {
   d6f0e:	e7e7      	b.n	d6ee0 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
   d6f10:	6925      	ldr	r5, [r4, #16]
   d6f12:	6963      	ldr	r3, [r4, #20]
   d6f14:	2618      	movs	r6, #24
   d6f16:	fb06 5603 	mla	r6, r6, r3, r5
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d6f1a:	42b5      	cmp	r5, r6
   d6f1c:	d004      	beq.n	d6f28 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
        }
    }
}

// spark::LogManager
struct spark::LogManager::FactoryHandler {
   d6f1e:	4628      	mov	r0, r5
   d6f20:	f000 fe70 	bl	d7c04 <_ZN6StringD1Ev>
   d6f24:	3518      	adds	r5, #24
   d6f26:	e7f8      	b.n	d6f1a <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
    size_ = 0;
   d6f28:	2300      	movs	r3, #0
   d6f2a:	6163      	str	r3, [r4, #20]
   d6f2c:	bd70      	pop	{r4, r5, r6, pc}

000d6f2e <_ZN5spark10LogManagerD1Ev>:
    streamFactory_ = DefaultOutputStreamFactory::instance();
#endif
    outputActive_ = false;
}

spark::LogManager::~LogManager() {
   d6f2e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d6f30:	4604      	mov	r4, r0
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d6f32:	ad02      	add	r5, sp, #8
    resetSystemCallbacks();
   d6f34:	f7ff fdf0 	bl	d6b18 <_ZN5spark10LogManager20resetSystemCallbacksEv>
#if Wiring_LogConfig
    LOG_WITH_LOCK(mutex_) {
   d6f38:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d6f3c:	f845 0d04 	str.w	r0, [r5, #-4]!
      { _M_device.lock(); }
   d6f40:	f7ff fcea 	bl	d6918 <_ZN14RecursiveMutex4lockEv>
         destroyFactoryHandlers();
   d6f44:	4620      	mov	r0, r4
   d6f46:	f7ff ffc4 	bl	d6ed2 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
}

spark::LogManager::~LogManager() {
    resetSystemCallbacks();
#if Wiring_LogConfig
    LOG_WITH_LOCK(mutex_) {
   d6f4a:	4628      	mov	r0, r5
   d6f4c:	f7ff fee4 	bl	d6d18 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d6f50:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d6f52:	b108      	cbz	r0, d6f58 <_ZN5spark10LogManagerD1Ev+0x2a>
            os_mutex_recursive_destroy(handle_);
   d6f54:	f7fe fbae 	bl	d56b4 <os_mutex_recursive_destroy>
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
   d6f58:	6925      	ldr	r5, [r4, #16]
   d6f5a:	6963      	ldr	r3, [r4, #20]
   d6f5c:	2618      	movs	r6, #24
   d6f5e:	fb06 5603 	mla	r6, r6, r3, r5
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d6f62:	42b5      	cmp	r5, r6
   d6f64:	d004      	beq.n	d6f70 <_ZN5spark10LogManagerD1Ev+0x42>
        }
    }
}

// spark::LogManager
struct spark::LogManager::FactoryHandler {
   d6f66:	4628      	mov	r0, r5
   d6f68:	f000 fe4c 	bl	d7c04 <_ZN6StringD1Ev>
   d6f6c:	3518      	adds	r5, #24
   d6f6e:	e7f8      	b.n	d6f62 <_ZN5spark10LogManagerD1Ev+0x34>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d6f70:	6920      	ldr	r0, [r4, #16]
   d6f72:	f7fe fdc3 	bl	d5afc <free>
   d6f76:	6820      	ldr	r0, [r4, #0]
   d6f78:	f7fe fdc0 	bl	d5afc <free>
#if Wiring_LogConfig
    LOG_WITH_LOCK(mutex_) {
         destroyFactoryHandlers();
    }
#endif
}
   d6f7c:	4620      	mov	r0, r4
   d6f7e:	b002      	add	sp, #8
   d6f80:	bd70      	pop	{r4, r5, r6, pc}

000d6f82 <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>:
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6f82:	6803      	ldr	r3, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d6f84:	680a      	ldr	r2, [r1, #0]
   d6f86:	6002      	str	r2, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d6f88:	600b      	str	r3, [r1, #0]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6f8a:	6843      	ldr	r3, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   d6f8c:	684a      	ldr	r2, [r1, #4]
   d6f8e:	6042      	str	r2, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d6f90:	604b      	str	r3, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6f92:	6883      	ldr	r3, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   d6f94:	688a      	ldr	r2, [r1, #8]
   d6f96:	6082      	str	r2, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d6f98:	608b      	str	r3, [r1, #8]
   d6f9a:	4770      	bx	lr

000d6f9c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        size_ = vector.size_;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   d6f9c:	b510      	push	{r4, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d6f9e:	2300      	movs	r3, #0
        size_ = vector.size_;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   d6fa0:	4604      	mov	r4, r0
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d6fa2:	6003      	str	r3, [r0, #0]
   d6fa4:	6043      	str	r3, [r0, #4]
   d6fa6:	6083      	str	r3, [r0, #8]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
   d6fa8:	f7ff ffeb 	bl	d6f82 <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
}
   d6fac:	4620      	mov	r0, r4
   d6fae:	bd10      	pop	{r4, pc}

000d6fb0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d6fb0:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d6fb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6fb4:	4604      	mov	r4, r0
   d6fb6:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d6fb8:	d925      	bls.n	d7006 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
   d6fba:	4290      	cmp	r0, r2
   d6fbc:	d224      	bcs.n	d7008 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x58>
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
   d6fbe:	1a55      	subs	r5, r2, r1
   d6fc0:	3d14      	subs	r5, #20
   d6fc2:	442c      	add	r4, r5
   d6fc4:	f1a1 0714 	sub.w	r7, r1, #20
   d6fc8:	f1a2 050c 	sub.w	r5, r2, #12
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d6fcc:	2600      	movs	r6, #0
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d6fce:	f1a5 0308 	sub.w	r3, r5, #8
   d6fd2:	429f      	cmp	r7, r3
   d6fd4:	d037      	beq.n	d7046 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x96>
                new(dest) T(std::move(*end));
   d6fd6:	b184      	cbz	r4, d6ffa <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x4a>
    |
    `- aa (error) - b (warn)
*/

// spark::detail::LogFilter
struct spark::detail::LogFilter::Node {
   d6fd8:	f855 3c08 	ldr.w	r3, [r5, #-8]
   d6fdc:	6023      	str	r3, [r4, #0]
   d6fde:	f835 3c04 	ldrh.w	r3, [r5, #-4]
   d6fe2:	80a3      	strh	r3, [r4, #4]
   d6fe4:	f935 3c02 	ldrsh.w	r3, [r5, #-2]
   d6fe8:	80e3      	strh	r3, [r4, #6]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d6fea:	60a6      	str	r6, [r4, #8]
   d6fec:	60e6      	str	r6, [r4, #12]
   d6fee:	6126      	str	r6, [r4, #16]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
   d6ff0:	4629      	mov	r1, r5
   d6ff2:	f104 0008 	add.w	r0, r4, #8
   d6ff6:	f7ff ffc4 	bl	d6f82 <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
   d6ffa:	4628      	mov	r0, r5
   d6ffc:	f7ff fe32 	bl	d6c64 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d7000:	3c14      	subs	r4, #20
   d7002:	3d14      	subs	r5, #20
   d7004:	e7e3      	b.n	d6fce <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1e>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d7006:	d01e      	beq.n	d7046 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x96>
   d7008:	f101 0508 	add.w	r5, r1, #8
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d700c:	2700      	movs	r7, #0
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d700e:	f1a5 0308 	sub.w	r3, r5, #8
   d7012:	429e      	cmp	r6, r3
   d7014:	d017      	beq.n	d7046 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x96>
                new(dest) T(std::move(*p));
   d7016:	b184      	cbz	r4, d703a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x8a>
   d7018:	f855 3c08 	ldr.w	r3, [r5, #-8]
   d701c:	6023      	str	r3, [r4, #0]
   d701e:	f835 3c04 	ldrh.w	r3, [r5, #-4]
   d7022:	80a3      	strh	r3, [r4, #4]
   d7024:	f935 3c02 	ldrsh.w	r3, [r5, #-2]
   d7028:	80e3      	strh	r3, [r4, #6]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d702a:	60a7      	str	r7, [r4, #8]
   d702c:	60e7      	str	r7, [r4, #12]
   d702e:	6127      	str	r7, [r4, #16]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
   d7030:	4629      	mov	r1, r5
   d7032:	f104 0008 	add.w	r0, r4, #8
   d7036:	f7ff ffa4 	bl	d6f82 <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
   d703a:	4628      	mov	r0, r5
   d703c:	f7ff fe12 	bl	d6c64 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d7040:	3414      	adds	r4, #20
   d7042:	3514      	adds	r5, #20
   d7044:	e7e3      	b.n	d700e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5e>
   d7046:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7048 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>:
inline bool spark::Vector<T, AllocatorT>::prepend(const Vector<T, AllocatorT> &vector) {
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   d7048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d704a:	6845      	ldr	r5, [r0, #4]
   d704c:	6883      	ldr	r3, [r0, #8]
   d704e:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::prepend(const Vector<T, AllocatorT> &vector) {
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   d7050:	4604      	mov	r4, r0
   d7052:	460e      	mov	r6, r1
   d7054:	4617      	mov	r7, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d7056:	db0e      	blt.n	d7076 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x2e>
   d7058:	3501      	adds	r5, #1
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
   d705a:	2d00      	cmp	r5, #0
   d705c:	dd05      	ble.n	d706a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x22>
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
}

inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
   d705e:	00a9      	lsls	r1, r5, #2
   d7060:	6800      	ldr	r0, [r0, #0]
   d7062:	f7fe fd53 	bl	d5b0c <realloc>
    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
            if (!d) {
   d7066:	b920      	cbnz	r0, d7072 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x2a>
   d7068:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d706a:	6800      	ldr	r0, [r0, #0]
   d706c:	f7fe fd46 	bl	d5afc <free>
    T* data_;
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d7070:	2000      	movs	r0, #0
                return false;
            }
        } else {
            AllocatorT::free(data_);
        }
        data_ = d;
   d7072:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   d7074:	60a5      	str	r5, [r4, #8]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d7076:	6825      	ldr	r5, [r4, #0]
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
   d7078:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d707a:	eb05 0186 	add.w	r1, r5, r6, lsl #2
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
   d707e:	eb05 0282 	add.w	r2, r5, r2, lsl #2
   d7082:	1a52      	subs	r2, r2, r1
   d7084:	1d08      	adds	r0, r1, #4
   d7086:	f002 f914 	bl	d92b2 <memmove>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
    move(p + 1, p, data_ + size_);
    new(p) T(std::move(value));
   d708a:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
    ++size_;
   d708e:	6863      	ldr	r3, [r4, #4]
   d7090:	3301      	adds	r3, #1
   d7092:	6063      	str	r3, [r4, #4]
   d7094:	2001      	movs	r0, #1
    return true;
}
   d7096:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7098 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
         destroyFactoryHandlers();
    }
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
   d7098:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d709a:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
   d709c:	3024      	adds	r0, #36	; 0x24
         destroyFactoryHandlers();
    }
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
   d709e:	460d      	mov	r5, r1
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d70a0:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d70a2:	f7ff fc39 	bl	d6918 <_ZN14RecursiveMutex4lockEv>
    return p - data_;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::contains(const T &value) const {
    return find(data_, data_ + size_, value);
   d70a6:	6823      	ldr	r3, [r4, #0]
   d70a8:	6861      	ldr	r1, [r4, #4]
   d70aa:	eb03 0081 	add.w	r0, r3, r1, lsl #2
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d70ae:	4283      	cmp	r3, r0
   d70b0:	461a      	mov	r2, r3
   d70b2:	d009      	beq.n	d70c8 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x30>
            if (*p == value) {
   d70b4:	6812      	ldr	r2, [r2, #0]
   d70b6:	42aa      	cmp	r2, r5
   d70b8:	f103 0304 	add.w	r3, r3, #4
   d70bc:	d1f7      	bne.n	d70ae <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x16>
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
            return false;
   d70be:	a801      	add	r0, sp, #4
   d70c0:	f7ff fe2a 	bl	d6d18 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   d70c4:	2500      	movs	r5, #0
   d70c6:	e00e      	b.n	d70e6 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x4e>
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
   d70c8:	462a      	mov	r2, r5
   d70ca:	4620      	mov	r0, r4
   d70cc:	f7ff ffbc 	bl	d7048 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   d70d0:	4605      	mov	r5, r0
   d70d2:	2800      	cmp	r0, #0
   d70d4:	d0f3      	beq.n	d70be <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x26>
            return false;
        }
        if (activeHandlers_.size() == 1) {
   d70d6:	6863      	ldr	r3, [r4, #4]
   d70d8:	2b01      	cmp	r3, #1
   d70da:	d101      	bne.n	d70e0 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x48>
            setSystemCallbacks();
   d70dc:	f7ff fd10 	bl	d6b00 <_ZN5spark10LogManager18setSystemCallbacksEv>
    }
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
   d70e0:	a801      	add	r0, sp, #4
   d70e2:	f7ff fe19 	bl	d6d18 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (activeHandlers_.size() == 1) {
            setSystemCallbacks();
        }
    }
    return true;
}
   d70e6:	4628      	mov	r0, r5
   d70e8:	b003      	add	sp, #12
   d70ea:	bd30      	pop	{r4, r5, pc}

000d70ec <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d70ec:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d70ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d70f0:	4606      	mov	r6, r0
   d70f2:	460c      	mov	r4, r1
   d70f4:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d70f6:	d914      	bls.n	d7122 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   d70f8:	4290      	cmp	r0, r2
   d70fa:	d213      	bcs.n	d7124 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            // Move elements in reverse order
            --p;
            --end;
   d70fc:	f1a2 0510 	sub.w	r5, r2, #16
            dest += end - p - 1;
   d7100:	1a6c      	subs	r4, r5, r1
   d7102:	f1a1 0710 	sub.w	r7, r1, #16
   d7106:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d7108:	42af      	cmp	r7, r5
   d710a:	d018      	beq.n	d713e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   d710c:	b11c      	cbz	r4, d7116 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   d710e:	4629      	mov	r1, r5
   d7110:	4620      	mov	r0, r4
   d7112:	f000 fd67 	bl	d7be4 <_ZN6StringC1EOS_>
                end->~T();
   d7116:	4628      	mov	r0, r5
   d7118:	f000 fd74 	bl	d7c04 <_ZN6StringD1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d711c:	3d10      	subs	r5, #16
   d711e:	3c10      	subs	r4, #16
   d7120:	e7f2      	b.n	d7108 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d7122:	d00c      	beq.n	d713e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   d7124:	42ac      	cmp	r4, r5
   d7126:	d00a      	beq.n	d713e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   d7128:	b11e      	cbz	r6, d7132 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   d712a:	4621      	mov	r1, r4
   d712c:	4630      	mov	r0, r6
   d712e:	f000 fd59 	bl	d7be4 <_ZN6StringC1EOS_>
                p->~T();
   d7132:	4620      	mov	r0, r4
   d7134:	f000 fd66 	bl	d7c04 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d7138:	3410      	adds	r4, #16
   d713a:	3610      	adds	r6, #16
   d713c:	e7f2      	b.n	d7124 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
   d713e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7140 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d7140:	b570      	push	{r4, r5, r6, lr}
        T* d = nullptr;
        if (n > 0) {
   d7142:	1e0e      	subs	r6, r1, #0
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d7144:	4605      	mov	r5, r0
        T* d = nullptr;
        if (n > 0) {
   d7146:	dd0b      	ble.n	d7160 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x20>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d7148:	0130      	lsls	r0, r6, #4
   d714a:	f7fe fccf 	bl	d5aec <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d714e:	4604      	mov	r4, r0
   d7150:	b170      	cbz	r0, d7170 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x30>
                return false;
            }
            move(d, data_, data_ + size_);
   d7152:	e895 0006 	ldmia.w	r5, {r1, r2}
   d7156:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   d715a:	f7ff ffc7 	bl	d70ec <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
   d715e:	e000      	b.n	d7162 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x22>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d7160:	2400      	movs	r4, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d7162:	6828      	ldr	r0, [r5, #0]
   d7164:	f7fe fcca 	bl	d5afc <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d7168:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d716a:	60ae      	str	r6, [r5, #8]
        return true;
   d716c:	2001      	movs	r0, #1
   d716e:	bd70      	pop	{r4, r5, r6, pc}
    }
   d7170:	bd70      	pop	{r4, r5, r6, pc}

000d7172 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:

spark::detail::LogFilter::LogFilter(LogLevel level) :
        level_(level) {
}

spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   d7172:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d7176:	2300      	movs	r3, #0
   d7178:	b095      	sub	sp, #84	; 0x54
   d717a:	4692      	mov	sl, r2
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   d717c:	2246      	movs	r2, #70	; 0x46
   d717e:	6003      	str	r3, [r0, #0]
   d7180:	6043      	str	r3, [r0, #4]
   d7182:	6083      	str	r3, [r0, #8]
   d7184:	60c3      	str	r3, [r0, #12]
   d7186:	6103      	str	r3, [r0, #16]
   d7188:	6143      	str	r3, [r0, #20]
   d718a:	7602      	strb	r2, [r0, #24]

spark::detail::LogFilter::LogFilter(LogLevel level) :
        level_(level) {
}

spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   d718c:	9102      	str	r1, [sp, #8]
   d718e:	f8da 1004 	ldr.w	r1, [sl, #4]
   d7192:	9308      	str	r3, [sp, #32]
    return size_ == 0;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
    if (n > capacity_ && !realloc(n)) {
   d7194:	4299      	cmp	r1, r3
   d7196:	4605      	mov	r5, r0
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d7198:	9309      	str	r3, [sp, #36]	; 0x24
   d719a:	930a      	str	r3, [sp, #40]	; 0x28
    return size_ == 0;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
    if (n > capacity_ && !realloc(n)) {
   d719c:	f340 809d 	ble.w	d72da <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x168>
   d71a0:	a808      	add	r0, sp, #32
   d71a2:	f7ff ffcd 	bl	d7140 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d71a6:	2800      	cmp	r0, #0
   d71a8:	f040 8097 	bne.w	d72da <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x168>
   d71ac:	e08e      	b.n	d72cc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15a>
    Vector<String> cats;
    if (!cats.reserve(filters.size())) {
        return;
    }
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
   d71ae:	4621      	mov	r1, r4
   d71b0:	a80b      	add	r0, sp, #44	; 0x2c
   d71b2:	f000 fd17 	bl	d7be4 <_ZN6StringC1EOS_>
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
   d71b6:	a90b      	add	r1, sp, #44	; 0x2c
   d71b8:	a80f      	add	r0, sp, #60	; 0x3c
   d71ba:	9e09      	ldr	r6, [sp, #36]	; 0x24
   d71bc:	f000 fd12 	bl	d7be4 <_ZN6StringC1EOS_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d71c0:	9909      	ldr	r1, [sp, #36]	; 0x24
   d71c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d71c4:	4299      	cmp	r1, r3
   d71c6:	f2c0 80ce 	blt.w	d7366 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f4>
   d71ca:	3101      	adds	r1, #1
   d71cc:	a808      	add	r0, sp, #32
   d71ce:	f7ff ffb7 	bl	d7140 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d71d2:	2800      	cmp	r0, #0
   d71d4:	f040 80c7 	bne.w	d7366 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f4>
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
   d71d8:	a80f      	add	r0, sp, #60	; 0x3c
   d71da:	f000 fd13 	bl	d7c04 <_ZN6StringD1Ev>
   d71de:	a80b      	add	r0, sp, #44	; 0x2c
   d71e0:	f000 fd10 	bl	d7c04 <_ZN6StringD1Ev>
   d71e4:	3414      	adds	r4, #20
    // Store category names
    Vector<String> cats;
    if (!cats.reserve(filters.size())) {
        return;
    }
    for (LogCategoryFilter &filter: filters) {
   d71e6:	42a7      	cmp	r7, r4
   d71e8:	d1e1      	bne.n	d71ae <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x3c>
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d71ea:	2600      	movs	r6, #0
   d71ec:	960b      	str	r6, [sp, #44]	; 0x2c
   d71ee:	960c      	str	r6, [sp, #48]	; 0x30
   d71f0:	960d      	str	r6, [sp, #52]	; 0x34
        if (!category) {
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
   d71f2:	46b1      	mov	r9, r6
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
    }
    // Process category filters
    Vector<Node> nodes;
    for (int i = 0; i < cats.size(); ++i) {
   d71f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d71f6:	429e      	cmp	r6, r3
   d71f8:	f280 80a8 	bge.w	d734c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
   d71fc:	0133      	lsls	r3, r6, #4
   d71fe:	9a08      	ldr	r2, [sp, #32]
   d7200:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
   d7202:	9306      	str	r3, [sp, #24]
        if (!category) {
   d7204:	2b00      	cmp	r3, #0
   d7206:	f000 809f 	beq.w	d7348 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d6>
   d720a:	2314      	movs	r3, #20
   d720c:	4373      	muls	r3, r6
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
   d720e:	f8cd 901c 	str.w	r9, [sp, #28]
   d7212:	9301      	str	r3, [sp, #4]
    for (int i = 0; i < cats.size(); ++i) {
        const char *category = cats.at(i).c_str();
        if (!category) {
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
   d7214:	ac0b      	add	r4, sp, #44	; 0x2c
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
   d7216:	a907      	add	r1, sp, #28
   d7218:	a806      	add	r0, sp, #24
   d721a:	f7ff fb2c 	bl	d6876 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   d721e:	4607      	mov	r7, r0
   d7220:	2800      	cmp	r0, #0
   d7222:	f000 8091 	beq.w	d7348 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d6>
            bool found = false;
   d7226:	ab14      	add	r3, sp, #80	; 0x50
            const int index = nodeIndex(*pNodes, name, size, found);
   d7228:	4601      	mov	r1, r0
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
   d722a:	f803 9d39 	strb.w	r9, [r3, #-57]!
            const int index = nodeIndex(*pNodes, name, size, found);
   d722e:	9a07      	ldr	r2, [sp, #28]
   d7230:	4620      	mov	r0, r4
   d7232:	f7ff fb8d 	bl	d6950 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d7236:	f89d 8017 	ldrb.w	r8, [sp, #23]
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
            const int index = nodeIndex(*pNodes, name, size, found);
   d723a:	9000      	str	r0, [sp, #0]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d723c:	f1b8 0f00 	cmp.w	r8, #0
   d7240:	d153      	bne.n	d72ea <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x178>
   d7242:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    Vector<Node> nodes; // Children nodes

    Node(const char *name, uint16_t size) :
            name(name),
            size(size),
            level(-1) {
   d7246:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
   d724a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d724e:	970f      	str	r7, [sp, #60]	; 0x3c
   d7250:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   d7254:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
   d7258:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
   d725c:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d7260:	6867      	ldr	r7, [r4, #4]
   d7262:	68a3      	ldr	r3, [r4, #8]
   d7264:	429f      	cmp	r7, r3
   d7266:	da4f      	bge.n	d7308 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x196>
        return false;
    }
    T* const p = data_ + i;
   d7268:	9b00      	ldr	r3, [sp, #0]
   d726a:	f8d4 b000 	ldr.w	fp, [r4]
    move(p + 1, p, data_ + size_);
   d726e:	6861      	ldr	r1, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d7270:	2214      	movs	r2, #20
   d7272:	4353      	muls	r3, r2
   d7274:	eb0b 0703 	add.w	r7, fp, r3
    move(p + 1, p, data_ + size_);
   d7278:	fb02 b201 	mla	r2, r2, r1, fp
   d727c:	f107 0014 	add.w	r0, r7, #20
   d7280:	4639      	mov	r1, r7
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d7282:	9303      	str	r3, [sp, #12]
    move(p + 1, p, data_ + size_);
   d7284:	f7ff fe94 	bl	d6fb0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   d7288:	b1a7      	cbz	r7, d72b4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x142>
    |
    `- aa (error) - b (warn)
*/

// spark::detail::LogFilter
struct spark::detail::LogFilter::Node {
   d728a:	9b03      	ldr	r3, [sp, #12]
   d728c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   d728e:	f84b 2003 	str.w	r2, [fp, r3]
   d7292:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
   d7296:	80bb      	strh	r3, [r7, #4]
   d7298:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
   d729c:	80fb      	strh	r3, [r7, #6]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d729e:	f8c7 9008 	str.w	r9, [r7, #8]
   d72a2:	f8c7 900c 	str.w	r9, [r7, #12]
   d72a6:	f8c7 9010 	str.w	r9, [r7, #16]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
   d72aa:	a911      	add	r1, sp, #68	; 0x44
   d72ac:	f107 0008 	add.w	r0, r7, #8
   d72b0:	f7ff fe67 	bl	d6f82 <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
        return false;
    }
    T* const p = data_ + i;
    move(p + 1, p, data_ + size_);
    new(p) T(std::move(value));
    ++size_;
   d72b4:	6863      	ldr	r3, [r4, #4]
   d72b6:	3301      	adds	r3, #1
   d72b8:	6063      	str	r3, [r4, #4]
   d72ba:	a811      	add	r0, sp, #68	; 0x44
   d72bc:	f7ff fcd2 	bl	d6c64 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d72c0:	f1b8 0f00 	cmp.w	r8, #0
   d72c4:	d011      	beq.n	d72ea <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x178>
    }
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
    }
    // Process category filters
    Vector<Node> nodes;
   d72c6:	a80b      	add	r0, sp, #44	; 0x2c
   d72c8:	f7ff fccc 	bl	d6c64 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d72cc:	a808      	add	r0, sp, #32
   d72ce:	f7ff fcdd 	bl	d6c8c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
    }
    using std::swap;
    swap(cats_, cats);
    swap(nodes_, nodes);
    level_ = level;
}
   d72d2:	4628      	mov	r0, r5
   d72d4:	b015      	add	sp, #84	; 0x54
   d72d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d72da:	f8da 4000 	ldr.w	r4, [sl]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d72de:	f8da 3004 	ldr.w	r3, [sl, #4]
   d72e2:	2714      	movs	r7, #20
   d72e4:	fb07 4703 	mla	r7, r7, r3, r4
   d72e8:	e77d      	b.n	d71e6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_[size_ - 1];
}

template<typename T, typename AllocatorT>
inline T& spark::Vector<T, AllocatorT>::at(int i) {
    return data_[i];
   d72ea:	6823      	ldr	r3, [r4, #0]
   d72ec:	9a00      	ldr	r2, [sp, #0]
   d72ee:	2414      	movs	r4, #20
   d72f0:	fb04 3402 	mla	r4, r4, r2, r3
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
                return;
            }
            Node &node = pNodes->at(index);
            if (!*category) { // Check if it's last subcategory
   d72f4:	9b06      	ldr	r3, [sp, #24]
   d72f6:	781b      	ldrb	r3, [r3, #0]
   d72f8:	bb23      	cbnz	r3, d7344 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d2>
                node.level = filters.at(i).level_;
   d72fa:	f8da 3000 	ldr.w	r3, [sl]
   d72fe:	9a01      	ldr	r2, [sp, #4]
   d7300:	4413      	add	r3, r2
   d7302:	7c1b      	ldrb	r3, [r3, #16]
   d7304:	80e3      	strh	r3, [r4, #6]
   d7306:	e01d      	b.n	d7344 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d2>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d7308:	3701      	adds	r7, #1
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
   d730a:	2f00      	cmp	r7, #0
   d730c:	dd0f      	ble.n	d732e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d730e:	2314      	movs	r3, #20
   d7310:	fb03 f007 	mul.w	r0, r3, r7
   d7314:	9303      	str	r3, [sp, #12]
   d7316:	f7fe fbe9 	bl	d5aec <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d731a:	4683      	mov	fp, r0
   d731c:	b178      	cbz	r0, d733e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1cc>
                return false;
            }
            move(d, data_, data_ + size_);
   d731e:	e894 0006 	ldmia.w	r4, {r1, r2}
   d7322:	9b03      	ldr	r3, [sp, #12]
   d7324:	fb03 1202 	mla	r2, r3, r2, r1
   d7328:	f7ff fe42 	bl	d6fb0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
   d732c:	e000      	b.n	d7330 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1be>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d732e:	46c3      	mov	fp, r8
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d7330:	6820      	ldr	r0, [r4, #0]
   d7332:	f7fe fbe3 	bl	d5afc <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d7336:	f8c4 b000 	str.w	fp, [r4]
        capacity_ = n;
   d733a:	60a7      	str	r7, [r4, #8]
   d733c:	e794      	b.n	d7268 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xf6>
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d733e:	f04f 0801 	mov.w	r8, #1
   d7342:	e7ba      	b.n	d72ba <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x148>
            }
            Node &node = pNodes->at(index);
            if (!*category) { // Check if it's last subcategory
                node.level = filters.at(i).level_;
            }
            pNodes = &node.nodes;
   d7344:	3408      	adds	r4, #8
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
   d7346:	e766      	b.n	d7216 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa4>
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
    }
    // Process category filters
    Vector<Node> nodes;
    for (int i = 0; i < cats.size(); ++i) {
   d7348:	3601      	adds	r6, #1
   d734a:	e753      	b.n	d71f4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x82>
            }
            pNodes = &node.nodes;
        }
    }
    using std::swap;
    swap(cats_, cats);
   d734c:	a908      	add	r1, sp, #32
   d734e:	4628      	mov	r0, r5
   d7350:	f7ff fe17 	bl	d6f82 <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
    swap(nodes_, nodes);
   d7354:	a90b      	add	r1, sp, #44	; 0x2c
   d7356:	f105 000c 	add.w	r0, r5, #12
   d735a:	f7ff fe12 	bl	d6f82 <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
    level_ = level;
   d735e:	f89d 3008 	ldrb.w	r3, [sp, #8]
   d7362:	762b      	strb	r3, [r5, #24]
   d7364:	e7af      	b.n	d72c6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x154>
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d7366:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
   d7368:	9a09      	ldr	r2, [sp, #36]	; 0x24
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d736a:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   d736e:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   d7372:	4631      	mov	r1, r6
   d7374:	f106 0010 	add.w	r0, r6, #16
   d7378:	f7ff feb8 	bl	d70ec <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   d737c:	b11e      	cbz	r6, d7386 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x214>
   d737e:	a90f      	add	r1, sp, #60	; 0x3c
   d7380:	4630      	mov	r0, r6
   d7382:	f000 fc2f 	bl	d7be4 <_ZN6StringC1EOS_>
    ++size_;
   d7386:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d7388:	3301      	adds	r3, #1
   d738a:	9309      	str	r3, [sp, #36]	; 0x24
   d738c:	e724      	b.n	d71d8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x66>
	...

000d7390 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
// spark::LogHandler
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   d7390:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        filter_(level, filters) {
   d7392:	4604      	mov	r4, r0
   d7394:	4b09      	ldr	r3, [pc, #36]	; (d73bc <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>)
   d7396:	f844 3b04 	str.w	r3, [r4], #4
// spark::LogHandler
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   d739a:	4605      	mov	r5, r0
   d739c:	460e      	mov	r6, r1
        filter_(level, filters) {
   d739e:	a801      	add	r0, sp, #4
   d73a0:	4611      	mov	r1, r2
   d73a2:	f7fc ffc8 	bl	d4336 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d73a6:	aa01      	add	r2, sp, #4
   d73a8:	4631      	mov	r1, r6
   d73aa:	4620      	mov	r0, r4
   d73ac:	f7ff fee1 	bl	d7172 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d73b0:	a801      	add	r0, sp, #4
   d73b2:	f7fc ff7f 	bl	d42b4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
   d73b6:	4628      	mov	r0, r5
   d73b8:	b004      	add	sp, #16
   d73ba:	bd70      	pop	{r4, r5, r6, pc}
   d73bc:	000db7f4 	.word	0x000db7f4

000d73c0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:

#if Wiring_LogConfig

// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
   d73c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   d73c2:	460f      	mov	r7, r1
   d73c4:	b08b      	sub	sp, #44	; 0x2c
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d73c6:	492b      	ldr	r1, [pc, #172]	; (d7474 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb4>)

#if Wiring_LogConfig

// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
   d73c8:	9c10      	ldr	r4, [sp, #64]	; 0x40
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d73ca:	4638      	mov	r0, r7

#if Wiring_LogConfig

// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
   d73cc:	4616      	mov	r6, r2
   d73ce:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d73d0:	f001 ffd2 	bl	d9378 <strcmp>
   d73d4:	bb28      	cbnz	r0, d7422 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x62>
        if (!stream) {
   d73d6:	2c00      	cmp	r4, #0
   d73d8:	d049      	beq.n	d746e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xae>
            return nullptr; // Output stream is not specified
        }
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   d73da:	4629      	mov	r1, r5
   d73dc:	a801      	add	r0, sp, #4
   d73de:	f7ff fddd 	bl	d6f9c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   d73e2:	4925      	ldr	r1, [pc, #148]	; (d7478 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb8>)
   d73e4:	2024      	movs	r0, #36	; 0x24
   d73e6:	f001 f801 	bl	d83ec <_ZnwjRKSt9nothrow_t>
   d73ea:	4605      	mov	r5, r0
   d73ec:	b1b8      	cbz	r0, d741e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x5e>
    Print *stream_;
};

class JSONStreamLogHandler: public StreamLogHandler {
public:
    using StreamLogHandler::StreamLogHandler;
   d73ee:	a901      	add	r1, sp, #4
   d73f0:	a804      	add	r0, sp, #16
   d73f2:	f7ff fdd3 	bl	d6f9c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
   d73f6:	a904      	add	r1, sp, #16
   d73f8:	a807      	add	r0, sp, #28
   d73fa:	f7fc ff9c 	bl	d4336 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d73fe:	aa07      	add	r2, sp, #28
   d7400:	4631      	mov	r1, r6
   d7402:	4628      	mov	r0, r5
   d7404:	f7ff ffc4 	bl	d7390 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d7408:	a807      	add	r0, sp, #28
   d740a:	f7fc ff53 	bl	d42b4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d740e:	4b1b      	ldr	r3, [pc, #108]	; (d747c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xbc>)
   d7410:	602b      	str	r3, [r5, #0]
   d7412:	622c      	str	r4, [r5, #32]
    Print *stream_;
};

class JSONStreamLogHandler: public StreamLogHandler {
public:
    using StreamLogHandler::StreamLogHandler;
   d7414:	a804      	add	r0, sp, #16
   d7416:	f7fc ff4d 	bl	d42b4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d741a:	4b19      	ldr	r3, [pc, #100]	; (d7480 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xc0>)
   d741c:	602b      	str	r3, [r5, #0]
   d741e:	a801      	add	r0, sp, #4
   d7420:	e01f      	b.n	d7462 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa2>
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   d7422:	4918      	ldr	r1, [pc, #96]	; (d7484 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xc4>)
   d7424:	4638      	mov	r0, r7
   d7426:	f001 ffa7 	bl	d9378 <strcmp>
   d742a:	b9f0      	cbnz	r0, d746a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xaa>
        if (!stream) {
   d742c:	b1fc      	cbz	r4, d746e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xae>
            return nullptr;
        }
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   d742e:	4629      	mov	r1, r5
   d7430:	a804      	add	r0, sp, #16
   d7432:	f7ff fdb3 	bl	d6f9c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   d7436:	4910      	ldr	r1, [pc, #64]	; (d7478 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb8>)
   d7438:	2024      	movs	r0, #36	; 0x24
   d743a:	f000 ffd7 	bl	d83ec <_ZnwjRKSt9nothrow_t>
   d743e:	4605      	mov	r5, r0
   d7440:	b170      	cbz	r0, d7460 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa0>
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
   d7442:	a904      	add	r1, sp, #16
   d7444:	a807      	add	r0, sp, #28
   d7446:	f7fc ff76 	bl	d4336 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d744a:	aa07      	add	r2, sp, #28
   d744c:	4631      	mov	r1, r6
   d744e:	4628      	mov	r0, r5
   d7450:	f7ff ff9e 	bl	d7390 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d7454:	a807      	add	r0, sp, #28
   d7456:	f7fc ff2d 	bl	d42b4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d745a:	4b08      	ldr	r3, [pc, #32]	; (d747c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xbc>)
   d745c:	602b      	str	r3, [r5, #0]
   d745e:	622c      	str	r4, [r5, #32]
   d7460:	a804      	add	r0, sp, #16
   d7462:	f7fc ff27 	bl	d42b4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d7466:	4628      	mov	r0, r5
   d7468:	e002      	b.n	d7470 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb0>
// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
        if (!stream) {
            return nullptr; // Output stream is not specified
   d746a:	2000      	movs	r0, #0
   d746c:	e000      	b.n	d7470 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb0>
   d746e:	4620      	mov	r0, r4
            return nullptr;
        }
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
    }
    return nullptr; // Unknown handler type
}
   d7470:	b00b      	add	sp, #44	; 0x2c
   d7472:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7474:	000dc172 	.word	0x000dc172
   d7478:	000dc328 	.word	0x000dc328
   d747c:	000dc1f8 	.word	0x000dc1f8
   d7480:	000dc104 	.word	0x000dc104
   d7484:	000dc176 	.word	0x000dc176

000d7488 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d7488:	4b01      	ldr	r3, [pc, #4]	; (d7490 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d748a:	4a02      	ldr	r2, [pc, #8]	; (d7494 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d748c:	601a      	str	r2, [r3, #0]
   d748e:	4770      	bx	lr
   d7490:	2003e398 	.word	0x2003e398
   d7494:	000dc187 	.word	0x000dc187

000d7498 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
                return cmp < 0;
            }));
}

// spark::StreamLogHandler
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d7498:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d749c:	9d08      	ldr	r5, [sp, #32]
    // TODO: Move this check to a base class (see also JSONStreamLogHandler::logMessage())
#if PLATFORM_ID != PLATFORM_GCC
    if (stream_ == &Serial && Network.listening()) {
   d749e:	f8d0 9020 	ldr.w	r9, [r0, #32]
                return cmp < 0;
            }));
}

// spark::StreamLogHandler
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d74a2:	4604      	mov	r4, r0
   d74a4:	460e      	mov	r6, r1
   d74a6:	4617      	mov	r7, r2
   d74a8:	4698      	mov	r8, r3
    // TODO: Move this check to a base class (see also JSONStreamLogHandler::logMessage())
#if PLATFORM_ID != PLATFORM_GCC
    if (stream_ == &Serial && Network.listening()) {
   d74aa:	f000 fea1 	bl	d81f0 <_Z16_fetch_usbserialv>
   d74ae:	4581      	cmp	r9, r0
   d74b0:	d105      	bne.n	d74be <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x26>
   d74b2:	485a      	ldr	r0, [pc, #360]	; (d761c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   d74b4:	f000 fa73 	bl	d799e <_ZN5spark12NetworkClass9listeningEv>
   d74b8:	2800      	cmp	r0, #0
   d74ba:	f040 80ac 	bne.w	d7616 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17e>
        return; // Do not mix logging and serial console output
    }
#endif
    const char *s = nullptr;
    // Timestamp
    if (attr.has_time) {
   d74be:	792b      	ldrb	r3, [r5, #4]
   d74c0:	071b      	lsls	r3, r3, #28
   d74c2:	d505      	bpl.n	d74d0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x38>
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d74c4:	696b      	ldr	r3, [r5, #20]
   d74c6:	4a56      	ldr	r2, [pc, #344]	; (d7620 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   d74c8:	6a20      	ldr	r0, [r4, #32]
   d74ca:	2100      	movs	r1, #0
   d74cc:	f000 fb3b 	bl	d7b46 <_ZN5Print11printf_implEbPKcz>
        printf("%010u ", (unsigned)attr.time);
    }
    // Category
    if (category) {
   d74d0:	f1b8 0f00 	cmp.w	r8, #0
   d74d4:	d00d      	beq.n	d74f2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x5a>
        write('[');
   d74d6:	215b      	movs	r1, #91	; 0x5b
   d74d8:	4620      	mov	r0, r4
   d74da:	f7ff fa2e 	bl	d693a <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   d74de:	4641      	mov	r1, r8
   d74e0:	4620      	mov	r0, r4
   d74e2:	f7ff fa1c 	bl	d691e <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   d74e6:	6823      	ldr	r3, [r4, #0]
   d74e8:	494e      	ldr	r1, [pc, #312]	; (d7624 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   d74ea:	68db      	ldr	r3, [r3, #12]
   d74ec:	2202      	movs	r2, #2
   d74ee:	4620      	mov	r0, r4
   d74f0:	4798      	blx	r3
    }
    // Source file
    if (attr.has_file) {
   d74f2:	792b      	ldrb	r3, [r5, #4]
   d74f4:	07d9      	lsls	r1, r3, #31
   d74f6:	d525      	bpl.n	d7544 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xac>
        s = extractFileName(attr.file); // Strip directory path
   d74f8:	f8d5 8008 	ldr.w	r8, [r5, #8]
    }
    return nullptr;
}

const char* extractFileName(const char *s) {
    const char *s1 = strrchr(s, '/');
   d74fc:	212f      	movs	r1, #47	; 0x2f
   d74fe:	4640      	mov	r0, r8
   d7500:	f001 ff97 	bl	d9432 <strrchr>
    if (s1) {
   d7504:	b108      	cbz	r0, d750a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x72>
        return s1 + 1;
   d7506:	f100 0801 	add.w	r8, r0, #1
        write("] ", 2);
    }
    // Source file
    if (attr.has_file) {
        s = extractFileName(attr.file); // Strip directory path
        write(s); // File name
   d750a:	4641      	mov	r1, r8
   d750c:	4620      	mov	r0, r4
   d750e:	f7ff fa06 	bl	d691e <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   d7512:	792b      	ldrb	r3, [r5, #4]
   d7514:	079a      	lsls	r2, r3, #30
   d7516:	d509      	bpl.n	d752c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x94>
            write(':');
   d7518:	213a      	movs	r1, #58	; 0x3a
   d751a:	4620      	mov	r0, r4
   d751c:	f7ff fa0d 	bl	d693a <_ZN5spark16StreamLogHandler5writeEc>
   d7520:	68eb      	ldr	r3, [r5, #12]
   d7522:	4a41      	ldr	r2, [pc, #260]	; (d7628 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   d7524:	6a20      	ldr	r0, [r4, #32]
   d7526:	2100      	movs	r1, #0
   d7528:	f000 fb0d 	bl	d7b46 <_ZN5Print11printf_implEbPKcz>
            printf("%d", (int)attr.line); // Line number
        }
        if (attr.has_function) {
   d752c:	792b      	ldrb	r3, [r5, #4]
   d752e:	f013 0f04 	tst.w	r3, #4
   d7532:	6823      	ldr	r3, [r4, #0]
            write(", ", 2);
   d7534:	bf18      	it	ne
   d7536:	493d      	ldrne	r1, [pc, #244]	; (d762c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   d7538:	68db      	ldr	r3, [r3, #12]
        } else {
            write(": ", 2);
   d753a:	bf08      	it	eq
   d753c:	493c      	ldreq	r1, [pc, #240]	; (d7630 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
        if (attr.has_line) {
            write(':');
            printf("%d", (int)attr.line); // Line number
        }
        if (attr.has_function) {
            write(", ", 2);
   d753e:	2202      	movs	r2, #2
        } else {
            write(": ", 2);
   d7540:	4620      	mov	r0, r4
   d7542:	4798      	blx	r3
        }
    }
    // Function name
    if (attr.has_function) {
   d7544:	792b      	ldrb	r3, [r5, #4]
   d7546:	075b      	lsls	r3, r3, #29
   d7548:	d518      	bpl.n	d757c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe4>
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   d754a:	6929      	ldr	r1, [r5, #16]
   d754c:	460a      	mov	r2, r1
    return s;
}

const char* extractFuncName(const char *s, size_t *size) {
    const char *s1 = s;
    for (; *s; ++s) {
   d754e:	4613      	mov	r3, r2
   d7550:	f813 0b01 	ldrb.w	r0, [r3], #1
   d7554:	b138      	cbz	r0, d7566 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xce>
        if (*s == ' ') {
   d7556:	2820      	cmp	r0, #32
   d7558:	d101      	bne.n	d755e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
            s1 = s + 1; // Skip return type
   d755a:	4619      	mov	r1, r3
   d755c:	e001      	b.n	d7562 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xca>
        } else if (*s == '(') {
   d755e:	2828      	cmp	r0, #40	; 0x28
   d7560:	d001      	beq.n	d7566 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xce>
                return cmp < 0;
            }));
}

// spark::StreamLogHandler
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d7562:	461a      	mov	r2, r3
   d7564:	e7f3      	b.n	d754e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
    }
    // Function name
    if (attr.has_function) {
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
        write(s, n);
   d7566:	6823      	ldr	r3, [r4, #0]
   d7568:	1a52      	subs	r2, r2, r1
   d756a:	68db      	ldr	r3, [r3, #12]
   d756c:	4620      	mov	r0, r4
   d756e:	4798      	blx	r3
        write("(): ", 4);
   d7570:	6823      	ldr	r3, [r4, #0]
   d7572:	4930      	ldr	r1, [pc, #192]	; (d7634 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   d7574:	68db      	ldr	r3, [r3, #12]
   d7576:	2204      	movs	r2, #4
   d7578:	4620      	mov	r0, r4
   d757a:	4798      	blx	r3
inline LogLevel spark::LogHandler::level(const char *category) const {
    return filter_.level(category);
}

inline const char* spark::LogHandler::levelName(LogLevel level) {
    return log_level_name(level, nullptr);
   d757c:	2100      	movs	r1, #0
   d757e:	4638      	mov	r0, r7
   d7580:	f7fe f9d8 	bl	d5934 <log_level_name>
    }
    // Level
    s = levelName(level);
    write(s);
   d7584:	4601      	mov	r1, r0
   d7586:	4620      	mov	r0, r4
   d7588:	f7ff f9c9 	bl	d691e <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   d758c:	6823      	ldr	r3, [r4, #0]
   d758e:	4928      	ldr	r1, [pc, #160]	; (d7630 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   d7590:	68db      	ldr	r3, [r3, #12]
   d7592:	2202      	movs	r2, #2
   d7594:	4620      	mov	r0, r4
   d7596:	4798      	blx	r3
    // Message
    if (msg) {
   d7598:	b11e      	cbz	r6, d75a2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x10a>
        write(msg);
   d759a:	4631      	mov	r1, r6
   d759c:	4620      	mov	r0, r4
   d759e:	f7ff f9be 	bl	d691e <_ZN5spark16StreamLogHandler5writeEPKc>
    }
    // Additional attributes
    if (attr.has_code || attr.has_details) {
   d75a2:	792b      	ldrb	r3, [r5, #4]
   d75a4:	f013 0f30 	tst.w	r3, #48	; 0x30
   d75a8:	d02d      	beq.n	d7606 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16e>
        write(" [", 2);
   d75aa:	6823      	ldr	r3, [r4, #0]
   d75ac:	4922      	ldr	r1, [pc, #136]	; (d7638 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   d75ae:	68db      	ldr	r3, [r3, #12]
   d75b0:	4620      	mov	r0, r4
   d75b2:	2202      	movs	r2, #2
   d75b4:	4798      	blx	r3
        // Code
        if (attr.has_code) {
   d75b6:	792b      	ldrb	r3, [r5, #4]
   d75b8:	06d8      	lsls	r0, r3, #27
   d75ba:	d50b      	bpl.n	d75d4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
            write("code = ", 7);
   d75bc:	6823      	ldr	r3, [r4, #0]
   d75be:	491f      	ldr	r1, [pc, #124]	; (d763c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a4>)
   d75c0:	68db      	ldr	r3, [r3, #12]
   d75c2:	2207      	movs	r2, #7
   d75c4:	4620      	mov	r0, r4
   d75c6:	4798      	blx	r3
   d75c8:	69ab      	ldr	r3, [r5, #24]
   d75ca:	4a1d      	ldr	r2, [pc, #116]	; (d7640 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a8>)
   d75cc:	6a20      	ldr	r0, [r4, #32]
   d75ce:	2100      	movs	r1, #0
   d75d0:	f000 fab9 	bl	d7b46 <_ZN5Print11printf_implEbPKcz>
            printf("%" PRIiPTR, (intptr_t)attr.code);
        }
        // Details
        if (attr.has_details) {
   d75d4:	792b      	ldrb	r3, [r5, #4]
   d75d6:	0699      	lsls	r1, r3, #26
   d75d8:	d511      	bpl.n	d75fe <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x166>
            if (attr.has_code) {
   d75da:	06da      	lsls	r2, r3, #27
   d75dc:	d505      	bpl.n	d75ea <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x152>
                write(", ", 2);
   d75de:	6823      	ldr	r3, [r4, #0]
   d75e0:	4912      	ldr	r1, [pc, #72]	; (d762c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   d75e2:	68db      	ldr	r3, [r3, #12]
   d75e4:	2202      	movs	r2, #2
   d75e6:	4620      	mov	r0, r4
   d75e8:	4798      	blx	r3
            }
            write("details = ", 10);
   d75ea:	6823      	ldr	r3, [r4, #0]
   d75ec:	4915      	ldr	r1, [pc, #84]	; (d7644 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1ac>)
   d75ee:	68db      	ldr	r3, [r3, #12]
   d75f0:	4620      	mov	r0, r4
   d75f2:	220a      	movs	r2, #10
   d75f4:	4798      	blx	r3
            write(attr.details);
   d75f6:	69e9      	ldr	r1, [r5, #28]
   d75f8:	4620      	mov	r0, r4
   d75fa:	f7ff f990 	bl	d691e <_ZN5spark16StreamLogHandler5writeEPKc>
        }
        write(']');
   d75fe:	215d      	movs	r1, #93	; 0x5d
   d7600:	4620      	mov	r0, r4
   d7602:	f7ff f99a 	bl	d693a <_ZN5spark16StreamLogHandler5writeEc>
    }
    write("\r\n", 2);
   d7606:	6823      	ldr	r3, [r4, #0]
   d7608:	490f      	ldr	r1, [pc, #60]	; (d7648 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1b0>)
   d760a:	68db      	ldr	r3, [r3, #12]
   d760c:	4620      	mov	r0, r4
   d760e:	2202      	movs	r2, #2
}
   d7610:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
            write("details = ", 10);
            write(attr.details);
        }
        write(']');
    }
    write("\r\n", 2);
   d7614:	4718      	bx	r3
   d7616:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d761a:	bf00      	nop
   d761c:	2003e570 	.word	0x2003e570
   d7620:	000dc18b 	.word	0x000dc18b
   d7624:	000dc192 	.word	0x000dc192
   d7628:	000dbade 	.word	0x000dbade
   d762c:	000dc195 	.word	0x000dc195
   d7630:	000dc19a 	.word	0x000dc19a
   d7634:	000dc198 	.word	0x000dc198
   d7638:	000dc19d 	.word	0x000dc19d
   d763c:	000dc1a0 	.word	0x000dc1a0
   d7640:	000dc1a8 	.word	0x000dc1a8
   d7644:	000dc1ab 	.word	0x000dc1ab
   d7648:	000dbc36 	.word	0x000dbc36

000d764c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
}

// spark::JSONStreamLogHandler
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d764c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d7650:	b085      	sub	sp, #20
   d7652:	f8d0 8020 	ldr.w	r8, [r0, #32]
   d7656:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   d7658:	4606      	mov	r6, r0
   d765a:	460f      	mov	r7, r1
   d765c:	4691      	mov	r9, r2
   d765e:	461d      	mov	r5, r3
    // TODO: Move this check to a base class (see also StreamLogHandler::logMessage())
#if PLATFORM_ID != PLATFORM_GCC
    if (this->stream() == &Serial && Network.listening()) {
   d7660:	f000 fdc6 	bl	d81f0 <_Z16_fetch_usbserialv>
   d7664:	4580      	cmp	r8, r0
   d7666:	d105      	bne.n	d7674 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   d7668:	484a      	ldr	r0, [pc, #296]	; (d7794 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   d766a:	f000 f998 	bl	d799e <_ZN5spark12NetworkClass9listeningEv>
   d766e:	2800      	cmp	r0, #0
   d7670:	f040 808c 	bne.w	d778c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x140>
   d7674:	6a33      	ldr	r3, [r6, #32]
    write(&c, 1);
}

// spark::JSONStreamWriter
inline spark::JSONStreamWriter::JSONStreamWriter(Print &stream) :
        strm_(stream) {
   d7676:	4a48      	ldr	r2, [pc, #288]	; (d7798 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   d7678:	9201      	str	r2, [sp, #4]
    return n_;
}

// spark::JSONWriter
inline spark::JSONWriter::JSONWriter() :
        state_(BEGIN) {
   d767a:	f04f 0800 	mov.w	r8, #0
        return; // Do not mix logging and serial console output
    }
#endif
    JSONStreamWriter json(*this->stream());
    json.beginObject();
   d767e:	a801      	add	r0, sp, #4
    write(&c, 1);
}

// spark::JSONStreamWriter
inline spark::JSONStreamWriter::JSONStreamWriter(Print &stream) :
        strm_(stream) {
   d7680:	9303      	str	r3, [sp, #12]
    return n_;
}

// spark::JSONWriter
inline spark::JSONWriter::JSONWriter() :
        state_(BEGIN) {
   d7682:	f88d 8008 	strb.w	r8, [sp, #8]
   d7686:	f7fe ffec 	bl	d6662 <_ZN5spark10JSONWriter11beginObjectEv>
   d768a:	4641      	mov	r1, r8
   d768c:	4648      	mov	r0, r9
   d768e:	f7fe f951 	bl	d5934 <log_level_name>
    // Level
    const char *s = levelName(level);
    json.name("l", 1).value(s);
   d7692:	4942      	ldr	r1, [pc, #264]	; (d779c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   d7694:	4680      	mov	r8, r0
   d7696:	2201      	movs	r2, #1
   d7698:	a801      	add	r0, sp, #4
   d769a:	f7ff f867 	bl	d676c <_ZN5spark10JSONWriter4nameEPKcj>
   d769e:	4641      	mov	r1, r8
   d76a0:	f7ff f92d 	bl	d68fe <_ZN5spark10JSONWriter5valueEPKc>
    // Message
    if (msg) {
   d76a4:	b13f      	cbz	r7, d76b6 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   d76a6:	493e      	ldr	r1, [pc, #248]	; (d77a0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   d76a8:	2201      	movs	r2, #1
   d76aa:	a801      	add	r0, sp, #4
   d76ac:	f7ff f85e 	bl	d676c <_ZN5spark10JSONWriter4nameEPKcj>
   d76b0:	4639      	mov	r1, r7
   d76b2:	f7ff f924 	bl	d68fe <_ZN5spark10JSONWriter5valueEPKc>
    }
    // Category
    if (category) {
   d76b6:	b13d      	cbz	r5, d76c8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   d76b8:	493a      	ldr	r1, [pc, #232]	; (d77a4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   d76ba:	2201      	movs	r2, #1
   d76bc:	a801      	add	r0, sp, #4
   d76be:	f7ff f855 	bl	d676c <_ZN5spark10JSONWriter4nameEPKcj>
   d76c2:	4629      	mov	r1, r5
   d76c4:	f7ff f91b 	bl	d68fe <_ZN5spark10JSONWriter5valueEPKc>
    }
    // File name
    if (attr.has_file) {
   d76c8:	7923      	ldrb	r3, [r4, #4]
   d76ca:	07df      	lsls	r7, r3, #31
   d76cc:	d50e      	bpl.n	d76ec <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   d76ce:	68a5      	ldr	r5, [r4, #8]
    }
    return nullptr;
}

const char* extractFileName(const char *s) {
    const char *s1 = strrchr(s, '/');
   d76d0:	212f      	movs	r1, #47	; 0x2f
   d76d2:	4628      	mov	r0, r5
   d76d4:	f001 fead 	bl	d9432 <strrchr>
    if (s1) {
   d76d8:	b100      	cbz	r0, d76dc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   d76da:	1c45      	adds	r5, r0, #1
        json.name("c", 1).value(category);
    }
    // File name
    if (attr.has_file) {
        s = extractFileName(attr.file); // Strip directory path
        json.name("f", 1).value(s);
   d76dc:	4932      	ldr	r1, [pc, #200]	; (d77a8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   d76de:	2201      	movs	r2, #1
   d76e0:	a801      	add	r0, sp, #4
   d76e2:	f7ff f843 	bl	d676c <_ZN5spark10JSONWriter4nameEPKcj>
   d76e6:	4629      	mov	r1, r5
   d76e8:	f7ff f909 	bl	d68fe <_ZN5spark10JSONWriter5valueEPKc>
    }
    // Line number
    if (attr.has_line) {
   d76ec:	7923      	ldrb	r3, [r4, #4]
   d76ee:	079d      	lsls	r5, r3, #30
   d76f0:	d507      	bpl.n	d7702 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   d76f2:	492e      	ldr	r1, [pc, #184]	; (d77ac <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   d76f4:	2202      	movs	r2, #2
   d76f6:	a801      	add	r0, sp, #4
   d76f8:	f7ff f838 	bl	d676c <_ZN5spark10JSONWriter4nameEPKcj>
   d76fc:	68e1      	ldr	r1, [r4, #12]
   d76fe:	f7fe ffbd 	bl	d667c <_ZN5spark10JSONWriter5valueEi>
    }
    // Function name
    if (attr.has_function) {
   d7702:	7923      	ldrb	r3, [r4, #4]
   d7704:	0758      	lsls	r0, r3, #29
   d7706:	d516      	bpl.n	d7736 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xea>
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   d7708:	6925      	ldr	r5, [r4, #16]
   d770a:	462f      	mov	r7, r5
    return s;
}

const char* extractFuncName(const char *s, size_t *size) {
    const char *s1 = s;
    for (; *s; ++s) {
   d770c:	463b      	mov	r3, r7
   d770e:	f813 2b01 	ldrb.w	r2, [r3], #1
   d7712:	b13a      	cbz	r2, d7724 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd8>
        if (*s == ' ') {
   d7714:	2a20      	cmp	r2, #32
   d7716:	d101      	bne.n	d771c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   d7718:	461d      	mov	r5, r3
   d771a:	e001      	b.n	d7720 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        } else if (*s == '(') {
   d771c:	2a28      	cmp	r2, #40	; 0x28
   d771e:	d001      	beq.n	d7724 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd8>
    }
    write("\r\n", 2);
}

// spark::JSONStreamLogHandler
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d7720:	461f      	mov	r7, r3
   d7722:	e7f3      	b.n	d770c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
    }
    // Function name
    if (attr.has_function) {
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
        json.name("fn", 2).value(s, n);
   d7724:	2202      	movs	r2, #2
   d7726:	4922      	ldr	r1, [pc, #136]	; (d77b0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   d7728:	a801      	add	r0, sp, #4
   d772a:	f7ff f81f 	bl	d676c <_ZN5spark10JSONWriter4nameEPKcj>
   d772e:	1b7a      	subs	r2, r7, r5
   d7730:	4629      	mov	r1, r5
   d7732:	f7ff f82a 	bl	d678a <_ZN5spark10JSONWriter5valueEPKcj>
    }
    // Timestamp
    if (attr.has_time) {
   d7736:	7923      	ldrb	r3, [r4, #4]
   d7738:	0719      	lsls	r1, r3, #28
   d773a:	d507      	bpl.n	d774c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x100>
        json.name("t", 1).value((unsigned)attr.time);
   d773c:	491d      	ldr	r1, [pc, #116]	; (d77b4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   d773e:	2201      	movs	r2, #1
   d7740:	a801      	add	r0, sp, #4
   d7742:	f7ff f813 	bl	d676c <_ZN5spark10JSONWriter4nameEPKcj>
   d7746:	6961      	ldr	r1, [r4, #20]
   d7748:	f7fe ffaa 	bl	d66a0 <_ZN5spark10JSONWriter5valueEj>
    }
    // Code (additional attribute)
    if (attr.has_code) {
   d774c:	7923      	ldrb	r3, [r4, #4]
   d774e:	06da      	lsls	r2, r3, #27
   d7750:	d508      	bpl.n	d7764 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x118>
        json.name("code", 4).value((int)attr.code);
   d7752:	2204      	movs	r2, #4
   d7754:	4918      	ldr	r1, [pc, #96]	; (d77b8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   d7756:	eb0d 0002 	add.w	r0, sp, r2
   d775a:	f7ff f807 	bl	d676c <_ZN5spark10JSONWriter4nameEPKcj>
   d775e:	69a1      	ldr	r1, [r4, #24]
   d7760:	f7fe ff8c 	bl	d667c <_ZN5spark10JSONWriter5valueEi>
    }
    // Details (additional attribute)
    if (attr.has_details) {
   d7764:	7923      	ldrb	r3, [r4, #4]
   d7766:	069b      	lsls	r3, r3, #26
   d7768:	d507      	bpl.n	d777a <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12e>
        json.name("detail", 6).value(attr.details);
   d776a:	4914      	ldr	r1, [pc, #80]	; (d77bc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   d776c:	2206      	movs	r2, #6
   d776e:	a801      	add	r0, sp, #4
   d7770:	f7fe fffc 	bl	d676c <_ZN5spark10JSONWriter4nameEPKcj>
   d7774:	69e1      	ldr	r1, [r4, #28]
   d7776:	f7ff f8c2 	bl	d68fe <_ZN5spark10JSONWriter5valueEPKc>
    }
    json.endObject();
   d777a:	a801      	add	r0, sp, #4
   d777c:	f7fe ff5b 	bl	d6636 <_ZN5spark10JSONWriter9endObjectEv>
   d7780:	6a30      	ldr	r0, [r6, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
   d7782:	490f      	ldr	r1, [pc, #60]	; (d77c0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   d7784:	6803      	ldr	r3, [r0, #0]
   d7786:	2202      	movs	r2, #2
   d7788:	68db      	ldr	r3, [r3, #12]
   d778a:	4798      	blx	r3
}
   d778c:	b005      	add	sp, #20
   d778e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d7792:	bf00      	nop
   d7794:	2003e570 	.word	0x2003e570
   d7798:	000dc0ec 	.word	0x000dc0ec
   d779c:	000dc11e 	.word	0x000dc11e
   d77a0:	000dc131 	.word	0x000dc131
   d77a4:	000dc1e7 	.word	0x000dc1e7
   d77a8:	000db834 	.word	0x000db834
   d77ac:	000dc1b6 	.word	0x000dc1b6
   d77b0:	000dc1b9 	.word	0x000dc1b9
   d77b4:	000dc146 	.word	0x000dc146
   d77b8:	000dc1bc 	.word	0x000dc1bc
   d77bc:	000dc1c1 	.word	0x000dc1c1
   d77c0:	000dbc36 	.word	0x000dbc36

000d77c4 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d77c4:	2200      	movs	r2, #0
   d77c6:	4611      	mov	r1, r2
   d77c8:	6840      	ldr	r0, [r0, #4]
   d77ca:	f7fe b977 	b.w	d5abc <network_listening>

000d77ce <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d77ce:	2200      	movs	r2, #0
   d77d0:	4611      	mov	r1, r2
   d77d2:	6840      	ldr	r0, [r0, #4]
   d77d4:	f7fe b982 	b.w	d5adc <network_get_listen_timeout>

000d77d8 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d77d8:	2200      	movs	r2, #0
   d77da:	6840      	ldr	r0, [r0, #4]
   d77dc:	f7fe b976 	b.w	d5acc <network_set_listen_timeout>

000d77e0 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d77e0:	2200      	movs	r2, #0
   d77e2:	f081 0101 	eor.w	r1, r1, #1
   d77e6:	6840      	ldr	r0, [r0, #4]
   d77e8:	f7fe b960 	b.w	d5aac <network_listen>

000d77ec <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d77ec:	2300      	movs	r3, #0
   d77ee:	461a      	mov	r2, r3
   d77f0:	2101      	movs	r1, #1
   d77f2:	6840      	ldr	r0, [r0, #4]
   d77f4:	f7fe b952 	b.w	d5a9c <network_off>

000d77f8 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d77f8:	2300      	movs	r3, #0
   d77fa:	461a      	mov	r2, r3
   d77fc:	4619      	mov	r1, r3
   d77fe:	6840      	ldr	r0, [r0, #4]
   d7800:	f7fe b944 	b.w	d5a8c <network_on>

000d7804 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d7804:	2200      	movs	r2, #0
   d7806:	4611      	mov	r1, r2
   d7808:	6840      	ldr	r0, [r0, #4]
   d780a:	f7fe b937 	b.w	d5a7c <network_ready>

000d780e <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d780e:	2200      	movs	r2, #0
   d7810:	4611      	mov	r1, r2
   d7812:	6840      	ldr	r0, [r0, #4]
   d7814:	f7fe b922 	b.w	d5a5c <network_connecting>

000d7818 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d7818:	2200      	movs	r2, #0
   d781a:	2102      	movs	r1, #2
   d781c:	6840      	ldr	r0, [r0, #4]
   d781e:	f7fe b925 	b.w	d5a6c <network_disconnect>

000d7822 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d7822:	2300      	movs	r3, #0
   d7824:	461a      	mov	r2, r3
   d7826:	6840      	ldr	r0, [r0, #4]
   d7828:	f7fe b910 	b.w	d5a4c <network_connect>

000d782c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d782c:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d782e:	4605      	mov	r5, r0
   d7830:	b188      	cbz	r0, d7856 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7832:	6804      	ldr	r4, [r0, #0]
   d7834:	b14c      	cbz	r4, d784a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d7836:	68a3      	ldr	r3, [r4, #8]
   d7838:	b11b      	cbz	r3, d7842 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d783a:	2203      	movs	r2, #3
   d783c:	4621      	mov	r1, r4
   d783e:	4620      	mov	r0, r4
   d7840:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d7842:	2110      	movs	r1, #16
   d7844:	4620      	mov	r0, r4
   d7846:	f000 fdc6 	bl	d83d6 <_ZdlPvj>
   d784a:	4628      	mov	r0, r5
   d784c:	2114      	movs	r1, #20
      }
   d784e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d7852:	f000 bdc0 	b.w	d83d6 <_ZdlPvj>
   d7856:	bd38      	pop	{r3, r4, r5, pc}

000d7858 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d7858:	b110      	cbz	r0, d7860 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d785a:	6803      	ldr	r3, [r0, #0]
   d785c:	685b      	ldr	r3, [r3, #4]
   d785e:	4718      	bx	r3
   d7860:	4770      	bx	lr

000d7862 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d7862:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d7864:	6803      	ldr	r3, [r0, #0]
   d7866:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d7868:	b1bb      	cbz	r3, d789a <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d786a:	6858      	ldr	r0, [r3, #4]
   d786c:	f7fd ff02 	bl	d5674 <os_thread_is_current>
   d7870:	b978      	cbnz	r0, d7892 <_ZN6ThreadD1Ev+0x30>
   d7872:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d7874:	7c5a      	ldrb	r2, [r3, #17]
   d7876:	b912      	cbnz	r2, d787e <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d7878:	6858      	ldr	r0, [r3, #4]
   d787a:	f7fd ff03 	bl	d5684 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d787e:	6823      	ldr	r3, [r4, #0]
   d7880:	6858      	ldr	r0, [r3, #4]
   d7882:	f7fd ff07 	bl	d5694 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7886:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d7888:	2300      	movs	r3, #0
   d788a:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d788c:	b128      	cbz	r0, d789a <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d788e:	f7ff ffcd 	bl	d782c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7892:	6820      	ldr	r0, [r4, #0]
   d7894:	b108      	cbz	r0, d789a <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d7896:	f7ff ffc9 	bl	d782c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d789a:	4620      	mov	r0, r4
   d789c:	bd10      	pop	{r4, pc}

000d789e <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d789e:	b538      	push	{r3, r4, r5, lr}
   d78a0:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d78a2:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d78a6:	b108      	cbz	r0, d78ac <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d78a8:	f7fc fbfb 	bl	d40a2 <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d78ac:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d78b0:	b108      	cbz	r0, d78b6 <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d78b2:	f7fd feff 	bl	d56b4 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d78b6:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d78ba:	b135      	cbz	r5, d78ca <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d78bc:	4628      	mov	r0, r5
   d78be:	f7ff ffd0 	bl	d7862 <_ZN6ThreadD1Ev>
   d78c2:	2104      	movs	r1, #4
   d78c4:	4628      	mov	r0, r5
   d78c6:	f000 fd86 	bl	d83d6 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d78ca:	6820      	ldr	r0, [r4, #0]
   d78cc:	b108      	cbz	r0, d78d2 <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d78ce:	f7ff ffc3 	bl	d7858 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d78d2:	4620      	mov	r0, r4
   d78d4:	bd38      	pop	{r3, r4, r5, pc}
	...

000d78d8 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d78d8:	b510      	push	{r4, lr}
   d78da:	4b04      	ldr	r3, [pc, #16]	; (d78ec <_ZN5spark9MeshClassD1Ev+0x14>)
   d78dc:	4604      	mov	r4, r0
   d78de:	f840 3b08 	str.w	r3, [r0], #8
   d78e2:	f7ff ffdc 	bl	d789e <_ZN5spark11MeshPublishD1Ev>
   d78e6:	4620      	mov	r0, r4
   d78e8:	bd10      	pop	{r4, pc}
   d78ea:	bf00      	nop
   d78ec:	000dc240 	.word	0x000dc240

000d78f0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d78f0:	b538      	push	{r3, r4, r5, lr}
   d78f2:	4c0e      	ldr	r4, [pc, #56]	; (d792c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d78f4:	4b0e      	ldr	r3, [pc, #56]	; (d7930 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d78f6:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d78f8:	2500      	movs	r5, #0
   d78fa:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d78fc:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d7900:	6063      	str	r3, [r4, #4]
   d7902:	60a5      	str	r5, [r4, #8]
   d7904:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d7908:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d790c:	f7fd feca 	bl	d56a4 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d7910:	4b08      	ldr	r3, [pc, #32]	; (d7934 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d7912:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d7916:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d791a:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d791c:	4620      	mov	r0, r4
   d791e:	4a06      	ldr	r2, [pc, #24]	; (d7938 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d7920:	4906      	ldr	r1, [pc, #24]	; (d793c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d7922:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d7926:	f000 bd51 	b.w	d83cc <__aeabi_atexit>
   d792a:	bf00      	nop
   d792c:	2003e39c 	.word	0x2003e39c
   d7930:	000dc274 	.word	0x000dc274
   d7934:	000dc240 	.word	0x000dc240
   d7938:	2003e1a0 	.word	0x2003e1a0
   d793c:	000d78d9 	.word	0x000d78d9

000d7940 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d7940:	2300      	movs	r3, #0
   d7942:	461a      	mov	r2, r3
   d7944:	6840      	ldr	r0, [r0, #4]
   d7946:	f7fe b881 	b.w	d5a4c <network_connect>

000d794a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d794a:	2200      	movs	r2, #0
   d794c:	2102      	movs	r1, #2
   d794e:	6840      	ldr	r0, [r0, #4]
   d7950:	f7fe b88c 	b.w	d5a6c <network_disconnect>

000d7954 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d7954:	2200      	movs	r2, #0
   d7956:	4611      	mov	r1, r2
   d7958:	6840      	ldr	r0, [r0, #4]
   d795a:	f7fe b87f 	b.w	d5a5c <network_connecting>

000d795e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d795e:	2200      	movs	r2, #0
   d7960:	4611      	mov	r1, r2
   d7962:	6840      	ldr	r0, [r0, #4]
   d7964:	f7fe b88a 	b.w	d5a7c <network_ready>

000d7968 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d7968:	2300      	movs	r3, #0
   d796a:	461a      	mov	r2, r3
   d796c:	4619      	mov	r1, r3
   d796e:	6840      	ldr	r0, [r0, #4]
   d7970:	f7fe b88c 	b.w	d5a8c <network_on>

000d7974 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d7974:	2300      	movs	r3, #0
   d7976:	461a      	mov	r2, r3
   d7978:	4619      	mov	r1, r3
   d797a:	6840      	ldr	r0, [r0, #4]
   d797c:	f7fe b88e 	b.w	d5a9c <network_off>

000d7980 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d7980:	2200      	movs	r2, #0
   d7982:	f081 0101 	eor.w	r1, r1, #1
   d7986:	6840      	ldr	r0, [r0, #4]
   d7988:	f7fe b890 	b.w	d5aac <network_listen>

000d798c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d798c:	2200      	movs	r2, #0
   d798e:	6840      	ldr	r0, [r0, #4]
   d7990:	f7fe b89c 	b.w	d5acc <network_set_listen_timeout>

000d7994 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d7994:	2200      	movs	r2, #0
   d7996:	4611      	mov	r1, r2
   d7998:	6840      	ldr	r0, [r0, #4]
   d799a:	f7fe b89f 	b.w	d5adc <network_get_listen_timeout>

000d799e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d799e:	2200      	movs	r2, #0
   d79a0:	4611      	mov	r1, r2
   d79a2:	6840      	ldr	r0, [r0, #4]
   d79a4:	f7fe b88a 	b.w	d5abc <network_listening>

000d79a8 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d79a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d79ac:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d79ae:	b095      	sub	sp, #84	; 0x54
   d79b0:	4616      	mov	r6, r2
   d79b2:	460d      	mov	r5, r1
   d79b4:	4607      	mov	r7, r0
    IPAddress addr;
   d79b6:	f7fe fd4d 	bl	d6454 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d79ba:	4621      	mov	r1, r4
   d79bc:	2220      	movs	r2, #32
   d79be:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d79c0:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d79c2:	f001 fc91 	bl	d92e8 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d79c6:	2340      	movs	r3, #64	; 0x40
   d79c8:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d79ca:	4621      	mov	r1, r4
   d79cc:	466b      	mov	r3, sp
   d79ce:	aa0c      	add	r2, sp, #48	; 0x30
   d79d0:	4630      	mov	r0, r6
   d79d2:	f7fd ff0f 	bl	d57f4 <netdb_getaddrinfo>
    if (!r) {
   d79d6:	4604      	mov	r4, r0
   d79d8:	2800      	cmp	r0, #0
   d79da:	d144      	bne.n	d7a66 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d79dc:	4602      	mov	r2, r0
   d79de:	2101      	movs	r1, #1
   d79e0:	6868      	ldr	r0, [r5, #4]
   d79e2:	f7fe f84b 	bl	d5a7c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d79e6:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d79e8:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d79ea:	4622      	mov	r2, r4
   d79ec:	6868      	ldr	r0, [r5, #4]
   d79ee:	f7fe f845 	bl	d5a7c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d79f2:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d79f4:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d79f6:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d79f8:	2e00      	cmp	r6, #0
   d79fa:	d034      	beq.n	d7a66 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d79fc:	2900      	cmp	r1, #0
   d79fe:	d132      	bne.n	d7a66 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d7a00:	6873      	ldr	r3, [r6, #4]
   d7a02:	2b02      	cmp	r3, #2
   d7a04:	d002      	beq.n	d7a0c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d7a06:	2b0a      	cmp	r3, #10
   d7a08:	d009      	beq.n	d7a1e <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d7a0a:	e02a      	b.n	d7a62 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d7a0c:	f1b8 0f00 	cmp.w	r8, #0
   d7a10:	d027      	beq.n	d7a62 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d7a12:	6971      	ldr	r1, [r6, #20]
   d7a14:	4638      	mov	r0, r7
   d7a16:	3104      	adds	r1, #4
   d7a18:	f7fe fd49 	bl	d64ae <_ZN9IPAddressaSEPKh>
   d7a1c:	e020      	b.n	d7a60 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d7a1e:	f1b9 0f00 	cmp.w	r9, #0
   d7a22:	d01e      	beq.n	d7a62 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d7a24:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d7a26:	2211      	movs	r2, #17
   d7a28:	a801      	add	r0, sp, #4
   d7a2a:	f001 fc5d 	bl	d92e8 <memset>
                    a.v = 6;
   d7a2e:	2306      	movs	r3, #6
   d7a30:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d7a34:	ad01      	add	r5, sp, #4
   d7a36:	f104 0308 	add.w	r3, r4, #8
   d7a3a:	3418      	adds	r4, #24
   d7a3c:	6818      	ldr	r0, [r3, #0]
   d7a3e:	6859      	ldr	r1, [r3, #4]
   d7a40:	462a      	mov	r2, r5
   d7a42:	c203      	stmia	r2!, {r0, r1}
   d7a44:	3308      	adds	r3, #8
   d7a46:	42a3      	cmp	r3, r4
   d7a48:	4615      	mov	r5, r2
   d7a4a:	d1f7      	bne.n	d7a3c <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d7a4c:	a901      	add	r1, sp, #4
   d7a4e:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d7a50:	ad07      	add	r5, sp, #28
   d7a52:	f7fe fd0d 	bl	d6470 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d7a56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7a58:	1d3c      	adds	r4, r7, #4
   d7a5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7a5c:	682b      	ldr	r3, [r5, #0]
   d7a5e:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d7a60:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7a62:	69f6      	ldr	r6, [r6, #28]
   d7a64:	e7c8      	b.n	d79f8 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d7a66:	9800      	ldr	r0, [sp, #0]
   d7a68:	f7fd febc 	bl	d57e4 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d7a6c:	4638      	mov	r0, r7
   d7a6e:	b015      	add	sp, #84	; 0x54
   d7a70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d7a74 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d7a74:	4b02      	ldr	r3, [pc, #8]	; (d7a80 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d7a76:	4a03      	ldr	r2, [pc, #12]	; (d7a84 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d7a78:	601a      	str	r2, [r3, #0]
   d7a7a:	2200      	movs	r2, #0
   d7a7c:	605a      	str	r2, [r3, #4]
   d7a7e:	4770      	bx	lr
   d7a80:	2003e570 	.word	0x2003e570
   d7a84:	000dc274 	.word	0x000dc274

000d7a88 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d7a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7a8a:	4606      	mov	r6, r0
   d7a8c:	460d      	mov	r5, r1
   d7a8e:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d7a90:	2400      	movs	r4, #0
  while (size--) {
   d7a92:	42bd      	cmp	r5, r7
   d7a94:	d00c      	beq.n	d7ab0 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d7a96:	6833      	ldr	r3, [r6, #0]
   d7a98:	f815 1b01 	ldrb.w	r1, [r5], #1
   d7a9c:	689b      	ldr	r3, [r3, #8]
   d7a9e:	4630      	mov	r0, r6
   d7aa0:	4798      	blx	r3
     if (chunk>=0)
   d7aa2:	2800      	cmp	r0, #0
   d7aa4:	db01      	blt.n	d7aaa <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d7aa6:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d7aa8:	e7f3      	b.n	d7a92 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d7aaa:	2c00      	cmp	r4, #0
   d7aac:	bf08      	it	eq
   d7aae:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d7ab0:	4620      	mov	r0, r4
   d7ab2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7ab4 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d7ab4:	b570      	push	{r4, r5, r6, lr}
   d7ab6:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d7ab8:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d7aba:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d7abc:	b149      	cbz	r1, d7ad2 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d7abe:	f001 fc88 	bl	d93d2 <strlen>
   d7ac2:	682b      	ldr	r3, [r5, #0]
   d7ac4:	4602      	mov	r2, r0
   d7ac6:	4621      	mov	r1, r4
   d7ac8:	4628      	mov	r0, r5
   d7aca:	68db      	ldr	r3, [r3, #12]
    }
   d7acc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d7ad0:	4718      	bx	r3
    }
   d7ad2:	bd70      	pop	{r4, r5, r6, pc}

000d7ad4 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d7ad4:	6803      	ldr	r3, [r0, #0]
   d7ad6:	689b      	ldr	r3, [r3, #8]
   d7ad8:	4718      	bx	r3

000d7ada <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d7ada:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d7adc:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d7ade:	4605      	mov	r5, r0
  size_t n = print('\r');
   d7ae0:	f7ff fff8 	bl	d7ad4 <_ZN5Print5printEc>
  n += print('\n');
   d7ae4:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d7ae6:	4604      	mov	r4, r0
  n += print('\n');
   d7ae8:	4628      	mov	r0, r5
   d7aea:	f7ff fff3 	bl	d7ad4 <_ZN5Print5printEc>
  return n;
}
   d7aee:	4420      	add	r0, r4
   d7af0:	bd38      	pop	{r3, r4, r5, pc}

000d7af2 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d7af2:	b538      	push	{r3, r4, r5, lr}
   d7af4:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d7af6:	f7ff ffdd 	bl	d7ab4 <_ZN5Print5writeEPKc>
   d7afa:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d7afc:	4628      	mov	r0, r5
   d7afe:	f7ff ffec 	bl	d7ada <_ZN5Print7printlnEv>
  return n;
}
   d7b02:	4420      	add	r0, r4
   d7b04:	bd38      	pop	{r3, r4, r5, pc}

000d7b06 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d7b06:	b530      	push	{r4, r5, lr}
   d7b08:	b08b      	sub	sp, #44	; 0x2c
   d7b0a:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d7b0c:	2100      	movs	r1, #0
   d7b0e:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d7b12:	2a01      	cmp	r2, #1
   d7b14:	bf98      	it	ls
   d7b16:	220a      	movls	r2, #10
   d7b18:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d7b1c:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d7b20:	fb05 3312 	mls	r3, r5, r2, r3
   d7b24:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d7b28:	2b09      	cmp	r3, #9
   d7b2a:	bf94      	ite	ls
   d7b2c:	3330      	addls	r3, #48	; 0x30
   d7b2e:	3337      	addhi	r3, #55	; 0x37
   d7b30:	b2db      	uxtb	r3, r3
   d7b32:	4621      	mov	r1, r4
   d7b34:	f804 3901 	strb.w	r3, [r4], #-1
   d7b38:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d7b3a:	2d00      	cmp	r5, #0
   d7b3c:	d1ee      	bne.n	d7b1c <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d7b3e:	f7ff ffb9 	bl	d7ab4 <_ZN5Print5writeEPKc>
}
   d7b42:	b00b      	add	sp, #44	; 0x2c
   d7b44:	bd30      	pop	{r4, r5, pc}

000d7b46 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d7b46:	b40c      	push	{r2, r3}
   d7b48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d7b4c:	b087      	sub	sp, #28
   d7b4e:	af00      	add	r7, sp, #0
   d7b50:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d7b54:	4605      	mov	r5, r0
   d7b56:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d7b5a:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d7b5c:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d7b5e:	4623      	mov	r3, r4
   d7b60:	464a      	mov	r2, r9
   d7b62:	2114      	movs	r1, #20
   d7b64:	1d38      	adds	r0, r7, #4
   d7b66:	f7fd fff9 	bl	d5b5c <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d7b6a:	2813      	cmp	r0, #19
   d7b6c:	d805      	bhi.n	d7b7a <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d7b6e:	1d39      	adds	r1, r7, #4
   d7b70:	4628      	mov	r0, r5
   d7b72:	f7ff ff9f 	bl	d7ab4 <_ZN5Print5writeEPKc>
   d7b76:	4604      	mov	r4, r0
   d7b78:	e013      	b.n	d7ba2 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d7b7a:	f100 0308 	add.w	r3, r0, #8
   d7b7e:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d7b82:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d7b84:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d7b88:	1c41      	adds	r1, r0, #1
   d7b8a:	4623      	mov	r3, r4
   d7b8c:	464a      	mov	r2, r9
   d7b8e:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d7b90:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d7b92:	f7fd ffe3 	bl	d5b5c <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d7b96:	4669      	mov	r1, sp
   d7b98:	4628      	mov	r0, r5
   d7b9a:	f7ff ff8b 	bl	d7ab4 <_ZN5Print5writeEPKc>
   d7b9e:	4604      	mov	r4, r0
   d7ba0:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d7ba2:	b11e      	cbz	r6, d7bac <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d7ba4:	4628      	mov	r0, r5
   d7ba6:	f7ff ff98 	bl	d7ada <_ZN5Print7printlnEv>
   d7baa:	4404      	add	r4, r0
    return n;
}
   d7bac:	4620      	mov	r0, r4
   d7bae:	371c      	adds	r7, #28
   d7bb0:	46bd      	mov	sp, r7
   d7bb2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d7bb6:	b002      	add	sp, #8
   d7bb8:	4770      	bx	lr

000d7bba <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d7bba:	b510      	push	{r4, lr}
   d7bbc:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d7bbe:	f7fd f9a7 	bl	d4f10 <_ZNSt14_Function_baseD1Ev>
   d7bc2:	4620      	mov	r0, r4
   d7bc4:	bd10      	pop	{r4, pc}
	...

000d7bc8 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d7bc8:	4803      	ldr	r0, [pc, #12]	; (d7bd8 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d7bca:	4a04      	ldr	r2, [pc, #16]	; (d7bdc <_GLOBAL__sub_I_RGB+0x14>)
   d7bcc:	4904      	ldr	r1, [pc, #16]	; (d7be0 <_GLOBAL__sub_I_RGB+0x18>)
   d7bce:	2300      	movs	r3, #0
   d7bd0:	6083      	str	r3, [r0, #8]
   d7bd2:	f000 bbfb 	b.w	d83cc <__aeabi_atexit>
   d7bd6:	bf00      	nop
   d7bd8:	2003e578 	.word	0x2003e578
   d7bdc:	2003e1a0 	.word	0x2003e1a0
   d7be0:	000d7bbb 	.word	0x000d7bbb

000d7be4 <_ZN6StringC1EOS_>:
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d7be4:	2300      	movs	r3, #0
   d7be6:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d7be8:	6043      	str	r3, [r0, #4]
	len = 0;
   d7bea:	6083      	str	r3, [r0, #8]
	flags = 0;
   d7bec:	7303      	strb	r3, [r0, #12]
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String::String(String &&rval)
   d7bee:	b510      	push	{r4, lr}
			return;
		} else {
			free(buffer);
		}
	}
	buffer = rhs.buffer;
   d7bf0:	680c      	ldr	r4, [r1, #0]
   d7bf2:	6004      	str	r4, [r0, #0]
	capacity = rhs.capacity;
   d7bf4:	684c      	ldr	r4, [r1, #4]
   d7bf6:	6044      	str	r4, [r0, #4]
	len = rhs.len;
   d7bf8:	688c      	ldr	r4, [r1, #8]
   d7bfa:	6084      	str	r4, [r0, #8]
	rhs.buffer = NULL;
   d7bfc:	600b      	str	r3, [r1, #0]
	rhs.capacity = 0;
   d7bfe:	604b      	str	r3, [r1, #4]
	rhs.len = 0;
   d7c00:	608b      	str	r3, [r1, #8]
#ifdef __GXX_EXPERIMENTAL_CXX0X__
String::String(String &&rval)
{
	init();
	move(rval);
}
   d7c02:	bd10      	pop	{r4, pc}

000d7c04 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d7c04:	b510      	push	{r4, lr}
   d7c06:	4604      	mov	r4, r0
{
	free(buffer);
   d7c08:	6800      	ldr	r0, [r0, #0]
   d7c0a:	f7fd ff77 	bl	d5afc <free>
}
   d7c0e:	4620      	mov	r0, r4
   d7c10:	bd10      	pop	{r4, pc}

000d7c12 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d7c12:	b510      	push	{r4, lr}
   d7c14:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d7c16:	6800      	ldr	r0, [r0, #0]
   d7c18:	b108      	cbz	r0, d7c1e <_ZN6String10invalidateEv+0xc>
   d7c1a:	f7fd ff6f 	bl	d5afc <free>
	buffer = NULL;
   d7c1e:	2300      	movs	r3, #0
   d7c20:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d7c22:	60a3      	str	r3, [r4, #8]
   d7c24:	6063      	str	r3, [r4, #4]
   d7c26:	bd10      	pop	{r4, pc}

000d7c28 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d7c28:	b538      	push	{r3, r4, r5, lr}
   d7c2a:	4604      	mov	r4, r0
   d7c2c:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d7c2e:	6800      	ldr	r0, [r0, #0]
   d7c30:	3101      	adds	r1, #1
   d7c32:	f7fd ff6b 	bl	d5b0c <realloc>
	if (newbuffer) {
   d7c36:	b110      	cbz	r0, d7c3e <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d7c38:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d7c3c:	2001      	movs	r0, #1
	}
	return 0;
}
   d7c3e:	bd38      	pop	{r3, r4, r5, pc}

000d7c40 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d7c40:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d7c42:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d7c44:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d7c46:	b113      	cbz	r3, d7c4e <_ZN6String7reserveEj+0xe>
   d7c48:	6843      	ldr	r3, [r0, #4]
   d7c4a:	428b      	cmp	r3, r1
   d7c4c:	d207      	bcs.n	d7c5e <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d7c4e:	4620      	mov	r0, r4
   d7c50:	f7ff ffea 	bl	d7c28 <_ZN6String12changeBufferEj>
   d7c54:	b120      	cbz	r0, d7c60 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d7c56:	68a3      	ldr	r3, [r4, #8]
   d7c58:	b90b      	cbnz	r3, d7c5e <_ZN6String7reserveEj+0x1e>
   d7c5a:	6822      	ldr	r2, [r4, #0]
   d7c5c:	7013      	strb	r3, [r2, #0]
   d7c5e:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d7c60:	bd10      	pop	{r4, pc}

000d7c62 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d7c62:	b570      	push	{r4, r5, r6, lr}
   d7c64:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d7c66:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d7c68:	4604      	mov	r4, r0
   d7c6a:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d7c6c:	f7ff ffe8 	bl	d7c40 <_ZN6String7reserveEj>
   d7c70:	b918      	cbnz	r0, d7c7a <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d7c72:	4620      	mov	r0, r4
   d7c74:	f7ff ffcd 	bl	d7c12 <_ZN6String10invalidateEv>
		return *this;
   d7c78:	e009      	b.n	d7c8e <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d7c7a:	462a      	mov	r2, r5
   d7c7c:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d7c7e:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d7c80:	6820      	ldr	r0, [r4, #0]
   d7c82:	f001 fb0b 	bl	d929c <memcpy>
	buffer[len] = 0;
   d7c86:	6822      	ldr	r2, [r4, #0]
   d7c88:	68a3      	ldr	r3, [r4, #8]
   d7c8a:	2100      	movs	r1, #0
   d7c8c:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d7c8e:	4620      	mov	r0, r4
   d7c90:	bd70      	pop	{r4, r5, r6, pc}

000d7c92 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d7c92:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d7c94:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d7c96:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d7c98:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d7c9a:	6043      	str	r3, [r0, #4]
	len = 0;
   d7c9c:	6083      	str	r3, [r0, #8]
	flags = 0;
   d7c9e:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d7ca0:	460d      	mov	r5, r1
   d7ca2:	b139      	cbz	r1, d7cb4 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d7ca4:	4608      	mov	r0, r1
   d7ca6:	f001 fb94 	bl	d93d2 <strlen>
   d7caa:	4629      	mov	r1, r5
   d7cac:	4602      	mov	r2, r0
   d7cae:	4620      	mov	r0, r4
   d7cb0:	f7ff ffd7 	bl	d7c62 <_ZN6String4copyEPKcj>
}
   d7cb4:	4620      	mov	r0, r4
   d7cb6:	bd38      	pop	{r3, r4, r5, pc}

000d7cb8 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d7cb8:	b538      	push	{r3, r4, r5, lr}
   d7cba:	4605      	mov	r5, r0
	if (buffer) {
   d7cbc:	6800      	ldr	r0, [r0, #0]
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d7cbe:	460c      	mov	r4, r1
	if (buffer) {
   d7cc0:	b160      	cbz	r0, d7cdc <_ZN6String4moveERS_+0x24>
		if (capacity >= rhs.len) {
   d7cc2:	686a      	ldr	r2, [r5, #4]
   d7cc4:	688b      	ldr	r3, [r1, #8]
   d7cc6:	429a      	cmp	r2, r3
   d7cc8:	d306      	bcc.n	d7cd8 <_ZN6String4moveERS_+0x20>
			strcpy(buffer, rhs.buffer);
   d7cca:	6809      	ldr	r1, [r1, #0]
   d7ccc:	f001 fb5e 	bl	d938c <strcpy>
			len = rhs.len;
   d7cd0:	68a3      	ldr	r3, [r4, #8]
   d7cd2:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   d7cd4:	2300      	movs	r3, #0
   d7cd6:	e00a      	b.n	d7cee <_ZN6String4moveERS_+0x36>
			return;
		} else {
			free(buffer);
   d7cd8:	f7fd ff10 	bl	d5afc <free>
		}
	}
	buffer = rhs.buffer;
   d7cdc:	6823      	ldr	r3, [r4, #0]
   d7cde:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   d7ce0:	6863      	ldr	r3, [r4, #4]
   d7ce2:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   d7ce4:	68a3      	ldr	r3, [r4, #8]
   d7ce6:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   d7ce8:	2300      	movs	r3, #0
   d7cea:	6023      	str	r3, [r4, #0]
	rhs.capacity = 0;
   d7cec:	6063      	str	r3, [r4, #4]
	rhs.len = 0;
   d7cee:	60a3      	str	r3, [r4, #8]
   d7cf0:	bd38      	pop	{r3, r4, r5, pc}

000d7cf2 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d7cf2:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   d7cf4:	b510      	push	{r4, lr}
   d7cf6:	460b      	mov	r3, r1
   d7cf8:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d7cfa:	d007      	beq.n	d7d0c <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d7cfc:	6809      	ldr	r1, [r1, #0]
   d7cfe:	b119      	cbz	r1, d7d08 <_ZN6StringaSERKS_+0x16>
   d7d00:	689a      	ldr	r2, [r3, #8]
   d7d02:	f7ff ffae 	bl	d7c62 <_ZN6String4copyEPKcj>
   d7d06:	e001      	b.n	d7d0c <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   d7d08:	f7ff ff83 	bl	d7c12 <_ZN6String10invalidateEv>

	return *this;
}
   d7d0c:	4620      	mov	r0, r4
   d7d0e:	bd10      	pop	{r4, pc}

000d7d10 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d7d10:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d7d12:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d7d14:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d7d16:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d7d18:	6043      	str	r3, [r0, #4]
	len = 0;
   d7d1a:	6083      	str	r3, [r0, #8]
	flags = 0;
   d7d1c:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
   d7d1e:	f7ff ffe8 	bl	d7cf2 <_ZN6StringaSERKS_>
}
   d7d22:	4620      	mov	r0, r4
   d7d24:	bd10      	pop	{r4, pc}

000d7d26 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   d7d26:	4288      	cmp	r0, r1
    return *this;
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
   d7d28:	b510      	push	{r4, lr}
   d7d2a:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   d7d2c:	d001      	beq.n	d7d32 <_ZN6StringaSEOS_+0xc>
   d7d2e:	f7ff ffc3 	bl	d7cb8 <_ZN6String4moveERS_>
	return *this;
}
   d7d32:	4620      	mov	r0, r4
   d7d34:	bd10      	pop	{r4, pc}

000d7d36 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d7d36:	b538      	push	{r3, r4, r5, lr}
   d7d38:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   d7d3a:	460c      	mov	r4, r1
   d7d3c:	b141      	cbz	r1, d7d50 <_ZN6StringaSEPKc+0x1a>
   d7d3e:	4608      	mov	r0, r1
   d7d40:	f001 fb47 	bl	d93d2 <strlen>
   d7d44:	4621      	mov	r1, r4
   d7d46:	4602      	mov	r2, r0
   d7d48:	4628      	mov	r0, r5
   d7d4a:	f7ff ff8a 	bl	d7c62 <_ZN6String4copyEPKcj>
   d7d4e:	e001      	b.n	d7d54 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   d7d50:	f7ff ff5f 	bl	d7c12 <_ZN6String10invalidateEv>

	return *this;
}
   d7d54:	4628      	mov	r0, r5
   d7d56:	bd38      	pop	{r3, r4, r5, pc}

000d7d58 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d7d58:	b570      	push	{r4, r5, r6, lr}
   d7d5a:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d7d5c:	460e      	mov	r6, r1
   d7d5e:	b909      	cbnz	r1, d7d64 <_ZN6String6concatEPKcj+0xc>
   d7d60:	2000      	movs	r0, #0
   d7d62:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d7d64:	b16a      	cbz	r2, d7d82 <_ZN6String6concatEPKcj+0x2a>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
   d7d66:	6883      	ldr	r3, [r0, #8]
   d7d68:	18d5      	adds	r5, r2, r3
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
   d7d6a:	4629      	mov	r1, r5
   d7d6c:	f7ff ff68 	bl	d7c40 <_ZN6String7reserveEj>
   d7d70:	2800      	cmp	r0, #0
   d7d72:	d0f5      	beq.n	d7d60 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d7d74:	6820      	ldr	r0, [r4, #0]
   d7d76:	68a3      	ldr	r3, [r4, #8]
   d7d78:	4631      	mov	r1, r6
   d7d7a:	4418      	add	r0, r3
   d7d7c:	f001 fb06 	bl	d938c <strcpy>
	len = newlen;
   d7d80:	60a5      	str	r5, [r4, #8]

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
   d7d82:	2001      	movs	r0, #1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d7d84:	bd70      	pop	{r4, r5, r6, pc}

000d7d86 <_ZN6String6concatEPKc>:

unsigned char String::concat(const char *cstr)
{
   d7d86:	b538      	push	{r3, r4, r5, lr}
   d7d88:	4605      	mov	r5, r0
	if (!cstr) return 0;
   d7d8a:	460c      	mov	r4, r1
	return concat(cstr, strlen(cstr));
}
   d7d8c:	4608      	mov	r0, r1
	return 1;
}

unsigned char String::concat(const char *cstr)
{
	if (!cstr) return 0;
   d7d8e:	b141      	cbz	r1, d7da2 <_ZN6String6concatEPKc+0x1c>
	return concat(cstr, strlen(cstr));
   d7d90:	f001 fb1f 	bl	d93d2 <strlen>
   d7d94:	4621      	mov	r1, r4
   d7d96:	4602      	mov	r2, r0
   d7d98:	4628      	mov	r0, r5
}
   d7d9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
}

unsigned char String::concat(const char *cstr)
{
	if (!cstr) return 0;
	return concat(cstr, strlen(cstr));
   d7d9e:	f7ff bfdb 	b.w	d7d58 <_ZN6String6concatEPKcj>
}
   d7da2:	bd38      	pop	{r3, r4, r5, pc}

000d7da4 <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   d7da4:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   d7da6:	2300      	movs	r3, #0
}

unsigned char String::concat(char c)
{
	char buf[2];
	buf[0] = c;
   d7da8:	f88d 1004 	strb.w	r1, [sp, #4]
	buf[1] = 0;
	return concat(buf, 1);
   d7dac:	2201      	movs	r2, #1
   d7dae:	a901      	add	r1, sp, #4

unsigned char String::concat(char c)
{
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   d7db0:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   d7db4:	f7ff ffd0 	bl	d7d58 <_ZN6String6concatEPKcj>
}
   d7db8:	b003      	add	sp, #12
   d7dba:	f85d fb04 	ldr.w	pc, [sp], #4

000d7dbe <_ZNK6String10startsWithERKS_j>:
	if (len < s2.len) return 0;
	return startsWith(s2, 0);
}

unsigned char String::startsWith( const String &s2, unsigned int offset ) const
{
   d7dbe:	b510      	push	{r4, lr}
   d7dc0:	4614      	mov	r4, r2
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
   d7dc2:	6883      	ldr	r3, [r0, #8]
   d7dc4:	688a      	ldr	r2, [r1, #8]
   d7dc6:	1a9b      	subs	r3, r3, r2
   d7dc8:	42a3      	cmp	r3, r4
   d7dca:	d30a      	bcc.n	d7de2 <_ZNK6String10startsWithERKS_j+0x24>
   d7dcc:	6800      	ldr	r0, [r0, #0]
   d7dce:	b158      	cbz	r0, d7de8 <_ZNK6String10startsWithERKS_j+0x2a>
   d7dd0:	6809      	ldr	r1, [r1, #0]
   d7dd2:	b141      	cbz	r1, d7de6 <_ZNK6String10startsWithERKS_j+0x28>
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
   d7dd4:	4420      	add	r0, r4
   d7dd6:	f001 fb04 	bl	d93e2 <strncmp>
   d7dda:	fab0 f080 	clz	r0, r0
   d7dde:	0940      	lsrs	r0, r0, #5
   d7de0:	bd10      	pop	{r4, pc}
	return startsWith(s2, 0);
}

unsigned char String::startsWith( const String &s2, unsigned int offset ) const
{
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
   d7de2:	2000      	movs	r0, #0
   d7de4:	bd10      	pop	{r4, pc}
   d7de6:	4608      	mov	r0, r1
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
}
   d7de8:	bd10      	pop	{r4, pc}

000d7dea <_ZNK6String10startsWithERKS_>:
	return 1;
}

unsigned char String::startsWith( const String &s2 ) const
{
	if (len < s2.len) return 0;
   d7dea:	6882      	ldr	r2, [r0, #8]
   d7dec:	688b      	ldr	r3, [r1, #8]
   d7dee:	429a      	cmp	r2, r3
   d7df0:	d302      	bcc.n	d7df8 <_ZNK6String10startsWithERKS_+0xe>
	return startsWith(s2, 0);
   d7df2:	2200      	movs	r2, #0
   d7df4:	f7ff bfe3 	b.w	d7dbe <_ZNK6String10startsWithERKS_j>
}
   d7df8:	2000      	movs	r0, #0
   d7dfa:	4770      	bx	lr

000d7dfc <_ZNK6StringixEj>:
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
   d7dfc:	6883      	ldr	r3, [r0, #8]
   d7dfe:	428b      	cmp	r3, r1
   d7e00:	d903      	bls.n	d7e0a <_ZNK6StringixEj+0xe>
   d7e02:	6800      	ldr	r0, [r0, #0]
   d7e04:	b110      	cbz	r0, d7e0c <_ZNK6StringixEj+0x10>
	return buffer[index];
   d7e06:	5c40      	ldrb	r0, [r0, r1]
   d7e08:	4770      	bx	lr
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
   d7e0a:	2000      	movs	r0, #0
	return buffer[index];
}
   d7e0c:	4770      	bx	lr

000d7e0e <_ZNK6String6charAtEj>:
/*  Character Access                         */
/*********************************************/

char String::charAt(unsigned int loc) const
{
	return operator[](loc);
   d7e0e:	f7ff bff5 	b.w	d7dfc <_ZNK6StringixEj>
	...

000d7e14 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   d7e14:	b40e      	push	{r1, r2, r3}
   d7e16:	b5ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7, lr}
   d7e18:	ac09      	add	r4, sp, #36	; 0x24
   d7e1a:	4605      	mov	r5, r0
   d7e1c:	f854 7b04 	ldr.w	r7, [r4], #4
    va_list marker;
    va_start(marker, fmt);
   d7e20:	9401      	str	r4, [sp, #4]
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   d7e22:	4623      	mov	r3, r4
   d7e24:	463a      	mov	r2, r7
   d7e26:	2105      	movs	r1, #5
   d7e28:	a802      	add	r0, sp, #8
   d7e2a:	f7fd fe97 	bl	d5b5c <vsnprintf>
    va_end(marker);

    String result;
   d7e2e:	490c      	ldr	r1, [pc, #48]	; (d7e60 <_ZN6String6formatEPKcz+0x4c>)
{
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   d7e30:	4606      	mov	r6, r0
    va_end(marker);

    String result;
   d7e32:	4628      	mov	r0, r5
   d7e34:	f7ff ff2d 	bl	d7c92 <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(n);  // internally adds +1 for null terminator
   d7e38:	4631      	mov	r1, r6
   d7e3a:	4628      	mov	r0, r5
   d7e3c:	f7ff ff00 	bl	d7c40 <_ZN6String7reserveEj>
    if (result.buffer) {
   d7e40:	6828      	ldr	r0, [r5, #0]
   d7e42:	b130      	cbz	r0, d7e52 <_ZN6String6formatEPKcz+0x3e>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   d7e44:	4623      	mov	r3, r4
   d7e46:	463a      	mov	r2, r7
   d7e48:	1c71      	adds	r1, r6, #1
    va_end(marker);

    String result;
    result.reserve(n);  // internally adds +1 for null terminator
    if (result.buffer) {
        va_start(marker, fmt);
   d7e4a:	9401      	str	r4, [sp, #4]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   d7e4c:	f7fd fe86 	bl	d5b5c <vsnprintf>
        va_end(marker);
        result.len = n;
   d7e50:	60a8      	str	r0, [r5, #8]
    }
    return result;
}
   d7e52:	4628      	mov	r0, r5
   d7e54:	b004      	add	sp, #16
   d7e56:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   d7e5a:	b003      	add	sp, #12
   d7e5c:	4770      	bx	lr
   d7e5e:	bf00      	nop
   d7e60:	000dbc38 	.word	0x000dbc38

000d7e64 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d7e64:	b510      	push	{r4, lr}
   d7e66:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d7e68:	6800      	ldr	r0, [r0, #0]
   d7e6a:	b118      	cbz	r0, d7e74 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   d7e6c:	f7fd fe46 	bl	d5afc <free>
            wakeupSource_ = nullptr;
   d7e70:	2300      	movs	r3, #0
   d7e72:	6023      	str	r3, [r4, #0]
   d7e74:	bd10      	pop	{r4, pc}

000d7e76 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d7e76:	b510      	push	{r4, lr}
   d7e78:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d7e7a:	f7ff fff3 	bl	d7e64 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d7e7e:	4620      	mov	r0, r4
   d7e80:	bd10      	pop	{r4, pc}
	...

000d7e84 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d7e84:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d7e86:	4c09      	ldr	r4, [pc, #36]	; (d7eac <_GLOBAL__sub_I_System+0x28>)
   d7e88:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d7e8a:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d7e8e:	6020      	str	r0, [r4, #0]
   d7e90:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d7e92:	71a0      	strb	r0, [r4, #6]
   d7e94:	8120      	strh	r0, [r4, #8]
   d7e96:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d7e98:	f7fd fd64 	bl	d5964 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d7e9c:	4620      	mov	r0, r4
   d7e9e:	4a04      	ldr	r2, [pc, #16]	; (d7eb0 <_GLOBAL__sub_I_System+0x2c>)
   d7ea0:	4904      	ldr	r1, [pc, #16]	; (d7eb4 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d7ea2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d7ea6:	f000 ba91 	b.w	d83cc <__aeabi_atexit>
   d7eaa:	bf00      	nop
   d7eac:	2003e588 	.word	0x2003e588
   d7eb0:	2003e1a0 	.word	0x2003e1a0
   d7eb4:	000d7e77 	.word	0x000d7e77

000d7eb8 <_ZL22Refresh_UnixTime_Cachel>:
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d7eb8:	b5f0      	push	{r4, r5, r6, r7, lr}
    unix_time += time_zone_cache;
   d7eba:	4b14      	ldr	r3, [pc, #80]	; (d7f0c <_ZL22Refresh_UnixTime_Cachel+0x54>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d7ebc:	4f14      	ldr	r7, [pc, #80]	; (d7f10 <_ZL22Refresh_UnixTime_Cachel+0x58>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   d7ebe:	681e      	ldr	r6, [r3, #0]
    unix_time += dst_current_cache;
   d7ec0:	4b14      	ldr	r3, [pc, #80]	; (d7f14 <_ZL22Refresh_UnixTime_Cachel+0x5c>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   d7ec2:	4406      	add	r6, r0
    unix_time += dst_current_cache;
   d7ec4:	6818      	ldr	r0, [r3, #0]
    if(unix_time != unix_time_cache)
   d7ec6:	683b      	ldr	r3, [r7, #0]

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
   d7ec8:	4406      	add	r6, r0
    if(unix_time != unix_time_cache)
   d7eca:	429e      	cmp	r6, r3
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d7ecc:	b08b      	sub	sp, #44	; 0x2c
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d7ece:	d01b      	beq.n	d7f08 <_ZL22Refresh_UnixTime_Cachel+0x50>
   d7ed0:	a80a      	add	r0, sp, #40	; 0x28
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
	return *calendar_time;
   d7ed2:	ad01      	add	r5, sp, #4
   d7ed4:	f840 6d28 	str.w	r6, [r0, #-40]!

/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
   d7ed8:	f001 f8e4 	bl	d90a4 <localtime>
	calendar_time->tm_year += 1900;
   d7edc:	6943      	ldr	r3, [r0, #20]
   d7ede:	f203 736c 	addw	r3, r3, #1900	; 0x76c
   d7ee2:	6143      	str	r3, [r0, #20]
	return *calendar_time;
   d7ee4:	4604      	mov	r4, r0
   d7ee6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d7ee8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d7eea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d7eec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d7eee:	f8d4 e000 	ldr.w	lr, [r4]
   d7ef2:	f8c5 e000 	str.w	lr, [r5]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d7ef6:	ad01      	add	r5, sp, #4
   d7ef8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7efa:	4c07      	ldr	r4, [pc, #28]	; (d7f18 <_ZL22Refresh_UnixTime_Cachel+0x60>)
   d7efc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7efe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7f00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   d7f02:	603e      	str	r6, [r7, #0]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d7f04:	f8c4 e000 	str.w	lr, [r4]
            unix_time_cache = unix_time;
    }
}
   d7f08:	b00b      	add	sp, #44	; 0x2c
   d7f0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7f0c:	2003e5c4 	.word	0x2003e5c4
   d7f10:	2003e5c0 	.word	0x2003e5c0
   d7f14:	2003e5bc 	.word	0x2003e5bc
   d7f18:	2003e594 	.word	0x2003e594

000d7f1c <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   d7f1c:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d7f1e:	2000      	movs	r0, #0
   d7f20:	f7fd fd84 	bl	d5a2c <spark_sync_time_pending>
   d7f24:	b128      	cbz	r0, d7f32 <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d7f26:	f7fd fd61 	bl	d59ec <spark_cloud_flag_connected>
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d7f2a:	f080 0001 	eor.w	r0, r0, #1
   d7f2e:	b2c0      	uxtb	r0, r0
   d7f30:	bd08      	pop	{r3, pc}
   d7f32:	2001      	movs	r0, #1
    }
   d7f34:	bd08      	pop	{r3, pc}
	...

000d7f38 <_ZN9TimeClass12hourFormat12El>:
	return hourFormat12(now());
}

/* the hour for the given time in 12 hour format */
int TimeClass::hourFormat12(time_t t)
{
   d7f38:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   d7f3a:	f7ff ffbd 	bl	d7eb8 <_ZL22Refresh_UnixTime_Cachel>
	if(calendar_time_cache.tm_hour == 0)
   d7f3e:	4b04      	ldr	r3, [pc, #16]	; (d7f50 <_ZN9TimeClass12hourFormat12El+0x18>)
   d7f40:	6898      	ldr	r0, [r3, #8]
   d7f42:	b118      	cbz	r0, d7f4c <_ZN9TimeClass12hourFormat12El+0x14>
		return 12;	//midnight
	else if( calendar_time_cache.tm_hour > 12)
   d7f44:	280c      	cmp	r0, #12
   d7f46:	dd02      	ble.n	d7f4e <_ZN9TimeClass12hourFormat12El+0x16>
		return calendar_time_cache.tm_hour - 12 ;
   d7f48:	380c      	subs	r0, #12
   d7f4a:	bd08      	pop	{r3, pc}
/* the hour for the given time in 12 hour format */
int TimeClass::hourFormat12(time_t t)
{
	Refresh_UnixTime_Cache(t);
	if(calendar_time_cache.tm_hour == 0)
		return 12;	//midnight
   d7f4c:	200c      	movs	r0, #12
	else if( calendar_time_cache.tm_hour > 12)
		return calendar_time_cache.tm_hour - 12 ;
	else
		return calendar_time_cache.tm_hour ;
}
   d7f4e:	bd08      	pop	{r3, pc}
   d7f50:	2003e594 	.word	0x2003e594

000d7f54 <_ZN9TimeClass4zoneEf>:
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
	if(GMT_Offset < -12 || GMT_Offset > 14)
   d7f54:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
   d7f58:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d7f5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d7f60:	d40f      	bmi.n	d7f82 <_ZN9TimeClass4zoneEf+0x2e>
   d7f62:	eef2 7a0c 	vmov.f32	s15, #44	; 0x41600000  14.0
   d7f66:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d7f6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d7f6e:	dc08      	bgt.n	d7f82 <_ZN9TimeClass4zoneEf+0x2e>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
   d7f70:	eddf 7a04 	vldr	s15, [pc, #16]	; d7f84 <_ZN9TimeClass4zoneEf+0x30>
   d7f74:	4b04      	ldr	r3, [pc, #16]	; (d7f88 <_ZN9TimeClass4zoneEf+0x34>)
   d7f76:	ee20 0a27 	vmul.f32	s0, s0, s15
   d7f7a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   d7f7e:	ed83 0a00 	vstr	s0, [r3]
   d7f82:	4770      	bx	lr
   d7f84:	45610000 	.word	0x45610000
   d7f88:	2003e5c4 	.word	0x2003e5c4

000d7f8c <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d7f8c:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
   d7f8e:	2000      	movs	r0, #0
   d7f90:	f7fd fbc8 	bl	d5724 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
   d7f94:	4604      	mov	r4, r0
   d7f96:	b968      	cbnz	r0, d7fb4 <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d7f98:	f7fd fcdc 	bl	d5954 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d7f9c:	2801      	cmp	r0, #1
   d7f9e:	d10b      	bne.n	d7fb8 <_ZN9TimeClass7isValidEv+0x2c>
   d7fa0:	4620      	mov	r0, r4
   d7fa2:	f7fd fcff 	bl	d59a4 <system_thread_get_state>
   d7fa6:	b938      	cbnz	r0, d7fb8 <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
   d7fa8:	f7ff ffb8 	bl	d7f1c <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d7fac:	b930      	cbnz	r0, d7fbc <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
   d7fae:	f7fd fd15 	bl	d59dc <spark_process>
   d7fb2:	e7f9      	b.n	d7fa8 <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
   d7fb4:	2001      	movs	r0, #1
   d7fb6:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
   d7fb8:	2000      	movs	r0, #0
   d7fba:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
   d7fbc:	f7ff ffae 	bl	d7f1c <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
   d7fc0:	2000      	movs	r0, #0
   d7fc2:	f7fd fbaf 	bl	d5724 <HAL_RTC_Time_Is_Valid>
   d7fc6:	3000      	adds	r0, #0
   d7fc8:	bf18      	it	ne
   d7fca:	2001      	movne	r0, #1
    }
    return rtcstate;
}
   d7fcc:	bd10      	pop	{r4, pc}

000d7fce <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
   d7fce:	b508      	push	{r3, lr}
    (void)isValid();
   d7fd0:	f7ff ffdc 	bl	d7f8c <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
   d7fd4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
   d7fd8:	f7fd bb9c 	b.w	d5714 <HAL_RTC_Get_UnixTime>

000d7fdc <_ZN9TimeClass12hourFormat12Ev>:
	return calendar_time_cache.tm_hour;
}

/* current hour in 12 hour format */
int TimeClass::hourFormat12()
{
   d7fdc:	b508      	push	{r3, lr}
	return hourFormat12(now());
   d7fde:	f7ff fff6 	bl	d7fce <_ZN9TimeClass3nowEv>
}
   d7fe2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
}

/* current hour in 12 hour format */
int TimeClass::hourFormat12()
{
	return hourFormat12(now());
   d7fe6:	f7ff bfa7 	b.w	d7f38 <_ZN9TimeClass12hourFormat12El>
	...

000d7fec <_ZN9TimeClass6minuteEv>:
	return (hour(t) >= 12);
}

/* current minute */
int TimeClass::minute()
{
   d7fec:	b508      	push	{r3, lr}
	return minute(now());
   d7fee:	f7ff ffee 	bl	d7fce <_ZN9TimeClass3nowEv>
}

/* the minute for the given time */
int TimeClass::minute(time_t t)
{
	Refresh_UnixTime_Cache(t);
   d7ff2:	f7ff ff61 	bl	d7eb8 <_ZL22Refresh_UnixTime_Cachel>

/* current minute */
int TimeClass::minute()
{
	return minute(now());
}
   d7ff6:	4b01      	ldr	r3, [pc, #4]	; (d7ffc <_ZN9TimeClass6minuteEv+0x10>)
   d7ff8:	6858      	ldr	r0, [r3, #4]
   d7ffa:	bd08      	pop	{r3, pc}
   d7ffc:	2003e594 	.word	0x2003e594

000d8000 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d8000:	4b02      	ldr	r3, [pc, #8]	; (d800c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d8002:	681a      	ldr	r2, [r3, #0]
   d8004:	4b02      	ldr	r3, [pc, #8]	; (d8010 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d8006:	601a      	str	r2, [r3, #0]
   d8008:	4770      	bx	lr
   d800a:	bf00      	nop
   d800c:	2003e0b0 	.word	0x2003e0b0
   d8010:	2003e5b8 	.word	0x2003e5b8

000d8014 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d8014:	4770      	bx	lr

000d8016 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d8016:	7441      	strb	r1, [r0, #17]
   d8018:	4770      	bx	lr

000d801a <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d801a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d801c:	7c00      	ldrb	r0, [r0, #16]
   d801e:	f7fd fc29 	bl	d5874 <HAL_USART_Available_Data_For_Write>
}
   d8022:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d8026:	bd08      	pop	{r3, pc}

000d8028 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d8028:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d802a:	7c00      	ldrb	r0, [r0, #16]
   d802c:	f7fd fc02 	bl	d5834 <HAL_USART_Available_Data>
}
   d8030:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d8034:	bd08      	pop	{r3, pc}

000d8036 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d8036:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d8038:	7c00      	ldrb	r0, [r0, #16]
   d803a:	f7fd fc0b 	bl	d5854 <HAL_USART_Peek_Data>
}
   d803e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d8042:	bf28      	it	cs
   d8044:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d8048:	bd08      	pop	{r3, pc}

000d804a <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d804a:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d804c:	7c00      	ldrb	r0, [r0, #16]
   d804e:	f7fd fbf9 	bl	d5844 <HAL_USART_Read_Data>
}
   d8052:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d8056:	bf28      	it	cs
   d8058:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d805c:	bd08      	pop	{r3, pc}

000d805e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d805e:	7c00      	ldrb	r0, [r0, #16]
   d8060:	f7fd bc00 	b.w	d5864 <HAL_USART_Flush_Data>

000d8064 <_ZN11USARTSerialD0Ev>:
   d8064:	b510      	push	{r4, lr}
   d8066:	2114      	movs	r1, #20
   d8068:	4604      	mov	r4, r0
   d806a:	f000 f9b4 	bl	d83d6 <_ZdlPvj>
   d806e:	4620      	mov	r0, r4
   d8070:	bd10      	pop	{r4, pc}

000d8072 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d8072:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d8074:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d8076:	4604      	mov	r4, r0
   d8078:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d807a:	b925      	cbnz	r5, d8086 <_ZN11USARTSerial5writeEh+0x14>
   d807c:	7c00      	ldrb	r0, [r0, #16]
   d807e:	f7fd fbf9 	bl	d5874 <HAL_USART_Available_Data_For_Write>
   d8082:	2800      	cmp	r0, #0
   d8084:	dd05      	ble.n	d8092 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d8086:	4631      	mov	r1, r6
   d8088:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d808a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d808e:	f7fd bbc9 	b.w	d5824 <HAL_USART_Write_Data>
  }
  return 0;
}
   d8092:	4628      	mov	r0, r5
   d8094:	bd70      	pop	{r4, r5, r6, pc}
	...

000d8098 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d8098:	b510      	push	{r4, lr}
   d809a:	4604      	mov	r4, r0
   d809c:	4608      	mov	r0, r1
   d809e:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d80a0:	2200      	movs	r2, #0
   d80a2:	6062      	str	r2, [r4, #4]
   d80a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d80a8:	60a2      	str	r2, [r4, #8]
   d80aa:	4a05      	ldr	r2, [pc, #20]	; (d80c0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d80ac:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d80ae:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d80b0:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d80b2:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d80b4:	461a      	mov	r2, r3
   d80b6:	f7fd fba5 	bl	d5804 <HAL_USART_Init>
}
   d80ba:	4620      	mov	r0, r4
   d80bc:	bd10      	pop	{r4, pc}
   d80be:	bf00      	nop
   d80c0:	000dc2d0 	.word	0x000dc2d0

000d80c4 <_ZN11USARTSerial5beginEmm>:
  begin(baud, SERIAL_8N1);
}

void USARTSerial::begin(unsigned long baud, uint32_t config)
{
  HAL_USART_BeginConfig(_serial, baud, config, 0);
   d80c4:	2300      	movs	r3, #0
   d80c6:	7c00      	ldrb	r0, [r0, #16]
   d80c8:	f7fd bbdc 	b.w	d5884 <HAL_USART_BeginConfig>

000d80cc <_ZN11USARTSerial5beginEm>:
}
// Public Methods //////////////////////////////////////////////////////////////

void USARTSerial::begin(unsigned long baud)
{
  begin(baud, SERIAL_8N1);
   d80cc:	2200      	movs	r2, #0
   d80ce:	f7ff bff9 	b.w	d80c4 <_ZN11USARTSerial5beginEmm>

000d80d2 <_ZN11USARTSerial3endEv>:
  HAL_USART_BeginConfig(_serial, baud, config, 0);
}

void USARTSerial::end()
{
  HAL_USART_End(_serial);
   d80d2:	7c00      	ldrb	r0, [r0, #16]
   d80d4:	f7fd bb9e 	b.w	d5814 <HAL_USART_End>

000d80d8 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d80d8:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d80da:	4d0c      	ldr	r5, [pc, #48]	; (d810c <_Z22__fetch_global_Serial1v+0x34>)
   d80dc:	6829      	ldr	r1, [r5, #0]
   d80de:	f011 0401 	ands.w	r4, r1, #1
   d80e2:	d111      	bne.n	d8108 <_Z22__fetch_global_Serial1v+0x30>
   d80e4:	4628      	mov	r0, r5
   d80e6:	f7fb ffe9 	bl	d40bc <__cxa_guard_acquire>
   d80ea:	b168      	cbz	r0, d8108 <_Z22__fetch_global_Serial1v+0x30>
   d80ec:	4a08      	ldr	r2, [pc, #32]	; (d8110 <_Z22__fetch_global_Serial1v+0x38>)
   d80ee:	4b09      	ldr	r3, [pc, #36]	; (d8114 <_Z22__fetch_global_Serial1v+0x3c>)
   d80f0:	4809      	ldr	r0, [pc, #36]	; (d8118 <_Z22__fetch_global_Serial1v+0x40>)
   d80f2:	4621      	mov	r1, r4
   d80f4:	f7ff ffd0 	bl	d8098 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d80f8:	4628      	mov	r0, r5
   d80fa:	f7fb ffe4 	bl	d40c6 <__cxa_guard_release>
   d80fe:	4a07      	ldr	r2, [pc, #28]	; (d811c <_Z22__fetch_global_Serial1v+0x44>)
   d8100:	4907      	ldr	r1, [pc, #28]	; (d8120 <_Z22__fetch_global_Serial1v+0x48>)
   d8102:	4805      	ldr	r0, [pc, #20]	; (d8118 <_Z22__fetch_global_Serial1v+0x40>)
   d8104:	f000 f962 	bl	d83cc <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d8108:	4803      	ldr	r0, [pc, #12]	; (d8118 <_Z22__fetch_global_Serial1v+0x40>)
   d810a:	bd38      	pop	{r3, r4, r5, pc}
   d810c:	2003e660 	.word	0x2003e660
   d8110:	2003e664 	.word	0x2003e664
   d8114:	2003e5dc 	.word	0x2003e5dc
   d8118:	2003e5c8 	.word	0x2003e5c8
   d811c:	2003e1a0 	.word	0x2003e1a0
   d8120:	000d8015 	.word	0x000d8015

000d8124 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d8124:	7441      	strb	r1, [r0, #17]
   d8126:	4770      	bx	lr

000d8128 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d8128:	4770      	bx	lr

000d812a <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d812a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d812c:	2100      	movs	r1, #0
   d812e:	7c00      	ldrb	r0, [r0, #16]
   d8130:	f7fd fbd8 	bl	d58e4 <HAL_USB_USART_Receive_Data>
}
   d8134:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d8138:	bf28      	it	cs
   d813a:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d813e:	bd08      	pop	{r3, pc}

000d8140 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d8140:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d8142:	2101      	movs	r1, #1
   d8144:	7c00      	ldrb	r0, [r0, #16]
   d8146:	f7fd fbcd 	bl	d58e4 <HAL_USB_USART_Receive_Data>
}
   d814a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d814e:	bf28      	it	cs
   d8150:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d8154:	bd08      	pop	{r3, pc}

000d8156 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d8156:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d8158:	7c00      	ldrb	r0, [r0, #16]
   d815a:	f7fd fbbb 	bl	d58d4 <HAL_USB_USART_Available_Data_For_Write>
}
   d815e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d8162:	bd08      	pop	{r3, pc}

000d8164 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d8164:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d8166:	7c00      	ldrb	r0, [r0, #16]
   d8168:	f7fd fbac 	bl	d58c4 <HAL_USB_USART_Available_Data>
}
   d816c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d8170:	bd08      	pop	{r3, pc}

000d8172 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d8172:	7c00      	ldrb	r0, [r0, #16]
   d8174:	f7fd bbc6 	b.w	d5904 <HAL_USB_USART_Flush_Data>

000d8178 <_ZN9USBSerialD0Ev>:
   d8178:	b510      	push	{r4, lr}
   d817a:	2114      	movs	r1, #20
   d817c:	4604      	mov	r4, r0
   d817e:	f000 f92a 	bl	d83d6 <_ZdlPvj>
   d8182:	4620      	mov	r0, r4
   d8184:	bd10      	pop	{r4, pc}

000d8186 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d8186:	b538      	push	{r3, r4, r5, lr}
   d8188:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d818a:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d818c:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d818e:	f7fd fba1 	bl	d58d4 <HAL_USB_USART_Available_Data_For_Write>
   d8192:	2800      	cmp	r0, #0
   d8194:	dc01      	bgt.n	d819a <_ZN9USBSerial5writeEh+0x14>
   d8196:	7c60      	ldrb	r0, [r4, #17]
   d8198:	b128      	cbz	r0, d81a6 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d819a:	4629      	mov	r1, r5
   d819c:	7c20      	ldrb	r0, [r4, #16]
   d819e:	f7fd fba9 	bl	d58f4 <HAL_USB_USART_Send_Data>
   d81a2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d81a6:	bd38      	pop	{r3, r4, r5, pc}

000d81a8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d81a8:	b510      	push	{r4, lr}
   d81aa:	4604      	mov	r4, r0
   d81ac:	2300      	movs	r3, #0
   d81ae:	6063      	str	r3, [r4, #4]
   d81b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d81b4:	60a3      	str	r3, [r4, #8]
   d81b6:	4b05      	ldr	r3, [pc, #20]	; (d81cc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d81b8:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d81ba:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d81bc:	4608      	mov	r0, r1
{
  _serial = serial;
   d81be:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d81c0:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d81c2:	4611      	mov	r1, r2
   d81c4:	f7fd fb66 	bl	d5894 <HAL_USB_USART_Init>
}
   d81c8:	4620      	mov	r0, r4
   d81ca:	bd10      	pop	{r4, pc}
   d81cc:	000dc300 	.word	0x000dc300

000d81d0 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d81d0:	2200      	movs	r2, #0
   d81d2:	7c00      	ldrb	r0, [r0, #16]
   d81d4:	f7fd bb66 	b.w	d58a4 <HAL_USB_USART_Begin>

000d81d8 <_ZN9USBSerial3endEv>:
}

void USBSerial::end()
{
    HAL_USB_USART_End(_serial);
   d81d8:	7c00      	ldrb	r0, [r0, #16]
   d81da:	f7fd bb6b 	b.w	d58b4 <HAL_USB_USART_End>

000d81de <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d81de:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d81e0:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d81e2:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d81e4:	2100      	movs	r1, #0
   d81e6:	f001 f87f 	bl	d92e8 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d81ea:	4620      	mov	r0, r4
   d81ec:	bd10      	pop	{r4, pc}
	...

000d81f0 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d81f0:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d81f2:	4d0e      	ldr	r5, [pc, #56]	; (d822c <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d81f4:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d81f6:	a801      	add	r0, sp, #4
   d81f8:	f7ff fff1 	bl	d81de <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d81fc:	6829      	ldr	r1, [r5, #0]
   d81fe:	f011 0401 	ands.w	r4, r1, #1
   d8202:	d110      	bne.n	d8226 <_Z16_fetch_usbserialv+0x36>
   d8204:	4628      	mov	r0, r5
   d8206:	f7fb ff59 	bl	d40bc <__cxa_guard_acquire>
   d820a:	b160      	cbz	r0, d8226 <_Z16_fetch_usbserialv+0x36>
   d820c:	aa01      	add	r2, sp, #4
   d820e:	4621      	mov	r1, r4
   d8210:	4807      	ldr	r0, [pc, #28]	; (d8230 <_Z16_fetch_usbserialv+0x40>)
   d8212:	f7ff ffc9 	bl	d81a8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d8216:	4628      	mov	r0, r5
   d8218:	f7fb ff55 	bl	d40c6 <__cxa_guard_release>
   d821c:	4a05      	ldr	r2, [pc, #20]	; (d8234 <_Z16_fetch_usbserialv+0x44>)
   d821e:	4906      	ldr	r1, [pc, #24]	; (d8238 <_Z16_fetch_usbserialv+0x48>)
   d8220:	4803      	ldr	r0, [pc, #12]	; (d8230 <_Z16_fetch_usbserialv+0x40>)
   d8222:	f000 f8d3 	bl	d83cc <__aeabi_atexit>
	return _usbserial;
}
   d8226:	4802      	ldr	r0, [pc, #8]	; (d8230 <_Z16_fetch_usbserialv+0x40>)
   d8228:	b007      	add	sp, #28
   d822a:	bd30      	pop	{r4, r5, pc}
   d822c:	2003e6e8 	.word	0x2003e6e8
   d8230:	2003e6ec 	.word	0x2003e6ec
   d8234:	2003e1a0 	.word	0x2003e1a0
   d8238:	000d8129 	.word	0x000d8129

000d823c <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d823c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d823e:	4b0c      	ldr	r3, [pc, #48]	; (d8270 <serialEventRun+0x34>)
   d8240:	b133      	cbz	r3, d8250 <serialEventRun+0x14>
   d8242:	f7ff ffd5 	bl	d81f0 <_Z16_fetch_usbserialv>
   d8246:	6803      	ldr	r3, [r0, #0]
   d8248:	691b      	ldr	r3, [r3, #16]
   d824a:	4798      	blx	r3
   d824c:	2800      	cmp	r0, #0
   d824e:	dc09      	bgt.n	d8264 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d8250:	4b08      	ldr	r3, [pc, #32]	; (d8274 <serialEventRun+0x38>)
   d8252:	b163      	cbz	r3, d826e <serialEventRun+0x32>
   d8254:	f7ff ff40 	bl	d80d8 <_Z22__fetch_global_Serial1v>
   d8258:	6803      	ldr	r3, [r0, #0]
   d825a:	691b      	ldr	r3, [r3, #16]
   d825c:	4798      	blx	r3
   d825e:	2800      	cmp	r0, #0
   d8260:	dc03      	bgt.n	d826a <serialEventRun+0x2e>
   d8262:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d8264:	f3af 8000 	nop.w
   d8268:	e7f2      	b.n	d8250 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d826a:	f3af 8000 	nop.w
   d826e:	bd08      	pop	{r3, pc}
	...

000d8278 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d8278:	b508      	push	{r3, lr}
	serialEventRun();
   d827a:	f7ff ffdf 	bl	d823c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d827e:	f7fd fa41 	bl	d5704 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d8282:	4b01      	ldr	r3, [pc, #4]	; (d8288 <_post_loop+0x10>)
   d8284:	6018      	str	r0, [r3, #0]
   d8286:	bd08      	pop	{r3, pc}
   d8288:	2003e708 	.word	0x2003e708

000d828c <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d828c:	4802      	ldr	r0, [pc, #8]	; (d8298 <_Z33system_initialize_user_backup_ramv+0xc>)
   d828e:	4a03      	ldr	r2, [pc, #12]	; (d829c <_Z33system_initialize_user_backup_ramv+0x10>)
   d8290:	4903      	ldr	r1, [pc, #12]	; (d82a0 <_Z33system_initialize_user_backup_ramv+0x14>)
   d8292:	1a12      	subs	r2, r2, r0
   d8294:	f001 b802 	b.w	d929c <memcpy>
   d8298:	2003f400 	.word	0x2003f400
   d829c:	2003f404 	.word	0x2003f404
   d82a0:	000dc6d0 	.word	0x000dc6d0

000d82a4 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d82a4:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d82a6:	2300      	movs	r3, #0
   d82a8:	9300      	str	r3, [sp, #0]
   d82aa:	461a      	mov	r2, r3
   d82ac:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d82b0:	f7fd fb8a 	bl	d59c8 <system_ctrl_set_result>
}
   d82b4:	b003      	add	sp, #12
   d82b6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d82bc <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d82bc:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d82be:	8843      	ldrh	r3, [r0, #2]
   d82c0:	2b0a      	cmp	r3, #10
   d82c2:	d008      	beq.n	d82d6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d82c4:	2b50      	cmp	r3, #80	; 0x50
   d82c6:	d109      	bne.n	d82dc <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d82c8:	4b09      	ldr	r3, [pc, #36]	; (d82f0 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d82ca:	681b      	ldr	r3, [r3, #0]
   d82cc:	b13b      	cbz	r3, d82de <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d82ce:	b003      	add	sp, #12
   d82d0:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d82d4:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d82d6:	f7ff ffe5 	bl	d82a4 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d82da:	e006      	b.n	d82ea <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d82dc:	2300      	movs	r3, #0
   d82de:	9300      	str	r3, [sp, #0]
   d82e0:	461a      	mov	r2, r3
   d82e2:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d82e6:	f7fd fb6f 	bl	d59c8 <system_ctrl_set_result>
        break;
    }
}
   d82ea:	b003      	add	sp, #12
   d82ec:	f85d fb04 	ldr.w	pc, [sp], #4
   d82f0:	2003e700 	.word	0x2003e700

000d82f4 <module_user_init_hook>:

void module_user_init_hook()
{
   d82f4:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d82f6:	4c10      	ldr	r4, [pc, #64]	; (d8338 <module_user_init_hook+0x44>)
   d82f8:	4d10      	ldr	r5, [pc, #64]	; (d833c <module_user_init_hook+0x48>)
   d82fa:	6823      	ldr	r3, [r4, #0]
   d82fc:	42ab      	cmp	r3, r5
   d82fe:	4b10      	ldr	r3, [pc, #64]	; (d8340 <module_user_init_hook+0x4c>)
   d8300:	bf0c      	ite	eq
   d8302:	2201      	moveq	r2, #1
   d8304:	2200      	movne	r2, #0
   d8306:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d8308:	d002      	beq.n	d8310 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d830a:	f7ff ffbf 	bl	d828c <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d830e:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d8310:	f7fd f9e8 	bl	d56e4 <HAL_RNG_GetRandomNumber>
   d8314:	4604      	mov	r4, r0
    srand(seed);
   d8316:	f000 ffef 	bl	d92f8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d831a:	4b0a      	ldr	r3, [pc, #40]	; (d8344 <module_user_init_hook+0x50>)
   d831c:	b113      	cbz	r3, d8324 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d831e:	4620      	mov	r0, r4
   d8320:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d8324:	2100      	movs	r1, #0
   d8326:	4807      	ldr	r0, [pc, #28]	; (d8344 <module_user_init_hook+0x50>)
   d8328:	f7fd fb88 	bl	d5a3c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d832c:	2100      	movs	r1, #0
   d832e:	4806      	ldr	r0, [pc, #24]	; (d8348 <module_user_init_hook+0x54>)
}
   d8330:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d8334:	f7fd bb3e 	b.w	d59b4 <system_ctrl_set_app_request_handler>
   d8338:	2003f400 	.word	0x2003f400
   d833c:	9a271c1e 	.word	0x9a271c1e
   d8340:	2003e704 	.word	0x2003e704
   d8344:	00000000 	.word	0x00000000
   d8348:	000d82bd 	.word	0x000d82bd

000d834c <_Z17acquireWireBufferv>:
   d834c:	b570      	push	{r4, r5, r6, lr}
   d834e:	4604      	mov	r4, r0
   d8350:	2514      	movs	r5, #20
   d8352:	462a      	mov	r2, r5
   d8354:	4e09      	ldr	r6, [pc, #36]	; (d837c <_Z17acquireWireBufferv+0x30>)
   d8356:	2100      	movs	r1, #0
   d8358:	f000 ffc6 	bl	d92e8 <memset>
   d835c:	8025      	strh	r5, [r4, #0]
   d835e:	2520      	movs	r5, #32
   d8360:	4631      	mov	r1, r6
   d8362:	60a5      	str	r5, [r4, #8]
   d8364:	6125      	str	r5, [r4, #16]
   d8366:	4628      	mov	r0, r5
   d8368:	f000 f84f 	bl	d840a <_ZnajRKSt9nothrow_t>
   d836c:	4631      	mov	r1, r6
   d836e:	6060      	str	r0, [r4, #4]
   d8370:	4628      	mov	r0, r5
   d8372:	f000 f84a 	bl	d840a <_ZnajRKSt9nothrow_t>
   d8376:	60e0      	str	r0, [r4, #12]
   d8378:	4620      	mov	r0, r4
   d837a:	bd70      	pop	{r4, r5, r6, pc}
   d837c:	000dc328 	.word	0x000dc328

000d8380 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d8380:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d8382:	4d0e      	ldr	r5, [pc, #56]	; (d83bc <_Z19__fetch_global_Wirev+0x3c>)
   d8384:	6829      	ldr	r1, [r5, #0]
   d8386:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d838a:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d838c:	d113      	bne.n	d83b6 <_Z19__fetch_global_Wirev+0x36>
   d838e:	4628      	mov	r0, r5
   d8390:	f7fb fe94 	bl	d40bc <__cxa_guard_acquire>
   d8394:	b178      	cbz	r0, d83b6 <_Z19__fetch_global_Wirev+0x36>
   d8396:	a801      	add	r0, sp, #4
   d8398:	f7ff ffd8 	bl	d834c <_Z17acquireWireBufferv>
   d839c:	aa01      	add	r2, sp, #4
   d839e:	4621      	mov	r1, r4
   d83a0:	4807      	ldr	r0, [pc, #28]	; (d83c0 <_Z19__fetch_global_Wirev+0x40>)
   d83a2:	f7fd fff7 	bl	d6394 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d83a6:	4628      	mov	r0, r5
   d83a8:	f7fb fe8d 	bl	d40c6 <__cxa_guard_release>
   d83ac:	4a05      	ldr	r2, [pc, #20]	; (d83c4 <_Z19__fetch_global_Wirev+0x44>)
   d83ae:	4906      	ldr	r1, [pc, #24]	; (d83c8 <_Z19__fetch_global_Wirev+0x48>)
   d83b0:	4803      	ldr	r0, [pc, #12]	; (d83c0 <_Z19__fetch_global_Wirev+0x40>)
   d83b2:	f000 f80b 	bl	d83cc <__aeabi_atexit>
	return wire;
}
   d83b6:	4802      	ldr	r0, [pc, #8]	; (d83c0 <_Z19__fetch_global_Wirev+0x40>)
   d83b8:	b007      	add	sp, #28
   d83ba:	bd30      	pop	{r4, r5, pc}
   d83bc:	2003e70c 	.word	0x2003e70c
   d83c0:	2003e710 	.word	0x2003e710
   d83c4:	2003e1a0 	.word	0x2003e1a0
   d83c8:	000d633d 	.word	0x000d633d

000d83cc <__aeabi_atexit>:
   d83cc:	460b      	mov	r3, r1
   d83ce:	4601      	mov	r1, r0
   d83d0:	4618      	mov	r0, r3
   d83d2:	f000 be59 	b.w	d9088 <__cxa_atexit>

000d83d6 <_ZdlPvj>:
   d83d6:	f7fb be62 	b.w	d409e <_ZdlPv>
	...

000d83dc <_ZSt15get_new_handlerv>:
   d83dc:	4b02      	ldr	r3, [pc, #8]	; (d83e8 <_ZSt15get_new_handlerv+0xc>)
   d83de:	6818      	ldr	r0, [r3, #0]
   d83e0:	f3bf 8f5f 	dmb	sy
   d83e4:	4770      	bx	lr
   d83e6:	bf00      	nop
   d83e8:	2003e724 	.word	0x2003e724

000d83ec <_ZnwjRKSt9nothrow_t>:
   d83ec:	b510      	push	{r4, lr}
   d83ee:	2800      	cmp	r0, #0
   d83f0:	bf14      	ite	ne
   d83f2:	4604      	movne	r4, r0
   d83f4:	2401      	moveq	r4, #1
   d83f6:	4620      	mov	r0, r4
   d83f8:	f7fd fb78 	bl	d5aec <malloc>
   d83fc:	b920      	cbnz	r0, d8408 <_ZnwjRKSt9nothrow_t+0x1c>
   d83fe:	f7ff ffed 	bl	d83dc <_ZSt15get_new_handlerv>
   d8402:	b108      	cbz	r0, d8408 <_ZnwjRKSt9nothrow_t+0x1c>
   d8404:	4780      	blx	r0
   d8406:	e7f6      	b.n	d83f6 <_ZnwjRKSt9nothrow_t+0xa>
   d8408:	bd10      	pop	{r4, pc}

000d840a <_ZnajRKSt9nothrow_t>:
   d840a:	f7ff bfef 	b.w	d83ec <_ZnwjRKSt9nothrow_t>

000d840e <_ZSt25__throw_bad_function_callv>:
   d840e:	b508      	push	{r3, lr}
   d8410:	f7fd fbac 	bl	d5b6c <abort>

000d8414 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d8414:	4b24      	ldr	r3, [pc, #144]	; (d84a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d8416:	681a      	ldr	r2, [r3, #0]
   d8418:	07d0      	lsls	r0, r2, #31
   d841a:	bf5c      	itt	pl
   d841c:	2201      	movpl	r2, #1
   d841e:	601a      	strpl	r2, [r3, #0]
   d8420:	4b22      	ldr	r3, [pc, #136]	; (d84ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d8422:	681a      	ldr	r2, [r3, #0]
   d8424:	07d1      	lsls	r1, r2, #31
   d8426:	bf5c      	itt	pl
   d8428:	2201      	movpl	r2, #1
   d842a:	601a      	strpl	r2, [r3, #0]
   d842c:	4b20      	ldr	r3, [pc, #128]	; (d84b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d842e:	681a      	ldr	r2, [r3, #0]
   d8430:	07d2      	lsls	r2, r2, #31
   d8432:	bf5c      	itt	pl
   d8434:	2201      	movpl	r2, #1
   d8436:	601a      	strpl	r2, [r3, #0]
   d8438:	4b1e      	ldr	r3, [pc, #120]	; (d84b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d843a:	681a      	ldr	r2, [r3, #0]
   d843c:	07d0      	lsls	r0, r2, #31
   d843e:	bf5c      	itt	pl
   d8440:	2201      	movpl	r2, #1
   d8442:	601a      	strpl	r2, [r3, #0]
   d8444:	4b1c      	ldr	r3, [pc, #112]	; (d84b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d8446:	681a      	ldr	r2, [r3, #0]
   d8448:	07d1      	lsls	r1, r2, #31
   d844a:	bf5c      	itt	pl
   d844c:	2201      	movpl	r2, #1
   d844e:	601a      	strpl	r2, [r3, #0]
   d8450:	4b1a      	ldr	r3, [pc, #104]	; (d84bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d8452:	681a      	ldr	r2, [r3, #0]
   d8454:	07d2      	lsls	r2, r2, #31
   d8456:	bf5c      	itt	pl
   d8458:	2201      	movpl	r2, #1
   d845a:	601a      	strpl	r2, [r3, #0]
   d845c:	4b18      	ldr	r3, [pc, #96]	; (d84c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d845e:	681a      	ldr	r2, [r3, #0]
   d8460:	07d0      	lsls	r0, r2, #31
   d8462:	bf5c      	itt	pl
   d8464:	2201      	movpl	r2, #1
   d8466:	601a      	strpl	r2, [r3, #0]
   d8468:	4b16      	ldr	r3, [pc, #88]	; (d84c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d846a:	681a      	ldr	r2, [r3, #0]
   d846c:	07d1      	lsls	r1, r2, #31
   d846e:	bf5c      	itt	pl
   d8470:	2201      	movpl	r2, #1
   d8472:	601a      	strpl	r2, [r3, #0]
   d8474:	4b14      	ldr	r3, [pc, #80]	; (d84c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d8476:	681a      	ldr	r2, [r3, #0]
   d8478:	07d2      	lsls	r2, r2, #31
   d847a:	bf5c      	itt	pl
   d847c:	2201      	movpl	r2, #1
   d847e:	601a      	strpl	r2, [r3, #0]
   d8480:	4b12      	ldr	r3, [pc, #72]	; (d84cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d8482:	681a      	ldr	r2, [r3, #0]
   d8484:	07d0      	lsls	r0, r2, #31
   d8486:	bf5c      	itt	pl
   d8488:	2201      	movpl	r2, #1
   d848a:	601a      	strpl	r2, [r3, #0]
   d848c:	4b10      	ldr	r3, [pc, #64]	; (d84d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d848e:	681a      	ldr	r2, [r3, #0]
   d8490:	07d1      	lsls	r1, r2, #31
   d8492:	bf5c      	itt	pl
   d8494:	2201      	movpl	r2, #1
   d8496:	601a      	strpl	r2, [r3, #0]
   d8498:	4b0e      	ldr	r3, [pc, #56]	; (d84d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d849a:	681a      	ldr	r2, [r3, #0]
   d849c:	07d2      	lsls	r2, r2, #31
   d849e:	bf5c      	itt	pl
   d84a0:	2201      	movpl	r2, #1
   d84a2:	601a      	strpl	r2, [r3, #0]
   d84a4:	4770      	bx	lr
   d84a6:	bf00      	nop
   d84a8:	2003e754 	.word	0x2003e754
   d84ac:	2003e750 	.word	0x2003e750
   d84b0:	2003e74c 	.word	0x2003e74c
   d84b4:	2003e748 	.word	0x2003e748
   d84b8:	2003e744 	.word	0x2003e744
   d84bc:	2003e740 	.word	0x2003e740
   d84c0:	2003e73c 	.word	0x2003e73c
   d84c4:	2003e738 	.word	0x2003e738
   d84c8:	2003e734 	.word	0x2003e734
   d84cc:	2003e730 	.word	0x2003e730
   d84d0:	2003e72c 	.word	0x2003e72c
   d84d4:	2003e728 	.word	0x2003e728

000d84d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d84d8:	4b18      	ldr	r3, [pc, #96]	; (d853c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d84da:	681a      	ldr	r2, [r3, #0]
   d84dc:	07d1      	lsls	r1, r2, #31
   d84de:	bf5c      	itt	pl
   d84e0:	2201      	movpl	r2, #1
   d84e2:	601a      	strpl	r2, [r3, #0]
   d84e4:	4b16      	ldr	r3, [pc, #88]	; (d8540 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d84e6:	681a      	ldr	r2, [r3, #0]
   d84e8:	07d2      	lsls	r2, r2, #31
   d84ea:	bf5c      	itt	pl
   d84ec:	2201      	movpl	r2, #1
   d84ee:	601a      	strpl	r2, [r3, #0]
   d84f0:	4b14      	ldr	r3, [pc, #80]	; (d8544 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d84f2:	681a      	ldr	r2, [r3, #0]
   d84f4:	07d0      	lsls	r0, r2, #31
   d84f6:	bf5c      	itt	pl
   d84f8:	2201      	movpl	r2, #1
   d84fa:	601a      	strpl	r2, [r3, #0]
   d84fc:	4b12      	ldr	r3, [pc, #72]	; (d8548 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d84fe:	681a      	ldr	r2, [r3, #0]
   d8500:	07d1      	lsls	r1, r2, #31
   d8502:	bf5c      	itt	pl
   d8504:	2201      	movpl	r2, #1
   d8506:	601a      	strpl	r2, [r3, #0]
   d8508:	4b10      	ldr	r3, [pc, #64]	; (d854c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d850a:	681a      	ldr	r2, [r3, #0]
   d850c:	07d2      	lsls	r2, r2, #31
   d850e:	bf5c      	itt	pl
   d8510:	2201      	movpl	r2, #1
   d8512:	601a      	strpl	r2, [r3, #0]
   d8514:	4b0e      	ldr	r3, [pc, #56]	; (d8550 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d8516:	681a      	ldr	r2, [r3, #0]
   d8518:	07d0      	lsls	r0, r2, #31
   d851a:	bf5c      	itt	pl
   d851c:	2201      	movpl	r2, #1
   d851e:	601a      	strpl	r2, [r3, #0]
   d8520:	4b0c      	ldr	r3, [pc, #48]	; (d8554 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d8522:	681a      	ldr	r2, [r3, #0]
   d8524:	07d1      	lsls	r1, r2, #31
   d8526:	bf5c      	itt	pl
   d8528:	2201      	movpl	r2, #1
   d852a:	601a      	strpl	r2, [r3, #0]
   d852c:	4b0a      	ldr	r3, [pc, #40]	; (d8558 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d852e:	681a      	ldr	r2, [r3, #0]
   d8530:	07d2      	lsls	r2, r2, #31
   d8532:	bf5c      	itt	pl
   d8534:	2201      	movpl	r2, #1
   d8536:	601a      	strpl	r2, [r3, #0]
   d8538:	4770      	bx	lr
   d853a:	bf00      	nop
   d853c:	2003e774 	.word	0x2003e774
   d8540:	2003e770 	.word	0x2003e770
   d8544:	2003e76c 	.word	0x2003e76c
   d8548:	2003e768 	.word	0x2003e768
   d854c:	2003e764 	.word	0x2003e764
   d8550:	2003e760 	.word	0x2003e760
   d8554:	2003e75c 	.word	0x2003e75c
   d8558:	2003e758 	.word	0x2003e758

000d855c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d855c:	4b18      	ldr	r3, [pc, #96]	; (d85c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d855e:	681a      	ldr	r2, [r3, #0]
   d8560:	07d1      	lsls	r1, r2, #31
   d8562:	bf5c      	itt	pl
   d8564:	2201      	movpl	r2, #1
   d8566:	601a      	strpl	r2, [r3, #0]
   d8568:	4b16      	ldr	r3, [pc, #88]	; (d85c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d856a:	681a      	ldr	r2, [r3, #0]
   d856c:	07d2      	lsls	r2, r2, #31
   d856e:	bf5c      	itt	pl
   d8570:	2201      	movpl	r2, #1
   d8572:	601a      	strpl	r2, [r3, #0]
   d8574:	4b14      	ldr	r3, [pc, #80]	; (d85c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d8576:	681a      	ldr	r2, [r3, #0]
   d8578:	07d0      	lsls	r0, r2, #31
   d857a:	bf5c      	itt	pl
   d857c:	2201      	movpl	r2, #1
   d857e:	601a      	strpl	r2, [r3, #0]
   d8580:	4b12      	ldr	r3, [pc, #72]	; (d85cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d8582:	681a      	ldr	r2, [r3, #0]
   d8584:	07d1      	lsls	r1, r2, #31
   d8586:	bf5c      	itt	pl
   d8588:	2201      	movpl	r2, #1
   d858a:	601a      	strpl	r2, [r3, #0]
   d858c:	4b10      	ldr	r3, [pc, #64]	; (d85d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d858e:	681a      	ldr	r2, [r3, #0]
   d8590:	07d2      	lsls	r2, r2, #31
   d8592:	bf5c      	itt	pl
   d8594:	2201      	movpl	r2, #1
   d8596:	601a      	strpl	r2, [r3, #0]
   d8598:	4b0e      	ldr	r3, [pc, #56]	; (d85d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d859a:	681a      	ldr	r2, [r3, #0]
   d859c:	07d0      	lsls	r0, r2, #31
   d859e:	bf5c      	itt	pl
   d85a0:	2201      	movpl	r2, #1
   d85a2:	601a      	strpl	r2, [r3, #0]
   d85a4:	4b0c      	ldr	r3, [pc, #48]	; (d85d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d85a6:	681a      	ldr	r2, [r3, #0]
   d85a8:	07d1      	lsls	r1, r2, #31
   d85aa:	bf5c      	itt	pl
   d85ac:	2201      	movpl	r2, #1
   d85ae:	601a      	strpl	r2, [r3, #0]
   d85b0:	4b0a      	ldr	r3, [pc, #40]	; (d85dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d85b2:	681a      	ldr	r2, [r3, #0]
   d85b4:	07d2      	lsls	r2, r2, #31
   d85b6:	bf5c      	itt	pl
   d85b8:	2201      	movpl	r2, #1
   d85ba:	601a      	strpl	r2, [r3, #0]
   d85bc:	4770      	bx	lr
   d85be:	bf00      	nop
   d85c0:	2003e794 	.word	0x2003e794
   d85c4:	2003e790 	.word	0x2003e790
   d85c8:	2003e78c 	.word	0x2003e78c
   d85cc:	2003e788 	.word	0x2003e788
   d85d0:	2003e784 	.word	0x2003e784
   d85d4:	2003e780 	.word	0x2003e780
   d85d8:	2003e77c 	.word	0x2003e77c
   d85dc:	2003e778 	.word	0x2003e778

000d85e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d85e0:	4b24      	ldr	r3, [pc, #144]	; (d8674 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d85e2:	681a      	ldr	r2, [r3, #0]
   d85e4:	07d0      	lsls	r0, r2, #31
   d85e6:	bf5c      	itt	pl
   d85e8:	2201      	movpl	r2, #1
   d85ea:	601a      	strpl	r2, [r3, #0]
   d85ec:	4b22      	ldr	r3, [pc, #136]	; (d8678 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d85ee:	681a      	ldr	r2, [r3, #0]
   d85f0:	07d1      	lsls	r1, r2, #31
   d85f2:	bf5c      	itt	pl
   d85f4:	2201      	movpl	r2, #1
   d85f6:	601a      	strpl	r2, [r3, #0]
   d85f8:	4b20      	ldr	r3, [pc, #128]	; (d867c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d85fa:	681a      	ldr	r2, [r3, #0]
   d85fc:	07d2      	lsls	r2, r2, #31
   d85fe:	bf5c      	itt	pl
   d8600:	2201      	movpl	r2, #1
   d8602:	601a      	strpl	r2, [r3, #0]
   d8604:	4b1e      	ldr	r3, [pc, #120]	; (d8680 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d8606:	681a      	ldr	r2, [r3, #0]
   d8608:	07d0      	lsls	r0, r2, #31
   d860a:	bf5c      	itt	pl
   d860c:	2201      	movpl	r2, #1
   d860e:	601a      	strpl	r2, [r3, #0]
   d8610:	4b1c      	ldr	r3, [pc, #112]	; (d8684 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d8612:	681a      	ldr	r2, [r3, #0]
   d8614:	07d1      	lsls	r1, r2, #31
   d8616:	bf5c      	itt	pl
   d8618:	2201      	movpl	r2, #1
   d861a:	601a      	strpl	r2, [r3, #0]
   d861c:	4b1a      	ldr	r3, [pc, #104]	; (d8688 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d861e:	681a      	ldr	r2, [r3, #0]
   d8620:	07d2      	lsls	r2, r2, #31
   d8622:	bf5c      	itt	pl
   d8624:	2201      	movpl	r2, #1
   d8626:	601a      	strpl	r2, [r3, #0]
   d8628:	4b18      	ldr	r3, [pc, #96]	; (d868c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d862a:	681a      	ldr	r2, [r3, #0]
   d862c:	07d0      	lsls	r0, r2, #31
   d862e:	bf5c      	itt	pl
   d8630:	2201      	movpl	r2, #1
   d8632:	601a      	strpl	r2, [r3, #0]
   d8634:	4b16      	ldr	r3, [pc, #88]	; (d8690 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d8636:	681a      	ldr	r2, [r3, #0]
   d8638:	07d1      	lsls	r1, r2, #31
   d863a:	bf5c      	itt	pl
   d863c:	2201      	movpl	r2, #1
   d863e:	601a      	strpl	r2, [r3, #0]
   d8640:	4b14      	ldr	r3, [pc, #80]	; (d8694 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d8642:	681a      	ldr	r2, [r3, #0]
   d8644:	07d2      	lsls	r2, r2, #31
   d8646:	bf5c      	itt	pl
   d8648:	2201      	movpl	r2, #1
   d864a:	601a      	strpl	r2, [r3, #0]
   d864c:	4b12      	ldr	r3, [pc, #72]	; (d8698 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d864e:	681a      	ldr	r2, [r3, #0]
   d8650:	07d0      	lsls	r0, r2, #31
   d8652:	bf5c      	itt	pl
   d8654:	2201      	movpl	r2, #1
   d8656:	601a      	strpl	r2, [r3, #0]
   d8658:	4b10      	ldr	r3, [pc, #64]	; (d869c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d865a:	681a      	ldr	r2, [r3, #0]
   d865c:	07d1      	lsls	r1, r2, #31
   d865e:	bf5c      	itt	pl
   d8660:	2201      	movpl	r2, #1
   d8662:	601a      	strpl	r2, [r3, #0]
   d8664:	4b0e      	ldr	r3, [pc, #56]	; (d86a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d8666:	681a      	ldr	r2, [r3, #0]
   d8668:	07d2      	lsls	r2, r2, #31
   d866a:	bf5c      	itt	pl
   d866c:	2201      	movpl	r2, #1
   d866e:	601a      	strpl	r2, [r3, #0]
   d8670:	4770      	bx	lr
   d8672:	bf00      	nop
   d8674:	2003e7c4 	.word	0x2003e7c4
   d8678:	2003e7c0 	.word	0x2003e7c0
   d867c:	2003e7bc 	.word	0x2003e7bc
   d8680:	2003e7b8 	.word	0x2003e7b8
   d8684:	2003e7b4 	.word	0x2003e7b4
   d8688:	2003e7b0 	.word	0x2003e7b0
   d868c:	2003e7ac 	.word	0x2003e7ac
   d8690:	2003e7a8 	.word	0x2003e7a8
   d8694:	2003e7a4 	.word	0x2003e7a4
   d8698:	2003e7a0 	.word	0x2003e7a0
   d869c:	2003e79c 	.word	0x2003e79c
   d86a0:	2003e798 	.word	0x2003e798

000d86a4 <__aeabi_drsub>:
   d86a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d86a8:	e002      	b.n	d86b0 <__adddf3>
   d86aa:	bf00      	nop

000d86ac <__aeabi_dsub>:
   d86ac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d86b0 <__adddf3>:
   d86b0:	b530      	push	{r4, r5, lr}
   d86b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d86b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d86ba:	ea94 0f05 	teq	r4, r5
   d86be:	bf08      	it	eq
   d86c0:	ea90 0f02 	teqeq	r0, r2
   d86c4:	bf1f      	itttt	ne
   d86c6:	ea54 0c00 	orrsne.w	ip, r4, r0
   d86ca:	ea55 0c02 	orrsne.w	ip, r5, r2
   d86ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d86d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d86d6:	f000 80e2 	beq.w	d889e <__adddf3+0x1ee>
   d86da:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d86de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d86e2:	bfb8      	it	lt
   d86e4:	426d      	neglt	r5, r5
   d86e6:	dd0c      	ble.n	d8702 <__adddf3+0x52>
   d86e8:	442c      	add	r4, r5
   d86ea:	ea80 0202 	eor.w	r2, r0, r2
   d86ee:	ea81 0303 	eor.w	r3, r1, r3
   d86f2:	ea82 0000 	eor.w	r0, r2, r0
   d86f6:	ea83 0101 	eor.w	r1, r3, r1
   d86fa:	ea80 0202 	eor.w	r2, r0, r2
   d86fe:	ea81 0303 	eor.w	r3, r1, r3
   d8702:	2d36      	cmp	r5, #54	; 0x36
   d8704:	bf88      	it	hi
   d8706:	bd30      	pophi	{r4, r5, pc}
   d8708:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d870c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d8710:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d8714:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d8718:	d002      	beq.n	d8720 <__adddf3+0x70>
   d871a:	4240      	negs	r0, r0
   d871c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d8720:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d8724:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d8728:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d872c:	d002      	beq.n	d8734 <__adddf3+0x84>
   d872e:	4252      	negs	r2, r2
   d8730:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d8734:	ea94 0f05 	teq	r4, r5
   d8738:	f000 80a7 	beq.w	d888a <__adddf3+0x1da>
   d873c:	f1a4 0401 	sub.w	r4, r4, #1
   d8740:	f1d5 0e20 	rsbs	lr, r5, #32
   d8744:	db0d      	blt.n	d8762 <__adddf3+0xb2>
   d8746:	fa02 fc0e 	lsl.w	ip, r2, lr
   d874a:	fa22 f205 	lsr.w	r2, r2, r5
   d874e:	1880      	adds	r0, r0, r2
   d8750:	f141 0100 	adc.w	r1, r1, #0
   d8754:	fa03 f20e 	lsl.w	r2, r3, lr
   d8758:	1880      	adds	r0, r0, r2
   d875a:	fa43 f305 	asr.w	r3, r3, r5
   d875e:	4159      	adcs	r1, r3
   d8760:	e00e      	b.n	d8780 <__adddf3+0xd0>
   d8762:	f1a5 0520 	sub.w	r5, r5, #32
   d8766:	f10e 0e20 	add.w	lr, lr, #32
   d876a:	2a01      	cmp	r2, #1
   d876c:	fa03 fc0e 	lsl.w	ip, r3, lr
   d8770:	bf28      	it	cs
   d8772:	f04c 0c02 	orrcs.w	ip, ip, #2
   d8776:	fa43 f305 	asr.w	r3, r3, r5
   d877a:	18c0      	adds	r0, r0, r3
   d877c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d8780:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8784:	d507      	bpl.n	d8796 <__adddf3+0xe6>
   d8786:	f04f 0e00 	mov.w	lr, #0
   d878a:	f1dc 0c00 	rsbs	ip, ip, #0
   d878e:	eb7e 0000 	sbcs.w	r0, lr, r0
   d8792:	eb6e 0101 	sbc.w	r1, lr, r1
   d8796:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d879a:	d31b      	bcc.n	d87d4 <__adddf3+0x124>
   d879c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d87a0:	d30c      	bcc.n	d87bc <__adddf3+0x10c>
   d87a2:	0849      	lsrs	r1, r1, #1
   d87a4:	ea5f 0030 	movs.w	r0, r0, rrx
   d87a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d87ac:	f104 0401 	add.w	r4, r4, #1
   d87b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d87b4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d87b8:	f080 809a 	bcs.w	d88f0 <__adddf3+0x240>
   d87bc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d87c0:	bf08      	it	eq
   d87c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d87c6:	f150 0000 	adcs.w	r0, r0, #0
   d87ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d87ce:	ea41 0105 	orr.w	r1, r1, r5
   d87d2:	bd30      	pop	{r4, r5, pc}
   d87d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d87d8:	4140      	adcs	r0, r0
   d87da:	eb41 0101 	adc.w	r1, r1, r1
   d87de:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d87e2:	f1a4 0401 	sub.w	r4, r4, #1
   d87e6:	d1e9      	bne.n	d87bc <__adddf3+0x10c>
   d87e8:	f091 0f00 	teq	r1, #0
   d87ec:	bf04      	itt	eq
   d87ee:	4601      	moveq	r1, r0
   d87f0:	2000      	moveq	r0, #0
   d87f2:	fab1 f381 	clz	r3, r1
   d87f6:	bf08      	it	eq
   d87f8:	3320      	addeq	r3, #32
   d87fa:	f1a3 030b 	sub.w	r3, r3, #11
   d87fe:	f1b3 0220 	subs.w	r2, r3, #32
   d8802:	da0c      	bge.n	d881e <__adddf3+0x16e>
   d8804:	320c      	adds	r2, #12
   d8806:	dd08      	ble.n	d881a <__adddf3+0x16a>
   d8808:	f102 0c14 	add.w	ip, r2, #20
   d880c:	f1c2 020c 	rsb	r2, r2, #12
   d8810:	fa01 f00c 	lsl.w	r0, r1, ip
   d8814:	fa21 f102 	lsr.w	r1, r1, r2
   d8818:	e00c      	b.n	d8834 <__adddf3+0x184>
   d881a:	f102 0214 	add.w	r2, r2, #20
   d881e:	bfd8      	it	le
   d8820:	f1c2 0c20 	rsble	ip, r2, #32
   d8824:	fa01 f102 	lsl.w	r1, r1, r2
   d8828:	fa20 fc0c 	lsr.w	ip, r0, ip
   d882c:	bfdc      	itt	le
   d882e:	ea41 010c 	orrle.w	r1, r1, ip
   d8832:	4090      	lslle	r0, r2
   d8834:	1ae4      	subs	r4, r4, r3
   d8836:	bfa2      	ittt	ge
   d8838:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d883c:	4329      	orrge	r1, r5
   d883e:	bd30      	popge	{r4, r5, pc}
   d8840:	ea6f 0404 	mvn.w	r4, r4
   d8844:	3c1f      	subs	r4, #31
   d8846:	da1c      	bge.n	d8882 <__adddf3+0x1d2>
   d8848:	340c      	adds	r4, #12
   d884a:	dc0e      	bgt.n	d886a <__adddf3+0x1ba>
   d884c:	f104 0414 	add.w	r4, r4, #20
   d8850:	f1c4 0220 	rsb	r2, r4, #32
   d8854:	fa20 f004 	lsr.w	r0, r0, r4
   d8858:	fa01 f302 	lsl.w	r3, r1, r2
   d885c:	ea40 0003 	orr.w	r0, r0, r3
   d8860:	fa21 f304 	lsr.w	r3, r1, r4
   d8864:	ea45 0103 	orr.w	r1, r5, r3
   d8868:	bd30      	pop	{r4, r5, pc}
   d886a:	f1c4 040c 	rsb	r4, r4, #12
   d886e:	f1c4 0220 	rsb	r2, r4, #32
   d8872:	fa20 f002 	lsr.w	r0, r0, r2
   d8876:	fa01 f304 	lsl.w	r3, r1, r4
   d887a:	ea40 0003 	orr.w	r0, r0, r3
   d887e:	4629      	mov	r1, r5
   d8880:	bd30      	pop	{r4, r5, pc}
   d8882:	fa21 f004 	lsr.w	r0, r1, r4
   d8886:	4629      	mov	r1, r5
   d8888:	bd30      	pop	{r4, r5, pc}
   d888a:	f094 0f00 	teq	r4, #0
   d888e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d8892:	bf06      	itte	eq
   d8894:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d8898:	3401      	addeq	r4, #1
   d889a:	3d01      	subne	r5, #1
   d889c:	e74e      	b.n	d873c <__adddf3+0x8c>
   d889e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d88a2:	bf18      	it	ne
   d88a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d88a8:	d029      	beq.n	d88fe <__adddf3+0x24e>
   d88aa:	ea94 0f05 	teq	r4, r5
   d88ae:	bf08      	it	eq
   d88b0:	ea90 0f02 	teqeq	r0, r2
   d88b4:	d005      	beq.n	d88c2 <__adddf3+0x212>
   d88b6:	ea54 0c00 	orrs.w	ip, r4, r0
   d88ba:	bf04      	itt	eq
   d88bc:	4619      	moveq	r1, r3
   d88be:	4610      	moveq	r0, r2
   d88c0:	bd30      	pop	{r4, r5, pc}
   d88c2:	ea91 0f03 	teq	r1, r3
   d88c6:	bf1e      	ittt	ne
   d88c8:	2100      	movne	r1, #0
   d88ca:	2000      	movne	r0, #0
   d88cc:	bd30      	popne	{r4, r5, pc}
   d88ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d88d2:	d105      	bne.n	d88e0 <__adddf3+0x230>
   d88d4:	0040      	lsls	r0, r0, #1
   d88d6:	4149      	adcs	r1, r1
   d88d8:	bf28      	it	cs
   d88da:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d88de:	bd30      	pop	{r4, r5, pc}
   d88e0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d88e4:	bf3c      	itt	cc
   d88e6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d88ea:	bd30      	popcc	{r4, r5, pc}
   d88ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d88f0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d88f4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d88f8:	f04f 0000 	mov.w	r0, #0
   d88fc:	bd30      	pop	{r4, r5, pc}
   d88fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d8902:	bf1a      	itte	ne
   d8904:	4619      	movne	r1, r3
   d8906:	4610      	movne	r0, r2
   d8908:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d890c:	bf1c      	itt	ne
   d890e:	460b      	movne	r3, r1
   d8910:	4602      	movne	r2, r0
   d8912:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d8916:	bf06      	itte	eq
   d8918:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d891c:	ea91 0f03 	teqeq	r1, r3
   d8920:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d8924:	bd30      	pop	{r4, r5, pc}
   d8926:	bf00      	nop

000d8928 <__aeabi_ui2d>:
   d8928:	f090 0f00 	teq	r0, #0
   d892c:	bf04      	itt	eq
   d892e:	2100      	moveq	r1, #0
   d8930:	4770      	bxeq	lr
   d8932:	b530      	push	{r4, r5, lr}
   d8934:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8938:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d893c:	f04f 0500 	mov.w	r5, #0
   d8940:	f04f 0100 	mov.w	r1, #0
   d8944:	e750      	b.n	d87e8 <__adddf3+0x138>
   d8946:	bf00      	nop

000d8948 <__aeabi_i2d>:
   d8948:	f090 0f00 	teq	r0, #0
   d894c:	bf04      	itt	eq
   d894e:	2100      	moveq	r1, #0
   d8950:	4770      	bxeq	lr
   d8952:	b530      	push	{r4, r5, lr}
   d8954:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8958:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d895c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d8960:	bf48      	it	mi
   d8962:	4240      	negmi	r0, r0
   d8964:	f04f 0100 	mov.w	r1, #0
   d8968:	e73e      	b.n	d87e8 <__adddf3+0x138>
   d896a:	bf00      	nop

000d896c <__aeabi_f2d>:
   d896c:	0042      	lsls	r2, r0, #1
   d896e:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d8972:	ea4f 0131 	mov.w	r1, r1, rrx
   d8976:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d897a:	bf1f      	itttt	ne
   d897c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d8980:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d8984:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d8988:	4770      	bxne	lr
   d898a:	f092 0f00 	teq	r2, #0
   d898e:	bf14      	ite	ne
   d8990:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d8994:	4770      	bxeq	lr
   d8996:	b530      	push	{r4, r5, lr}
   d8998:	f44f 7460 	mov.w	r4, #896	; 0x380
   d899c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d89a0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d89a4:	e720      	b.n	d87e8 <__adddf3+0x138>
   d89a6:	bf00      	nop

000d89a8 <__aeabi_ul2d>:
   d89a8:	ea50 0201 	orrs.w	r2, r0, r1
   d89ac:	bf08      	it	eq
   d89ae:	4770      	bxeq	lr
   d89b0:	b530      	push	{r4, r5, lr}
   d89b2:	f04f 0500 	mov.w	r5, #0
   d89b6:	e00a      	b.n	d89ce <__aeabi_l2d+0x16>

000d89b8 <__aeabi_l2d>:
   d89b8:	ea50 0201 	orrs.w	r2, r0, r1
   d89bc:	bf08      	it	eq
   d89be:	4770      	bxeq	lr
   d89c0:	b530      	push	{r4, r5, lr}
   d89c2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d89c6:	d502      	bpl.n	d89ce <__aeabi_l2d+0x16>
   d89c8:	4240      	negs	r0, r0
   d89ca:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d89ce:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d89d2:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d89d6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d89da:	f43f aedc 	beq.w	d8796 <__adddf3+0xe6>
   d89de:	f04f 0203 	mov.w	r2, #3
   d89e2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d89e6:	bf18      	it	ne
   d89e8:	3203      	addne	r2, #3
   d89ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d89ee:	bf18      	it	ne
   d89f0:	3203      	addne	r2, #3
   d89f2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d89f6:	f1c2 0320 	rsb	r3, r2, #32
   d89fa:	fa00 fc03 	lsl.w	ip, r0, r3
   d89fe:	fa20 f002 	lsr.w	r0, r0, r2
   d8a02:	fa01 fe03 	lsl.w	lr, r1, r3
   d8a06:	ea40 000e 	orr.w	r0, r0, lr
   d8a0a:	fa21 f102 	lsr.w	r1, r1, r2
   d8a0e:	4414      	add	r4, r2
   d8a10:	e6c1      	b.n	d8796 <__adddf3+0xe6>
   d8a12:	bf00      	nop

000d8a14 <__aeabi_dmul>:
   d8a14:	b570      	push	{r4, r5, r6, lr}
   d8a16:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d8a1a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d8a1e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d8a22:	bf1d      	ittte	ne
   d8a24:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d8a28:	ea94 0f0c 	teqne	r4, ip
   d8a2c:	ea95 0f0c 	teqne	r5, ip
   d8a30:	f000 f8de 	bleq	d8bf0 <__aeabi_dmul+0x1dc>
   d8a34:	442c      	add	r4, r5
   d8a36:	ea81 0603 	eor.w	r6, r1, r3
   d8a3a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d8a3e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d8a42:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d8a46:	bf18      	it	ne
   d8a48:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d8a4c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8a50:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d8a54:	d038      	beq.n	d8ac8 <__aeabi_dmul+0xb4>
   d8a56:	fba0 ce02 	umull	ip, lr, r0, r2
   d8a5a:	f04f 0500 	mov.w	r5, #0
   d8a5e:	fbe1 e502 	umlal	lr, r5, r1, r2
   d8a62:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d8a66:	fbe0 e503 	umlal	lr, r5, r0, r3
   d8a6a:	f04f 0600 	mov.w	r6, #0
   d8a6e:	fbe1 5603 	umlal	r5, r6, r1, r3
   d8a72:	f09c 0f00 	teq	ip, #0
   d8a76:	bf18      	it	ne
   d8a78:	f04e 0e01 	orrne.w	lr, lr, #1
   d8a7c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d8a80:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d8a84:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d8a88:	d204      	bcs.n	d8a94 <__aeabi_dmul+0x80>
   d8a8a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d8a8e:	416d      	adcs	r5, r5
   d8a90:	eb46 0606 	adc.w	r6, r6, r6
   d8a94:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d8a98:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d8a9c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d8aa0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d8aa4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d8aa8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d8aac:	bf88      	it	hi
   d8aae:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d8ab2:	d81e      	bhi.n	d8af2 <__aeabi_dmul+0xde>
   d8ab4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d8ab8:	bf08      	it	eq
   d8aba:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d8abe:	f150 0000 	adcs.w	r0, r0, #0
   d8ac2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d8ac6:	bd70      	pop	{r4, r5, r6, pc}
   d8ac8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d8acc:	ea46 0101 	orr.w	r1, r6, r1
   d8ad0:	ea40 0002 	orr.w	r0, r0, r2
   d8ad4:	ea81 0103 	eor.w	r1, r1, r3
   d8ad8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d8adc:	bfc2      	ittt	gt
   d8ade:	ebd4 050c 	rsbsgt	r5, r4, ip
   d8ae2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d8ae6:	bd70      	popgt	{r4, r5, r6, pc}
   d8ae8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8aec:	f04f 0e00 	mov.w	lr, #0
   d8af0:	3c01      	subs	r4, #1
   d8af2:	f300 80ab 	bgt.w	d8c4c <__aeabi_dmul+0x238>
   d8af6:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d8afa:	bfde      	ittt	le
   d8afc:	2000      	movle	r0, #0
   d8afe:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d8b02:	bd70      	pople	{r4, r5, r6, pc}
   d8b04:	f1c4 0400 	rsb	r4, r4, #0
   d8b08:	3c20      	subs	r4, #32
   d8b0a:	da35      	bge.n	d8b78 <__aeabi_dmul+0x164>
   d8b0c:	340c      	adds	r4, #12
   d8b0e:	dc1b      	bgt.n	d8b48 <__aeabi_dmul+0x134>
   d8b10:	f104 0414 	add.w	r4, r4, #20
   d8b14:	f1c4 0520 	rsb	r5, r4, #32
   d8b18:	fa00 f305 	lsl.w	r3, r0, r5
   d8b1c:	fa20 f004 	lsr.w	r0, r0, r4
   d8b20:	fa01 f205 	lsl.w	r2, r1, r5
   d8b24:	ea40 0002 	orr.w	r0, r0, r2
   d8b28:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d8b2c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d8b30:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d8b34:	fa21 f604 	lsr.w	r6, r1, r4
   d8b38:	eb42 0106 	adc.w	r1, r2, r6
   d8b3c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8b40:	bf08      	it	eq
   d8b42:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8b46:	bd70      	pop	{r4, r5, r6, pc}
   d8b48:	f1c4 040c 	rsb	r4, r4, #12
   d8b4c:	f1c4 0520 	rsb	r5, r4, #32
   d8b50:	fa00 f304 	lsl.w	r3, r0, r4
   d8b54:	fa20 f005 	lsr.w	r0, r0, r5
   d8b58:	fa01 f204 	lsl.w	r2, r1, r4
   d8b5c:	ea40 0002 	orr.w	r0, r0, r2
   d8b60:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8b64:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d8b68:	f141 0100 	adc.w	r1, r1, #0
   d8b6c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8b70:	bf08      	it	eq
   d8b72:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8b76:	bd70      	pop	{r4, r5, r6, pc}
   d8b78:	f1c4 0520 	rsb	r5, r4, #32
   d8b7c:	fa00 f205 	lsl.w	r2, r0, r5
   d8b80:	ea4e 0e02 	orr.w	lr, lr, r2
   d8b84:	fa20 f304 	lsr.w	r3, r0, r4
   d8b88:	fa01 f205 	lsl.w	r2, r1, r5
   d8b8c:	ea43 0302 	orr.w	r3, r3, r2
   d8b90:	fa21 f004 	lsr.w	r0, r1, r4
   d8b94:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8b98:	fa21 f204 	lsr.w	r2, r1, r4
   d8b9c:	ea20 0002 	bic.w	r0, r0, r2
   d8ba0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d8ba4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8ba8:	bf08      	it	eq
   d8baa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8bae:	bd70      	pop	{r4, r5, r6, pc}
   d8bb0:	f094 0f00 	teq	r4, #0
   d8bb4:	d10f      	bne.n	d8bd6 <__aeabi_dmul+0x1c2>
   d8bb6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d8bba:	0040      	lsls	r0, r0, #1
   d8bbc:	eb41 0101 	adc.w	r1, r1, r1
   d8bc0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8bc4:	bf08      	it	eq
   d8bc6:	3c01      	subeq	r4, #1
   d8bc8:	d0f7      	beq.n	d8bba <__aeabi_dmul+0x1a6>
   d8bca:	ea41 0106 	orr.w	r1, r1, r6
   d8bce:	f095 0f00 	teq	r5, #0
   d8bd2:	bf18      	it	ne
   d8bd4:	4770      	bxne	lr
   d8bd6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d8bda:	0052      	lsls	r2, r2, #1
   d8bdc:	eb43 0303 	adc.w	r3, r3, r3
   d8be0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d8be4:	bf08      	it	eq
   d8be6:	3d01      	subeq	r5, #1
   d8be8:	d0f7      	beq.n	d8bda <__aeabi_dmul+0x1c6>
   d8bea:	ea43 0306 	orr.w	r3, r3, r6
   d8bee:	4770      	bx	lr
   d8bf0:	ea94 0f0c 	teq	r4, ip
   d8bf4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d8bf8:	bf18      	it	ne
   d8bfa:	ea95 0f0c 	teqne	r5, ip
   d8bfe:	d00c      	beq.n	d8c1a <__aeabi_dmul+0x206>
   d8c00:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8c04:	bf18      	it	ne
   d8c06:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8c0a:	d1d1      	bne.n	d8bb0 <__aeabi_dmul+0x19c>
   d8c0c:	ea81 0103 	eor.w	r1, r1, r3
   d8c10:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8c14:	f04f 0000 	mov.w	r0, #0
   d8c18:	bd70      	pop	{r4, r5, r6, pc}
   d8c1a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8c1e:	bf06      	itte	eq
   d8c20:	4610      	moveq	r0, r2
   d8c22:	4619      	moveq	r1, r3
   d8c24:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8c28:	d019      	beq.n	d8c5e <__aeabi_dmul+0x24a>
   d8c2a:	ea94 0f0c 	teq	r4, ip
   d8c2e:	d102      	bne.n	d8c36 <__aeabi_dmul+0x222>
   d8c30:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d8c34:	d113      	bne.n	d8c5e <__aeabi_dmul+0x24a>
   d8c36:	ea95 0f0c 	teq	r5, ip
   d8c3a:	d105      	bne.n	d8c48 <__aeabi_dmul+0x234>
   d8c3c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d8c40:	bf1c      	itt	ne
   d8c42:	4610      	movne	r0, r2
   d8c44:	4619      	movne	r1, r3
   d8c46:	d10a      	bne.n	d8c5e <__aeabi_dmul+0x24a>
   d8c48:	ea81 0103 	eor.w	r1, r1, r3
   d8c4c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8c50:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d8c54:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d8c58:	f04f 0000 	mov.w	r0, #0
   d8c5c:	bd70      	pop	{r4, r5, r6, pc}
   d8c5e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d8c62:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d8c66:	bd70      	pop	{r4, r5, r6, pc}

000d8c68 <__aeabi_ddiv>:
   d8c68:	b570      	push	{r4, r5, r6, lr}
   d8c6a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d8c6e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d8c72:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d8c76:	bf1d      	ittte	ne
   d8c78:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d8c7c:	ea94 0f0c 	teqne	r4, ip
   d8c80:	ea95 0f0c 	teqne	r5, ip
   d8c84:	f000 f8a7 	bleq	d8dd6 <__aeabi_ddiv+0x16e>
   d8c88:	eba4 0405 	sub.w	r4, r4, r5
   d8c8c:	ea81 0e03 	eor.w	lr, r1, r3
   d8c90:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d8c94:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d8c98:	f000 8088 	beq.w	d8dac <__aeabi_ddiv+0x144>
   d8c9c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d8ca0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d8ca4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d8ca8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d8cac:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d8cb0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d8cb4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d8cb8:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d8cbc:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d8cc0:	429d      	cmp	r5, r3
   d8cc2:	bf08      	it	eq
   d8cc4:	4296      	cmpeq	r6, r2
   d8cc6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d8cca:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d8cce:	d202      	bcs.n	d8cd6 <__aeabi_ddiv+0x6e>
   d8cd0:	085b      	lsrs	r3, r3, #1
   d8cd2:	ea4f 0232 	mov.w	r2, r2, rrx
   d8cd6:	1ab6      	subs	r6, r6, r2
   d8cd8:	eb65 0503 	sbc.w	r5, r5, r3
   d8cdc:	085b      	lsrs	r3, r3, #1
   d8cde:	ea4f 0232 	mov.w	r2, r2, rrx
   d8ce2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d8ce6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d8cea:	ebb6 0e02 	subs.w	lr, r6, r2
   d8cee:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8cf2:	bf22      	ittt	cs
   d8cf4:	1ab6      	subcs	r6, r6, r2
   d8cf6:	4675      	movcs	r5, lr
   d8cf8:	ea40 000c 	orrcs.w	r0, r0, ip
   d8cfc:	085b      	lsrs	r3, r3, #1
   d8cfe:	ea4f 0232 	mov.w	r2, r2, rrx
   d8d02:	ebb6 0e02 	subs.w	lr, r6, r2
   d8d06:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8d0a:	bf22      	ittt	cs
   d8d0c:	1ab6      	subcs	r6, r6, r2
   d8d0e:	4675      	movcs	r5, lr
   d8d10:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d8d14:	085b      	lsrs	r3, r3, #1
   d8d16:	ea4f 0232 	mov.w	r2, r2, rrx
   d8d1a:	ebb6 0e02 	subs.w	lr, r6, r2
   d8d1e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8d22:	bf22      	ittt	cs
   d8d24:	1ab6      	subcs	r6, r6, r2
   d8d26:	4675      	movcs	r5, lr
   d8d28:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d8d2c:	085b      	lsrs	r3, r3, #1
   d8d2e:	ea4f 0232 	mov.w	r2, r2, rrx
   d8d32:	ebb6 0e02 	subs.w	lr, r6, r2
   d8d36:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8d3a:	bf22      	ittt	cs
   d8d3c:	1ab6      	subcs	r6, r6, r2
   d8d3e:	4675      	movcs	r5, lr
   d8d40:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d8d44:	ea55 0e06 	orrs.w	lr, r5, r6
   d8d48:	d018      	beq.n	d8d7c <__aeabi_ddiv+0x114>
   d8d4a:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d8d4e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d8d52:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d8d56:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d8d5a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d8d5e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d8d62:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d8d66:	d1c0      	bne.n	d8cea <__aeabi_ddiv+0x82>
   d8d68:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8d6c:	d10b      	bne.n	d8d86 <__aeabi_ddiv+0x11e>
   d8d6e:	ea41 0100 	orr.w	r1, r1, r0
   d8d72:	f04f 0000 	mov.w	r0, #0
   d8d76:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d8d7a:	e7b6      	b.n	d8cea <__aeabi_ddiv+0x82>
   d8d7c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8d80:	bf04      	itt	eq
   d8d82:	4301      	orreq	r1, r0
   d8d84:	2000      	moveq	r0, #0
   d8d86:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d8d8a:	bf88      	it	hi
   d8d8c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d8d90:	f63f aeaf 	bhi.w	d8af2 <__aeabi_dmul+0xde>
   d8d94:	ebb5 0c03 	subs.w	ip, r5, r3
   d8d98:	bf04      	itt	eq
   d8d9a:	ebb6 0c02 	subseq.w	ip, r6, r2
   d8d9e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d8da2:	f150 0000 	adcs.w	r0, r0, #0
   d8da6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d8daa:	bd70      	pop	{r4, r5, r6, pc}
   d8dac:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d8db0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d8db4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d8db8:	bfc2      	ittt	gt
   d8dba:	ebd4 050c 	rsbsgt	r5, r4, ip
   d8dbe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d8dc2:	bd70      	popgt	{r4, r5, r6, pc}
   d8dc4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8dc8:	f04f 0e00 	mov.w	lr, #0
   d8dcc:	3c01      	subs	r4, #1
   d8dce:	e690      	b.n	d8af2 <__aeabi_dmul+0xde>
   d8dd0:	ea45 0e06 	orr.w	lr, r5, r6
   d8dd4:	e68d      	b.n	d8af2 <__aeabi_dmul+0xde>
   d8dd6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d8dda:	ea94 0f0c 	teq	r4, ip
   d8dde:	bf08      	it	eq
   d8de0:	ea95 0f0c 	teqeq	r5, ip
   d8de4:	f43f af3b 	beq.w	d8c5e <__aeabi_dmul+0x24a>
   d8de8:	ea94 0f0c 	teq	r4, ip
   d8dec:	d10a      	bne.n	d8e04 <__aeabi_ddiv+0x19c>
   d8dee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d8df2:	f47f af34 	bne.w	d8c5e <__aeabi_dmul+0x24a>
   d8df6:	ea95 0f0c 	teq	r5, ip
   d8dfa:	f47f af25 	bne.w	d8c48 <__aeabi_dmul+0x234>
   d8dfe:	4610      	mov	r0, r2
   d8e00:	4619      	mov	r1, r3
   d8e02:	e72c      	b.n	d8c5e <__aeabi_dmul+0x24a>
   d8e04:	ea95 0f0c 	teq	r5, ip
   d8e08:	d106      	bne.n	d8e18 <__aeabi_ddiv+0x1b0>
   d8e0a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d8e0e:	f43f aefd 	beq.w	d8c0c <__aeabi_dmul+0x1f8>
   d8e12:	4610      	mov	r0, r2
   d8e14:	4619      	mov	r1, r3
   d8e16:	e722      	b.n	d8c5e <__aeabi_dmul+0x24a>
   d8e18:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8e1c:	bf18      	it	ne
   d8e1e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8e22:	f47f aec5 	bne.w	d8bb0 <__aeabi_dmul+0x19c>
   d8e26:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d8e2a:	f47f af0d 	bne.w	d8c48 <__aeabi_dmul+0x234>
   d8e2e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d8e32:	f47f aeeb 	bne.w	d8c0c <__aeabi_dmul+0x1f8>
   d8e36:	e712      	b.n	d8c5e <__aeabi_dmul+0x24a>

000d8e38 <__gedf2>:
   d8e38:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   d8e3c:	e006      	b.n	d8e4c <__cmpdf2+0x4>
   d8e3e:	bf00      	nop

000d8e40 <__ledf2>:
   d8e40:	f04f 0c01 	mov.w	ip, #1
   d8e44:	e002      	b.n	d8e4c <__cmpdf2+0x4>
   d8e46:	bf00      	nop

000d8e48 <__cmpdf2>:
   d8e48:	f04f 0c01 	mov.w	ip, #1
   d8e4c:	f84d cd04 	str.w	ip, [sp, #-4]!
   d8e50:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d8e54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8e58:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d8e5c:	bf18      	it	ne
   d8e5e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d8e62:	d01b      	beq.n	d8e9c <__cmpdf2+0x54>
   d8e64:	b001      	add	sp, #4
   d8e66:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d8e6a:	bf0c      	ite	eq
   d8e6c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d8e70:	ea91 0f03 	teqne	r1, r3
   d8e74:	bf02      	ittt	eq
   d8e76:	ea90 0f02 	teqeq	r0, r2
   d8e7a:	2000      	moveq	r0, #0
   d8e7c:	4770      	bxeq	lr
   d8e7e:	f110 0f00 	cmn.w	r0, #0
   d8e82:	ea91 0f03 	teq	r1, r3
   d8e86:	bf58      	it	pl
   d8e88:	4299      	cmppl	r1, r3
   d8e8a:	bf08      	it	eq
   d8e8c:	4290      	cmpeq	r0, r2
   d8e8e:	bf2c      	ite	cs
   d8e90:	17d8      	asrcs	r0, r3, #31
   d8e92:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d8e96:	f040 0001 	orr.w	r0, r0, #1
   d8e9a:	4770      	bx	lr
   d8e9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d8ea0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8ea4:	d102      	bne.n	d8eac <__cmpdf2+0x64>
   d8ea6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d8eaa:	d107      	bne.n	d8ebc <__cmpdf2+0x74>
   d8eac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d8eb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8eb4:	d1d6      	bne.n	d8e64 <__cmpdf2+0x1c>
   d8eb6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d8eba:	d0d3      	beq.n	d8e64 <__cmpdf2+0x1c>
   d8ebc:	f85d 0b04 	ldr.w	r0, [sp], #4
   d8ec0:	4770      	bx	lr
   d8ec2:	bf00      	nop

000d8ec4 <__aeabi_cdrcmple>:
   d8ec4:	4684      	mov	ip, r0
   d8ec6:	4610      	mov	r0, r2
   d8ec8:	4662      	mov	r2, ip
   d8eca:	468c      	mov	ip, r1
   d8ecc:	4619      	mov	r1, r3
   d8ece:	4663      	mov	r3, ip
   d8ed0:	e000      	b.n	d8ed4 <__aeabi_cdcmpeq>
   d8ed2:	bf00      	nop

000d8ed4 <__aeabi_cdcmpeq>:
   d8ed4:	b501      	push	{r0, lr}
   d8ed6:	f7ff ffb7 	bl	d8e48 <__cmpdf2>
   d8eda:	2800      	cmp	r0, #0
   d8edc:	bf48      	it	mi
   d8ede:	f110 0f00 	cmnmi.w	r0, #0
   d8ee2:	bd01      	pop	{r0, pc}

000d8ee4 <__aeabi_dcmpeq>:
   d8ee4:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8ee8:	f7ff fff4 	bl	d8ed4 <__aeabi_cdcmpeq>
   d8eec:	bf0c      	ite	eq
   d8eee:	2001      	moveq	r0, #1
   d8ef0:	2000      	movne	r0, #0
   d8ef2:	f85d fb08 	ldr.w	pc, [sp], #8
   d8ef6:	bf00      	nop

000d8ef8 <__aeabi_dcmplt>:
   d8ef8:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8efc:	f7ff ffea 	bl	d8ed4 <__aeabi_cdcmpeq>
   d8f00:	bf34      	ite	cc
   d8f02:	2001      	movcc	r0, #1
   d8f04:	2000      	movcs	r0, #0
   d8f06:	f85d fb08 	ldr.w	pc, [sp], #8
   d8f0a:	bf00      	nop

000d8f0c <__aeabi_dcmple>:
   d8f0c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8f10:	f7ff ffe0 	bl	d8ed4 <__aeabi_cdcmpeq>
   d8f14:	bf94      	ite	ls
   d8f16:	2001      	movls	r0, #1
   d8f18:	2000      	movhi	r0, #0
   d8f1a:	f85d fb08 	ldr.w	pc, [sp], #8
   d8f1e:	bf00      	nop

000d8f20 <__aeabi_dcmpge>:
   d8f20:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8f24:	f7ff ffce 	bl	d8ec4 <__aeabi_cdrcmple>
   d8f28:	bf94      	ite	ls
   d8f2a:	2001      	movls	r0, #1
   d8f2c:	2000      	movhi	r0, #0
   d8f2e:	f85d fb08 	ldr.w	pc, [sp], #8
   d8f32:	bf00      	nop

000d8f34 <__aeabi_dcmpgt>:
   d8f34:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8f38:	f7ff ffc4 	bl	d8ec4 <__aeabi_cdrcmple>
   d8f3c:	bf34      	ite	cc
   d8f3e:	2001      	movcc	r0, #1
   d8f40:	2000      	movcs	r0, #0
   d8f42:	f85d fb08 	ldr.w	pc, [sp], #8
   d8f46:	bf00      	nop

000d8f48 <__aeabi_d2iz>:
   d8f48:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d8f4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d8f50:	d215      	bcs.n	d8f7e <__aeabi_d2iz+0x36>
   d8f52:	d511      	bpl.n	d8f78 <__aeabi_d2iz+0x30>
   d8f54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d8f58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d8f5c:	d912      	bls.n	d8f84 <__aeabi_d2iz+0x3c>
   d8f5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d8f62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d8f66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d8f6a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d8f6e:	fa23 f002 	lsr.w	r0, r3, r2
   d8f72:	bf18      	it	ne
   d8f74:	4240      	negne	r0, r0
   d8f76:	4770      	bx	lr
   d8f78:	f04f 0000 	mov.w	r0, #0
   d8f7c:	4770      	bx	lr
   d8f7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d8f82:	d105      	bne.n	d8f90 <__aeabi_d2iz+0x48>
   d8f84:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d8f88:	bf08      	it	eq
   d8f8a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d8f8e:	4770      	bx	lr
   d8f90:	f04f 0000 	mov.w	r0, #0
   d8f94:	4770      	bx	lr
   d8f96:	bf00      	nop

000d8f98 <__aeabi_d2uiz>:
   d8f98:	004a      	lsls	r2, r1, #1
   d8f9a:	d211      	bcs.n	d8fc0 <__aeabi_d2uiz+0x28>
   d8f9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d8fa0:	d211      	bcs.n	d8fc6 <__aeabi_d2uiz+0x2e>
   d8fa2:	d50d      	bpl.n	d8fc0 <__aeabi_d2uiz+0x28>
   d8fa4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d8fa8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d8fac:	d40e      	bmi.n	d8fcc <__aeabi_d2uiz+0x34>
   d8fae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d8fb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d8fb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d8fba:	fa23 f002 	lsr.w	r0, r3, r2
   d8fbe:	4770      	bx	lr
   d8fc0:	f04f 0000 	mov.w	r0, #0
   d8fc4:	4770      	bx	lr
   d8fc6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d8fca:	d102      	bne.n	d8fd2 <__aeabi_d2uiz+0x3a>
   d8fcc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d8fd0:	4770      	bx	lr
   d8fd2:	f04f 0000 	mov.w	r0, #0
   d8fd6:	4770      	bx	lr

000d8fd8 <__aeabi_d2f>:
   d8fd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d8fdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d8fe0:	bf24      	itt	cs
   d8fe2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d8fe6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d8fea:	d90d      	bls.n	d9008 <__aeabi_d2f+0x30>
   d8fec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d8ff0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d8ff4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d8ff8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d8ffc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d9000:	bf08      	it	eq
   d9002:	f020 0001 	biceq.w	r0, r0, #1
   d9006:	4770      	bx	lr
   d9008:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d900c:	d121      	bne.n	d9052 <__aeabi_d2f+0x7a>
   d900e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d9012:	bfbc      	itt	lt
   d9014:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d9018:	4770      	bxlt	lr
   d901a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d901e:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d9022:	f1c2 0218 	rsb	r2, r2, #24
   d9026:	f1c2 0c20 	rsb	ip, r2, #32
   d902a:	fa10 f30c 	lsls.w	r3, r0, ip
   d902e:	fa20 f002 	lsr.w	r0, r0, r2
   d9032:	bf18      	it	ne
   d9034:	f040 0001 	orrne.w	r0, r0, #1
   d9038:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d903c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d9040:	fa03 fc0c 	lsl.w	ip, r3, ip
   d9044:	ea40 000c 	orr.w	r0, r0, ip
   d9048:	fa23 f302 	lsr.w	r3, r3, r2
   d904c:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d9050:	e7cc      	b.n	d8fec <__aeabi_d2f+0x14>
   d9052:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d9056:	d107      	bne.n	d9068 <__aeabi_d2f+0x90>
   d9058:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d905c:	bf1e      	ittt	ne
   d905e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d9062:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d9066:	4770      	bxne	lr
   d9068:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d906c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d9070:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d9074:	4770      	bx	lr
   d9076:	bf00      	nop

000d9078 <atof>:
   d9078:	2100      	movs	r1, #0
   d907a:	f001 b825 	b.w	da0c8 <strtod>

000d907e <atoi>:
   d907e:	220a      	movs	r2, #10
   d9080:	2100      	movs	r1, #0
   d9082:	f001 b8dd 	b.w	da240 <strtol>
	...

000d9088 <__cxa_atexit>:
   d9088:	b510      	push	{r4, lr}
   d908a:	4c05      	ldr	r4, [pc, #20]	; (d90a0 <__cxa_atexit+0x18>)
   d908c:	4613      	mov	r3, r2
   d908e:	b12c      	cbz	r4, d909c <__cxa_atexit+0x14>
   d9090:	460a      	mov	r2, r1
   d9092:	4601      	mov	r1, r0
   d9094:	2002      	movs	r0, #2
   d9096:	f3af 8000 	nop.w
   d909a:	bd10      	pop	{r4, pc}
   d909c:	4620      	mov	r0, r4
   d909e:	bd10      	pop	{r4, pc}
   d90a0:	00000000 	.word	0x00000000

000d90a4 <localtime>:
   d90a4:	b538      	push	{r3, r4, r5, lr}
   d90a6:	4b07      	ldr	r3, [pc, #28]	; (d90c4 <localtime+0x20>)
   d90a8:	681c      	ldr	r4, [r3, #0]
   d90aa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d90ac:	4605      	mov	r5, r0
   d90ae:	b91b      	cbnz	r3, d90b8 <localtime+0x14>
   d90b0:	2024      	movs	r0, #36	; 0x24
   d90b2:	f7fc fd1b 	bl	d5aec <malloc>
   d90b6:	63e0      	str	r0, [r4, #60]	; 0x3c
   d90b8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d90ba:	4628      	mov	r0, r5
   d90bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d90c0:	f000 b802 	b.w	d90c8 <localtime_r>
   d90c4:	2003e118 	.word	0x2003e118

000d90c8 <localtime_r>:
   d90c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d90cc:	460c      	mov	r4, r1
   d90ce:	4680      	mov	r8, r0
   d90d0:	f001 fee6 	bl	daea0 <__gettzinfo>
   d90d4:	4621      	mov	r1, r4
   d90d6:	4607      	mov	r7, r0
   d90d8:	4640      	mov	r0, r8
   d90da:	f001 fee5 	bl	daea8 <gmtime_r>
   d90de:	6946      	ldr	r6, [r0, #20]
   d90e0:	f206 766c 	addw	r6, r6, #1900	; 0x76c
   d90e4:	07b3      	lsls	r3, r6, #30
   d90e6:	4604      	mov	r4, r0
   d90e8:	d105      	bne.n	d90f6 <localtime_r+0x2e>
   d90ea:	2264      	movs	r2, #100	; 0x64
   d90ec:	fb96 f3f2 	sdiv	r3, r6, r2
   d90f0:	fb02 6313 	mls	r3, r2, r3, r6
   d90f4:	b94b      	cbnz	r3, d910a <localtime_r+0x42>
   d90f6:	f44f 75c8 	mov.w	r5, #400	; 0x190
   d90fa:	fb96 f3f5 	sdiv	r3, r6, r5
   d90fe:	fb05 6513 	mls	r5, r5, r3, r6
   d9102:	fab5 f385 	clz	r3, r5
   d9106:	095b      	lsrs	r3, r3, #5
   d9108:	e000      	b.n	d910c <localtime_r+0x44>
   d910a:	2301      	movs	r3, #1
   d910c:	4a5f      	ldr	r2, [pc, #380]	; (d928c <localtime_r+0x1c4>)
   d910e:	2530      	movs	r5, #48	; 0x30
   d9110:	fb05 2503 	mla	r5, r5, r3, r2
   d9114:	f001 f9da 	bl	da4cc <__tz_lock>
   d9118:	f001 f9da 	bl	da4d0 <_tzset_unlocked>
   d911c:	4b5c      	ldr	r3, [pc, #368]	; (d9290 <localtime_r+0x1c8>)
   d911e:	681b      	ldr	r3, [r3, #0]
   d9120:	b1f3      	cbz	r3, d9160 <localtime_r+0x98>
   d9122:	687b      	ldr	r3, [r7, #4]
   d9124:	429e      	cmp	r6, r3
   d9126:	d105      	bne.n	d9134 <localtime_r+0x6c>
   d9128:	6839      	ldr	r1, [r7, #0]
   d912a:	f8d8 3000 	ldr.w	r3, [r8]
   d912e:	69fa      	ldr	r2, [r7, #28]
   d9130:	b941      	cbnz	r1, d9144 <localtime_r+0x7c>
   d9132:	e00a      	b.n	d914a <localtime_r+0x82>
   d9134:	4630      	mov	r0, r6
   d9136:	f001 f921 	bl	da37c <__tzcalc_limits>
   d913a:	2800      	cmp	r0, #0
   d913c:	d1f4      	bne.n	d9128 <localtime_r+0x60>
   d913e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d9142:	e00d      	b.n	d9160 <localtime_r+0x98>
   d9144:	4293      	cmp	r3, r2
   d9146:	db08      	blt.n	d915a <localtime_r+0x92>
   d9148:	e001      	b.n	d914e <localtime_r+0x86>
   d914a:	4293      	cmp	r3, r2
   d914c:	da07      	bge.n	d915e <localtime_r+0x96>
   d914e:	6bba      	ldr	r2, [r7, #56]	; 0x38
   d9150:	4293      	cmp	r3, r2
   d9152:	bfac      	ite	ge
   d9154:	2300      	movge	r3, #0
   d9156:	2301      	movlt	r3, #1
   d9158:	e002      	b.n	d9160 <localtime_r+0x98>
   d915a:	2300      	movs	r3, #0
   d915c:	e000      	b.n	d9160 <localtime_r+0x98>
   d915e:	2301      	movs	r3, #1
   d9160:	6223      	str	r3, [r4, #32]
   d9162:	6a23      	ldr	r3, [r4, #32]
   d9164:	2b01      	cmp	r3, #1
   d9166:	bf0c      	ite	eq
   d9168:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
   d916a:	6a39      	ldrne	r1, [r7, #32]
   d916c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   d9170:	203c      	movs	r0, #60	; 0x3c
   d9172:	fb91 f6f3 	sdiv	r6, r1, r3
   d9176:	fb03 1316 	mls	r3, r3, r6, r1
   d917a:	6861      	ldr	r1, [r4, #4]
   d917c:	fb93 f2f0 	sdiv	r2, r3, r0
   d9180:	fb00 3012 	mls	r0, r0, r2, r3
   d9184:	6823      	ldr	r3, [r4, #0]
   d9186:	1a89      	subs	r1, r1, r2
   d9188:	68a2      	ldr	r2, [r4, #8]
   d918a:	6061      	str	r1, [r4, #4]
   d918c:	1a1b      	subs	r3, r3, r0
   d918e:	1b92      	subs	r2, r2, r6
   d9190:	2b3b      	cmp	r3, #59	; 0x3b
   d9192:	6023      	str	r3, [r4, #0]
   d9194:	60a2      	str	r2, [r4, #8]
   d9196:	dd03      	ble.n	d91a0 <localtime_r+0xd8>
   d9198:	3101      	adds	r1, #1
   d919a:	6061      	str	r1, [r4, #4]
   d919c:	3b3c      	subs	r3, #60	; 0x3c
   d919e:	e004      	b.n	d91aa <localtime_r+0xe2>
   d91a0:	2b00      	cmp	r3, #0
   d91a2:	da03      	bge.n	d91ac <localtime_r+0xe4>
   d91a4:	3901      	subs	r1, #1
   d91a6:	6061      	str	r1, [r4, #4]
   d91a8:	333c      	adds	r3, #60	; 0x3c
   d91aa:	6023      	str	r3, [r4, #0]
   d91ac:	6863      	ldr	r3, [r4, #4]
   d91ae:	2b3b      	cmp	r3, #59	; 0x3b
   d91b0:	dd03      	ble.n	d91ba <localtime_r+0xf2>
   d91b2:	3201      	adds	r2, #1
   d91b4:	60a2      	str	r2, [r4, #8]
   d91b6:	3b3c      	subs	r3, #60	; 0x3c
   d91b8:	e004      	b.n	d91c4 <localtime_r+0xfc>
   d91ba:	2b00      	cmp	r3, #0
   d91bc:	da03      	bge.n	d91c6 <localtime_r+0xfe>
   d91be:	3a01      	subs	r2, #1
   d91c0:	60a2      	str	r2, [r4, #8]
   d91c2:	333c      	adds	r3, #60	; 0x3c
   d91c4:	6063      	str	r3, [r4, #4]
   d91c6:	68a3      	ldr	r3, [r4, #8]
   d91c8:	2b17      	cmp	r3, #23
   d91ca:	dd22      	ble.n	d9212 <localtime_r+0x14a>
   d91cc:	69e2      	ldr	r2, [r4, #28]
   d91ce:	3201      	adds	r2, #1
   d91d0:	61e2      	str	r2, [r4, #28]
   d91d2:	69a2      	ldr	r2, [r4, #24]
   d91d4:	3201      	adds	r2, #1
   d91d6:	2a06      	cmp	r2, #6
   d91d8:	bfc8      	it	gt
   d91da:	2200      	movgt	r2, #0
   d91dc:	61a2      	str	r2, [r4, #24]
   d91de:	68e2      	ldr	r2, [r4, #12]
   d91e0:	3b18      	subs	r3, #24
   d91e2:	3201      	adds	r2, #1
   d91e4:	60a3      	str	r3, [r4, #8]
   d91e6:	6923      	ldr	r3, [r4, #16]
   d91e8:	60e2      	str	r2, [r4, #12]
   d91ea:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   d91ee:	428a      	cmp	r2, r1
   d91f0:	dd46      	ble.n	d9280 <localtime_r+0x1b8>
   d91f2:	3301      	adds	r3, #1
   d91f4:	2b0c      	cmp	r3, #12
   d91f6:	bf0c      	ite	eq
   d91f8:	6963      	ldreq	r3, [r4, #20]
   d91fa:	6123      	strne	r3, [r4, #16]
   d91fc:	eba2 0201 	sub.w	r2, r2, r1
   d9200:	60e2      	str	r2, [r4, #12]
   d9202:	bf01      	itttt	eq
   d9204:	3301      	addeq	r3, #1
   d9206:	2200      	moveq	r2, #0
   d9208:	6122      	streq	r2, [r4, #16]
   d920a:	6163      	streq	r3, [r4, #20]
   d920c:	bf08      	it	eq
   d920e:	61e2      	streq	r2, [r4, #28]
   d9210:	e036      	b.n	d9280 <localtime_r+0x1b8>
   d9212:	2b00      	cmp	r3, #0
   d9214:	da34      	bge.n	d9280 <localtime_r+0x1b8>
   d9216:	69e2      	ldr	r2, [r4, #28]
   d9218:	3a01      	subs	r2, #1
   d921a:	61e2      	str	r2, [r4, #28]
   d921c:	69a2      	ldr	r2, [r4, #24]
   d921e:	3a01      	subs	r2, #1
   d9220:	bf48      	it	mi
   d9222:	2206      	movmi	r2, #6
   d9224:	61a2      	str	r2, [r4, #24]
   d9226:	68e2      	ldr	r2, [r4, #12]
   d9228:	3318      	adds	r3, #24
   d922a:	3a01      	subs	r2, #1
   d922c:	60e2      	str	r2, [r4, #12]
   d922e:	60a3      	str	r3, [r4, #8]
   d9230:	bb32      	cbnz	r2, d9280 <localtime_r+0x1b8>
   d9232:	6923      	ldr	r3, [r4, #16]
   d9234:	3b01      	subs	r3, #1
   d9236:	d401      	bmi.n	d923c <localtime_r+0x174>
   d9238:	6123      	str	r3, [r4, #16]
   d923a:	e01d      	b.n	d9278 <localtime_r+0x1b0>
   d923c:	230b      	movs	r3, #11
   d923e:	6123      	str	r3, [r4, #16]
   d9240:	6963      	ldr	r3, [r4, #20]
   d9242:	1e5a      	subs	r2, r3, #1
   d9244:	f012 0f03 	tst.w	r2, #3
   d9248:	6162      	str	r2, [r4, #20]
   d924a:	f203 736b 	addw	r3, r3, #1899	; 0x76b
   d924e:	d105      	bne.n	d925c <localtime_r+0x194>
   d9250:	2164      	movs	r1, #100	; 0x64
   d9252:	fb93 f2f1 	sdiv	r2, r3, r1
   d9256:	fb01 3212 	mls	r2, r1, r2, r3
   d925a:	b94a      	cbnz	r2, d9270 <localtime_r+0x1a8>
   d925c:	f44f 71c8 	mov.w	r1, #400	; 0x190
   d9260:	fb93 f2f1 	sdiv	r2, r3, r1
   d9264:	fb01 3312 	mls	r3, r1, r2, r3
   d9268:	fab3 f383 	clz	r3, r3
   d926c:	095b      	lsrs	r3, r3, #5
   d926e:	e000      	b.n	d9272 <localtime_r+0x1aa>
   d9270:	2301      	movs	r3, #1
   d9272:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
   d9276:	61e3      	str	r3, [r4, #28]
   d9278:	6923      	ldr	r3, [r4, #16]
   d927a:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
   d927e:	60e3      	str	r3, [r4, #12]
   d9280:	f001 f925 	bl	da4ce <__tz_unlock>
   d9284:	4620      	mov	r0, r4
   d9286:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d928a:	bf00      	nop
   d928c:	000dc494 	.word	0x000dc494
   d9290:	2003e7e4 	.word	0x2003e7e4

000d9294 <_localeconv_r>:
   d9294:	4800      	ldr	r0, [pc, #0]	; (d9298 <_localeconv_r+0x4>)
   d9296:	4770      	bx	lr
   d9298:	2003e11c 	.word	0x2003e11c

000d929c <memcpy>:
   d929c:	b510      	push	{r4, lr}
   d929e:	1e43      	subs	r3, r0, #1
   d92a0:	440a      	add	r2, r1
   d92a2:	4291      	cmp	r1, r2
   d92a4:	d004      	beq.n	d92b0 <memcpy+0x14>
   d92a6:	f811 4b01 	ldrb.w	r4, [r1], #1
   d92aa:	f803 4f01 	strb.w	r4, [r3, #1]!
   d92ae:	e7f8      	b.n	d92a2 <memcpy+0x6>
   d92b0:	bd10      	pop	{r4, pc}

000d92b2 <memmove>:
   d92b2:	4288      	cmp	r0, r1
   d92b4:	b510      	push	{r4, lr}
   d92b6:	eb01 0302 	add.w	r3, r1, r2
   d92ba:	d801      	bhi.n	d92c0 <memmove+0xe>
   d92bc:	1e42      	subs	r2, r0, #1
   d92be:	e00b      	b.n	d92d8 <memmove+0x26>
   d92c0:	4298      	cmp	r0, r3
   d92c2:	d2fb      	bcs.n	d92bc <memmove+0xa>
   d92c4:	1881      	adds	r1, r0, r2
   d92c6:	1ad2      	subs	r2, r2, r3
   d92c8:	42d3      	cmn	r3, r2
   d92ca:	d004      	beq.n	d92d6 <memmove+0x24>
   d92cc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   d92d0:	f801 4d01 	strb.w	r4, [r1, #-1]!
   d92d4:	e7f8      	b.n	d92c8 <memmove+0x16>
   d92d6:	bd10      	pop	{r4, pc}
   d92d8:	4299      	cmp	r1, r3
   d92da:	d004      	beq.n	d92e6 <memmove+0x34>
   d92dc:	f811 4b01 	ldrb.w	r4, [r1], #1
   d92e0:	f802 4f01 	strb.w	r4, [r2, #1]!
   d92e4:	e7f8      	b.n	d92d8 <memmove+0x26>
   d92e6:	bd10      	pop	{r4, pc}

000d92e8 <memset>:
   d92e8:	4402      	add	r2, r0
   d92ea:	4603      	mov	r3, r0
   d92ec:	4293      	cmp	r3, r2
   d92ee:	d002      	beq.n	d92f6 <memset+0xe>
   d92f0:	f803 1b01 	strb.w	r1, [r3], #1
   d92f4:	e7fa      	b.n	d92ec <memset+0x4>
   d92f6:	4770      	bx	lr

000d92f8 <srand>:
   d92f8:	b538      	push	{r3, r4, r5, lr}
   d92fa:	4b12      	ldr	r3, [pc, #72]	; (d9344 <srand+0x4c>)
   d92fc:	681c      	ldr	r4, [r3, #0]
   d92fe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d9300:	4605      	mov	r5, r0
   d9302:	b9d3      	cbnz	r3, d933a <srand+0x42>
   d9304:	2018      	movs	r0, #24
   d9306:	f7fc fbf1 	bl	d5aec <malloc>
   d930a:	f243 330e 	movw	r3, #13070	; 0x330e
   d930e:	63a0      	str	r0, [r4, #56]	; 0x38
   d9310:	8003      	strh	r3, [r0, #0]
   d9312:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d9316:	8043      	strh	r3, [r0, #2]
   d9318:	f241 2334 	movw	r3, #4660	; 0x1234
   d931c:	8083      	strh	r3, [r0, #4]
   d931e:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d9322:	80c3      	strh	r3, [r0, #6]
   d9324:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d9328:	8103      	strh	r3, [r0, #8]
   d932a:	2305      	movs	r3, #5
   d932c:	8143      	strh	r3, [r0, #10]
   d932e:	230b      	movs	r3, #11
   d9330:	8183      	strh	r3, [r0, #12]
   d9332:	2201      	movs	r2, #1
   d9334:	2300      	movs	r3, #0
   d9336:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d933a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d933c:	2200      	movs	r2, #0
   d933e:	611d      	str	r5, [r3, #16]
   d9340:	615a      	str	r2, [r3, #20]
   d9342:	bd38      	pop	{r3, r4, r5, pc}
   d9344:	2003e118 	.word	0x2003e118

000d9348 <strchr>:
   d9348:	b2c9      	uxtb	r1, r1
   d934a:	4603      	mov	r3, r0
   d934c:	f810 2b01 	ldrb.w	r2, [r0], #1
   d9350:	b11a      	cbz	r2, d935a <strchr+0x12>
   d9352:	4291      	cmp	r1, r2
   d9354:	d1f9      	bne.n	d934a <strchr+0x2>
   d9356:	4618      	mov	r0, r3
   d9358:	4770      	bx	lr
   d935a:	2900      	cmp	r1, #0
   d935c:	bf0c      	ite	eq
   d935e:	4618      	moveq	r0, r3
   d9360:	2000      	movne	r0, #0
   d9362:	4770      	bx	lr

000d9364 <strchrnul>:
   d9364:	b510      	push	{r4, lr}
   d9366:	4604      	mov	r4, r0
   d9368:	f7ff ffee 	bl	d9348 <strchr>
   d936c:	b918      	cbnz	r0, d9376 <strchrnul+0x12>
   d936e:	4620      	mov	r0, r4
   d9370:	f000 f82f 	bl	d93d2 <strlen>
   d9374:	4420      	add	r0, r4
   d9376:	bd10      	pop	{r4, pc}

000d9378 <strcmp>:
   d9378:	f810 2b01 	ldrb.w	r2, [r0], #1
   d937c:	f811 3b01 	ldrb.w	r3, [r1], #1
   d9380:	2a01      	cmp	r2, #1
   d9382:	bf28      	it	cs
   d9384:	429a      	cmpcs	r2, r3
   d9386:	d0f7      	beq.n	d9378 <strcmp>
   d9388:	1ad0      	subs	r0, r2, r3
   d938a:	4770      	bx	lr

000d938c <strcpy>:
   d938c:	4603      	mov	r3, r0
   d938e:	f811 2b01 	ldrb.w	r2, [r1], #1
   d9392:	f803 2b01 	strb.w	r2, [r3], #1
   d9396:	2a00      	cmp	r2, #0
   d9398:	d1f9      	bne.n	d938e <strcpy+0x2>
   d939a:	4770      	bx	lr

000d939c <strdup>:
   d939c:	4b02      	ldr	r3, [pc, #8]	; (d93a8 <strdup+0xc>)
   d939e:	4601      	mov	r1, r0
   d93a0:	6818      	ldr	r0, [r3, #0]
   d93a2:	f000 b803 	b.w	d93ac <_strdup_r>
   d93a6:	bf00      	nop
   d93a8:	2003e118 	.word	0x2003e118

000d93ac <_strdup_r>:
   d93ac:	b570      	push	{r4, r5, r6, lr}
   d93ae:	4606      	mov	r6, r0
   d93b0:	4608      	mov	r0, r1
   d93b2:	460c      	mov	r4, r1
   d93b4:	f000 f80d 	bl	d93d2 <strlen>
   d93b8:	1c45      	adds	r5, r0, #1
   d93ba:	4629      	mov	r1, r5
   d93bc:	4630      	mov	r0, r6
   d93be:	f7fc fbdd 	bl	d5b7c <_malloc_r>
   d93c2:	4606      	mov	r6, r0
   d93c4:	b118      	cbz	r0, d93ce <_strdup_r+0x22>
   d93c6:	462a      	mov	r2, r5
   d93c8:	4621      	mov	r1, r4
   d93ca:	f7ff ff67 	bl	d929c <memcpy>
   d93ce:	4630      	mov	r0, r6
   d93d0:	bd70      	pop	{r4, r5, r6, pc}

000d93d2 <strlen>:
   d93d2:	4603      	mov	r3, r0
   d93d4:	f813 2b01 	ldrb.w	r2, [r3], #1
   d93d8:	2a00      	cmp	r2, #0
   d93da:	d1fb      	bne.n	d93d4 <strlen+0x2>
   d93dc:	1a18      	subs	r0, r3, r0
   d93de:	3801      	subs	r0, #1
   d93e0:	4770      	bx	lr

000d93e2 <strncmp>:
   d93e2:	b530      	push	{r4, r5, lr}
   d93e4:	b182      	cbz	r2, d9408 <strncmp+0x26>
   d93e6:	1e45      	subs	r5, r0, #1
   d93e8:	3901      	subs	r1, #1
   d93ea:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   d93ee:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d93f2:	42a3      	cmp	r3, r4
   d93f4:	d106      	bne.n	d9404 <strncmp+0x22>
   d93f6:	43ec      	mvns	r4, r5
   d93f8:	4414      	add	r4, r2
   d93fa:	42e0      	cmn	r0, r4
   d93fc:	d001      	beq.n	d9402 <strncmp+0x20>
   d93fe:	2b00      	cmp	r3, #0
   d9400:	d1f3      	bne.n	d93ea <strncmp+0x8>
   d9402:	461c      	mov	r4, r3
   d9404:	1b18      	subs	r0, r3, r4
   d9406:	bd30      	pop	{r4, r5, pc}
   d9408:	4610      	mov	r0, r2
   d940a:	bd30      	pop	{r4, r5, pc}

000d940c <strncpy>:
   d940c:	b510      	push	{r4, lr}
   d940e:	4603      	mov	r3, r0
   d9410:	b142      	cbz	r2, d9424 <strncpy+0x18>
   d9412:	f811 4b01 	ldrb.w	r4, [r1], #1
   d9416:	f803 4b01 	strb.w	r4, [r3], #1
   d941a:	3a01      	subs	r2, #1
   d941c:	2c00      	cmp	r4, #0
   d941e:	d1f7      	bne.n	d9410 <strncpy+0x4>
   d9420:	441a      	add	r2, r3
   d9422:	e000      	b.n	d9426 <strncpy+0x1a>
   d9424:	bd10      	pop	{r4, pc}
   d9426:	4293      	cmp	r3, r2
   d9428:	d002      	beq.n	d9430 <strncpy+0x24>
   d942a:	f803 4b01 	strb.w	r4, [r3], #1
   d942e:	e7fa      	b.n	d9426 <strncpy+0x1a>
   d9430:	bd10      	pop	{r4, pc}

000d9432 <strrchr>:
   d9432:	b538      	push	{r3, r4, r5, lr}
   d9434:	4603      	mov	r3, r0
   d9436:	460d      	mov	r5, r1
   d9438:	b141      	cbz	r1, d944c <strrchr+0x1a>
   d943a:	2400      	movs	r4, #0
   d943c:	4629      	mov	r1, r5
   d943e:	4618      	mov	r0, r3
   d9440:	f7ff ff82 	bl	d9348 <strchr>
   d9444:	b130      	cbz	r0, d9454 <strrchr+0x22>
   d9446:	1c43      	adds	r3, r0, #1
   d9448:	4604      	mov	r4, r0
   d944a:	e7f7      	b.n	d943c <strrchr+0xa>
   d944c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d9450:	f7ff bf7a 	b.w	d9348 <strchr>
   d9454:	4620      	mov	r0, r4
   d9456:	bd38      	pop	{r3, r4, r5, pc}

000d9458 <strstr>:
   d9458:	b5f0      	push	{r4, r5, r6, r7, lr}
   d945a:	7803      	ldrb	r3, [r0, #0]
   d945c:	b963      	cbnz	r3, d9478 <strstr+0x20>
   d945e:	780b      	ldrb	r3, [r1, #0]
   d9460:	2b00      	cmp	r3, #0
   d9462:	bf18      	it	ne
   d9464:	2000      	movne	r0, #0
   d9466:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d9468:	f815 2f01 	ldrb.w	r2, [r5, #1]!
   d946c:	b162      	cbz	r2, d9488 <strstr+0x30>
   d946e:	f814 7f01 	ldrb.w	r7, [r4, #1]!
   d9472:	4297      	cmp	r7, r2
   d9474:	4630      	mov	r0, r6
   d9476:	d0f7      	beq.n	d9468 <strstr+0x10>
   d9478:	4603      	mov	r3, r0
   d947a:	1c46      	adds	r6, r0, #1
   d947c:	7800      	ldrb	r0, [r0, #0]
   d947e:	b110      	cbz	r0, d9486 <strstr+0x2e>
   d9480:	1e4d      	subs	r5, r1, #1
   d9482:	1e5c      	subs	r4, r3, #1
   d9484:	e7f0      	b.n	d9468 <strstr+0x10>
   d9486:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d9488:	4618      	mov	r0, r3
   d948a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d948c <sulp>:
   d948c:	b570      	push	{r4, r5, r6, lr}
   d948e:	4604      	mov	r4, r0
   d9490:	460d      	mov	r5, r1
   d9492:	ec45 4b10 	vmov	d0, r4, r5
   d9496:	4616      	mov	r6, r2
   d9498:	f002 f864 	bl	db564 <__ulp>
   d949c:	ec51 0b10 	vmov	r0, r1, d0
   d94a0:	b17e      	cbz	r6, d94c2 <sulp+0x36>
   d94a2:	f3c5 530a 	ubfx	r3, r5, #20, #11
   d94a6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   d94aa:	2b00      	cmp	r3, #0
   d94ac:	dd09      	ble.n	d94c2 <sulp+0x36>
   d94ae:	051b      	lsls	r3, r3, #20
   d94b0:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   d94b4:	2400      	movs	r4, #0
   d94b6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   d94ba:	4622      	mov	r2, r4
   d94bc:	462b      	mov	r3, r5
   d94be:	f7ff faa9 	bl	d8a14 <__aeabi_dmul>
   d94c2:	bd70      	pop	{r4, r5, r6, pc}
   d94c4:	0000      	movs	r0, r0
	...

000d94c8 <_strtod_r>:
   d94c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d94cc:	b09d      	sub	sp, #116	; 0x74
   d94ce:	2300      	movs	r3, #0
   d94d0:	9002      	str	r0, [sp, #8]
   d94d2:	460c      	mov	r4, r1
   d94d4:	9213      	str	r2, [sp, #76]	; 0x4c
   d94d6:	9318      	str	r3, [sp, #96]	; 0x60
   d94d8:	f04f 0a00 	mov.w	sl, #0
   d94dc:	f04f 0b00 	mov.w	fp, #0
   d94e0:	9117      	str	r1, [sp, #92]	; 0x5c
   d94e2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d94e4:	781a      	ldrb	r2, [r3, #0]
   d94e6:	2a0d      	cmp	r2, #13
   d94e8:	d805      	bhi.n	d94f6 <_strtod_r+0x2e>
   d94ea:	2a09      	cmp	r2, #9
   d94ec:	d213      	bcs.n	d9516 <_strtod_r+0x4e>
   d94ee:	2a00      	cmp	r2, #0
   d94f0:	f000 81ac 	beq.w	d984c <_strtod_r+0x384>
   d94f4:	e012      	b.n	d951c <_strtod_r+0x54>
   d94f6:	2a2b      	cmp	r2, #43	; 0x2b
   d94f8:	d004      	beq.n	d9504 <_strtod_r+0x3c>
   d94fa:	2a2d      	cmp	r2, #45	; 0x2d
   d94fc:	d004      	beq.n	d9508 <_strtod_r+0x40>
   d94fe:	2a20      	cmp	r2, #32
   d9500:	d10c      	bne.n	d951c <_strtod_r+0x54>
   d9502:	e008      	b.n	d9516 <_strtod_r+0x4e>
   d9504:	2200      	movs	r2, #0
   d9506:	e000      	b.n	d950a <_strtod_r+0x42>
   d9508:	2201      	movs	r2, #1
   d950a:	920c      	str	r2, [sp, #48]	; 0x30
   d950c:	1c5a      	adds	r2, r3, #1
   d950e:	9217      	str	r2, [sp, #92]	; 0x5c
   d9510:	785b      	ldrb	r3, [r3, #1]
   d9512:	b92b      	cbnz	r3, d9520 <_strtod_r+0x58>
   d9514:	e19a      	b.n	d984c <_strtod_r+0x384>
   d9516:	3301      	adds	r3, #1
   d9518:	9317      	str	r3, [sp, #92]	; 0x5c
   d951a:	e7e2      	b.n	d94e2 <_strtod_r+0x1a>
   d951c:	2300      	movs	r3, #0
   d951e:	930c      	str	r3, [sp, #48]	; 0x30
   d9520:	9d17      	ldr	r5, [sp, #92]	; 0x5c
   d9522:	782b      	ldrb	r3, [r5, #0]
   d9524:	2b30      	cmp	r3, #48	; 0x30
   d9526:	d15c      	bne.n	d95e2 <_strtod_r+0x11a>
   d9528:	786b      	ldrb	r3, [r5, #1]
   d952a:	2b58      	cmp	r3, #88	; 0x58
   d952c:	d001      	beq.n	d9532 <_strtod_r+0x6a>
   d952e:	2b78      	cmp	r3, #120	; 0x78
   d9530:	d14c      	bne.n	d95cc <_strtod_r+0x104>
   d9532:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d9534:	9301      	str	r3, [sp, #4]
   d9536:	ab18      	add	r3, sp, #96	; 0x60
   d9538:	9300      	str	r3, [sp, #0]
   d953a:	4aa9      	ldr	r2, [pc, #676]	; (d97e0 <_strtod_r+0x318>)
   d953c:	9802      	ldr	r0, [sp, #8]
   d953e:	ab19      	add	r3, sp, #100	; 0x64
   d9540:	a917      	add	r1, sp, #92	; 0x5c
   d9542:	f001 f996 	bl	da872 <__gethex>
   d9546:	f010 0607 	ands.w	r6, r0, #7
   d954a:	4604      	mov	r4, r0
   d954c:	f000 8587 	beq.w	da05e <_strtod_r+0xb96>
   d9550:	2e06      	cmp	r6, #6
   d9552:	d105      	bne.n	d9560 <_strtod_r+0x98>
   d9554:	3501      	adds	r5, #1
   d9556:	2300      	movs	r3, #0
   d9558:	9517      	str	r5, [sp, #92]	; 0x5c
   d955a:	930c      	str	r3, [sp, #48]	; 0x30
   d955c:	f000 bd7f 	b.w	da05e <_strtod_r+0xb96>
   d9560:	9a18      	ldr	r2, [sp, #96]	; 0x60
   d9562:	b13a      	cbz	r2, d9574 <_strtod_r+0xac>
   d9564:	2135      	movs	r1, #53	; 0x35
   d9566:	a81a      	add	r0, sp, #104	; 0x68
   d9568:	f002 f8e9 	bl	db73e <__copybits>
   d956c:	9918      	ldr	r1, [sp, #96]	; 0x60
   d956e:	9802      	ldr	r0, [sp, #8]
   d9570:	f001 fd67 	bl	db042 <_Bfree>
   d9574:	2e06      	cmp	r6, #6
   d9576:	d822      	bhi.n	d95be <_strtod_r+0xf6>
   d9578:	e8df f006 	tbb	[pc, r6]
   d957c:	18080d04 	.word	0x18080d04
   d9580:	0d1d      	.short	0x0d1d
   d9582:	04          	.byte	0x04
   d9583:	00          	.byte	0x00
   d9584:	f04f 0b00 	mov.w	fp, #0
   d9588:	46da      	mov	sl, fp
   d958a:	e018      	b.n	d95be <_strtod_r+0xf6>
   d958c:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   d9590:	f8dd b06c 	ldr.w	fp, [sp, #108]	; 0x6c
   d9594:	e013      	b.n	d95be <_strtod_r+0xf6>
   d9596:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   d9598:	9a19      	ldr	r2, [sp, #100]	; 0x64
   d959a:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   d959e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   d95a2:	f202 4233 	addw	r2, r2, #1075	; 0x433
   d95a6:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   d95aa:	e008      	b.n	d95be <_strtod_r+0xf6>
   d95ac:	f8df b234 	ldr.w	fp, [pc, #564]	; d97e4 <_strtod_r+0x31c>
   d95b0:	f04f 0a00 	mov.w	sl, #0
   d95b4:	e003      	b.n	d95be <_strtod_r+0xf6>
   d95b6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   d95ba:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   d95be:	0721      	lsls	r1, r4, #28
   d95c0:	f140 854d 	bpl.w	da05e <_strtod_r+0xb96>
   d95c4:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   d95c8:	f000 bd49 	b.w	da05e <_strtod_r+0xb96>
   d95cc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d95ce:	1c5a      	adds	r2, r3, #1
   d95d0:	9217      	str	r2, [sp, #92]	; 0x5c
   d95d2:	785b      	ldrb	r3, [r3, #1]
   d95d4:	2b30      	cmp	r3, #48	; 0x30
   d95d6:	d0f9      	beq.n	d95cc <_strtod_r+0x104>
   d95d8:	2b00      	cmp	r3, #0
   d95da:	f000 8540 	beq.w	da05e <_strtod_r+0xb96>
   d95de:	2301      	movs	r3, #1
   d95e0:	e000      	b.n	d95e4 <_strtod_r+0x11c>
   d95e2:	2300      	movs	r3, #0
   d95e4:	f04f 0800 	mov.w	r8, #0
   d95e8:	9306      	str	r3, [sp, #24]
   d95ea:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d95ec:	9307      	str	r3, [sp, #28]
   d95ee:	f8cd 8014 	str.w	r8, [sp, #20]
   d95f2:	f8cd 8010 	str.w	r8, [sp, #16]
   d95f6:	220a      	movs	r2, #10
   d95f8:	9d17      	ldr	r5, [sp, #92]	; 0x5c
   d95fa:	782e      	ldrb	r6, [r5, #0]
   d95fc:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   d9600:	b2d9      	uxtb	r1, r3
   d9602:	2909      	cmp	r1, #9
   d9604:	d80e      	bhi.n	d9624 <_strtod_r+0x15c>
   d9606:	9904      	ldr	r1, [sp, #16]
   d9608:	2908      	cmp	r1, #8
   d960a:	bfdd      	ittte	le
   d960c:	9905      	ldrle	r1, [sp, #20]
   d960e:	fb02 3301 	mlale	r3, r2, r1, r3
   d9612:	9305      	strle	r3, [sp, #20]
   d9614:	fb02 3808 	mlagt	r8, r2, r8, r3
   d9618:	9b04      	ldr	r3, [sp, #16]
   d961a:	3501      	adds	r5, #1
   d961c:	3301      	adds	r3, #1
   d961e:	9304      	str	r3, [sp, #16]
   d9620:	9517      	str	r5, [sp, #92]	; 0x5c
   d9622:	e7e9      	b.n	d95f8 <_strtod_r+0x130>
   d9624:	9802      	ldr	r0, [sp, #8]
   d9626:	f7ff fe35 	bl	d9294 <_localeconv_r>
   d962a:	6807      	ldr	r7, [r0, #0]
   d962c:	9802      	ldr	r0, [sp, #8]
   d962e:	f7ff fe31 	bl	d9294 <_localeconv_r>
   d9632:	6800      	ldr	r0, [r0, #0]
   d9634:	f7ff fecd 	bl	d93d2 <strlen>
   d9638:	4639      	mov	r1, r7
   d963a:	4602      	mov	r2, r0
   d963c:	4628      	mov	r0, r5
   d963e:	f7ff fed0 	bl	d93e2 <strncmp>
   d9642:	4607      	mov	r7, r0
   d9644:	b128      	cbz	r0, d9652 <_strtod_r+0x18a>
   d9646:	2000      	movs	r0, #0
   d9648:	4633      	mov	r3, r6
   d964a:	9d04      	ldr	r5, [sp, #16]
   d964c:	4602      	mov	r2, r0
   d964e:	4601      	mov	r1, r0
   d9650:	e057      	b.n	d9702 <_strtod_r+0x23a>
   d9652:	9802      	ldr	r0, [sp, #8]
   d9654:	f7ff fe1e 	bl	d9294 <_localeconv_r>
   d9658:	6800      	ldr	r0, [r0, #0]
   d965a:	f7ff feba 	bl	d93d2 <strlen>
   d965e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d9660:	181a      	adds	r2, r3, r0
   d9662:	9217      	str	r2, [sp, #92]	; 0x5c
   d9664:	9a04      	ldr	r2, [sp, #16]
   d9666:	5c1b      	ldrb	r3, [r3, r0]
   d9668:	2a00      	cmp	r2, #0
   d966a:	d142      	bne.n	d96f2 <_strtod_r+0x22a>
   d966c:	4610      	mov	r0, r2
   d966e:	2b30      	cmp	r3, #48	; 0x30
   d9670:	d105      	bne.n	d967e <_strtod_r+0x1b6>
   d9672:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d9674:	1c5a      	adds	r2, r3, #1
   d9676:	9217      	str	r2, [sp, #92]	; 0x5c
   d9678:	3001      	adds	r0, #1
   d967a:	785b      	ldrb	r3, [r3, #1]
   d967c:	e7f7      	b.n	d966e <_strtod_r+0x1a6>
   d967e:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
   d9682:	2a08      	cmp	r2, #8
   d9684:	d843      	bhi.n	d970e <_strtod_r+0x246>
   d9686:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   d9688:	9207      	str	r2, [sp, #28]
   d968a:	4602      	mov	r2, r0
   d968c:	2000      	movs	r0, #0
   d968e:	4605      	mov	r5, r0
   d9690:	3b30      	subs	r3, #48	; 0x30
   d9692:	f100 0101 	add.w	r1, r0, #1
   d9696:	d026      	beq.n	d96e6 <_strtod_r+0x21e>
   d9698:	440a      	add	r2, r1
   d969a:	eb05 0c00 	add.w	ip, r5, r0
   d969e:	4629      	mov	r1, r5
   d96a0:	260a      	movs	r6, #10
   d96a2:	4561      	cmp	r1, ip
   d96a4:	d00e      	beq.n	d96c4 <_strtod_r+0x1fc>
   d96a6:	3101      	adds	r1, #1
   d96a8:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
   d96ac:	f1be 0f08 	cmp.w	lr, #8
   d96b0:	dc03      	bgt.n	d96ba <_strtod_r+0x1f2>
   d96b2:	9f05      	ldr	r7, [sp, #20]
   d96b4:	4377      	muls	r7, r6
   d96b6:	9705      	str	r7, [sp, #20]
   d96b8:	e7f3      	b.n	d96a2 <_strtod_r+0x1da>
   d96ba:	2910      	cmp	r1, #16
   d96bc:	bfd8      	it	le
   d96be:	fb06 f808 	mulle.w	r8, r6, r8
   d96c2:	e7ee      	b.n	d96a2 <_strtod_r+0x1da>
   d96c4:	4428      	add	r0, r5
   d96c6:	2808      	cmp	r0, #8
   d96c8:	f100 0501 	add.w	r5, r0, #1
   d96cc:	dc05      	bgt.n	d96da <_strtod_r+0x212>
   d96ce:	9805      	ldr	r0, [sp, #20]
   d96d0:	210a      	movs	r1, #10
   d96d2:	fb01 3300 	mla	r3, r1, r0, r3
   d96d6:	9305      	str	r3, [sp, #20]
   d96d8:	e004      	b.n	d96e4 <_strtod_r+0x21c>
   d96da:	2d10      	cmp	r5, #16
   d96dc:	bfdc      	itt	le
   d96de:	210a      	movle	r1, #10
   d96e0:	fb01 3808 	mlale	r8, r1, r8, r3
   d96e4:	2100      	movs	r1, #0
   d96e6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d96e8:	1c58      	adds	r0, r3, #1
   d96ea:	9017      	str	r0, [sp, #92]	; 0x5c
   d96ec:	785b      	ldrb	r3, [r3, #1]
   d96ee:	4608      	mov	r0, r1
   d96f0:	e002      	b.n	d96f8 <_strtod_r+0x230>
   d96f2:	9d04      	ldr	r5, [sp, #16]
   d96f4:	4638      	mov	r0, r7
   d96f6:	463a      	mov	r2, r7
   d96f8:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   d96fc:	2909      	cmp	r1, #9
   d96fe:	d9c7      	bls.n	d9690 <_strtod_r+0x1c8>
   d9700:	2101      	movs	r1, #1
   d9702:	2b65      	cmp	r3, #101	; 0x65
   d9704:	d001      	beq.n	d970a <_strtod_r+0x242>
   d9706:	2b45      	cmp	r3, #69	; 0x45
   d9708:	d151      	bne.n	d97ae <_strtod_r+0x2e6>
   d970a:	b96d      	cbnz	r5, d9728 <_strtod_r+0x260>
   d970c:	e004      	b.n	d9718 <_strtod_r+0x250>
   d970e:	2b65      	cmp	r3, #101	; 0x65
   d9710:	f040 84b3 	bne.w	da07a <_strtod_r+0xbb2>
   d9714:	2200      	movs	r2, #0
   d9716:	2101      	movs	r1, #1
   d9718:	b928      	cbnz	r0, d9726 <_strtod_r+0x25e>
   d971a:	9b06      	ldr	r3, [sp, #24]
   d971c:	2b00      	cmp	r3, #0
   d971e:	f000 8095 	beq.w	d984c <_strtod_r+0x384>
   d9722:	4605      	mov	r5, r0
   d9724:	e000      	b.n	d9728 <_strtod_r+0x260>
   d9726:	2500      	movs	r5, #0
   d9728:	9c17      	ldr	r4, [sp, #92]	; 0x5c
   d972a:	1c63      	adds	r3, r4, #1
   d972c:	9317      	str	r3, [sp, #92]	; 0x5c
   d972e:	7863      	ldrb	r3, [r4, #1]
   d9730:	2b2b      	cmp	r3, #43	; 0x2b
   d9732:	d006      	beq.n	d9742 <_strtod_r+0x27a>
   d9734:	2b2d      	cmp	r3, #45	; 0x2d
   d9736:	d002      	beq.n	d973e <_strtod_r+0x276>
   d9738:	2600      	movs	r6, #0
   d973a:	9603      	str	r6, [sp, #12]
   d973c:	e006      	b.n	d974c <_strtod_r+0x284>
   d973e:	2301      	movs	r3, #1
   d9740:	e000      	b.n	d9744 <_strtod_r+0x27c>
   d9742:	2300      	movs	r3, #0
   d9744:	9303      	str	r3, [sp, #12]
   d9746:	1ca3      	adds	r3, r4, #2
   d9748:	9317      	str	r3, [sp, #92]	; 0x5c
   d974a:	78a3      	ldrb	r3, [r4, #2]
   d974c:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
   d9750:	2e09      	cmp	r6, #9
   d9752:	d82b      	bhi.n	d97ac <_strtod_r+0x2e4>
   d9754:	2b30      	cmp	r3, #48	; 0x30
   d9756:	d104      	bne.n	d9762 <_strtod_r+0x29a>
   d9758:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d975a:	1c5e      	adds	r6, r3, #1
   d975c:	9617      	str	r6, [sp, #92]	; 0x5c
   d975e:	785b      	ldrb	r3, [r3, #1]
   d9760:	e7f8      	b.n	d9754 <_strtod_r+0x28c>
   d9762:	f1a3 0631 	sub.w	r6, r3, #49	; 0x31
   d9766:	2e08      	cmp	r6, #8
   d9768:	d821      	bhi.n	d97ae <_strtod_r+0x2e6>
   d976a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
   d976e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d9770:	f04f 0c0a 	mov.w	ip, #10
   d9774:	461f      	mov	r7, r3
   d9776:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d9778:	1c5e      	adds	r6, r3, #1
   d977a:	9617      	str	r6, [sp, #92]	; 0x5c
   d977c:	785b      	ldrb	r3, [r3, #1]
   d977e:	f1a3 0930 	sub.w	r9, r3, #48	; 0x30
   d9782:	f1b9 0f09 	cmp.w	r9, #9
   d9786:	d804      	bhi.n	d9792 <_strtod_r+0x2ca>
   d9788:	fb0c 3e0e 	mla	lr, ip, lr, r3
   d978c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   d9790:	e7f1      	b.n	d9776 <_strtod_r+0x2ae>
   d9792:	1bf6      	subs	r6, r6, r7
   d9794:	2e08      	cmp	r6, #8
   d9796:	f644 691f 	movw	r9, #19999	; 0x4e1f
   d979a:	dc02      	bgt.n	d97a2 <_strtod_r+0x2da>
   d979c:	45f1      	cmp	r9, lr
   d979e:	bfa8      	it	ge
   d97a0:	46f1      	movge	r9, lr
   d97a2:	9e03      	ldr	r6, [sp, #12]
   d97a4:	b12e      	cbz	r6, d97b2 <_strtod_r+0x2ea>
   d97a6:	f1c9 0900 	rsb	r9, r9, #0
   d97aa:	e002      	b.n	d97b2 <_strtod_r+0x2ea>
   d97ac:	9417      	str	r4, [sp, #92]	; 0x5c
   d97ae:	f04f 0900 	mov.w	r9, #0
   d97b2:	2d00      	cmp	r5, #0
   d97b4:	d153      	bne.n	d985e <_strtod_r+0x396>
   d97b6:	2800      	cmp	r0, #0
   d97b8:	f040 8451 	bne.w	da05e <_strtod_r+0xb96>
   d97bc:	9a06      	ldr	r2, [sp, #24]
   d97be:	2a00      	cmp	r2, #0
   d97c0:	f040 844d 	bne.w	da05e <_strtod_r+0xb96>
   d97c4:	2900      	cmp	r1, #0
   d97c6:	d141      	bne.n	d984c <_strtod_r+0x384>
   d97c8:	2b4e      	cmp	r3, #78	; 0x4e
   d97ca:	d020      	beq.n	d980e <_strtod_r+0x346>
   d97cc:	dc02      	bgt.n	d97d4 <_strtod_r+0x30c>
   d97ce:	2b49      	cmp	r3, #73	; 0x49
   d97d0:	d00a      	beq.n	d97e8 <_strtod_r+0x320>
   d97d2:	e03b      	b.n	d984c <_strtod_r+0x384>
   d97d4:	2b69      	cmp	r3, #105	; 0x69
   d97d6:	d007      	beq.n	d97e8 <_strtod_r+0x320>
   d97d8:	2b6e      	cmp	r3, #110	; 0x6e
   d97da:	d018      	beq.n	d980e <_strtod_r+0x346>
   d97dc:	e036      	b.n	d984c <_strtod_r+0x384>
   d97de:	bf00      	nop
   d97e0:	000dc4f4 	.word	0x000dc4f4
   d97e4:	7ff00000 	.word	0x7ff00000
   d97e8:	49a8      	ldr	r1, [pc, #672]	; (d9a8c <_strtod_r+0x5c4>)
   d97ea:	a817      	add	r0, sp, #92	; 0x5c
   d97ec:	f001 fa72 	bl	dacd4 <__match>
   d97f0:	b360      	cbz	r0, d984c <_strtod_r+0x384>
   d97f2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d97f4:	49a6      	ldr	r1, [pc, #664]	; (d9a90 <_strtod_r+0x5c8>)
   d97f6:	3b01      	subs	r3, #1
   d97f8:	a817      	add	r0, sp, #92	; 0x5c
   d97fa:	9317      	str	r3, [sp, #92]	; 0x5c
   d97fc:	f001 fa6a 	bl	dacd4 <__match>
   d9800:	b910      	cbnz	r0, d9808 <_strtod_r+0x340>
   d9802:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d9804:	3301      	adds	r3, #1
   d9806:	9317      	str	r3, [sp, #92]	; 0x5c
   d9808:	f8df b2a0 	ldr.w	fp, [pc, #672]	; d9aac <_strtod_r+0x5e4>
   d980c:	e01a      	b.n	d9844 <_strtod_r+0x37c>
   d980e:	49a1      	ldr	r1, [pc, #644]	; (d9a94 <_strtod_r+0x5cc>)
   d9810:	a817      	add	r0, sp, #92	; 0x5c
   d9812:	f001 fa5f 	bl	dacd4 <__match>
   d9816:	b1c8      	cbz	r0, d984c <_strtod_r+0x384>
   d9818:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d981a:	781b      	ldrb	r3, [r3, #0]
   d981c:	2b28      	cmp	r3, #40	; 0x28
   d981e:	d10f      	bne.n	d9840 <_strtod_r+0x378>
   d9820:	aa1a      	add	r2, sp, #104	; 0x68
   d9822:	499d      	ldr	r1, [pc, #628]	; (d9a98 <_strtod_r+0x5d0>)
   d9824:	a817      	add	r0, sp, #92	; 0x5c
   d9826:	f001 fa68 	bl	dacfa <__hexnan>
   d982a:	2805      	cmp	r0, #5
   d982c:	d108      	bne.n	d9840 <_strtod_r+0x378>
   d982e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   d9830:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   d9834:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   d9838:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   d983c:	f000 bc0f 	b.w	da05e <_strtod_r+0xb96>
   d9840:	f8df b26c 	ldr.w	fp, [pc, #620]	; d9ab0 <_strtod_r+0x5e8>
   d9844:	f04f 0a00 	mov.w	sl, #0
   d9848:	f000 bc09 	b.w	da05e <_strtod_r+0xb96>
   d984c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   d984e:	9417      	str	r4, [sp, #92]	; 0x5c
   d9850:	2b00      	cmp	r3, #0
   d9852:	f000 840f 	beq.w	da074 <_strtod_r+0xbac>
   d9856:	2300      	movs	r3, #0
   d9858:	930c      	str	r3, [sp, #48]	; 0x30
   d985a:	f000 bc02 	b.w	da062 <_strtod_r+0xb9a>
   d985e:	9b04      	ldr	r3, [sp, #16]
   d9860:	9805      	ldr	r0, [sp, #20]
   d9862:	2b00      	cmp	r3, #0
   d9864:	bf08      	it	eq
   d9866:	462b      	moveq	r3, r5
   d9868:	2d10      	cmp	r5, #16
   d986a:	462c      	mov	r4, r5
   d986c:	ebc2 0909 	rsb	r9, r2, r9
   d9870:	bfa8      	it	ge
   d9872:	2410      	movge	r4, #16
   d9874:	9304      	str	r3, [sp, #16]
   d9876:	f7ff f857 	bl	d8928 <__aeabi_ui2d>
   d987a:	2c09      	cmp	r4, #9
   d987c:	4682      	mov	sl, r0
   d987e:	468b      	mov	fp, r1
   d9880:	dd13      	ble.n	d98aa <_strtod_r+0x3e2>
   d9882:	4b86      	ldr	r3, [pc, #536]	; (d9a9c <_strtod_r+0x5d4>)
   d9884:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   d9888:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   d988c:	f7ff f8c2 	bl	d8a14 <__aeabi_dmul>
   d9890:	4606      	mov	r6, r0
   d9892:	4640      	mov	r0, r8
   d9894:	460f      	mov	r7, r1
   d9896:	f7ff f847 	bl	d8928 <__aeabi_ui2d>
   d989a:	4602      	mov	r2, r0
   d989c:	460b      	mov	r3, r1
   d989e:	4630      	mov	r0, r6
   d98a0:	4639      	mov	r1, r7
   d98a2:	f7fe ff05 	bl	d86b0 <__adddf3>
   d98a6:	4682      	mov	sl, r0
   d98a8:	468b      	mov	fp, r1
   d98aa:	2d0f      	cmp	r5, #15
   d98ac:	dc36      	bgt.n	d991c <_strtod_r+0x454>
   d98ae:	f1b9 0f00 	cmp.w	r9, #0
   d98b2:	f000 83d4 	beq.w	da05e <_strtod_r+0xb96>
   d98b6:	dd24      	ble.n	d9902 <_strtod_r+0x43a>
   d98b8:	f1b9 0f16 	cmp.w	r9, #22
   d98bc:	dc07      	bgt.n	d98ce <_strtod_r+0x406>
   d98be:	4d77      	ldr	r5, [pc, #476]	; (d9a9c <_strtod_r+0x5d4>)
   d98c0:	eb05 09c9 	add.w	r9, r5, r9, lsl #3
   d98c4:	4652      	mov	r2, sl
   d98c6:	465b      	mov	r3, fp
   d98c8:	e9d9 0100 	ldrd	r0, r1, [r9]
   d98cc:	e014      	b.n	d98f8 <_strtod_r+0x430>
   d98ce:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   d98d2:	4599      	cmp	r9, r3
   d98d4:	dc22      	bgt.n	d991c <_strtod_r+0x454>
   d98d6:	4c71      	ldr	r4, [pc, #452]	; (d9a9c <_strtod_r+0x5d4>)
   d98d8:	f1c5 050f 	rsb	r5, r5, #15
   d98dc:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   d98e0:	ebc5 0509 	rsb	r5, r5, r9
   d98e4:	4652      	mov	r2, sl
   d98e6:	465b      	mov	r3, fp
   d98e8:	e9d1 0100 	ldrd	r0, r1, [r1]
   d98ec:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   d98f0:	f7ff f890 	bl	d8a14 <__aeabi_dmul>
   d98f4:	e9d4 2300 	ldrd	r2, r3, [r4]
   d98f8:	f7ff f88c 	bl	d8a14 <__aeabi_dmul>
   d98fc:	4682      	mov	sl, r0
   d98fe:	468b      	mov	fp, r1
   d9900:	e3ad      	b.n	da05e <_strtod_r+0xb96>
   d9902:	f119 0f16 	cmn.w	r9, #22
   d9906:	db09      	blt.n	d991c <_strtod_r+0x454>
   d9908:	4d64      	ldr	r5, [pc, #400]	; (d9a9c <_strtod_r+0x5d4>)
   d990a:	eba5 09c9 	sub.w	r9, r5, r9, lsl #3
   d990e:	e9d9 2300 	ldrd	r2, r3, [r9]
   d9912:	4650      	mov	r0, sl
   d9914:	4659      	mov	r1, fp
   d9916:	f7ff f9a7 	bl	d8c68 <__aeabi_ddiv>
   d991a:	e7ef      	b.n	d98fc <_strtod_r+0x434>
   d991c:	1b2c      	subs	r4, r5, r4
   d991e:	444c      	add	r4, r9
   d9920:	2c00      	cmp	r4, #0
   d9922:	dd57      	ble.n	d99d4 <_strtod_r+0x50c>
   d9924:	f014 010f 	ands.w	r1, r4, #15
   d9928:	d00a      	beq.n	d9940 <_strtod_r+0x478>
   d992a:	4b5c      	ldr	r3, [pc, #368]	; (d9a9c <_strtod_r+0x5d4>)
   d992c:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   d9930:	4652      	mov	r2, sl
   d9932:	465b      	mov	r3, fp
   d9934:	e9d1 0100 	ldrd	r0, r1, [r1]
   d9938:	f7ff f86c 	bl	d8a14 <__aeabi_dmul>
   d993c:	4682      	mov	sl, r0
   d993e:	468b      	mov	fp, r1
   d9940:	f034 040f 	bics.w	r4, r4, #15
   d9944:	f000 80b8 	beq.w	d9ab8 <_strtod_r+0x5f0>
   d9948:	f5b4 7f9a 	cmp.w	r4, #308	; 0x134
   d994c:	dd0b      	ble.n	d9966 <_strtod_r+0x49e>
   d994e:	2400      	movs	r4, #0
   d9950:	4625      	mov	r5, r4
   d9952:	9405      	str	r4, [sp, #20]
   d9954:	9404      	str	r4, [sp, #16]
   d9956:	9a02      	ldr	r2, [sp, #8]
   d9958:	f8df b150 	ldr.w	fp, [pc, #336]	; d9aac <_strtod_r+0x5e4>
   d995c:	2322      	movs	r3, #34	; 0x22
   d995e:	6013      	str	r3, [r2, #0]
   d9960:	f04f 0a00 	mov.w	sl, #0
   d9964:	e187      	b.n	d9c76 <_strtod_r+0x7ae>
   d9966:	4e4e      	ldr	r6, [pc, #312]	; (d9aa0 <_strtod_r+0x5d8>)
   d9968:	2300      	movs	r3, #0
   d996a:	1124      	asrs	r4, r4, #4
   d996c:	4650      	mov	r0, sl
   d996e:	4659      	mov	r1, fp
   d9970:	4698      	mov	r8, r3
   d9972:	4637      	mov	r7, r6
   d9974:	2c01      	cmp	r4, #1
   d9976:	dd0b      	ble.n	d9990 <_strtod_r+0x4c8>
   d9978:	07e2      	lsls	r2, r4, #31
   d997a:	d504      	bpl.n	d9986 <_strtod_r+0x4be>
   d997c:	e9d6 2300 	ldrd	r2, r3, [r6]
   d9980:	f7ff f848 	bl	d8a14 <__aeabi_dmul>
   d9984:	2301      	movs	r3, #1
   d9986:	f108 0801 	add.w	r8, r8, #1
   d998a:	1064      	asrs	r4, r4, #1
   d998c:	3608      	adds	r6, #8
   d998e:	e7f1      	b.n	d9974 <_strtod_r+0x4ac>
   d9990:	b10b      	cbz	r3, d9996 <_strtod_r+0x4ce>
   d9992:	4682      	mov	sl, r0
   d9994:	468b      	mov	fp, r1
   d9996:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   d999a:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
   d999e:	4652      	mov	r2, sl
   d99a0:	465b      	mov	r3, fp
   d99a2:	e9d7 0100 	ldrd	r0, r1, [r7]
   d99a6:	f7ff f835 	bl	d8a14 <__aeabi_dmul>
   d99aa:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   d99ae:	468b      	mov	fp, r1
   d99b0:	460a      	mov	r2, r1
   d99b2:	0d1b      	lsrs	r3, r3, #20
   d99b4:	493b      	ldr	r1, [pc, #236]	; (d9aa4 <_strtod_r+0x5dc>)
   d99b6:	051b      	lsls	r3, r3, #20
   d99b8:	428b      	cmp	r3, r1
   d99ba:	4682      	mov	sl, r0
   d99bc:	d8c7      	bhi.n	d994e <_strtod_r+0x486>
   d99be:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   d99c2:	428b      	cmp	r3, r1
   d99c4:	bf86      	itte	hi
   d99c6:	f8df b0ec 	ldrhi.w	fp, [pc, #236]	; d9ab4 <_strtod_r+0x5ec>
   d99ca:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
   d99ce:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   d99d2:	e071      	b.n	d9ab8 <_strtod_r+0x5f0>
   d99d4:	d070      	beq.n	d9ab8 <_strtod_r+0x5f0>
   d99d6:	4264      	negs	r4, r4
   d99d8:	f014 020f 	ands.w	r2, r4, #15
   d99dc:	d00a      	beq.n	d99f4 <_strtod_r+0x52c>
   d99de:	4b2f      	ldr	r3, [pc, #188]	; (d9a9c <_strtod_r+0x5d4>)
   d99e0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   d99e4:	4650      	mov	r0, sl
   d99e6:	4659      	mov	r1, fp
   d99e8:	e9d3 2300 	ldrd	r2, r3, [r3]
   d99ec:	f7ff f93c 	bl	d8c68 <__aeabi_ddiv>
   d99f0:	4682      	mov	sl, r0
   d99f2:	468b      	mov	fp, r1
   d99f4:	1124      	asrs	r4, r4, #4
   d99f6:	d05f      	beq.n	d9ab8 <_strtod_r+0x5f0>
   d99f8:	2c1f      	cmp	r4, #31
   d99fa:	dd04      	ble.n	d9a06 <_strtod_r+0x53e>
   d99fc:	2400      	movs	r4, #0
   d99fe:	4625      	mov	r5, r4
   d9a00:	9405      	str	r4, [sp, #20]
   d9a02:	9404      	str	r4, [sp, #16]
   d9a04:	e130      	b.n	d9c68 <_strtod_r+0x7a0>
   d9a06:	f014 0f10 	tst.w	r4, #16
   d9a0a:	bf0c      	ite	eq
   d9a0c:	2300      	moveq	r3, #0
   d9a0e:	236a      	movne	r3, #106	; 0x6a
   d9a10:	4e25      	ldr	r6, [pc, #148]	; (d9aa8 <_strtod_r+0x5e0>)
   d9a12:	9303      	str	r3, [sp, #12]
   d9a14:	4650      	mov	r0, sl
   d9a16:	4659      	mov	r1, fp
   d9a18:	2300      	movs	r3, #0
   d9a1a:	2c00      	cmp	r4, #0
   d9a1c:	dd09      	ble.n	d9a32 <_strtod_r+0x56a>
   d9a1e:	07e2      	lsls	r2, r4, #31
   d9a20:	d504      	bpl.n	d9a2c <_strtod_r+0x564>
   d9a22:	e9d6 2300 	ldrd	r2, r3, [r6]
   d9a26:	f7fe fff5 	bl	d8a14 <__aeabi_dmul>
   d9a2a:	2301      	movs	r3, #1
   d9a2c:	1064      	asrs	r4, r4, #1
   d9a2e:	3608      	adds	r6, #8
   d9a30:	e7f3      	b.n	d9a1a <_strtod_r+0x552>
   d9a32:	b10b      	cbz	r3, d9a38 <_strtod_r+0x570>
   d9a34:	4682      	mov	sl, r0
   d9a36:	468b      	mov	fp, r1
   d9a38:	9b03      	ldr	r3, [sp, #12]
   d9a3a:	b1eb      	cbz	r3, d9a78 <_strtod_r+0x5b0>
   d9a3c:	f3cb 530a 	ubfx	r3, fp, #20, #11
   d9a40:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   d9a44:	2b00      	cmp	r3, #0
   d9a46:	4659      	mov	r1, fp
   d9a48:	dd16      	ble.n	d9a78 <_strtod_r+0x5b0>
   d9a4a:	2b1f      	cmp	r3, #31
   d9a4c:	dd0e      	ble.n	d9a6c <_strtod_r+0x5a4>
   d9a4e:	2b34      	cmp	r3, #52	; 0x34
   d9a50:	bfde      	ittt	le
   d9a52:	3b20      	suble	r3, #32
   d9a54:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
   d9a58:	fa02 f303 	lslle.w	r3, r2, r3
   d9a5c:	f04f 0a00 	mov.w	sl, #0
   d9a60:	bfcc      	ite	gt
   d9a62:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   d9a66:	ea03 0b01 	andle.w	fp, r3, r1
   d9a6a:	e005      	b.n	d9a78 <_strtod_r+0x5b0>
   d9a6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d9a70:	fa02 f303 	lsl.w	r3, r2, r3
   d9a74:	ea03 0a0a 	and.w	sl, r3, sl
   d9a78:	2200      	movs	r2, #0
   d9a7a:	2300      	movs	r3, #0
   d9a7c:	4650      	mov	r0, sl
   d9a7e:	4659      	mov	r1, fp
   d9a80:	f7ff fa30 	bl	d8ee4 <__aeabi_dcmpeq>
   d9a84:	2800      	cmp	r0, #0
   d9a86:	d1b9      	bne.n	d99fc <_strtod_r+0x534>
   d9a88:	e018      	b.n	d9abc <_strtod_r+0x5f4>
   d9a8a:	bf00      	nop
   d9a8c:	000dc51c 	.word	0x000dc51c
   d9a90:	000dc51f 	.word	0x000dc51f
   d9a94:	000dc525 	.word	0x000dc525
   d9a98:	000dc508 	.word	0x000dc508
   d9a9c:	000dc590 	.word	0x000dc590
   d9aa0:	000dc658 	.word	0x000dc658
   d9aa4:	7ca00000 	.word	0x7ca00000
   d9aa8:	000dc528 	.word	0x000dc528
   d9aac:	7ff00000 	.word	0x7ff00000
   d9ab0:	fff80000 	.word	0xfff80000
   d9ab4:	7fefffff 	.word	0x7fefffff
   d9ab8:	2300      	movs	r3, #0
   d9aba:	9303      	str	r3, [sp, #12]
   d9abc:	9b05      	ldr	r3, [sp, #20]
   d9abe:	9300      	str	r3, [sp, #0]
   d9ac0:	9a04      	ldr	r2, [sp, #16]
   d9ac2:	9907      	ldr	r1, [sp, #28]
   d9ac4:	9802      	ldr	r0, [sp, #8]
   d9ac6:	462b      	mov	r3, r5
   d9ac8:	f001 fb0d 	bl	db0e6 <__s2b>
   d9acc:	9005      	str	r0, [sp, #20]
   d9ace:	2800      	cmp	r0, #0
   d9ad0:	f43f af3d 	beq.w	d994e <_strtod_r+0x486>
   d9ad4:	f1b9 0f00 	cmp.w	r9, #0
   d9ad8:	f1c9 0300 	rsb	r3, r9, #0
   d9adc:	bfa8      	it	ge
   d9ade:	2300      	movge	r3, #0
   d9ae0:	930d      	str	r3, [sp, #52]	; 0x34
   d9ae2:	2400      	movs	r4, #0
   d9ae4:	ea29 73e9 	bic.w	r3, r9, r9, asr #31
   d9ae8:	9312      	str	r3, [sp, #72]	; 0x48
   d9aea:	4625      	mov	r5, r4
   d9aec:	9b05      	ldr	r3, [sp, #20]
   d9aee:	9802      	ldr	r0, [sp, #8]
   d9af0:	6859      	ldr	r1, [r3, #4]
   d9af2:	f001 fa71 	bl	dafd8 <_Balloc>
   d9af6:	9004      	str	r0, [sp, #16]
   d9af8:	2800      	cmp	r0, #0
   d9afa:	f43f af2c 	beq.w	d9956 <_strtod_r+0x48e>
   d9afe:	9b05      	ldr	r3, [sp, #20]
   d9b00:	691a      	ldr	r2, [r3, #16]
   d9b02:	3202      	adds	r2, #2
   d9b04:	f103 010c 	add.w	r1, r3, #12
   d9b08:	0092      	lsls	r2, r2, #2
   d9b0a:	300c      	adds	r0, #12
   d9b0c:	f7ff fbc6 	bl	d929c <memcpy>
   d9b10:	aa1a      	add	r2, sp, #104	; 0x68
   d9b12:	a919      	add	r1, sp, #100	; 0x64
   d9b14:	ec4b ab10 	vmov	d0, sl, fp
   d9b18:	9802      	ldr	r0, [sp, #8]
   d9b1a:	e9cd ab08 	strd	sl, fp, [sp, #32]
   d9b1e:	f001 fd96 	bl	db64e <__d2b>
   d9b22:	9018      	str	r0, [sp, #96]	; 0x60
   d9b24:	2800      	cmp	r0, #0
   d9b26:	f43f af16 	beq.w	d9956 <_strtod_r+0x48e>
   d9b2a:	2101      	movs	r1, #1
   d9b2c:	9802      	ldr	r0, [sp, #8]
   d9b2e:	f001 fb65 	bl	db1fc <__i2b>
   d9b32:	4605      	mov	r5, r0
   d9b34:	2800      	cmp	r0, #0
   d9b36:	f43f af0e 	beq.w	d9956 <_strtod_r+0x48e>
   d9b3a:	9b19      	ldr	r3, [sp, #100]	; 0x64
   d9b3c:	9903      	ldr	r1, [sp, #12]
   d9b3e:	9e1a      	ldr	r6, [sp, #104]	; 0x68
   d9b40:	2b00      	cmp	r3, #0
   d9b42:	bfad      	iteet	ge
   d9b44:	9a0d      	ldrge	r2, [sp, #52]	; 0x34
   d9b46:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   d9b48:	f8dd 8034 	ldrlt.w	r8, [sp, #52]	; 0x34
   d9b4c:	eb02 0803 	addge.w	r8, r2, r3
   d9b50:	bfb8      	it	lt
   d9b52:	1ad2      	sublt	r2, r2, r3
   d9b54:	eba3 0301 	sub.w	r3, r3, r1
   d9b58:	4433      	add	r3, r6
   d9b5a:	49b5      	ldr	r1, [pc, #724]	; (d9e30 <_strtod_r+0x968>)
   d9b5c:	bfa8      	it	ge
   d9b5e:	9a12      	ldrge	r2, [sp, #72]	; 0x48
   d9b60:	3b01      	subs	r3, #1
   d9b62:	428b      	cmp	r3, r1
   d9b64:	f1c6 0636 	rsb	r6, r6, #54	; 0x36
   d9b68:	f280 808a 	bge.w	d9c80 <_strtod_r+0x7b8>
   d9b6c:	1ac9      	subs	r1, r1, r3
   d9b6e:	291f      	cmp	r1, #31
   d9b70:	bfc8      	it	gt
   d9b72:	4fb0      	ldrgt	r7, [pc, #704]	; (d9e34 <_strtod_r+0x96c>)
   d9b74:	f04f 0901 	mov.w	r9, #1
   d9b78:	bfd4      	ite	le
   d9b7a:	fa09 f301 	lslle.w	r3, r9, r1
   d9b7e:	1aff      	subgt	r7, r7, r3
   d9b80:	eba6 0601 	sub.w	r6, r6, r1
   d9b84:	bfd9      	ittee	le
   d9b86:	9306      	strle	r3, [sp, #24]
   d9b88:	2700      	movle	r7, #0
   d9b8a:	fa09 f707 	lslgt.w	r7, r9, r7
   d9b8e:	f8cd 9018 	strgt.w	r9, [sp, #24]
   d9b92:	eb08 0906 	add.w	r9, r8, r6
   d9b96:	9b03      	ldr	r3, [sp, #12]
   d9b98:	45c8      	cmp	r8, r9
   d9b9a:	4416      	add	r6, r2
   d9b9c:	441e      	add	r6, r3
   d9b9e:	4643      	mov	r3, r8
   d9ba0:	bfa8      	it	ge
   d9ba2:	464b      	movge	r3, r9
   d9ba4:	42b3      	cmp	r3, r6
   d9ba6:	bfa8      	it	ge
   d9ba8:	4633      	movge	r3, r6
   d9baa:	2b00      	cmp	r3, #0
   d9bac:	bfc2      	ittt	gt
   d9bae:	ebc3 0909 	rsbgt	r9, r3, r9
   d9bb2:	1af6      	subgt	r6, r6, r3
   d9bb4:	ebc3 0808 	rsbgt	r8, r3, r8
   d9bb8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   d9bba:	2b00      	cmp	r3, #0
   d9bbc:	d164      	bne.n	d9c88 <_strtod_r+0x7c0>
   d9bbe:	f1b9 0f00 	cmp.w	r9, #0
   d9bc2:	dc7a      	bgt.n	d9cba <_strtod_r+0x7f2>
   d9bc4:	9b12      	ldr	r3, [sp, #72]	; 0x48
   d9bc6:	2b00      	cmp	r3, #0
   d9bc8:	f040 8081 	bne.w	d9cce <_strtod_r+0x806>
   d9bcc:	2e00      	cmp	r6, #0
   d9bce:	f300 8088 	bgt.w	d9ce2 <_strtod_r+0x81a>
   d9bd2:	f1b8 0f00 	cmp.w	r8, #0
   d9bd6:	f300 808e 	bgt.w	d9cf6 <_strtod_r+0x82e>
   d9bda:	9a04      	ldr	r2, [sp, #16]
   d9bdc:	9918      	ldr	r1, [sp, #96]	; 0x60
   d9bde:	9802      	ldr	r0, [sp, #8]
   d9be0:	f001 fc61 	bl	db4a6 <__mdiff>
   d9be4:	4604      	mov	r4, r0
   d9be6:	2800      	cmp	r0, #0
   d9be8:	f43f aeb5 	beq.w	d9956 <_strtod_r+0x48e>
   d9bec:	68c3      	ldr	r3, [r0, #12]
   d9bee:	9307      	str	r3, [sp, #28]
   d9bf0:	2300      	movs	r3, #0
   d9bf2:	60c3      	str	r3, [r0, #12]
   d9bf4:	4629      	mov	r1, r5
   d9bf6:	f001 fc3a 	bl	db46e <__mcmp>
   d9bfa:	2800      	cmp	r0, #0
   d9bfc:	f280 8089 	bge.w	d9d12 <_strtod_r+0x84a>
   d9c00:	9b07      	ldr	r3, [sp, #28]
   d9c02:	2b00      	cmp	r3, #0
   d9c04:	f040 8204 	bne.w	da010 <_strtod_r+0xb48>
   d9c08:	f1ba 0f00 	cmp.w	sl, #0
   d9c0c:	f040 8200 	bne.w	da010 <_strtod_r+0xb48>
   d9c10:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d9c14:	2b00      	cmp	r3, #0
   d9c16:	f040 81fb 	bne.w	da010 <_strtod_r+0xb48>
   d9c1a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   d9c1e:	0d1b      	lsrs	r3, r3, #20
   d9c20:	051b      	lsls	r3, r3, #20
   d9c22:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   d9c26:	f240 81f3 	bls.w	da010 <_strtod_r+0xb48>
   d9c2a:	6963      	ldr	r3, [r4, #20]
   d9c2c:	2b00      	cmp	r3, #0
   d9c2e:	d06c      	beq.n	d9d0a <_strtod_r+0x842>
   d9c30:	4621      	mov	r1, r4
   d9c32:	2201      	movs	r2, #1
   d9c34:	9802      	ldr	r0, [sp, #8]
   d9c36:	f001 fbc9 	bl	db3cc <__lshift>
   d9c3a:	4629      	mov	r1, r5
   d9c3c:	4604      	mov	r4, r0
   d9c3e:	f001 fc16 	bl	db46e <__mcmp>
   d9c42:	2800      	cmp	r0, #0
   d9c44:	f340 81e4 	ble.w	da010 <_strtod_r+0xb48>
   d9c48:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   d9c4c:	9a03      	ldr	r2, [sp, #12]
   d9c4e:	0d1b      	lsrs	r3, r3, #20
   d9c50:	051b      	lsls	r3, r3, #20
   d9c52:	2a00      	cmp	r2, #0
   d9c54:	f000 808c 	beq.w	d9d70 <_strtod_r+0x8a8>
   d9c58:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   d9c5c:	f300 8088 	bgt.w	d9d70 <_strtod_r+0x8a8>
   d9c60:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
   d9c64:	f300 81d6 	bgt.w	da014 <_strtod_r+0xb4c>
   d9c68:	9a02      	ldr	r2, [sp, #8]
   d9c6a:	2322      	movs	r3, #34	; 0x22
   d9c6c:	f04f 0a00 	mov.w	sl, #0
   d9c70:	f04f 0b00 	mov.w	fp, #0
   d9c74:	6013      	str	r3, [r2, #0]
   d9c76:	9b05      	ldr	r3, [sp, #20]
   d9c78:	2b00      	cmp	r3, #0
   d9c7a:	f040 81dc 	bne.w	da036 <_strtod_r+0xb6e>
   d9c7e:	e1ee      	b.n	da05e <_strtod_r+0xb96>
   d9c80:	2301      	movs	r3, #1
   d9c82:	2700      	movs	r7, #0
   d9c84:	9306      	str	r3, [sp, #24]
   d9c86:	e784      	b.n	d9b92 <_strtod_r+0x6ca>
   d9c88:	4629      	mov	r1, r5
   d9c8a:	461a      	mov	r2, r3
   d9c8c:	9802      	ldr	r0, [sp, #8]
   d9c8e:	f001 fb4f 	bl	db330 <__pow5mult>
   d9c92:	4605      	mov	r5, r0
   d9c94:	2800      	cmp	r0, #0
   d9c96:	f43f ae5e 	beq.w	d9956 <_strtod_r+0x48e>
   d9c9a:	4601      	mov	r1, r0
   d9c9c:	9a18      	ldr	r2, [sp, #96]	; 0x60
   d9c9e:	9802      	ldr	r0, [sp, #8]
   d9ca0:	f001 fab5 	bl	db20e <__multiply>
   d9ca4:	9007      	str	r0, [sp, #28]
   d9ca6:	2800      	cmp	r0, #0
   d9ca8:	f43f ae55 	beq.w	d9956 <_strtod_r+0x48e>
   d9cac:	9918      	ldr	r1, [sp, #96]	; 0x60
   d9cae:	9802      	ldr	r0, [sp, #8]
   d9cb0:	f001 f9c7 	bl	db042 <_Bfree>
   d9cb4:	9b07      	ldr	r3, [sp, #28]
   d9cb6:	9318      	str	r3, [sp, #96]	; 0x60
   d9cb8:	e781      	b.n	d9bbe <_strtod_r+0x6f6>
   d9cba:	464a      	mov	r2, r9
   d9cbc:	9918      	ldr	r1, [sp, #96]	; 0x60
   d9cbe:	9802      	ldr	r0, [sp, #8]
   d9cc0:	f001 fb84 	bl	db3cc <__lshift>
   d9cc4:	9018      	str	r0, [sp, #96]	; 0x60
   d9cc6:	2800      	cmp	r0, #0
   d9cc8:	f47f af7c 	bne.w	d9bc4 <_strtod_r+0x6fc>
   d9ccc:	e643      	b.n	d9956 <_strtod_r+0x48e>
   d9cce:	9a12      	ldr	r2, [sp, #72]	; 0x48
   d9cd0:	9904      	ldr	r1, [sp, #16]
   d9cd2:	9802      	ldr	r0, [sp, #8]
   d9cd4:	f001 fb2c 	bl	db330 <__pow5mult>
   d9cd8:	9004      	str	r0, [sp, #16]
   d9cda:	2800      	cmp	r0, #0
   d9cdc:	f47f af76 	bne.w	d9bcc <_strtod_r+0x704>
   d9ce0:	e639      	b.n	d9956 <_strtod_r+0x48e>
   d9ce2:	4632      	mov	r2, r6
   d9ce4:	9904      	ldr	r1, [sp, #16]
   d9ce6:	9802      	ldr	r0, [sp, #8]
   d9ce8:	f001 fb70 	bl	db3cc <__lshift>
   d9cec:	9004      	str	r0, [sp, #16]
   d9cee:	2800      	cmp	r0, #0
   d9cf0:	f47f af6f 	bne.w	d9bd2 <_strtod_r+0x70a>
   d9cf4:	e62f      	b.n	d9956 <_strtod_r+0x48e>
   d9cf6:	4629      	mov	r1, r5
   d9cf8:	4642      	mov	r2, r8
   d9cfa:	9802      	ldr	r0, [sp, #8]
   d9cfc:	f001 fb66 	bl	db3cc <__lshift>
   d9d00:	4605      	mov	r5, r0
   d9d02:	2800      	cmp	r0, #0
   d9d04:	f47f af69 	bne.w	d9bda <_strtod_r+0x712>
   d9d08:	e625      	b.n	d9956 <_strtod_r+0x48e>
   d9d0a:	6923      	ldr	r3, [r4, #16]
   d9d0c:	2b01      	cmp	r3, #1
   d9d0e:	dc8f      	bgt.n	d9c30 <_strtod_r+0x768>
   d9d10:	e17e      	b.n	da010 <_strtod_r+0xb48>
   d9d12:	d161      	bne.n	d9dd8 <_strtod_r+0x910>
   d9d14:	9a07      	ldr	r2, [sp, #28]
   d9d16:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d9d1a:	b322      	cbz	r2, d9d66 <_strtod_r+0x89e>
   d9d1c:	4946      	ldr	r1, [pc, #280]	; (d9e38 <_strtod_r+0x970>)
   d9d1e:	428b      	cmp	r3, r1
   d9d20:	465a      	mov	r2, fp
   d9d22:	d12e      	bne.n	d9d82 <_strtod_r+0x8ba>
   d9d24:	9b03      	ldr	r3, [sp, #12]
   d9d26:	4651      	mov	r1, sl
   d9d28:	b163      	cbz	r3, d9d44 <_strtod_r+0x87c>
   d9d2a:	4b44      	ldr	r3, [pc, #272]	; (d9e3c <_strtod_r+0x974>)
   d9d2c:	4013      	ands	r3, r2
   d9d2e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   d9d32:	d807      	bhi.n	d9d44 <_strtod_r+0x87c>
   d9d34:	0d1b      	lsrs	r3, r3, #20
   d9d36:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   d9d3a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d9d3e:	fa00 f303 	lsl.w	r3, r0, r3
   d9d42:	e001      	b.n	d9d48 <_strtod_r+0x880>
   d9d44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d9d48:	428b      	cmp	r3, r1
   d9d4a:	d11a      	bne.n	d9d82 <_strtod_r+0x8ba>
   d9d4c:	493c      	ldr	r1, [pc, #240]	; (d9e40 <_strtod_r+0x978>)
   d9d4e:	428a      	cmp	r2, r1
   d9d50:	d102      	bne.n	d9d58 <_strtod_r+0x890>
   d9d52:	3301      	adds	r3, #1
   d9d54:	f43f adff 	beq.w	d9956 <_strtod_r+0x48e>
   d9d58:	4b38      	ldr	r3, [pc, #224]	; (d9e3c <_strtod_r+0x974>)
   d9d5a:	4013      	ands	r3, r2
   d9d5c:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   d9d60:	f04f 0a00 	mov.w	sl, #0
   d9d64:	e154      	b.n	da010 <_strtod_r+0xb48>
   d9d66:	b963      	cbnz	r3, d9d82 <_strtod_r+0x8ba>
   d9d68:	f1ba 0f00 	cmp.w	sl, #0
   d9d6c:	d109      	bne.n	d9d82 <_strtod_r+0x8ba>
   d9d6e:	e76b      	b.n	d9c48 <_strtod_r+0x780>
   d9d70:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   d9d74:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   d9d78:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   d9d7c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   d9d80:	e146      	b.n	da010 <_strtod_r+0xb48>
   d9d82:	b117      	cbz	r7, d9d8a <_strtod_r+0x8c2>
   d9d84:	ea17 0f0b 	tst.w	r7, fp
   d9d88:	e002      	b.n	d9d90 <_strtod_r+0x8c8>
   d9d8a:	9b06      	ldr	r3, [sp, #24]
   d9d8c:	ea13 0f0a 	tst.w	r3, sl
   d9d90:	f000 813e 	beq.w	da010 <_strtod_r+0xb48>
   d9d94:	9b07      	ldr	r3, [sp, #28]
   d9d96:	9a03      	ldr	r2, [sp, #12]
   d9d98:	4650      	mov	r0, sl
   d9d9a:	4659      	mov	r1, fp
   d9d9c:	b153      	cbz	r3, d9db4 <_strtod_r+0x8ec>
   d9d9e:	f7ff fb75 	bl	d948c <sulp>
   d9da2:	4602      	mov	r2, r0
   d9da4:	460b      	mov	r3, r1
   d9da6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   d9daa:	f7fe fc81 	bl	d86b0 <__adddf3>
   d9dae:	4682      	mov	sl, r0
   d9db0:	468b      	mov	fp, r1
   d9db2:	e12d      	b.n	da010 <_strtod_r+0xb48>
   d9db4:	f7ff fb6a 	bl	d948c <sulp>
   d9db8:	4602      	mov	r2, r0
   d9dba:	460b      	mov	r3, r1
   d9dbc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   d9dc0:	f7fe fc74 	bl	d86ac <__aeabi_dsub>
   d9dc4:	2200      	movs	r2, #0
   d9dc6:	2300      	movs	r3, #0
   d9dc8:	4682      	mov	sl, r0
   d9dca:	468b      	mov	fp, r1
   d9dcc:	f7ff f88a 	bl	d8ee4 <__aeabi_dcmpeq>
   d9dd0:	2800      	cmp	r0, #0
   d9dd2:	f47f af49 	bne.w	d9c68 <_strtod_r+0x7a0>
   d9dd6:	e11b      	b.n	da010 <_strtod_r+0xb48>
   d9dd8:	4629      	mov	r1, r5
   d9dda:	4620      	mov	r0, r4
   d9ddc:	f001 fc85 	bl	db6ea <__ratio>
   d9de0:	ec57 6b10 	vmov	r6, r7, d0
   d9de4:	2200      	movs	r2, #0
   d9de6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   d9dea:	ee10 0a10 	vmov	r0, s0
   d9dee:	4639      	mov	r1, r7
   d9df0:	f7ff f88c 	bl	d8f0c <__aeabi_dcmple>
   d9df4:	2800      	cmp	r0, #0
   d9df6:	d042      	beq.n	d9e7e <_strtod_r+0x9b6>
   d9df8:	9b07      	ldr	r3, [sp, #28]
   d9dfa:	b123      	cbz	r3, d9e06 <_strtod_r+0x93e>
   d9dfc:	f04f 0800 	mov.w	r8, #0
   d9e00:	f8df 9040 	ldr.w	r9, [pc, #64]	; d9e44 <_strtod_r+0x97c>
   d9e04:	e011      	b.n	d9e2a <_strtod_r+0x962>
   d9e06:	f1ba 0f00 	cmp.w	sl, #0
   d9e0a:	d103      	bne.n	d9e14 <_strtod_r+0x94c>
   d9e0c:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d9e10:	b93b      	cbnz	r3, d9e22 <_strtod_r+0x95a>
   d9e12:	e01b      	b.n	d9e4c <_strtod_r+0x984>
   d9e14:	f1ba 0f01 	cmp.w	sl, #1
   d9e18:	d103      	bne.n	d9e22 <_strtod_r+0x95a>
   d9e1a:	f1bb 0f00 	cmp.w	fp, #0
   d9e1e:	f43f af23 	beq.w	d9c68 <_strtod_r+0x7a0>
   d9e22:	f8df 9024 	ldr.w	r9, [pc, #36]	; d9e48 <_strtod_r+0x980>
   d9e26:	f04f 0800 	mov.w	r8, #0
   d9e2a:	2600      	movs	r6, #0
   d9e2c:	4f05      	ldr	r7, [pc, #20]	; (d9e44 <_strtod_r+0x97c>)
   d9e2e:	e039      	b.n	d9ea4 <_strtod_r+0x9dc>
   d9e30:	fffffc02 	.word	0xfffffc02
   d9e34:	fffffbe2 	.word	0xfffffbe2
   d9e38:	000fffff 	.word	0x000fffff
   d9e3c:	7ff00000 	.word	0x7ff00000
   d9e40:	7fefffff 	.word	0x7fefffff
   d9e44:	3ff00000 	.word	0x3ff00000
   d9e48:	bff00000 	.word	0xbff00000
   d9e4c:	2200      	movs	r2, #0
   d9e4e:	4b98      	ldr	r3, [pc, #608]	; (da0b0 <_strtod_r+0xbe8>)
   d9e50:	4630      	mov	r0, r6
   d9e52:	4639      	mov	r1, r7
   d9e54:	f7ff f850 	bl	d8ef8 <__aeabi_dcmplt>
   d9e58:	b940      	cbnz	r0, d9e6c <_strtod_r+0x9a4>
   d9e5a:	4630      	mov	r0, r6
   d9e5c:	4639      	mov	r1, r7
   d9e5e:	2200      	movs	r2, #0
   d9e60:	4b94      	ldr	r3, [pc, #592]	; (da0b4 <_strtod_r+0xbec>)
   d9e62:	f7fe fdd7 	bl	d8a14 <__aeabi_dmul>
   d9e66:	4606      	mov	r6, r0
   d9e68:	460f      	mov	r7, r1
   d9e6a:	e001      	b.n	d9e70 <_strtod_r+0x9a8>
   d9e6c:	4f91      	ldr	r7, [pc, #580]	; (da0b4 <_strtod_r+0xbec>)
   d9e6e:	2600      	movs	r6, #0
   d9e70:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   d9e74:	9614      	str	r6, [sp, #80]	; 0x50
   d9e76:	9315      	str	r3, [sp, #84]	; 0x54
   d9e78:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
   d9e7c:	e012      	b.n	d9ea4 <_strtod_r+0x9dc>
   d9e7e:	4b8d      	ldr	r3, [pc, #564]	; (da0b4 <_strtod_r+0xbec>)
   d9e80:	4630      	mov	r0, r6
   d9e82:	4639      	mov	r1, r7
   d9e84:	2200      	movs	r2, #0
   d9e86:	f7fe fdc5 	bl	d8a14 <__aeabi_dmul>
   d9e8a:	9b07      	ldr	r3, [sp, #28]
   d9e8c:	4606      	mov	r6, r0
   d9e8e:	460f      	mov	r7, r1
   d9e90:	b923      	cbnz	r3, d9e9c <_strtod_r+0x9d4>
   d9e92:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d9e96:	900e      	str	r0, [sp, #56]	; 0x38
   d9e98:	930f      	str	r3, [sp, #60]	; 0x3c
   d9e9a:	e001      	b.n	d9ea0 <_strtod_r+0x9d8>
   d9e9c:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
   d9ea0:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
   d9ea4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   d9ea8:	0d1b      	lsrs	r3, r3, #20
   d9eaa:	051b      	lsls	r3, r3, #20
   d9eac:	9306      	str	r3, [sp, #24]
   d9eae:	9a06      	ldr	r2, [sp, #24]
   d9eb0:	4b81      	ldr	r3, [pc, #516]	; (da0b8 <_strtod_r+0xbf0>)
   d9eb2:	429a      	cmp	r2, r3
   d9eb4:	d12b      	bne.n	d9f0e <_strtod_r+0xa46>
   d9eb6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   d9eba:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   d9ebe:	ec4b ab10 	vmov	d0, sl, fp
   d9ec2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
   d9ec6:	f001 fb4d 	bl	db564 <__ulp>
   d9eca:	4640      	mov	r0, r8
   d9ecc:	ec53 2b10 	vmov	r2, r3, d0
   d9ed0:	4649      	mov	r1, r9
   d9ed2:	f7fe fd9f 	bl	d8a14 <__aeabi_dmul>
   d9ed6:	4652      	mov	r2, sl
   d9ed8:	465b      	mov	r3, fp
   d9eda:	f7fe fbe9 	bl	d86b0 <__adddf3>
   d9ede:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   d9ee2:	0d1b      	lsrs	r3, r3, #20
   d9ee4:	4a75      	ldr	r2, [pc, #468]	; (da0bc <_strtod_r+0xbf4>)
   d9ee6:	051b      	lsls	r3, r3, #20
   d9ee8:	4293      	cmp	r3, r2
   d9eea:	4682      	mov	sl, r0
   d9eec:	d90c      	bls.n	d9f08 <_strtod_r+0xa40>
   d9eee:	4b74      	ldr	r3, [pc, #464]	; (da0c0 <_strtod_r+0xbf8>)
   d9ef0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   d9ef2:	429a      	cmp	r2, r3
   d9ef4:	d103      	bne.n	d9efe <_strtod_r+0xa36>
   d9ef6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d9ef8:	3301      	adds	r3, #1
   d9efa:	f43f ad2c 	beq.w	d9956 <_strtod_r+0x48e>
   d9efe:	f8df b1c0 	ldr.w	fp, [pc, #448]	; da0c0 <_strtod_r+0xbf8>
   d9f02:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   d9f06:	e072      	b.n	d9fee <_strtod_r+0xb26>
   d9f08:	f101 7b54 	add.w	fp, r1, #55574528	; 0x3500000
   d9f0c:	e038      	b.n	d9f80 <_strtod_r+0xab8>
   d9f0e:	9b03      	ldr	r3, [sp, #12]
   d9f10:	b333      	cbz	r3, d9f60 <_strtod_r+0xa98>
   d9f12:	9b06      	ldr	r3, [sp, #24]
   d9f14:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   d9f18:	d822      	bhi.n	d9f60 <_strtod_r+0xa98>
   d9f1a:	a35d      	add	r3, pc, #372	; (adr r3, da090 <_strtod_r+0xbc8>)
   d9f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9f20:	4630      	mov	r0, r6
   d9f22:	4639      	mov	r1, r7
   d9f24:	f7fe fff2 	bl	d8f0c <__aeabi_dcmple>
   d9f28:	b1a8      	cbz	r0, d9f56 <_strtod_r+0xa8e>
   d9f2a:	4639      	mov	r1, r7
   d9f2c:	4630      	mov	r0, r6
   d9f2e:	f7ff f833 	bl	d8f98 <__aeabi_d2uiz>
   d9f32:	2800      	cmp	r0, #0
   d9f34:	bf08      	it	eq
   d9f36:	2001      	moveq	r0, #1
   d9f38:	f7fe fcf6 	bl	d8928 <__aeabi_ui2d>
   d9f3c:	9b07      	ldr	r3, [sp, #28]
   d9f3e:	4606      	mov	r6, r0
   d9f40:	460f      	mov	r7, r1
   d9f42:	b923      	cbnz	r3, d9f4e <_strtod_r+0xa86>
   d9f44:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d9f48:	9010      	str	r0, [sp, #64]	; 0x40
   d9f4a:	9311      	str	r3, [sp, #68]	; 0x44
   d9f4c:	e001      	b.n	d9f52 <_strtod_r+0xa8a>
   d9f4e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
   d9f52:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
   d9f56:	9a06      	ldr	r2, [sp, #24]
   d9f58:	f109 63d6 	add.w	r3, r9, #112197632	; 0x6b00000
   d9f5c:	ebc2 0903 	rsb	r9, r2, r3
   d9f60:	ed9d 0b08 	vldr	d0, [sp, #32]
   d9f64:	f001 fafe 	bl	db564 <__ulp>
   d9f68:	4640      	mov	r0, r8
   d9f6a:	ec53 2b10 	vmov	r2, r3, d0
   d9f6e:	4649      	mov	r1, r9
   d9f70:	f7fe fd50 	bl	d8a14 <__aeabi_dmul>
   d9f74:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   d9f78:	f7fe fb9a 	bl	d86b0 <__adddf3>
   d9f7c:	4682      	mov	sl, r0
   d9f7e:	468b      	mov	fp, r1
   d9f80:	9b03      	ldr	r3, [sp, #12]
   d9f82:	bba3      	cbnz	r3, d9fee <_strtod_r+0xb26>
   d9f84:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   d9f88:	0d1b      	lsrs	r3, r3, #20
   d9f8a:	9a06      	ldr	r2, [sp, #24]
   d9f8c:	051b      	lsls	r3, r3, #20
   d9f8e:	429a      	cmp	r2, r3
   d9f90:	46d8      	mov	r8, fp
   d9f92:	d12c      	bne.n	d9fee <_strtod_r+0xb26>
   d9f94:	4639      	mov	r1, r7
   d9f96:	4630      	mov	r0, r6
   d9f98:	f7fe ffd6 	bl	d8f48 <__aeabi_d2iz>
   d9f9c:	f7fe fcd4 	bl	d8948 <__aeabi_i2d>
   d9fa0:	460b      	mov	r3, r1
   d9fa2:	4602      	mov	r2, r0
   d9fa4:	4639      	mov	r1, r7
   d9fa6:	4630      	mov	r0, r6
   d9fa8:	f7fe fb80 	bl	d86ac <__aeabi_dsub>
   d9fac:	9b07      	ldr	r3, [sp, #28]
   d9fae:	4606      	mov	r6, r0
   d9fb0:	460f      	mov	r7, r1
   d9fb2:	b92b      	cbnz	r3, d9fc0 <_strtod_r+0xaf8>
   d9fb4:	f1ba 0f00 	cmp.w	sl, #0
   d9fb8:	d102      	bne.n	d9fc0 <_strtod_r+0xaf8>
   d9fba:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d9fbe:	b183      	cbz	r3, d9fe2 <_strtod_r+0xb1a>
   d9fc0:	a335      	add	r3, pc, #212	; (adr r3, da098 <_strtod_r+0xbd0>)
   d9fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9fc6:	4630      	mov	r0, r6
   d9fc8:	4639      	mov	r1, r7
   d9fca:	f7fe ff95 	bl	d8ef8 <__aeabi_dcmplt>
   d9fce:	2800      	cmp	r0, #0
   d9fd0:	d131      	bne.n	da036 <_strtod_r+0xb6e>
   d9fd2:	a333      	add	r3, pc, #204	; (adr r3, da0a0 <_strtod_r+0xbd8>)
   d9fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9fd8:	4630      	mov	r0, r6
   d9fda:	4639      	mov	r1, r7
   d9fdc:	f7fe ffaa 	bl	d8f34 <__aeabi_dcmpgt>
   d9fe0:	e004      	b.n	d9fec <_strtod_r+0xb24>
   d9fe2:	a331      	add	r3, pc, #196	; (adr r3, da0a8 <_strtod_r+0xbe0>)
   d9fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9fe8:	f7fe ff86 	bl	d8ef8 <__aeabi_dcmplt>
   d9fec:	bb18      	cbnz	r0, da036 <_strtod_r+0xb6e>
   d9fee:	9918      	ldr	r1, [sp, #96]	; 0x60
   d9ff0:	9802      	ldr	r0, [sp, #8]
   d9ff2:	f001 f826 	bl	db042 <_Bfree>
   d9ff6:	9904      	ldr	r1, [sp, #16]
   d9ff8:	9802      	ldr	r0, [sp, #8]
   d9ffa:	f001 f822 	bl	db042 <_Bfree>
   d9ffe:	4629      	mov	r1, r5
   da000:	9802      	ldr	r0, [sp, #8]
   da002:	f001 f81e 	bl	db042 <_Bfree>
   da006:	4621      	mov	r1, r4
   da008:	9802      	ldr	r0, [sp, #8]
   da00a:	f001 f81a 	bl	db042 <_Bfree>
   da00e:	e56d      	b.n	d9aec <_strtod_r+0x624>
   da010:	9b03      	ldr	r3, [sp, #12]
   da012:	b183      	cbz	r3, da036 <_strtod_r+0xb6e>
   da014:	4b2b      	ldr	r3, [pc, #172]	; (da0c4 <_strtod_r+0xbfc>)
   da016:	930b      	str	r3, [sp, #44]	; 0x2c
   da018:	2300      	movs	r3, #0
   da01a:	930a      	str	r3, [sp, #40]	; 0x28
   da01c:	4650      	mov	r0, sl
   da01e:	4659      	mov	r1, fp
   da020:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   da024:	f7fe fcf6 	bl	d8a14 <__aeabi_dmul>
   da028:	4682      	mov	sl, r0
   da02a:	468b      	mov	fp, r1
   da02c:	b919      	cbnz	r1, da036 <_strtod_r+0xb6e>
   da02e:	b910      	cbnz	r0, da036 <_strtod_r+0xb6e>
   da030:	9a02      	ldr	r2, [sp, #8]
   da032:	2322      	movs	r3, #34	; 0x22
   da034:	6013      	str	r3, [r2, #0]
   da036:	9918      	ldr	r1, [sp, #96]	; 0x60
   da038:	9802      	ldr	r0, [sp, #8]
   da03a:	f001 f802 	bl	db042 <_Bfree>
   da03e:	9904      	ldr	r1, [sp, #16]
   da040:	9802      	ldr	r0, [sp, #8]
   da042:	f000 fffe 	bl	db042 <_Bfree>
   da046:	4629      	mov	r1, r5
   da048:	9802      	ldr	r0, [sp, #8]
   da04a:	f000 fffa 	bl	db042 <_Bfree>
   da04e:	9905      	ldr	r1, [sp, #20]
   da050:	9802      	ldr	r0, [sp, #8]
   da052:	f000 fff6 	bl	db042 <_Bfree>
   da056:	4621      	mov	r1, r4
   da058:	9802      	ldr	r0, [sp, #8]
   da05a:	f000 fff2 	bl	db042 <_Bfree>
   da05e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   da060:	b113      	cbz	r3, da068 <_strtod_r+0xba0>
   da062:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   da064:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   da066:	6013      	str	r3, [r2, #0]
   da068:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   da06a:	b11b      	cbz	r3, da074 <_strtod_r+0xbac>
   da06c:	4652      	mov	r2, sl
   da06e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   da072:	e007      	b.n	da084 <_strtod_r+0xbbc>
   da074:	4652      	mov	r2, sl
   da076:	465b      	mov	r3, fp
   da078:	e004      	b.n	da084 <_strtod_r+0xbbc>
   da07a:	2500      	movs	r5, #0
   da07c:	462a      	mov	r2, r5
   da07e:	2101      	movs	r1, #1
   da080:	f7ff bb41 	b.w	d9706 <_strtod_r+0x23e>
   da084:	ec43 2b10 	vmov	d0, r2, r3
   da088:	b01d      	add	sp, #116	; 0x74
   da08a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   da08e:	bf00      	nop
   da090:	ffc00000 	.word	0xffc00000
   da094:	41dfffff 	.word	0x41dfffff
   da098:	94a03595 	.word	0x94a03595
   da09c:	3fdfffff 	.word	0x3fdfffff
   da0a0:	35afe535 	.word	0x35afe535
   da0a4:	3fe00000 	.word	0x3fe00000
   da0a8:	94a03595 	.word	0x94a03595
   da0ac:	3fcfffff 	.word	0x3fcfffff
   da0b0:	3ff00000 	.word	0x3ff00000
   da0b4:	3fe00000 	.word	0x3fe00000
   da0b8:	7fe00000 	.word	0x7fe00000
   da0bc:	7c9fffff 	.word	0x7c9fffff
   da0c0:	7fefffff 	.word	0x7fefffff
   da0c4:	39500000 	.word	0x39500000

000da0c8 <strtod>:
   da0c8:	4b02      	ldr	r3, [pc, #8]	; (da0d4 <strtod+0xc>)
   da0ca:	460a      	mov	r2, r1
   da0cc:	4601      	mov	r1, r0
   da0ce:	6818      	ldr	r0, [r3, #0]
   da0d0:	f7ff b9fa 	b.w	d94c8 <_strtod_r>
   da0d4:	2003e118 	.word	0x2003e118

000da0d8 <__strtok_r>:
   da0d8:	b5f0      	push	{r4, r5, r6, r7, lr}
   da0da:	b948      	cbnz	r0, da0f0 <__strtok_r+0x18>
   da0dc:	6810      	ldr	r0, [r2, #0]
   da0de:	b938      	cbnz	r0, da0f0 <__strtok_r+0x18>
   da0e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   da0e2:	f817 6b01 	ldrb.w	r6, [r7], #1
   da0e6:	b15e      	cbz	r6, da100 <__strtok_r+0x28>
   da0e8:	42b5      	cmp	r5, r6
   da0ea:	d1fa      	bne.n	da0e2 <__strtok_r+0xa>
   da0ec:	b12b      	cbz	r3, da0fa <__strtok_r+0x22>
   da0ee:	4620      	mov	r0, r4
   da0f0:	4604      	mov	r4, r0
   da0f2:	460f      	mov	r7, r1
   da0f4:	f814 5b01 	ldrb.w	r5, [r4], #1
   da0f8:	e7f3      	b.n	da0e2 <__strtok_r+0xa>
   da0fa:	6014      	str	r4, [r2, #0]
   da0fc:	7003      	strb	r3, [r0, #0]
   da0fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
   da100:	b94d      	cbnz	r5, da116 <__strtok_r+0x3e>
   da102:	6015      	str	r5, [r2, #0]
   da104:	4628      	mov	r0, r5
   da106:	bdf0      	pop	{r4, r5, r6, r7, pc}
   da108:	f817 6b01 	ldrb.w	r6, [r7], #1
   da10c:	42b5      	cmp	r5, r6
   da10e:	d007      	beq.n	da120 <__strtok_r+0x48>
   da110:	2e00      	cmp	r6, #0
   da112:	d1f9      	bne.n	da108 <__strtok_r+0x30>
   da114:	461c      	mov	r4, r3
   da116:	4623      	mov	r3, r4
   da118:	460f      	mov	r7, r1
   da11a:	f813 5b01 	ldrb.w	r5, [r3], #1
   da11e:	e7f3      	b.n	da108 <__strtok_r+0x30>
   da120:	b115      	cbz	r5, da128 <__strtok_r+0x50>
   da122:	2100      	movs	r1, #0
   da124:	7021      	strb	r1, [r4, #0]
   da126:	e000      	b.n	da12a <__strtok_r+0x52>
   da128:	462b      	mov	r3, r5
   da12a:	6013      	str	r3, [r2, #0]
   da12c:	bdf0      	pop	{r4, r5, r6, r7, pc}

000da12e <strtok_r>:
   da12e:	2301      	movs	r3, #1
   da130:	f7ff bfd2 	b.w	da0d8 <__strtok_r>

000da134 <_strtol_r>:
   da134:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   da138:	4680      	mov	r8, r0
   da13a:	4840      	ldr	r0, [pc, #256]	; (da23c <_strtol_r+0x108>)
   da13c:	f8d0 9000 	ldr.w	r9, [r0]
   da140:	460f      	mov	r7, r1
   da142:	463d      	mov	r5, r7
   da144:	f815 4b01 	ldrb.w	r4, [r5], #1
   da148:	eb09 0004 	add.w	r0, r9, r4
   da14c:	7840      	ldrb	r0, [r0, #1]
   da14e:	f000 0008 	and.w	r0, r0, #8
   da152:	f000 06ff 	and.w	r6, r0, #255	; 0xff
   da156:	b108      	cbz	r0, da15c <_strtol_r+0x28>
   da158:	462f      	mov	r7, r5
   da15a:	e7f2      	b.n	da142 <_strtol_r+0xe>
   da15c:	2c2d      	cmp	r4, #45	; 0x2d
   da15e:	d103      	bne.n	da168 <_strtol_r+0x34>
   da160:	1cbd      	adds	r5, r7, #2
   da162:	787c      	ldrb	r4, [r7, #1]
   da164:	2601      	movs	r6, #1
   da166:	e003      	b.n	da170 <_strtol_r+0x3c>
   da168:	2c2b      	cmp	r4, #43	; 0x2b
   da16a:	bf04      	itt	eq
   da16c:	787c      	ldrbeq	r4, [r7, #1]
   da16e:	1cbd      	addeq	r5, r7, #2
   da170:	b113      	cbz	r3, da178 <_strtol_r+0x44>
   da172:	2b10      	cmp	r3, #16
   da174:	d10a      	bne.n	da18c <_strtol_r+0x58>
   da176:	e05b      	b.n	da230 <_strtol_r+0xfc>
   da178:	2c30      	cmp	r4, #48	; 0x30
   da17a:	d157      	bne.n	da22c <_strtol_r+0xf8>
   da17c:	7828      	ldrb	r0, [r5, #0]
   da17e:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   da182:	2858      	cmp	r0, #88	; 0x58
   da184:	d14d      	bne.n	da222 <_strtol_r+0xee>
   da186:	786c      	ldrb	r4, [r5, #1]
   da188:	2310      	movs	r3, #16
   da18a:	3502      	adds	r5, #2
   da18c:	2e00      	cmp	r6, #0
   da18e:	bf14      	ite	ne
   da190:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
   da194:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
   da198:	2700      	movs	r7, #0
   da19a:	fbbc faf3 	udiv	sl, ip, r3
   da19e:	4638      	mov	r0, r7
   da1a0:	fb03 cc1a 	mls	ip, r3, sl, ip
   da1a4:	eb09 0e04 	add.w	lr, r9, r4
   da1a8:	f89e e001 	ldrb.w	lr, [lr, #1]
   da1ac:	f01e 0f04 	tst.w	lr, #4
   da1b0:	d001      	beq.n	da1b6 <_strtol_r+0x82>
   da1b2:	3c30      	subs	r4, #48	; 0x30
   da1b4:	e00b      	b.n	da1ce <_strtol_r+0x9a>
   da1b6:	f01e 0e03 	ands.w	lr, lr, #3
   da1ba:	d01b      	beq.n	da1f4 <_strtol_r+0xc0>
   da1bc:	f1be 0f01 	cmp.w	lr, #1
   da1c0:	bf0c      	ite	eq
   da1c2:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   da1c6:	f04f 0e57 	movne.w	lr, #87	; 0x57
   da1ca:	ebce 0404 	rsb	r4, lr, r4
   da1ce:	42a3      	cmp	r3, r4
   da1d0:	dd10      	ble.n	da1f4 <_strtol_r+0xc0>
   da1d2:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
   da1d6:	d00a      	beq.n	da1ee <_strtol_r+0xba>
   da1d8:	4550      	cmp	r0, sl
   da1da:	d806      	bhi.n	da1ea <_strtol_r+0xb6>
   da1dc:	d101      	bne.n	da1e2 <_strtol_r+0xae>
   da1de:	4564      	cmp	r4, ip
   da1e0:	dc03      	bgt.n	da1ea <_strtol_r+0xb6>
   da1e2:	fb03 4000 	mla	r0, r3, r0, r4
   da1e6:	2701      	movs	r7, #1
   da1e8:	e001      	b.n	da1ee <_strtol_r+0xba>
   da1ea:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   da1ee:	f815 4b01 	ldrb.w	r4, [r5], #1
   da1f2:	e7d7      	b.n	da1a4 <_strtol_r+0x70>
   da1f4:	1c7b      	adds	r3, r7, #1
   da1f6:	d10c      	bne.n	da212 <_strtol_r+0xde>
   da1f8:	2e00      	cmp	r6, #0
   da1fa:	f04f 0322 	mov.w	r3, #34	; 0x22
   da1fe:	bf14      	ite	ne
   da200:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   da204:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   da208:	f8c8 3000 	str.w	r3, [r8]
   da20c:	b92a      	cbnz	r2, da21a <_strtol_r+0xe6>
   da20e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   da212:	b106      	cbz	r6, da216 <_strtol_r+0xe2>
   da214:	4240      	negs	r0, r0
   da216:	b172      	cbz	r2, da236 <_strtol_r+0x102>
   da218:	b107      	cbz	r7, da21c <_strtol_r+0xe8>
   da21a:	1e69      	subs	r1, r5, #1
   da21c:	6011      	str	r1, [r2, #0]
   da21e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   da222:	2430      	movs	r4, #48	; 0x30
   da224:	2b00      	cmp	r3, #0
   da226:	d1b1      	bne.n	da18c <_strtol_r+0x58>
   da228:	2308      	movs	r3, #8
   da22a:	e7af      	b.n	da18c <_strtol_r+0x58>
   da22c:	230a      	movs	r3, #10
   da22e:	e7ad      	b.n	da18c <_strtol_r+0x58>
   da230:	2c30      	cmp	r4, #48	; 0x30
   da232:	d0a3      	beq.n	da17c <_strtol_r+0x48>
   da234:	e7aa      	b.n	da18c <_strtol_r+0x58>
   da236:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   da23a:	bf00      	nop
   da23c:	2003e0b4 	.word	0x2003e0b4

000da240 <strtol>:
   da240:	4613      	mov	r3, r2
   da242:	460a      	mov	r2, r1
   da244:	4601      	mov	r1, r0
   da246:	4802      	ldr	r0, [pc, #8]	; (da250 <strtol+0x10>)
   da248:	6800      	ldr	r0, [r0, #0]
   da24a:	f7ff bf73 	b.w	da134 <_strtol_r>
   da24e:	bf00      	nop
   da250:	2003e118 	.word	0x2003e118

000da254 <_strtoul_r>:
   da254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   da258:	4680      	mov	r8, r0
   da25a:	483c      	ldr	r0, [pc, #240]	; (da34c <_strtoul_r+0xf8>)
   da25c:	f8d0 9000 	ldr.w	r9, [r0]
   da260:	460e      	mov	r6, r1
   da262:	4635      	mov	r5, r6
   da264:	f815 4b01 	ldrb.w	r4, [r5], #1
   da268:	eb09 0004 	add.w	r0, r9, r4
   da26c:	7840      	ldrb	r0, [r0, #1]
   da26e:	f000 0008 	and.w	r0, r0, #8
   da272:	f000 07ff 	and.w	r7, r0, #255	; 0xff
   da276:	b108      	cbz	r0, da27c <_strtoul_r+0x28>
   da278:	462e      	mov	r6, r5
   da27a:	e7f2      	b.n	da262 <_strtoul_r+0xe>
   da27c:	2c2d      	cmp	r4, #45	; 0x2d
   da27e:	d103      	bne.n	da288 <_strtoul_r+0x34>
   da280:	1cb5      	adds	r5, r6, #2
   da282:	7874      	ldrb	r4, [r6, #1]
   da284:	2701      	movs	r7, #1
   da286:	e003      	b.n	da290 <_strtoul_r+0x3c>
   da288:	2c2b      	cmp	r4, #43	; 0x2b
   da28a:	bf04      	itt	eq
   da28c:	7874      	ldrbeq	r4, [r6, #1]
   da28e:	1cb5      	addeq	r5, r6, #2
   da290:	b113      	cbz	r3, da298 <_strtoul_r+0x44>
   da292:	2b10      	cmp	r3, #16
   da294:	d10a      	bne.n	da2ac <_strtoul_r+0x58>
   da296:	e053      	b.n	da340 <_strtoul_r+0xec>
   da298:	2c30      	cmp	r4, #48	; 0x30
   da29a:	d14f      	bne.n	da33c <_strtoul_r+0xe8>
   da29c:	7828      	ldrb	r0, [r5, #0]
   da29e:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   da2a2:	2858      	cmp	r0, #88	; 0x58
   da2a4:	d145      	bne.n	da332 <_strtoul_r+0xde>
   da2a6:	786c      	ldrb	r4, [r5, #1]
   da2a8:	2310      	movs	r3, #16
   da2aa:	3502      	adds	r5, #2
   da2ac:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   da2b0:	2600      	movs	r6, #0
   da2b2:	fbbc fcf3 	udiv	ip, ip, r3
   da2b6:	fb03 fa0c 	mul.w	sl, r3, ip
   da2ba:	ea6f 0a0a 	mvn.w	sl, sl
   da2be:	4630      	mov	r0, r6
   da2c0:	eb09 0e04 	add.w	lr, r9, r4
   da2c4:	f89e e001 	ldrb.w	lr, [lr, #1]
   da2c8:	f01e 0f04 	tst.w	lr, #4
   da2cc:	d001      	beq.n	da2d2 <_strtoul_r+0x7e>
   da2ce:	3c30      	subs	r4, #48	; 0x30
   da2d0:	e00b      	b.n	da2ea <_strtoul_r+0x96>
   da2d2:	f01e 0e03 	ands.w	lr, lr, #3
   da2d6:	d01a      	beq.n	da30e <_strtoul_r+0xba>
   da2d8:	f1be 0f01 	cmp.w	lr, #1
   da2dc:	bf0c      	ite	eq
   da2de:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   da2e2:	f04f 0e57 	movne.w	lr, #87	; 0x57
   da2e6:	ebce 0404 	rsb	r4, lr, r4
   da2ea:	42a3      	cmp	r3, r4
   da2ec:	dd0f      	ble.n	da30e <_strtoul_r+0xba>
   da2ee:	2e00      	cmp	r6, #0
   da2f0:	db08      	blt.n	da304 <_strtoul_r+0xb0>
   da2f2:	4560      	cmp	r0, ip
   da2f4:	d806      	bhi.n	da304 <_strtoul_r+0xb0>
   da2f6:	d101      	bne.n	da2fc <_strtoul_r+0xa8>
   da2f8:	4554      	cmp	r4, sl
   da2fa:	dc03      	bgt.n	da304 <_strtoul_r+0xb0>
   da2fc:	fb03 4000 	mla	r0, r3, r0, r4
   da300:	2601      	movs	r6, #1
   da302:	e001      	b.n	da308 <_strtoul_r+0xb4>
   da304:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   da308:	f815 4b01 	ldrb.w	r4, [r5], #1
   da30c:	e7d8      	b.n	da2c0 <_strtoul_r+0x6c>
   da30e:	2e00      	cmp	r6, #0
   da310:	da07      	bge.n	da322 <_strtoul_r+0xce>
   da312:	2322      	movs	r3, #34	; 0x22
   da314:	f8c8 3000 	str.w	r3, [r8]
   da318:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   da31c:	b92a      	cbnz	r2, da32a <_strtoul_r+0xd6>
   da31e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   da322:	b107      	cbz	r7, da326 <_strtoul_r+0xd2>
   da324:	4240      	negs	r0, r0
   da326:	b172      	cbz	r2, da346 <_strtoul_r+0xf2>
   da328:	b106      	cbz	r6, da32c <_strtoul_r+0xd8>
   da32a:	1e69      	subs	r1, r5, #1
   da32c:	6011      	str	r1, [r2, #0]
   da32e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   da332:	2430      	movs	r4, #48	; 0x30
   da334:	2b00      	cmp	r3, #0
   da336:	d1b9      	bne.n	da2ac <_strtoul_r+0x58>
   da338:	2308      	movs	r3, #8
   da33a:	e7b7      	b.n	da2ac <_strtoul_r+0x58>
   da33c:	230a      	movs	r3, #10
   da33e:	e7b5      	b.n	da2ac <_strtoul_r+0x58>
   da340:	2c30      	cmp	r4, #48	; 0x30
   da342:	d0ab      	beq.n	da29c <_strtoul_r+0x48>
   da344:	e7b2      	b.n	da2ac <_strtoul_r+0x58>
   da346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   da34a:	bf00      	nop
   da34c:	2003e0b4 	.word	0x2003e0b4

000da350 <strtoul>:
   da350:	4613      	mov	r3, r2
   da352:	460a      	mov	r2, r1
   da354:	4601      	mov	r1, r0
   da356:	4802      	ldr	r0, [pc, #8]	; (da360 <strtoul+0x10>)
   da358:	6800      	ldr	r0, [r0, #0]
   da35a:	f7ff bf7b 	b.w	da254 <_strtoul_r>
   da35e:	bf00      	nop
   da360:	2003e118 	.word	0x2003e118

000da364 <toupper>:
   da364:	4b04      	ldr	r3, [pc, #16]	; (da378 <toupper+0x14>)
   da366:	681b      	ldr	r3, [r3, #0]
   da368:	4403      	add	r3, r0
   da36a:	785b      	ldrb	r3, [r3, #1]
   da36c:	f003 0303 	and.w	r3, r3, #3
   da370:	2b02      	cmp	r3, #2
   da372:	bf08      	it	eq
   da374:	3820      	subeq	r0, #32
   da376:	4770      	bx	lr
   da378:	2003e0b4 	.word	0x2003e0b4

000da37c <__tzcalc_limits>:
   da37c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da380:	4604      	mov	r4, r0
   da382:	f000 fd8d 	bl	daea0 <__gettzinfo>
   da386:	f240 73b1 	movw	r3, #1969	; 0x7b1
   da38a:	429c      	cmp	r4, r3
   da38c:	f340 8096 	ble.w	da4bc <__tzcalc_limits+0x140>
   da390:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
   da394:	18e3      	adds	r3, r4, r3
   da396:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
   da39a:	109b      	asrs	r3, r3, #2
   da39c:	f240 156d 	movw	r5, #365	; 0x16d
   da3a0:	fb05 3502 	mla	r5, r5, r2, r3
   da3a4:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
   da3a8:	f06f 0363 	mvn.w	r3, #99	; 0x63
   da3ac:	fb92 f3f3 	sdiv	r3, r2, r3
   da3b0:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
   da3b4:	442b      	add	r3, r5
   da3b6:	18a5      	adds	r5, r4, r2
   da3b8:	f44f 72c8 	mov.w	r2, #400	; 0x190
   da3bc:	fb95 f5f2 	sdiv	r5, r5, r2
   da3c0:	441d      	add	r5, r3
   da3c2:	2364      	movs	r3, #100	; 0x64
   da3c4:	fb94 f7f2 	sdiv	r7, r4, r2
   da3c8:	fb94 f6f3 	sdiv	r6, r4, r3
   da3cc:	fb02 4717 	mls	r7, r2, r7, r4
   da3d0:	fb03 4616 	mls	r6, r3, r6, r4
   da3d4:	f100 0338 	add.w	r3, r0, #56	; 0x38
   da3d8:	fab7 fe87 	clz	lr, r7
   da3dc:	9301      	str	r3, [sp, #4]
   da3de:	f004 0303 	and.w	r3, r4, #3
   da3e2:	6044      	str	r4, [r0, #4]
   da3e4:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
   da3e8:	4601      	mov	r1, r0
   da3ea:	9300      	str	r3, [sp, #0]
   da3ec:	f04f 0c07 	mov.w	ip, #7
   da3f0:	7a0b      	ldrb	r3, [r1, #8]
   da3f2:	2b4a      	cmp	r3, #74	; 0x4a
   da3f4:	d10e      	bne.n	da414 <__tzcalc_limits+0x98>
   da3f6:	694b      	ldr	r3, [r1, #20]
   da3f8:	9a00      	ldr	r2, [sp, #0]
   da3fa:	18ec      	adds	r4, r5, r3
   da3fc:	b902      	cbnz	r2, da400 <__tzcalc_limits+0x84>
   da3fe:	b906      	cbnz	r6, da402 <__tzcalc_limits+0x86>
   da400:	b927      	cbnz	r7, da40c <__tzcalc_limits+0x90>
   da402:	2b3b      	cmp	r3, #59	; 0x3b
   da404:	bfd4      	ite	le
   da406:	2300      	movle	r3, #0
   da408:	2301      	movgt	r3, #1
   da40a:	e000      	b.n	da40e <__tzcalc_limits+0x92>
   da40c:	2300      	movs	r3, #0
   da40e:	4423      	add	r3, r4
   da410:	3b01      	subs	r3, #1
   da412:	e03f      	b.n	da494 <__tzcalc_limits+0x118>
   da414:	2b44      	cmp	r3, #68	; 0x44
   da416:	d102      	bne.n	da41e <__tzcalc_limits+0xa2>
   da418:	694b      	ldr	r3, [r1, #20]
   da41a:	442b      	add	r3, r5
   da41c:	e03a      	b.n	da494 <__tzcalc_limits+0x118>
   da41e:	9b00      	ldr	r3, [sp, #0]
   da420:	b92b      	cbnz	r3, da42e <__tzcalc_limits+0xb2>
   da422:	2e00      	cmp	r6, #0
   da424:	bf0c      	ite	eq
   da426:	46f0      	moveq	r8, lr
   da428:	f04f 0801 	movne.w	r8, #1
   da42c:	e000      	b.n	da430 <__tzcalc_limits+0xb4>
   da42e:	46f0      	mov	r8, lr
   da430:	4b24      	ldr	r3, [pc, #144]	; (da4c4 <__tzcalc_limits+0x148>)
   da432:	68cc      	ldr	r4, [r1, #12]
   da434:	2230      	movs	r2, #48	; 0x30
   da436:	fb02 3808 	mla	r8, r2, r8, r3
   da43a:	f1a8 0a04 	sub.w	sl, r8, #4
   da43e:	46a9      	mov	r9, r5
   da440:	2301      	movs	r3, #1
   da442:	42a3      	cmp	r3, r4
   da444:	da04      	bge.n	da450 <__tzcalc_limits+0xd4>
   da446:	f85a bf04 	ldr.w	fp, [sl, #4]!
   da44a:	3301      	adds	r3, #1
   da44c:	44d9      	add	r9, fp
   da44e:	e7f8      	b.n	da442 <__tzcalc_limits+0xc6>
   da450:	f109 0304 	add.w	r3, r9, #4
   da454:	fb93 fbfc 	sdiv	fp, r3, ip
   da458:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
   da45c:	2c01      	cmp	r4, #1
   da45e:	ebca 0a03 	rsb	sl, sl, r3
   da462:	694b      	ldr	r3, [r1, #20]
   da464:	bfb8      	it	lt
   da466:	2401      	movlt	r4, #1
   da468:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   da46c:	ebb3 0a0a 	subs.w	sl, r3, sl
   da470:	690b      	ldr	r3, [r1, #16]
   da472:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
   da476:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   da47a:	bf48      	it	mi
   da47c:	f10a 0a07 	addmi.w	sl, sl, #7
   da480:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   da484:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
   da488:	4453      	add	r3, sl
   da48a:	42a3      	cmp	r3, r4
   da48c:	db01      	blt.n	da492 <__tzcalc_limits+0x116>
   da48e:	3b07      	subs	r3, #7
   da490:	e7fb      	b.n	da48a <__tzcalc_limits+0x10e>
   da492:	444b      	add	r3, r9
   da494:	698c      	ldr	r4, [r1, #24]
   da496:	4a0c      	ldr	r2, [pc, #48]	; (da4c8 <__tzcalc_limits+0x14c>)
   da498:	fb02 4303 	mla	r3, r2, r3, r4
   da49c:	6a0c      	ldr	r4, [r1, #32]
   da49e:	4423      	add	r3, r4
   da4a0:	f841 3f1c 	str.w	r3, [r1, #28]!
   da4a4:	9b01      	ldr	r3, [sp, #4]
   da4a6:	4299      	cmp	r1, r3
   da4a8:	d1a2      	bne.n	da3f0 <__tzcalc_limits+0x74>
   da4aa:	69c3      	ldr	r3, [r0, #28]
   da4ac:	6b82      	ldr	r2, [r0, #56]	; 0x38
   da4ae:	4293      	cmp	r3, r2
   da4b0:	bfac      	ite	ge
   da4b2:	2300      	movge	r3, #0
   da4b4:	2301      	movlt	r3, #1
   da4b6:	6003      	str	r3, [r0, #0]
   da4b8:	2001      	movs	r0, #1
   da4ba:	e000      	b.n	da4be <__tzcalc_limits+0x142>
   da4bc:	2000      	movs	r0, #0
   da4be:	b003      	add	sp, #12
   da4c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   da4c4:	000dc494 	.word	0x000dc494
   da4c8:	00015180 	.word	0x00015180

000da4cc <__tz_lock>:
   da4cc:	4770      	bx	lr

000da4ce <__tz_unlock>:
   da4ce:	4770      	bx	lr

000da4d0 <_tzset_unlocked>:
   da4d0:	4b01      	ldr	r3, [pc, #4]	; (da4d8 <_tzset_unlocked+0x8>)
   da4d2:	6818      	ldr	r0, [r3, #0]
   da4d4:	f000 b802 	b.w	da4dc <_tzset_unlocked_r>
   da4d8:	2003e118 	.word	0x2003e118

000da4dc <_tzset_unlocked_r>:
   da4dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da4e0:	b08d      	sub	sp, #52	; 0x34
   da4e2:	4607      	mov	r7, r0
   da4e4:	f000 fcdc 	bl	daea0 <__gettzinfo>
   da4e8:	49b0      	ldr	r1, [pc, #704]	; (da7ac <_tzset_unlocked_r+0x2d0>)
   da4ea:	4eb1      	ldr	r6, [pc, #708]	; (da7b0 <_tzset_unlocked_r+0x2d4>)
   da4ec:	4604      	mov	r4, r0
   da4ee:	4638      	mov	r0, r7
   da4f0:	f000 fcce 	bl	dae90 <_getenv_r>
   da4f4:	4605      	mov	r5, r0
   da4f6:	b960      	cbnz	r0, da512 <_tzset_unlocked_r+0x36>
   da4f8:	4bae      	ldr	r3, [pc, #696]	; (da7b4 <_tzset_unlocked_r+0x2d8>)
   da4fa:	4aaf      	ldr	r2, [pc, #700]	; (da7b8 <_tzset_unlocked_r+0x2dc>)
   da4fc:	6018      	str	r0, [r3, #0]
   da4fe:	4baf      	ldr	r3, [pc, #700]	; (da7bc <_tzset_unlocked_r+0x2e0>)
   da500:	6018      	str	r0, [r3, #0]
   da502:	4baf      	ldr	r3, [pc, #700]	; (da7c0 <_tzset_unlocked_r+0x2e4>)
   da504:	6830      	ldr	r0, [r6, #0]
   da506:	601a      	str	r2, [r3, #0]
   da508:	605a      	str	r2, [r3, #4]
   da50a:	f7fb faf7 	bl	d5afc <free>
   da50e:	6035      	str	r5, [r6, #0]
   da510:	e148      	b.n	da7a4 <_tzset_unlocked_r+0x2c8>
   da512:	6831      	ldr	r1, [r6, #0]
   da514:	b979      	cbnz	r1, da536 <_tzset_unlocked_r+0x5a>
   da516:	6830      	ldr	r0, [r6, #0]
   da518:	f7fb faf0 	bl	d5afc <free>
   da51c:	4628      	mov	r0, r5
   da51e:	f7fe ff58 	bl	d93d2 <strlen>
   da522:	1c41      	adds	r1, r0, #1
   da524:	4638      	mov	r0, r7
   da526:	f7fb fb29 	bl	d5b7c <_malloc_r>
   da52a:	6030      	str	r0, [r6, #0]
   da52c:	b148      	cbz	r0, da542 <_tzset_unlocked_r+0x66>
   da52e:	4629      	mov	r1, r5
   da530:	f7fe ff2c 	bl	d938c <strcpy>
   da534:	e005      	b.n	da542 <_tzset_unlocked_r+0x66>
   da536:	f7fe ff1f 	bl	d9378 <strcmp>
   da53a:	2800      	cmp	r0, #0
   da53c:	f000 8132 	beq.w	da7a4 <_tzset_unlocked_r+0x2c8>
   da540:	e7e9      	b.n	da516 <_tzset_unlocked_r+0x3a>
   da542:	782b      	ldrb	r3, [r5, #0]
   da544:	4a9f      	ldr	r2, [pc, #636]	; (da7c4 <_tzset_unlocked_r+0x2e8>)
   da546:	49a0      	ldr	r1, [pc, #640]	; (da7c8 <_tzset_unlocked_r+0x2ec>)
   da548:	2b3a      	cmp	r3, #58	; 0x3a
   da54a:	bf08      	it	eq
   da54c:	3501      	addeq	r5, #1
   da54e:	ae0a      	add	r6, sp, #40	; 0x28
   da550:	4633      	mov	r3, r6
   da552:	4628      	mov	r0, r5
   da554:	f7fb faf2 	bl	d5b3c <siscanf>
   da558:	2800      	cmp	r0, #0
   da55a:	f340 8123 	ble.w	da7a4 <_tzset_unlocked_r+0x2c8>
   da55e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   da560:	18ef      	adds	r7, r5, r3
   da562:	5ceb      	ldrb	r3, [r5, r3]
   da564:	2b2d      	cmp	r3, #45	; 0x2d
   da566:	d103      	bne.n	da570 <_tzset_unlocked_r+0x94>
   da568:	3701      	adds	r7, #1
   da56a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   da56e:	e003      	b.n	da578 <_tzset_unlocked_r+0x9c>
   da570:	2b2b      	cmp	r3, #43	; 0x2b
   da572:	bf08      	it	eq
   da574:	3701      	addeq	r7, #1
   da576:	2501      	movs	r5, #1
   da578:	f10d 0a20 	add.w	sl, sp, #32
   da57c:	f10d 0b1e 	add.w	fp, sp, #30
   da580:	f04f 0800 	mov.w	r8, #0
   da584:	9603      	str	r6, [sp, #12]
   da586:	f8cd a008 	str.w	sl, [sp, #8]
   da58a:	9601      	str	r6, [sp, #4]
   da58c:	f8cd b000 	str.w	fp, [sp]
   da590:	4633      	mov	r3, r6
   da592:	aa07      	add	r2, sp, #28
   da594:	498d      	ldr	r1, [pc, #564]	; (da7cc <_tzset_unlocked_r+0x2f0>)
   da596:	f8ad 801e 	strh.w	r8, [sp, #30]
   da59a:	4638      	mov	r0, r7
   da59c:	f8ad 8020 	strh.w	r8, [sp, #32]
   da5a0:	f7fb facc 	bl	d5b3c <siscanf>
   da5a4:	4540      	cmp	r0, r8
   da5a6:	f340 80fd 	ble.w	da7a4 <_tzset_unlocked_r+0x2c8>
   da5aa:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   da5ae:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   da5b2:	f8df 9224 	ldr.w	r9, [pc, #548]	; da7d8 <_tzset_unlocked_r+0x2fc>
   da5b6:	213c      	movs	r1, #60	; 0x3c
   da5b8:	fb01 3302 	mla	r3, r1, r2, r3
   da5bc:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   da5c0:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   da5c4:	fb01 3302 	mla	r3, r1, r2, r3
   da5c8:	435d      	muls	r5, r3
   da5ca:	6225      	str	r5, [r4, #32]
   da5cc:	4d7c      	ldr	r5, [pc, #496]	; (da7c0 <_tzset_unlocked_r+0x2e4>)
   da5ce:	4b7d      	ldr	r3, [pc, #500]	; (da7c4 <_tzset_unlocked_r+0x2e8>)
   da5d0:	602b      	str	r3, [r5, #0]
   da5d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   da5d4:	497c      	ldr	r1, [pc, #496]	; (da7c8 <_tzset_unlocked_r+0x2ec>)
   da5d6:	441f      	add	r7, r3
   da5d8:	464a      	mov	r2, r9
   da5da:	4633      	mov	r3, r6
   da5dc:	4638      	mov	r0, r7
   da5de:	f7fb faad 	bl	d5b3c <siscanf>
   da5e2:	4540      	cmp	r0, r8
   da5e4:	dc08      	bgt.n	da5f8 <_tzset_unlocked_r+0x11c>
   da5e6:	682b      	ldr	r3, [r5, #0]
   da5e8:	606b      	str	r3, [r5, #4]
   da5ea:	4b72      	ldr	r3, [pc, #456]	; (da7b4 <_tzset_unlocked_r+0x2d8>)
   da5ec:	6a22      	ldr	r2, [r4, #32]
   da5ee:	601a      	str	r2, [r3, #0]
   da5f0:	4b72      	ldr	r3, [pc, #456]	; (da7bc <_tzset_unlocked_r+0x2e0>)
   da5f2:	f8c3 8000 	str.w	r8, [r3]
   da5f6:	e0d5      	b.n	da7a4 <_tzset_unlocked_r+0x2c8>
   da5f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   da5fa:	f8c5 9004 	str.w	r9, [r5, #4]
   da5fe:	18fd      	adds	r5, r7, r3
   da600:	5cfb      	ldrb	r3, [r7, r3]
   da602:	2b2d      	cmp	r3, #45	; 0x2d
   da604:	d103      	bne.n	da60e <_tzset_unlocked_r+0x132>
   da606:	3501      	adds	r5, #1
   da608:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   da60c:	e003      	b.n	da616 <_tzset_unlocked_r+0x13a>
   da60e:	2b2b      	cmp	r3, #43	; 0x2b
   da610:	bf08      	it	eq
   da612:	3501      	addeq	r5, #1
   da614:	2701      	movs	r7, #1
   da616:	2300      	movs	r3, #0
   da618:	f8ad 301c 	strh.w	r3, [sp, #28]
   da61c:	f8ad 301e 	strh.w	r3, [sp, #30]
   da620:	f8ad 3020 	strh.w	r3, [sp, #32]
   da624:	930a      	str	r3, [sp, #40]	; 0x28
   da626:	9603      	str	r6, [sp, #12]
   da628:	f8cd a008 	str.w	sl, [sp, #8]
   da62c:	9601      	str	r6, [sp, #4]
   da62e:	f8cd b000 	str.w	fp, [sp]
   da632:	4633      	mov	r3, r6
   da634:	aa07      	add	r2, sp, #28
   da636:	4965      	ldr	r1, [pc, #404]	; (da7cc <_tzset_unlocked_r+0x2f0>)
   da638:	4628      	mov	r0, r5
   da63a:	f7fb fa7f 	bl	d5b3c <siscanf>
   da63e:	2800      	cmp	r0, #0
   da640:	dc04      	bgt.n	da64c <_tzset_unlocked_r+0x170>
   da642:	6a23      	ldr	r3, [r4, #32]
   da644:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
   da648:	63e3      	str	r3, [r4, #60]	; 0x3c
   da64a:	e00e      	b.n	da66a <_tzset_unlocked_r+0x18e>
   da64c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   da650:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   da654:	213c      	movs	r1, #60	; 0x3c
   da656:	fb01 3302 	mla	r3, r1, r2, r3
   da65a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   da65e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   da662:	fb01 3302 	mla	r3, r1, r2, r3
   da666:	435f      	muls	r7, r3
   da668:	63e7      	str	r7, [r4, #60]	; 0x3c
   da66a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   da66c:	4627      	mov	r7, r4
   da66e:	441d      	add	r5, r3
   da670:	f04f 0900 	mov.w	r9, #0
   da674:	782b      	ldrb	r3, [r5, #0]
   da676:	2b2c      	cmp	r3, #44	; 0x2c
   da678:	bf08      	it	eq
   da67a:	3501      	addeq	r5, #1
   da67c:	f895 8000 	ldrb.w	r8, [r5]
   da680:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
   da684:	d126      	bne.n	da6d4 <_tzset_unlocked_r+0x1f8>
   da686:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   da68a:	9302      	str	r3, [sp, #8]
   da68c:	ab09      	add	r3, sp, #36	; 0x24
   da68e:	9300      	str	r3, [sp, #0]
   da690:	9603      	str	r6, [sp, #12]
   da692:	9601      	str	r6, [sp, #4]
   da694:	4633      	mov	r3, r6
   da696:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   da69a:	494d      	ldr	r1, [pc, #308]	; (da7d0 <_tzset_unlocked_r+0x2f4>)
   da69c:	4628      	mov	r0, r5
   da69e:	f7fb fa4d 	bl	d5b3c <siscanf>
   da6a2:	2803      	cmp	r0, #3
   da6a4:	d17e      	bne.n	da7a4 <_tzset_unlocked_r+0x2c8>
   da6a6:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
   da6aa:	1e4b      	subs	r3, r1, #1
   da6ac:	2b0b      	cmp	r3, #11
   da6ae:	d879      	bhi.n	da7a4 <_tzset_unlocked_r+0x2c8>
   da6b0:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   da6b4:	1e53      	subs	r3, r2, #1
   da6b6:	2b04      	cmp	r3, #4
   da6b8:	d874      	bhi.n	da7a4 <_tzset_unlocked_r+0x2c8>
   da6ba:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   da6be:	2b06      	cmp	r3, #6
   da6c0:	d870      	bhi.n	da7a4 <_tzset_unlocked_r+0x2c8>
   da6c2:	f887 8008 	strb.w	r8, [r7, #8]
   da6c6:	60f9      	str	r1, [r7, #12]
   da6c8:	613a      	str	r2, [r7, #16]
   da6ca:	617b      	str	r3, [r7, #20]
   da6cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   da6ce:	eb05 0803 	add.w	r8, r5, r3
   da6d2:	e02a      	b.n	da72a <_tzset_unlocked_r+0x24e>
   da6d4:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
   da6d8:	bf06      	itte	eq
   da6da:	3501      	addeq	r5, #1
   da6dc:	4643      	moveq	r3, r8
   da6de:	2344      	movne	r3, #68	; 0x44
   da6e0:	220a      	movs	r2, #10
   da6e2:	a90b      	add	r1, sp, #44	; 0x2c
   da6e4:	4628      	mov	r0, r5
   da6e6:	9305      	str	r3, [sp, #20]
   da6e8:	f7ff fe32 	bl	da350 <strtoul>
   da6ec:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   da6f0:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
   da6f4:	4545      	cmp	r5, r8
   da6f6:	9b05      	ldr	r3, [sp, #20]
   da6f8:	d114      	bne.n	da724 <_tzset_unlocked_r+0x248>
   da6fa:	234d      	movs	r3, #77	; 0x4d
   da6fc:	f1b9 0f00 	cmp.w	r9, #0
   da700:	d107      	bne.n	da712 <_tzset_unlocked_r+0x236>
   da702:	7223      	strb	r3, [r4, #8]
   da704:	2303      	movs	r3, #3
   da706:	60e3      	str	r3, [r4, #12]
   da708:	2302      	movs	r3, #2
   da70a:	6123      	str	r3, [r4, #16]
   da70c:	f8c4 9014 	str.w	r9, [r4, #20]
   da710:	e00b      	b.n	da72a <_tzset_unlocked_r+0x24e>
   da712:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
   da716:	230b      	movs	r3, #11
   da718:	62a3      	str	r3, [r4, #40]	; 0x28
   da71a:	2301      	movs	r3, #1
   da71c:	62e3      	str	r3, [r4, #44]	; 0x2c
   da71e:	2300      	movs	r3, #0
   da720:	6323      	str	r3, [r4, #48]	; 0x30
   da722:	e002      	b.n	da72a <_tzset_unlocked_r+0x24e>
   da724:	b280      	uxth	r0, r0
   da726:	723b      	strb	r3, [r7, #8]
   da728:	6178      	str	r0, [r7, #20]
   da72a:	2302      	movs	r3, #2
   da72c:	f8ad 301c 	strh.w	r3, [sp, #28]
   da730:	2300      	movs	r3, #0
   da732:	f8ad 301e 	strh.w	r3, [sp, #30]
   da736:	f8ad 3020 	strh.w	r3, [sp, #32]
   da73a:	930a      	str	r3, [sp, #40]	; 0x28
   da73c:	f898 3000 	ldrb.w	r3, [r8]
   da740:	2b2f      	cmp	r3, #47	; 0x2f
   da742:	d10b      	bne.n	da75c <_tzset_unlocked_r+0x280>
   da744:	9603      	str	r6, [sp, #12]
   da746:	f8cd a008 	str.w	sl, [sp, #8]
   da74a:	9601      	str	r6, [sp, #4]
   da74c:	f8cd b000 	str.w	fp, [sp]
   da750:	4633      	mov	r3, r6
   da752:	aa07      	add	r2, sp, #28
   da754:	491f      	ldr	r1, [pc, #124]	; (da7d4 <_tzset_unlocked_r+0x2f8>)
   da756:	4640      	mov	r0, r8
   da758:	f7fb f9f0 	bl	d5b3c <siscanf>
   da75c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   da760:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   da764:	213c      	movs	r1, #60	; 0x3c
   da766:	fb01 3302 	mla	r3, r1, r2, r3
   da76a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   da76e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   da772:	fb01 3302 	mla	r3, r1, r2, r3
   da776:	61bb      	str	r3, [r7, #24]
   da778:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   da77a:	f109 0901 	add.w	r9, r9, #1
   da77e:	f1b9 0f02 	cmp.w	r9, #2
   da782:	4445      	add	r5, r8
   da784:	f107 071c 	add.w	r7, r7, #28
   da788:	f47f af74 	bne.w	da674 <_tzset_unlocked_r+0x198>
   da78c:	6860      	ldr	r0, [r4, #4]
   da78e:	f7ff fdf5 	bl	da37c <__tzcalc_limits>
   da792:	4b08      	ldr	r3, [pc, #32]	; (da7b4 <_tzset_unlocked_r+0x2d8>)
   da794:	6a22      	ldr	r2, [r4, #32]
   da796:	601a      	str	r2, [r3, #0]
   da798:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   da79a:	1a9b      	subs	r3, r3, r2
   da79c:	4a07      	ldr	r2, [pc, #28]	; (da7bc <_tzset_unlocked_r+0x2e0>)
   da79e:	bf18      	it	ne
   da7a0:	2301      	movne	r3, #1
   da7a2:	6013      	str	r3, [r2, #0]
   da7a4:	b00d      	add	sp, #52	; 0x34
   da7a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   da7aa:	bf00      	nop
   da7ac:	000dc550 	.word	0x000dc550
   da7b0:	2003e7e0 	.word	0x2003e7e0
   da7b4:	2003e7e8 	.word	0x2003e7e8
   da7b8:	000dc553 	.word	0x000dc553
   da7bc:	2003e7e4 	.word	0x2003e7e4
   da7c0:	2003e154 	.word	0x2003e154
   da7c4:	2003e7d3 	.word	0x2003e7d3
   da7c8:	000dc557 	.word	0x000dc557
   da7cc:	000dc57a 	.word	0x000dc57a
   da7d0:	000dc566 	.word	0x000dc566
   da7d4:	000dc579 	.word	0x000dc579
   da7d8:	2003e7c8 	.word	0x2003e7c8

000da7dc <rshift>:
   da7dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   da7de:	6906      	ldr	r6, [r0, #16]
   da7e0:	114b      	asrs	r3, r1, #5
   da7e2:	42b3      	cmp	r3, r6
   da7e4:	f100 0514 	add.w	r5, r0, #20
   da7e8:	da27      	bge.n	da83a <rshift+0x5e>
   da7ea:	f011 011f 	ands.w	r1, r1, #31
   da7ee:	eb05 0686 	add.w	r6, r5, r6, lsl #2
   da7f2:	eb05 0283 	add.w	r2, r5, r3, lsl #2
   da7f6:	d101      	bne.n	da7fc <rshift+0x20>
   da7f8:	4629      	mov	r1, r5
   da7fa:	e016      	b.n	da82a <rshift+0x4e>
   da7fc:	1d14      	adds	r4, r2, #4
   da7fe:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
   da802:	f1c1 0e20 	rsb	lr, r1, #32
   da806:	40ca      	lsrs	r2, r1
   da808:	462b      	mov	r3, r5
   da80a:	42b4      	cmp	r4, r6
   da80c:	d209      	bcs.n	da822 <rshift+0x46>
   da80e:	6827      	ldr	r7, [r4, #0]
   da810:	fa07 f70e 	lsl.w	r7, r7, lr
   da814:	433a      	orrs	r2, r7
   da816:	f843 2b04 	str.w	r2, [r3], #4
   da81a:	f854 2b04 	ldr.w	r2, [r4], #4
   da81e:	40ca      	lsrs	r2, r1
   da820:	e7f3      	b.n	da80a <rshift+0x2e>
   da822:	601a      	str	r2, [r3, #0]
   da824:	b152      	cbz	r2, da83c <rshift+0x60>
   da826:	3304      	adds	r3, #4
   da828:	e008      	b.n	da83c <rshift+0x60>
   da82a:	42b2      	cmp	r2, r6
   da82c:	460b      	mov	r3, r1
   da82e:	d205      	bcs.n	da83c <rshift+0x60>
   da830:	f852 3b04 	ldr.w	r3, [r2], #4
   da834:	f841 3b04 	str.w	r3, [r1], #4
   da838:	e7f7      	b.n	da82a <rshift+0x4e>
   da83a:	462b      	mov	r3, r5
   da83c:	1b5b      	subs	r3, r3, r5
   da83e:	109b      	asrs	r3, r3, #2
   da840:	6103      	str	r3, [r0, #16]
   da842:	b903      	cbnz	r3, da846 <rshift+0x6a>
   da844:	6143      	str	r3, [r0, #20]
   da846:	bdf0      	pop	{r4, r5, r6, r7, pc}

000da848 <__hexdig_fun>:
   da848:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   da84c:	2b09      	cmp	r3, #9
   da84e:	d801      	bhi.n	da854 <__hexdig_fun+0xc>
   da850:	3820      	subs	r0, #32
   da852:	e00a      	b.n	da86a <__hexdig_fun+0x22>
   da854:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   da858:	2b05      	cmp	r3, #5
   da85a:	d801      	bhi.n	da860 <__hexdig_fun+0x18>
   da85c:	3847      	subs	r0, #71	; 0x47
   da85e:	e004      	b.n	da86a <__hexdig_fun+0x22>
   da860:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   da864:	2b05      	cmp	r3, #5
   da866:	d802      	bhi.n	da86e <__hexdig_fun+0x26>
   da868:	3827      	subs	r0, #39	; 0x27
   da86a:	b2c0      	uxtb	r0, r0
   da86c:	4770      	bx	lr
   da86e:	2000      	movs	r0, #0
   da870:	4770      	bx	lr

000da872 <__gethex>:
   da872:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da876:	b08b      	sub	sp, #44	; 0x2c
   da878:	468a      	mov	sl, r1
   da87a:	4690      	mov	r8, r2
   da87c:	9306      	str	r3, [sp, #24]
   da87e:	9002      	str	r0, [sp, #8]
   da880:	f7fe fd08 	bl	d9294 <_localeconv_r>
   da884:	6803      	ldr	r3, [r0, #0]
   da886:	9303      	str	r3, [sp, #12]
   da888:	4618      	mov	r0, r3
   da88a:	f7fe fda2 	bl	d93d2 <strlen>
   da88e:	9b03      	ldr	r3, [sp, #12]
   da890:	9001      	str	r0, [sp, #4]
   da892:	4403      	add	r3, r0
   da894:	f04f 0b00 	mov.w	fp, #0
   da898:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   da89c:	9307      	str	r3, [sp, #28]
   da89e:	f8da 3000 	ldr.w	r3, [sl]
   da8a2:	3302      	adds	r3, #2
   da8a4:	461f      	mov	r7, r3
   da8a6:	f813 0b01 	ldrb.w	r0, [r3], #1
   da8aa:	2830      	cmp	r0, #48	; 0x30
   da8ac:	d102      	bne.n	da8b4 <__gethex+0x42>
   da8ae:	f10b 0b01 	add.w	fp, fp, #1
   da8b2:	e7f7      	b.n	da8a4 <__gethex+0x32>
   da8b4:	f7ff ffc8 	bl	da848 <__hexdig_fun>
   da8b8:	4604      	mov	r4, r0
   da8ba:	b9e0      	cbnz	r0, da8f6 <__gethex+0x84>
   da8bc:	9a01      	ldr	r2, [sp, #4]
   da8be:	9903      	ldr	r1, [sp, #12]
   da8c0:	4638      	mov	r0, r7
   da8c2:	f7fe fd8e 	bl	d93e2 <strncmp>
   da8c6:	2800      	cmp	r0, #0
   da8c8:	d134      	bne.n	da934 <__gethex+0xc2>
   da8ca:	9b01      	ldr	r3, [sp, #4]
   da8cc:	5cf8      	ldrb	r0, [r7, r3]
   da8ce:	18fe      	adds	r6, r7, r3
   da8d0:	f7ff ffba 	bl	da848 <__hexdig_fun>
   da8d4:	b380      	cbz	r0, da938 <__gethex+0xc6>
   da8d6:	4633      	mov	r3, r6
   da8d8:	7818      	ldrb	r0, [r3, #0]
   da8da:	2830      	cmp	r0, #48	; 0x30
   da8dc:	461f      	mov	r7, r3
   da8de:	f103 0301 	add.w	r3, r3, #1
   da8e2:	d0f9      	beq.n	da8d8 <__gethex+0x66>
   da8e4:	f7ff ffb0 	bl	da848 <__hexdig_fun>
   da8e8:	fab0 f580 	clz	r5, r0
   da8ec:	096d      	lsrs	r5, r5, #5
   da8ee:	4634      	mov	r4, r6
   da8f0:	f04f 0b01 	mov.w	fp, #1
   da8f4:	e001      	b.n	da8fa <__gethex+0x88>
   da8f6:	2500      	movs	r5, #0
   da8f8:	462c      	mov	r4, r5
   da8fa:	463a      	mov	r2, r7
   da8fc:	4616      	mov	r6, r2
   da8fe:	3201      	adds	r2, #1
   da900:	7830      	ldrb	r0, [r6, #0]
   da902:	f7ff ffa1 	bl	da848 <__hexdig_fun>
   da906:	2800      	cmp	r0, #0
   da908:	d1f8      	bne.n	da8fc <__gethex+0x8a>
   da90a:	9a01      	ldr	r2, [sp, #4]
   da90c:	9903      	ldr	r1, [sp, #12]
   da90e:	4630      	mov	r0, r6
   da910:	f7fe fd67 	bl	d93e2 <strncmp>
   da914:	b950      	cbnz	r0, da92c <__gethex+0xba>
   da916:	b954      	cbnz	r4, da92e <__gethex+0xbc>
   da918:	9b01      	ldr	r3, [sp, #4]
   da91a:	18f4      	adds	r4, r6, r3
   da91c:	4622      	mov	r2, r4
   da91e:	4616      	mov	r6, r2
   da920:	3201      	adds	r2, #1
   da922:	7830      	ldrb	r0, [r6, #0]
   da924:	f7ff ff90 	bl	da848 <__hexdig_fun>
   da928:	2800      	cmp	r0, #0
   da92a:	d1f8      	bne.n	da91e <__gethex+0xac>
   da92c:	b134      	cbz	r4, da93c <__gethex+0xca>
   da92e:	1ba4      	subs	r4, r4, r6
   da930:	00a4      	lsls	r4, r4, #2
   da932:	e003      	b.n	da93c <__gethex+0xca>
   da934:	463e      	mov	r6, r7
   da936:	e000      	b.n	da93a <__gethex+0xc8>
   da938:	4604      	mov	r4, r0
   da93a:	2501      	movs	r5, #1
   da93c:	7833      	ldrb	r3, [r6, #0]
   da93e:	2b50      	cmp	r3, #80	; 0x50
   da940:	d001      	beq.n	da946 <__gethex+0xd4>
   da942:	2b70      	cmp	r3, #112	; 0x70
   da944:	d12a      	bne.n	da99c <__gethex+0x12a>
   da946:	7873      	ldrb	r3, [r6, #1]
   da948:	2b2b      	cmp	r3, #43	; 0x2b
   da94a:	d008      	beq.n	da95e <__gethex+0xec>
   da94c:	2b2d      	cmp	r3, #45	; 0x2d
   da94e:	d003      	beq.n	da958 <__gethex+0xe6>
   da950:	1c71      	adds	r1, r6, #1
   da952:	f04f 0900 	mov.w	r9, #0
   da956:	e005      	b.n	da964 <__gethex+0xf2>
   da958:	f04f 0901 	mov.w	r9, #1
   da95c:	e001      	b.n	da962 <__gethex+0xf0>
   da95e:	f04f 0900 	mov.w	r9, #0
   da962:	1cb1      	adds	r1, r6, #2
   da964:	7808      	ldrb	r0, [r1, #0]
   da966:	f7ff ff6f 	bl	da848 <__hexdig_fun>
   da96a:	1e43      	subs	r3, r0, #1
   da96c:	b2db      	uxtb	r3, r3
   da96e:	2b18      	cmp	r3, #24
   da970:	d814      	bhi.n	da99c <__gethex+0x12a>
   da972:	f1a0 0210 	sub.w	r2, r0, #16
   da976:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   da97a:	f7ff ff65 	bl	da848 <__hexdig_fun>
   da97e:	1e43      	subs	r3, r0, #1
   da980:	b2db      	uxtb	r3, r3
   da982:	2b18      	cmp	r3, #24
   da984:	d804      	bhi.n	da990 <__gethex+0x11e>
   da986:	230a      	movs	r3, #10
   da988:	fb03 0202 	mla	r2, r3, r2, r0
   da98c:	3a10      	subs	r2, #16
   da98e:	e7f2      	b.n	da976 <__gethex+0x104>
   da990:	f1b9 0f00 	cmp.w	r9, #0
   da994:	d000      	beq.n	da998 <__gethex+0x126>
   da996:	4252      	negs	r2, r2
   da998:	4414      	add	r4, r2
   da99a:	e000      	b.n	da99e <__gethex+0x12c>
   da99c:	4631      	mov	r1, r6
   da99e:	f8ca 1000 	str.w	r1, [sl]
   da9a2:	b12d      	cbz	r5, da9b0 <__gethex+0x13e>
   da9a4:	f1bb 0f00 	cmp.w	fp, #0
   da9a8:	bf14      	ite	ne
   da9aa:	2000      	movne	r0, #0
   da9ac:	2006      	moveq	r0, #6
   da9ae:	e17c      	b.n	dacaa <__gethex+0x438>
   da9b0:	1bf3      	subs	r3, r6, r7
   da9b2:	3b01      	subs	r3, #1
   da9b4:	4629      	mov	r1, r5
   da9b6:	2b07      	cmp	r3, #7
   da9b8:	dd02      	ble.n	da9c0 <__gethex+0x14e>
   da9ba:	3101      	adds	r1, #1
   da9bc:	105b      	asrs	r3, r3, #1
   da9be:	e7fa      	b.n	da9b6 <__gethex+0x144>
   da9c0:	9802      	ldr	r0, [sp, #8]
   da9c2:	f000 fb09 	bl	dafd8 <_Balloc>
   da9c6:	9b01      	ldr	r3, [sp, #4]
   da9c8:	f100 0a14 	add.w	sl, r0, #20
   da9cc:	f04f 0900 	mov.w	r9, #0
   da9d0:	f1c3 0301 	rsb	r3, r3, #1
   da9d4:	4605      	mov	r5, r0
   da9d6:	f8cd a010 	str.w	sl, [sp, #16]
   da9da:	46cb      	mov	fp, r9
   da9dc:	9308      	str	r3, [sp, #32]
   da9de:	42b7      	cmp	r7, r6
   da9e0:	d22f      	bcs.n	daa42 <__gethex+0x1d0>
   da9e2:	1e73      	subs	r3, r6, #1
   da9e4:	9305      	str	r3, [sp, #20]
   da9e6:	9a07      	ldr	r2, [sp, #28]
   da9e8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   da9ec:	4293      	cmp	r3, r2
   da9ee:	d00b      	beq.n	daa08 <__gethex+0x196>
   da9f0:	f1bb 0f20 	cmp.w	fp, #32
   da9f4:	d116      	bne.n	daa24 <__gethex+0x1b2>
   da9f6:	9b04      	ldr	r3, [sp, #16]
   da9f8:	f8c3 9000 	str.w	r9, [r3]
   da9fc:	3304      	adds	r3, #4
   da9fe:	f04f 0900 	mov.w	r9, #0
   daa02:	9304      	str	r3, [sp, #16]
   daa04:	46cb      	mov	fp, r9
   daa06:	e00d      	b.n	daa24 <__gethex+0x1b2>
   daa08:	9b05      	ldr	r3, [sp, #20]
   daa0a:	9a08      	ldr	r2, [sp, #32]
   daa0c:	4413      	add	r3, r2
   daa0e:	429f      	cmp	r7, r3
   daa10:	d8ee      	bhi.n	da9f0 <__gethex+0x17e>
   daa12:	4618      	mov	r0, r3
   daa14:	9a01      	ldr	r2, [sp, #4]
   daa16:	9903      	ldr	r1, [sp, #12]
   daa18:	9309      	str	r3, [sp, #36]	; 0x24
   daa1a:	f7fe fce2 	bl	d93e2 <strncmp>
   daa1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   daa20:	b168      	cbz	r0, daa3e <__gethex+0x1cc>
   daa22:	e7e5      	b.n	da9f0 <__gethex+0x17e>
   daa24:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   daa28:	f7ff ff0e 	bl	da848 <__hexdig_fun>
   daa2c:	f000 000f 	and.w	r0, r0, #15
   daa30:	fa00 f00b 	lsl.w	r0, r0, fp
   daa34:	9b05      	ldr	r3, [sp, #20]
   daa36:	ea49 0900 	orr.w	r9, r9, r0
   daa3a:	f10b 0b04 	add.w	fp, fp, #4
   daa3e:	461e      	mov	r6, r3
   daa40:	e7cd      	b.n	da9de <__gethex+0x16c>
   daa42:	9804      	ldr	r0, [sp, #16]
   daa44:	f840 9b04 	str.w	r9, [r0], #4
   daa48:	ebca 0000 	rsb	r0, sl, r0
   daa4c:	1080      	asrs	r0, r0, #2
   daa4e:	6128      	str	r0, [r5, #16]
   daa50:	0147      	lsls	r7, r0, #5
   daa52:	4648      	mov	r0, r9
   daa54:	f000 fb85 	bl	db162 <__hi0bits>
   daa58:	f8d8 6000 	ldr.w	r6, [r8]
   daa5c:	1a38      	subs	r0, r7, r0
   daa5e:	42b0      	cmp	r0, r6
   daa60:	dd26      	ble.n	daab0 <__gethex+0x23e>
   daa62:	1b87      	subs	r7, r0, r6
   daa64:	4639      	mov	r1, r7
   daa66:	4628      	mov	r0, r5
   daa68:	f000 fe83 	bl	db772 <__any_on>
   daa6c:	b1c8      	cbz	r0, daaa2 <__gethex+0x230>
   daa6e:	1e7b      	subs	r3, r7, #1
   daa70:	1159      	asrs	r1, r3, #5
   daa72:	f003 021f 	and.w	r2, r3, #31
   daa76:	f04f 0901 	mov.w	r9, #1
   daa7a:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
   daa7e:	fa09 f202 	lsl.w	r2, r9, r2
   daa82:	420a      	tst	r2, r1
   daa84:	d00e      	beq.n	daaa4 <__gethex+0x232>
   daa86:	454b      	cmp	r3, r9
   daa88:	dc02      	bgt.n	daa90 <__gethex+0x21e>
   daa8a:	f04f 0902 	mov.w	r9, #2
   daa8e:	e009      	b.n	daaa4 <__gethex+0x232>
   daa90:	1eb9      	subs	r1, r7, #2
   daa92:	4628      	mov	r0, r5
   daa94:	f000 fe6d 	bl	db772 <__any_on>
   daa98:	2800      	cmp	r0, #0
   daa9a:	d0f6      	beq.n	daa8a <__gethex+0x218>
   daa9c:	f04f 0903 	mov.w	r9, #3
   daaa0:	e000      	b.n	daaa4 <__gethex+0x232>
   daaa2:	4681      	mov	r9, r0
   daaa4:	4639      	mov	r1, r7
   daaa6:	4628      	mov	r0, r5
   daaa8:	f7ff fe98 	bl	da7dc <rshift>
   daaac:	443c      	add	r4, r7
   daaae:	e00c      	b.n	daaca <__gethex+0x258>
   daab0:	da09      	bge.n	daac6 <__gethex+0x254>
   daab2:	1a37      	subs	r7, r6, r0
   daab4:	4629      	mov	r1, r5
   daab6:	463a      	mov	r2, r7
   daab8:	9802      	ldr	r0, [sp, #8]
   daaba:	f000 fc87 	bl	db3cc <__lshift>
   daabe:	1be4      	subs	r4, r4, r7
   daac0:	4605      	mov	r5, r0
   daac2:	f100 0a14 	add.w	sl, r0, #20
   daac6:	f04f 0900 	mov.w	r9, #0
   daaca:	f8d8 3008 	ldr.w	r3, [r8, #8]
   daace:	429c      	cmp	r4, r3
   daad0:	dd08      	ble.n	daae4 <__gethex+0x272>
   daad2:	9802      	ldr	r0, [sp, #8]
   daad4:	4629      	mov	r1, r5
   daad6:	f000 fab4 	bl	db042 <_Bfree>
   daada:	9a14      	ldr	r2, [sp, #80]	; 0x50
   daadc:	2300      	movs	r3, #0
   daade:	6013      	str	r3, [r2, #0]
   daae0:	20a3      	movs	r0, #163	; 0xa3
   daae2:	e0e2      	b.n	dacaa <__gethex+0x438>
   daae4:	f8d8 0004 	ldr.w	r0, [r8, #4]
   daae8:	4284      	cmp	r4, r0
   daaea:	da53      	bge.n	dab94 <__gethex+0x322>
   daaec:	1b04      	subs	r4, r0, r4
   daaee:	42a6      	cmp	r6, r4
   daaf0:	dc2e      	bgt.n	dab50 <__gethex+0x2de>
   daaf2:	f8d8 300c 	ldr.w	r3, [r8, #12]
   daaf6:	2b02      	cmp	r3, #2
   daaf8:	d01a      	beq.n	dab30 <__gethex+0x2be>
   daafa:	2b03      	cmp	r3, #3
   daafc:	d01c      	beq.n	dab38 <__gethex+0x2c6>
   daafe:	2b01      	cmp	r3, #1
   dab00:	d11d      	bne.n	dab3e <__gethex+0x2cc>
   dab02:	42a6      	cmp	r6, r4
   dab04:	d11b      	bne.n	dab3e <__gethex+0x2cc>
   dab06:	2e01      	cmp	r6, #1
   dab08:	dc0b      	bgt.n	dab22 <__gethex+0x2b0>
   dab0a:	9a06      	ldr	r2, [sp, #24]
   dab0c:	f8d8 3004 	ldr.w	r3, [r8, #4]
   dab10:	6013      	str	r3, [r2, #0]
   dab12:	2301      	movs	r3, #1
   dab14:	612b      	str	r3, [r5, #16]
   dab16:	f8ca 3000 	str.w	r3, [sl]
   dab1a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   dab1c:	2062      	movs	r0, #98	; 0x62
   dab1e:	601d      	str	r5, [r3, #0]
   dab20:	e0c3      	b.n	dacaa <__gethex+0x438>
   dab22:	1e71      	subs	r1, r6, #1
   dab24:	4628      	mov	r0, r5
   dab26:	f000 fe24 	bl	db772 <__any_on>
   dab2a:	2800      	cmp	r0, #0
   dab2c:	d1ed      	bne.n	dab0a <__gethex+0x298>
   dab2e:	e006      	b.n	dab3e <__gethex+0x2cc>
   dab30:	9b15      	ldr	r3, [sp, #84]	; 0x54
   dab32:	2b00      	cmp	r3, #0
   dab34:	d0e9      	beq.n	dab0a <__gethex+0x298>
   dab36:	e002      	b.n	dab3e <__gethex+0x2cc>
   dab38:	9b15      	ldr	r3, [sp, #84]	; 0x54
   dab3a:	2b00      	cmp	r3, #0
   dab3c:	d1e5      	bne.n	dab0a <__gethex+0x298>
   dab3e:	9802      	ldr	r0, [sp, #8]
   dab40:	4629      	mov	r1, r5
   dab42:	f000 fa7e 	bl	db042 <_Bfree>
   dab46:	9a14      	ldr	r2, [sp, #80]	; 0x50
   dab48:	2300      	movs	r3, #0
   dab4a:	6013      	str	r3, [r2, #0]
   dab4c:	2050      	movs	r0, #80	; 0x50
   dab4e:	e0ac      	b.n	dacaa <__gethex+0x438>
   dab50:	1e67      	subs	r7, r4, #1
   dab52:	f1b9 0f00 	cmp.w	r9, #0
   dab56:	d106      	bne.n	dab66 <__gethex+0x2f4>
   dab58:	b13f      	cbz	r7, dab6a <__gethex+0x2f8>
   dab5a:	4639      	mov	r1, r7
   dab5c:	4628      	mov	r0, r5
   dab5e:	f000 fe08 	bl	db772 <__any_on>
   dab62:	4681      	mov	r9, r0
   dab64:	e001      	b.n	dab6a <__gethex+0x2f8>
   dab66:	f04f 0901 	mov.w	r9, #1
   dab6a:	117a      	asrs	r2, r7, #5
   dab6c:	2301      	movs	r3, #1
   dab6e:	f007 071f 	and.w	r7, r7, #31
   dab72:	fa03 f707 	lsl.w	r7, r3, r7
   dab76:	f85a 3022 	ldr.w	r3, [sl, r2, lsl #2]
   dab7a:	4621      	mov	r1, r4
   dab7c:	421f      	tst	r7, r3
   dab7e:	4628      	mov	r0, r5
   dab80:	bf18      	it	ne
   dab82:	f049 0902 	orrne.w	r9, r9, #2
   dab86:	1b36      	subs	r6, r6, r4
   dab88:	f7ff fe28 	bl	da7dc <rshift>
   dab8c:	2702      	movs	r7, #2
   dab8e:	f8d8 4004 	ldr.w	r4, [r8, #4]
   dab92:	e000      	b.n	dab96 <__gethex+0x324>
   dab94:	2701      	movs	r7, #1
   dab96:	f1b9 0f00 	cmp.w	r9, #0
   dab9a:	f000 8081 	beq.w	daca0 <__gethex+0x42e>
   dab9e:	f8d8 300c 	ldr.w	r3, [r8, #12]
   daba2:	2b02      	cmp	r3, #2
   daba4:	d00e      	beq.n	dabc4 <__gethex+0x352>
   daba6:	2b03      	cmp	r3, #3
   daba8:	d010      	beq.n	dabcc <__gethex+0x35a>
   dabaa:	2b01      	cmp	r3, #1
   dabac:	d176      	bne.n	dac9c <__gethex+0x42a>
   dabae:	f019 0f02 	tst.w	r9, #2
   dabb2:	d073      	beq.n	dac9c <__gethex+0x42a>
   dabb4:	f8da 0000 	ldr.w	r0, [sl]
   dabb8:	ea49 0900 	orr.w	r9, r9, r0
   dabbc:	f019 0f01 	tst.w	r9, #1
   dabc0:	d107      	bne.n	dabd2 <__gethex+0x360>
   dabc2:	e06b      	b.n	dac9c <__gethex+0x42a>
   dabc4:	9b15      	ldr	r3, [sp, #84]	; 0x54
   dabc6:	f1c3 0301 	rsb	r3, r3, #1
   dabca:	9315      	str	r3, [sp, #84]	; 0x54
   dabcc:	9b15      	ldr	r3, [sp, #84]	; 0x54
   dabce:	2b00      	cmp	r3, #0
   dabd0:	d064      	beq.n	dac9c <__gethex+0x42a>
   dabd2:	f8d5 a010 	ldr.w	sl, [r5, #16]
   dabd6:	f105 0314 	add.w	r3, r5, #20
   dabda:	ea4f 098a 	mov.w	r9, sl, lsl #2
   dabde:	eb03 0109 	add.w	r1, r3, r9
   dabe2:	2000      	movs	r0, #0
   dabe4:	681a      	ldr	r2, [r3, #0]
   dabe6:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   dabea:	d002      	beq.n	dabf2 <__gethex+0x380>
   dabec:	3201      	adds	r2, #1
   dabee:	601a      	str	r2, [r3, #0]
   dabf0:	e020      	b.n	dac34 <__gethex+0x3c2>
   dabf2:	f843 0b04 	str.w	r0, [r3], #4
   dabf6:	4299      	cmp	r1, r3
   dabf8:	d8f4      	bhi.n	dabe4 <__gethex+0x372>
   dabfa:	68ab      	ldr	r3, [r5, #8]
   dabfc:	459a      	cmp	sl, r3
   dabfe:	db12      	blt.n	dac26 <__gethex+0x3b4>
   dac00:	6869      	ldr	r1, [r5, #4]
   dac02:	9802      	ldr	r0, [sp, #8]
   dac04:	3101      	adds	r1, #1
   dac06:	f000 f9e7 	bl	dafd8 <_Balloc>
   dac0a:	692a      	ldr	r2, [r5, #16]
   dac0c:	3202      	adds	r2, #2
   dac0e:	f105 010c 	add.w	r1, r5, #12
   dac12:	4683      	mov	fp, r0
   dac14:	0092      	lsls	r2, r2, #2
   dac16:	300c      	adds	r0, #12
   dac18:	f7fe fb40 	bl	d929c <memcpy>
   dac1c:	4629      	mov	r1, r5
   dac1e:	9802      	ldr	r0, [sp, #8]
   dac20:	f000 fa0f 	bl	db042 <_Bfree>
   dac24:	465d      	mov	r5, fp
   dac26:	692b      	ldr	r3, [r5, #16]
   dac28:	1c5a      	adds	r2, r3, #1
   dac2a:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   dac2e:	612a      	str	r2, [r5, #16]
   dac30:	2201      	movs	r2, #1
   dac32:	615a      	str	r2, [r3, #20]
   dac34:	2f02      	cmp	r7, #2
   dac36:	f105 0214 	add.w	r2, r5, #20
   dac3a:	d111      	bne.n	dac60 <__gethex+0x3ee>
   dac3c:	f8d8 3000 	ldr.w	r3, [r8]
   dac40:	3b01      	subs	r3, #1
   dac42:	429e      	cmp	r6, r3
   dac44:	d127      	bne.n	dac96 <__gethex+0x424>
   dac46:	1171      	asrs	r1, r6, #5
   dac48:	2301      	movs	r3, #1
   dac4a:	f006 061f 	and.w	r6, r6, #31
   dac4e:	fa03 f606 	lsl.w	r6, r3, r6
   dac52:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   dac56:	421e      	tst	r6, r3
   dac58:	bf0c      	ite	eq
   dac5a:	2702      	moveq	r7, #2
   dac5c:	2701      	movne	r7, #1
   dac5e:	e01a      	b.n	dac96 <__gethex+0x424>
   dac60:	692b      	ldr	r3, [r5, #16]
   dac62:	459a      	cmp	sl, r3
   dac64:	da0a      	bge.n	dac7c <__gethex+0x40a>
   dac66:	2101      	movs	r1, #1
   dac68:	4628      	mov	r0, r5
   dac6a:	f7ff fdb7 	bl	da7dc <rshift>
   dac6e:	f8d8 3008 	ldr.w	r3, [r8, #8]
   dac72:	3401      	adds	r4, #1
   dac74:	429c      	cmp	r4, r3
   dac76:	f73f af2c 	bgt.w	daad2 <__gethex+0x260>
   dac7a:	e00b      	b.n	dac94 <__gethex+0x422>
   dac7c:	f016 061f 	ands.w	r6, r6, #31
   dac80:	d008      	beq.n	dac94 <__gethex+0x422>
   dac82:	4491      	add	r9, r2
   dac84:	f1c6 0620 	rsb	r6, r6, #32
   dac88:	f859 0c04 	ldr.w	r0, [r9, #-4]
   dac8c:	f000 fa69 	bl	db162 <__hi0bits>
   dac90:	42b0      	cmp	r0, r6
   dac92:	dbe8      	blt.n	dac66 <__gethex+0x3f4>
   dac94:	2701      	movs	r7, #1
   dac96:	f047 0720 	orr.w	r7, r7, #32
   dac9a:	e001      	b.n	daca0 <__gethex+0x42e>
   dac9c:	f047 0710 	orr.w	r7, r7, #16
   daca0:	9b14      	ldr	r3, [sp, #80]	; 0x50
   daca2:	601d      	str	r5, [r3, #0]
   daca4:	9b06      	ldr	r3, [sp, #24]
   daca6:	4638      	mov	r0, r7
   daca8:	601c      	str	r4, [r3, #0]
   dacaa:	b00b      	add	sp, #44	; 0x2c
   dacac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000dacb0 <L_shift>:
   dacb0:	f1c2 0208 	rsb	r2, r2, #8
   dacb4:	0092      	lsls	r2, r2, #2
   dacb6:	b570      	push	{r4, r5, r6, lr}
   dacb8:	f1c2 0620 	rsb	r6, r2, #32
   dacbc:	6843      	ldr	r3, [r0, #4]
   dacbe:	6805      	ldr	r5, [r0, #0]
   dacc0:	fa03 f406 	lsl.w	r4, r3, r6
   dacc4:	432c      	orrs	r4, r5
   dacc6:	40d3      	lsrs	r3, r2
   dacc8:	6004      	str	r4, [r0, #0]
   dacca:	f840 3f04 	str.w	r3, [r0, #4]!
   dacce:	4288      	cmp	r0, r1
   dacd0:	d3f4      	bcc.n	dacbc <L_shift+0xc>
   dacd2:	bd70      	pop	{r4, r5, r6, pc}

000dacd4 <__match>:
   dacd4:	b530      	push	{r4, r5, lr}
   dacd6:	6803      	ldr	r3, [r0, #0]
   dacd8:	f811 4b01 	ldrb.w	r4, [r1], #1
   dacdc:	3301      	adds	r3, #1
   dacde:	b14c      	cbz	r4, dacf4 <__match+0x20>
   dace0:	781a      	ldrb	r2, [r3, #0]
   dace2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   dace6:	2d19      	cmp	r5, #25
   dace8:	bf98      	it	ls
   dacea:	3220      	addls	r2, #32
   dacec:	42a2      	cmp	r2, r4
   dacee:	d0f3      	beq.n	dacd8 <__match+0x4>
   dacf0:	2000      	movs	r0, #0
   dacf2:	bd30      	pop	{r4, r5, pc}
   dacf4:	6003      	str	r3, [r0, #0]
   dacf6:	2001      	movs	r0, #1
   dacf8:	bd30      	pop	{r4, r5, pc}

000dacfa <__hexnan>:
   dacfa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dacfe:	680b      	ldr	r3, [r1, #0]
   dad00:	f8d0 b000 	ldr.w	fp, [r0]
   dad04:	115e      	asrs	r6, r3, #5
   dad06:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   dad0a:	f013 031f 	ands.w	r3, r3, #31
   dad0e:	b085      	sub	sp, #20
   dad10:	bf18      	it	ne
   dad12:	3604      	addne	r6, #4
   dad14:	1f35      	subs	r5, r6, #4
   dad16:	4617      	mov	r7, r2
   dad18:	2200      	movs	r2, #0
   dad1a:	4682      	mov	sl, r0
   dad1c:	9301      	str	r3, [sp, #4]
   dad1e:	f846 2c04 	str.w	r2, [r6, #-4]
   dad22:	46a8      	mov	r8, r5
   dad24:	462c      	mov	r4, r5
   dad26:	9200      	str	r2, [sp, #0]
   dad28:	4691      	mov	r9, r2
   dad2a:	f81b 1f01 	ldrb.w	r1, [fp, #1]!
   dad2e:	2900      	cmp	r1, #0
   dad30:	d03c      	beq.n	dadac <__hexnan+0xb2>
   dad32:	4608      	mov	r0, r1
   dad34:	9203      	str	r2, [sp, #12]
   dad36:	9102      	str	r1, [sp, #8]
   dad38:	f7ff fd86 	bl	da848 <__hexdig_fun>
   dad3c:	9a03      	ldr	r2, [sp, #12]
   dad3e:	bb00      	cbnz	r0, dad82 <__hexnan+0x88>
   dad40:	9902      	ldr	r1, [sp, #8]
   dad42:	2920      	cmp	r1, #32
   dad44:	d816      	bhi.n	dad74 <__hexnan+0x7a>
   dad46:	9b00      	ldr	r3, [sp, #0]
   dad48:	4599      	cmp	r9, r3
   dad4a:	ddee      	ble.n	dad2a <__hexnan+0x30>
   dad4c:	4544      	cmp	r4, r8
   dad4e:	d205      	bcs.n	dad5c <__hexnan+0x62>
   dad50:	2a07      	cmp	r2, #7
   dad52:	dc03      	bgt.n	dad5c <__hexnan+0x62>
   dad54:	4641      	mov	r1, r8
   dad56:	4620      	mov	r0, r4
   dad58:	f7ff ffaa 	bl	dacb0 <L_shift>
   dad5c:	42bc      	cmp	r4, r7
   dad5e:	d923      	bls.n	dada8 <__hexnan+0xae>
   dad60:	2300      	movs	r3, #0
   dad62:	f1a4 0804 	sub.w	r8, r4, #4
   dad66:	f844 3c04 	str.w	r3, [r4, #-4]
   dad6a:	f8cd 9000 	str.w	r9, [sp]
   dad6e:	4644      	mov	r4, r8
   dad70:	461a      	mov	r2, r3
   dad72:	e7da      	b.n	dad2a <__hexnan+0x30>
   dad74:	2929      	cmp	r1, #41	; 0x29
   dad76:	d148      	bne.n	dae0a <__hexnan+0x110>
   dad78:	f10b 0301 	add.w	r3, fp, #1
   dad7c:	f8ca 3000 	str.w	r3, [sl]
   dad80:	e014      	b.n	dadac <__hexnan+0xb2>
   dad82:	3201      	adds	r2, #1
   dad84:	2a08      	cmp	r2, #8
   dad86:	f109 0901 	add.w	r9, r9, #1
   dad8a:	dd06      	ble.n	dad9a <__hexnan+0xa0>
   dad8c:	42bc      	cmp	r4, r7
   dad8e:	d9cc      	bls.n	dad2a <__hexnan+0x30>
   dad90:	2300      	movs	r3, #0
   dad92:	f844 3c04 	str.w	r3, [r4, #-4]
   dad96:	2201      	movs	r2, #1
   dad98:	3c04      	subs	r4, #4
   dad9a:	6821      	ldr	r1, [r4, #0]
   dad9c:	f000 000f 	and.w	r0, r0, #15
   dada0:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
   dada4:	6020      	str	r0, [r4, #0]
   dada6:	e7c0      	b.n	dad2a <__hexnan+0x30>
   dada8:	2208      	movs	r2, #8
   dadaa:	e7be      	b.n	dad2a <__hexnan+0x30>
   dadac:	f1b9 0f00 	cmp.w	r9, #0
   dadb0:	d02b      	beq.n	dae0a <__hexnan+0x110>
   dadb2:	4544      	cmp	r4, r8
   dadb4:	d205      	bcs.n	dadc2 <__hexnan+0xc8>
   dadb6:	2a07      	cmp	r2, #7
   dadb8:	dc03      	bgt.n	dadc2 <__hexnan+0xc8>
   dadba:	4641      	mov	r1, r8
   dadbc:	4620      	mov	r0, r4
   dadbe:	f7ff ff77 	bl	dacb0 <L_shift>
   dadc2:	42bc      	cmp	r4, r7
   dadc4:	d90c      	bls.n	dade0 <__hexnan+0xe6>
   dadc6:	463b      	mov	r3, r7
   dadc8:	f854 2b04 	ldr.w	r2, [r4], #4
   dadcc:	f843 2b04 	str.w	r2, [r3], #4
   dadd0:	42a5      	cmp	r5, r4
   dadd2:	d2f9      	bcs.n	dadc8 <__hexnan+0xce>
   dadd4:	2200      	movs	r2, #0
   dadd6:	f843 2b04 	str.w	r2, [r3], #4
   dadda:	429d      	cmp	r5, r3
   daddc:	d2fb      	bcs.n	dadd6 <__hexnan+0xdc>
   dadde:	e00b      	b.n	dadf8 <__hexnan+0xfe>
   dade0:	9b01      	ldr	r3, [sp, #4]
   dade2:	b14b      	cbz	r3, dadf8 <__hexnan+0xfe>
   dade4:	f1c3 0220 	rsb	r2, r3, #32
   dade8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   dadec:	40d3      	lsrs	r3, r2
   dadee:	f856 2c04 	ldr.w	r2, [r6, #-4]
   dadf2:	4013      	ands	r3, r2
   dadf4:	f846 3c04 	str.w	r3, [r6, #-4]
   dadf8:	682b      	ldr	r3, [r5, #0]
   dadfa:	b943      	cbnz	r3, dae0e <__hexnan+0x114>
   dadfc:	42bd      	cmp	r5, r7
   dadfe:	d102      	bne.n	dae06 <__hexnan+0x10c>
   dae00:	2301      	movs	r3, #1
   dae02:	602b      	str	r3, [r5, #0]
   dae04:	e003      	b.n	dae0e <__hexnan+0x114>
   dae06:	3d04      	subs	r5, #4
   dae08:	e7f6      	b.n	dadf8 <__hexnan+0xfe>
   dae0a:	2004      	movs	r0, #4
   dae0c:	e000      	b.n	dae10 <__hexnan+0x116>
   dae0e:	2005      	movs	r0, #5
   dae10:	b005      	add	sp, #20
   dae12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

000dae18 <_findenv_r>:
   dae18:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dae1c:	4607      	mov	r7, r0
   dae1e:	468b      	mov	fp, r1
   dae20:	4690      	mov	r8, r2
   dae22:	f000 fcd6 	bl	db7d2 <__env_lock>
   dae26:	4b19      	ldr	r3, [pc, #100]	; (dae8c <_findenv_r+0x74>)
   dae28:	681d      	ldr	r5, [r3, #0]
   dae2a:	469a      	mov	sl, r3
   dae2c:	b13d      	cbz	r5, dae3e <_findenv_r+0x26>
   dae2e:	465c      	mov	r4, fp
   dae30:	4623      	mov	r3, r4
   dae32:	f813 2b01 	ldrb.w	r2, [r3], #1
   dae36:	b142      	cbz	r2, dae4a <_findenv_r+0x32>
   dae38:	2a3d      	cmp	r2, #61	; 0x3d
   dae3a:	461c      	mov	r4, r3
   dae3c:	d1f8      	bne.n	dae30 <_findenv_r+0x18>
   dae3e:	4638      	mov	r0, r7
   dae40:	f000 fcc8 	bl	db7d4 <__env_unlock>
   dae44:	2000      	movs	r0, #0
   dae46:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dae4a:	ebcb 0404 	rsb	r4, fp, r4
   dae4e:	46a9      	mov	r9, r5
   dae50:	f859 0b04 	ldr.w	r0, [r9], #4
   dae54:	2800      	cmp	r0, #0
   dae56:	d0f2      	beq.n	dae3e <_findenv_r+0x26>
   dae58:	4622      	mov	r2, r4
   dae5a:	4659      	mov	r1, fp
   dae5c:	f7fe fac1 	bl	d93e2 <strncmp>
   dae60:	b988      	cbnz	r0, dae86 <_findenv_r+0x6e>
   dae62:	f859 3c04 	ldr.w	r3, [r9, #-4]
   dae66:	191e      	adds	r6, r3, r4
   dae68:	5d1b      	ldrb	r3, [r3, r4]
   dae6a:	2b3d      	cmp	r3, #61	; 0x3d
   dae6c:	d10b      	bne.n	dae86 <_findenv_r+0x6e>
   dae6e:	f8da 3000 	ldr.w	r3, [sl]
   dae72:	1aed      	subs	r5, r5, r3
   dae74:	10ad      	asrs	r5, r5, #2
   dae76:	4638      	mov	r0, r7
   dae78:	f8c8 5000 	str.w	r5, [r8]
   dae7c:	f000 fcaa 	bl	db7d4 <__env_unlock>
   dae80:	1c70      	adds	r0, r6, #1
   dae82:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dae86:	464d      	mov	r5, r9
   dae88:	e7e1      	b.n	dae4e <_findenv_r+0x36>
   dae8a:	bf00      	nop
   dae8c:	2003e19c 	.word	0x2003e19c

000dae90 <_getenv_r>:
   dae90:	b507      	push	{r0, r1, r2, lr}
   dae92:	aa01      	add	r2, sp, #4
   dae94:	f7ff ffc0 	bl	dae18 <_findenv_r>
   dae98:	b003      	add	sp, #12
   dae9a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000daea0 <__gettzinfo>:
   daea0:	4800      	ldr	r0, [pc, #0]	; (daea4 <__gettzinfo+0x4>)
   daea2:	4770      	bx	lr
   daea4:	2003e15c 	.word	0x2003e15c

000daea8 <gmtime_r>:
   daea8:	6802      	ldr	r2, [r0, #0]
   daeaa:	4b47      	ldr	r3, [pc, #284]	; (dafc8 <gmtime_r+0x120>)
   daeac:	b5f0      	push	{r4, r5, r6, r7, lr}
   daeae:	fb92 f4f3 	sdiv	r4, r2, r3
   daeb2:	fb03 2214 	mls	r2, r3, r4, r2
   daeb6:	2a00      	cmp	r2, #0
   daeb8:	bfbc      	itt	lt
   daeba:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
   daebe:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
   daec2:	f44f 6061 	mov.w	r0, #3600	; 0xe10
   daec6:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
   daeca:	fb92 f3f0 	sdiv	r3, r2, r0
   daece:	fb00 2213 	mls	r2, r0, r3, r2
   daed2:	f04f 003c 	mov.w	r0, #60	; 0x3c
   daed6:	bfac      	ite	ge
   daed8:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
   daedc:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
   daee0:	608b      	str	r3, [r1, #8]
   daee2:	fb92 f3f0 	sdiv	r3, r2, r0
   daee6:	fb00 2213 	mls	r2, r0, r3, r2
   daeea:	604b      	str	r3, [r1, #4]
   daeec:	600a      	str	r2, [r1, #0]
   daeee:	2307      	movs	r3, #7
   daef0:	1ce2      	adds	r2, r4, #3
   daef2:	fb92 f3f3 	sdiv	r3, r2, r3
   daef6:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   daefa:	1ad3      	subs	r3, r2, r3
   daefc:	618b      	str	r3, [r1, #24]
   daefe:	4b33      	ldr	r3, [pc, #204]	; (dafcc <gmtime_r+0x124>)
   daf00:	4d33      	ldr	r5, [pc, #204]	; (dafd0 <gmtime_r+0x128>)
   daf02:	fb94 f5f5 	sdiv	r5, r4, r5
   daf06:	fb03 4405 	mla	r4, r3, r5, r4
   daf0a:	f648 62ac 	movw	r2, #36524	; 0x8eac
   daf0e:	fbb4 f2f2 	udiv	r2, r4, r2
   daf12:	4422      	add	r2, r4
   daf14:	f240 57b4 	movw	r7, #1460	; 0x5b4
   daf18:	fbb4 f3f7 	udiv	r3, r4, r7
   daf1c:	1ad2      	subs	r2, r2, r3
   daf1e:	482d      	ldr	r0, [pc, #180]	; (dafd4 <gmtime_r+0x12c>)
   daf20:	fbb4 f0f0 	udiv	r0, r4, r0
   daf24:	f648 6694 	movw	r6, #36500	; 0x8e94
   daf28:	1a13      	subs	r3, r2, r0
   daf2a:	fbb3 f6f6 	udiv	r6, r3, r6
   daf2e:	4434      	add	r4, r6
   daf30:	f240 126d 	movw	r2, #365	; 0x16d
   daf34:	fbb3 f0f2 	udiv	r0, r3, r2
   daf38:	fbb3 f3f7 	udiv	r3, r3, r7
   daf3c:	1ae3      	subs	r3, r4, r3
   daf3e:	fb02 3310 	mls	r3, r2, r0, r3
   daf42:	2499      	movs	r4, #153	; 0x99
   daf44:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   daf48:	3202      	adds	r2, #2
   daf4a:	fbb2 f2f4 	udiv	r2, r2, r4
   daf4e:	2a0a      	cmp	r2, #10
   daf50:	fb04 f402 	mul.w	r4, r4, r2
   daf54:	f104 0602 	add.w	r6, r4, #2
   daf58:	f04f 0405 	mov.w	r4, #5
   daf5c:	fbb6 f4f4 	udiv	r4, r6, r4
   daf60:	bf34      	ite	cc
   daf62:	2602      	movcc	r6, #2
   daf64:	f06f 0609 	mvncs.w	r6, #9
   daf68:	4416      	add	r6, r2
   daf6a:	f44f 72c8 	mov.w	r2, #400	; 0x190
   daf6e:	fb02 0505 	mla	r5, r2, r5, r0
   daf72:	1c5f      	adds	r7, r3, #1
   daf74:	2e01      	cmp	r6, #1
   daf76:	bf98      	it	ls
   daf78:	3501      	addls	r5, #1
   daf7a:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
   daf7e:	eba7 0704 	sub.w	r7, r7, r4
   daf82:	d302      	bcc.n	daf8a <gmtime_r+0xe2>
   daf84:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
   daf88:	e014      	b.n	dafb4 <gmtime_r+0x10c>
   daf8a:	0782      	lsls	r2, r0, #30
   daf8c:	d105      	bne.n	daf9a <gmtime_r+0xf2>
   daf8e:	2464      	movs	r4, #100	; 0x64
   daf90:	fbb0 f2f4 	udiv	r2, r0, r4
   daf94:	fb04 0212 	mls	r2, r4, r2, r0
   daf98:	b94a      	cbnz	r2, dafae <gmtime_r+0x106>
   daf9a:	f44f 72c8 	mov.w	r2, #400	; 0x190
   daf9e:	fbb0 f4f2 	udiv	r4, r0, r2
   dafa2:	fb02 0014 	mls	r0, r2, r4, r0
   dafa6:	fab0 f280 	clz	r2, r0
   dafaa:	0952      	lsrs	r2, r2, #5
   dafac:	e000      	b.n	dafb0 <gmtime_r+0x108>
   dafae:	2201      	movs	r2, #1
   dafb0:	333b      	adds	r3, #59	; 0x3b
   dafb2:	441a      	add	r2, r3
   dafb4:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
   dafb8:	2300      	movs	r3, #0
   dafba:	61ca      	str	r2, [r1, #28]
   dafbc:	614d      	str	r5, [r1, #20]
   dafbe:	610e      	str	r6, [r1, #16]
   dafc0:	60cf      	str	r7, [r1, #12]
   dafc2:	620b      	str	r3, [r1, #32]
   dafc4:	4608      	mov	r0, r1
   dafc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   dafc8:	00015180 	.word	0x00015180
   dafcc:	fffdc54f 	.word	0xfffdc54f
   dafd0:	00023ab1 	.word	0x00023ab1
   dafd4:	00023ab0 	.word	0x00023ab0

000dafd8 <_Balloc>:
   dafd8:	b570      	push	{r4, r5, r6, lr}
   dafda:	6a45      	ldr	r5, [r0, #36]	; 0x24
   dafdc:	4604      	mov	r4, r0
   dafde:	460e      	mov	r6, r1
   dafe0:	b93d      	cbnz	r5, daff2 <_Balloc+0x1a>
   dafe2:	2010      	movs	r0, #16
   dafe4:	f7fa fd82 	bl	d5aec <malloc>
   dafe8:	6260      	str	r0, [r4, #36]	; 0x24
   dafea:	6045      	str	r5, [r0, #4]
   dafec:	6085      	str	r5, [r0, #8]
   dafee:	6005      	str	r5, [r0, #0]
   daff0:	60c5      	str	r5, [r0, #12]
   daff2:	6a65      	ldr	r5, [r4, #36]	; 0x24
   daff4:	68eb      	ldr	r3, [r5, #12]
   daff6:	b143      	cbz	r3, db00a <_Balloc+0x32>
   daff8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   daffa:	68db      	ldr	r3, [r3, #12]
   daffc:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
   db000:	b178      	cbz	r0, db022 <_Balloc+0x4a>
   db002:	6802      	ldr	r2, [r0, #0]
   db004:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
   db008:	e017      	b.n	db03a <_Balloc+0x62>
   db00a:	2221      	movs	r2, #33	; 0x21
   db00c:	2104      	movs	r1, #4
   db00e:	4620      	mov	r0, r4
   db010:	f000 fbd1 	bl	db7b6 <_calloc_r>
   db014:	6a63      	ldr	r3, [r4, #36]	; 0x24
   db016:	60e8      	str	r0, [r5, #12]
   db018:	68db      	ldr	r3, [r3, #12]
   db01a:	2b00      	cmp	r3, #0
   db01c:	d1ec      	bne.n	daff8 <_Balloc+0x20>
   db01e:	2000      	movs	r0, #0
   db020:	bd70      	pop	{r4, r5, r6, pc}
   db022:	2101      	movs	r1, #1
   db024:	fa01 f506 	lsl.w	r5, r1, r6
   db028:	1d6a      	adds	r2, r5, #5
   db02a:	0092      	lsls	r2, r2, #2
   db02c:	4620      	mov	r0, r4
   db02e:	f000 fbc2 	bl	db7b6 <_calloc_r>
   db032:	2800      	cmp	r0, #0
   db034:	d0f3      	beq.n	db01e <_Balloc+0x46>
   db036:	6046      	str	r6, [r0, #4]
   db038:	6085      	str	r5, [r0, #8]
   db03a:	2300      	movs	r3, #0
   db03c:	6103      	str	r3, [r0, #16]
   db03e:	60c3      	str	r3, [r0, #12]
   db040:	bd70      	pop	{r4, r5, r6, pc}

000db042 <_Bfree>:
   db042:	b570      	push	{r4, r5, r6, lr}
   db044:	6a44      	ldr	r4, [r0, #36]	; 0x24
   db046:	4606      	mov	r6, r0
   db048:	460d      	mov	r5, r1
   db04a:	b93c      	cbnz	r4, db05c <_Bfree+0x1a>
   db04c:	2010      	movs	r0, #16
   db04e:	f7fa fd4d 	bl	d5aec <malloc>
   db052:	6270      	str	r0, [r6, #36]	; 0x24
   db054:	6044      	str	r4, [r0, #4]
   db056:	6084      	str	r4, [r0, #8]
   db058:	6004      	str	r4, [r0, #0]
   db05a:	60c4      	str	r4, [r0, #12]
   db05c:	b13d      	cbz	r5, db06e <_Bfree+0x2c>
   db05e:	6a73      	ldr	r3, [r6, #36]	; 0x24
   db060:	686a      	ldr	r2, [r5, #4]
   db062:	68db      	ldr	r3, [r3, #12]
   db064:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   db068:	6029      	str	r1, [r5, #0]
   db06a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   db06e:	bd70      	pop	{r4, r5, r6, pc}

000db070 <__multadd>:
   db070:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   db074:	690d      	ldr	r5, [r1, #16]
   db076:	461f      	mov	r7, r3
   db078:	4606      	mov	r6, r0
   db07a:	460c      	mov	r4, r1
   db07c:	f101 0e14 	add.w	lr, r1, #20
   db080:	2300      	movs	r3, #0
   db082:	f8de 0000 	ldr.w	r0, [lr]
   db086:	b281      	uxth	r1, r0
   db088:	fb02 7101 	mla	r1, r2, r1, r7
   db08c:	0c0f      	lsrs	r7, r1, #16
   db08e:	0c00      	lsrs	r0, r0, #16
   db090:	fb02 7000 	mla	r0, r2, r0, r7
   db094:	b289      	uxth	r1, r1
   db096:	3301      	adds	r3, #1
   db098:	eb01 4100 	add.w	r1, r1, r0, lsl #16
   db09c:	429d      	cmp	r5, r3
   db09e:	ea4f 4710 	mov.w	r7, r0, lsr #16
   db0a2:	f84e 1b04 	str.w	r1, [lr], #4
   db0a6:	dcec      	bgt.n	db082 <__multadd+0x12>
   db0a8:	b1d7      	cbz	r7, db0e0 <__multadd+0x70>
   db0aa:	68a3      	ldr	r3, [r4, #8]
   db0ac:	429d      	cmp	r5, r3
   db0ae:	db12      	blt.n	db0d6 <__multadd+0x66>
   db0b0:	6861      	ldr	r1, [r4, #4]
   db0b2:	4630      	mov	r0, r6
   db0b4:	3101      	adds	r1, #1
   db0b6:	f7ff ff8f 	bl	dafd8 <_Balloc>
   db0ba:	6922      	ldr	r2, [r4, #16]
   db0bc:	3202      	adds	r2, #2
   db0be:	f104 010c 	add.w	r1, r4, #12
   db0c2:	4680      	mov	r8, r0
   db0c4:	0092      	lsls	r2, r2, #2
   db0c6:	300c      	adds	r0, #12
   db0c8:	f7fe f8e8 	bl	d929c <memcpy>
   db0cc:	4621      	mov	r1, r4
   db0ce:	4630      	mov	r0, r6
   db0d0:	f7ff ffb7 	bl	db042 <_Bfree>
   db0d4:	4644      	mov	r4, r8
   db0d6:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   db0da:	3501      	adds	r5, #1
   db0dc:	615f      	str	r7, [r3, #20]
   db0de:	6125      	str	r5, [r4, #16]
   db0e0:	4620      	mov	r0, r4
   db0e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000db0e6 <__s2b>:
   db0e6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   db0ea:	460c      	mov	r4, r1
   db0ec:	4615      	mov	r5, r2
   db0ee:	461f      	mov	r7, r3
   db0f0:	2209      	movs	r2, #9
   db0f2:	3308      	adds	r3, #8
   db0f4:	4606      	mov	r6, r0
   db0f6:	fb93 f3f2 	sdiv	r3, r3, r2
   db0fa:	2100      	movs	r1, #0
   db0fc:	2201      	movs	r2, #1
   db0fe:	429a      	cmp	r2, r3
   db100:	da02      	bge.n	db108 <__s2b+0x22>
   db102:	0052      	lsls	r2, r2, #1
   db104:	3101      	adds	r1, #1
   db106:	e7fa      	b.n	db0fe <__s2b+0x18>
   db108:	4630      	mov	r0, r6
   db10a:	f7ff ff65 	bl	dafd8 <_Balloc>
   db10e:	9b08      	ldr	r3, [sp, #32]
   db110:	6143      	str	r3, [r0, #20]
   db112:	2d09      	cmp	r5, #9
   db114:	f04f 0301 	mov.w	r3, #1
   db118:	6103      	str	r3, [r0, #16]
   db11a:	dd11      	ble.n	db140 <__s2b+0x5a>
   db11c:	f104 0809 	add.w	r8, r4, #9
   db120:	46c1      	mov	r9, r8
   db122:	442c      	add	r4, r5
   db124:	f819 3b01 	ldrb.w	r3, [r9], #1
   db128:	4601      	mov	r1, r0
   db12a:	3b30      	subs	r3, #48	; 0x30
   db12c:	220a      	movs	r2, #10
   db12e:	4630      	mov	r0, r6
   db130:	f7ff ff9e 	bl	db070 <__multadd>
   db134:	45a1      	cmp	r9, r4
   db136:	d1f5      	bne.n	db124 <__s2b+0x3e>
   db138:	eb08 0405 	add.w	r4, r8, r5
   db13c:	3c08      	subs	r4, #8
   db13e:	e001      	b.n	db144 <__s2b+0x5e>
   db140:	340a      	adds	r4, #10
   db142:	2509      	movs	r5, #9
   db144:	1b2d      	subs	r5, r5, r4
   db146:	1963      	adds	r3, r4, r5
   db148:	429f      	cmp	r7, r3
   db14a:	dd08      	ble.n	db15e <__s2b+0x78>
   db14c:	f814 3b01 	ldrb.w	r3, [r4], #1
   db150:	4601      	mov	r1, r0
   db152:	3b30      	subs	r3, #48	; 0x30
   db154:	220a      	movs	r2, #10
   db156:	4630      	mov	r0, r6
   db158:	f7ff ff8a 	bl	db070 <__multadd>
   db15c:	e7f3      	b.n	db146 <__s2b+0x60>
   db15e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000db162 <__hi0bits>:
   db162:	0c03      	lsrs	r3, r0, #16
   db164:	041b      	lsls	r3, r3, #16
   db166:	b913      	cbnz	r3, db16e <__hi0bits+0xc>
   db168:	0400      	lsls	r0, r0, #16
   db16a:	2310      	movs	r3, #16
   db16c:	e000      	b.n	db170 <__hi0bits+0xe>
   db16e:	2300      	movs	r3, #0
   db170:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   db174:	bf04      	itt	eq
   db176:	0200      	lsleq	r0, r0, #8
   db178:	3308      	addeq	r3, #8
   db17a:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   db17e:	bf04      	itt	eq
   db180:	0100      	lsleq	r0, r0, #4
   db182:	3304      	addeq	r3, #4
   db184:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   db188:	bf04      	itt	eq
   db18a:	0080      	lsleq	r0, r0, #2
   db18c:	3302      	addeq	r3, #2
   db18e:	2800      	cmp	r0, #0
   db190:	db03      	blt.n	db19a <__hi0bits+0x38>
   db192:	0042      	lsls	r2, r0, #1
   db194:	d503      	bpl.n	db19e <__hi0bits+0x3c>
   db196:	1c58      	adds	r0, r3, #1
   db198:	4770      	bx	lr
   db19a:	4618      	mov	r0, r3
   db19c:	4770      	bx	lr
   db19e:	2020      	movs	r0, #32
   db1a0:	4770      	bx	lr

000db1a2 <__lo0bits>:
   db1a2:	6803      	ldr	r3, [r0, #0]
   db1a4:	f013 0207 	ands.w	r2, r3, #7
   db1a8:	d00b      	beq.n	db1c2 <__lo0bits+0x20>
   db1aa:	07d9      	lsls	r1, r3, #31
   db1ac:	d422      	bmi.n	db1f4 <__lo0bits+0x52>
   db1ae:	079a      	lsls	r2, r3, #30
   db1b0:	bf4b      	itete	mi
   db1b2:	085b      	lsrmi	r3, r3, #1
   db1b4:	089b      	lsrpl	r3, r3, #2
   db1b6:	6003      	strmi	r3, [r0, #0]
   db1b8:	6003      	strpl	r3, [r0, #0]
   db1ba:	bf4c      	ite	mi
   db1bc:	2001      	movmi	r0, #1
   db1be:	2002      	movpl	r0, #2
   db1c0:	4770      	bx	lr
   db1c2:	b299      	uxth	r1, r3
   db1c4:	b909      	cbnz	r1, db1ca <__lo0bits+0x28>
   db1c6:	0c1b      	lsrs	r3, r3, #16
   db1c8:	2210      	movs	r2, #16
   db1ca:	f013 0fff 	tst.w	r3, #255	; 0xff
   db1ce:	bf04      	itt	eq
   db1d0:	0a1b      	lsreq	r3, r3, #8
   db1d2:	3208      	addeq	r2, #8
   db1d4:	0719      	lsls	r1, r3, #28
   db1d6:	bf04      	itt	eq
   db1d8:	091b      	lsreq	r3, r3, #4
   db1da:	3204      	addeq	r2, #4
   db1dc:	0799      	lsls	r1, r3, #30
   db1de:	bf04      	itt	eq
   db1e0:	089b      	lsreq	r3, r3, #2
   db1e2:	3202      	addeq	r2, #2
   db1e4:	07d9      	lsls	r1, r3, #31
   db1e6:	d402      	bmi.n	db1ee <__lo0bits+0x4c>
   db1e8:	085b      	lsrs	r3, r3, #1
   db1ea:	d005      	beq.n	db1f8 <__lo0bits+0x56>
   db1ec:	3201      	adds	r2, #1
   db1ee:	6003      	str	r3, [r0, #0]
   db1f0:	4610      	mov	r0, r2
   db1f2:	4770      	bx	lr
   db1f4:	2000      	movs	r0, #0
   db1f6:	4770      	bx	lr
   db1f8:	2020      	movs	r0, #32
   db1fa:	4770      	bx	lr

000db1fc <__i2b>:
   db1fc:	b510      	push	{r4, lr}
   db1fe:	460c      	mov	r4, r1
   db200:	2101      	movs	r1, #1
   db202:	f7ff fee9 	bl	dafd8 <_Balloc>
   db206:	2201      	movs	r2, #1
   db208:	6144      	str	r4, [r0, #20]
   db20a:	6102      	str	r2, [r0, #16]
   db20c:	bd10      	pop	{r4, pc}

000db20e <__multiply>:
   db20e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   db212:	4614      	mov	r4, r2
   db214:	690a      	ldr	r2, [r1, #16]
   db216:	6923      	ldr	r3, [r4, #16]
   db218:	429a      	cmp	r2, r3
   db21a:	bfb8      	it	lt
   db21c:	460b      	movlt	r3, r1
   db21e:	4688      	mov	r8, r1
   db220:	bfbc      	itt	lt
   db222:	46a0      	movlt	r8, r4
   db224:	461c      	movlt	r4, r3
   db226:	f8d8 7010 	ldr.w	r7, [r8, #16]
   db22a:	f8d4 9010 	ldr.w	r9, [r4, #16]
   db22e:	f8d8 3008 	ldr.w	r3, [r8, #8]
   db232:	f8d8 1004 	ldr.w	r1, [r8, #4]
   db236:	eb07 0609 	add.w	r6, r7, r9
   db23a:	429e      	cmp	r6, r3
   db23c:	bfc8      	it	gt
   db23e:	3101      	addgt	r1, #1
   db240:	f7ff feca 	bl	dafd8 <_Balloc>
   db244:	f100 0514 	add.w	r5, r0, #20
   db248:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
   db24c:	462b      	mov	r3, r5
   db24e:	2200      	movs	r2, #0
   db250:	4563      	cmp	r3, ip
   db252:	d202      	bcs.n	db25a <__multiply+0x4c>
   db254:	f843 2b04 	str.w	r2, [r3], #4
   db258:	e7fa      	b.n	db250 <__multiply+0x42>
   db25a:	f104 0214 	add.w	r2, r4, #20
   db25e:	f108 0114 	add.w	r1, r8, #20
   db262:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   db266:	eb01 0787 	add.w	r7, r1, r7, lsl #2
   db26a:	9300      	str	r3, [sp, #0]
   db26c:	9b00      	ldr	r3, [sp, #0]
   db26e:	9201      	str	r2, [sp, #4]
   db270:	4293      	cmp	r3, r2
   db272:	d957      	bls.n	db324 <__multiply+0x116>
   db274:	f8b2 b000 	ldrh.w	fp, [r2]
   db278:	f1bb 0f00 	cmp.w	fp, #0
   db27c:	d023      	beq.n	db2c6 <__multiply+0xb8>
   db27e:	4689      	mov	r9, r1
   db280:	46ae      	mov	lr, r5
   db282:	f04f 0800 	mov.w	r8, #0
   db286:	f859 4b04 	ldr.w	r4, [r9], #4
   db28a:	f8be a000 	ldrh.w	sl, [lr]
   db28e:	b2a3      	uxth	r3, r4
   db290:	fb0b a303 	mla	r3, fp, r3, sl
   db294:	ea4f 4a14 	mov.w	sl, r4, lsr #16
   db298:	f8de 4000 	ldr.w	r4, [lr]
   db29c:	4443      	add	r3, r8
   db29e:	ea4f 4814 	mov.w	r8, r4, lsr #16
   db2a2:	fb0b 840a 	mla	r4, fp, sl, r8
   db2a6:	eb04 4413 	add.w	r4, r4, r3, lsr #16
   db2aa:	46f2      	mov	sl, lr
   db2ac:	b29b      	uxth	r3, r3
   db2ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
   db2b2:	454f      	cmp	r7, r9
   db2b4:	ea4f 4814 	mov.w	r8, r4, lsr #16
   db2b8:	f84a 3b04 	str.w	r3, [sl], #4
   db2bc:	d901      	bls.n	db2c2 <__multiply+0xb4>
   db2be:	46d6      	mov	lr, sl
   db2c0:	e7e1      	b.n	db286 <__multiply+0x78>
   db2c2:	f8ce 8004 	str.w	r8, [lr, #4]
   db2c6:	9b01      	ldr	r3, [sp, #4]
   db2c8:	f8b3 a002 	ldrh.w	sl, [r3, #2]
   db2cc:	3204      	adds	r2, #4
   db2ce:	f1ba 0f00 	cmp.w	sl, #0
   db2d2:	d021      	beq.n	db318 <__multiply+0x10a>
   db2d4:	682b      	ldr	r3, [r5, #0]
   db2d6:	462c      	mov	r4, r5
   db2d8:	4689      	mov	r9, r1
   db2da:	f04f 0800 	mov.w	r8, #0
   db2de:	f8b9 e000 	ldrh.w	lr, [r9]
   db2e2:	f8b4 b002 	ldrh.w	fp, [r4, #2]
   db2e6:	fb0a be0e 	mla	lr, sl, lr, fp
   db2ea:	44f0      	add	r8, lr
   db2ec:	46a3      	mov	fp, r4
   db2ee:	b29b      	uxth	r3, r3
   db2f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   db2f4:	f84b 3b04 	str.w	r3, [fp], #4
   db2f8:	f859 3b04 	ldr.w	r3, [r9], #4
   db2fc:	f8b4 e004 	ldrh.w	lr, [r4, #4]
   db300:	0c1b      	lsrs	r3, r3, #16
   db302:	fb0a e303 	mla	r3, sl, r3, lr
   db306:	eb03 4318 	add.w	r3, r3, r8, lsr #16
   db30a:	454f      	cmp	r7, r9
   db30c:	ea4f 4813 	mov.w	r8, r3, lsr #16
   db310:	d901      	bls.n	db316 <__multiply+0x108>
   db312:	465c      	mov	r4, fp
   db314:	e7e3      	b.n	db2de <__multiply+0xd0>
   db316:	6063      	str	r3, [r4, #4]
   db318:	3504      	adds	r5, #4
   db31a:	e7a7      	b.n	db26c <__multiply+0x5e>
   db31c:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
   db320:	b913      	cbnz	r3, db328 <__multiply+0x11a>
   db322:	3e01      	subs	r6, #1
   db324:	2e00      	cmp	r6, #0
   db326:	dcf9      	bgt.n	db31c <__multiply+0x10e>
   db328:	6106      	str	r6, [r0, #16]
   db32a:	b003      	add	sp, #12
   db32c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000db330 <__pow5mult>:
   db330:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   db334:	4615      	mov	r5, r2
   db336:	f012 0203 	ands.w	r2, r2, #3
   db33a:	4606      	mov	r6, r0
   db33c:	460f      	mov	r7, r1
   db33e:	d007      	beq.n	db350 <__pow5mult+0x20>
   db340:	3a01      	subs	r2, #1
   db342:	4c21      	ldr	r4, [pc, #132]	; (db3c8 <__pow5mult+0x98>)
   db344:	2300      	movs	r3, #0
   db346:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   db34a:	f7ff fe91 	bl	db070 <__multadd>
   db34e:	4607      	mov	r7, r0
   db350:	10ad      	asrs	r5, r5, #2
   db352:	d036      	beq.n	db3c2 <__pow5mult+0x92>
   db354:	6a74      	ldr	r4, [r6, #36]	; 0x24
   db356:	b93c      	cbnz	r4, db368 <__pow5mult+0x38>
   db358:	2010      	movs	r0, #16
   db35a:	f7fa fbc7 	bl	d5aec <malloc>
   db35e:	6270      	str	r0, [r6, #36]	; 0x24
   db360:	6044      	str	r4, [r0, #4]
   db362:	6084      	str	r4, [r0, #8]
   db364:	6004      	str	r4, [r0, #0]
   db366:	60c4      	str	r4, [r0, #12]
   db368:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   db36c:	f8d8 4008 	ldr.w	r4, [r8, #8]
   db370:	b94c      	cbnz	r4, db386 <__pow5mult+0x56>
   db372:	f240 2171 	movw	r1, #625	; 0x271
   db376:	4630      	mov	r0, r6
   db378:	f7ff ff40 	bl	db1fc <__i2b>
   db37c:	2300      	movs	r3, #0
   db37e:	f8c8 0008 	str.w	r0, [r8, #8]
   db382:	4604      	mov	r4, r0
   db384:	6003      	str	r3, [r0, #0]
   db386:	f04f 0800 	mov.w	r8, #0
   db38a:	07eb      	lsls	r3, r5, #31
   db38c:	d50a      	bpl.n	db3a4 <__pow5mult+0x74>
   db38e:	4639      	mov	r1, r7
   db390:	4622      	mov	r2, r4
   db392:	4630      	mov	r0, r6
   db394:	f7ff ff3b 	bl	db20e <__multiply>
   db398:	4639      	mov	r1, r7
   db39a:	4681      	mov	r9, r0
   db39c:	4630      	mov	r0, r6
   db39e:	f7ff fe50 	bl	db042 <_Bfree>
   db3a2:	464f      	mov	r7, r9
   db3a4:	106d      	asrs	r5, r5, #1
   db3a6:	d00c      	beq.n	db3c2 <__pow5mult+0x92>
   db3a8:	6820      	ldr	r0, [r4, #0]
   db3aa:	b108      	cbz	r0, db3b0 <__pow5mult+0x80>
   db3ac:	4604      	mov	r4, r0
   db3ae:	e7ec      	b.n	db38a <__pow5mult+0x5a>
   db3b0:	4622      	mov	r2, r4
   db3b2:	4621      	mov	r1, r4
   db3b4:	4630      	mov	r0, r6
   db3b6:	f7ff ff2a 	bl	db20e <__multiply>
   db3ba:	6020      	str	r0, [r4, #0]
   db3bc:	f8c0 8000 	str.w	r8, [r0]
   db3c0:	e7f4      	b.n	db3ac <__pow5mult+0x7c>
   db3c2:	4638      	mov	r0, r7
   db3c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   db3c8:	000dc680 	.word	0x000dc680

000db3cc <__lshift>:
   db3cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   db3d0:	460c      	mov	r4, r1
   db3d2:	ea4f 1a62 	mov.w	sl, r2, asr #5
   db3d6:	6926      	ldr	r6, [r4, #16]
   db3d8:	6849      	ldr	r1, [r1, #4]
   db3da:	68a3      	ldr	r3, [r4, #8]
   db3dc:	4456      	add	r6, sl
   db3de:	4607      	mov	r7, r0
   db3e0:	4691      	mov	r9, r2
   db3e2:	1c75      	adds	r5, r6, #1
   db3e4:	42ab      	cmp	r3, r5
   db3e6:	da02      	bge.n	db3ee <__lshift+0x22>
   db3e8:	3101      	adds	r1, #1
   db3ea:	005b      	lsls	r3, r3, #1
   db3ec:	e7fa      	b.n	db3e4 <__lshift+0x18>
   db3ee:	4638      	mov	r0, r7
   db3f0:	f7ff fdf2 	bl	dafd8 <_Balloc>
   db3f4:	2300      	movs	r3, #0
   db3f6:	4680      	mov	r8, r0
   db3f8:	f100 0114 	add.w	r1, r0, #20
   db3fc:	461a      	mov	r2, r3
   db3fe:	4553      	cmp	r3, sl
   db400:	da03      	bge.n	db40a <__lshift+0x3e>
   db402:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   db406:	3301      	adds	r3, #1
   db408:	e7f9      	b.n	db3fe <__lshift+0x32>
   db40a:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
   db40e:	6920      	ldr	r0, [r4, #16]
   db410:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   db414:	f019 091f 	ands.w	r9, r9, #31
   db418:	f104 0114 	add.w	r1, r4, #20
   db41c:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
   db420:	d014      	beq.n	db44c <__lshift+0x80>
   db422:	f1c9 0c20 	rsb	ip, r9, #32
   db426:	2200      	movs	r2, #0
   db428:	6808      	ldr	r0, [r1, #0]
   db42a:	fa00 f009 	lsl.w	r0, r0, r9
   db42e:	4302      	orrs	r2, r0
   db430:	469a      	mov	sl, r3
   db432:	f843 2b04 	str.w	r2, [r3], #4
   db436:	f851 2b04 	ldr.w	r2, [r1], #4
   db43a:	458e      	cmp	lr, r1
   db43c:	fa22 f20c 	lsr.w	r2, r2, ip
   db440:	d8f2      	bhi.n	db428 <__lshift+0x5c>
   db442:	f8ca 2004 	str.w	r2, [sl, #4]
   db446:	b142      	cbz	r2, db45a <__lshift+0x8e>
   db448:	1cb5      	adds	r5, r6, #2
   db44a:	e006      	b.n	db45a <__lshift+0x8e>
   db44c:	3b04      	subs	r3, #4
   db44e:	f851 2b04 	ldr.w	r2, [r1], #4
   db452:	f843 2f04 	str.w	r2, [r3, #4]!
   db456:	458e      	cmp	lr, r1
   db458:	d8f9      	bhi.n	db44e <__lshift+0x82>
   db45a:	3d01      	subs	r5, #1
   db45c:	4638      	mov	r0, r7
   db45e:	f8c8 5010 	str.w	r5, [r8, #16]
   db462:	4621      	mov	r1, r4
   db464:	f7ff fded 	bl	db042 <_Bfree>
   db468:	4640      	mov	r0, r8
   db46a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000db46e <__mcmp>:
   db46e:	6903      	ldr	r3, [r0, #16]
   db470:	690a      	ldr	r2, [r1, #16]
   db472:	1a9b      	subs	r3, r3, r2
   db474:	b510      	push	{r4, lr}
   db476:	d111      	bne.n	db49c <__mcmp+0x2e>
   db478:	0092      	lsls	r2, r2, #2
   db47a:	3014      	adds	r0, #20
   db47c:	3114      	adds	r1, #20
   db47e:	1883      	adds	r3, r0, r2
   db480:	440a      	add	r2, r1
   db482:	f853 4d04 	ldr.w	r4, [r3, #-4]!
   db486:	f852 1d04 	ldr.w	r1, [r2, #-4]!
   db48a:	428c      	cmp	r4, r1
   db48c:	d002      	beq.n	db494 <__mcmp+0x26>
   db48e:	d307      	bcc.n	db4a0 <__mcmp+0x32>
   db490:	2001      	movs	r0, #1
   db492:	bd10      	pop	{r4, pc}
   db494:	4298      	cmp	r0, r3
   db496:	d3f4      	bcc.n	db482 <__mcmp+0x14>
   db498:	2000      	movs	r0, #0
   db49a:	bd10      	pop	{r4, pc}
   db49c:	4618      	mov	r0, r3
   db49e:	bd10      	pop	{r4, pc}
   db4a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   db4a4:	bd10      	pop	{r4, pc}

000db4a6 <__mdiff>:
   db4a6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   db4aa:	460c      	mov	r4, r1
   db4ac:	4607      	mov	r7, r0
   db4ae:	4611      	mov	r1, r2
   db4b0:	4620      	mov	r0, r4
   db4b2:	4615      	mov	r5, r2
   db4b4:	f7ff ffdb 	bl	db46e <__mcmp>
   db4b8:	1e06      	subs	r6, r0, #0
   db4ba:	d108      	bne.n	db4ce <__mdiff+0x28>
   db4bc:	4631      	mov	r1, r6
   db4be:	4638      	mov	r0, r7
   db4c0:	f7ff fd8a 	bl	dafd8 <_Balloc>
   db4c4:	2301      	movs	r3, #1
   db4c6:	6103      	str	r3, [r0, #16]
   db4c8:	6146      	str	r6, [r0, #20]
   db4ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   db4ce:	bfbc      	itt	lt
   db4d0:	4623      	movlt	r3, r4
   db4d2:	462c      	movlt	r4, r5
   db4d4:	4638      	mov	r0, r7
   db4d6:	6861      	ldr	r1, [r4, #4]
   db4d8:	bfba      	itte	lt
   db4da:	461d      	movlt	r5, r3
   db4dc:	2601      	movlt	r6, #1
   db4de:	2600      	movge	r6, #0
   db4e0:	f7ff fd7a 	bl	dafd8 <_Balloc>
   db4e4:	692b      	ldr	r3, [r5, #16]
   db4e6:	60c6      	str	r6, [r0, #12]
   db4e8:	6926      	ldr	r6, [r4, #16]
   db4ea:	f105 0914 	add.w	r9, r5, #20
   db4ee:	3414      	adds	r4, #20
   db4f0:	eb04 0786 	add.w	r7, r4, r6, lsl #2
   db4f4:	eb09 0883 	add.w	r8, r9, r3, lsl #2
   db4f8:	f100 0514 	add.w	r5, r0, #20
   db4fc:	f04f 0c00 	mov.w	ip, #0
   db500:	f854 3b04 	ldr.w	r3, [r4], #4
   db504:	f859 2b04 	ldr.w	r2, [r9], #4
   db508:	fa1c f183 	uxtah	r1, ip, r3
   db50c:	fa1f fe82 	uxth.w	lr, r2
   db510:	0c12      	lsrs	r2, r2, #16
   db512:	ebce 0101 	rsb	r1, lr, r1
   db516:	ebc2 4313 	rsb	r3, r2, r3, lsr #16
   db51a:	eb03 4321 	add.w	r3, r3, r1, asr #16
   db51e:	b289      	uxth	r1, r1
   db520:	ea4f 4c23 	mov.w	ip, r3, asr #16
   db524:	45c8      	cmp	r8, r9
   db526:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
   db52a:	46a6      	mov	lr, r4
   db52c:	f845 3b04 	str.w	r3, [r5], #4
   db530:	d8e6      	bhi.n	db500 <__mdiff+0x5a>
   db532:	45be      	cmp	lr, r7
   db534:	d20e      	bcs.n	db554 <__mdiff+0xae>
   db536:	f85e 1b04 	ldr.w	r1, [lr], #4
   db53a:	fa1c f281 	uxtah	r2, ip, r1
   db53e:	1413      	asrs	r3, r2, #16
   db540:	eb03 4311 	add.w	r3, r3, r1, lsr #16
   db544:	b292      	uxth	r2, r2
   db546:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   db54a:	ea4f 4c23 	mov.w	ip, r3, asr #16
   db54e:	f845 2b04 	str.w	r2, [r5], #4
   db552:	e7ee      	b.n	db532 <__mdiff+0x8c>
   db554:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   db558:	b90b      	cbnz	r3, db55e <__mdiff+0xb8>
   db55a:	3e01      	subs	r6, #1
   db55c:	e7fa      	b.n	db554 <__mdiff+0xae>
   db55e:	6106      	str	r6, [r0, #16]
   db560:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000db564 <__ulp>:
   db564:	4b12      	ldr	r3, [pc, #72]	; (db5b0 <__ulp+0x4c>)
   db566:	ee10 2a90 	vmov	r2, s1
   db56a:	401a      	ands	r2, r3
   db56c:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
   db570:	2b00      	cmp	r3, #0
   db572:	dd02      	ble.n	db57a <__ulp+0x16>
   db574:	2000      	movs	r0, #0
   db576:	4619      	mov	r1, r3
   db578:	e017      	b.n	db5aa <__ulp+0x46>
   db57a:	425b      	negs	r3, r3
   db57c:	151b      	asrs	r3, r3, #20
   db57e:	2b13      	cmp	r3, #19
   db580:	f04f 0000 	mov.w	r0, #0
   db584:	f04f 0100 	mov.w	r1, #0
   db588:	dc04      	bgt.n	db594 <__ulp+0x30>
   db58a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   db58e:	fa42 f103 	asr.w	r1, r2, r3
   db592:	e00a      	b.n	db5aa <__ulp+0x46>
   db594:	3b14      	subs	r3, #20
   db596:	2b1e      	cmp	r3, #30
   db598:	f04f 0201 	mov.w	r2, #1
   db59c:	bfda      	itte	le
   db59e:	f1c3 031f 	rsble	r3, r3, #31
   db5a2:	fa02 f303 	lslle.w	r3, r2, r3
   db5a6:	4613      	movgt	r3, r2
   db5a8:	4618      	mov	r0, r3
   db5aa:	ec41 0b10 	vmov	d0, r0, r1
   db5ae:	4770      	bx	lr
   db5b0:	7ff00000 	.word	0x7ff00000

000db5b4 <__b2d>:
   db5b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   db5b6:	6905      	ldr	r5, [r0, #16]
   db5b8:	f100 0614 	add.w	r6, r0, #20
   db5bc:	eb06 0585 	add.w	r5, r6, r5, lsl #2
   db5c0:	1f2f      	subs	r7, r5, #4
   db5c2:	f855 4c04 	ldr.w	r4, [r5, #-4]
   db5c6:	4620      	mov	r0, r4
   db5c8:	f7ff fdcb 	bl	db162 <__hi0bits>
   db5cc:	f1c0 0320 	rsb	r3, r0, #32
   db5d0:	280a      	cmp	r0, #10
   db5d2:	600b      	str	r3, [r1, #0]
   db5d4:	dc14      	bgt.n	db600 <__b2d+0x4c>
   db5d6:	f1c0 0e0b 	rsb	lr, r0, #11
   db5da:	fa24 f10e 	lsr.w	r1, r4, lr
   db5de:	42be      	cmp	r6, r7
   db5e0:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
   db5e4:	bf34      	ite	cc
   db5e6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   db5ea:	2100      	movcs	r1, #0
   db5ec:	3015      	adds	r0, #21
   db5ee:	fa04 f000 	lsl.w	r0, r4, r0
   db5f2:	fa21 f10e 	lsr.w	r1, r1, lr
   db5f6:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   db5fa:	ea40 0201 	orr.w	r2, r0, r1
   db5fe:	e023      	b.n	db648 <__b2d+0x94>
   db600:	42be      	cmp	r6, r7
   db602:	bf3a      	itte	cc
   db604:	f1a5 0708 	subcc.w	r7, r5, #8
   db608:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   db60c:	2100      	movcs	r1, #0
   db60e:	380b      	subs	r0, #11
   db610:	d015      	beq.n	db63e <__b2d+0x8a>
   db612:	4084      	lsls	r4, r0
   db614:	f1c0 0520 	rsb	r5, r0, #32
   db618:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
   db61c:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
   db620:	42b7      	cmp	r7, r6
   db622:	fa21 fe05 	lsr.w	lr, r1, r5
   db626:	ea44 030e 	orr.w	r3, r4, lr
   db62a:	bf8c      	ite	hi
   db62c:	f857 4c04 	ldrhi.w	r4, [r7, #-4]
   db630:	2400      	movls	r4, #0
   db632:	fa01 f000 	lsl.w	r0, r1, r0
   db636:	40ec      	lsrs	r4, r5
   db638:	ea40 0204 	orr.w	r2, r0, r4
   db63c:	e004      	b.n	db648 <__b2d+0x94>
   db63e:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
   db642:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   db646:	460a      	mov	r2, r1
   db648:	ec43 2b10 	vmov	d0, r2, r3
   db64c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000db64e <__d2b>:
   db64e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   db652:	460e      	mov	r6, r1
   db654:	2101      	movs	r1, #1
   db656:	ec59 8b10 	vmov	r8, r9, d0
   db65a:	4615      	mov	r5, r2
   db65c:	f7ff fcbc 	bl	dafd8 <_Balloc>
   db660:	f3c9 540a 	ubfx	r4, r9, #20, #11
   db664:	4607      	mov	r7, r0
   db666:	f3c9 0313 	ubfx	r3, r9, #0, #20
   db66a:	b10c      	cbz	r4, db670 <__d2b+0x22>
   db66c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   db670:	9301      	str	r3, [sp, #4]
   db672:	f1b8 0f00 	cmp.w	r8, #0
   db676:	d019      	beq.n	db6ac <__d2b+0x5e>
   db678:	a802      	add	r0, sp, #8
   db67a:	f840 8d08 	str.w	r8, [r0, #-8]!
   db67e:	f7ff fd90 	bl	db1a2 <__lo0bits>
   db682:	9b00      	ldr	r3, [sp, #0]
   db684:	b148      	cbz	r0, db69a <__d2b+0x4c>
   db686:	9a01      	ldr	r2, [sp, #4]
   db688:	f1c0 0120 	rsb	r1, r0, #32
   db68c:	fa02 f101 	lsl.w	r1, r2, r1
   db690:	430b      	orrs	r3, r1
   db692:	40c2      	lsrs	r2, r0
   db694:	617b      	str	r3, [r7, #20]
   db696:	9201      	str	r2, [sp, #4]
   db698:	e000      	b.n	db69c <__d2b+0x4e>
   db69a:	617b      	str	r3, [r7, #20]
   db69c:	9b01      	ldr	r3, [sp, #4]
   db69e:	61bb      	str	r3, [r7, #24]
   db6a0:	2b00      	cmp	r3, #0
   db6a2:	bf14      	ite	ne
   db6a4:	2102      	movne	r1, #2
   db6a6:	2101      	moveq	r1, #1
   db6a8:	6139      	str	r1, [r7, #16]
   db6aa:	e007      	b.n	db6bc <__d2b+0x6e>
   db6ac:	a801      	add	r0, sp, #4
   db6ae:	f7ff fd78 	bl	db1a2 <__lo0bits>
   db6b2:	9b01      	ldr	r3, [sp, #4]
   db6b4:	617b      	str	r3, [r7, #20]
   db6b6:	2101      	movs	r1, #1
   db6b8:	6139      	str	r1, [r7, #16]
   db6ba:	3020      	adds	r0, #32
   db6bc:	b134      	cbz	r4, db6cc <__d2b+0x7e>
   db6be:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
   db6c2:	4404      	add	r4, r0
   db6c4:	6034      	str	r4, [r6, #0]
   db6c6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   db6ca:	e009      	b.n	db6e0 <__d2b+0x92>
   db6cc:	eb07 0381 	add.w	r3, r7, r1, lsl #2
   db6d0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   db6d4:	6030      	str	r0, [r6, #0]
   db6d6:	6918      	ldr	r0, [r3, #16]
   db6d8:	f7ff fd43 	bl	db162 <__hi0bits>
   db6dc:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
   db6e0:	6028      	str	r0, [r5, #0]
   db6e2:	4638      	mov	r0, r7
   db6e4:	b003      	add	sp, #12
   db6e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000db6ea <__ratio>:
   db6ea:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   db6ee:	4688      	mov	r8, r1
   db6f0:	4669      	mov	r1, sp
   db6f2:	4681      	mov	r9, r0
   db6f4:	f7ff ff5e 	bl	db5b4 <__b2d>
   db6f8:	a901      	add	r1, sp, #4
   db6fa:	4640      	mov	r0, r8
   db6fc:	ec55 4b10 	vmov	r4, r5, d0
   db700:	f7ff ff58 	bl	db5b4 <__b2d>
   db704:	f8d9 3010 	ldr.w	r3, [r9, #16]
   db708:	f8d8 2010 	ldr.w	r2, [r8, #16]
   db70c:	1a9a      	subs	r2, r3, r2
   db70e:	e89d 000a 	ldmia.w	sp, {r1, r3}
   db712:	1ac9      	subs	r1, r1, r3
   db714:	ec57 6b10 	vmov	r6, r7, d0
   db718:	eb01 1342 	add.w	r3, r1, r2, lsl #5
   db71c:	2b00      	cmp	r3, #0
   db71e:	bfcc      	ite	gt
   db720:	eb05 5503 	addgt.w	r5, r5, r3, lsl #20
   db724:	eba7 5703 	suble.w	r7, r7, r3, lsl #20
   db728:	4632      	mov	r2, r6
   db72a:	463b      	mov	r3, r7
   db72c:	4620      	mov	r0, r4
   db72e:	4629      	mov	r1, r5
   db730:	f7fd fa9a 	bl	d8c68 <__aeabi_ddiv>
   db734:	ec41 0b10 	vmov	d0, r0, r1
   db738:	b003      	add	sp, #12
   db73a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000db73e <__copybits>:
   db73e:	3901      	subs	r1, #1
   db740:	b510      	push	{r4, lr}
   db742:	1149      	asrs	r1, r1, #5
   db744:	6914      	ldr	r4, [r2, #16]
   db746:	3101      	adds	r1, #1
   db748:	f102 0314 	add.w	r3, r2, #20
   db74c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   db750:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   db754:	42a3      	cmp	r3, r4
   db756:	4602      	mov	r2, r0
   db758:	d204      	bcs.n	db764 <__copybits+0x26>
   db75a:	f853 2b04 	ldr.w	r2, [r3], #4
   db75e:	f840 2b04 	str.w	r2, [r0], #4
   db762:	e7f7      	b.n	db754 <__copybits+0x16>
   db764:	2300      	movs	r3, #0
   db766:	428a      	cmp	r2, r1
   db768:	d202      	bcs.n	db770 <__copybits+0x32>
   db76a:	f842 3b04 	str.w	r3, [r2], #4
   db76e:	e7fa      	b.n	db766 <__copybits+0x28>
   db770:	bd10      	pop	{r4, pc}

000db772 <__any_on>:
   db772:	f100 0214 	add.w	r2, r0, #20
   db776:	6900      	ldr	r0, [r0, #16]
   db778:	114b      	asrs	r3, r1, #5
   db77a:	4298      	cmp	r0, r3
   db77c:	b510      	push	{r4, lr}
   db77e:	db0c      	blt.n	db79a <__any_on+0x28>
   db780:	dd0c      	ble.n	db79c <__any_on+0x2a>
   db782:	f011 011f 	ands.w	r1, r1, #31
   db786:	d009      	beq.n	db79c <__any_on+0x2a>
   db788:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   db78c:	fa24 f001 	lsr.w	r0, r4, r1
   db790:	fa00 f101 	lsl.w	r1, r0, r1
   db794:	428c      	cmp	r4, r1
   db796:	d10c      	bne.n	db7b2 <__any_on+0x40>
   db798:	e000      	b.n	db79c <__any_on+0x2a>
   db79a:	4603      	mov	r3, r0
   db79c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   db7a0:	4293      	cmp	r3, r2
   db7a2:	d904      	bls.n	db7ae <__any_on+0x3c>
   db7a4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   db7a8:	2900      	cmp	r1, #0
   db7aa:	d0f9      	beq.n	db7a0 <__any_on+0x2e>
   db7ac:	e001      	b.n	db7b2 <__any_on+0x40>
   db7ae:	2000      	movs	r0, #0
   db7b0:	bd10      	pop	{r4, pc}
   db7b2:	2001      	movs	r0, #1
   db7b4:	bd10      	pop	{r4, pc}

000db7b6 <_calloc_r>:
   db7b6:	b538      	push	{r3, r4, r5, lr}
   db7b8:	fb02 f401 	mul.w	r4, r2, r1
   db7bc:	4621      	mov	r1, r4
   db7be:	f7fa f9dd 	bl	d5b7c <_malloc_r>
   db7c2:	4605      	mov	r5, r0
   db7c4:	b118      	cbz	r0, db7ce <_calloc_r+0x18>
   db7c6:	4622      	mov	r2, r4
   db7c8:	2100      	movs	r1, #0
   db7ca:	f7fd fd8d 	bl	d92e8 <memset>
   db7ce:	4628      	mov	r0, r5
   db7d0:	bd38      	pop	{r3, r4, r5, pc}

000db7d2 <__env_lock>:
   db7d2:	4770      	bx	lr

000db7d4 <__env_unlock>:
   db7d4:	4770      	bx	lr

000db7d6 <link_code_end>:
	...

000db7d8 <dynalib_user>:
   db7d8:	4021 000d 405d 000d 4089 000d 408d 000d     !@..]@...@...@..
   db7e8:	0000 0000                                   ....

000db7ec <_ZTVN5spark10LogHandlerE>:
	...
   db7fc:	40a9 000d 40cd 000d                         .@...@..

000db804 <_ZTVN5spark16SerialLogHandlerE>:
	...
   db80c:	4181 000d 41b5 000d 7499 000d 40cf 000d     .A...A...t...@..
   db81c:	616c 3d74 6625 6c20 6e6f 253d 2066 6361     lat=%f lon=%f ac
   db82c:	7563 6172 7963 253d 0066 2e25 6636 2500     curacy=%f.%.6f.%
   db83c:	312e 0066 5047 2053 3276 312e 6400 7665     .1f.GPS v2.1.dev
   db84c:	6369 4c65 636f 7461 726f 0000               iceLocator..

000db858 <_ZTV28CellularHelperStringResponse>:
	...
   db860:	4cbd 000d 5954 4550 555f 4b4e 4f4e 4e57     .L..TYPE_UNKNOWN
   db870:	5400 5059 5f45 4b4f 5400 5059 5f45 5245     .TYPE_OK.TYPE_ER
   db880:	4f52 0052 5954 4550 435f 4e4f 454e 5443     ROR.TYPE_CONNECT
   db890:	5400 5059 5f45 4f4e 4143 5252 4549 0052     .TYPE_NOCARRIER.
   db8a0:	5954 4550 4e5f 444f 4149 544c 4e4f 0045     TYPE_NODIALTONE.
   db8b0:	5954 4550 425f 5355 0059 5954 4550 4e5f     TYPE_BUSY.TYPE_N
   db8c0:	414f 534e 4557 0052 5954 4550 505f 4f52     OANSWER.TYPE_PRO
   db8d0:	504d 0054 5954 4550 505f 554c 0053 5954     MPT.TYPE_PLUS.TY
   db8e0:	4550 415f 4f42 5452 4445 7400 7079 3d65     PE_ABORTED.type=
   db8f0:	7830 7825 6300 6c65 756c 616c 2072 6572     0x%x.cellular re
   db900:	7073 6e6f 6573 7420 7079 3d65 7325 6c20     sponse type=%s l
   db910:	6e65 253d 0064 6e5c 5c00 0072 7830 3025     en=%d.\n.\r.0x%0
   db920:	7832 2500 2c64 6425 6b00 7965 7420 6f6f     2x.%d,%d.key too
   db930:	6c20 6e6f 2067 656b 3d79 7325 7620 6c61      long key=%s val
   db940:	6575 253d 0073 4152 0054 4d55 5354 4d00     ue=%s.RAT.UMTS.M
   db950:	4343 4d00 434e 4c00 4341 4300 0049 5342     CC.MNC.LAC.CI.BS
   db960:	4349 4100 4652 4e43 4100 4652 4e43 445f     IC.ARFCN.ARFCN_D
   db970:	4445 5200 4c58 5645 5553 0042 5f54 4441     ED.RXLEVSUB.T_AD
   db980:	0056 5852 454c 0056 4c44 0046 4c55 0046     V.RXLEV.DLF.ULF.
   db990:	5352 5043 4c20 5645 5200 4341 5300 0043     RSCP LEV.RAC.SC.
   db9a0:	4345 304e 4c20 5645 7500 6b6e 6f6e 6e77     ECN0 LEV.unknown
   db9b0:	6b20 7965 253d 2073 6176 756c 3d65 7325      key=%s value=%s
   db9c0:	4d00 4343 003a 4152 3a54 4700 4d53 0020     .MCC:.RAT:.GSM .
   db9d0:	4344 2053 3831 3030 4500 4753 204d 3039     DCS 1800.ESGM 90
   db9e0:	0030 4d55 5354 0020 4733 7520 6b6e 6f6e     0.UMTS .3G unkno
   db9f0:	6e77 4400 5343 3120 3038 2030 726f 3120     wn.DCS 1800 or 1
   dba00:	3039 0030 4745 4d53 3920 3030 3200 2047     900.EGSM 900.2G 
   dba10:	6e75 6e6b 776f 006e 636d 3d63 6425 202c     unknown.mcc=%d, 
   dba20:	6e6d 3d63 6425 202c 616c 3d63 7825 6320     mnc=%d, lac=%x c
   dba30:	3d69 7825 6220 6e61 3d64 7325 7220 7373     i=%x band=%s rss
   dba40:	3d69 6425 7200 7461 553d 544d 2053 7325     i=%d.rat=UMTS %s
   dba50:	6420 666c 253d 2064 6c75 3d66 6425 7200      dlf=%d ulf=%d.r
   dba60:	7461 473d 4d53 2520 2073 7362 6369 253d     at=GSM %s bsic=%
   dba70:	2078 7261 6366 3d6e 6425 7220 6c78 7665     x arfcn=%d rxlev
   dba80:	253d 0064 6573 7672 6369 2065 7325 6e00     =%d.service %s.n
   dba90:	6965 6867 6f62 2072 6425 2520 0073 616c     eighbor %d %s.la
   dbaa0:	3d74 6625 6c20 6e6f 253d 2066 6c61 3d74     t=%f lon=%f alt=
   dbab0:	6425 7520 636e 7265 6174 6e69 7974 253d     %d uncertainty=%
   dbac0:	0064 6176 696c 3d64 6166 736c 0065 6425     d.valid=false.%d
   dbad0:	252c 2c64 2522 2278 222c 7825 2c22 6425     ,%d,"%x","%x",%d
   dbae0:	7300 6174 3d74 6425 6c20 6361 303d 2578     .stat=%d lac=0x%
   dbaf0:	2078 6963 303d 2578 2078 6172 3d74 6425     x ci=0x%x rat=%d
   dbb00:	4100 2b54 4743 4d4d 0a0d 4100 4954 0d30     .AT+CGMM...ATI0.
   dbb10:	000a 5441 432b 4d47 0d52 000a 5441 432b     ..AT+CGMR...AT+C
   dbb20:	5347 0d4e 000a 5441 432b 4d47 0d49 000a     GSN...AT+CGMI...
   dbb30:	4343 4449 4100 2b54 4343 4449 0a0d 5300     CCID.AT+CCID...S
   dbb40:	5241 2d41 3452 5500 4f44 4e50 4100 2b54     ARA-R4.UDOPN.AT+
   dbb50:	4455 504f 3d4e 6425 0a0d 4300 5153 4100     UDOPN=%d...CSQ.A
   dbb60:	2b54 5343 0d51 000a 5441 432b 504f 3d53     T+CSQ...AT+COPS=
   dbb70:	0d30 000a 706f 7265 7461 726f 6120 726c     0...operator alr
   dbb80:	6165 7964 2520 0073 5441 432b 504f 3d53     eady %s.AT+COPS=
   dbb90:	0d32 000a 5441 432b 504f 3d53 2c34 2c32     2...AT+COPS=4,2,
   dbba0:	2522 2273 0a0d 4300 4547 0044 5441 432b     "%s"...CGED.AT+C
   dbbb0:	4547 3d44 6425 0a0d 5500 4c55 434f 4100     GED=%d...UULOC.A
   dbbc0:	2b54 4c55 434f 4543 4c4c 303d 0a0d 4100     T+ULOCCELL=0...A
   dbbd0:	2b54 4c55 434f 323d 322c 302c 252c 2c64     T+ULOC=2,2,0,%d,
   dbbe0:	3035 3030 0a0d 4100 2b54 5243 4745 323d     5000...AT+CREG=2
   dbbf0:	0a0d 4300 4552 0047 5441 432b 4552 3f47     ...CREG.AT+CREG?
   dbc00:	0a0d 4100 2b54 5243 4745 303d 0a0d 4100     ...AT+CREG=0...A
   dbc10:	2b54 5055 4e49 3d47 2522 2273 0a0d 5500     T+UPING="%s"...U
   dbc20:	4e44 5253 004e 5441 552b 4e44 5253 3d4e     DNSRN.AT+UDNSRN=
   dbc30:	2c30 2522 2273 0a0d 2500 2e75 7525 252e     0,"%s"...%u.%u.%
   dbc40:	2e75 7525 0a00 252b 3a73 0020               u.%u..+%s: .

000dbc4c <_ZTV33CellularHelperEnvironmentResponse>:
	...
   dbc54:	4961 000d                                   aI..

000dbc58 <_ZTV32CellularHelperPlusStringResponse>:
	...
   dbc60:	4cf5 000d                                   .L..

000dbc64 <_ZTV26CellularHelperCREGResponse>:
	...
   dbc6c:	4cf5 000d                                   .L..

000dbc70 <_ZTV39CellularHelperEnvironmentResponseStaticILj4EE>:
	...
   dbc78:	4961 000d                                   aI..

000dbc7c <_ZTV23GoogleMapsDeviceLocator>:
	...
   dbc84:	4da5 000d 4dc5 000d 7325 227b 2269 253a     .M...M..%s{"i":%
   dbc94:	2c64 6c22 3a22 7525 222c 2263 253a 2c64     d,"l":%u,"c":%d,
   dbca4:	6e22 3a22 6425 007d 5441 5426 7b00 6322     "n":%d}.AT&T.{"c
   dbcb4:	3a22 227b 226f 223a 7325 2c22 2200 2261     ":{"o":"%s",."a"
   dbcc4:	5b3a 5300 5241 2d41 3347 3035 7000 6275     :[.SARA-G350.pub
   dbcd4:	696c 6873 6f4c 6163 6974 6e6f 7300 6163     lishLocation.sca
   dbce4:	446e 7461 3d61 7325 6800 6f6f 2d6b 6572     nData=%s.hook-re
   dbcf4:	7073 6e6f 6573 252f 2f73 7325 0000               sponse/%s/%s.

000dbd01 <_ZL9BasicFont>:
	...
   dbd09:	0000 005f 0000 0000 0000 0007 0007 0000     .._.............
   dbd19:	1400 147f 147f 0000 2400 7f2a 122a 0000     .........$*.*...
   dbd29:	2300 0813 6264 0000 3600 5549 5022 0000     .#..db...6IU"P..
   dbd39:	0000 0305 0000 0000 1c00 4122 0000 0000     .........."A....
   dbd49:	4100 1c22 0000 0000 0800 1c2a 082a 0000     .A".......*.*...
   dbd59:	0800 3e08 0808 0000 a000 0060 0000 0000     ...>......`.....
   dbd69:	0800 0808 0808 0000 6000 0060 0000 0000     .........``.....
   dbd79:	2000 0810 0204 0000 3e00 4951 3e45 0000     . .......>QIE>..
   dbd89:	0000 7f42 0040 0000 6200 4951 4649 0000     ..B.@....bQIIF..
   dbd99:	2200 4941 3649 0000 1800 1214 107f 0000     ."AII6..........
   dbda9:	2700 4545 3945 0000 3c00 494a 3049 0000     .'EEE9...<JII0..
   dbdb9:	0100 0971 0305 0000 3600 4949 3649 0000     ..q......6III6..
   dbdc9:	0600 4949 1e29 0000 0000 3636 0000 0000     ..II).....66....
   dbdd9:	0000 6cac 0000 0000 0800 2214 0041 0000     ...l......."A...
   dbde9:	1400 1414 1414 0000 4100 1422 0008 0000     .........A".....
   dbdf9:	0200 5101 0609 0000 3200 7949 3e41 0000     ...Q.....2IyA>..
   dbe09:	7e00 0909 7e09 0000 7f00 4949 3649 0000     .~...~....III6..
   dbe19:	3e00 4141 2241 0000 7f00 4141 1c22 0000     .>AAA"....AA"...
   dbe29:	7f00 4949 4149 0000 7f00 0909 0109 0000     ..IIIA..........
   dbe39:	3e00 4141 7251 0000 7f00 0808 7f08 0000     .>AAQr..........
   dbe49:	4100 417f 0000 0000 2000 4140 013f 0000     .A.A..... @A?...
   dbe59:	7f00 1408 4122 0000 7f00 4040 4040 0000     ...."A....@@@@..
   dbe69:	7f00 0c02 7f02 0000 7f00 0804 7f10 0000     ................
   dbe79:	3e00 4141 3e41 0000 7f00 0909 0609 0000     .>AAA>..........
   dbe89:	3e00 5141 5e21 0000 7f00 1909 4629 0000     .>AQ!^......)F..
   dbe99:	2600 4949 3249 0000 0100 7f01 0101 0000     .&III2..........
   dbea9:	3f00 4040 3f40 0000 1f00 4020 1f20 0000     .?@@@?.... @ ...
   dbeb9:	3f00 3840 3f40 0000 6300 0814 6314 0000     .?@8@?...c...c..
   dbec9:	0300 7804 0304 0000 6100 4951 4345 0000     ...x.....aQIEC..
   dbed9:	7f00 4141 0000 0000 0200 0804 2010 0000     ..AA......... ..
   dbee9:	4100 7f41 0000 0000 0400 0102 0402 0000     .AA.............
   dbef9:	8000 8080 8080 0000 0100 0402 0000 0000     ................
   dbf09:	2000 5454 7854 0000 7f00 4448 3844 0000     . TTTx....HDD8..
   dbf19:	3800 4444 0028 0000 3800 4444 7f48 0000     .8DD(....8DDH...
   dbf29:	3800 5454 1854 0000 0800 097e 0002 0000     .8TTT.....~.....
   dbf39:	1800 a4a4 7ca4 0000 7f00 0408 7804 0000     .....|.......x..
   dbf49:	0000 007d 0000 0000 8000 7d84 0000 0000     ..}........}....
   dbf59:	7f00 2810 0044 0000 4100 407f 0000 0000     ...(D....A.@....
   dbf69:	7c00 1804 7804 0000 7c00 0408 007c 0000     .|...x...|..|...
   dbf79:	3800 4444 0038 0000 fc00 2424 0018 0000     .8DD8.....$$....
   dbf89:	1800 2424 00fc 0000 0000 087c 0004 0000     ..$$......|.....
   dbf99:	4800 5454 0024 0000 0400 447f 0000 0000     .HTT$......D....
   dbfa9:	3c00 4040 007c 0000 1c00 4020 1c20 0000     .<@@|..... @ ...
   dbfb9:	3c00 3040 3c40 0000 4400 1028 4428 0000     .<@0@<...D(.(D..
   dbfc9:	1c00 a0a0 007c 0000 4400 5464 444c 0000     ....|....DdTLD..
   dbfd9:	0800 4136 0000 0000 0000 007f 0000 0000     ..6A............
   dbfe9:	4100 0836 0000 0000 0200 0101 0102 0000     .A6.............
   dbff9:	0200 0505 0002 0000 0000 0000                    ...........

000dc004 <_ZTVN5spark13CellularClassE>:
	...
   dc00c:	5cc3 000d 5cb9 000d 5caf 000d 5c65 000d     .\...\...\..e\..
   dc01c:	5ca3 000d 5c97 000d 5c8b 000d 5c83 000d     .\...\...\...\..
   dc02c:	5c79 000d 5c6f 000d 79a9 000d               y\..o\...y..

000dc038 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   dc040:	5cfd 000d 5d03 000d 5d47 000d 5d11 000d     .\...]..G]...]..
   dc050:	5cff 000d                                   .\..

000dc054 <_ZTVN5spark13EthernetClassE>:
	...
   dc05c:	631f 000d 6315 000d 630b 000d 6301 000d     .c...c...c...c..
   dc06c:	62f5 000d 62e9 000d 62dd 000d 62d5 000d     .b...b...b...b..
   dc07c:	62cb 000d 62c1 000d 79a9 000d               .b...b...y..

000dc088 <_ZTV7TwoWire>:
	...
   dc090:	633d 000d 6387 000d 635f 000d 633f 000d     =c...c.._c..?c..
   dc0a0:	6367 000d 636f 000d 6377 000d 637f 000d     gc..oc..wc...c..

000dc0b0 <_ZTV9IPAddress>:
	...
   dc0b8:	63f1 000d 63e1 000d 63e3 000d 2e30 0030     .c...c...c..0.0.
   dc0c8:	7274 6575 2500 2a2e 666c 2500 0067 756e     true.%.*lf.%g.nu
   dc0d8:	6c6c 7500 3025 7834 0000 0000               ll.u%04x....

000dc0e4 <_ZTVN5spark16JSONStreamWriterE>:
	...
   dc0ec:	6875 000d 689b 000d 684f 000d 64f3 000d     uh...h..Oh...d..

000dc0fc <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   dc104:	6cf1 000d 6d05 000d 764d 000d 6857 000d     .l...m..Mv..Wh..
   dc114:	6162 6475 5300 7265 6169 006c 6553 6972     baud.Serial.Seri
   dc124:	6c61 0031 7974 6570 7000 7261 6d61 6300     al1.type.param.c
   dc134:	646d 6900 0064 6e68 0064 7473 6d72 6600     md.id.hnd.strm.f
   dc144:	6c69 0074 766c 006c 6461 4864 6e61 6c64     ilt.lvl.addHandl
   dc154:	7265 7200 6d65 766f 4865 6e61 6c64 7265     er.removeHandler
   dc164:	6500 756e 486d 6e61 6c64 7265 0073 534a     .enumHandlers.JS
   dc174:	4e4f 7453 6572 6d61 6f4c 4867 6e61 6c64     ONStreamLogHandl
   dc184:	7265 6100 7070 2500 3130 7530 0020 205d     er.app.%010u .] 
   dc194:	2c00 0020 2928 203a 2000 005b 6f63 6564     ., .(): . [.code
   dc1a4:	3d20 0020 6925 6400 7465 6961 736c 3d20      = .%i.details =
   dc1b4:	0020 6e6c 6600 006e 6f63 6564 6400 7465      .ln.fn.code.det
   dc1c4:	6961 006c 6f6e 656e 7400 6172 6563 6900     ail.none.trace.i
   dc1d4:	666e 006f 6177 6e72 6500 7272 726f 7000     nfo.warn.error.p
   dc1e4:	6e61 6369 6100 6c6c 0000 0000               anic.all....

000dc1f0 <_ZTVN5spark16StreamLogHandlerE>:
	...
   dc1f8:	6cc5 000d 6cdd 000d 7499 000d 40cf 000d     .l...l...t...@..

000dc208 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   dc210:	6873 000d 68a9 000d 73c1 000d 6859 000d     sh...h...s..Yh..

000dc220 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   dc228:	6871 000d 68b7 000d 6c09 000d 68c5 000d     qh...h...l...h..

000dc238 <_ZTVN5spark9MeshClassE>:
	...
   dc240:	7823 000d 7819 000d 780f 000d 7805 000d     #x...x...x...x..
   dc250:	77f9 000d 77ed 000d 77e1 000d 77d9 000d     .w...w...w...w..
   dc260:	77cf 000d 77c5 000d 79a9 000d               .w...w...y..

000dc26c <_ZTVN5spark12NetworkClassE>:
	...
   dc274:	7941 000d 794b 000d 7955 000d 795f 000d     Ay..Ky..Uy.._y..
   dc284:	7969 000d 7975 000d 7981 000d 798d 000d     iy..uy...y...y..
   dc294:	7995 000d 799f 000d 79a9 000d 2b25 3330     .y...y...y..%+03
   dc2a4:	3a64 3025 7532 2500 2d59 6d25 252d 5464     d:%02u.%Y-%m-%dT
   dc2b4:	4825 253a 3a4d 5325 7a25 6100 6373 6974     %H:%M:%S%z.ascti
   dc2c4:	656d 0000                                   me..

000dc2c8 <_ZTV11USARTSerial>:
	...
   dc2d0:	8015 000d 8065 000d 8073 000d 7a89 000d     ....e...s....z..
   dc2e0:	8029 000d 804b 000d 8037 000d 805f 000d     )...K...7..._...
   dc2f0:	8017 000d 801b 000d                         ........

000dc2f8 <_ZTV9USBSerial>:
	...
   dc300:	8129 000d 8179 000d 8187 000d 7a89 000d     )...y........z..
   dc310:	8165 000d 812b 000d 8141 000d 8173 000d     e...+...A...s...
   dc320:	8157 000d 8125 000d                         W...%...

000dc328 <_ZSt7nothrow>:
	...

000dc329 <_ctype_>:
   dc329:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   dc339:	2020 2020 2020 2020 2020 2020 2020 2020                     
   dc349:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   dc359:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   dc369:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   dc379:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   dc389:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   dc399:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   dc3a9:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000dc42c <__sf_fake_stdin>:
	...

000dc44c <__sf_fake_stdout>:
	...

000dc46c <__sf_fake_stderr>:
	...
   dc48c:	4f50 4953 0058 002e                         POSIX...

000dc494 <__month_lengths>:
   dc494:	001f 0000 001c 0000 001f 0000 001e 0000     ................
   dc4a4:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   dc4b4:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   dc4c4:	001f 0000 001d 0000 001f 0000 001e 0000     ................
   dc4d4:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   dc4e4:	001e 0000 001f 0000 001e 0000 001f 0000     ................

000dc4f4 <fpi.5344>:
   dc4f4:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   dc504:	0000 0000                                   ....

000dc508 <fpinan.5380>:
   dc508:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
   dc518:	0000 0000 666e 6900 696e 7974 6100 006e     ....nf.inity.an.

000dc528 <tinytens>:
   dc528:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   dc538:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   dc548:	6f43 64ac 0628 1168 5a54 4700 544d 2500     Co.d(.h.TZ.GMT.%
   dc558:	3031 5e5b 2d30 2c39 2d2b 255d 006e 254d     10[^0-9,+-]%n.M%
   dc568:	7568 6e25 252e 7568 6e25 252e 7568 6e25     hu%n.%hu%n.%hu%n
   dc578:	2f00 6825 2575 3a6e 6825 2575 3a6e 6825     ./%hu%n:%hu%n:%h
   dc588:	2575 006e 0000 0000                         u%n.....

000dc590 <__mprec_tens>:
   dc590:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   dc5a0:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   dc5b0:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   dc5c0:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   dc5d0:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   dc5e0:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   dc5f0:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   dc600:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   dc610:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   dc620:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   dc630:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   dc640:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   dc650:	9db4 79d9 7843 44ea                         ...yCx.D

000dc658 <__mprec_bigtens>:
   dc658:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   dc668:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   dc678:	bf3c 7f73 4fdd 7515                         <.s..O.u

000dc680 <p05.5387>:
   dc680:	0005 0000 0019 0000 007d 0000               ........}...

000dc68c <link_const_variable_data_end>:
   dc68c:	000d439d 	.word	0x000d439d
   dc690:	000d4d7d 	.word	0x000d4d7d
   dc694:	000d5459 	.word	0x000d5459
   dc698:	000d564d 	.word	0x000d564d
   dc69c:	000d5c3d 	.word	0x000d5c3d
   dc6a0:	000d5ccd 	.word	0x000d5ccd
   dc6a4:	000d6329 	.word	0x000d6329
   dc6a8:	000d7489 	.word	0x000d7489
   dc6ac:	000d78f1 	.word	0x000d78f1
   dc6b0:	000d7a75 	.word	0x000d7a75
   dc6b4:	000d7bc9 	.word	0x000d7bc9
   dc6b8:	000d7e85 	.word	0x000d7e85
   dc6bc:	000d8001 	.word	0x000d8001
   dc6c0:	000d8415 	.word	0x000d8415
   dc6c4:	000d84d9 	.word	0x000d84d9
   dc6c8:	000d855d 	.word	0x000d855d
   dc6cc:	000d85e1 	.word	0x000d85e1
